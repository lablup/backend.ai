[etcd]
namespace = "local"                         # env: BACKEND_NAMESPACE
addr = { host = "127.0.0.1", port = 2379 }  # env: BACKEND_ETCD_ADDR (host:port)
user = "manager"                            # env: BACKEND_ETCD_USER
password = "ETCD_PASSWORD"                  # env: BACKEND_ETCD_PASSWORD


[db]
# One of: "postgresql"
# Currently we only support PostgreSQL.
type = "postgresql"

# Address to access the database.
# NOTE: It is RECOMMENDED to use domain names in cloud setups because the IP addresses
# may change upon automatic upgrade or migration.
addr = { host = "localhost", port = 5432 }  # env: BACKEND_DB_ADDR

# Database name.
name = "backend"                            # env: BACKEND_DB_NAME

# Database account credentials.
user = "postgres"                           # env: BACKEND_DB_USER
password = "DB_PASSWORD"                    # env: BACKEND_DB_PASSWORD

# The connection pool's initial size
# (See https://docs.sqlalchemy.org/en/20/core/engines.html#sqlalchemy.create_engine.params.pool_size)
# pool-size = 8

# The connections for lock lifetime
# Distribution locks wait for `lock-conn-timeout` seconds and lock context should finish within this time.
# Default is 0, which means infinite
# lock-conn-timeout = 30

# This setting causes the pool to recycle connections after the given number of seconds has passed.
# Default is -1, which means infinite. 
# https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine.params.pool_recycle
# https://docs.sqlalchemy.org/en/14/core/pooling.html#setting-pool-recycle
# pool-recycle = -1

# This setting eliminates DB error due to stale pooled connections by ping at the start of each connection pool checkout.
# It adds a small overhead to the connection checkout process.
# https://docs.sqlalchemy.org/en/14/core/pooling.html#disconnect-handling-pessimistic
# Default is false.
# pool-pre-ping = false

# The maximum allowed overflow of the connection pool
# (See https://docs.sqlalchemy.org/en/20/core/engines.html#sqlalchemy.create_engine.params.max_overflow)
# max-overflow = 64

# NOTE: The warning threshold for the number of concurrent transactions in a single manager process
#       is determined as dividing the addition of the pool-size and max-overflow settings by two
#       because the threshold applies to both generic and read-only transactions.

# NOTE: Redis settings are configured in etcd as it is shared by both the manager and agents.


[manager]
# The number of worker processes to handle API requests and event messages.
# If set zero, it uses the number of CPU cores in the system.
num-proc = 4                                               # env: BACKEND_MANAGER_NPROC

# An arbitrary string used to salt when generating secret tokens (e.g., JWT)
# Currently only some plugins use this configuration in the manager.
secret = "XXXXXXXXXXXXXX"

# Specify the user/group used for the manager daemon,
# to which the manager changes after reading the daemon configuration and SSL certifiactes.
# If not specified, it uses the file permission of ai/backend/manager/server.py
# This config is effective only when the manager daemon is started as the root user.
# Note that the vfolder (storage) permission must match with this.
user = "nobody"
group = "nobody"

# Set the service hostname/port to accept API requests.
service-addr = { host = "0.0.0.0", port = 8080 }
# env: BACKEND_SERVICE_IP, BACKEND_SERVICE_PORT

# Set the SSL certificate chain and the private keys used for serving the API requests.
ssl-enabled = false
#ssl-cert = "/etc/backend.ai/ssl/apiserver-fullchain.pem"   # env: BACKNED_SSL_CERT
#ssl-privkey = "/etc/backend.ai/ssl/apiserver-privkey.pem"  # env: BACKNED_SSL_KEY

# Set the timeout for agent heartbeats in seconds.
heartbeat-timeout = 40.0

# Override the name of this manager node.
# If empty or unspecified, the agent builds this from the hostname by prefixing it with "i-",
# like "i-hostname".  The "i-" prefix is not mandatory, though.
# Explicit configuration may be required if the hostname changes frequently,
# to handle the event bus messages consistently.
# This affects the per-node configuration scope.
# id = ""

# Set the manager's RPC client certificate (public key and secret key).
# This is a mandatory option even when no agents require authentication.
# It must be generated for any new setup for security using
# the `backend.ai mgr generate-rpc-keypair` command.
# rpc-auth-manager-keypair = "fixtures/manager/manager.key_secret"

# Create a PID file so that daemon managers could keep track of us.
# If set to an empty string, it does NOT create the PID file.
# pid-file = "./manager.pid"             # env: BACKEND_PID_FILE

# The base directory to put domain sockets for IPC.
# Normally you don't have to change it.
# NOTE: If Docker is installed via Snap (https://snapcraft.io/docker),
#       you must change this to a directory under your *home* directory.
# ipc-base-path = "/tmp/backend.ai/ipc"

# Explicitly set allowed plugins in order to load only selected plugin.
# If use this feature,
#   1) Replace '# allowed-plugins = []' with 'allowed-plugins = ["example.plugin.what.you.want"]'
#   2) Add allowlist parameters when plugin_ctx initiate like 'example_plugin_ctx.init(allowlist=local_config["manager"]["allowed-plugins"])
# Note: If you set allowed-plugins, they could only be loaded. The others would be blocked.
# allowed-plugins = []

# The list of black-listed manager plugins.
disabled-plugins = []

# Hide agent and container IDs from GraphQL results unless the API requester is super-admin.
hide-agents = false

# The order of agent selection.
agent-selection-resource-priority = ["cuda", "rocm", "tpu", "cpu", "mem"]

# One of: "asyncio", "uvloop"
# This changes the event loop backend.
# uvloop is a fast libuv-based implementation but sometimes has
# compatibility issues.
# event-loop = "asyncio"

# One of: "filelock", "pg_advisory", "redlock", "etcd"
# Choose the implementation of distributed lock.
# "filelock" is the simplest one when the manager is deployed on only one node.
# "pg_advisory" uses PostgreSQL's session-level advisory lock.
# "redlock" uses Redis-based distributed lock (Redlock).
# "etcd" uses etcd-based distributed lock via etcd-client-py.
# distributed-lock = "pg_advisory"

# The Docker image name that is used for importing external Docker images.
# You need to change this if your are at offline environments so that the manager
# uses an importer image from a private registry.
importer-image = "lablup/importer:manylinux2010"

# The maximum size of websocket messages in bytes.
# max-wsmsg-size = 16777216  # 16 MiB

# The starting port number for aiomonitor.
# Since the manager is composed of multiple processes, each process will be exposed
# via the port number of this base port number + pidx.
# aiomonitor-termui-port = 48100
# aiomonitor-webui-port = 49100


[docker-registry]
# Enable or disable SSL certificate verification when accessing Docker registries.
ssl-verify = false                       # env: BACKEND_SKIP_SSLCERT_VALIDATION


[logging]
# One of: "NOTSET", "DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"
# Set the global logging level.
level = "INFO"

# Multi-choice of: "console", "logstash", "file"
# For each choice, there must be a "logging.<driver>" section
# in this config file as exemplified below.
drivers = ["console", "file"]


[logging.console]
# If set true, use ANSI colors if the console is a terminal.
# If set false, always disable the colored output in console logs.
colored = true

# One of: "simple", "verbose"
format = "verbose"


[logging.file]
# The log file path and filename pattern.
# All messages are wrapped in single-line JSON objects.
# Rotated logs may have additional suffixes.
# For production, "/var/log/backend.ai" is recommended.
path = "./logs"
filename = "manager.log"

# The maximum number of rotated logs.
backup-count = 5

# The log file size to begin rotation.
rotation-size = "10M"


[logging.logstash]
# The endpoint to publish logstash records.
endpoint = { host = "localhost", port = 9300 }

# One of: "zmq.push", "zmq.pub", "tcp", "udp"
protocol = "tcp"

# SSL configs when protocol = "tcp"
ssl-enabled = true
ssl-verify = true


[logging.graylog]
host = "127.0.0.1"
port = 12201

# If True, validate the Graylog serverâ€™s certificate. In this case specifying ca-certs is also required.
ssl-verify = false
ca-certs = ""
keyfile = ""
certfile = ""

# If you want the source field in Graylog to display a name that distinguishes between components rather than the hostname, uncomment the lines below and insert a value into localname.
# fqdn = false
# localname = "manager"


# Specify additional package namespaces to include in the logs
# and their individual log levels.
# Note that the actual logging level applied is the conjunction of the global logging level and the
# logging levels specified here for each namespace.
[logging.pkg-ns]
"" = "WARNING"
"aiotools" = "INFO"
"aiohttp" = "INFO"
"ai.backend" = "INFO"
"alembic" = "INFO"
"sqlalchemy" = "WARNING"


[debug]
enabled = false

# Enable or disable the asyncio debug mode.
asyncio = false

# Use the custom task factory to get more detailed asyncio task information; this may have performance penalties
enhanced-aiomonitor-task-info = false

# Periodically sync container stat from Redis to the kernels.last_stat column.
periodic-sync-stats = false
