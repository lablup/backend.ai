name: default

on:
  push:
  pull_request:
    types: [labeled, unlabeled, opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  lint:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'skip:ci') }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Extract Python version from pants.toml
      run: |
        PYTHON_VERSION=$(grep -oP '(?<=CPython==)([^"]+)' pants.toml)
        echo "PANTS_CONFIG_FILES=pants.ci.toml" >> $GITHUB_ENV
        echo "PROJECT_PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
    - name: Set up Python for Pants
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    - name: Set up Python as Runtime
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PROJECT_PYTHON_VERSION }}
    - name: Prepare cache dir for Pants
      run: mkdir -p .tmp
    - name: Bootstrap Pants
      uses: pantsbuild/actions/init-pants@v2
      # See: https://github.com/pantsbuild/actions/tree/main/init-pants/
      # See: https://github.com/pantsbuild/example-python/blob/main/.github/workflows/pants.yaml#L27-L47
      with:
        pants-python-version: "3.9"
        gha-cache-key: pants-cache0-lint-py${{ env.PROJECT_PYTHON_VERSION }}-${{ runner.os }}-${{ runner.arch }}
        named-caches-hash: ${{ hashFiles('python*.lock', 'tools/*.lock') }}
        cache-lmdb-store: 'true'
    - name: Check BUILD files
      run: ./pants tailor --check update-build-files --check '::'
    - name: Lint
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/flake8-matcher.json"
        fi
        if [ -n "$GITHUB_BASE_REF" ]; then
          BASE_REF="origin/${GITHUB_BASE_REF}"
          git fetch --no-tags --depth=1 origin "$GITHUB_BASE_REF"
        else
          BASE_REF="HEAD~1"
        fi
        ./pants lint --changed-since=$BASE_REF --changed-dependees=transitive
    - name: Upload pants log
      uses: actions/upload-artifact@v3
      with:
        name: pants.lint.log
        path: .pants.d/pants.log
      if: always()  # We want the log even on failures.


  typecheck:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'skip:ci') }}
    runs-on: ubuntu-latest-8-cores
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Extract Python version from pants.toml
      run: |
        PYTHON_VERSION=$(grep -oP '(?<=CPython==)([^"]+)' pants.toml)
        echo "PANTS_CONFIG_FILES=pants.ci.toml" >> $GITHUB_ENV
        echo "PROJECT_PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
    - name: Set up Python for Pants
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    - name: Set up Python as Runtime
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PROJECT_PYTHON_VERSION }}
    - name: Prepare cache dir for Pants
      run: mkdir -p .tmp
    - name: Bootstrap Pants
      uses: pantsbuild/actions/init-pants@v2
      # See: https://github.com/pantsbuild/actions/tree/main/init-pants/
      # See: https://github.com/pantsbuild/example-python/blob/main/.github/workflows/pants.yaml#L27-L47
      with:
        pants-python-version: "3.9"
        gha-cache-key: pants-cache0-typecheck-py${{ env.PROJECT_PYTHON_VERSION }}-${{ runner.os }}-${{ runner.arch }}
        named-caches-hash: ${{ hashFiles('python*.lock', 'tools/*.lock') }}
        cache-lmdb-store: 'true'
    - name: Typecheck
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/mypy-matcher.json"
        fi
        if [ -n "$GITHUB_BASE_REF" ]; then
          BASE_REF="origin/${GITHUB_BASE_REF}"
          git fetch --no-tags --depth=1 origin "$GITHUB_BASE_REF"
        else
          BASE_REF="HEAD~1"
        fi
        ./pants check --changed-since=$BASE_REF --changed-dependees=transitive
    - name: Upload pants log
      uses: actions/upload-artifact@v3
      with:
        name: pants.check.log
        path: .pants.d/pants.log
      if: always()  # We want the log even on failures.


  test:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'skip:ci') }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
        submodules: true
    - name: Create LFS file hash list
      run: git lfs ls-files -l | cut -d ' ' -f1 | sort > .lfs-assets-id
    - name: Restore LFS cache
      uses: actions/cache@v3
      id: lfs-cache
      with:
          path: .git/lfs
          key: lfs-${{ hashFiles('.lfs-assets-id') }}
    - name: Git LFS Pull
      run: git lfs pull
    - name: Extract Python version from pants.toml
      run: |
        PYTHON_VERSION=$(grep -oP '(?<=CPython==)([^"]+)' pants.toml)
        echo "PANTS_CONFIG_FILES=pants.ci.toml" >> $GITHUB_ENV
        echo "PROJECT_PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
    - name: Set up Python for Pants
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    - name: Set up Python as Runtime
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PROJECT_PYTHON_VERSION }}
    - name: Prepare cache dir for Pants
      run: mkdir -p .tmp
    - name: Bootstrap Pants
      uses: pantsbuild/actions/init-pants@v2
      # See: https://github.com/pantsbuild/actions/tree/main/init-pants/
      # See: https://github.com/pantsbuild/example-python/blob/main/.github/workflows/pants.yaml#L27-L47
      with:
        pants-python-version: "3.9"
        gha-cache-key: pants-cache0-test-py${{ env.PROJECT_PYTHON_VERSION }}-${{ runner.os }}-${{ runner.arch }}
        named-caches-hash: ${{ hashFiles('python*.lock', 'tools/*.lock') }}
        cache-lmdb-store: 'true'
    - name: Test
      run: |
        if [ -n "$GITHUB_BASE_REF" ]; then
          BASE_REF="origin/${GITHUB_BASE_REF}"
          git fetch --no-tags --depth=1 origin "$GITHUB_BASE_REF"
        else
          BASE_REF="HEAD~1"
        fi
        ./pants test --changed-since=$BASE_REF --changed-dependees=transitive -- -m 'not integration'
    - name: Upload pants log
      uses: actions/upload-artifact@v3
      with:
        name: pants.test.log
        path: .pants.d/pants.log
      if: always()  # We want the log even on failures.


  build:
    needs: [lint, typecheck, test]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Fetch remote tags
      run: git fetch origin 'refs/tags/*:refs/tags/*' -f
    - name: Create LFS file hash list
      run: git lfs ls-files -l | cut -d ' ' -f1 | sort > .lfs-assets-id
    - name: Restore LFS cache
      uses: actions/cache@v3
      id: lfs-cache
      with:
          path: .git/lfs
          key: lfs-${{ hashFiles('.lfs-assets-id') }}
    - name: Git LFS Pull
      run: git lfs pull
    - name: Extract Python version from pants.toml
      run: |
        PYTHON_VERSION=$(grep -oP '(?<=CPython==)([^"]+)' pants.toml)
        echo "PANTS_CONFIG_FILES=pants.ci.toml" >> $GITHUB_ENV
        echo "PROJECT_PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
    - name: Prepare the pip cache directory
      run: mkdir -p ~/.cache/pip
    - name: Set up Python for Pants
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    - name: Set up Python as Runtime
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PROJECT_PYTHON_VERSION }}
    - name: Prepare cache dir for Pants
      run: mkdir -p .tmp
    - name: Bootstrap Pants
      uses: pantsbuild/actions/init-pants@v2
      # See: https://github.com/pantsbuild/actions/tree/main/init-pants/
      # See: https://github.com/pantsbuild/example-python/blob/main/.github/workflows/pants.yaml#L27-L47
      with:
        pants-python-version: "3.9"
        gha-cache-key: pants-cache0-deploy-py${{ env.PROJECT_PYTHON_VERSION }}-${{ runner.os }}-${{ runner.arch }}
        named-caches-hash: ${{ hashFiles('python*.lock', 'tools/*.lock') }}
        cache-lmdb-store: 'true'
    - name: Install local dependencies for packaging
      run: |
        pip install -U 'packaging>=21.3'
    - name: Build packages
      run: |
        # Normalize the package version
        PKGVER=$(python -c "import packaging.version,pathlib; print(str(packaging.version.Version(pathlib.Path('VERSION').read_text())))")
        # Build non-platform-specific wheels
        ./pants --platform-specific-resources-target=linux_x86_64 --tag="wheel" --tag="-platform-specific" package '::'
        # Build x86_64 wheels
        MANYLINUX_PTAG=manylinux2014_x86_64
        MACOS_PTAG=macosx_11_0_x86_64
        ./pants --platform-specific-resources-target=linux_x86_64 --tag="wheel" --tag="+platform-specific" package '::'
        for pkgname in "kernel_binary"; do
          mv "dist/backend.ai_${pkgname}-${PKGVER}-py3-none-any.whl" \
             "dist/backend.ai_${pkgname}-${PKGVER}-py3-none-${MANYLINUX_PTAG}.${MACOS_PTAG}.whl"
        done
        # Build arm64 wheels
        MANYLINUX_PTAG=manylinux2014_aarch64
        MACOS_PTAG=macosx_11_0_arm64
        ./pants --platform-specific-resources-target=linux_arm64 --tag="wheel" --tag="+platform-specific" package '::'
        for pkgname in "kernel_binary"; do
          mv "dist/backend.ai_${pkgname}-${PKGVER}-py3-none-any.whl" \
             "dist/backend.ai_${pkgname}-${PKGVER}-py3-none-${MANYLINUX_PTAG}.${MACOS_PTAG}.whl"
        done
        ls -lh dist
    - name: Upload wheels and sdists
      uses: actions/upload-artifact@v3
      with:
        name: wheels-and-sdists
        path: |
          dist/*.whl
          dist/*.tar.gz
        if-no-files-found: error
    - name: Upload pants log
      uses: actions/upload-artifact@v3
      with:
        name: pants.deploy.log
        path: .pants.d/pants.log
      if: always()  # We want the log even on failures.


  windows-conda-package:
    needs: [build]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Fetch remote tags
      run: git fetch origin 'refs/tags/*:refs/tags/*' -f
    - name: Create LFS file hash list
      run: git lfs ls-files -l | cut -d ' ' -f1 | sort > .lfs-assets-id
    - name: Restore LFS cache
      uses: actions/cache@v3
      id: lfs-cache
      with:
          path: .git/lfs
          key: lfs-${{ hashFiles('.lfs-assets-id') }}
    - name: Git LFS Pull
      run: git lfs pull
    - name: Extract Python version from pants.toml
      shell: bash
      run: |
        export LANG=C.UTF-8
        PYTHON_VERSION=$(grep -oP '(?<=CPython==)([^"]+)' pants.toml)
        echo "PANTS_CONFIG_FILES=pants.ci.toml" >> $GITHUB_ENV
        echo "PROJECT_PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PROJECT_PYTHON_VERSION }}
        cache: pip
    - name: Download built wheels and sdists
      uses: actions/download-artifact@v3
      with:
        name: wheels-and-sdists
        path: dist
    - name: Install conda-pack
      uses: s-weigand/setup-conda@v1
      with:
        activate-conda: false
    - name: Create conda environment
      run: |
        pip install conda-pack
        conda create -n backend.ai-client python=${{ env.PROJECT_PYTHON_VERSION }}
        conda activate backend.ai-client
        pip install dist/backend.ai-client-*.whl
        conda-pack -o backend.ai-client-windows-conda.tar.gz
    - name: Upload conda-pack
      uses: actions/upload-artifact@v3
      with:
        name: windows-conda
        path: backend.ai-client-windows-conda.tar.gz
        if-no-files-found: error


  deploy-to-pypi:
    needs: [windows-conda-package]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Extract Python version from pants.toml
      shell: bash
      run: |
        export LANG=C.UTF-8
        PYTHON_VERSION=$(grep -oP '(?<=CPython==)([^"]+)' pants.toml)
        echo "PANTS_CONFIG_FILES=pants.ci.toml" >> $GITHUB_ENV
        echo "PROJECT_PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PROJECT_PYTHON_VERSION }}
        cache: pip
    - name: Install local dependencies for publishing
      run: |
        pip install -U 'twine~=4.0'
    - name: Download built wheels and sdists
      uses: actions/download-artifact@v3
      with:
        name: wheels-and-sdists
        path: dist
    - name: Download conda-pack
      uses: actions/download-artifact@v3
      with:
        name: windows-conda
        path: windows-conda
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      # We don't use `./pants publish ::` because we manually rename the
      # wheels after buildling them to add arch-specific tags.
      run: |
        twine upload dist/*.whl dist/*.tar.gz
    - name: Extract the release changelog
      run: |
        python ./scripts/extract-release-changelog.py
        python ./scripts/determine-release-type.py
    - name: Release to GitHub
      uses: softprops/action-gh-release@v1
      with:
        body_path: "CHANGELOG_RELEASE.md"
        prerelease: ${{ env.IS_PRERELEASE }}
        files: |
          dist/*.whl
          dist/*.tar.gz
          windows-conda/backend.ai-client-windows-conda.tar.gz
