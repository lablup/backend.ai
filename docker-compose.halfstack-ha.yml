version: "2.4"

services:

  backendai-half-db:
    image: postgres:15.1-alpine
    command: postgres -c 'max_connections=256'
    networks:
      - half
    ports:
      - "8100:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-develove}
      - POSTGRES_DB=${POSTGRES_DBNAME:-backend}
    volumes:
      - "./tmp/backend.ai-halfstack-ha/postgres-data:/var/lib/postgresql/data:rw"

  backendai-half-db-exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    restart: unless-stopped
    networks:
      - half
    environment:
      - DATA_SOURCE_URI=backendai-half-db:5432/backend?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=develove
    ports:
      - "9187:9187"

  backendai-half-redis-exporter-node01:
    image: oliver006/redis_exporter:v1.73.0
    restart: unless-stopped
    networks:
      - half
    command: >
      --redis.addr redis://:${REDIS_PASSWORD:-develove}@backendai-half-redis-node01:${REDIS_MASTER_PORT}
      --include-system-metrics
      --include-config-metrics
      --include-modules-metrics
    ports:
      - "9121:9121"
    depends_on:
      - backendai-half-redis-node01

  backendai-half-redis-exporter-node02:
    image: oliver006/redis_exporter:v1.73.0
    restart: unless-stopped
    networks:
      - half
    command: >
      --redis.addr redis://:${REDIS_PASSWORD:-develove}@backendai-half-redis-node02:${REDIS_SLAVE1_PORT}
      --include-system-metrics
      --include-config-metrics
      --include-modules-metrics
    ports:
      - "9122:9121"
    depends_on:
      - backendai-half-redis-node02

  backendai-half-redis-exporter-node03:
    image: oliver006/redis_exporter:v1.73.0
    restart: unless-stopped
    networks:
      - half
    command: >
      --redis.addr redis://:${REDIS_PASSWORD:-develove}@backendai-half-redis-node03:${REDIS_SLAVE2_PORT}
      --include-system-metrics
      --include-config-metrics
      --include-modules-metrics
    ports:
      - "9123:9121"
    depends_on:
      - backendai-half-redis-node03

  # Initial master is redis-node01.
  backendai-half-redis-node01:
    image: redis:7.2.11-alpine
    hostname: node01
    networks:
    - half
    ports:
    - 0.0.0.0:${REDIS_MASTER_PORT}:${REDIS_MASTER_PORT}
    command: >
      redis-server
      --port ${REDIS_MASTER_PORT}
      --requirepass ${REDIS_PASSWORD:-develove}
      --masterauth ${REDIS_PASSWORD:-develove}
      --replica-announce-ip node01
      --replica-announce-port ${REDIS_MASTER_PORT}
      --min-slaves-to-write 1
      --min-slaves-max-lag 10
    # IMPORTANT: We have INTENTIONALLY OMITTED the healthchecks
    # because it interferes with pause/unpause of container to simulate
    # network partitioning.

  backendai-half-redis-node02:
    image: redis:7.2.11-alpine
    hostname: node02
    networks:
    - half
    ports:
    - 0.0.0.0:${REDIS_SLAVE1_PORT}:${REDIS_SLAVE1_PORT}
    command: >
      redis-server
      --port ${REDIS_SLAVE1_PORT}
      --requirepass ${REDIS_PASSWORD:-develove}
      --masterauth ${REDIS_PASSWORD:-develove}
      --slaveof node01 ${REDIS_MASTER_PORT}
      --replica-announce-ip node02
      --replica-announce-port ${REDIS_SLAVE1_PORT}
      --min-slaves-to-write 1
      --min-slaves-max-lag 10

  backendai-half-redis-node03:
    image: redis:7.2.11-alpine
    hostname: node03
    ports:
    - 0.0.0.0:${REDIS_SLAVE2_PORT}:${REDIS_SLAVE2_PORT}
    networks:
    - half
    command: >
      redis-server
      --port ${REDIS_SLAVE2_PORT}
      --requirepass ${REDIS_PASSWORD:-develove}
      --masterauth ${REDIS_PASSWORD:-develove}
      --slaveof node01 ${REDIS_MASTER_PORT}
      --replica-announce-ip node03
      --replica-announce-port ${REDIS_SLAVE2_PORT}
      --min-slaves-to-write 1
      --min-slaves-max-lag 10

  backendai-half-redis-sentinel01:
    image: redis:7.2.11-alpine
    hostname: sentinel01
    networks:
    - half
    volumes:
    - type: bind
      source: ${COMPOSE_PATH}
      target: /config
    ports:
    - 0.0.0.0:${REDIS_SENTINEL1_PORT}:${REDIS_SENTINEL1_PORT}
    depends_on:
    - backendai-half-redis-node01
    - backendai-half-redis-node02
    - backendai-half-redis-node03
    command: >
      redis-sentinel /config/sentinel01.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-develove}

  backendai-half-redis-sentinel02:
    image: redis:7.2.11-alpine
    hostname: sentinel02
    networks:
    - half
    volumes:
    - type: bind
      source: ${COMPOSE_PATH}
      target: /config
    ports:
    - 0.0.0.0:${REDIS_SENTINEL2_PORT}:${REDIS_SENTINEL2_PORT}
    depends_on:
    - backendai-half-redis-node01
    - backendai-half-redis-node02
    - backendai-half-redis-node03
    command: >
      redis-sentinel /config/sentinel02.conf
    environment:
    - REDIS_PASSWORD=${REDIS_PASSWORD:-develove}

  backendai-half-redis-sentinel03:
    image: redis:7.2.11-alpine
    hostname: sentinel03
    networks:
    - half
    volumes:
    - type: bind
      source: ${COMPOSE_PATH}
      target: /config
    ports:
    - 0.0.0.0:${REDIS_SENTINEL3_PORT}:${REDIS_SENTINEL3_PORT}
    depends_on:
    - backendai-half-redis-node01
    - backendai-half-redis-node02
    - backendai-half-redis-node03
    command: >
      redis-sentinel /config/sentinel03.conf
    environment:
    - REDIS_PASSWORD=${REDIS_PASSWORD:-develove}

  backendai-half-etcd-proxy:
    image: quay.io/coreos/etcd:v3.5.4
    depends_on:
      - "backendai-half-etcd-node01"
      - "backendai-half-etcd-node02"
      - "backendai-half-etcd-node03"
    networks:
      - half
    ports:
      - "8220:2379"
    environment:
      - ENDPOINTS=backendai-half-etcd-node01:2379,backendai-half-etcd-node02:2379,backendai-half-etcd-node03:2379
    command: >
      sh -c
      "/usr/local/bin/etcd grpc-proxy start
      --endpoints=$${ENDPOINTS}
      --listen-addr=0.0.0.0:2379"

  backendai-half-etcd-node01:
    image: quay.io/coreos/etcd:v3.5.4
    volumes:
      - "./tmp/backend.ai-halfstack-ha/etcd01-data:/etcd-data:rw"
    networks:
      - half
    environment:
      - MYSELF=backendai-half-etcd-node01
      - CLUSTER=etcd-node01=http://backendai-half-etcd-node01:2380,etcd-node02=http://backendai-half-etcd-node02:2380,etcd-node03=http://backendai-half-etcd-node03:2380
      - TOKEN=backendai-etcd-token
      - STATE=new
    command: >
      sh -c
      "/usr/local/bin/etcd
      --name etcd-node01
      --data-dir /etcd-data
      --listen-client-urls http://0.0.0.0:2379
      --listen-peer-urls http://0.0.0.0:2380
      --advertise-client-urls http://$${MYSELF}:2379
      --initial-advertise-peer-urls http://$${MYSELF}:2380
      --initial-cluster $${CLUSTER}
      --initial-cluster-token $${TOKEN}
      --initial-cluster-state $${STATE}"

  backendai-half-etcd-node02:
    image: quay.io/coreos/etcd:v3.5.4
    volumes:
      - "./tmp/backend.ai-halfstack-ha/etcd02-data:/etcd-data:rw"
    networks:
      - half
    environment:
      - MYSELF=backendai-half-etcd-node02
      - CLUSTER=etcd-node01=http://backendai-half-etcd-node01:2380,etcd-node02=http://backendai-half-etcd-node02:2380,etcd-node03=http://backendai-half-etcd-node03:2380
      - TOKEN=backendai-etcd-token
      - STATE=new
    command: >
      sh -c
      "/usr/local/bin/etcd
      --name etcd-node02
      --data-dir /etcd-data
      --listen-client-urls http://0.0.0.0:2379
      --listen-peer-urls http://0.0.0.0:2380
      --advertise-client-urls http://$${MYSELF}:2379
      --initial-advertise-peer-urls http://$${MYSELF}:2380
      --initial-cluster $${CLUSTER}
      --initial-cluster-token $${TOKEN}
      --initial-cluster-state $${STATE}"

  backendai-half-etcd-node03:
    image: quay.io/coreos/etcd:v3.5.4
    volumes:
      - "./tmp/backend.ai-halfstack-ha/etcd03-data:/etcd-data:rw"
    networks:
      - half
    environment:
      - MYSELF=backendai-half-etcd-node03
      - CLUSTER=etcd-node01=http://backendai-half-etcd-node01:2380,etcd-node02=http://backendai-half-etcd-node02:2380,etcd-node03=http://backendai-half-etcd-node03:2380
      - TOKEN=backendai-etcd-token
      - STATE=new
    command: >
      sh -c
      "/usr/local/bin/etcd
      --name etcd-node03
      --data-dir /etcd-data
      --listen-client-urls http://0.0.0.0:2379
      --listen-peer-urls http://0.0.0.0:2380
      --advertise-client-urls http://$${MYSELF}:2379
      --initial-advertise-peer-urls http://$${MYSELF}:2380
      --initial-cluster $${CLUSTER}
      --initial-cluster-token $${TOKEN}
      --initial-cluster-state $${STATE}"

  backendai-half-grafana:
    image: grafana/grafana-enterprise:11.4.0
    restart: unless-stopped
    networks:
      - half
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=backend
      - GF_SECURITY_ADMIN_PASSWORD=develove
    volumes:
      - half-grafana:/var/lib/grafana:rw
      - "./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro"
      - "./configs/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro"
      - "./configs/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro"

  backendai-half-pyroscope:
    image: grafana/pyroscope:1.9.2
    restart: unless-stopped
    networks:
      - half
    ports:
      - "4040:4040"
    volumes:
      - half-pyroscope:/var/lib/pyroscope:rw

  backendai-half-prometheus:
    image: prom/prometheus:v3.1.0
    restart: unless-stopped
    networks:
      - half
    volumes:
      - "./prometheus.yaml:/etc/prometheus/prometheus.yaml"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    ports:
      - "9090:9090"

  backendai-half-otel-collector:
    image: otel/opentelemetry-collector-contrib:0.126.0
    networks:
      - half
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./configs/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "4318:4318"

  backendai-half-loki:
    image: grafana/loki:3.5.0
    networks:
      - half
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./configs/loki/loki-config.yaml:/etc/loki/local-config.yaml

  backendai-half-tempo:
    image: grafana/tempo:2.7.2
    networks:
      - half
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./configs/tempo/tempo-config.yaml:/etc/tempo.yaml
      - half-tempo:/var/tempo
    ports:
      - "3200" # tempo
      - "4317" # otlp grpc

  backendai-half-apollo-router:
    image: ghcr.io/graphql-hive/gateway:2.1.12
    restart: unless-stopped
    networks:
      - half
    ports:
      - "4000:4000"
    command: ["supergraph"]
    environment:
      - HOST=0.0.0.0
      - PORT=4000
    volumes:
      - ./docs/manager/graphql-reference/supergraph.graphql:/gateway/supergraph.graphql:ro
      - ./configs/graphql/gateway.config.ts:/gateway/gateway.config.ts:ro
    extra_hosts:
      - "host.docker.internal:host-gateway"

  backendai-half-minio:
    image: minio/minio:latest
    restart: unless-stopped
    networks:
      - half
    ports:
      - "9000:9000"    # API port
      - "9001:9001"    # Console port
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - half-minio:/data:rw
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

networks:
  half:

volumes:
  half-grafana:
  half-pyroscope:
  half-tempo:
  half-minio:
