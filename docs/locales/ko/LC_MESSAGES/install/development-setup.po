# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, Lablup Inc.
# This file is distributed under the same license as the Backend.AI API
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Backend.AI API Documentation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-13 15:33+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../install/development-setup.rst:6 1b2962a2c4dc4c08bb1b525c537ff619
msgid "Development Setup"
msgstr "개발 환경 설치"

#: ../../install/development-setup.rst:8 d7e12af05b18412dbdcd4c7be27c8606
msgid ""
"Currently Backend.AI is developed and tested under only \\*NIX-compatible"
" platforms (Linux or macOS)."
msgstr "현재 Backend.AI는 \\*NIX계열(Linux 혹은 MacOS)상에서 개발 및 테스트 되었습니다."

#: ../../install/development-setup.rst:10 36ee8b98f55d45298143fafbfb8f0719
msgid ""
"The development setup uses a mono-repository for the backend stack and a "
"side-by-side repository checkout of the frontend stack. In contrast, the "
"production setup uses per-service independent virtual environments and "
"relies on a separately provisioned app proxy pool."
msgstr ""
"development 설정에는 백앤드를 위한 모노 레포지토리와 프론트엔드를 위한 side-by-side 레포지토리 하나가 필요합니다."
"반면에, production 설정은 서비스별 독립적인 가상 환경을 사용하며 별도로 프로비저닝된 애플리케이션 프록시 풀에 의존합니다."

#: ../../install/development-setup.rst:13 29627354616242198ae3df4a8c56db5c
msgid ""
"There are three ways to run both the backend and frontend stacks for "
"development, as demonstrated in :numref:`dev-setup-standard`, :numref"
":`dev-setup-app`, and :numref:`dev-setup-staticwebui`. The installation "
"guide in this page using ``scripts/install-dev.sh`` covers all three "
"cases because the only difference is that how you launch the Web UI from "
"the mono-repo."
msgstr ""
"개발을 위해서 백엔드와 프론트 스택을 실행할 수 있는 세가지 방법이 있습니다. :numref:`dev-setup-standard`, :numref"
":`dev-setup-app`, and :numref:`dev-setup-staticwebui`의 세가지 방법입니다."
"이 페이지의 가이드에서 사용하는 ``scripts/install-dev.sh``는 모든 세가지 케이스를 커버합니다."
"유일한 차이는 모노 레포지토리의 Web UI를 런칭할 때 뿐이기 때문입니다."

#: ../../install/development-setup.rst:22 4b1b80dee0e94398a542fa6b8126670c
msgid "A standard development setup of Backend.AI open source components"
msgstr "Backend.AI 오픈소스 컴포넌츠의 표준 개발 설정"

#: ../../install/development-setup.rst:28 e6b1d7f935b14edb8ee54e197f844008
msgid ""
"A development setup of Backend.AI open source components for Electron-"
"based desktop app"
msgstr "Electron 기반의 데스크톱 앱의 Backend.AI 오픈 소스 구성 요소 개발 설정"

#: ../../install/development-setup.rst:35 b6f55301dd6b4278801091737983ed5c
msgid ""
"A development setup of Backend.AI open source components with pre-built "
"web UI from the ``backend.ai-app`` repository"
msgstr "``backend.ai-app`` 레포지토리의 pre-built web UI 기반의 Backend.AI 오픈 소스 구성 요소 개발 설정"

#: ../../install/development-setup.rst:101 1acde67561224931b2d2db32b1c1365d
msgid "Installation from Source"
msgstr "소스로 설치"

#: ../../install/development-setup.rst:103 fe8264c058f1466ba2dfa6f83a92f799
msgid ""
"For the ease of on-boarding developer experience, we provide an automated"
" script that installs all server-side components in editable states with "
"just one command."
msgstr ""
"자동화된 스크립트를 제공하여 개발자들이 온보딩하기 편한 환경을 제공합니다." 
"모든 서버 측의 컴포넌츠는 단 하나의 명령으로 편집 가능한 상태가 됩니다."

#: ../../install/development-setup.rst:108 9aa76967affd4f6cbf44342d571dbb78
msgid "Prerequisites"
msgstr "필수 선행 사항"

#: ../../install/development-setup.rst:110 7d1b8636e8cf424fb4b4cc7ed74ffc37
msgid "Install the followings accordingly to your host operating system."
msgstr "사용자 OS에 맞는 설치 방법을 확인 후 진행해주세요."

#: ../../install/development-setup.rst:112 e135e855acd34b72bf7b68e6edd3ffa2
msgid "`Git LFS <https://git-lfs.github.com/>`_"
msgstr ""

#: ../../install/development-setup.rst:114 3849da459d0a470e917f0808e8bc7f14
msgid ""
"`pyenv <https://github.com/pyenv/pyenv>`_ and `pyenv-virtualenv "
"<https://github.com/pyenv/pyenv-virtualenv>`_"
msgstr ""
"`pyenv <https://github.com/pyenv/pyenv>`_ 와 `pyenv-virtualenv "
"<https://github.com/pyenv/pyenv-virtualenv>`_"

#: ../../install/development-setup.rst:116 1274cb76cbb3413e816c94054b6f4a3e
msgid ""
"Ensure that you have the Python version specified in ``pants.toml`` on "
"your ``PATH``."
msgstr "``PATH``에 ``pants.toml``에 명시된 파이썬의 구체적인 버전을 가지고 있는지 확인해 주어야 합니다."

#: ../../install/development-setup.rst:118 3134a12b16464539bffa7d62525e6674
msgid ""
"Depending on your Linux Distribution, you may have to additionally "
"install a sysmte package that enables Python's `pip` command."
msgstr "리눅스의 분배에 따라, 파이썬의 `pip` 명령을 할 수 있게 하는 시스템 패키지를 추가로 설치해야할 수 있습니다."

#: ../../install/development-setup.rst:120 9a012081cd444a4fb642be8c1938d8dd
msgid "Ubuntu"
msgstr ""

#: ../../install/development-setup.rst:126 b8d6c265267d4e89affb10bd87a6657f
msgid "Fedora Core & CentOS"
msgstr ""

#: ../../install/development-setup.rst:132 f5f35e67bf8240148f7587f13ad1f506
#, fuzzy
msgid "`Docker <https://docs.docker.com/install/>`_"
msgstr "`docker <https://docs.docker.com/install/>`_"

#: ../../install/development-setup.rst:134 96da977606074f228ae05aa9524c6ee9
#, fuzzy
msgid "`Docker Compose <https://docs.docker.com/compose/install/>`_ (v2 required)"
msgstr "`docker-compose <https://docs.docker.com/compose/install/>`_"

#: ../../install/development-setup.rst:136 225286fa03024625bcfbabc52a12506c
msgid "`Rust <https://rustup.rs/>`_ (for bootstrapping Pants)"
msgstr ""

#: ../../install/development-setup.rst:140 ef926b7ecb2c49ecb12598d3af95632f
msgid ""
"In some cases, locale conflicts between the terminal client and the "
"remote host may cause encoding errors when installing Backend.AI "
"components due to Unicode characters in README files.  Please keep "
"correct locale configurations to prevent such errors."
msgstr ""
"상황에 따라 터미널 클라이언트와 원격 호스트 사이에 locale 충돌이 발생할 수 있습니다. 특히 Backend.AI 컴포넌트를 "
"설치할 때에 README 파일의 유니코드 문자로 인해 이런 충돌이 발생할 수 있습니다. 이런 오류를 미연에 방지하기 위해 올바른 "
"locale 설정을 유지해주세요."

#: ../../install/development-setup.rst:145 62ae26b4b2924d718f9121ebece3bfd0
#, fuzzy
msgid "Running the install-dev script"
msgstr "스크립트 실행"

#: ../../install/development-setup.rst:155 b182d00d28294043bff62aef33eaf826
msgid ""
"The script requires ``sudo`` to check and install several system packages"
" such as ``build-essential``."
msgstr ""
"스크립트를 실행해 ``build-essential``와 같은 시스템 패키지를 설치하고 체크하는데 ``sudo`` 명령어가 필요합니다."

#: ../../install/development-setup.rst:158 a47899b3041742a985788915c4de8273
msgid ""
"This script will bootstrap `Pants <https://pantsbuild.org>`_ and creates "
"the halfstack containers using ``docker compose`` with fixture "
"population. At the end of execution, the script will show several command"
" examples about launching the service daemons such as manager and agent. "
"You may execute this script multiple times when you encounter "
"prerequisite errors and resolve them. Also check out additional options "
"using ``-h`` / ``--help`` option, such as installing the CUDA mockup "
"plugin together, etc."
msgstr ""
"이 스크립트는 `Pants <https://pantsbuild.org>`_를 부트스트랩하고, halfstack container들을"
"``docker compose``를 이용하여 만들어 줍니다. 실행의 끝에서는 스크립트는 manager와 agent와 같은 서비스 daemon들을"
"런칭하는 몇몇개의 명령 예시들을 보여줄 것입니다."

#: ../../install/development-setup.rst:169 05f10ae7f0d74deebd1b7d87c8c0b8ac
msgid ""
"We have migrated to per-package repositories to a semi-mono repository "
"that contains all Python-based components except plugins.  This has "
"changed the installation instruction completely with introduction of "
"Pants."
msgstr ""
"우리는 플러그인을 제외한 모든 Python 기반 구성 요소를 포함하는 semi-mono 저장소로 패키지별 저장소로 이동시켰습니다. 
"이것은 팬츠의 도입으로 설치 방법이 완전히 바뀌었습니다."

#: ../../install/development-setup.rst:175 99570bb3c9ae45598ffb8d5fc491c0f8
msgid ""
"To install multiple instances/versions of development environments using "
"this script, just clone the repository in another location and run "
"``scripts/install-dev.sh`` inside that directory."
msgstr ""
"만일 여러 인스턴트/버전의 개발 환경을 이 스크립트를 활용해 설치하고 싶다면, 레포지토리를 다른 장소에 클론하고"
"``scripts/install-dev.sh``를 디렉토리 내에서 실행시켜주면 됩니다"

#: ../../install/development-setup.rst:179 7d3fc8d29a914d34b775dd0e48e72e92
msgid ""
"It is important to name these working-copy directories *differently* not "
"to confuse ``docker compose`` so that it can distinguish the containers "
"for each setup."
msgstr ""
"``docker compose``와 헷갈리지 않기 위해서 working-copy 폴더를 다르게 네이밍 해주는 것이 중요합니다."
"그렇게 해서, 각각의 컨테이너의 설정을 구별해 줄 수 있습니다."
#: ../../install/development-setup.rst:182 356f7da4be1149008223fd851255a710
msgid ""
"Unless you customize all port numbers by the options of ``scripts"
"/install-dev.sh``, you should ``docker compose -f docker-"
"compose.halfstack.current.yml down`` and ``docker compose -f docker-"
"compose.halfstack.current.yml up -d`` when switching between multiple "
"working copies."
msgstr ""
"``scripts/install-dev.sh``의 모든 포트넘버를 커스텀하는 경우가 아니라면, 여러개의 작업 복사본 사이에서 스위치 할 때,"
"``docker compose -f docker-compose.halfstack.current.yml down`` 과 ``docker compose -f docker-compose.halfstack.current.yml up -d``"
"를 실행시켜주어야 합니다"

#: ../../install/development-setup.rst:188 1a1db31206d9496f8999623e0cfdb6e6
msgid ""
"By default, the script pulls the docker images for our standard Python "
"kernel and TensorFlow CPU-only kernel.  To try out other images, you have"
" to pull them manually afterwards."
msgstr ""
"기본적으로, 이 스크립트는 도커 이미지를 통해 표준 파이썬 커널과 TensorFlow CPU-only kernel을 pull해 옵니다."
"다른 도커 이미지를 사용해 보기 위해서는, 추후에 수동적으로 pull을 해주어야 합니다."

#: ../../install/development-setup.rst:194 731efa1f17b143dfa27fd68ed020ee8e
msgid ""
"Currently there are many limitations on running deep learning images on "
"ARM64 platforms, because users need to rebuild the whole computation "
"library stack, although more supported images will come in the future."
msgstr ""
"현재 ARM64 플랫폼에서는 딥러닝 이미지를 실행하는데 많은 한계점이 있습니다."
"왜냐하면, 유저들이 모든 컴퓨터와 라이브러리등을 모두 재설치 해주어야 하기 때문입니다."


#: ../../install/development-setup.rst:200 6364a7f7131e451f8da90b603e562dad
msgid ""
"To install the webui in an editable state, try ``--editable-webui`` flag "
"option when running ``scripts/install-dev.sh``."
msgstr ""
"webui을 수정가능한 상태로 설치하기 위해서는, ``scripts/install-dev.sh`` 실행 시에 ``--editable-webui`` 플래그 "
"옵션을 사용해 보십시오."

#: ../../install/development-setup.rst:204 c33c664f80ce4797a644117f14c29d67
msgid ""
"**Using the agent's cgroup-based statistics without the root privilege "
"(Linux-only)**"
msgstr ""
"agent의 cgroup 베이스 통계 root privilege 없이 사용하기 (리눅스만 사용가능)"

#: ../../install/development-setup.rst:206 202a2fd274684189b6a29318c181d2e5
msgid ""
"To allow Backend.AI to collect sysfs/cgroup resource usage statistics, "
"the Python executable must have the following Linux capabilities: "
"``CAP_SYS_ADMIN``, ``CAP_SYS_PTRACE``, and ``CAP_DAC_OVERRIDE``."
msgstr ""
"Backend.AI가 sysfs/cgroup 리소스 통계를 모으도록 허용하기 위해서는 ``CAP_SYS_ADMIN``, ``CAP_SYS_PTRACE``, ``CAP_DAC_OVERRIDE``"
"의 리눅스의 능력이 필요합니다."

#: ../../install/development-setup.rst:216 0f7fcbdb18da4afbb80e84cd800a0af8
msgid "Verifying Installation"
msgstr "설치 확인하기"

#: ../../install/development-setup.rst:218 9a9db30aec924b969576f663e400c613
msgid ""
"Refer the instructions displayed after running ``scripts/install-"
"dev.sh``. We recommend to use `tmux <https://github.com/tmux/tmux/wiki>`_"
" to open multiple terminals in a single SSH session. Your terminal app "
"may provide a tab interface, but when using remote servers, tmux is more "
"convenient because you don't have to setup a new SSH connection whenever "
"adding a new terminal."
msgstr ""
"``scripts/install-dev.sh``을 실행한 후 나오는 사용방법을 참조하십시오."
"`tmux <https://github.com/tmux/tmux/wiki>` 를 여러 터미널을 하나의 SSH 세션에서 열때 사용하는 것을 추천합니다."
"터미널 앱은 tab 인터페이스를 제공할 수 있지만, 리모트 서버들을 이용하는 경우에는 tmux가 새로운 터미널을 열때마다 SSH 연결의 설정을 해줄 필요가 없기 때문에 더 편리합니다."

#: ../../install/development-setup.rst:225 d1522d3930e14f77b8d493664d9a8baf
msgid "Ensure the halfstack containers are running:"
msgstr "halfstack 컨테이너가 실행되는지 확인하기:"

#: ../../install/development-setup.rst:231 94ae3ff7f828480fad40ab2501e441df
msgid "Open a terminal for manager and run:"
msgstr "manager를 위한 터미널을 열고 실행하기:"

#: ../../install/development-setup.rst:237 22ac665c3b6b422fade28923bb9c3f71
msgid "Open another terminal for agent and run:"
msgstr "또 다른 agent를 위한 터미널을 열어 실행하기:"

#: ../../install/development-setup.rst:243 746ed199e50e425e9cd7f6b65396397e
msgid "Open yet another terminal for client and run:"
msgstr "또 또 다른 터미널을 열어 client를 실행하기:"

#: ../../install/development-setup.rst:261 1bc47557a583487b9e34c7ca20b3089f
msgid "Resetting the environment"
msgstr "환경 다시 설정하기"

#: ../../install/development-setup.rst:263 80f243b3cdeb4376818f443502172424
msgid ""
"Shutdown all docker containers using ``docker compose -f docker-"
"compose.halfstack.current.yml down`` and delete the entire working copy "
"directory.  That's all."
msgstr ""
"모든 도커 컨테이너를 ``docker compose -f docker-"
"compose.halfstack.current.yml down``를 사용하여 컨테이너를 멈추고 working copy 폴더"
"를 통째로 지워주십시오. 그게 답니다."

#: ../../install/development-setup.rst:265 ee92e0d769354d48a90ad362d5ec1326
msgid ""
"You may need ``sudo`` to remove the directories mounted as halfstack "
"container volumes because Docker auto-creates them with the root "
"privilege."
msgstr ""
"halfstack 컨테이너 볼륨으로 탑재되어 있다면 ``sudo`` 명령어가 디렉토리를 삭제하기 위해 필요합니다."
"왜냐하면 도커는 root privilege를 가지고 자동 생성을 하기 때문입니다."

#: ../../install/development-setup.rst:270 3a84ec398d3e4e6eaa32b3152f88429d
msgid "Daily Workflows"
msgstr "Daily Workflows"

#: ../../install/development-setup.rst:272 d6e6be4734ea4b9e8df740c9ef9184a9
msgid "Check out :doc:`/dev/daily-workflows` for your reference."
msgstr ":doc:`/dev/daily-workflows`를 참고해보실 수 있습니다."

#~ msgid "`rust <https://rustup.rs/>`_ (for bootstrapping Pants)"
#~ msgstr "`rust <https://rustup.rs/>`_ (for bootstrapping Pants)"

