# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2022, Lablup Inc.
# This file is distributed under the same license as the Backend.AI
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Backend.AI Documentation 22.06\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-11 22:50-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../client/dev/session.rst:2 89046fc5a4a04704acdeb5626dc07de2
msgid "Client Session"
msgstr ""

#: ../../client/dev/session.rst:7 55b4c9811ceb4bcbbc6ed472b6fa536c
msgid ""
"This module is the first place to begin with your Python programs that "
"use Backend.AI API functions."
msgstr ""

#: ../../client/dev/session.rst:10 edbaf399e7914635aa921c927f87503e
msgid ""
"The high-level API functions cannot be used alone -- you must initiate a "
"client session first because each session provides *proxy attributes* "
"that represent API functions and run on the session itself."
msgstr ""

#: ../../client/dev/session.rst:14 2e49919a2c3a4cf69766fd2acec87116
msgid ""
"To achieve this, during initialization session objects internally "
"construct new types by combining the "
":class:`~ai.backend.client.base.BaseFunction` class with the attributes "
"in each API function classes, and makes the new types bound to itself. "
"Creating new types every time when creating a new session instance may "
"look weird, but it is the most convenient way to provide *class-methods* "
"in the API function classes to work with specific *session instances*."
msgstr ""

#: ../../client/dev/session.rst:21 524c7274a0894782820b82b91174fdfd
msgid ""
"When designing your application, please note that session objects are "
"intended to live long following the process' lifecycle, instead of to be "
"created and disposed whenever making API requests."
msgstr ""

#~ msgid "The base abstract class for sessions."
#~ msgstr ""

#~ msgid "If set True, it skips API version negotiation when opening the session."
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid ":py:class:`bool`"
#~ msgstr ""

#~ msgid "Initializes the session and perform version negotiation."
#~ msgstr ""

#~ msgid ""
#~ ":py:data:`~typing.Optional`\\[:py:obj:`None`, "
#~ ":py:class:`~typing.Awaitable`\\[:py:obj:`None`]]"
#~ msgstr ""

#~ msgid "Terminates the session and releases underlying resources."
#~ msgstr ""

#~ msgid "Checks if the session is closed."
#~ msgstr ""

#~ msgid "The configuration used by this session object."
#~ msgstr ""

#~ msgid ":py:class:`~ai.backend.client.config.APIConfig`"
#~ msgstr ""

#~ msgid ""
#~ "A context manager for API client "
#~ "sessions that makes API requests "
#~ "synchronously. You may call simple "
#~ "request-response APIs like a plain "
#~ "Python function, but cannot use "
#~ "streaming APIs based on WebSocket and"
#~ " Server-Sent Events."
#~ msgstr ""

#~ msgid ":py:obj:`None`"
#~ msgstr ""

#~ msgid ""
#~ "Terminates the session.  It schedules "
#~ "the ``close()`` coroutine of the "
#~ "underlying aiohttp session and then "
#~ "enqueues a sentinel object to indicate"
#~ " termination.  Then it waits until "
#~ "the worker thread to self-terminate "
#~ "by joining."
#~ msgstr ""

#~ msgid ""
#~ "The thread that internally executes the"
#~ " asynchronous implementations of the given"
#~ " API functions."
#~ msgstr ""

#~ msgid ""
#~ "A context manager for API client "
#~ "sessions that makes API requests "
#~ "asynchronously. You may call all APIs"
#~ " as coroutines. WebSocket-based APIs "
#~ "and SSE-based APIs returns special "
#~ "response types."
#~ msgstr ""

#~ msgid ":py:class:`~typing.Awaitable`\\[:py:obj:`None`]"
#~ msgstr ""

