# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2022, Lablup Inc.
# This file is distributed under the same license as the Backend.AI
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Backend.AI Documentation 22.06\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-13 15:33+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../dev/daily-workflows.rst:2 8a43b951eab24929a03f25b57cc27cc5
msgid "Daily Development Workflows"
msgstr ""

#: ../../dev/daily-workflows.rst:5 4ec4c40084474e70b58ca99a0d473a8a
msgid "About Pants"
msgstr ""

#: ../../dev/daily-workflows.rst:7 8205ca66fff94899bba1b7b770a7141f
msgid ""
"Since 22.09, we have migrated to `Pants <https://pantsbuild.org>`_ as our"
" primary build system and dependency manager for the mono-repository of "
"Python components."
msgstr ""

#: ../../dev/daily-workflows.rst:11 dff44e9b500d4942802eb72b303268f5
msgid ""
"Pants is a graph-based async-parallel task executor written in Rust and "
"Python. It is tailored to building programs with explicit and auto-"
"inferred dependency checks and aggressive caching."
msgstr ""

#: ../../dev/daily-workflows.rst:16 95ee4d029c4d4835b341738a98e2404a
msgid "Key concepts"
msgstr ""

#: ../../dev/daily-workflows.rst:18 ad35c6dd70b84d578d5245ddc7c4757f
msgid "The command pattern:"
msgstr ""

#: ../../dev/daily-workflows.rst:26 9cdba7314bf04c678d0d8ad972c2ed3d
msgid ""
"If your ``scripts/install-dev.sh`` says that you need to use ``./pants-"
"local`` instead of ``./pants``, replace all ``./pants`` in the following "
"command examples with ``./pants-local``."
msgstr ""

#: ../../dev/daily-workflows.rst:30 7263b157cf1340e4a738b2b12dc46d5b
msgid "Goal: an action to execute"
msgstr ""

#: ../../dev/daily-workflows.rst:32 da623d1ab90e465794c2177e606136b7
msgid "You may think this as the root node of the task graph executed by Pants."
msgstr ""

#: ../../dev/daily-workflows.rst:34 b2559577ecf243659710e558d4e5b9de
msgid ""
"Target: objectives for the action, usually expressed as "
"``path/to/dir:name``"
msgstr ""

#: ../../dev/daily-workflows.rst:36 c4f8069c5f504db5ac1de9e915cdc1a5
msgid "The targets are declared/defined by ``path/to/dir/BUILD`` files."
msgstr ""

#: ../../dev/daily-workflows.rst:38 5254fae5240641c686774f06c61559ac
msgid "The global configuration is at ``pants.toml``."
msgstr ""

#: ../../dev/daily-workflows.rst:40 222da2f1189c4b91ad0d7e5888687214
msgid "Recommended reading: https://www.pantsbuild.org/docs/concepts"
msgstr ""

#: ../../dev/daily-workflows.rst:43 889c5a2eb2a9425fbe6fe0c7098a11d9
msgid "Inspecting build configurations"
msgstr ""

#: ../../dev/daily-workflows.rst:45 d4396b6c825740ea971308a0567d3f11
msgid "Display all targets"
msgstr ""

#: ../../dev/daily-workflows.rst:51 9b87d79d35ec40c8aa27ed43cabd334a
msgid ""
"This list includes the full enumeration of individual targets auto-"
"generated by collective targets (e.g., ``python_sources()`` generates "
"multiple ``python_source()`` targets by globbing the ``sources`` pattern)"
msgstr ""

#: ../../dev/daily-workflows.rst:55 a5b5ced6d0394125aee52eaecdbfd4fe
msgid ""
"Display all dependencies of a specific target (i.e., all targets required"
" to build this target)"
msgstr ""

#: ../../dev/daily-workflows.rst:62 38874792b4d7484cbf63e8e4b08eb74b
msgid ""
"Display all dependees of a specific target (i.e., all targets affected "
"when this target is changed)"
msgstr ""

#: ../../dev/daily-workflows.rst:71 29544e62d431417db3902e582aa8e342
msgid ""
"Pants statically analyzes the source files to enumerate all its imports "
"and determine the dependencies automatically.  In most cases this works "
"well, but sometimes you may need to manually declare explicit "
"dependencies in ``BUILD`` files."
msgstr ""

#: ../../dev/daily-workflows.rst:77 91afa460c5be47f98f085adb12d27aac
msgid "Running lint and check"
msgstr ""

#: ../../dev/daily-workflows.rst:79 98e129a6cad44969839c285e7c753551
msgid "Run lint/check for all targets:"
msgstr ""

#: ../../dev/daily-workflows.rst:86 625b6fe404c34e0392eefa249ecaacc7
msgid "To run lint/check for a specific target or a set of targets:"
msgstr ""

#: ../../dev/daily-workflows.rst:93 d1e17ed638694bccb37e2a45d97dd287
msgid ""
"Currently running mypy with pants is slow because mypy cannot utilize its"
" own cache as pants invokes mypy per file due to its own dependency "
"management scheme. (e.g., Checking all sources takes more than 1 "
"minutes!) This performance issue is being tracked by "
"`pantsbuild/pants#10864 "
"<https://github.com/pantsbuild/pants/issues/10864>`_.  For now, try using"
" a smaller target of files that you work on and `use an option to select "
"the targets only changed <https://www.pantsbuild.org/docs/advanced-"
"target-selection#running-over-changed-files-with---changed-since>`_ "
"(``--changed-since``)."
msgstr ""

#: ../../dev/daily-workflows.rst:102 3afa284527954d06a40e35c3f1a7d27c
msgid "Running formatters"
msgstr ""

#: ../../dev/daily-workflows.rst:104 4421c8c0b162426db63c7462cbc6f648
msgid ""
"If you encounter failure from ``isort``, you may run the formatter to "
"automatically fix the import ordering issues."
msgstr ""

#: ../../dev/daily-workflows.rst:112 cb7358310de04aa58017abbb69e984c1
msgid "Running unit tests"
msgstr ""

#: ../../dev/daily-workflows.rst:114 1482487e0b5640eda897e4a62759e7fd
msgid "Here are various methods to run tests:"
msgstr ""

#: ../../dev/daily-workflows.rst:126 8265a9dceb8d4502bc984ae61bd9b1d5
msgid "You may also try ``--changed-since`` option like ``lint`` and ``check``."
msgstr ""

#: ../../dev/daily-workflows.rst:128 1af7f0db804b43dc86261324b4e7b6cf
msgid ""
"To specify extra environment variables for tests, use the ``--test-extra-"
"env-vars`` option:"
msgstr ""

#: ../../dev/daily-workflows.rst:138 a2d4007acb3c48c19e88d8faebc7930c
msgid "Running integration tests"
msgstr ""

#: ../../dev/daily-workflows.rst:145 bfa2fc50fdf14599af7841cfb9c16b89
msgid "Building wheel packages"
msgstr ""

#: ../../dev/daily-workflows.rst:147 43eb5628255348529812632aa268cc61
msgid "To build a specific package:"
msgstr ""

#: ../../dev/daily-workflows.rst:157 3b0597f1d1524de58543319c362bb45e
msgid "If the package content varies by the target platform, use:"
msgstr ""

#: ../../dev/daily-workflows.rst:170 8298168dd4f44b24b17f4626a5e01bf6
msgid "Using IDEs and editors"
msgstr ""

#: ../../dev/daily-workflows.rst:172 c6c618cd38214ecca50f5e01c616df1b
msgid ""
"Pants has an ``export`` goal to auto-generate a virtualenv that contains "
"all external dependencies installed in a single place. This is very "
"useful when you work with IDEs and editors."
msgstr ""

#: ../../dev/daily-workflows.rst:176 8174c301abe548dcb0b97f88fb997d16
msgid "To (re-)generate the virtualenv, run:"
msgstr ""

#: ../../dev/daily-workflows.rst:182 069a8d68db654d13ba0ea99f84343d5f
msgid ""
"Then configure your IDEs/editors to use ``dist/export/python/virtualenvs"
"/python-default/VERSION/bin/python`` as the interpreter for your code, "
"where ``VERSION`` is the interpreter version specified in ``pants.toml``."
msgstr ""

#: ../../dev/daily-workflows.rst:187 982a7a15473648139733ef0c51ef79be
msgid ""
"To make LSP (language server protocol) services like PyLance to detect "
"our source packages correctly, you should also configure ``PYTHONPATH`` "
"to include the repository root's ``src`` directory and ``plugins/*/`` "
"directories if you have added Backend.AI plugin checkouts."
msgstr ""

#: ../../dev/daily-workflows.rst:191 be7bdf9a0f264211bfae8213b7df824b
msgid ""
"For linters and formatters, configure the tool executable paths to "
"indicate "
"``dist/export/python/virtualenvs/tools/TOOLNAME/bin/EXECUTABLE``. For "
"example, flake8's executable path is "
"``dist/export/python/virtualenvs/tools/flake8/bin/flake8``."
msgstr ""

#: ../../dev/daily-workflows.rst:196 58188d385ac84749a6b180ca02ab6359
msgid "Currently we have four Python tools to configure in this way:"
msgstr ""

#: ../../dev/daily-workflows.rst:198 6edb22c8b9264388bdfda57c04475dd1
msgid "``flake8``: Validates PEP-8 coding style"
msgstr ""

#: ../../dev/daily-workflows.rst:200 df8a8e2a767746cf98535140bdf4f186
msgid "``mypy``: Validates the type annotations"
msgstr ""

#: ../../dev/daily-workflows.rst:202 bf00821000014ea6b7c103f1e7f9d61a
msgid ""
"``black``: Validates and reformats all Python codes by reconstructing it "
"from AST, just like ``gofmt``."
msgstr ""

#: ../../dev/daily-workflows.rst:207 546d1debedc948989e64a006307f23ae
msgid ""
"For a long list of arguments or list/tuple items, you could explicitly "
"add a trailing comma to force Black to insert line-breaks after every "
"item even when the line length does not exceed the limit (100 "
"characters)."
msgstr ""

#: ../../dev/daily-workflows.rst:213 06cfb06f354245edba92cfb75b022e30
msgid ""
"You may disable auto-formatting on a specific region of code using ``# "
"fmt: off`` and ``# fmt: on`` comments, though this is strongly "
"discouraged except when manual formatting gives better readability, such "
"as numpy matrix declarations."
msgstr ""

#: ../../dev/daily-workflows.rst:217 096ebe481f5342459ff299b6f6e44016
msgid ""
"``isort``: Validates and reorders import statements in a fixed order "
"depending on the categories of imported packages (such as bulitins, "
"first-parties, and third-parties), the alphabetical order, and whether it"
" uses ``from`` or not."
msgstr ""

#: ../../dev/daily-workflows.rst:222 bb85d399f7e44eaab73b3a579e58977b
msgid "VSCode"
msgstr ""

#: ../../dev/daily-workflows.rst:224 315176e821ad4f9ca3a8a13122b899e8
msgid "Set the following keys in the workspace settings:"
msgstr ""

#: ../../dev/daily-workflows.rst:226 bffd4dfe851241e984b5f8abb8461c88
msgid "``flake8``: ``python.linting.flake8Path``"
msgstr ""

#: ../../dev/daily-workflows.rst:228 961e94f67a584e77aff4c2bc2c45dcfa
msgid "``mypy``: ``python.linting.mypyPath``"
msgstr ""

#: ../../dev/daily-workflows.rst:230 3761dc37eef94c3d8fc7c9685aae149f
msgid "``black``: ``python.formatting.blackPath``"
msgstr ""

#: ../../dev/daily-workflows.rst:232 0a4dfa9792884d718dd9876edcdcc80f
msgid "``isort``: ``python.sortImports.path``"
msgstr ""

#: ../../dev/daily-workflows.rst:236 fd107f5fe0fc46f88e2ea1b8f0ba6c57
msgid ""
"When the target Python version has changed when you pull a new "
"version/branch, you need to re-run ``./pants export ::`` and manually "
"update the Python interpreter path and mypy executable path "
"configurations."
msgstr ""

#: ../../dev/daily-workflows.rst:240 23de04e703e84e15869a7395b7225d21
msgid "Vim/NeoVim"
msgstr ""

#: ../../dev/daily-workflows.rst:242 f953b0b2ed2746048d4076856ca2a9ae
msgid ""
"There are a large variety of plugins and usually heavy Vimmers should "
"know what to do."
msgstr ""

#: ../../dev/daily-workflows.rst:244 438e63d030f24090877274c013926261
msgid ""
"We recommend using `ALE <https://github.com/dense-analysis/ale>`_ or `CoC"
" <https://github.com/neoclide/coc.nvim>`_ plugins to have automatic lint "
"highlights, auto-formatting on save, and auto-completion support with "
"code navigation via LSP backends."
msgstr ""

#: ../../dev/daily-workflows.rst:250 dd28261c1b83498396d7392eed47db9e
msgid ""
"Note that it is recommended to enable only one linter/formatter at a time"
" (either ALE or CoC) with proper configurations, to avoid duplicate "
"suggestions and error reports."
msgstr ""

#: ../../dev/daily-workflows.rst:253 773adf6855a34948a655dde6acde6d44
msgid ""
"When using ALE, it is recommended to have a directory-local vimrc as "
"follows. First, add ``set exrc`` in your user-level vimrc. Then put the "
"followings in ``.vimrc`` (or ``.nvimrc`` for NeoVim) in the build root "
"directory:"
msgstr ""

#: ../../dev/daily-workflows.rst:267 6a5f59a068d94543ae27ac8d046a402e
msgid ""
"When using CoC, run ``:CocInstall coc-pyright`` and ``:CocLocalConfig`` "
"after opening a file in the local working copy to initialize PyRight "
"functionalities. In the local configuration file (``.vim/coc-"
"settings.json``), you may put the linter/formatter configurations just "
"like VSCode (see `the official reference <https://www.npmjs.com/package"
"/coc-pyright>`_):"
msgstr ""

#: ../../dev/daily-workflows.rst:290 a2de78c9f252478398c3948852016c0b
msgid "Switching between branches"
msgstr ""

#: ../../dev/daily-workflows.rst:292 13b3d37dc1124360afa3a6075337ee0e
msgid ""
"When each branch has different external package requirements, you should "
"run ``./pants export ::`` before running codes after ``git switch``-ing "
"between such branches."
msgstr ""

#: ../../dev/daily-workflows.rst:295 b5f81a3967794c34936ba05774422f5f
msgid ""
"Sometimes, you may experience bogus \"glob\" warning from pants because "
"it sees a stale cache. In that case, run ``killall -r pantsd`` (``killall"
" pantsd`` in macOS) and it will be fine."
msgstr ""

#: ../../dev/daily-workflows.rst:299 bd5ffd4e228b425285c37711bc9e3107
msgid "Running entrypoints"
msgstr ""

#: ../../dev/daily-workflows.rst:301 3f4ac8c781c64ddb8b0d4e31e80c75d9
msgid ""
"To run a Python program within the unified virtualenv, use the ``./py`` "
"helper script.  It automatically passes additional arguments "
"transparently to the Python executable of the unified virtualenv."
msgstr ""

#: ../../dev/daily-workflows.rst:305 2de16502cf4c41819d65b7add4ea22e2
msgid "``./backend.ai`` is an alias of ``./py -m ai.backend.cli``."
msgstr ""

#: ../../dev/daily-workflows.rst:307 cbfc5ade66894683a496d237dcd39b40
msgid "Examples:"
msgstr ""

#: ../../dev/daily-workflows.rst:316 2d7b885985364ba5812899a2a72bca21
msgid "Working with plugins"
msgstr ""

#: ../../dev/daily-workflows.rst:318 8211ae7cb1134f07bdd70851e89dd8ce
msgid ""
"To develop Backend.AI plugins together, the repository offers a special "
"location ``./plugins`` where you can clone plugin repositories and a "
"shortcut script ``scripts/install-plugin.sh`` that does this for you."
msgstr ""

#: ../../dev/daily-workflows.rst:326 7d97fb677cd04f4cb15a6f0b46f6a0e8
msgid "This is equivalent to:"
msgstr ""

#: ../../dev/daily-workflows.rst:334 23bdf05d3bf2423983dabc691b2f6506
msgid ""
"These plugins are auto-detected by scanning ``setup.cfg`` of plugin "
"subdirectories by the ``ai.backend.plugin.entrypoint`` module, even "
"without explicit editable installations."
msgstr ""

#: ../../dev/daily-workflows.rst:338 a89ddc5d57904e1f8f57f9d3bc8b2413
msgid "Writing test cases"
msgstr ""

#: ../../dev/daily-workflows.rst:340 9846676ab5e34c5bb41afc95f7900dc9
msgid ""
"Mostly it is just same as before: use the standard pytest practices. "
"Though, there are a few key differences:"
msgstr ""

#: ../../dev/daily-workflows.rst:343 63d2cd81614e4e69a3016a4a6ae759d0
msgid "Tests are executed **in parallel** in the unit of test modules."
msgstr ""

#: ../../dev/daily-workflows.rst:345 07d9e4998cfe400f93f8267343d43d5e
msgid ""
"Therefore, session-level fixtures may be executed *multiple* times during"
" a single run of ``./pants test``."
msgstr ""

#: ../../dev/daily-workflows.rst:350 c233c108cd424ad0ae2d93b14d7c9cfc
msgid ""
"If you *interrupt* (Ctrl+C, SIGINT) a run of ``./pants test``, it will "
"immediately kill all pytest processes without fixture cleanup. This may "
"accumulate unused Docker containers in your system, so it is a good "
"practice to run ``docker ps -a`` periodically and clean up dangling "
"containers."
msgstr ""

#: ../../dev/daily-workflows.rst:355 ee7b6abd4f7941feb1fd45d188c80d02
msgid "To interactively run tests, see :ref:`debugging-tests`."
msgstr ""

#: ../../dev/daily-workflows.rst:357 95e026144f3341b4adf50b43fc31f507
msgid "Here are considerations for writing Pants-friendly tests:"
msgstr ""

#: ../../dev/daily-workflows.rst:359 10a0d269d2ff4219ac41c7b594717421
msgid ""
"Ensure that it runs in an isolated/mocked environment and minimize "
"external dependency."
msgstr ""

#: ../../dev/daily-workflows.rst:361 9296eb0c288d46fe81c61ea7b54fc876
msgid ""
"If required, use the environment variable ``BACKEND_TEST_EXEC_SLOT`` (an "
"integer value) to uniquely define TCP port numbers and other resource "
"identifiers to allow parallel execution. `Refer the Pants docs "
"<https://www.pantsbuild.org/docs/reference-pytest#section-execution-slot-"
"var](https://www.pantsbuild.org/docs/reference-pytest#section-execution-"
"slot-var>`_."
msgstr ""

#: ../../dev/daily-workflows.rst:366 cacb6a314e6c4f02b0d028c0b217f9a3
msgid ""
"Use ``ai.backend.testutils.bootstrap`` to populate a single-node "
"Redis/etcd/Postgres container as fixtures of your test cases. Import the "
"fixture and use it like a plain pytest fixture."
msgstr ""

#: ../../dev/daily-workflows.rst:370 33fd7555de8b40658051cede98887b92
msgid ""
"These fixtures create those containers with **OS-assigned public port "
"numbers** and give you a tuple of container ID and a "
"``ai.backend.common.types.HostPortPair`` for use in test codes. In "
"manager and agent tests, you could just refer ``local_config`` to get a "
"pre-populated local configurations with those port numbers."
msgstr ""

#: ../../dev/daily-workflows.rst:376 cbcb4e316c5a45be8ad45272eb0133a0
msgid ""
"In this case, you may encounter ``flake8`` complaining about unused "
"imports and redefinition. Use ``# noqa: F401`` and ``# noqa: F811`` "
"respectively for now."
msgstr ""

#: ../../dev/daily-workflows.rst:381 2ed9cdee38fb4ab6929b4ec695fbf136
msgid "**About using /tmp in tests**"
msgstr ""

#: ../../dev/daily-workflows.rst:383 ccffcdb1577a4e2792b2d98823e4f346
msgid ""
"If your Docker service is installed using **Snap** (e.g., Ubuntu 20.04 or"
" later), it cannot access the system ``/tmp`` directory because Snap "
"applies a private \"virtualized\" tmp directory to the Docker service."
msgstr ""

#: ../../dev/daily-workflows.rst:387 90ef401cd3554ad8b97143f5d7b1828b
msgid ""
"You should use other locations under the user's home directory (or "
"preferably ``.tmp`` in the working copy directory) to avoid mount "
"failures for the developers/users in such platforms."
msgstr ""

#: ../../dev/daily-workflows.rst:391 8d6af8924c5048bcad238fd6f9cb8eed
msgid ""
"It is okay to use the system ``/tmp`` directory if they are not mounted "
"inside any containers."
msgstr ""

#: ../../dev/daily-workflows.rst:395 c3a96e6bbd804eb6b51f72a5ac18667f
msgid "Writing documentation"
msgstr ""

#: ../../dev/daily-workflows.rst:397 a2efe39a71c14260b4b0c0ab2b85fad7
msgid "Create a new pyenv virtualenv based on Python 3.10."
msgstr ""

#: ../../dev/daily-workflows.rst:403 cab450f665eb45ccb68d9024dc3ce123
msgid "Activate the virtualenv and run:"
msgstr ""

#: ../../dev/daily-workflows.rst:411 ebe5ebf38bdc42669e1ca698e71c3470
msgid "You can build the docs as follows:"
msgstr ""

#: ../../dev/daily-workflows.rst:419 7ad737a16df34521a08cc49a448a06e9
msgid "To locally serve the docs:"
msgstr ""

#: ../../dev/daily-workflows.rst:426 2c0299da8ff74c1b8ac0082abc8ac147
msgid ""
"(TODO: Use Pants' own Sphinx support when `pantsbuild/pants#15512 "
"<https://github.com/pantsbuild/pants/pull/15512>`_ is released.)"
msgstr ""

#: ../../dev/daily-workflows.rst:430 833e178d65c0430a87c4b6f4590f5f9a
msgid "Advanced Topics"
msgstr ""

#: ../../dev/daily-workflows.rst:433 a95505c035764e7a934a6cc0c278e3b7
msgid "Adding new external dependencies"
msgstr ""

#: ../../dev/daily-workflows.rst:435 a446e56764824ec6a48e952e25b0af12
msgid ""
"Add the package version requirements to the unified requirements file "
"(``./requirements.txt``)."
msgstr ""

#: ../../dev/daily-workflows.rst:437 2b75d34946384c288afbdd6a855ba771
msgid ""
"Update the ``module_mapping`` field in the root build configuration "
"(``./BUILD``) if the package name and its import name differs."
msgstr ""

#: ../../dev/daily-workflows.rst:440 86d3b9c324b24debb8fd4bc3a776345a
msgid ""
"Update the ``type_stubs_module_mapping`` field in the root build "
"configuration if the package provides a type stubs package separately."
msgstr ""

#: ../../dev/daily-workflows.rst:443 5ff6c520bc9543099adeafab199af75d
msgid "Run:"
msgstr ""

#: ../../dev/daily-workflows.rst:451 83f9aec6107c4f84a67aaa2fb137bcfa
msgid "Merging lockfile conflicts"
msgstr ""

#: ../../dev/daily-workflows.rst:453 8449a0a9a474476387e433b68184e12d
msgid ""
"When you work on a branch that adds a new external dependency and the "
"main branch has also another external dependency addition, merging the "
"main branch into your branch is likely to make a merge conflict on "
"``python.lock`` file."
msgstr ""

#: ../../dev/daily-workflows.rst:457 a92524aa6c064bf38d9ec9dca2309177
msgid ""
"In this case, you can just do the followings since we can just "
"*regenerate* the lockfile after merging ``requirements.txt`` and "
"``BUILD`` files."
msgstr ""

#: ../../dev/daily-workflows.rst:470 cbe3df9032bd4194999ffbea63a3c849
msgid "Resetting Pants"
msgstr ""

#: ../../dev/daily-workflows.rst:472 7c7cda3951a34212b7a4aeedea8152d7
msgid ""
"If Pants behaves strangely, you could simply reset all its runtime-"
"generated files by:"
msgstr ""

#: ../../dev/daily-workflows.rst:479 44cea42007a54b87a56a335267e00e4e
msgid ""
"After this, re-running any Pants command will automatically reinitialize "
"itself and all cached data as necessary."
msgstr ""

#: ../../dev/daily-workflows.rst:485 f9c99b6ab9114dacaeffe2fd5ac807ed
msgid "Debugging test cases (or interactively running test cases)"
msgstr ""

#: ../../dev/daily-workflows.rst:487 13a851a55ea54e47b4fc1a937d964b3b
msgid ""
"When your tests *hang*, you can try adding the ``--debug`` flag to the "
"``./pants test`` command:"
msgstr ""

#: ../../dev/daily-workflows.rst:493 b6b6c64adbb149a6800a5e44c6171f5d
msgid ""
"so that Pants runs the designated test targets **serially and "
"interactively**. This means that you can directly observe the console "
"output and Ctrl+C to gracefully shutdown the tests  with fixture cleanup."
" You can also apply additional pytest options such as ``--fulltrace``, "
"``-s``, etc. by passing them after target arguments and ``--`` when "
"executing ``./pants test`` command."
msgstr ""

#: ../../dev/daily-workflows.rst:500 88dd485ce9a8493cb287616a8b4d2f0e
msgid ""
"Installing a subset of mono-repo packages in the editable mode for other "
"projects"
msgstr ""

#: ../../dev/daily-workflows.rst:502 f5a063ebedbb42f78bb8e575cdfc21ff
msgid ""
"Sometimes, you need to editable-install a subset of packages into other "
"project's directories. For instance you could mount the client SDK and "
"its internal dependencies for a Docker container for development."
msgstr ""

#: ../../dev/daily-workflows.rst:505 aa303a989c8f4da1bf44d421eec9c9af
msgid "In this case, we recommend to do it as follows:"
msgstr ""

#: ../../dev/daily-workflows.rst:507 3441af8c0acf46249575f8437fc5f821
msgid ""
"Run the following command to build a wheel from the current mono-repo "
"source:"
msgstr ""

#: ../../dev/daily-workflows.rst:513 58107757821b4c90918daea85ba393b0
msgid "This will generate ``dist/backend.ai_client-{VERSION}-py3-none-any.whl``."
msgstr ""

#: ../../dev/daily-workflows.rst:515 84bb49b970654ddcb5319cab5a9b6c9d
msgid ""
"Run ``pip install -U {MONOREPO_PATH}/dist/{WHEEL_FILE}`` in the target "
"environment."
msgstr ""

#: ../../dev/daily-workflows.rst:517 3553f09cfe6f4e309238f2518b2016fa
msgid ""
"This will populate the package metadata and install its external "
"dependencies. The target environment may be one of a separate virtualenv "
"or a container being built. For container builds, you need to first "
"``COPY`` the wheel file and install it."
msgstr ""

#: ../../dev/daily-workflows.rst:521 79a3c0cc536c44f0929da1538dc9037e
msgid ""
"Check the internal dependency directories to link by running the "
"following command:"
msgstr ""

#: ../../dev/daily-workflows.rst:531 900455dbaa6c420f9cb05b36632c46dc
msgid "Link these directories in the target environment."
msgstr ""

#: ../../dev/daily-workflows.rst:533 de6699bf2b8042fea312cb968248be18
msgid ""
"For example, if it is a Docker container, you could add ``-v "
"{MONOREPO_PATH}/src/ai/backend/{COMPONENT}:/usr/local/lib/python3.10"
"/site-packages/ai/backend/{COMPONENT}`` to the ``docker create`` or "
"``docker run`` commands for all the component directories found in the "
"previous step."
msgstr ""

#: ../../dev/daily-workflows.rst:538 07f93f0f1b0f4c2184f8a223cfff673a
msgid ""
"If it is a local checkout with a pyenv-based virtualenv, you could "
"replace ``$(pyenv prefix)/lib/python3.10/site-"
"packages/ai/backend/{COMPONENT}`` directories with symbolic links to the "
"mono-repo's component source directories."
msgstr ""

#: ../../dev/daily-workflows.rst:543 681338a4f67d45b888696110c3a84183
msgid "Boosting the performance of Pants commands"
msgstr ""

#: ../../dev/daily-workflows.rst:545 3223bc43cebb41e29e49d8ffe3adc1bf
msgid ""
"Since Pants uses temporary directories for aggressive caching, you could "
"make the ``.tmp`` directory under the working copy root a tmpfs "
"partition:"
msgstr ""

#: ../../dev/daily-workflows.rst:552 f445a0c1fef24ca892cd6001850bee9b
msgid ""
"To make this persistent across reboots, add the following line to "
"``/etc/fstab``:"
msgstr ""

#: ../../dev/daily-workflows.rst:558 c5f894d133d6448f92fa0768bf7eae80
msgid ""
"The size should be more than 3GB. (Running ``./pants test ::`` consumes "
"about 2GB.)"
msgstr ""

#: ../../dev/daily-workflows.rst:561 6cc1f699de9d4858bea89f0f20bfa109
msgid ""
"To change the size at runtime, you could simply remount it with a new "
"size option:"
msgstr ""

#: ../../dev/daily-workflows.rst:568 455615922edb425ab87fe7408ca70b9e
msgid "Making a new release"
msgstr ""

#: ../../dev/daily-workflows.rst:570 c09a12bf340c4acab07fab436187777b
msgid ""
"Update ``./VERSION`` file to set a new version number. (Remove the ending"
" new line, e.g., using ``set noeol`` in Vim.  This is also configured in "
"``./editorconfig``)"
msgstr ""

#: ../../dev/daily-workflows.rst:574 c3543de236394e789d55f18a99432955
msgid ""
"Run ``LOCKSET=tools/towncrier ./py -m towncrier`` to auto-generate the "
"changelog."
msgstr ""

#: ../../dev/daily-workflows.rst:576 27e0843280b145bb9d6f9f8f16352c70
msgid ""
"You may append ``--draft`` to see a preview of the changelog update "
"without actually modifying the filesytem."
msgstr ""

#: ../../dev/daily-workflows.rst:579 88b0f916d5c2472aae4e195e4fffdc56
msgid ""
"(WIP: `lablup/backend.ai#427 "
"<https://github.com/lablup/backend.ai/pull/427>`_)."
msgstr ""

#: ../../dev/daily-workflows.rst:581 90d0ed63fefe4b9fa6d4720b45fc5796
msgid "Make a new git commit with the commit message: \"release: <version>\"."
msgstr ""

#: ../../dev/daily-workflows.rst:583 2c7001cc913340aca73fc3843ee20f7d
msgid ""
"Make an annotated tag to the commit with the message: \"Release "
"v<version>\" or \"Pre-release v<version>\" depending on the release "
"version."
msgstr ""

#: ../../dev/daily-workflows.rst:586 1937c0b1bd7c41bdbd03832649e02a98
msgid ""
"Push the commit and tag.  The GitHub Actions workflow will build the "
"packages and publish them to PyPI."
msgstr ""

#: ../../dev/daily-workflows.rst:590 1c648838d98f4527bb9d970a953d260b
msgid "Backporting to legacy per-pkg repositories"
msgstr ""

#: ../../dev/daily-workflows.rst:592 4b5463afeac44517accb1116b7013757
msgid "Use ``git diff`` and ``git apply`` instead of ``git cherry-pick``."
msgstr ""

#: ../../dev/daily-workflows.rst:594 574710bd89ae47d6a4ac862992f40c73
msgid ""
"To perform a three-way merge for conflicts, add ``-3`` option to the "
"``git apply`` command."
msgstr ""

#: ../../dev/daily-workflows.rst:596 23ef4c3b6fd2405f9542e55d033f44c8
msgid ""
"You may need to rewrite some codes as the package structure differs. (The"
" new mono repository has more fine-grained first party packages divided "
"from the ``backend.ai-common`` package.)"
msgstr ""

#: ../../dev/daily-workflows.rst:600 aa04ffb15aeb41bd80aade6483c41a61
msgid ""
"When referring the PR/issue numbers in the commit for per-pkg "
"repositories, update them like ``lablup/backend.ai#NNN`` instead of "
"``#NNN``."
msgstr ""

#~ msgid ""
#~ "To activate flake8/mypy checks (in Vim)"
#~ " and get proper intelli-sense support"
#~ " for pytest (in VSCode), just install"
#~ " them in the exported venv as "
#~ "follows. (You need to repeat this "
#~ "when you re-export!)"
#~ msgstr ""

#~ msgid "For Vim, you also need to explicitly activate the exported venv."
#~ msgstr ""

#~ msgid ""
#~ "To develop Backend.AI plugins together, "
#~ "the repository offers a special location"
#~ " ``./plugins`` where you can clone "
#~ "plugin repositories and a shortcut "
#~ "script ``scripts/install-plugin.sh`` to "
#~ "install them inside the exported venv."
#~ msgstr ""

#~ msgid "Manual installation:"
#~ msgstr ""

#~ msgid ""
#~ "Whenever you re-export the venv "
#~ "using ``./pants export ::``, you must"
#~ " *reinstall* the plugins.  There is "
#~ "also a shrotcut script that does "
#~ "this for you: ``scripts/reinstall-"
#~ "plugins.sh``."
#~ msgstr ""

