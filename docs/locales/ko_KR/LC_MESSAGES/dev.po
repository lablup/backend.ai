# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, Lablup Inc.
# This file is distributed under the same license as the Backend.AI API
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Backend.AI API Documentation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-08 23:35+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../dev/adding-kernels.rst:2
#, fuzzy
msgid "Adding New Kernel Images"
msgstr "새 REPL 커널 추가"

#: ../../dev/adding-kernels.rst:5
msgid "Overview"
msgstr ""

#: ../../dev/adding-kernels.rst:7
msgid ""
"Backend.AI supports running Docker containers to execute user-requested "
"computations in a resource-constrained and isolated environment. Most "
"Docker container images can be *imported* as Backend.AI kernels with "
"appropriate metadata annotations."
msgstr ""

#: ../../dev/adding-kernels.rst:10
msgid ""
"Prepare a Docker image based on Ubuntu 16.04/18.04, CentOS 7.6, or Alpine"
" 3.8."
msgstr ""

#: ../../dev/adding-kernels.rst:11
msgid "Create a Dockerfile that does:"
msgstr ""

#: ../../dev/adding-kernels.rst:13
msgid ""
"Install the OpenSSL library in the image for the kernel runner (if not "
"installed)."
msgstr ""

#: ../../dev/adding-kernels.rst:14
msgid "Add metadata labels."
msgstr ""

#: ../../dev/adding-kernels.rst:15
msgid "Add service definition files."
msgstr ""

#: ../../dev/adding-kernels.rst:16
msgid "Add a jail policy file."
msgstr ""

#: ../../dev/adding-kernels.rst:18
msgid "Build a derivative image using the Dockerfile."
msgstr ""

#: ../../dev/adding-kernels.rst:19
msgid "Upload the image to a Docker registry to use with Backend.AI."
msgstr ""

#: ../../dev/adding-kernels.rst:23
msgid "Kernel Runner"
msgstr ""

#: ../../dev/adding-kernels.rst:25
msgid ""
"Every Backend.AI kernel should run a small daemon called \"kernel "
"runner\". It communicates with the Backend.AI Agent running in the host "
"via ZeroMQ, and manages user code execution and in-container service "
"processes."
msgstr ""

#: ../../dev/adding-kernels.rst:28
msgid ""
"The kernel runner provides runtime-specific implementations for various "
"code execution modes such as the query mode and the batch mode, "
"compatible with a number of well-known programming languages. It also "
"manages the process lifecycles of service-port processess."
msgstr ""

#: ../../dev/adding-kernels.rst:31
msgid ""
"To decouple the development and update cycles for Docker images and the "
"Backend.AI Agent, we don't install the kernel runner inside images. "
"Instead, Backend.AI Agent mounts a special \"krunner\" volume as "
"``/opt/backend.ai`` inside containers. This volume includes a customized "
"static build of Python. The kernel runner daemon package is mounted as "
"one of the site packages of this Python distribution as well. The agent "
"also uses ``/opt/kernel`` as the directory for mounting other self-"
"contained single-binary utilties. This way, image authors do not have to "
"bother with installing Python and Backend.AI specific software. All dirty"
" jobs like volume deployment, its content updates, and mounting for new "
"containers are automatically managed by Backend.AI Agent."
msgstr ""

#: ../../dev/adding-kernels.rst:39
msgid ""
"Since the customized Python build and binary utilities need to be built "
"for specific Linux distributions, we only support Docker images built on "
"top of Alpine 3.8+, CentOS 7+, and Ubuntu 16.04+ base images. Note that "
"these three base distributions practically cover all commonly available "
"Docker images."
msgstr ""

#: ../../dev/adding-kernels.rst:43
msgid "Image Prerequisites"
msgstr ""

#: ../../dev/adding-kernels.rst:45
msgid ""
"Currently Python does not officially support static-linking OpenSSL it "
"depends on until `bpo-38794 <https://bugs.python.org/issue38794>`_ is "
"resolved. Therefore, All Docker images to be used as Backend.AI kernel "
"images should have its own OpenSSL system packages, such as ``libssl`` or"
" ``openssl`` depending on the distributions."
msgstr ""

#: ../../dev/adding-kernels.rst:50
msgid "Metadata Labels"
msgstr ""

#: ../../dev/adding-kernels.rst:52
msgid ""
"Any Docker image based on Alpine 3.8+, CentOS 7+, and Ubuntu 16.04+ "
"become a Backend.AI kernel image if you add the following image labels:"
msgstr ""

#: ../../dev/adding-kernels.rst:54
msgid "Required Labels"
msgstr ""

#: ../../dev/adding-kernels.rst:56
msgid ""
"``ai.backend.kernelspec``: ``1`` (this will be used for future versioning"
" of the metadata specification)"
msgstr ""

#: ../../dev/adding-kernels.rst:57
msgid ""
"``ai.backend.features``: A list of constant strings indicating which "
"Backend.AI kernel features are available for the kernel."
msgstr ""

#: ../../dev/adding-kernels.rst:59
msgid "**batch**: Can execute user programs passed as files."
msgstr ""

#: ../../dev/adding-kernels.rst:60
msgid ""
"**query**: Can execute user programs passed as code snippets while "
"keeping the context across multiple executions."
msgstr ""

#: ../../dev/adding-kernels.rst:61
msgid "**uid-match**: As of 19.03, this must be specified always."
msgstr ""

#: ../../dev/adding-kernels.rst:62
msgid "**user-input**: The query/batch mode supports interactive user inputs."
msgstr ""

#: ../../dev/adding-kernels.rst:64
msgid ""
"``ai.backend.resource.min.*``: The minimum amount of resource to launch "
"this kernel. At least, you must define the CPU core (``cpu``) and the "
"main memory (``mem``). In the memory size values, you may use binary "
"scale-suffixes such as ``m`` for ``MiB``, ``g`` for ``GiB``, etc."
msgstr ""

#: ../../dev/adding-kernels.rst:67
msgid ""
"``ai.backend.base-distro``: Either \"ubuntu16.04\" or \"alpine3.8\".  "
"Note that Ubuntu 18.04-based kernels also need to use \"ubuntu16.04\" "
"here."
msgstr ""

#: ../../dev/adding-kernels.rst:69
msgid ""
"``ai.backend.runtime-type``: The type of kernel runner to use. (One of "
"the directories in |ai.backend.kernel nslink|_)"
msgstr ""

#: ../../dev/adding-kernels.rst:72
msgid ""
"**python**: This runtime is for Python-based kernels, allowing the given "
"Python executable accessible via the query and batch mode, also as a "
"Jupyter kernel service."
msgstr ""

#: ../../dev/adding-kernels.rst:74
msgid ""
"**app**: This runtime does not support code execution in the query/batch "
"modes but just manages the service port processes. For custom kernel "
"images with their own service ports for their main applications, this is "
"the most frequently used runtime type for derivative images."
msgstr ""

#: ../../dev/adding-kernels.rst:77
msgid "For the full list of available runtime types, |ai.backend.kernel modlink|_"
msgstr ""

#: ../../dev/adding-kernels.rst:79
msgid "``ai.backend.runtime-path``: The path to the language runtime executable."
msgstr ""

#: ../../dev/adding-kernels.rst:81
msgid "Optional Labels"
msgstr ""

#: ../../dev/adding-kernels.rst:83
msgid ""
"``ai.backend.service-ports``: A list of port mapping declaration strings "
"for services supported by the image. (See the next section for details) "
"Backend.AI manages the host-side port mapping and network tunneling via "
"the API gateway automagically."
msgstr ""

#: ../../dev/adding-kernels.rst:85
msgid ""
"``ai.backend.envs.corecount``: A comma-separated string list of "
"environment variable names. They are set to the number of available CPU "
"cores to the kernel container. It allows the CPU core restriction to be "
"enforced to legacy parallel computation libraries. (e.g., "
"``JULIA_CPU_CORES``, ``OPENBLAS_NUM_THREADS``)"
msgstr ""

#: ../../dev/adding-kernels.rst:97
msgid "Service Ports"
msgstr ""

#: ../../dev/adding-kernels.rst:99
msgid ""
"As of Backend.AI v19.03, *service ports* are our preferred way to run "
"computation workloads inside Backend.AI kernels. It provides tunneled "
"access to Jupyter Notebooks and other daemons running in containers."
msgstr ""

#: ../../dev/adding-kernels.rst:102
msgid ""
"As of Backend.AI v19.09, Backend.AI provides SSH (including SFTP and SCP)"
" and ttyd (web-based xterm shell) as intrinsic services for all kernels. "
"\"Intrinsic\" means that image authors do not have to do anything to "
"support/enable the services."
msgstr ""

#: ../../dev/adding-kernels.rst:105
msgid ""
"As of Backend.AI v20.03, image authors may define their own service ports"
" using service definition JSON files installed at ``/etc/backend.ai"
"/service-defs`` in their images."
msgstr ""

#: ../../dev/adding-kernels.rst:108
msgid "Port Mapping Declaration"
msgstr ""

#: ../../dev/adding-kernels.rst:110
msgid ""
"A custom service port should define two things. First, the image label "
"``ai.backend.service-ports`` contains the port mapping declarations. "
"Second, the service definition file which specifies how to start the "
"service process."
msgstr ""

#: ../../dev/adding-kernels.rst:114
msgid ""
"A port mapping declaration is composed of three values: the service name,"
" the protocol, and the container-side port number. The label may contain "
"multiple port mapping declarations separated by commas, like the "
"following example:"
msgstr ""

#: ../../dev/adding-kernels.rst:121
msgid ""
"The name may be an non-empty arbitrary ASCII alphanumeric string. We use "
"the kebab-case for it. The protocol may be one of ``tcp``, ``http``, and "
"``pty``, but currently most services use ``http``."
msgstr ""

#: ../../dev/adding-kernels.rst:125
msgid ""
"Note that there are a few port numbers reserved for Backend.AI itself and"
" intrinsic service ports. The TCP port 2000 and 2001 is reserved for the "
"query mode, whereas 2002 and 2003 are reserved for the native pseudo-"
"terminal mode (stdin and stdout combined with stderr), 2200 for the "
"intrinsic SSH service, and 7681 for the intrinsic ttyd service."
msgstr ""

#: ../../dev/adding-kernels.rst:128
msgid ""
"Up to Backend.AI 19.09, this was the only method to define a service port"
" for images, and the service-specific launch sequences were all hard-"
"coded in the ``ai.backend.kernel`` module."
msgstr ""

#: ../../dev/adding-kernels.rst:131
msgid "Service Definition DSL"
msgstr ""

#: ../../dev/adding-kernels.rst:133
msgid ""
"Now the image author should define the service launch sequences using a "
"DSL (domain-specific language). The service definitions are written as "
"JSON files in the container's ``/etc/backend.ai/service-defs`` directory."
" The file names must be same with the name parts of the port mapping "
"declarations."
msgstr ""

#: ../../dev/adding-kernels.rst:137
msgid ""
"For example, a sample service definition file for \"jupyter\" service "
"(hence its filename must be ``/etc/backend.ai/service-"
"defs/jupyter.json``) looks like:"
msgstr ""

#: ../../dev/adding-kernels.rst:166
msgid ""
"A service definition is composed of three major fields: ``prestart`` that"
" contains a list of prestart actions, ``command`` as a list of template-"
"enabled strings, and an optional ``url_template`` as a template-enabled "
"string that defines the URL presented to the end-user on CLI or used as "
"the redirection target on GUI with wsproxy."
msgstr ""

#: ../../dev/adding-kernels.rst:168
msgid ""
"The \"template-enabled\" strings may have references to a contextual set "
"of variables in curly braces. All the variable substitution follows the "
"Python's brace-style formatting syntax and rules."
msgstr ""

#: ../../dev/adding-kernels.rst:172
msgid "Available predefined variables"
msgstr ""

#: ../../dev/adding-kernels.rst:174
msgid "There are a few predefined variables as follows:"
msgstr ""

#: ../../dev/adding-kernels.rst:176
msgid ""
"**ports**: A list of TCP ports used by the service. Most services have "
"only one port. An item in the list may be referenced using bracket "
"notation like ``{ports[0]}``."
msgstr ""

#: ../../dev/adding-kernels.rst:177
msgid ""
"**runtime_path**: A string representing the full path to the runtime, as "
"specified in the ``ai.backend.runtime-path`` image label."
msgstr ""

#: ../../dev/adding-kernels.rst:180
msgid "Available prestart actions"
msgstr ""

#: ../../dev/adding-kernels.rst:182
msgid ""
"A prestart action is composed of two mandatory fields ``action`` and "
"``args`` (see the table below), and an optional field ``ref``. The "
"``ref`` field defines a variable that stores the result of the action and"
" can be referenced in later parts of the service definition file where "
"the arguments are marked as \"template-enabled\"."
msgstr ""

#: ../../dev/adding-kernels.rst:189
msgid "Action Name"
msgstr ""

#: ../../dev/adding-kernels.rst:190
msgid "Arguments"
msgstr ""

#: ../../dev/adding-kernels.rst:191
msgid "Return"
msgstr ""

#: ../../dev/adding-kernels.rst:192
msgid "``write_file``"
msgstr ""

#: ../../dev/adding-kernels.rst:193
msgid "``body``: a list of string lines (template-enabled)"
msgstr ""

#: ../../dev/adding-kernels.rst:194
msgid "``filename``: a string representing the file name (template-enabled)"
msgstr ""

#: ../../dev/adding-kernels.rst:195 ../../dev/adding-kernels.rst:200
msgid ""
"``mode``: an optional octal number as string, representing UNIX file "
"permission (default: \"755\")"
msgstr ""

#: ../../dev/adding-kernels.rst:196
msgid ""
"``append``: an optional boolean. If set true, open the file in the "
"appending mode."
msgstr ""

#: ../../dev/adding-kernels.rst:197 ../../dev/adding-kernels.rst:204
#: ../../dev/adding-kernels.rst:211
msgid "None"
msgstr ""

#: ../../dev/adding-kernels.rst:198
msgid "``write_tempfile``"
msgstr ""

#: ../../dev/adding-kernels.rst:199
msgid "``body``: a list of string line (template-enabled)"
msgstr ""

#: ../../dev/adding-kernels.rst:201
msgid "The generated file path"
msgstr ""

#: ../../dev/adding-kernels.rst:202
msgid "``mkdir``"
msgstr ""

#: ../../dev/adding-kernels.rst:203
msgid ""
"``path``: the directory path (template-enabled) where parent directories "
"are auto-created"
msgstr ""

#: ../../dev/adding-kernels.rst:205
msgid "``run_command``"
msgstr ""

#: ../../dev/adding-kernels.rst:206
msgid ""
"``command``: the command-line argument list as passed to ``exec`` syscall"
" (template-enabled)"
msgstr ""

#: ../../dev/adding-kernels.rst:207
msgid ""
"A dictionary with two fields: ``out`` and ``err`` which contain the "
"console output decoded as the UTF-8 encoding"
msgstr ""

#: ../../dev/adding-kernels.rst:208
msgid "``log``"
msgstr ""

#: ../../dev/adding-kernels.rst:209
msgid "``body``: a string to send as kernel log (template-enabled)"
msgstr ""

#: ../../dev/adding-kernels.rst:210
msgid "``debug``: a boolean to lower the logging level to DEBUG (default is INFO)"
msgstr ""

#: ../../dev/adding-kernels.rst:214
msgid "Interpretation of URL template"
msgstr ""

#: ../../dev/adding-kernels.rst:216
msgid ""
"``url_template`` field is used by the client SDK and wsproxy to fill up "
"the actual URL presented to the end-user (or the end-user's web browser "
"as the redirection target). So its template variables are not parsed when"
" starting the service, but they are parsed and interpolated by the "
"clients. There are only three fixed variables: ``{protocol}``, "
"``{host}``, and ``{port}``."
msgstr ""

#: ../../dev/adding-kernels.rst:220
msgid "Here is a sample service-definition that utilizes the URL template:"
msgstr ""

#: ../../dev/adding-kernels.rst:236
msgid "Jail Policy"
msgstr ""

#: ../../dev/adding-kernels.rst:238
msgid "**(TODO: jail policy syntax and interpretation)**"
msgstr ""

#: ../../dev/adding-kernels.rst:243
msgid "Adding Custom Jail Policy"
msgstr ""

#: ../../dev/adding-kernels.rst:245
msgid ""
"To write a new policy implementation, extend `the jail policy interface "
"<https://github.com/lablup/backend.ai-jail>`_ in Go. Ebmed it inside your"
" jail build. Please give a look to existing jail policies as good "
"references."
msgstr ""

#: ../../dev/adding-kernels.rst:251
msgid "Example: An Ubuntu-based Kernel"
msgstr ""

#: ../../dev/adding-kernels.rst:276
msgid "Implementation details"
msgstr ""

#: ../../dev/adding-kernels.rst:279
msgid "The query mode I/O protocol"
msgstr ""

#: ../../dev/adding-kernels.rst:281
msgid ""
"The input is a ZeroMQ's multipart message with two payloads. The first "
"payload should contain a unique identifier for the code snippet (usually "
"a hash of it), but currently it is ignored (reserved for future caching "
"implementations). The second payload should contain a UTF-8 encoded "
"source code string."
msgstr ""

#: ../../dev/adding-kernels.rst:285
msgid ""
"The reply is a ZeroMQ's multipart message with a single payload, "
"containing a UTF-8 encoded string of the following JSON object:"
msgstr ""

#: ../../dev/adding-kernels.rst:306
msgid ""
"Each item in ``exceptions`` is an array composed of four items: exception"
" name, exception arguments (optional), a boolean indicating if the "
"exception is raised outside the user code (mostly false), and a traceback"
" string (optional)."
msgstr ""

#: ../../dev/adding-kernels.rst:312
msgid ""
"Each item in ``media`` is an array of two items: MIME-type and the data "
"string. Specific formats are defined and handled by the Backend.AI Media "
"module."
msgstr ""

#: ../../dev/adding-kernels.rst:315
msgid ""
"The ``options`` field may present optionally. If ``upload_output_files`` "
"is true (default), then the agent uploads the files generated by user "
"code in the working directory (``/home/work``) to AWS S3 bucket and make "
"their URLs available in the front-end."
msgstr ""

#: ../../dev/adding-kernels.rst:319
msgid "The pseudo-terminal mode protocol"
msgstr ""

#: ../../dev/adding-kernels.rst:321
msgid ""
"If you want to allow users to have real-time interactions with your "
"kernel using web-based terminals, you should implement the PTY mode as "
"well. A good example is `our \"git\" kernel runner "
"<https://github.com/lablup/backend.ai-kernel-"
"runner/blob/master/src/ai/backend/kernel/git/__init__.py>`_."
msgstr ""

#: ../../dev/adding-kernels.rst:324
msgid ""
"The key concept is separation of the \"outer\" daemon and the \"inner\" "
"target program (e.g., a shell). The outer daemon should wrap the inner "
"program inside a pseudo-tty. As the outer daemon is completely hidden in "
"terminal interaction by the end-users, the programming language may "
"differ from the inner program. The challenge is that you need to "
"implement piping of ZeroMQ sockets from/to pseudo-tty file descriptors. "
"It is up to you how you implement the outer daemon, but if you choose "
"Python for it, we recommend to use asyncio or similar event loop "
"libraries such as tornado and Twisted to mulitplex sockets and file "
"descriptors for both input/output directions. When piping the messages, "
"the outer daemon should not apply any specific transformation; it should "
"send and receive all raw data/control byte sequences transparently "
"because the front-end (e.g., terminal.js) is responsible for interpreting"
" them. Currently we use PUB/SUB ZeroMQ socket types but this may change "
"later."
msgstr ""

#: ../../dev/adding-kernels.rst:332
msgid ""
"Optionally, you may run the query-mode loop side-by-side. For example, "
"our git kernel supports terminal resizing and pinging commands as the "
"query-mode inputs. There is no fixed specification for such commands yet,"
" but the current CodeOnWeb uses the followings:"
msgstr ""

#: ../../dev/adding-kernels.rst:336
#, python-format
msgid ""
"``%resize <rows> <cols>``: resize the pseudo-tty's terminal to fit with "
"the web terminal element in user browsers."
msgstr ""

#: ../../dev/adding-kernels.rst:337
msgid ""
"``%ping``: just a no-op command to prevent kernel idle timeouts while the"
" web terminal is open in user browsers."
msgstr ""

#: ../../dev/adding-kernels.rst:339
msgid ""
"A best practice (not mandatory but recommended) for PTY mode kernels is "
"to automatically respawn the inner program if it terminates (e.g., the "
"user has exited the shell) so that the users are not locked in a \"blank "
"screen\" terminal."
msgstr ""

#~ msgid "Architecture Overview"
#~ msgstr "아키텍처 개괄"

#~ msgid ""
#~ "Inside containers, each kernel is a "
#~ "simple daemon process that accepts user"
#~ " code snippets and replies with its"
#~ " execution results via TCP-based "
#~ "ZeroMQ connections. The rationale to use"
#~ " ZeroMQ is: 1) it is message-"
#~ "based; we do not have to concern"
#~ " the message boundaries and encodings, "
#~ "2) it automatically reconnects when the"
#~ " connection is lost due to network"
#~ " failures or packet losses, 3) it "
#~ "is one of the most universally "
#~ "supported networking library in various "
#~ "programming languages."
#~ msgstr ""
#~ "컨테이너 내부에서 각 커널은 TCP 기반 ZeroMQ "
#~ "연결을 통해 사용자 코드 스니펫을 받아들이고 실행 "
#~ "결과를 회신하는 간단한 데몬 프로세스입니다. ZeroMQ를 "
#~ "사용하는 근거는 1) 메시지 기반으로 메시지 경계와 "
#~ "인코딩을 신경 쓸 필요가 없고, 2) 네트워크 "
#~ "장애나 패킷 손실로 연결이 끊기면 자동으로 다시 "
#~ "연결되고, 3) 다양한 프로그래밍 언어에서 가장 보편적으로"
#~ " 지원되는 네트워킹 라이브러리 중 하나이기 때문입니다."

#~ msgid ""
#~ "A kernel should offer the *query "
#~ "mode* and/or the *PTY mode*. The "
#~ "TCP port 2001 is reserved for the"
#~ " query mode whereas 2002 and 2003 "
#~ "are reserved for the PTY mode "
#~ "(stdin and stdout combined with stderr)."
#~ msgstr ""
#~ "커널은 *query 모드* 및/또는 *PTY 모드*를 제공해야"
#~ " 합니다. TCP 포트 2001은 query모드로 예약된 "
#~ "반면 2002와 2003은 PTY 모드(stdin및 stdout과 "
#~ "stderr가 결합된)로 예약됩니다."

#~ msgid "Ingredients of Kernel Images"
#~ msgstr ""

#~ msgid "A kernel is a Docker image with the following format:"
#~ msgstr "커널은 다음 포맷을 따르는 도커 이미지입니다."

#~ msgid "``Dockerfile``"
#~ msgstr ""

#~ msgid ""
#~ "``WORKDIR /home/work``: this path is "
#~ "used to mount an external directory "
#~ "so that the agent can access files"
#~ " generated by user codes."
#~ msgstr ""

#~ msgid "``CMD`` must be set to the main program."
#~ msgstr ""

#~ msgid ""
#~ "``ai.backend.maxcores``: *N* (the number of"
#~ " CPU cores recommended for this "
#~ "kernel)"
#~ msgstr ""

#~ msgid ""
#~ "``ai.backend.maxmem``: *M* (the memory size"
#~ " in a human-readable bytes "
#~ "recommended for this kernel, ``128m`` "
#~ "(128 MBytes) for example)"
#~ msgstr ""

#~ msgid ""
#~ "``ai.backend.timeout``: *T* (the maximum "
#~ "seconds allowed to execute a single "
#~ "query)"
#~ msgstr ""

#~ msgid ""
#~ "Above limits are used as default "
#~ "settings by Backend.AI Agent, but the"
#~ " agents may enforce lower limits due"
#~ " to the service policy.  Backend.AI "
#~ "Gateway may refer these information for"
#~ " load balancing and scheduling."
#~ msgstr ""

#~ msgid "``ai.backend.mode``: ``query``, ``pty``, or ``query+pty``"
#~ msgstr ""

#~ msgid ""
#~ "``ai.backend.envs.corecount``: a comma-separated "
#~ "string of environment variable names "
#~ "which will be set to the number"
#~ " of assigned CPU cores by the "
#~ "agent. (e.g., ``JULIA_CPU_CORES``, "
#~ "``OPENBLAS_NUM_THREADS``)"
#~ msgstr ""

#~ msgid ""
#~ "``ai.backend.nvidia.enabled``: ``yes`` or ``no`` "
#~ "(if yes, Backend.AI Agent attaches an"
#~ " NVIDIA CUDA GPU device with a "
#~ "driver volume. You must use `nvidia-"
#~ "docker images <https://github.com/NVIDIA/nvidia-"
#~ "docker>`_ as base of your Dockerfile.)"
#~ msgstr ""

#~ msgid ""
#~ "``ai.backend.extra_volumes``: a comma-separated "
#~ "string of extra volume mounts (volume"
#~ " name and path inside container "
#~ "separated by a colon), such as "
#~ "deep learning sample data sets (e.g.,"
#~ " ``sample-data:/home/work/samples,extra-"
#~ "data:/home/work/extra``). Note that we allow"
#~ " only read-only mounts. The available"
#~ " list of extra volumes depends on "
#~ "your Backend.AI Agent setup; there is"
#~ " no standard or predefined ones. If"
#~ " you want to add a new one, "
#~ "use ``docker volume`` commands. When "
#~ "designated volumes do not exist in "
#~ "the agent's host, the agent silently "
#~ "skips mounting them."
#~ msgstr ""

#~ msgid ""
#~ "``ai.backend.features``: a comma-separated "
#~ "string keywords indicating available features"
#~ " of this kernel."
#~ msgstr ""

#~ msgid "Keyword"
#~ msgstr ""

#~ msgid "Feature"
#~ msgstr ""

#~ msgid "``media.images``"
#~ msgstr ""

#~ msgid "Generates images (PNG, JPG, and SVG) without uploading into AWS S3."
#~ msgstr ""

#~ msgid "``media.svgplot``"
#~ msgstr ""

#~ msgid "Generates plots in SVG."
#~ msgstr ""

#~ msgid "``media.drawing``"
#~ msgstr ""

#~ msgid ""
#~ "Generates animated vector graphics which "
#~ "can be rendered by `sorna-media "
#~ "<https://github.com/lablup/sorna-media>`_ Javascript "
#~ "library"
#~ msgstr ""

#~ msgid "``media.audio``"
#~ msgstr ""

#~ msgid "Generates audio signal streams. (not implemented)"
#~ msgstr ""

#~ msgid ""
#~ "The main program that implements the "
#~ "query mode and/or the PTY mode "
#~ "(see below)."
#~ msgstr ""

#~ msgid ""
#~ "We strongly recommend to create a "
#~ "normal user instead of using root "
#~ "for the main program."
#~ msgstr ""

#~ msgid ""
#~ "The main program should be wrapped "
#~ "with `jail <https://github.com/lablup/backend.ai-"
#~ "kernels/blob/master/base/Dockerfile.jail>`_, like:"
#~ msgstr ""

#~ msgid ""
#~ "The first argument to jail is the"
#~ " policy name and the second and "
#~ "laters are the absolute path of "
#~ "the main program with its arguments. "
#~ "To customize the jail policy, :ref:`see"
#~ " below <custom-jail-policy>`."
#~ msgstr ""

#~ msgid "``jail`` and ``intra-jail`` must be copied into the kernel image."
#~ msgstr ""

#~ msgid ""
#~ "Other auxilliary files used in "
#~ "Dockerfile or the main program. (e.g.,"
#~ " Python and package installation scripts)"
#~ msgstr ""

#~ msgid "Writing Query Mode Kernels"
#~ msgstr ""

#~ msgid ""
#~ "Most kernels fall into this category."
#~ " You just write a simple blocking "
#~ "loop that receives a input code "
#~ "message and send a output result "
#~ "message via a ZeroMQ REP socket "
#~ "listening on port 2001. All complicated"
#~ " stuffs such as multiplexing multiple "
#~ "user requests and container management "
#~ "is done by Backend.AI Agent."
#~ msgstr ""

#~ msgid "Writing PTY Mode Kernels"
#~ msgstr ""

#~ msgid "Writing Custom Jail Policies"
#~ msgstr ""

#~ msgid ""
#~ "Implement `the jail policy interface "
#~ "<https://github.com/lablup/backend.ai-jail>`_ in Go"
#~ " and ebmed it inside your jail "
#~ "build. Please give a look to "
#~ "existing jail policies as good "
#~ "references."
#~ msgstr ""

