# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Lablup Inc.
# This file is distributed under the same license as the Backend.AI Client
# SDK for Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Backend.AI Client SDK for Python 18.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-20 01:28+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 1aa27451a8e24a4e84da16cfc8653fc5
#: ../../gsg/session.rst:2
msgid "Client Session"
msgstr "클라이언트 세션"

# 783ceea3acac4ff5b2aec4d67d0afa6b
#: ../../gsg/session.rst:7
msgid ""
"This module is the first place to begin with your Python programs that "
"use Backend.AI API functions."
msgstr ""

# c59a3afb7b064b30b71184281c93ff8a
#: ../../gsg/session.rst:10
msgid ""
"The high-level API functions cannot be used alone -- you must initiate a "
"client session first because each session provides *proxy attributes* "
"that represent API functions and run on the session itself."
msgstr ""

# 4ed7fa7c0f764000ab3f3c1ab37c3ae8
#: ../../gsg/session.rst:14
msgid ""
"To achieve this, during initialization session objects internally "
"construct new types by combining the "
":class:`~ai.backend.client.base.BaseFunction` class with the attributes "
"in each API function classes, and makes the new types bound to itself. "
"Creating new types every time when creating a new session instance may "
"look weird, but it is the most convenient way to provide *class-methods* "
"in the API function classes to work with specific *session instances*."
msgstr ""

# 9b464afc8acb4781983c9371b5c5df19
#: ../../gsg/session.rst:21
msgid ""
"When designing your application, please note that session objects are "
"intended to live long following the process' lifecycle, instead of to be "
"created and disposed whenever making API requests."
msgstr ""

# cbaa3607be93439d8187cee6561564c3
#: ai.backend.client.session.BaseSession:1 of
msgid "The base abstract class for sessions."
msgstr ""

# f080fcc209b149a3a6a40dd1f7d8cded
# 6486e5dc2194405facbf8b3c362dad1c
#: ai.backend.client.session.AsyncSession.close:1
#: ai.backend.client.session.BaseSession.close:1 of
msgid "Terminates the session and releases underlying resources."
msgstr ""

# 4f97590bfe6d493bbbb9559be50b3616
#: ai.backend.client.session.BaseSession.closed:1 of
msgid "Checks if the session is closed."
msgstr ""

# 3cfb2f24a43148148424359e94ba1e1e
#: ai.backend.client.session.BaseSession.closed of
msgid "Return type"
msgstr ""

# d9cae340a0c54f71aaf512f434607139
#: ai.backend.client.session.BaseSession.closed:4 of
msgid ":py:class:`bool`"
msgstr ""

# dfca3e86cb5e44ef857cec16678e6917
#: ai.backend.client.session.BaseSession.config:1 of
msgid "The configuration used by this session object."
msgstr ""

# 3010dd74190d4af28eb3d94624e8fcc8
#: ai.backend.client.session.Session:1 of
msgid ""
"An API client session that makes API requests synchronously. You may call"
" (almost) all function proxy methods like a plain Python function. It "
"provides a context manager interface to ensure closing of the session "
"upon errors and scope exits."
msgstr ""

# f678eb3a22244f868cda6a5161748065
# 1147a48289a640c286371b32c426d9c4
#: ai.backend.client.session.AsyncSession.Admin:1
#: ai.backend.client.session.Session.Admin:1 of
msgid ""
"The :class:`~ai.backend.client.admin.Admin` function proxy bound to this "
"session."
msgstr ""

# f34c47ae794a46b5897a3b639214f413
# c689cd2095ea470fb0112ba23b71a54f
#: ai.backend.client.session.AsyncSession.Agent:1
#: ai.backend.client.session.Session.Agent:1 of
msgid ""
"The :class:`~ai.backend.client.agent.Agent` function proxy bound to this "
"session."
msgstr ""

# 759ac46365714ba4897d95d78b304f0a
#: ai.backend.client.session.AsyncSession.Image:1
#: ai.backend.client.session.Session.Image:1 of
msgid ""
"The :class:`~ai.backend.client.image.Image` function proxy bound to this "
"session."
msgstr ""

# 468e8ccf9daa414f872e0bcc2602f89b
#: ai.backend.client.session.AsyncSession.Kernel:1
#: ai.backend.client.session.Session.Kernel:1 of
msgid ""
"The :class:`~ai.backend.client.kernel.ComputeSession` function proxy bound to "
"this session."
msgstr ""

# e9c8da81ec754860a86b612864b7447c
#: ai.backend.client.session.AsyncSession.KeyPair:1
#: ai.backend.client.session.Session.KeyPair:1 of
msgid ""
"The :class:`~ai.backend.client.keypair.KeyPair` function proxy bound to "
"this session."
msgstr ""

# 759ac46365714ba4897d95d78b304f0a
#: ai.backend.client.session.AsyncSession.Manager:1
#: ai.backend.client.session.Session.Manager:1 of
msgid ""
"The :class:`~ai.backend.client.manager.Manager` function proxy bound to "
"this session."
msgstr ""

# a4ccea72e23542cb9c0f8306c5e9feff
#: ai.backend.client.session.AsyncSession.VFolder:1
#: ai.backend.client.session.Session.VFolder:1 of
msgid ""
"The :class:`~ai.backend.client.vfolder.VFolder` function proxy bound to "
"this session."
msgstr ""

# 3acf621a556e41a4b8643b060a3fa0eb
#: ai.backend.client.session.Session.close:1 of
msgid ""
"Terminates the session.  It schedules the ``close()`` coroutine of the "
"underlying aiohttp session and then enqueues a sentinel object to "
"indicate termination.  Then it waits until the worker thread to self-"
"terminate by joining."
msgstr ""

# f0919a86bbde4683a40d07d1ae35dd3d
#: ai.backend.client.session.Session.worker_thread:1 of
msgid ""
"The thread that internally executes the asynchronous implementations of "
"the given API functions."
msgstr ""

# e9e1836a2f274040bfbe13c0d9dfc1f8
#: ai.backend.client.session.AsyncSession:1 of
msgid ""
"An API client session that makes API requests asynchronously using "
"coroutines. You may call all function proxy methods like a coroutine. It "
"provides an async context manager interface to ensure closing of the "
"session upon errors and scope exits."
msgstr ""

