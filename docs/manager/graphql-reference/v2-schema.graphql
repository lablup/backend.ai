schema @link(url: "https://specs.apollo.dev/federation/v2.7", import: ["@external", "@key", "@shareable"]) {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""Added in 25.15.0"""
type AgentResource {
  free: JSON!
  used: JSON!
  capacity: JSON!
}

"""Added in 25.15.0"""
type AgentStats {
  """Added in 25.15.0"""
  totalResource: AgentResource!
}

"""
Added in 25.14.0.

Input for approving an artifact revision.

Admin-only operation to approve artifact revisions for general use.
"""
input ApproveArtifactInput {
  artifactRevisionId: ID!
}

"""
Added in 25.14.0.

Response payload for artifact revision approval operations.

Contains the approved artifact revision. Admin-only operation.
"""
type ApproveArtifactPayload {
  artifactRevision: ArtifactRevision!
}

"""
Added in 25.14.0.

An artifact represents AI models, packages, images, or other resources that can be
stored, managed, and used within Backend.AI.

Artifacts are discovered through scanning external registries and,
can have multiple revisions.

Each artifact contains metadata and references to its source registry.

Key concepts:
- Type: MODEL, PACKAGE, or IMAGE
- Availability: ALIVE (available), DELETED (soft-deleted)
- Source: Original external registry where it was discovered
"""
type Artifact implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  name: String!
  type: ArtifactType!
  description: String
  registry: SourceInfo!
  source: SourceInfo!
  readonly: Boolean!
  scannedAt: DateTime!
  updatedAt: DateTime!
  availability: ArtifactAvailability!
  revisions(filter: ArtifactRevisionFilter = null, orderBy: [ArtifactRevisionOrderBy!] = null, before: String = null, after: String = null, first: Int = null, last: Int = null, limit: Int = null, offset: Int = null): ArtifactRevisionConnection!
}

enum ArtifactAvailability {
  ALIVE
  DELETED
}

"""
Added in 25.14.0.

Paginated connection for artifacts with total count information.

Used for relay-style pagination with cursor-based navigation.
"""
type ArtifactConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ArtifactEdge!]!
  count: Int!
}

"""An edge in a connection."""
type ArtifactEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Artifact!
}

"""
Added in 25.14.0.

Filter options for artifacts based on various criteria such as type, name, registry,
source, and availability status.

Supports logical operations (AND, OR, NOT) for complex filtering scenarios.
"""
input ArtifactFilter {
  type: [ArtifactType!] = null
  name: StringFilter = null
  registry: StringFilter = null
  source: StringFilter = null
  availability: [ArtifactAvailability!] = null
  AND: [ArtifactFilter!] = null
  OR: [ArtifactFilter!] = null
  NOT: [ArtifactFilter!] = null
}

"""
Added in 25.14.0.

Payload for artifact import progress subscription events.

Provides real-time updates during the artifact import process,
including progress percentage and current status.
"""
type ArtifactImportProgressUpdatedPayload {
  artifactId: ID!
  progress: Float!
  status: ArtifactStatus!
}

"""
Added in 25.14.0.

Specifies the field and direction for ordering artifacts in queries.
"""
input ArtifactOrderBy {
  field: ArtifactOrderField!
  direction: OrderDirection! = ASC
}

enum ArtifactOrderField {
  NAME
  TYPE
  SIZE
  SCANNED_AT
  UPDATED_AT
}

"""Added in 25.14.0"""
type ArtifactRegistry {
  """Name of the default artifact registry."""
  name: String!

  """Type of the default artifact registry."""
  type: ArtifactRegistryType!
}

"""
Added in 25.15.0.

Represents common metadata for an artifact registry.
All artifact registry nodes expose that information regardless of type.
"""
type ArtifactRegistryMeta implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  name: String!
  registryId: ID!
  type: ArtifactRegistryType!
  url: String!
}

"""Added in 25.15.0"""
type ArtifactRegistryMetaConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ArtifactRegistryMetaEdge!]!
  count: Int!
}

"""An edge in a connection."""
type ArtifactRegistryMetaEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ArtifactRegistryMeta!
}

enum ArtifactRegistryType {
  HUGGINGFACE
  RESERVOIR
}

enum ArtifactRemoteStatus {
  SCANNED
  AVAILABLE
  FAILED
}

"""
Added in 25.14.0.

A specific version/revision of an artifact containing the actual file data.

Artifact revisions progress through different statuses:
- SCANNED: Discovered in external registry, metadata only
- PULLING: Currently downloading from external source
- PULLED: Downloaded to temporary storage
- AVAILABLE: Ready for use by users

Contains version information, file size, README content, and timestamps.
Most HuggingFace models only have a 'main' revision.
"""
type ArtifactRevision implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  status: ArtifactStatus!

  """Added in 25.15.0"""
  remoteStatus: ArtifactRemoteStatus
  version: String!
  readme: String
  size: ByteSize
  createdAt: DateTime
  updatedAt: DateTime
  artifact: Artifact!
}

"""
Added in 25.14.0.

Paginated connection for artifact revisions with total count information.

Used for relay-style pagination with cursor-based navigation.
"""
type ArtifactRevisionConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ArtifactRevisionEdge!]!
  count: Int!
}

"""An edge in a connection."""
type ArtifactRevisionEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ArtifactRevision!
}

"""
Added in 25.14.0.

Filter options for artifact revisions based on status, version, artifact ID, and file size.

Supports logical operations (AND, OR, NOT) for complex filtering scenarios.
"""
input ArtifactRevisionFilter {
  status: ArtifactRevisionStatusFilter = null

  """Added in 25.16.0"""
  remoteStatus: ArtifactRevisionRemoteStatusFilter = null
  version: StringFilter = null
  artifactId: ID = null
  size: IntFilter = null
  AND: [ArtifactRevisionFilter!] = null
  OR: [ArtifactRevisionFilter!] = null
  NOT: [ArtifactRevisionFilter!] = null
}

"""
Added in 25.14.0.

Represents a background task for importing an artifact revision.

Contains the task ID for monitoring progress and the associated artifact revision
being imported from external registries.
"""
type ArtifactRevisionImportTask {
  taskId: ID!
  artifactRevision: ArtifactRevision!
}

"""
Added in 25.14.0.

Specifies the field and direction for ordering artifact revisions in queries.
"""
input ArtifactRevisionOrderBy {
  field: ArtifactRevisionOrderField!
  direction: OrderDirection! = ASC
}

enum ArtifactRevisionOrderField {
  VERSION
  SIZE
  CREATED_AT
  UPDATED_AT
  STATUS
}

"""Added in 25.16.0"""
input ArtifactRevisionRemoteStatusFilter {
  in: [ArtifactRemoteStatus!] = null
  equals: ArtifactRemoteStatus = null
}

"""
Added in 25.14.0.

Filter for artifact revision status. Supports exact match or inclusion in a list of statuses.
"""
input ArtifactRevisionStatusFilter {
  in: [ArtifactStatus!] = null
  equals: ArtifactStatus = null
}

enum ArtifactStatus {
  SCANNED
  PULLING
  PULLED
  VERIFYING
  NEEDS_APPROVAL
  AVAILABLE
  FAILED
  REJECTED
}

"""
Added in 25.14.0.

Input for subscribing to artifact status change notifications.

Used with artifact_status_changed subscription to receive real-time updates
when artifact revision statuses change.
"""
input ArtifactStatusChangedInput {
  artifactRevisionIds: [ID!]!
}

"""
Added in 25.14.0.

Payload for artifact status change subscription events.

Provides real-time notifications when artifact revision statuses change
during import, cleanup, or other operations.
"""
type ArtifactStatusChangedPayload {
  artifactRevision: ArtifactRevision!
}

enum ArtifactType {
  MODEL
  PACKAGE
  IMAGE
}

"""Background task event payload"""
type BackgroundTaskEventPayload {
  taskId: ID!
  eventType: BgtaskEventType!
  message: String!
  currentProgress: Float
  totalProgress: Float
}

"""Type of background task event"""
enum BgtaskEventType {
  UPDATED
  DONE
  CANCELLED
  FAILED
}

scalar ByteSize

"""
Added in 25.14.0.

Input for canceling an in-progress artifact import operation.

Stops the download process and reverts the artifact revision status back to SCANNED.
"""
input CancelArtifactInput {
  artifactRevisionId: ID!
}

"""
Added in 25.14.0.

Response payload for canceling artifact import operations.

Contains the artifact revision whose import was canceled,
reverting its status back to SCANNED.
"""
type CancelImportArtifactPayload {
  artifactRevision: ArtifactRevision!
}

"""
Added in 25.14.0.

Input for cleaning up stored artifact revision data.

Removes downloaded files from storage and transitions the artifact revision
back to SCANNED status, freeing up storage space.
"""
input CleanupArtifactRevisionsInput {
  artifactRevisionIds: [ID!]!
}

"""
Added in 25.14.0.

Response payload for artifact revision cleanup operations.

Contains the cleaned artifact revisions that have had their stored data removed,
transitioning them back to SCANNED status to free storage space.
"""
type CleanupArtifactRevisionsPayload {
  artifactRevisions: ArtifactRevisionConnection!
}

type ClusterConfig {
  mode: ClusterMode!
  size: Int!
}

input ClusterConfigInput {
  mode: ClusterMode!
  size: Int!
}

enum ClusterMode {
  SINGLE_NODE
  MULTI_NODE
}

"""Added in 25.14.0"""
input CreateHuggingFaceRegistryInput {
  url: String!
  name: String!
  token: String = null
}

"""Added in 25.14.0"""
type CreateHuggingFaceRegistryPayload {
  huggingfaceRegistry: HuggingFaceRegistry!
}

input CreateModelDeploymentInput {
  metadata: ModelDeploymentMetadataInput!
  networkAccess: ModelDeploymentNetworkAccessInput!
  clusterConfig: ClusterConfigInput!
  resourceConfig: ResourceConfigInput!
  deploymentStrategy: DeploymentStrategyInput!
  initialRevision: CreateModelRevisionInput!
}

type CreateModelDeploymentPayload {
  deployment: ModelDeployment!
}

input CreateModelRevisionInput {
  deploymentId: ID!
  name: String!
  image: ImageInput!
  modelRuntimeConfig: ModelRuntimeConfigInput!
  modelMountConfig: ModelMountConfigInput!
}

type CreateModelRevisionPayload {
  revision: ModelRevision!
}

"""Added in 25.14.0"""
input CreateObjectStorageInput {
  name: String!
  host: String!
  accessKey: String!
  secretKey: String!
  endpoint: String!
  region: String!
}

"""Added in 25.14.0"""
type CreateObjectStoragePayload {
  objectStorage: ObjectStorage!
}

"""Added in 25.14.0"""
input CreateReservoirRegistryInput {
  name: String!
  endpoint: String!
  accessKey: String!
  secretKey: String!
  apiVersion: String!
}

"""Added in 25.14.0"""
type CreateReservoirRegistryPayload {
  reservoir: ReservoirRegistry!
}

"""Added in 25.16.0. Input for creating VFS storage"""
input CreateVFSStorageInput {
  name: String!
  host: String!
  basePath: String!
}

"""Added in 25.16.0. Payload for creating VFS storage"""
type CreateVFSStoragePayload {
  vfsStorage: VFSStorage!
}

"""Date with time (isoformat)"""
scalar DateTime

"""
Added in 25.15.0.

Input type for delegated import of artifact revisions from a reservoir registry's remote registry.
Used to specify which artifact revisions should be imported from the remote registry source
into the local reservoir registry storage.
"""
input DelegateImportArtifactsInput {
  """List of artifact revision IDs of delegatee artifact registry"""
  artifactRevisionIds: [ID!]!

  """ID of the reservoir registry to delegate the import request to"""
  delegatorReservoirId: ID = null
  artifactType: ArtifactType = null
  delegateeTarget: DelegateeTarget = null
}

"""
Added in 25.15.0.

Response payload for delegated artifact import operation.
Contains the imported artifact revisions and associated background tasks.
The tasks can be monitored to track the progress of the import operation.
"""
type DelegateImportArtifactsPayload {
  """
  Connection of artifact revisions that were imported from the reservoir registry's remote registry
  """
  artifactRevisions: ArtifactRevisionConnection!

  """List of background tasks created for importing the artifact revisions"""
  tasks: [ArtifactRevisionImportTask!]!
}

"""
Added in 25.15.0.

Input type for delegated scanning of artifacts from a delegatee reservoir registry's remote registry.
"""
input DelegateScanArtifactsInput {
  """ID of the reservoir registry to delegate the scan request to"""
  delegatorReservoirId: ID = null

  """Target delegatee reservoir registry and its remote registry to scan"""
  delegateeTarget: DelegateeTarget = null

  """Maximum number of artifacts to scan (max: 500)"""
  limit: Int!

  """Filter artifacts by type (e.g., model, image, package)"""
  artifactType: ArtifactType = null

  """Search term to filter artifacts by name or description"""
  search: String = null
}

"""
Added in 25.15.0.

Response payload for delegated artifact scanning operation.
Contains the list of artifacts discovered during the scan of a reservoir registry's remote registry.
These artifacts are now available for import or direct use.
"""
type DelegateScanArtifactsPayload {
  """
  List of artifacts discovered during the delegated scan from the reservoir registry's remote registry
  """
  artifacts: [Artifact!]!
}

"""Added in 25.15.0"""
input DelegateeTarget {
  delegateeReservoirId: ID!
  targetRegistryId: ID!
}

"""
Added in 25.15.0.

Input for soft-deleting artifacts from the system.

Marks artifacts as deleted without permanently removing them.
Deleted artifacts can be restored using restore_artifacts.
"""
input DeleteArtifactsInput {
  artifactIds: [ID!]!
}

"""
Added in 25.15.0.

Response payload for artifact deletion operations.

Contains the artifacts that were soft-deleted. These can be restored later.
"""
type DeleteArtifactsPayload {
  artifacts: [Artifact!]!
}

"""Added in 25.14.0"""
input DeleteHuggingFaceRegistryInput {
  id: ID!
}

"""Added in 25.14.0"""
type DeleteHuggingFaceRegistryPayload {
  id: ID!
}

input DeleteModelDeploymentInput {
  id: ID!
}

type DeleteModelDeploymentPayload {
  deployment: ModelDeployment
}

"""Added in 25.14.0"""
input DeleteObjectStorageInput {
  id: ID!
}

"""Added in 25.14.0"""
type DeleteObjectStoragePayload {
  id: ID!
}

"""Added in 25.14.0"""
input DeleteReservoirRegistryInput {
  id: ID!
}

"""Added in 25.14.0"""
type DeleteReservoirRegistryPayload {
  id: ID!
}

"""Added in 25.16.0. Input for deleting VFS storage"""
input DeleteVFSStorageInput {
  id: ID!
}

"""Added in 25.16.0. Payload for deleting VFS storage"""
type DeleteVFSStoragePayload {
  id: ID!
}

input DeploymentFilter {
  status: DeploymentStatus = null
  openToPublic: Boolean = null
  tags: [StringFilter!] = null
  AND: DeploymentFilter = null
  OR: DeploymentFilter = null
  NOT: DeploymentFilter = null
  DISTINCT: Boolean = null
}

input DeploymentOrderBy {
  field: DeploymentOrderField!
  direction: OrderDirection! = DESC
}

enum DeploymentOrderField {
  CREATED_AT
  UPDATED_AT
  NAME
}

enum DeploymentStatus {
  ACTIVE
  INACTIVE
}

type DeploymentStatusChangedPayload {
  deployment: ModelDeployment!
}

type DeploymentStrategy {
  type: DeploymentStrategyType!
}

input DeploymentStrategyInput {
  type: DeploymentStrategyType!
}

enum DeploymentStrategyType {
  ROLLING
  BLUE_GREEN
  CANARY
}

extend type EndpointAutoScalingRuleNode @key(fields: "id") {
  id: ID! @external
}

extend type EndpointToken @key(fields: "token") {
  token: String! @external
}

"""Added in 25.14.0"""
input GetPresignedDownloadURLInput {
  artifactRevisionId: ID!
  key: String!
  expiration: Int = null
}

"""Added in 25.14.0"""
type GetPresignedDownloadURLPayload {
  presignedUrl: String!
}

"""Added in 25.14.0"""
input GetPresignedUploadURLInput {
  artifactRevisionId: ID!
  key: String!
}

"""Added in 25.14.0"""
type GetPresignedUploadURLPayload {
  presignedUrl: String!
  fields: String!
}

"""Added in 25.14.0"""
type HuggingFaceRegistry implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  url: String!
  name: String!
  token: String
}

"""Added in 25.14.0"""
type HuggingFaceRegistryConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [HuggingFaceRegistryEdge!]!
  count: Int!
}

"""An edge in a connection."""
type HuggingFaceRegistryEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: HuggingFaceRegistry!
}

input ImageInput {
  name: String!
  architecture: String!
}

extend type ImageNode @key(fields: "id") {
  id: ID! @external
}

"""
Added in 25.14.0.

Input for importing scanned artifact revisions from external registries.

Downloads artifact files from the external source and transitions them through:
SCANNED → PULLING → PULLED → AVAILABLE status progression.
"""
input ImportArtifactsInput {
  artifactRevisionIds: [ID!]!
}

"""
Added in 25.14.0.

Response payload for artifact import operations.

Contains the imported artifact revisions and their associated background tasks.
Tasks can be monitored to track the import progress from SCANNED to AVAILABLE status.
"""
type ImportArtifactsPayload {
  artifactRevisions: ArtifactRevisionConnection!
  tasks: [ArtifactRevisionImportTask!]!
}

input IntFilter {
  equals: Int = null
  notEquals: Int = null
  greaterThan: Int = null
  greaterThanOrEqual: Int = null
  lessThan: Int = null
  lessThanOrEqual: Int = null
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")

"""A custom scalar for JSON strings using orjson"""
scalar JSONString

type ModelDeployment implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  metadata: ModelDeploymentMetadata!
  networkAccess: ModelDeploymentNetworkAccess!
  revision: ModelRevision
  revisionHistory: ModelRevisionConnection!
  scalingRule: ScalingRule!
  replicaState: ReplicaState!
  deploymentStrategy: DeploymentStrategy!
  clusterConfig: ClusterConfig!
  resourceConfig: ResourceConfig!
  createdUser: UserNode!
}

type ModelDeploymentConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ModelDeploymentEdge!]!
  count: Int!
}

"""An edge in a connection."""
type ModelDeploymentEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ModelDeployment!
}

type ModelDeploymentMetadata {
  name: String!
  status: DeploymentStatus!
  tags: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ModelDeploymentMetadataInput {
  name: String!
  tags: [String!] = null
}

type ModelDeploymentNetworkAccess {
  endpointUrl: String
  preferredDomainName: String
  openToPublic: Boolean!
  accessTokens: [EndpointToken!]!
}

input ModelDeploymentNetworkAccessInput {
  preferredDomainName: String = null
  openToPublic: Boolean! = false
}

type ModelMountConfig {
  vfolder: VirtualFolderNode!
  mountDestination: String!
  definitionPath: String!
}

input ModelMountConfigInput {
  vfolderId: ID!
  mountDestination: String!
  definitionPath: String!
}

type ModelReplica implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  name: String!
  status: ReplicaStatus!
  revision: ModelRevision!
  routings: [RoutingNode!]!
}

type ModelReplicaConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ModelReplicaEdge!]!
  count: Int!
}

"""An edge in a connection."""
type ModelReplicaEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ModelReplica!
}

type ModelRevision implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  name: String!
  modelRuntimeConfig: ModelRuntimeConfig!
  modelMountConfig: ModelMountConfig!
  image: ImageNode!
  createdAt: DateTime!
}

type ModelRevisionConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ModelRevisionEdge!]!
  count: Int!
}

"""An edge in a connection."""
type ModelRevisionEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ModelRevision!
}

input ModelRevisionFilter {
  name: StringFilter = null
  deploymentId: ID = null
  AND: ModelRevisionFilter = null
  OR: ModelRevisionFilter = null
  NOT: ModelRevisionFilter = null
  DISTINCT: Boolean = null
}

input ModelRevisionOrder {
  field: ModelRevisionOrderField!
  direction: OrderDirection! = DESC
}

enum ModelRevisionOrderField {
  CREATED_AT
  NAME
}

type ModelRuntimeConfig {
  runtimeVariant: String!
  serviceConfig: ServiceConfig
  environ: JSONString
}

input ModelRuntimeConfigInput {
  runtimeVariant: String!
  serviceConfig: JSONString = null
  environ: JSONString = null
}

"""
Added in 25.14.0.

Specifies a target model for scanning operations.

Used to identify specific models in external registries for detailed scanning.
If revision is not specified, defaults to 'main' revision.
"""
input ModelTarget {
  modelId: String!
  revision: String = null
}

type Mutation {
  """
  Added in 25.14.0.
  
  Scan external registries to discover available artifacts.
  
  Searches HuggingFace or Reservoir registries for artifacts matching the specified
  criteria and registers them in the system with SCANNED status. The artifacts
  become available for import but are not downloaded until explicitly imported.
  
  This is the first step in the artifact workflow: Scan → Import → Use.
  """
  scanArtifacts(input: ScanArtifactsInput!): ScanArtifactsPayload!

  """
  Added in 25.14.0.
  
  Perform detailed scanning of specific models.
  
  Unlike the general scan_artifacts operation, this performs immediate detailed
  scanning of specified models including README content and file sizes.
  Returns artifact revisions with complete metadata ready for use.
  """
  scanArtifactModels(input: ScanArtifactModelsInput!): ScanArtifactModelsPayload!

  """
  Added in 25.14.0.
  
  Import scanned artifact revisions from external registries.
  
  Downloads the actual files for the specified artifact revisions, transitioning
  them from SCANNED → PULLING → PULLED → AVAILABLE status.
  
  Returns background tasks that can be monitored for import progress.
  Once AVAILABLE, artifacts can be used by users in their sessions.
  """
  importArtifacts(input: ImportArtifactsInput!): ImportArtifactsPayload!

  """
  Added in 25.15.0.
  
  Triggers artifact scanning on a remote reservoir registry.
  
  This mutation instructs a reservoir-type registry to initiate a scan of artifacts
  from its associated remote reservoir registry source. The scan process will discover and
  catalog artifacts available in the remote reservoir, making them accessible
  through the local reservoir registry.
  
  Requirements:
  - The delegator registry must be of type 'reservoir'
  - The delegator reservoir registry must have a valid remote registry configuration
  """
  delegateScanArtifacts(input: DelegateScanArtifactsInput!): DelegateScanArtifactsPayload!

  """
  Added in 25.15.0.
  
  Trigger import of artifact revisions from a remote reservoir registry.
  
  This mutation instructs a reservoir-type registry to import specific artifact revisions
  that were previously discovered during a scan from its remote registry.
  Note that this operation does not import the artifacts directly into the local registry, but only into the delegator reservoir's storage.
  
  Requirements:
  - The delegator registry must be of type 'reservoir'
  - The delegator registry must have a valid remote registry configuration
  """
  delegateImportArtifacts(input: DelegateImportArtifactsInput!): DelegateImportArtifactsPayload!

  """
  Added in 25.14.0.
  
  Update artifact metadata properties.
  
  Modifies artifact metadata such as readonly status and description.
  This operation does not affect the actual artifact files or revisions.
  """
  updateArtifact(input: UpdateArtifactInput!): UpdateArtifactPayload!

  """
  Added in 25.15.0.
  
  Soft-delete artifacts from the system.
  
  Marks artifacts as deleted without permanently removing them.
  Deleted artifacts can be restored using the restore_artifacts mutation.
  """
  deleteArtifacts(input: DeleteArtifactsInput!): DeleteArtifactsPayload!

  """
  Added in 25.15.0.
  
  Restore previously deleted artifacts.
  
  Reverses the soft-delete operation, making the artifacts available again
  for use in the system.
  """
  restoreArtifacts(input: RestoreArtifactsInput!): RestoreArtifactsPayload!

  """
  Added in 25.14.0.
  
  Clean up stored artifact revision data to free storage space.
  
  Removes the downloaded files for the specified artifact revisions and
  transitions them back to SCANNED status. The metadata remains, allowing
  the artifacts to be re-imported later if needed.
  
  Use this operation to manage storage usage by removing unused artifacts.
  """
  cleanupArtifactRevisions(input: CleanupArtifactRevisionsInput!): CleanupArtifactRevisionsPayload!

  """
  Added in 25.14.0.
  
  Cancel an in-progress artifact import operation.
  
  Stops the download process for the specified artifact revision and
  reverts its status back to SCANNED. The partially downloaded data is cleaned up.
  """
  cancelImportArtifact(input: CancelArtifactInput!): CancelImportArtifactPayload!
  createModelDeployment(input: CreateModelDeploymentInput!): CreateModelDeploymentPayload!
  updateModelDeployment(input: UpdateModelDeploymentInput!): UpdateModelDeploymentPayload!
  deleteModelDeployment(input: DeleteModelDeploymentInput!): DeleteModelDeploymentPayload!
  createModelRevision(input: CreateModelRevisionInput!): CreateModelRevisionPayload!

  """Added in 25.14.0"""
  createObjectStorage(input: CreateObjectStorageInput!): CreateObjectStoragePayload!

  """Added in 25.14.0"""
  updateObjectStorage(input: UpdateObjectStorageInput!): UpdateObjectStoragePayload!

  """Added in 25.14.0"""
  deleteObjectStorage(input: DeleteObjectStorageInput!): DeleteObjectStoragePayload!

  """Added in 25.16.0. Create a new VFS storage"""
  createVFSStorage(input: CreateVFSStorageInput!): CreateVFSStoragePayload!

  """Added in 25.16.0. Update an existing VFS storage"""
  updateVFSStorage(input: UpdateVFSStorageInput!): UpdateVFSStoragePayload!

  """Added in 25.16.0. Delete a VFS storage"""
  deleteVFSStorage(input: DeleteVFSStorageInput!): DeleteVFSStoragePayload!

  """
  Added in 25.15.0.
  
  Registers a new namespace within a storage.
  """
  registerStorageNamespace(input: RegisterStorageNamespaceInput!): RegisterStorageNamespacePayload!

  """
  Added in 25.15.0.
  
  Unregisters an existing namespace from a storage.
  """
  unregisterStorageNamespace(input: UnregisterStorageNamespaceInput!): UnregisterStorageNamespacePayload!

  """Added in 25.14.0"""
  createHuggingfaceRegistry(input: CreateHuggingFaceRegistryInput!): CreateHuggingFaceRegistryPayload!

  """Added in 25.14.0"""
  updateHuggingfaceRegistry(input: UpdateHuggingFaceRegistryInput!): UpdateHuggingFaceRegistryPayload!

  """Added in 25.14.0"""
  deleteHuggingfaceRegistry(input: DeleteHuggingFaceRegistryInput!): DeleteHuggingFaceRegistryPayload!

  """Added in 25.14.0"""
  createReservoirRegistry(input: CreateReservoirRegistryInput!): CreateReservoirRegistryPayload!

  """Added in 25.14.0"""
  updateReservoirRegistry(input: UpdateReservoirRegistryInput!): UpdateReservoirRegistryPayload!

  """Added in 25.14.0"""
  deleteReservoirRegistry(input: DeleteReservoirRegistryInput!): DeleteReservoirRegistryPayload!

  """Added in 25.14.0"""
  getPresignedDownloadUrl(input: GetPresignedDownloadURLInput!): GetPresignedDownloadURLPayload!

  """Added in 25.14.0"""
  getPresignedUploadUrl(input: GetPresignedUploadURLInput!): GetPresignedUploadURLPayload!

  """
  Added in 25.14.0.
  
  Approve an artifact revision for general use.
  
  Admin-only operation to approve artifact revisions, typically used
  in environments with approval workflows for artifact deployment.
  """
  approveArtifactRevision(input: ApproveArtifactInput!): ApproveArtifactPayload!

  """
  Added in 25.14.0.
  
  Reject an artifact revision, preventing its use.
  
  Admin-only operation to reject artifact revisions, typically used
  in environments with approval workflows for artifact deployment.
  """
  rejectArtifactRevision(input: RejectArtifactInput!): RejectArtifactPayload!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: ID!
}

"""Added in 25.14.0"""
type ObjectStorage implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  name: String!
  host: String!
  accessKey: String!
  secretKey: String!
  endpoint: String!
  region: String!
  namespaces(before: String, after: String, first: Int, last: Int, limit: Int, offset: Int): StorageNamespaceConnection!
}

"""Added in 25.14.0"""
type ObjectStorageConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ObjectStorageEdge!]!
  count: Int!
}

"""An edge in a connection."""
type ObjectStorageEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ObjectStorage!
}

enum OrderDirection {
  ASC
  DESC
}

"""Information to aid in pagination."""
type PageInfo @shareable {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!

  """
  Added in 25.14.0.
  
  Retrieve a specific artifact by its ID.
  
  Returns detailed information about the artifact including its metadata,
  registry information, and availability status.
  """
  artifact(id: ID!): Artifact

  """
  Added in 25.14.0.
  
  Query artifacts with optional filtering, ordering, and pagination.
  
  Returns artifacts that are available in the system, discovered through scanning
  external registries like HuggingFace or Reservoir. By default, only shows
  ALIVE (non-deleted) artifacts.
  
  Use filters to narrow down results by type, name, registry, or availability.
  Supports cursor-based pagination for efficient browsing of large datasets.
  """
  artifacts(filter: ArtifactFilter = {type: null, name: null, registry: null, source: null, availability: [ALIVE], AND: null, OR: null, NOT: null}, orderBy: [ArtifactOrderBy!] = null, before: String = null, after: String = null, first: Int = null, last: Int = null, limit: Int = null, offset: Int = null): ArtifactConnection!

  """
  Added in 25.14.0.
  
  Retrieve a specific artifact revision by its ID.
  
  Returns detailed information about the revision including its status,
  version, file size, and README content.
  """
  artifactRevision(id: ID!): ArtifactRevision

  """
  Added in 25.14.0.
  
  Query artifact revisions with optional filtering, ordering, and pagination.
  
  Returns specific versions/revisions of artifacts. Each revision represents
  a specific version of an artifact with its own status, file data, and metadata.
  
  Use filters to find revisions by status, version, or artifact ID.
  Supports cursor-based pagination for efficient browsing.
  """
  artifactRevisions(filter: ArtifactRevisionFilter = null, orderBy: [ArtifactRevisionOrderBy!] = null, before: String = null, after: String = null, first: Int = null, last: Int = null, limit: Int = null, offset: Int = null): ArtifactRevisionConnection!
  deployments(
    filter: DeploymentFilter = null
    orderBy: DeploymentOrderBy = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ModelDeploymentConnection!
  deployment(id: ID!): ModelDeployment
  revisions(
    filter: ModelRevisionFilter = null
    order: ModelRevisionOrder = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ModelRevisionConnection!
  revision(id: ID!): ModelRevision
  replica(id: ID!): ModelReplica

  """Added in 25.14.0"""
  objectStorage(id: ID!): ObjectStorage

  """Added in 25.14.0"""
  objectStorages(before: String = null, after: String = null, first: Int = null, last: Int = null, limit: Int = null, offset: Int = null): ObjectStorageConnection!

  """Added in 25.16.0. Get a VFS storage by ID"""
  vfsStorage(id: ID!): VFSStorage

  """Added in 25.16.0. List all VFS storages"""
  vfsStorages(before: String = null, after: String = null, first: Int = null, last: Int = null, limit: Int = null, offset: Int = null): VFSStorageConnection!

  """Added in 25.14.0"""
  huggingfaceRegistry(id: ID!): HuggingFaceRegistry

  """Added in 25.14.0"""
  huggingfaceRegistries(before: String = null, after: String = null, first: Int = null, last: Int = null, offset: Int = null, limit: Int = null): HuggingFaceRegistryConnection!

  """Added in 25.14.0"""
  reservoirRegistry(id: ID!): ReservoirRegistry

  """Added in 25.14.0"""
  reservoirRegistries(before: String = null, after: String = null, first: Int = null, last: Int = null, offset: Int = null, limit: Int = null): ReservoirRegistryConnection!

  """Added in 25.14.0"""
  defaultArtifactRegistry(artifactType: ArtifactType!): ArtifactRegistry

  """Added in 25.15.0"""
  agentStats: AgentStats!
}

type RawServiceConfig {
  config: JSONString!
  extraCliParameters: String
}

"""
Added in 25.15.0.

Input type for registering a storage namespace.
"""
input RegisterStorageNamespaceInput {
  storageId: UUID!
  namespace: String!
}

"""
Added in 25.15.0.

Payload returned after storage namespace registration.
"""
type RegisterStorageNamespacePayload {
  id: UUID!
}

"""
Added in 25.14.0.

Input for rejecting an artifact revision.

Admin-only operation to reject artifact revisions, preventing their use.
"""
input RejectArtifactInput {
  artifactRevisionId: ID!
}

"""
Added in 25.14.0.

Response payload for artifact revision rejection operations.

Contains the rejected artifact revision. Admin-only operation.
"""
type RejectArtifactPayload {
  artifactRevision: ArtifactRevision!
}

type ReplicaState {
  desiredReplicaCount: Int!
  replicas: ModelReplicaConnection!
}

enum ReplicaStatus {
  HEALTHY
  UNHEALTHY
}

type ReplicaStatusChangedPayload {
  replica: ModelReplica!
}

"""Added in 25.14.0"""
type ReservoirRegistry implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  name: String!
  endpoint: String!
  accessKey: String!
  secretKey: String!
  apiVersion: String!
  remoteArtifactRegistries: ArtifactRegistryMetaConnection!
}

"""Added in 25.14.0"""
type ReservoirRegistryConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ReservoirRegistryEdge!]!
  count: Int!
}

"""An edge in a connection."""
type ReservoirRegistryEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ReservoirRegistry!
}

type ResourceConfig {
  resourceGroup: ScalingGroupNode!
  resourceSlots: JSONString!
  resourceOpts: JSONString
}

input ResourceConfigInput {
  resourceGroup: ResourceGroupInput!
  resourceSlots: JSONString!
  resourceOpts: JSONString = null
}

input ResourceGroupInput {
  name: String!
}

"""
Added in 25.15.0.

Input for restoring previously deleted artifacts.

Reverses the soft-delete operation, making the artifacts available again.
"""
input RestoreArtifactsInput {
  artifactIds: [ID!]!
}

"""
Added in 25.15.0.

Response payload for artifact restoration operations.

Contains the artifacts that were restored from soft-deleted state.
"""
type RestoreArtifactsPayload {
  artifacts: [Artifact!]!
}

type RoutingNode implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  routingId: UUID!
  endpoint: String!
  session: UUID!
  status: String!
  trafficRatio: Float!
  createdAt: DateTime!
  liveStat: JSONString!
}

extend type ScalingGroupNode @key(fields: "id") {
  id: ID! @external
}

type ScalingRule {
  autoScalingRules: [EndpointAutoScalingRuleNode!]!
}

"""
Added in 25.14.0.

Input for batch scanning of specific models from external registries.

Scans multiple specified models and retrieves detailed information including
README content and file sizes. This operation performs immediate detailed scanning
unlike the general scan_artifacts which only retrieves basic metadata.
"""
input ScanArtifactModelsInput {
  models: [ModelTarget!]!
  registryId: UUID = null
}

"""
Added in 25.14.0.

Response payload for batch model scanning operations.

Contains the artifact revisions discovered during detailed scanning of specific models,
including README content and file size information.
"""
type ScanArtifactModelsPayload {
  artifactRevision: ArtifactRevisionConnection!
}

"""
Added in 25.14.0.

Input for scanning artifacts from external registries (HuggingFace, Reservoir).

Discovers available artifacts and registers their metadata in the system.
Artifacts remain in SCANNED status until explicitly imported via import_artifacts.
"""
input ScanArtifactsInput {
  registryId: ID = null

  """Maximum number of artifacts to scan (max: 500)"""
  limit: Int!
  artifactType: ArtifactType = null
  search: String = null
}

"""
Added in 25.14.0.

Response payload for artifact scanning operations.

Contains the list of artifacts discovered during scanning of external registries.
These artifacts are registered with SCANNED status and can be imported for actual use.
"""
type ScanArtifactsPayload {
  artifacts: [Artifact!]!
}

"""Added in 25.15.0. Scheduling event broadcast payload"""
type SchedulingBroadcastEventPayload {
  sessionId: ID!
  creationId: String!
  statusTransition: SchedulingStatus!
  reason: String!
}

"""Status of session scheduling transitions"""
enum SchedulingStatus {
  PENDING
  SCHEDULED
  PREPARING
  PULLING
  PREPARED
  CREATING
  RUNNING
  TERMINATING
  TERMINATED
  CANCELLED
  ERROR
}

"""Different service configurations for model runtime"""
union ServiceConfig = RawServiceConfig

"""
Added in 25.14.0.

Information about the source or registry of an artifact.

Contains the name and URL of the registry where the artifact is stored or originates from.
"""
type SourceInfo {
  name: String
  url: String
}

"""
Added in 25.15.0.

Storage namespace provides logical separation of data within a single storage system
to organize and isolate domain-specific concerns.

Implementation varies by storage type:
- Object Storage (S3, MinIO): Uses bucket-based namespace separation
- File System (VFS): Uses directory path prefix for namespace distinction
"""
type StorageNamespace implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  storageId: ID!
  namespace: String!
}

"""
Added in 25.15.0.

Storage namespace connection for pagination.
"""
type StorageNamespaceConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [StorageNamespaceEdge!]!
  count: Int!
}

"""An edge in a connection."""
type StorageNamespaceEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: StorageNamespace!
}

input StringFilter {
  contains: String = null
  startsWith: String = null
  endsWith: String = null
  equals: String = null
  notEquals: String = null
  iContains: String = null
  iStartsWith: String = null
  iEndsWith: String = null
  iEquals: String = null
  iNotEquals: String = null
}

type Subscription {
  """
  Added in 25.14.0.
  
  Subscribe to real-time artifact status change notifications.
  
  Receives updates when artifact revision statuses change during import,
  cleanup, or other operations. Useful for building reactive UIs that
  show live progress of artifact operations.
  """
  artifactStatusChanged(input: ArtifactStatusChangedInput!): ArtifactStatusChangedPayload!

  """
  Added in 25.14.0.
  
  Subscribe to real-time artifact import progress updates.
  
  Receives progress notifications during artifact import operations,
  including percentage completed and current status. Useful for displaying
  progress bars and real-time import status to users.
  """
  artifactImportProgressUpdated(artifactRevisionId: ID!): ArtifactImportProgressUpdatedPayload!
  deploymentStatusChanged(deploymentId: ID!): DeploymentStatusChangedPayload!
  replicaStatusChanged(revisionId: ID!): ReplicaStatusChangedPayload!

  """
  Subscribe to real-time scheduling events for a specific session. Streams status transition events during the session lifecycle (PENDING → SCHEDULED → PREPARING → RUNNING → TERMINATED). Added in 25.15.0.
  """
  schedulingEventsBySession(sessionId: ID!): SchedulingBroadcastEventPayload!

  """
  Subscribe to real-time events for a specific background task. Streams progress updates and completion events (done/cancelled/failed) for the task lifecycle.
  """
  backgroundTaskEvents(taskId: ID!): BackgroundTaskEventPayload!
}

scalar UUID

"""
Added in 25.15.0.

Input type for unregistering a storage namespace.
"""
input UnregisterStorageNamespaceInput {
  storageId: UUID!
  namespace: String!
}

"""
Added in 25.15.0.

Payload returned after storage namespace unregistration.
"""
type UnregisterStorageNamespacePayload {
  id: UUID!
}

"""
Added in 25.14.0.

Input for updating artifact metadata properties.

Modifies artifact metadata such as readonly status and description.
This operation does not affect the actual artifact files or revisions.
"""
input UpdateArtifactInput {
  artifactId: ID!
  readonly: Boolean
  description: String
}

"""
Added in 25.14.0.

Response payload for artifact update operations.

Returns the updated artifact with modified metadata properties.
"""
type UpdateArtifactPayload {
  artifact: Artifact!
}

"""Added in 25.14.0"""
input UpdateHuggingFaceRegistryInput {
  id: ID!
  url: String
  name: String
  token: String
}

"""Added in 25.14.0"""
type UpdateHuggingFaceRegistryPayload {
  huggingfaceRegistry: HuggingFaceRegistry!
}

input UpdateModelDeploymentInput {
  id: ID!
  openToPublic: Boolean = null
  tags: [String!] = null
  deploymentStrategy: DeploymentStrategyInput = null
  activeRevisionId: ID = null
}

type UpdateModelDeploymentPayload {
  deployment: ModelDeployment
}

"""Added in 25.14.0"""
input UpdateObjectStorageInput {
  id: ID!
  name: String
  host: String
  accessKey: String
  secretKey: String
  endpoint: String
  region: String
}

"""Added in 25.14.0"""
type UpdateObjectStoragePayload {
  objectStorage: ObjectStorage!
}

"""Added in 25.14.0"""
input UpdateReservoirRegistryInput {
  id: ID!
  name: String
  endpoint: String
  accessKey: String
  secretKey: String
  apiVersion: String
}

"""Added in 25.14.0"""
type UpdateReservoirRegistryPayload {
  reservoir: ReservoirRegistry!
}

"""Added in 25.16.0. Input for updating VFS storage"""
input UpdateVFSStorageInput {
  id: ID!
  name: String
  host: String
  basePath: String
}

"""Added in 25.16.0. Payload for updating VFS storage"""
type UpdateVFSStoragePayload {
  vfsStorage: VFSStorage!
}

extend type UserNode @key(fields: "id") {
  id: ID! @external
}

"""Added in 25.16.0. VFS Storage configuration"""
type VFSStorage implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  name: String!
  host: String!
  basePath: String!
}

"""Added in 25.16.0. VFS Storage connection"""
type VFSStorageConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [VFSStorageEdge!]!
  count: Int!
}

"""An edge in a connection."""
type VFSStorageEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: VFSStorage!
}

extend type VirtualFolderNode @key(fields: "id") {
  id: ID! @external
}

scalar _Any

union _Entity = EndpointAutoScalingRuleNode | EndpointToken | ImageNode | ScalingGroupNode | UserNode | VirtualFolderNode

type _Service {
  sdl: String!
}