syntax = "proto3";

service RaftService {
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc InstallSnapshot(stream InstallSnapshotRequest) returns (InstallSnapshotResponse);
}

message AppendEntriesRequest {
    uint64 term = 1;                // leader's term
    string leader_id = 2;           // so follower can redirect clients
    uint64 prev_log_index = 3;      // index of log entry immediately preceding new ones
    uint64 prev_log_term = 4;       // term of prevLogIndex entry
    repeated Log entries = 5;       // log entries to store (empty for heartbeat; may send more than one for efficiency)
    uint64 leader_commit = 6;       // leader's commitIndex
}

message AppendEntriesResponse {
    uint64 term = 1;                // currentTerm, for leader to update itself
    bool success = 2;               // true if follower contained entry matching prevLogIndex and prevLogTerm
}

message RequestVoteRequest {
    uint64 term = 1;                // candidate's term
    string candidate_id = 2;        // candidate requesting vote
    uint64 last_log_index = 3;      // index of candidate's last log entry
    uint64 last_log_term = 4;       // term of candidate's last log entry
}

message RequestVoteResponse {
    uint64 term = 1;                // currentTerm, for candidate to update itself
    bool vote_granted = 2;          // true means candidate received vote
}

message Log {
    uint64 index = 1;
    uint64 term = 2;
    string command = 3;
}

message InstallSnapshotRequest {
    uint64 term = 1;                // leader's term
    string leader_id = 2;           // so follower can redirect clients
    uint64 last_included_index = 3; // the snapshot replaces all entries up through and including this index
    uint64 last_included_term = 4;  // term of lastIncludedIndex
    uint64 offset = 5;              // byte offset where chunk is positioned in the snapshot file
    bytes data = 6;                 // raw bytes of the snapshot chunk, starting at offset
    bool done = 7;                  // true if this is the last chunk
}

message InstallSnapshotResponse {
    uint64 term = 1;                // currentTerm, for leader to update itself
}

service CommandService {
    rpc Command(CommandRequest) returns (CommandResponse);
}

message CommandRequest {
    string id = 1;
    string command = 2;
}

message CommandResponse {
    bool success = 1;
    optional string redirect = 2;
}
