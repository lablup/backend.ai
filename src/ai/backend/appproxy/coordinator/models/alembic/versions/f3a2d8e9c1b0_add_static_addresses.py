"""add static addresses table and circuit static_address_id

Revision ID: f3a2d8e9c1b0
Revises: a1b2c3d4e5f6
Create Date: 2025-06-16 12:00:00.000000

"""

import enum

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from ai.backend.appproxy.coordinator.models.base import GUID

# revision identifiers, used by Alembic.
revision = "f3a2d8e9c1b0"
down_revision = "a1b2c3d4e5f6"
branch_labels = None
depends_on = None


class FrontendMode(str, enum.Enum):
    WILDCARD_DOMAIN = "wildcard"
    PORT = "port"


frontendmode_choices = list(map(lambda v: v.name, FrontendMode))
frontendmode = postgresql.ENUM(*frontendmode_choices, name="frontendmode", create_type=False)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "static_addresses",
        sa.Column("id", GUID(), server_default=sa.text("uuid_generate_v4()"), nullable=False),
        sa.Column("frontend_mode", frontendmode, nullable=False),
        sa.Column("port", sa.Integer(), nullable=True),
        sa.Column("subdomain", sa.String(length=255), nullable=True),
        sa.Column("is_allocated", sa.Boolean(), nullable=False),
        sa.Column("allocated_to_circuit", GUID(), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("description", sa.String(length=1000), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "(frontend_mode = 'PORT' AND port IS NOT NULL AND subdomain IS NULL) OR "
            "(frontend_mode = 'WILDCARD_DOMAIN' AND subdomain IS NOT NULL AND port IS NULL)",
            name=op.f("ck_static_addresses_frontend_mode_constraint"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_static_addresses")),
    )
    op.create_index(
        op.f("ix_static_addresses_allocated_circuit"),
        "static_addresses",
        ["allocated_to_circuit"],
        unique=False,
    )
    op.create_index(op.f("ix_static_addresses_port"), "static_addresses", ["port"], unique=False)
    op.create_index(
        op.f("ix_static_addresses_subdomain"), "static_addresses", ["subdomain"], unique=False
    )

    # Add static_address_id column to circuits table
    op.add_column("circuits", sa.Column("static_address_id", GUID(), nullable=True))
    op.create_foreign_key(
        op.f("fk_circuits_static_address_id_static_addresses"),
        "circuits",
        "static_addresses",
        ["static_address_id"],
        ["id"],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove foreign key and column from circuits table
    op.drop_constraint(
        op.f("fk_circuits_static_address_id_static_addresses"), "circuits", type_="foreignkey"
    )
    op.drop_column("circuits", "static_address_id")

    # Drop static_addresses table
    op.drop_index(op.f("ix_static_addresses_subdomain"), table_name="static_addresses")
    op.drop_index(op.f("ix_static_addresses_port"), table_name="static_addresses")
    op.drop_index(op.f("ix_static_addresses_allocated_circuit"), table_name="static_addresses")
    op.drop_table("static_addresses")
    # ### end Alembic commands ###
