{"version":3,"file":"static/js/2984.330aa867.chunk.js","mappings":"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","sources":["components/ActiveAgents.tsx","__generated__/AgentStatsRefetchQuery.graphql.ts","__generated__/AgentStatsFragment.graphql.ts","components/AgentStats.tsx","components/BAIBoard.tsx","__generated__/RecentlyCreatedSessionRefetchQuery.graphql.ts","__generated__/RecentlyCreatedSessionFragment.graphql.ts","components/RecentlyCreatedSession.tsx","__generated__/SessionCountDashboardItemRefetchQuery.graphql.ts","__generated__/SessionCountDashboardItemFragment.graphql.ts","components/SessionCountDashboardItem.tsx"],"sourcesContent":["import AgentList from './AgentList';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport { theme } from 'antd';\nimport { BAIFlex, BAIBoardItemTitle } from 'backend.ai-ui';\nimport { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface ActiveAgentsProps {\n  fetchKey?: string;\n  onChangeFetchKey?: (key: string) => void;\n}\n\n// TODO: Refactor this component with agent_nodes.\n// ref: https://lablup.atlassian.net/browse/FR-1533\nconst ActiveAgents: React.FC<ActiveAgentsProps> = ({\n  fetchKey,\n  onChangeFetchKey,\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n\n  return (\n    <BAIFlex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        paddingLeft: token.paddingXL,\n        paddingRight: token.paddingXL,\n        height: '100%',\n      }}\n    >\n      <BAIBoardItemTitle\n        title={t('activeAgent.ActiveAgents')}\n        tooltip={t('activeAgent.ActiveAgentsTooltip', {\n          count: 5,\n        })}\n        extra={\n          <BAIFetchKeyButton\n            size=\"small\"\n            loading={isPendingRefetch}\n            value=\"\"\n            onChange={(newFetchKey) => {\n              startRefetchTransition(() => {\n                onChangeFetchKey?.(newFetchKey);\n              });\n            }}\n            type=\"text\"\n            style={{\n              backgroundColor: 'transparent',\n            }}\n          />\n        }\n      />\n\n      {/* Scrollable Content Section */}\n      <BAIFlex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 1,\n          overflowY: 'auto',\n          overflowX: 'hidden',\n        }}\n      >\n        <AgentList\n          fetchKey={fetchKey}\n          onChangeFetchKey={onChangeFetchKey}\n          headerProps={{\n            style: { display: 'none' },\n          }}\n          tableProps={{\n            pagination: {\n              pageSize: 3,\n              showSizeChanger: false,\n            },\n          }}\n        />\n      </BAIFlex>\n    </BAIFlex>\n  );\n};\n\nexport default ActiveAgents;\n","/**\n * @generated SignedSource<<ca0fe5a130171f9b98480845fa9ecca4>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentStatsRefetchQuery$variables = Record<PropertyKey, never>;\nexport type AgentStatsRefetchQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AgentStatsFragment\">;\n};\nexport type AgentStatsRefetchQuery = {\n  response: AgentStatsRefetchQuery$data;\n  variables: AgentStatsRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentStatsRefetchQuery\",\n    \"selections\": [\n      {\n        \"args\": null,\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"AgentStatsFragment\"\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"AgentStatsRefetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"AgentStats\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"agentStats\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"AgentResource\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"totalResource\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"free\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"used\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"capacity\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"b2605aadfb3d6bd4a21f3f7887043e31\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentStatsRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AgentStatsRefetchQuery {\\n  ...AgentStatsFragment\\n}\\n\\nfragment AgentStatsFragment on Query {\\n  agentStats @since(version: \\\"25.15.0\\\") {\\n    totalResource {\\n      free\\n      used\\n      capacity\\n    }\\n  }\\n}\\n\"\n  }\n};\n\n(node as any).hash = \"458be767c066ba74fbebc3d9d84638ca\";\n\nexport default node;\n","/**\n * @generated SignedSource<<d58e9c9594f4015f14f300bdc2f4dd44>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentStatsFragment$data = {\n  readonly agentStats: {\n    readonly totalResource: {\n      readonly capacity: any;\n      readonly free: any;\n      readonly used: any;\n    };\n  };\n  readonly \" $fragmentType\": \"AgentStatsFragment\";\n};\nexport type AgentStatsFragment$key = {\n  readonly \" $data\"?: AgentStatsFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AgentStatsFragment\">;\n};\n\nimport AgentStatsRefetchQuery_graphql from './AgentStatsRefetchQuery.graphql';\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"refetch\": {\n      \"connection\": null,\n      \"fragmentPathInResult\": [],\n      \"operation\": AgentStatsRefetchQuery_graphql\n    }\n  },\n  \"name\": \"AgentStatsFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"AgentStats\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"agentStats\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"AgentResource\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"totalResource\",\n          \"plural\": false,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"free\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"used\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"capacity\",\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Query\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"458be767c066ba74fbebc3d9d84638ca\";\n\nexport default node;\n","import { useResourceSlotsDetails } from '../hooks/backendai';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport { useControllableValue } from 'ahooks';\nimport { Segmented, Skeleton, theme, Typography } from 'antd';\nimport {\n  BAIFlex,\n  BAIBoardItemTitle,\n  ResourceStatistics,\n  convertToNumber,\n  processMemoryValue,\n  BAIFlexProps,\n} from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { useTransition, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useRefetchableFragment } from 'react-relay';\nimport { AgentStatsFragment$key } from 'src/__generated__/AgentStatsFragment.graphql';\n\ninterface AgentStatsProps extends BAIFlexProps {\n  queryRef: AgentStatsFragment$key;\n  isRefetching?: boolean;\n  displayType?: 'used' | 'free';\n  onDisplayTypeChange?: (type: 'used' | 'free') => void;\n  extra?: ReactNode;\n}\n\nconst AgentStats: React.FC<AgentStatsProps> = ({\n  queryRef,\n  isRefetching,\n  extra,\n  ...props\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n\n  const [displayType, setDisplayType] = useControllableValue<\n    Exclude<AgentStatsProps['displayType'], undefined>\n  >(props, {\n    defaultValue: 'used',\n    trigger: 'onDisplayTypeChange',\n    defaultValuePropName: 'defaultDisplayType',\n  });\n\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment AgentStatsFragment on Query\n      @refetchable(queryName: \"AgentStatsRefetchQuery\") {\n        agentStats @since(version: \"25.15.0\") {\n          totalResource {\n            free\n            used\n            capacity\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  const resourceSlotsDetails = useResourceSlotsDetails();\n\n  const agentStatsData = (() => {\n    const totalResource = data.agentStats.totalResource;\n    if (!totalResource) {\n      return { cpu: null, memory: null, accelerators: [] };\n    }\n\n    const free = totalResource.free as Record<string, number>;\n    const used = totalResource.used as Record<string, number>;\n    const capacity = totalResource.capacity as Record<string, number>;\n\n    const cpuSlot = resourceSlotsDetails?.resourceSlotsInRG?.['cpu'];\n    const memSlot = resourceSlotsDetails?.resourceSlotsInRG?.['mem'];\n\n    const cpuData = cpuSlot\n      ? {\n          used: {\n            current: convertToNumber(used['cpu'] || 0),\n            total: convertToNumber(capacity['cpu'] || 0),\n          },\n          free: {\n            current: convertToNumber(free['cpu'] || 0),\n            total: convertToNumber(capacity['cpu'] || 0),\n          },\n          metadata: {\n            title: cpuSlot.human_readable_name,\n            displayUnit: cpuSlot.display_unit,\n          },\n        }\n      : null;\n\n    const memoryData = memSlot\n      ? {\n          used: {\n            current: processMemoryValue(used['mem'] || 0, memSlot.display_unit),\n            total: processMemoryValue(\n              capacity['mem'] || 0,\n              memSlot.display_unit,\n            ),\n          },\n          free: {\n            current: processMemoryValue(free['mem'] || 0, memSlot.display_unit),\n            total: processMemoryValue(\n              capacity['mem'] || 0,\n              memSlot.display_unit,\n            ),\n          },\n          metadata: {\n            title: memSlot.human_readable_name,\n            displayUnit: memSlot.display_unit,\n          },\n        }\n      : null;\n\n    const accelerators = _.chain(resourceSlotsDetails?.resourceSlotsInRG)\n      .omit(['cpu', 'mem'])\n      .map((resourceSlot, key) => {\n        if (!resourceSlot) return null;\n\n        const freeValue = free[key] || 0;\n        const usedValue = used[key] || 0;\n        const capacityValue = capacity[key] || 0;\n\n        return {\n          key,\n          used: {\n            current: convertToNumber(usedValue),\n            total: convertToNumber(capacityValue),\n          },\n          free: {\n            current: convertToNumber(freeValue),\n            total: convertToNumber(capacityValue),\n          },\n          metadata: {\n            title: resourceSlot.human_readable_name,\n            displayUnit: resourceSlot.display_unit,\n          },\n        };\n      })\n      .compact()\n      .filter((item) => !!(item.used.current || item.used.total))\n      .value();\n\n    return { cpu: cpuData, memory: memoryData, accelerators };\n  })();\n\n  return (\n    <BAIFlex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        paddingInline: token.paddingXL,\n        paddingBottom: token.padding,\n        ...props.style,\n      }}\n      {..._.omit(props, ['style'])}\n    >\n      <BAIBoardItemTitle\n        title={\n          <Typography.Text\n            style={{\n              fontSize: token.fontSizeHeading5,\n              fontWeight: token.fontWeightStrong,\n            }}\n          >\n            {t('agentStats.AgentStats')}\n          </Typography.Text>\n        }\n        tooltip={t('agentStats.AgentStatsDescription')}\n        extra={\n          <BAIFlex gap={'xs'} wrap=\"wrap\">\n            <Segmented<Exclude<AgentStatsProps['displayType'], undefined>>\n              size=\"small\"\n              options={[\n                {\n                  label: t('dashboard.Used'),\n                  value: 'used',\n                },\n                {\n                  value: 'free',\n                  label: t('dashboard.Free'),\n                },\n              ]}\n              value={displayType}\n              onChange={(v) => setDisplayType(v)}\n            />\n            <BAIFetchKeyButton\n              size=\"small\"\n              loading={isPendingRefetch || isRefetching}\n              value=\"\"\n              onChange={() => {\n                startRefetchTransition(() => {\n                  refetch(\n                    {},\n                    {\n                      fetchPolicy: 'network-only',\n                    },\n                  );\n                });\n              }}\n              type=\"text\"\n              style={{\n                backgroundColor: 'transparent',\n              }}\n            />\n            {extra}\n          </BAIFlex>\n        }\n      />\n      {resourceSlotsDetails.isLoading ? (\n        <Skeleton active />\n      ) : (\n        <ResourceStatistics\n          resourceData={agentStatsData}\n          displayType={displayType === 'used' ? 'used' : 'free'}\n          progressMode=\"normal\"\n        />\n      )}\n    </BAIFlex>\n  );\n};\n\nexport default AgentStats;\n","import Board, { BoardProps } from '@cloudscape-design/board-components/board';\nimport BoardItem from '@cloudscape-design/board-components/board-item';\nimport { createStyles } from 'antd-style';\nimport classNames from 'classnames';\n\nconst useStyles = createStyles(({ css, token }) => {\n  return {\n    board: css`\n      .bai_board_placeholder {\n        border-radius: var(--token-borderRadius) !important;\n      }\n      .bai_board_placeholder--active {\n        background-color: var(--token-colorSplit) !important ;\n      }\n      .bai_board_placeholder--hover {\n        background-color: var(--token-colorPrimaryHover) !important ;\n        // FIXME: global token doesn't exist, so opacity fits color\n        opacity: 0.3;\n      }\n      .bai_board_handle button span {\n        color: ${token.colorTextQuaternary} !important;\n        padding-left: 5px !important;\n      }\n      .bai_board_header {\n        padding: 0 !important;\n        padding-top: ${token.padding - 1}px !important;\n      }\n      .bai_board_resizer button span {\n        color: ${token.colorTextQuaternary} !important;\n      }\n      .bai_board_container-override\n        > div:first-child\n        > div:nth-child(2)\n        > div:first-child {\n        padding: 0 !important;\n      }\n    `,\n    disableResize: css`\n      .bai_board_resizer {\n        display: none !important;\n      }\n    `,\n    disableMove: css`\n      .bai_board_handle {\n        display: none !important;\n      }\n      .bai_board_header {\n        display: none !important;\n      }\n    `,\n    boardItems: css`\n      & > div:first-child {\n        border-radius: var(--token-borderRadius) !important;\n        background-color: var(--token-colorBgContainer) !important;\n        border: 1px solid ${token.colorBorderSecondary} !important;\n      }\n\n      & > div:first-child > div:first-child > div:first-child {\n        margin-bottom: var(--token-margin);\n        background-color: var(--token-colorBgContainer) !important;\n        position: absolute;\n        z-index: 1;\n      }\n    `,\n    disableBorder: css`\n      & > div:first-child {\n        border: none !important;\n      }\n    `,\n  };\n});\n\nexport interface BAIBoardDataType {\n  content?: React.ReactNode;\n}\n\nexport type BAIBoardItem = BoardProps.Item<BAIBoardDataType>;\nexport interface BAIBoardProps<T extends BAIBoardDataType = BAIBoardDataType> {\n  items: Array<BoardProps.Item<T>>;\n  onItemsChange: (event: CustomEvent<BoardProps.ItemsChangeDetail<T>>) => void;\n  resizable?: boolean;\n  movable?: boolean;\n  bordered?: boolean;\n}\n\nconst BAIBoard = <T extends BAIBoardDataType>({\n  items,\n  resizable = false,\n  movable = false,\n  bordered = false,\n  ...BoardProps\n}: BAIBoardProps<T>) => {\n  const { styles } = useStyles();\n  return (\n    <Board<T>\n      className={classNames(\n        styles.board,\n        !movable && styles.disableMove,\n        !resizable && styles.disableResize,\n      )}\n      empty\n      renderItem={(item: BoardProps.Item<T>) => {\n        return (\n          <BoardItem\n            className={classNames(\n              styles.boardItems,\n              !bordered && styles.disableBorder,\n            )}\n            key={item.id}\n            i18nStrings={{\n              dragHandleAriaLabel: '',\n              dragHandleAriaDescription: '',\n              resizeHandleAriaLabel: '',\n              resizeHandleAriaDescription: '',\n            }}\n            {...item}\n          >\n            {item?.data?.content}\n          </BoardItem>\n        );\n      }}\n      items={items}\n      i18nStrings={(() => {\n        const createAnnouncement = (\n          operationAnnouncement: any,\n          conflicts: any,\n          disturbed: any,\n        ) => {\n          const conflictsAnnouncement =\n            conflicts.length > 0\n              ? `Conflicts with ${conflicts\n                  .map((c: any) => c.data.title)\n                  .join(', ')}.`\n              : '';\n          const disturbedAnnouncement =\n            disturbed.length > 0 ? `Disturbed ${disturbed.length} items.` : '';\n          return [\n            operationAnnouncement,\n            conflictsAnnouncement,\n            disturbedAnnouncement,\n          ]\n            .filter(Boolean)\n            .join(' ');\n        };\n        return {\n          liveAnnouncementDndStarted: (operationType) =>\n            operationType === 'resize' ? 'Resizing' : 'Dragging',\n          liveAnnouncementDndItemReordered: (operation) => {\n            const columns = `column ${operation.placement.x + 1}`;\n            const rows = `row ${operation.placement.y + 1}`;\n            return createAnnouncement(\n              `Item moved to ${\n                operation.direction === 'horizontal' ? columns : rows\n              }.`,\n              operation.conflicts,\n              operation.disturbed,\n            );\n          },\n          liveAnnouncementDndItemResized: (operation) => {\n            const columnsConstraint = operation.isMinimalColumnsReached\n              ? ' (minimal)'\n              : '';\n            const rowsConstraint = operation.isMinimalRowsReached\n              ? ' (minimal)'\n              : '';\n            const sizeAnnouncement =\n              operation.direction === 'horizontal'\n                ? `columns ${operation.placement.width}${columnsConstraint}`\n                : `rows ${operation.placement.height}${rowsConstraint}`;\n            return createAnnouncement(\n              `Item resized to ${sizeAnnouncement}.`,\n              operation.conflicts,\n              operation.disturbed,\n            );\n          },\n          liveAnnouncementDndItemInserted: (operation) => {\n            const columns = `column ${operation.placement.x + 1}`;\n            const rows = `row ${operation.placement.y + 1}`;\n            return createAnnouncement(\n              `Item inserted to ${columns}, ${rows}.`,\n              operation.conflicts,\n              operation.disturbed,\n            );\n          },\n          liveAnnouncementDndCommitted: (operationType) =>\n            `${operationType} committed`,\n          liveAnnouncementDndDiscarded: (operationType) =>\n            `${operationType} discarded`,\n          liveAnnouncementItemRemoved: (op: any) =>\n            createAnnouncement(\n              `Removed item ${op.item.data.title}.`,\n              [],\n              op.disturbed,\n            ),\n          navigationAriaLabel: 'Board navigation',\n          navigationAriaDescription:\n            'Click on non-empty item to move focus over',\n          navigationItemAriaLabel: (item: any) =>\n            item ? item.data.title : 'Empty',\n        };\n      })()}\n      {...BoardProps}\n    />\n  );\n};\n\nexport default BAIBoard;\n","/**\n * @generated SignedSource<<5391293d0dea12b3e5c419cbf74a4384>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type RecentlyCreatedSessionRefetchQuery$variables = {\n  scopeId?: any | null | undefined;\n};\nexport type RecentlyCreatedSessionRefetchQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"RecentlyCreatedSessionFragment\">;\n};\nexport type RecentlyCreatedSessionRefetchQuery = {\n  response: RecentlyCreatedSessionRefetchQuery$data;\n  variables: RecentlyCreatedSessionRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"scopeId\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status_info\",\n  \"storageKey\": null\n},\nv6 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"key\",\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"value\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"RecentlyCreatedSessionRefetchQuery\",\n    \"selections\": [\n      {\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"scopeId\",\n            \"variableName\": \"scopeId\"\n          }\n        ],\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"RecentlyCreatedSessionFragment\"\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"RecentlyCreatedSessionRefetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status == \\\"running\\\"\"\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"first\",\n            \"value\": 5\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"order\",\n            \"value\": \"-created_at\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"scope_id\",\n            \"variableName\": \"scopeId\"\n          }\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSessionEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"ComputeSessionNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v1/*: any*/),\n                  (v2/*: any*/),\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"type\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"agent_ids\",\n                    \"storageKey\": null\n                  },\n                  (v5/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_data\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"queue_position\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"created_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"starts_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"terminated_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"occupied_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"requested_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"kernel_nodes\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"KernelEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KernelNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"live_stat\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_role\",\n                                \"storageKey\": null\n                              },\n                              (v1/*: any*/),\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"concreteType\": \"ImageNode\",\n                                \"kind\": \"LinkedField\",\n                                \"name\": \"image\",\n                                \"plural\": false,\n                                \"selections\": [\n                                  {\n                                    \"alias\": null,\n                                    \"args\": null,\n                                    \"kind\": \"ScalarField\",\n                                    \"name\": \"base_image_name\",\n                                    \"storageKey\": null\n                                  },\n                                  {\n                                    \"alias\": null,\n                                    \"args\": null,\n                                    \"kind\": \"ScalarField\",\n                                    \"name\": \"version\",\n                                    \"storageKey\": null\n                                  },\n                                  {\n                                    \"alias\": null,\n                                    \"args\": null,\n                                    \"kind\": \"ScalarField\",\n                                    \"name\": \"architecture\",\n                                    \"storageKey\": null\n                                  },\n                                  (v3/*: any*/),\n                                  {\n                                    \"alias\": null,\n                                    \"args\": null,\n                                    \"concreteType\": \"KVPair\",\n                                    \"kind\": \"LinkedField\",\n                                    \"name\": \"tags\",\n                                    \"plural\": true,\n                                    \"selections\": (v6/*: any*/),\n                                    \"storageKey\": null\n                                  },\n                                  {\n                                    \"alias\": null,\n                                    \"args\": null,\n                                    \"concreteType\": \"KVPair\",\n                                    \"kind\": \"LinkedField\",\n                                    \"name\": \"labels\",\n                                    \"plural\": true,\n                                    \"selections\": (v6/*: any*/),\n                                    \"storageKey\": null\n                                  },\n                                  {\n                                    \"alias\": null,\n                                    \"args\": null,\n                                    \"kind\": \"ScalarField\",\n                                    \"name\": \"registry\",\n                                    \"storageKey\": null\n                                  },\n                                  {\n                                    \"alias\": null,\n                                    \"args\": null,\n                                    \"kind\": \"ScalarField\",\n                                    \"name\": \"namespace\",\n                                    \"storageKey\": null\n                                  },\n                                  {\n                                    \"alias\": null,\n                                    \"args\": null,\n                                    \"kind\": \"ScalarField\",\n                                    \"name\": \"tag\",\n                                    \"storageKey\": null\n                                  },\n                                  (v1/*: any*/)\n                                ],\n                                \"storageKey\": null\n                              },\n                              (v2/*: any*/),\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_hostname\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_idx\",\n                                \"storageKey\": null\n                              },\n                              (v4/*: any*/),\n                              (v5/*: any*/),\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"agent_id\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"container_id\",\n                                \"storageKey\": null\n                              }\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"project_id\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"user_id\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"UserNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"owner\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"email\",\n                        \"storageKey\": null\n                      },\n                      (v1/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"resource_opts\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"vfolder_mounts\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"VirtualFolderConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"vfolder_nodes\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"VirtualFolderEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"VirtualFolderNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              (v2/*: any*/),\n                              (v3/*: any*/),\n                              (v1/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"count\",\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"scaling_group\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"idle_checks\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"access_key\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"service_ports\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"commit_status\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"priority\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"cluster_mode\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"cluster_size\",\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"848d99c74beffb92b28c9770f97809fd\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"RecentlyCreatedSessionRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query RecentlyCreatedSessionRefetchQuery(\\n  $scopeId: ScopeField\\n) {\\n  ...RecentlyCreatedSessionFragment_3vJUag\\n}\\n\\nfragment AppLauncherModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  service_ports\\n  access_key\\n}\\n\\nfragment BAISessionAgentIdsFragment on ComputeSessionNode {\\n  agent_ids\\n}\\n\\nfragment BAISessionClusterModeFragment on ComputeSessionNode {\\n  cluster_mode\\n  cluster_size\\n}\\n\\nfragment BAISessionTypeTagFragment on ComputeSessionNode {\\n  type\\n}\\n\\nfragment ConnectedKernelListFragment on KernelNode {\\n  id\\n  row_id\\n  cluster_hostname\\n  cluster_idx\\n  cluster_role\\n  status\\n  status_info\\n  agent_id\\n  container_id\\n}\\n\\nfragment ContainerCommitModalFragment on ComputeSessionNode {\\n  id\\n  name\\n  row_id\\n}\\n\\nfragment ContainerLogModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        id\\n        row_id\\n        container_id\\n        cluster_idx\\n        cluster_role\\n        cluster_hostname\\n      }\\n    }\\n  }\\n}\\n\\nfragment EditableSessionNameFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  priority\\n  user_id\\n  status\\n}\\n\\nfragment FolderLink_vfolderNode on VirtualFolderNode {\\n  row_id\\n  name\\n}\\n\\nfragment ImageNodeSimpleTagFragment on ImageNode {\\n  base_image_name @since(version: \\\"24.12.0\\\")\\n  version @since(version: \\\"24.12.0\\\")\\n  architecture\\n  name\\n  tags @since(version: \\\"24.12.0\\\") {\\n    key\\n    value\\n  }\\n  labels {\\n    key\\n    value\\n  }\\n  registry\\n  namespace @since(version: \\\"24.12.0\\\")\\n  tag\\n}\\n\\nfragment MountedVFolderLinksFragment on ComputeSessionNode {\\n  row_id\\n  vfolder_nodes @since(version: \\\"25.4.0\\\") {\\n    edges {\\n      node {\\n        ...FolderLink_vfolderNode\\n        id\\n      }\\n    }\\n  }\\n  ...MountedVFolderLinksLegacyLazyFolderLinkFragment\\n}\\n\\nfragment MountedVFolderLinksLegacyLazyFolderLinkFragment on ComputeSessionNode {\\n  row_id\\n  vfolder_mounts\\n}\\n\\nfragment RecentlyCreatedSessionFragment_3vJUag on Query {\\n  compute_session_nodes(first: 5, order: \\\"-created_at\\\", filter: \\\"status == \\\\\\\"running\\\\\\\"\\\", scope_id: $scopeId) {\\n    edges {\\n      node {\\n        id\\n        ...SessionNodesFragment\\n      }\\n    }\\n  }\\n}\\n\\nfragment SFTPConnectionInfoModalFragment on ComputeSessionNode {\\n  row_id\\n  vfolder_mounts\\n}\\n\\nfragment SessionActionButtonsFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  type\\n  status\\n  access_key\\n  service_ports\\n  commit_status\\n  user_id\\n  ...TerminateSessionModalFragment\\n  ...ContainerLogModalFragment\\n  ...ContainerCommitModalFragment\\n  ...AppLauncherModalFragment\\n  ...SFTPConnectionInfoModalFragment\\n  ...useBackendAIAppLauncherFragment\\n}\\n\\nfragment SessionDetailContentFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  project_id\\n  user_id\\n  owner @since(version: \\\"25.13.0\\\") {\\n    email\\n    id\\n  }\\n  resource_opts\\n  status\\n  status_data\\n  vfolder_mounts\\n  vfolder_nodes @since(version: \\\"25.4.0\\\") {\\n    edges {\\n      node {\\n        ...FolderLink_vfolderNode\\n        id\\n      }\\n    }\\n    count\\n  }\\n  created_at\\n  terminated_at\\n  scaling_group\\n  agent_ids\\n  requested_slots\\n  idle_checks @since(version: \\\"24.12.0\\\")\\n  kernel_nodes {\\n    edges {\\n      node {\\n        image {\\n          ...ImageNodeSimpleTagFragment\\n          id\\n        }\\n        ...ConnectedKernelListFragment\\n        id\\n      }\\n    }\\n  }\\n  ...SessionStatusTagFragment\\n  ...SessionActionButtonsFragment\\n  ...BAISessionTypeTagFragment\\n  ...EditableSessionNameFragment\\n  ...SessionReservationFragment\\n  ...ContainerLogModalFragment\\n  ...SessionUsageMonitorFragment\\n  ...ContainerCommitModalFragment\\n  ...SessionIdleChecksNodeFragment\\n  ...SessionStatusDetailModalFragment\\n  ...AppLauncherModalFragment\\n  ...MountedVFolderLinksFragment\\n  ...BAISessionAgentIdsFragment\\n  ...BAISessionClusterModeFragment\\n}\\n\\nfragment SessionDetailDrawerFragment on ComputeSessionNode {\\n  id\\n  project_id\\n  ...SessionDetailContentFragment\\n}\\n\\nfragment SessionIdleChecksNodeFragment on ComputeSessionNode {\\n  id\\n  idle_checks @since(version: \\\"24.12.0\\\")\\n}\\n\\nfragment SessionNodesFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  type\\n  agent_ids\\n  ...SessionStatusTagFragment\\n  ...SessionReservationFragment\\n  ...SessionSlotCellFragment\\n  ...SessionUsageMonitorFragment\\n  ...SessionDetailDrawerFragment\\n  ...BAISessionAgentIdsFragment\\n  ...BAISessionTypeTagFragment\\n  ...BAISessionClusterModeFragment\\n  kernel_nodes {\\n    edges {\\n      node {\\n        image {\\n          ...ImageNodeSimpleTagFragment\\n          id\\n        }\\n        id\\n      }\\n    }\\n  }\\n  created_at\\n  scaling_group\\n  owner @since(version: \\\"25.13.0\\\") {\\n    email\\n    id\\n  }\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionSlotCellFragment on ComputeSessionNode {\\n  id\\n  status\\n  occupied_slots\\n  requested_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment SessionStatusDetailModalFragment on ComputeSessionNode {\\n  id\\n  name\\n  status\\n  status_info\\n  status_data\\n  starts_at\\n  ...SessionStatusTagFragment\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  status\\n  status_info\\n  status_data\\n  queue_position @since(version: \\\"25.13.0\\\")\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  occupied_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment TerminateSessionModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  scaling_group\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        container_id\\n        agent_id\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment useBackendAIAppLauncherFragment on ComputeSessionNode {\\n  row_id\\n  vfolder_mounts\\n}\\n\\nfragment useSessionNodeLiveStatSessionFragment on ComputeSessionNode {\\n  id\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        cluster_role\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"aeaa38c05c8fe2c9a07946ed4a3fe214\";\n\nexport default node;\n","/**\n * @generated SignedSource<<b4dcb7100199af539438cf9eab64154e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type RecentlyCreatedSessionFragment$data = {\n  readonly compute_session_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly id: string;\n        readonly \" $fragmentSpreads\": FragmentRefs<\"SessionNodesFragment\">;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly \" $fragmentType\": \"RecentlyCreatedSessionFragment\";\n};\nexport type RecentlyCreatedSessionFragment$key = {\n  readonly \" $data\"?: RecentlyCreatedSessionFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"RecentlyCreatedSessionFragment\">;\n};\n\nimport RecentlyCreatedSessionRefetchQuery_graphql from './RecentlyCreatedSessionRefetchQuery.graphql';\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [\n    {\n      \"defaultValue\": null,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"scopeId\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"refetch\": {\n      \"connection\": null,\n      \"fragmentPathInResult\": [],\n      \"operation\": RecentlyCreatedSessionRefetchQuery_graphql\n    }\n  },\n  \"name\": \"RecentlyCreatedSessionFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status == \\\"running\\\"\"\n        },\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"first\",\n          \"value\": 5\n        },\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"order\",\n          \"value\": \"-created_at\"\n        },\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"scope_id\",\n          \"variableName\": \"scopeId\"\n        }\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"ComputeSessionEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"ComputeSessionNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"id\",\n                  \"storageKey\": null\n                },\n                {\n                  \"args\": null,\n                  \"kind\": \"FragmentSpread\",\n                  \"name\": \"SessionNodesFragment\"\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Query\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"aeaa38c05c8fe2c9a07946ed4a3fe214\";\n\nexport default node;\n","import { RecentlyCreatedSessionFragment$key } from '../__generated__/RecentlyCreatedSessionFragment.graphql';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport SessionDetailDrawer from './SessionDetailDrawer';\nimport SessionNodes from './SessionNodes';\nimport { theme } from 'antd';\nimport {\n  filterOutNullAndUndefined,\n  toLocalId,\n  BAIFlex,\n  BAIUnmountAfterClose,\n  BAIBoardItemTitle,\n} from 'backend.ai-ui';\nimport { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useRefetchableFragment } from 'react-relay';\nimport { useQueryParam, StringParam } from 'use-query-params';\n\ninterface RecentlyCreatedSessionProps {\n  queryRef: RecentlyCreatedSessionFragment$key;\n  isRefetching?: boolean;\n}\n\nconst RecentlyCreatedSession: React.FC<RecentlyCreatedSessionProps> = ({\n  queryRef,\n  isRefetching,\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [sessionDetailId, setSessionDetailId] = useQueryParam(\n    'sessionDetail',\n    StringParam,\n  );\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment RecentlyCreatedSessionFragment on Query\n      @argumentDefinitions(\n        scopeId: { type: \"ScopeField\" }\n      )\n      @refetchable(queryName: \"RecentlyCreatedSessionRefetchQuery\") {\n        compute_session_nodes(\n          first: 5\n          order: \"-created_at\"\n          filter: \"status == \\\"running\\\"\"\n          scope_id: $scopeId\n        ) {\n          edges {\n            node {\n              id\n              ...SessionNodesFragment\n            }\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <BAIFlex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          paddingLeft: token.paddingXL,\n          paddingRight: token.paddingXL,\n          height: '100%',\n        }}\n      >\n        <BAIBoardItemTitle\n          title={t('session.RecentlyCreatedSessions')}\n          tooltip={t('session.RecentlyCreatedSessionsTooltip', {\n            count: 5,\n          })}\n          extra={\n            <BAIFetchKeyButton\n              size=\"small\"\n              loading={isPendingRefetch || isRefetching}\n              value=\"\"\n              onChange={() => {\n                startRefetchTransition(() => {\n                  refetch(\n                    {},\n                    {\n                      fetchPolicy: 'network-only',\n                    },\n                  );\n                });\n              }}\n              type=\"text\"\n              style={{\n                backgroundColor: 'transparent',\n              }}\n            />\n          }\n        />\n\n        {/* Scrollable Content Section */}\n        <BAIFlex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{\n            flex: 1,\n            overflowY: 'auto',\n            overflowX: 'hidden',\n          }}\n        >\n          <SessionNodes\n            sessionsFrgmt={filterOutNullAndUndefined(\n              data.compute_session_nodes?.edges.map((e) => e?.node),\n            )}\n            onClickSessionName={(session) => {\n              setSessionDetailId(toLocalId(session.id));\n            }}\n            pagination={false}\n            disableSorter\n          />\n        </BAIFlex>\n      </BAIFlex>\n      <BAIUnmountAfterClose>\n        <SessionDetailDrawer\n          open={!!sessionDetailId}\n          sessionId={sessionDetailId || undefined}\n          onClose={() => {\n            setSessionDetailId(undefined, 'pushIn');\n          }}\n        />\n      </BAIUnmountAfterClose>\n    </>\n  );\n};\n\nexport default RecentlyCreatedSession;\n","/**\n * @generated SignedSource<<f6883a616899087b74a9d782ced06f4f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionCountDashboardItemRefetchQuery$variables = {\n  scopeId?: any | null | undefined;\n};\nexport type SessionCountDashboardItemRefetchQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionCountDashboardItemFragment\">;\n};\nexport type SessionCountDashboardItemRefetchQuery = {\n  response: SessionCountDashboardItemRefetchQuery$data;\n  variables: SessionCountDashboardItemRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"scopeId\"\n  }\n],\nv1 = {\n  \"kind\": \"Literal\",\n  \"name\": \"first\",\n  \"value\": 0\n},\nv2 = {\n  \"kind\": \"Variable\",\n  \"name\": \"scope_id\",\n  \"variableName\": \"scopeId\"\n},\nv3 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"count\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionCountDashboardItemRefetchQuery\",\n    \"selections\": [\n      {\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"scopeId\",\n            \"variableName\": \"scopeId\"\n          }\n        ],\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"SessionCountDashboardItemFragment\"\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionCountDashboardItemRefetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"myInteractive\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myBatch\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myInference\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myUpload\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"4e2a7d64eccfa5e512354e770190e051\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionCountDashboardItemRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionCountDashboardItemRefetchQuery(\\n  $scopeId: ScopeField\\n) {\\n  ...SessionCountDashboardItemFragment_3vJUag\\n}\\n\\nfragment SessionCountDashboardItemFragment_3vJUag on Query {\\n  myInteractive: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"interactive\\\\\\\"\\\", scope_id: $scopeId) {\\n    count\\n  }\\n  myBatch: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"batch\\\\\\\"\\\", scope_id: $scopeId) {\\n    count\\n  }\\n  myInference: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"inference\\\\\\\"\\\", scope_id: $scopeId) {\\n    count\\n  }\\n  myUpload: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"system\\\\\\\"\\\", scope_id: $scopeId) {\\n    count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"19e666cf346850c01eda18c6889928ae\";\n\nexport default node;\n","/**\n * @generated SignedSource<<cf99f63c7dc61f9285ea240ec223073c>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionCountDashboardItemFragment$data = {\n  readonly myBatch: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly myInference: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly myInteractive: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly myUpload: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly \" $fragmentType\": \"SessionCountDashboardItemFragment\";\n};\nexport type SessionCountDashboardItemFragment$key = {\n  readonly \" $data\"?: SessionCountDashboardItemFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionCountDashboardItemFragment\">;\n};\n\nimport SessionCountDashboardItemRefetchQuery_graphql from './SessionCountDashboardItemRefetchQuery.graphql';\n\nconst node: ReaderFragment = (function(){\nvar v0 = {\n  \"kind\": \"Literal\",\n  \"name\": \"first\",\n  \"value\": 0\n},\nv1 = {\n  \"kind\": \"Variable\",\n  \"name\": \"scope_id\",\n  \"variableName\": \"scopeId\"\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"count\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"argumentDefinitions\": [\n    {\n      \"defaultValue\": null,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"scopeId\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"refetch\": {\n      \"connection\": null,\n      \"fragmentPathInResult\": [],\n      \"operation\": SessionCountDashboardItemRefetchQuery_graphql\n    }\n  },\n  \"name\": \"SessionCountDashboardItemFragment\",\n  \"selections\": [\n    {\n      \"alias\": \"myInteractive\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": \"myBatch\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": \"myInference\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": \"myUpload\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Query\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"19e666cf346850c01eda18c6889928ae\";\n\nexport default node;\n","import BAIFetchKeyButton from './BAIFetchKeyButton';\nimport { theme } from 'antd';\nimport {\n  BAIBoardItemTitle,\n  BAIFlex,\n  BAIFlexProps,\n  BAIRowWrapWithDividers,\n  BAIStatistic,\n} from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useRefetchableFragment } from 'react-relay';\nimport { SessionCountDashboardItemFragment$key } from 'src/__generated__/SessionCountDashboardItemFragment.graphql';\n\ninterface SessionCountDashboardItemProps extends BAIFlexProps {\n  queryRef: SessionCountDashboardItemFragment$key;\n  isRefetching?: boolean;\n  title?: string;\n}\n\nconst SessionCountDashboardItem: React.FC<SessionCountDashboardItemProps> = ({\n  queryRef,\n  isRefetching,\n  title,\n  ...props\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n        fragment  SessionCountDashboardItemFragment on Query\n        @argumentDefinitions(\n          scopeId: { type: \"ScopeField\" }\n        ) \n        @refetchable(queryName: \"SessionCountDashboardItemRefetchQuery\") {\n          myInteractive: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n            scope_id: $scopeId\n          ) {\n            count\n          }\n          myBatch: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n            scope_id: $scopeId\n          ) {\n            count\n          }\n          myInference: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n            scope_id: $scopeId\n          ) {\n            count\n          }\n          myUpload: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n            scope_id: $scopeId\n          ) {\n            count\n          }\n        }\n      `,\n    queryRef,\n  );\n\n  const { myInteractive, myBatch, myInference, myUpload } = data || {};\n\n  const renderBAIPanelItem = (title: string, value: number) => (\n    <BAIStatistic title={title} current={value} progressMode=\"hidden\" />\n  );\n\n  return (\n    <BAIFlex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        paddingLeft: token.paddingXL,\n        paddingRight: token.padding,\n        ...props.style,\n      }}\n      {..._.omit(props, ['style'])}\n    >\n      {/* Fixed Title Section */}\n      <BAIBoardItemTitle\n        title={title}\n        extra={\n          <BAIFetchKeyButton\n            size=\"small\"\n            loading={isPendingRefetch || isRefetching}\n            value=\"\"\n            onChange={() => {\n              startRefetchTransition(() => {\n                refetch(\n                  {},\n                  {\n                    fetchPolicy: 'network-only',\n                  },\n                );\n              });\n            }}\n            type=\"text\"\n            style={{\n              backgroundColor: 'transparent',\n            }}\n          />\n        }\n      />\n      <BAIFlex direction=\"row\" wrap=\"wrap\" gap={'lg'}>\n        <BAIRowWrapWithDividers\n          style={{\n            paddingBlock: token.padding,\n          }}\n        >\n          {renderBAIPanelItem(\n            t('session.Interactive'),\n            myInteractive?.count || 0,\n          )}\n          {renderBAIPanelItem(t('session.Batch'), myBatch?.count || 0)}\n          {renderBAIPanelItem(t('session.Inference'), myInference?.count || 0)}\n          {renderBAIPanelItem(t('session.System'), myUpload?.count || 0)}\n        </BAIRowWrapWithDividers>\n      </BAIFlex>\n    </BAIFlex>\n  );\n};\n\nexport default SessionCountDashboardItem;\n"],"names":["_ref","fetchKey","onChangeFetchKey","t","useTranslation","token","theme","useToken","isPendingRefetch","startRefetchTransition","useTransition","_jsxs","BAIFlex","direction","align","style","paddingLeft","paddingXL","paddingRight","height","children","_jsx","BAIBoardItemTitle","title","tooltip","count","extra","BAIFetchKeyButton","size","loading","value","onChange","newFetchKey","type","backgroundColor","flex","overflowY","overflowX","AgentList","headerProps","display","tableProps","pagination","pageSize","showSizeChanger","node","queryRef","isRefetching","props","displayType","setDisplayType","useControllableValue","defaultValue","trigger","defaultValuePropName","data","refetch","useRefetchableFragment","_AgentStatsFragment","resourceSlotsDetails","useResourceSlotsDetails","agentStatsData","_resourceSlotsDetails","_resourceSlotsDetails2","totalResource","agentStats","cpu","memory","accelerators","free","used","capacity","cpuSlot","resourceSlotsInRG","memSlot","current","convertToNumber","total","metadata","human_readable_name","displayUnit","display_unit","processMemoryValue","_","omit","map","resourceSlot","key","freeValue","usedValue","capacityValue","compact","filter","item","paddingInline","paddingBottom","padding","Typography","Text","fontSize","fontSizeHeading5","fontWeight","fontWeightStrong","gap","wrap","Segmented","options","label","v","fetchPolicy","isLoading","Skeleton","active","ResourceStatistics","resourceData","progressMode","useStyles","createStyles","css","board","colorTextQuaternary","disableResize","disableMove","boardItems","colorBorderSecondary","disableBorder","_ref2","items","resizable","movable","bordered","BoardProps","styles","Board","className","classNames","empty","renderItem","_item$data","BoardItem","i18nStrings","dragHandleAriaLabel","dragHandleAriaDescription","resizeHandleAriaLabel","resizeHandleAriaDescription","content","id","createAnnouncement","operationAnnouncement","conflicts","disturbed","length","c","join","Boolean","liveAnnouncementDndStarted","operationType","liveAnnouncementDndItemReordered","operation","columns","placement","x","rows","y","liveAnnouncementDndItemResized","columnsConstraint","isMinimalColumnsReached","rowsConstraint","isMinimalRowsReached","sizeAnnouncement","width","liveAnnouncementDndItemInserted","liveAnnouncementDndCommitted","liveAnnouncementDndDiscarded","liveAnnouncementItemRemoved","op","navigationAriaLabel","navigationAriaDescription","navigationItemAriaLabel","v0","v1","v2","v3","v4","v5","v6","hash","_data$compute_session","sessionDetailId","setSessionDetailId","useQueryParam","StringParam","_RecentlyCreatedSessionFragment","_Fragment","SessionNodes","sessionsFrgmt","filterOutNullAndUndefined","compute_session_nodes","edges","e","onClickSessionName","session","toLocalId","disableSorter","BAIUnmountAfterClose","SessionDetailDrawer","open","sessionId","undefined","onClose","SessionCountDashboardItemRefetchQuery_graphql","_SessionCountDashboardItemFragment","myInteractive","myBatch","myInference","myUpload","renderBAIPanelItem","BAIStatistic","BAIRowWrapWithDividers","paddingBlock"],"sourceRoot":""}