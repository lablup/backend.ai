{"version":3,"file":"static/js/3575.96bb9b60.chunk.js","mappings":"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","sources":["components/ErrorLogList.tsx","components/TableColumnsSettingModal.tsx"],"sourcesContent":["import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport BAIModal from './BAIModal';\nimport Flex from './Flex';\nimport TableColumnsSettingModal from './TableColumnsSettingModal';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  DeleteOutlined,\n  SearchOutlined,\n  SettingOutlined,\n  LoadingOutlined,\n  ReloadOutlined,\n} from '@ant-design/icons';\nimport { useLocalStorageState } from 'ahooks';\nimport { Button, Typography, Table, Alert, Checkbox, Input, theme } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useState, useMemo, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ntype LogType = {\n  isError: boolean;\n  statusCode: any;\n  statusText: any;\n  title: any;\n  message: string;\n  requestMethod: string;\n  timestamp: string;\n  type: string;\n  requestUrl: string;\n  requestParameters?: string;\n  formattedTimestamp?: string; // for display only\n};\nconst ErrorLogList: React.FC<{\n  onChangeSearch?: (value: string) => void;\n}> = () => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isOpenClearLogsModal, setIsOpenClearLogsModal] = useState(false);\n  const [isOpenColumnsSetting, setIsOpenColumnsSetting] = useState(false);\n  const [checkedShowOnlyError, setCheckedShowOnlyError] = useState(false);\n  const [logSearch, setLogSearch] = useState('');\n  const [updateKey, checkUpdateKey] = useUpdatableState('first');\n  const [isPendingRefreshTransition, startRefreshTransition] = useTransition();\n  const [isPendingSearchTransition, startSearchTransition] = useTransition();\n  const [isPendingReset, startResetTransition] = useTransition();\n\n  useSuspendedBackendaiClient(); // TODO: remove this after react routing is stable. This is for remove flickering when browser reload\n  const columns: ColumnsType<LogType> = [\n    {\n      title: t('logs.TimeStamp'),\n      dataIndex: 'formattedTimeStamp',\n      key: 'timeStamp',\n      render: (value) => (\n        <div style={{ minWidth: 50 }}>\n          {_.isUndefined(value) ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n      fixed: 'left',\n    },\n    {\n      title: t('logs.Status'),\n      dataIndex: 'statusCode',\n      key: 'status',\n      render: (value, record) => (\n        <div style={{ minWidth: 50 }}>\n          {_.isUndefined(value) ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>\n              {value + ' ' + record.statusText}\n            </TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.ErrorTitle'),\n      dataIndex: 'title',\n      key: 'errorTitle',\n      render: (value) => (\n        <div style={{ minWidth: 50 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>\n              {_.toString(value)}\n              {/* set toString because sometime value type is object */}\n            </TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.ErrorMessage'),\n      dataIndex: 'message',\n      key: 'errorMessage',\n      render: (value) => (\n        <div style={{ minWidth: 70 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.ErrorType'),\n      dataIndex: 'type',\n      key: 'errorType',\n      render: (value) => (\n        <div style={{ minWidth: 60 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.Method'),\n      dataIndex: 'requestMethod',\n      key: 'method',\n      render: (value) => (\n        <div style={{ minWidth: 60 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.RequestUrl'),\n      dataIndex: 'requestUrl',\n      key: 'requestUrl',\n      render: (value) => (\n        <div style={{ minWidth: 60 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.Parameters'),\n      dataIndex: 'requestParameters',\n      key: 'requestParameter',\n      render: (value) => (\n        <div style={{ minWidth: 100 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  const [displayedColumnKeys, setDisplayedColumnKeys] = useLocalStorageState(\n    'backendaiwebui.ErrorLogList.displayedColumnKeys',\n    {\n      defaultValue: columns.map((column) => _.toString(column.key)),\n    },\n  );\n\n  const storageLogData = useMemo(() => {\n    const raw: LogType[] = JSON.parse(\n      localStorage.getItem('backendaiwebui.logs') || '[]',\n    );\n    return _.map(raw, (log) => {\n      return {\n        ...log,\n        formattedTimeStamp: dayjs(log.timestamp).format('ll LTS'),\n      };\n    });\n    // Only update when updateKey is changed\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [updateKey]);\n\n  const filteredLogData = useMemo(() => {\n    if (_.isEmpty(logSearch)) return storageLogData;\n    const regExp = new RegExp(`${_.escapeRegExp(logSearch)}`, 'i');\n    return _.filter(storageLogData, (log) => {\n      return _.some(log, (value, key) => {\n        if (key === 'timestamp') {\n          // timestamp is not display in table, use formattedTimestamp instead\n          return false;\n        }\n        return regExp.test(_.toString(value));\n      });\n    });\n  }, [logSearch, storageLogData]);\n\n  return (\n    <Flex direction=\"column\" align=\"stretch\">\n      <Flex\n        direction=\"row\"\n        justify=\"between\"\n        wrap=\"wrap\"\n        gap={'xs'}\n        style={{\n          padding: token.paddingContentVertical,\n          paddingLeft: token.paddingContentHorizontalSM,\n          paddingRight: token.paddingContentHorizontalSM,\n        }}\n      >\n        <Flex direction=\"column\" align=\"start\">\n          <Typography.Title level={4} style={{ margin: 0, padding: 0 }}>\n            {t('logs.LogMessages')}\n          </Typography.Title>\n          <Typography.Text type=\"secondary\">\n            {t('logs.UpTo3000Logs')}\n          </Typography.Text>\n        </Flex>\n        <Flex direction=\"row\" gap={'xs'} wrap=\"wrap\" style={{ flexShrink: 1 }}>\n          <Flex gap={'xs'}>\n            <Input\n              allowClear\n              prefix={<SearchOutlined />}\n              placeholder={t('logs.SearchLogs')}\n              onChange={(e) => {\n                startSearchTransition(() => setLogSearch(e.target.value));\n              }}\n              style={{\n                width: 200,\n              }}\n            />\n            <Checkbox\n              onChange={(e) => setCheckedShowOnlyError(e.target.checked)}\n            >\n              {t('logs.ShowOnlyError')}\n            </Checkbox>\n          </Flex>\n          <Flex gap={'xs'}>\n            <Button\n              icon={<ReloadOutlined />}\n              loading={isPendingRefreshTransition}\n              onClick={() => {\n                startRefreshTransition(() => checkUpdateKey());\n              }}\n            >\n              {t('button.Refresh')}\n            </Button>\n            <Button\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsOpenClearLogsModal(true);\n              }}\n            >\n              {t('button.ClearLogs')}\n            </Button>\n          </Flex>\n        </Flex>\n      </Flex>\n      <Table\n        pagination={{\n          showSizeChanger: false,\n          style: {\n            marginBottom: 0,\n          },\n        }}\n        loading={\n          isPendingSearchTransition\n            ? {\n                indicator: <LoadingOutlined />,\n              }\n            : false\n        }\n        scroll={{ x: 'max-content', y: 'calc(100vh - 400px)' }}\n        dataSource={\n          checkedShowOnlyError\n            ? _.filter(filteredLogData, (log) => {\n                return log.isError;\n              })\n            : (filteredLogData as LogType[])\n        }\n        columns={columns.filter((column) =>\n          displayedColumnKeys?.includes(_.toString(column.key)),\n        )}\n        onRow={(record) => {\n          return {\n            style: { color: record.isError ? token.colorError : '' },\n          };\n        }}\n      />\n      <Flex\n        justify=\"end\"\n        style={{\n          paddingRight: token.paddingXS,\n        }}\n      >\n        <Button\n          type=\"text\"\n          icon={<SettingOutlined />}\n          onClick={() => {\n            setIsOpenColumnsSetting(true);\n          }}\n        />\n      </Flex>\n      <BAIModal\n        open={isOpenClearLogsModal}\n        title={t('dialog.warning.LogDeletion')}\n        okText={t('button.Delete')}\n        okButtonProps={{ danger: true }}\n        confirmLoading={isPendingReset}\n        onOk={() => {\n          startResetTransition(() => {\n            localStorage.removeItem('backendaiwebui.logs');\n            checkUpdateKey();\n            setIsOpenClearLogsModal(false);\n          });\n        }}\n        cancelText={t('button.Cancel')}\n        onCancel={() => setIsOpenClearLogsModal(false)}\n      >\n        <Alert message={t('dialog.warning.CannotBeUndone')} type=\"warning\" />\n      </BAIModal>\n      <TableColumnsSettingModal\n        open={isOpenColumnsSetting}\n        onRequestClose={(values) => {\n          values?.selectedColumnKeys &&\n            setDisplayedColumnKeys(values?.selectedColumnKeys);\n          setIsOpenColumnsSetting(false);\n        }}\n        columns={columns}\n        displayedColumnKeys={displayedColumnKeys ? displayedColumnKeys : []}\n      />\n    </Flex>\n  );\n};\n\nexport default ErrorLogList;\n","import BAIModal, { BAIModalProps } from './BAIModal';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Checkbox, Input, theme, Form } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { FormInstance } from 'antd/lib';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface FormValues {\n  searchInput?: string;\n  selectedColumnKeys?: string[];\n}\n\ninterface TableColumnsSettingProps extends BAIModalProps {\n  open: boolean;\n  onRequestClose: (formValues?: FormValues) => void;\n  columns: ColumnsType<any>;\n  displayedColumnKeys?: string[];\n}\n\nconst TableColumnsSettingModal: React.FC<TableColumnsSettingProps> = ({\n  open,\n  onRequestClose,\n  columns,\n  displayedColumnKeys,\n  ...modalProps\n}) => {\n  const formRef = useRef<FormInstance>(null);\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const onChangeTitleToString: any = (element: any) => {\n    const text = React.Children.map(element.props.children, (child) => {\n      if (typeof child === 'string') {\n        return child;\n      }\n    });\n    return text;\n  };\n\n  const columnOptions = columns.map((column) => {\n    if (typeof column.title === 'string') {\n      return {\n        label: column.title,\n        value: _.toString(column.key),\n      };\n    } else if (typeof column.title === 'object' && 'props' in column.title!) {\n      return {\n        label: onChangeTitleToString(column.title),\n        value: _.toString(column.key),\n      };\n    } else {\n      return {\n        label: undefined,\n        value: _.toString(column.key),\n      };\n    }\n  });\n\n  return (\n    <BAIModal\n      title={t('table.SettingTable')}\n      open={open}\n      destroyOnClose\n      centered\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            onRequestClose(values);\n          })\n          .catch(() => {});\n      }}\n      onCancel={() => {\n        onRequestClose();\n      }}\n      {...modalProps}\n    >\n      <Form\n        ref={formRef}\n        preserve={false}\n        initialValues={{\n          selectedColumnKeys:\n            displayedColumnKeys ||\n            columnOptions.map((columnOption) => columnOption.value),\n        }}\n        layout=\"vertical\"\n      >\n        <Form.Item\n          name=\"searchInput\"\n          label={t('table.SelectColumnToDisplay')}\n          style={{ marginBottom: 0 }}\n        >\n          <Input\n            prefix={<SearchOutlined />}\n            style={{ marginBottom: token.marginSM }}\n            placeholder={t('table.SearchTableColumn')}\n          />\n        </Form.Item>\n        <Form.Item\n          noStyle\n          shouldUpdate={(prev, cur) => prev.searchInput !== cur.searchInput}\n        >\n          {({ getFieldValue }) => {\n            const searchKeyword = getFieldValue('searchInput')\n              ? _.toLower(getFieldValue('searchInput'))\n              : undefined;\n\n            const filteredColumns = columnOptions.map((columnOption) =>\n              _.toLower(_.toString(columnOption.label)).includes(\n                searchKeyword || '',\n              )\n                ? columnOption\n                : {\n                    ...columnOption,\n                    style: {\n                      display: 'none',\n                    },\n                  },\n            );\n            return (\n              <Form.Item\n                name=\"selectedColumnKeys\"\n                style={{\n                  height: 220,\n                  overflowY: 'auto',\n                }}\n              >\n                <Checkbox.Group\n                  options={filteredColumns}\n                  style={{ flexDirection: 'column' }}\n                />\n              </Form.Item>\n            );\n          }}\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default TableColumnsSettingModal;\n"],"names":["ErrorLogList","t","useTranslation","token","theme","useToken","isOpenClearLogsModal","setIsOpenClearLogsModal","useState","isOpenColumnsSetting","setIsOpenColumnsSetting","checkedShowOnlyError","setCheckedShowOnlyError","logSearch","setLogSearch","updateKey","checkUpdateKey","useUpdatableState","isPendingRefreshTransition","startRefreshTransition","useTransition","isPendingSearchTransition","startSearchTransition","isPendingReset","startResetTransition","useSuspendedBackendaiClient","columns","title","dataIndex","key","render","value","_jsx","style","minWidth","children","_","TextHighlighter","keyword","fixed","record","statusText","displayedColumnKeys","setDisplayedColumnKeys","useLocalStorageState","defaultValue","map","column","storageLogData","useMemo","raw","JSON","parse","localStorage","getItem","log","formattedTimeStamp","dayjs","timestamp","format","filteredLogData","regExp","RegExp","test","_jsxs","Flex","direction","align","justify","wrap","gap","padding","paddingContentVertical","paddingLeft","paddingContentHorizontalSM","paddingRight","Typography","Title","level","margin","Text","type","flexShrink","Input","allowClear","prefix","SearchOutlined","placeholder","onChange","e","target","width","Checkbox","checked","Button","icon","ReloadOutlined","loading","onClick","danger","DeleteOutlined","Table","pagination","showSizeChanger","marginBottom","indicator","LoadingOutlined","scroll","x","y","dataSource","isError","filter","includes","onRow","color","colorError","paddingXS","SettingOutlined","BAIModal","open","okText","okButtonProps","confirmLoading","onOk","removeItem","cancelText","onCancel","Alert","message","TableColumnsSettingModal","onRequestClose","values","selectedColumnKeys","_ref","modalProps","formRef","useRef","columnOptions","label","element","React","props","child","undefined","destroyOnClose","centered","_formRef$current","current","validateFields","then","catch","Form","ref","preserve","initialValues","columnOption","layout","Item","name","marginSM","noStyle","shouldUpdate","prev","cur","searchInput","_ref2","getFieldValue","searchKeyword","filteredColumns","display","height","overflowY","Group","options","flexDirection"],"sourceRoot":""}