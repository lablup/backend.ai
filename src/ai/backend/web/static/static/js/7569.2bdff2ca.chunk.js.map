{"version":3,"file":"static/js/7569.2bdff2ca.chunk.js","mappings":"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","sources":["__generated__/FileUploadManagerQuery.graphql.ts","components/FileUploadManager.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<4fd862927d80e3a68ed0b64141ce3ac5>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type FileUploadManagerQuery$variables = {\n  vfolderGlobalId: string;\n};\nexport type FileUploadManagerQuery$data = {\n  readonly vfolder_node: {\n    readonly name: string;\n  } | null | undefined;\n};\nexport type FileUploadManagerQuery = {\n  response: FileUploadManagerQuery$data;\n  variables: FileUploadManagerQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"vfolderGlobalId\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"vfolderGlobalId\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"FileUploadManagerQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"VirtualFolderNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"vfolder_node\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"RequiredField\",\n            \"field\": (v2/*: any*/),\n            \"action\": \"THROW\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"FileUploadManagerQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"VirtualFolderNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"vfolder_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"da162cec4ce77cdb6fcdd31a87d2f135\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"FileUploadManagerQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query FileUploadManagerQuery(\\n  $vfolderGlobalId: String!\\n) {\\n  vfolder_node(id: $vfolderGlobalId) {\\n    name\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"1f3a6bd97dae542b3c85605ab9a61d03\";\n\nexport default node;\n","import { useSetBAINotification } from '../hooks/useBAINotification';\nimport { RcFile } from 'antd/es/upload';\nimport { toGlobalId, useConnectedBAIClient } from 'backend.ai-ui';\nimport { atom, useAtom, useSetAtom } from 'jotai';\nimport { atomFamily } from 'jotai/utils';\nimport _ from 'lodash';\nimport PQueue from 'p-queue';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\nimport { FileUploadManagerQuery } from 'src/__generated__/FileUploadManagerQuery.graphql';\nimport { useSuspendedBackendaiClient } from 'src/hooks';\nimport * as tus from 'tus-js-client';\n\ntype UploadRequest = {\n  vFolderId: string;\n  vFolderName: string;\n  uploadFilesNames: Array<string>;\n  startFunctions: Array<\n    (callbacks?: {\n      onProgress?: (\n        bytesUploaded: number,\n        bytesTotal: number,\n        fileName: string,\n      ) => void;\n    }) => Promise<string>\n  >;\n};\ntype UploadStatus = {\n  vFolderName: string;\n  pending: Array<string>;\n  completed: Array<string>;\n  failed: Array<string>;\n};\ntype UploadStatusMap = {\n  [vFolderId: string]: UploadStatus;\n};\n\nconst uploadRequestAtom = atom<UploadRequest[]>([]);\nconst uploadStatusAtom = atom<UploadStatusMap>({});\nconst uploadStatusAtomFamily = atomFamily((vFolderId: string) => {\n  return atom(\n    (get) => get(uploadStatusAtom)[vFolderId],\n    (get, set, newStatus: UploadStatus) => {\n      const prev = get(uploadStatusAtom);\n      set(uploadStatusAtom, {\n        ...prev,\n        [vFolderId]: newStatus,\n      });\n    },\n  );\n});\nconst useUploadStatusAtomStatus = (\n  vFolderId: string,\n): [UploadStatus, (newStatus: UploadStatus) => void] => {\n  return useAtom(uploadStatusAtomFamily(vFolderId));\n};\n\nconst FileUploadManager: React.FC = () => {\n  const { t } = useTranslation();\n  const { upsertNotification } = useSetBAINotification();\n  const baiClient = useSuspendedBackendaiClient();\n  const [uploadRequests, setUploadRequests] = useAtom(uploadRequestAtom);\n  const [uploadStatus, setUploadStatus] = useAtom(uploadStatusAtom);\n  const queue = new PQueue({ concurrency: 1 });\n\n  useEffect(() => {\n    if (uploadRequests.length === 0 || !baiClient) return;\n\n    uploadRequests.forEach((uploadRequest) => {\n      const { vFolderId, vFolderName, uploadFilesNames, startFunctions } =\n        uploadRequest;\n\n      setUploadStatus((prev) => ({\n        ...prev,\n        [vFolderId]: {\n          vFolderName,\n          pending: [...(prev[vFolderId]?.pending || []), ...uploadFilesNames],\n          completed: [],\n          failed: [],\n        },\n      }));\n\n      upsertNotification({\n        key: 'upload:' + vFolderId,\n        open: true,\n        message: t('explorer.UploadToFolder', {\n          folderName: vFolderName,\n        }),\n        backgroundTask: {\n          status: 'pending',\n          percent: 0,\n          onChange: {\n            pending: t('explorer.ProcessingUpload'),\n          },\n        },\n        duration: 0,\n      });\n\n      startFunctions.forEach((startFunction) => {\n        queue.add(async () => {\n          await startFunction({\n            onProgress: (bytesUploaded, bytesTotal, fileName) => {\n              setUploadStatus((prev) => {\n                const remainingFiles = prev[vFolderId]?.pending || [];\n                upsertNotification({\n                  key: 'upload:' + vFolderId,\n                  message: `${t('explorer.UploadToFolder', {\n                    folderName: vFolderName,\n                  })}${remainingFiles.length > 1 ? ` (${remainingFiles.length})` : ''}`,\n                  backgroundTask: {\n                    status: 'pending',\n                    percent: Math.round((bytesUploaded / bytesTotal) * 100) - 1,\n                    onChange: {\n                      pending: t('explorer.FileInProgress', {\n                        fileName: fileName,\n                      }),\n                    },\n                  },\n                });\n\n                return prev;\n              });\n            },\n          })\n            .then((fileName: string) => {\n              setUploadStatus((prev) => ({\n                ...prev,\n                [vFolderId]: {\n                  ...prev[vFolderId],\n                  pending: prev[vFolderId].pending.filter(\n                    (f) => f !== fileName,\n                  ),\n                  completed: [...prev[vFolderId].completed, fileName],\n                },\n              }));\n            })\n            .catch((fileName: string) => {\n              setUploadStatus((prev) => ({\n                ...prev,\n                [vFolderId]: {\n                  ...prev[vFolderId],\n                  pending: prev[vFolderId].pending.filter(\n                    (f) => f !== fileName,\n                  ),\n                  failed: [...prev[vFolderId].failed, fileName],\n                },\n              }));\n            });\n        });\n      });\n    });\n    setUploadRequests([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [uploadRequests]);\n\n  useEffect(() => {\n    Object.entries(uploadStatus).forEach(([vFolderId, status]) => {\n      if (!_.isEmpty(status?.pending)) return;\n\n      if (!_.isEmpty(status?.failed)) {\n        upsertNotification({\n          key: 'upload:' + vFolderId,\n          open: true,\n          message: t('explorer.UploadFailed', {\n            folderName: status?.vFolderName,\n          }),\n          backgroundTask: {\n            status: 'rejected',\n            percent: 0,\n            onChange: {\n              rejected: t('explorer.FileUploadFailed', {\n                folderName: status?.vFolderName,\n              }),\n            },\n          },\n          extraDescription: _.join(status?.failed, ', '),\n        });\n      } else if (!_.isEmpty(status?.completed)) {\n        upsertNotification({\n          key: 'upload:' + vFolderId,\n          open: true,\n          message: t('explorer.SuccessfullyUploadedToFolder', {\n            folderName: status?.vFolderName,\n          }),\n          backgroundTask: {\n            status: 'resolved',\n            percent: 100,\n            onChange: {\n              resolved: ' ',\n            },\n          },\n          duration: 3,\n        });\n        setUploadStatus((prev) => ({\n          ...prev,\n          [vFolderId]: {\n            ...prev[vFolderId],\n            completed: [],\n          },\n        }));\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [uploadStatus]);\n\n  return null;\n};\n\nexport default FileUploadManager;\n\nexport const useFileUploadManager = (vFolderId: string) => {\n  const baiClient = useConnectedBAIClient();\n  const { t } = useTranslation();\n  const { upsertNotification } = useSetBAINotification();\n  const [uploadStatus, setUploadStatus] = useUploadStatusAtomStatus(vFolderId);\n  const setUploadRequests = useSetAtom(uploadRequestAtom);\n\n  const { vfolder_node } = useLazyLoadQuery<FileUploadManagerQuery>(\n    graphql`\n      query FileUploadManagerQuery($vfolderGlobalId: String!) {\n        vfolder_node(id: $vfolderGlobalId) {\n          name @required(action: THROW)\n        }\n      }\n    `,\n    {\n      vfolderGlobalId: toGlobalId('VirtualFolderNode', vFolderId),\n    },\n    {\n      fetchPolicy: vFolderId ? 'network-only' : 'store-only',\n    },\n  );\n\n  const validateUploadRequest = (\n    requestedFiles: Array<RcFile>,\n    vfolderId: string,\n  ) => {\n    const maxPossibleFileSize = baiClient._config.maxFileUploadSize;\n    const maxRequestFileSize = _.map(\n      requestedFiles,\n      (file) => file.size,\n    ).reduce((max, size) => Math.max(max, size), 0);\n\n    if (maxPossibleFileSize > 0 && maxRequestFileSize > maxPossibleFileSize) {\n      upsertNotification({\n        open: true,\n        key: 'upload:' + vfolderId,\n        message: t('explorer.UploadFailed', {\n          folderName: vfolder_node?.name ?? '',\n        }),\n        description: t('data.explorer.FileUploadSizeLimit'),\n        duration: 3,\n        toText: t('data.folders.OpenAFolder'),\n        to: {\n          search: new URLSearchParams({\n            folder: vfolderId,\n          }).toString(),\n        },\n      });\n      return false;\n    }\n    return true;\n  };\n\n  const uploadFiles = async (\n    files: RcFile[],\n    vfolderId: string,\n    currentPath: string,\n  ) => {\n    if (!validateUploadRequest(files, vfolderId)) return;\n\n    let uploadFileNames: Array<string> = [];\n    const startUploadFunctionMap = _.map(files, (file) => {\n      uploadFileNames.push(file.webkitRelativePath || file.name);\n      return async (callbacks?: {\n        onProgress?: (\n          bytesUploaded: number,\n          bytesTotal: number,\n          fileName: string,\n        ) => void;\n      }) => {\n        const uploadPath = [currentPath, file.webkitRelativePath || file.name]\n          .filter(Boolean)\n          .join('/');\n        const uploadUrl: string = await baiClient.vfolder.create_upload_session(\n          uploadPath,\n          file,\n          vfolderId,\n        );\n\n        return new Promise<string>((resolve, reject) => {\n          const upload = new tus.Upload(file, {\n            endpoint: uploadUrl,\n            uploadUrl: uploadUrl,\n            retryDelays: [0, 3000, 5000, 10000, 20000],\n            chunkSize: getOptimalChunkSize(file.size),\n            storeFingerprintForResuming: false, // Disable localStorage storage\n            metadata: {\n              filename: file.name,\n              filetype: file.type,\n            },\n            onProgress: (bytesUploaded, bytesTotal) => {\n              callbacks?.onProgress?.(bytesUploaded, bytesTotal, file.name);\n            },\n            onSuccess: () => {\n              resolve(file.webkitRelativePath || file.name);\n            },\n            onError: () => {\n              reject(file.webkitRelativePath || file.name);\n            },\n          });\n          upload.start();\n        });\n      };\n    });\n\n    const uploadRequestInfo: UploadRequest = {\n      vFolderId: vfolderId,\n      vFolderName: vfolder_node?.name ?? '',\n      uploadFilesNames: uploadFileNames,\n      startFunctions: startUploadFunctionMap,\n    };\n    setUploadRequests((prev) => [...prev, uploadRequestInfo]);\n  };\n\n  return {\n    uploadStatus,\n    setUploadStatus,\n    uploadFiles,\n  };\n};\n\nconst getOptimalChunkSize = (fileSize: number): number => {\n  const MB = 1024 * 1024;\n\n  if (fileSize >= 5 * 1024 * MB) {\n    return 200 * MB;\n  } else if (fileSize >= 1 * 1024 * MB) {\n    return 100 * MB;\n  } else if (fileSize >= 100 * MB) {\n    return 50 * MB;\n  } else {\n    return 15 * MB;\n  }\n};\n"],"names":["node","v0","v1","v2","hash","uploadRequestAtom","atom","uploadStatusAtom","uploadStatusAtomFamily","atomFamily","vFolderId","get","set","newStatus","prev","FileUploadManager","t","useTranslation","upsertNotification","useSetBAINotification","baiClient","useSuspendedBackendaiClient","uploadRequests","setUploadRequests","useAtom","uploadStatus","setUploadStatus","queue","PQueue","concurrency","useEffect","length","forEach","uploadRequest","vFolderName","uploadFilesNames","startFunctions","_prev$vFolderId","pending","completed","failed","key","open","message","folderName","backgroundTask","status","percent","onChange","duration","startFunction","add","async","onProgress","bytesUploaded","bytesTotal","fileName","_prev$vFolderId2","remainingFiles","Math","round","then","filter","f","catch","Object","entries","_ref","_","resolved","rejected","extraDescription","useFileUploadManager","useConnectedBAIClient","useUploadStatusAtomStatus","useSetAtom","vfolder_node","useLazyLoadQuery","_FileUploadManagerQuery","vfolderGlobalId","toGlobalId","fetchPolicy","uploadFiles","files","vfolderId","currentPath","_vfolder_node$name2","validateUploadRequest","requestedFiles","maxPossibleFileSize","_config","maxFileUploadSize","maxRequestFileSize","file","size","reduce","max","_vfolder_node$name","name","description","toText","to","search","URLSearchParams","folder","toString","uploadFileNames","startUploadFunctionMap","push","webkitRelativePath","uploadPath","Boolean","join","uploadUrl","vfolder","create_upload_session","Promise","resolve","reject","tus","endpoint","retryDelays","chunkSize","getOptimalChunkSize","storeFingerprintForResuming","metadata","filename","filetype","type","_callbacks$onProgress","callbacks","call","onSuccess","onError","start","uploadRequestInfo","fileSize","MB"],"sourceRoot":""}