{"version":3,"file":"static/js/2323.cf352bc2.chunk.js","mappings":"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","sources":["components/AgentDetailModal.tsx","components/AgentList.tsx","components/AgentSettingModal.tsx","components/DoubleTag.tsx","components/__generated__/AgentDetailModalFragment.graphql.ts","components/__generated__/AgentListQuery.graphql.ts","components/__generated__/AgentSettingModalFragment.graphql.ts","components/__generated__/AgentSettingModalMutation.graphql.ts","pages/ResourcesPage.tsx","../node_modules/.pnpm/antd@5.22.2_date-fns@2.30.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/col/index.js","../node_modules/.pnpm/antd@5.22.2_date-fns@2.30.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/row/index.js"],"sourcesContent":["import {\n  convertBinarySizeUnit,\n  convertDecimalSizeUnit,\n  toFixedFloorWithoutTrailingZeros,\n} from '../helper';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport Flex from './Flex';\nimport { AgentDetailModalFragment$key } from './__generated__/AgentDetailModalFragment.graphql';\nimport { Col, Row, theme, Typography } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ntype LiveStat = {\n  capacity: string;\n  current: string;\n  pct: string;\n  'stats.avg': string;\n  'stats.max': string;\n  unit_hint: string;\n};\n\ninterface AgentDetailModalProps extends BAIModalProps {\n  agentDetailModalFrgmt?: AgentDetailModalFragment$key | null;\n  onRequestClose: () => void;\n}\n\nconst AgentDetailModal: React.FC<AgentDetailModalProps> = ({\n  agentDetailModalFrgmt = null,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n  const agent = useFragment(\n    graphql`\n      fragment AgentDetailModalFragment on Agent {\n        id\n        live_stat\n        available_slots\n        occupied_slots\n        cpu_cur_pct\n        mem_cur_bytes\n      }\n    `,\n    agentDetailModalFrgmt,\n  );\n  const parsedLiveStat = JSON.parse(agent?.live_stat || '{}');\n  const parsedAvailableSlots = JSON.parse(agent?.available_slots || '{}');\n\n  return (\n    <BAIModal\n      {...modalProps}\n      centered\n      title={`${t('agent.DetailedInformation')}: ${agent?.id}`}\n      onCancel={onRequestClose}\n      destroyOnClose\n      footer={null}\n    >\n      <Flex direction=\"column\" align=\"stretch\" gap={'md'}>\n        <Row gutter={[24, 24]}>\n          <Col xs={24} sm={12}>\n            {parsedLiveStat?.devices?.cpu_util ? (\n              <Flex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                <Typography.Title level={5} style={{ marginTop: 0 }}>\n                  {mergedResourceSlots?.cpu?.human_readable_name}\n                </Typography.Title>\n                {_.map(parsedLiveStat?.devices?.cpu_util, (value, key) => (\n                  <Flex justify=\"between\">\n                    <Typography.Text\n                      key={key}\n                      type=\"secondary\"\n                      style={{ flex: 0.5 }}\n                    >\n                      {mergedResourceSlots?.cpu?.human_readable_name}\n                      {key}\n                    </Typography.Text>\n                    <BAIProgressWithLabel\n                      percent={value?.pct}\n                      valueLabel={\n                        toFixedFloorWithoutTrailingZeros(value?.pct, 1) + '%'\n                      }\n                    />\n                  </Flex>\n                ))}\n              </Flex>\n            ) : null}\n          </Col>\n          <Col xs={24} sm={12}>\n            {parsedAvailableSlots?.mem ? (\n              <Flex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                <Typography.Title level={5} style={{ marginTop: 0 }}>\n                  {mergedResourceSlots?.mem?.human_readable_name}\n                </Typography.Title>\n                <BAIProgressWithLabel\n                  percent={\n                    (_.toNumber(\n                      convertBinarySizeUnit(\n                        _.toString(agent?.mem_cur_bytes),\n                        'g',\n                      )?.number,\n                    ) /\n                      _.toNumber(\n                        convertBinarySizeUnit(parsedAvailableSlots?.mem, 'g')\n                          ?.number,\n                      )) *\n                      100 || 0\n                  }\n                  valueLabel={`${\n                    convertBinarySizeUnit(_.toString(agent?.mem_cur_bytes), 'g')\n                      ?.numberUnit\n                  }iB / ${convertBinarySizeUnit(parsedAvailableSlots?.mem, 'g')?.numberUnit}iB`}\n                />\n              </Flex>\n            ) : null}\n            {parsedLiveStat?.node ? (\n              <Flex direction=\"column\" gap=\"xxs\" align=\"start\">\n                <Typography.Title level={5} style={{ marginTop: 0 }}>\n                  {t('session.launcher.Network')}\n                </Typography.Title>\n                <Flex gap=\"xl\">\n                  <Typography.Text>TX:</Typography.Text>\n                  <Typography.Text>\n                    {\n                      convertDecimalSizeUnit(\n                        parsedLiveStat?.node?.net_tx?.current,\n                        'm',\n                        2,\n                      )?.numberUnit\n                    }\n                    B\n                  </Typography.Text>\n                </Flex>\n                <Flex gap=\"xl\">\n                  <Typography.Text>RX:</Typography.Text>\n                  <Typography.Text>\n                    {\n                      convertDecimalSizeUnit(\n                        parsedLiveStat?.node?.net_rx?.current,\n                        'm',\n                        2,\n                      )?.numberUnit\n                    }\n                    B\n                  </Typography.Text>\n                </Flex>\n              </Flex>\n            ) : null}\n          </Col>\n        </Row>\n        <Row gutter={[24, 24]} style={{ marginBottom: token.marginSM }}>\n          {_.map(_.keys(parsedLiveStat?.devices), (key) => {\n            if (['cpu_util', 'mem', 'disk', 'net_rx', 'net_tx'].includes(key)) {\n              return null;\n            } else if (_.includes(key, '_util')) {\n              const deviceName = _.split(key, '_')[0] + '.device';\n              return (\n                <Col xs={24} sm={12}>\n                  <Flex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                    <Typography.Title level={5} style={{ marginTop: 0 }}>\n                      {mergedResourceSlots?.[deviceName]?.human_readable_name}{' '}\n                      {t('session.Utilization')}\n                    </Typography.Title>\n                    {_.map(\n                      _.toPairs(parsedLiveStat?.devices[key]),\n                      (value, index) => (\n                        <Flex justify=\"between\">\n                          <Typography.Text\n                            key={index}\n                            type=\"secondary\"\n                            style={{ flex: 0.5 }}\n                          >\n                            {\n                              mergedResourceSlots?.[deviceName]\n                                ?.human_readable_name\n                            }\n                            {index}\n                          </Typography.Text>\n                          <BAIProgressWithLabel\n                            percent={_.toFinite((value?.[1] as LiveStat)?.pct)}\n                            valueLabel={\n                              toFixedFloorWithoutTrailingZeros(\n                                (value?.[1] as LiveStat)?.pct,\n                                1,\n                              ) + '%'\n                            }\n                          />\n                        </Flex>\n                      ),\n                    )}\n                  </Flex>\n                </Col>\n              );\n            } else if (_.includes(key, '_mem')) {\n              const deviceName = _.split(key, '_')[0] + '.device';\n              return (\n                <Col xs={24} sm={12}>\n                  <Flex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                    <Typography.Title level={5} style={{ marginTop: 0 }}>\n                      {mergedResourceSlots?.[deviceName]?.human_readable_name}{' '}\n                      {t('session.launcher.Memory')}\n                    </Typography.Title>\n                    {_.map(\n                      _.toPairs(parsedLiveStat?.devices[key]),\n                      (value, index) => (\n                        <Flex justify=\"between\">\n                          <Typography.Text\n                            key={index}\n                            type=\"secondary\"\n                            style={{ flex: 0.5 }}\n                          >\n                            {\n                              mergedResourceSlots?.[deviceName]\n                                ?.human_readable_name\n                            }\n                            {index}\n                          </Typography.Text>\n                          <BAIProgressWithLabel\n                            percent={_.toFinite((value?.[1] as LiveStat)?.pct)}\n                            valueLabel={\n                              toFixedFloorWithoutTrailingZeros(\n                                (value?.[1] as LiveStat)?.pct,\n                                1,\n                              ) + '%'\n                            }\n                          />\n                        </Flex>\n                      ),\n                    )}\n                  </Flex>\n                </Col>\n              );\n            }\n          })}\n        </Row>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default AgentDetailModal;\n","import {\n  bytesToGB,\n  convertBinarySizeUnit,\n  filterNonNullItems,\n  toFixedFloorWithoutTrailingZeros,\n  transformSorterToOrderString,\n} from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { ResourceSlotName, useResourceSlotsDetails } from '../hooks/backendai';\nimport { useBAIPaginationOptionState } from '../hooks/reactPaginationQueryOptions';\nimport { useHiddenColumnKeysSetting } from '../hooks/useHiddenColumnKeysSetting';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport AgentDetailModal from './AgentDetailModal';\nimport AgentSettingModal from './AgentSettingModal';\nimport BAIIntervalView from './BAIIntervalView';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport BAIPropertyFilter from './BAIPropertyFilter';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\nimport { ResourceTypeIcon } from './ResourceNumber';\nimport TableColumnsSettingModal from './TableColumnsSettingModal';\nimport { AgentDetailModalFragment$key } from './__generated__/AgentDetailModalFragment.graphql';\nimport {\n  AgentListQuery,\n  AgentListQuery$data,\n} from './__generated__/AgentListQuery.graphql';\nimport { AgentSettingModalFragment$key } from './__generated__/AgentSettingModalFragment.graphql';\nimport {\n  CheckCircleOutlined,\n  InfoCircleOutlined,\n  LoadingOutlined,\n  MinusCircleOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport { useToggle } from 'ahooks';\nimport {\n  Button,\n  Segmented,\n  Table,\n  TableProps,\n  Tag,\n  theme,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { AnyObject } from 'antd/es/_util/type';\nimport { ColumnsType, ColumnType } from 'antd/es/table';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useState, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ntype Agent = NonNullable<AgentListQuery$data['agent_list']>['items'][number];\n\ninterface AgentListProps {\n  containerStyle?: React.CSSProperties;\n  tableProps?: Omit<TableProps, 'dataSource'>;\n}\n\nconst AgentList: React.FC<AgentListProps> = ({\n  containerStyle,\n  tableProps,\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n  const [currentAgentInfo, setCurrentAgentInfo] =\n    useState<AgentDetailModalFragment$key | null>();\n  const [currentSettingAgent, setCurrentSettingAgent] =\n    useState<AgentSettingModalFragment$key | null>();\n  const [visibleColumnSettingModal, { toggle: toggleColumnSettingModal }] =\n    useToggle();\n  const baiClient = useSuspendedBackendaiClient();\n  const [isPendingStatusFetch, startStatusFetchTransition] = useTransition();\n  const [isPendingRefresh, startRefreshTransition] = useTransition();\n  const [isPendingPageChange, startPageChangeTransition] = useTransition();\n  const [selectedStatus, setSelectedStatus] = useState('ALIVE');\n  const [optimisticSelectedStatus, setOptimisticSelectedStatus] =\n    useState(selectedStatus);\n  const [isPendingFilter, startFilterTransition] = useTransition();\n\n  const [filterString, setFilterString] = useState<string>();\n\n  const {\n    baiPaginationOption,\n    tablePaginationOption,\n    setTablePaginationOption,\n  } = useBAIPaginationOptionState({\n    current: 1,\n    pageSize: 20,\n  });\n  const [order, setOrder] = useState<string>();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [fetchPolicy] = useState<FetchPolicy>('network-only');\n  const updateFetchKeyInTransition = () =>\n    startRefreshTransition(() => {\n      updateFetchKey();\n    });\n\n  const { agent_list } = useLazyLoadQuery<AgentListQuery>(\n    graphql`\n      query AgentListQuery(\n        $limit: Int!\n        $offset: Int!\n        $filter: String\n        $status: String\n        $order: String\n      ) {\n        agent_list(\n          limit: $limit\n          offset: $offset\n          filter: $filter\n          status: $status\n          order: $order\n        ) {\n          items {\n            id\n            status\n            version\n            addr\n            architecture\n            region\n            compute_plugins\n            first_contact\n            lost_at\n            status_changed\n            live_stat\n            cpu_cur_pct\n            mem_cur_bytes\n            available_slots\n            occupied_slots\n            scaling_group\n            schedulable\n            ...AgentDetailModalFragment\n            ...AgentSettingModalFragment\n          }\n          total_count\n        }\n      }\n    `,\n    {\n      limit: baiPaginationOption.limit,\n      offset: baiPaginationOption.offset,\n      filter: filterString,\n      order,\n      status: selectedStatus,\n    },\n    {\n      fetchKey,\n      fetchPolicy,\n    },\n  );\n\n  const columns: ColumnsType<Agent> = [\n    {\n      title: '#',\n      fixed: 'left',\n      render: (id, record, index) => {\n        return (\n          index +\n          1 +\n          (tablePaginationOption.current - 1) * tablePaginationOption.pageSize\n        );\n      },\n      showSorterTooltip: false,\n      rowScope: 'row',\n    },\n    {\n      title: <>ID / {t('agent.Endpoint')}</>,\n      key: 'id',\n      dataIndex: 'id',\n      fixed: 'left',\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\" align=\"start\">\n            <Typography.Text>{value}</Typography.Text>\n            <Typography.Text type=\"secondary\">{record?.addr}</Typography.Text>\n          </Flex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('agent.Region'),\n      key: 'region',\n      dataIndex: 'region',\n      render: (value) => {\n        const platformData: {\n          [key: string]: { color: string; icon: string };\n        } = {\n          aws: { color: 'orange', icon: 'aws' },\n          amazon: { color: 'orange', icon: 'aws' },\n          azure: { color: 'blue', icon: 'azure' },\n          gcp: { color: 'lightblue', icon: 'gcp' },\n          google: { color: 'lightblue', icon: 'gcp' },\n          nbp: { color: 'green', icon: 'nbp' },\n          naver: { color: 'green', icon: 'nbp' },\n          openstack: { color: 'red', icon: 'openstack' },\n          dgx: { color: 'green', icon: 'local' },\n          local: { color: 'yellow', icon: 'local' },\n        };\n\n        const regionData = _.split(value, '/');\n        const platform = regionData?.[0];\n        const location = regionData?.length > 1 ? regionData[1] : '';\n        const { color, icon } = platformData[platform] || {\n          color: 'yellow',\n          icon: 'local',\n        };\n        return (\n          <Flex gap={'xxs'}>\n            <img\n              alt={value}\n              src={`/resources/icons/${icon}.png`}\n              style={{\n                width: '32px',\n                height: '32px',\n                filter: isDarkMode && icon === 'local' ? 'invert(1)' : '',\n              }}\n            />\n            {location !== '' ? (\n              <DoubleTag\n                values={[\n                  { label: location, color: color },\n                  { label: platform, color: color },\n                ]}\n              />\n            ) : (\n              <Tag color={color}>{platform}</Tag>\n            )}\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('agent.Architecture'),\n      key: 'architecture',\n      dataIndex: 'architecture',\n    },\n    {\n      title: t('agent.Starts'),\n      key: 'first_contact',\n      dataIndex: 'first_contact',\n      render: (value) => {\n        return (\n          <Flex direction=\"column\">\n            <Typography.Text>{dayjs(value).format('ll LTS')}</Typography.Text>\n            <BAIIntervalView\n              callback={() => {\n                return baiClient.utils.elapsedTime(value, Date.now());\n              }}\n              delay={1000}\n              render={(intervalValue) => (\n                <DoubleTag\n                  values={[\n                    { label: t('agent.Running') },\n                    {\n                      label: intervalValue,\n                    },\n                  ]}\n                />\n              )}\n            />\n          </Flex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('agent.Allocation'),\n      key: 'allocation',\n      render: (value, record) => {\n        const parsedOccupiedSlots: {\n          [key in ResourceSlotName]: string | undefined;\n        } = JSON.parse(record?.occupied_slots || '{}');\n        const parsedAvailableSlots: {\n          [key in ResourceSlotName]: string | undefined;\n        } = JSON.parse(record?.available_slots || '{}');\n        return (\n          <Flex direction=\"column\" gap=\"xxs\">\n            {_.map(\n              parsedAvailableSlots,\n              (value: string | number, key: ResourceSlotName) => {\n                if (key === 'cpu') {\n                  const cpuPercent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots.cpu) /\n                      _.toNumber(parsedAvailableSlots.cpu)) *\n                      100,\n                  );\n                  return (\n                    <Flex key={key} justify=\"between\" style={{ minWidth: 220 }}>\n                      <Flex gap=\"xxs\">\n                        <ResourceTypeIcon key={key} type={key} />\n                        <Typography.Text>\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedOccupiedSlots.cpu || 0,\n                            0,\n                          )}\n                          /\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedAvailableSlots.cpu || 0,\n                            0,\n                          )}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          {mergedResourceSlots?.cpu?.display_unit}\n                        </Typography.Text>\n                      </Flex>\n                      <BAIProgressWithLabel\n                        percent={cpuPercent}\n                        strokeColor={\n                          cpuPercent > 80\n                            ? token.colorError\n                            : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(cpuPercent, 1) + ' %'\n                        }\n                      />\n                    </Flex>\n                  );\n                } else if (key === 'mem') {\n                  const memPercent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots.mem) /\n                      _.toNumber(parsedAvailableSlots.mem)) *\n                      100,\n                  );\n                  return (\n                    <Flex\n                      key={'mem'}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                    >\n                      <Flex gap=\"xxs\">\n                        <ResourceTypeIcon type={'mem'} />\n                        <Typography.Text>\n                          {convertBinarySizeUnit(\n                            parsedOccupiedSlots.mem,\n                            'g',\n                            0,\n                          )?.numberFixed ?? 0}\n                          /\n                          {convertBinarySizeUnit(\n                            parsedAvailableSlots.mem,\n                            'g',\n                            0,\n                          )?.numberFixed ?? 0}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          GiB\n                        </Typography.Text>\n                      </Flex>\n                      <BAIProgressWithLabel\n                        percent={memPercent}\n                        strokeColor={\n                          memPercent > 80\n                            ? token.colorError\n                            : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(memPercent, 1) + ' %'\n                        }\n                      />\n                    </Flex>\n                  );\n                } else if (parsedAvailableSlots[key]) {\n                  const percent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots[key]) /\n                      _.toNumber(parsedAvailableSlots[key])) *\n                      100,\n                  );\n                  return (\n                    <Flex\n                      key={key}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                      gap=\"xxs\"\n                    >\n                      <Flex gap=\"xxs\">\n                        <ResourceTypeIcon key={key} type={key} />\n                        <Typography.Text>\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedOccupiedSlots[key] || 0,\n                            2,\n                          )}\n                          /\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedAvailableSlots[key],\n                            2,\n                          )}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          {mergedResourceSlots?.[key]?.display_unit}\n                        </Typography.Text>\n                      </Flex>\n                      <BAIProgressWithLabel\n                        percent={percent}\n                        strokeColor={\n                          percent > 80 ? token.colorError : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(percent, 1) + ' %'\n                        }\n                      />\n                    </Flex>\n                  );\n                }\n              },\n            )}\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('agent.Utilization'),\n      key: 'live_stat',\n      dataIndex: 'live_stat',\n      render: (value, record) => {\n        const parsedValue = JSON.parse(value || '{}');\n        const available_slots = JSON.parse(record?.available_slots || '{}');\n        if (record?.status === 'ALIVE') {\n          const liveStat = {\n            cpu_util: { capacity: 0, current: 0, ratio: 0 },\n            mem_util: { capacity: 0, current: 0, ratio: 0 },\n          };\n          if (parsedValue && parsedValue.node && parsedValue.devices) {\n            const numCores = _.keys(parsedValue.devices.cpu_util).length;\n            liveStat.cpu_util.capacity = _.toFinite(\n              parsedValue.node.cpu_util.capacity,\n            );\n            liveStat.cpu_util.current = _.toFinite(\n              parsedValue.node.cpu_util.current,\n            );\n            liveStat.cpu_util.ratio =\n              liveStat.cpu_util.current /\n                liveStat.cpu_util.capacity /\n                numCores || 0;\n            liveStat.mem_util.capacity = _.toInteger(\n              available_slots.mem || parsedValue.node.mem.capacity,\n            );\n            liveStat.mem_util.current = _.toInteger(\n              parsedValue.node.mem.current,\n            );\n            liveStat.mem_util.ratio =\n              liveStat.mem_util.current / liveStat.mem_util.capacity || 0;\n          }\n          _.forEach(_.keys(parsedValue?.node), (statKey) => {\n            if (\n              ['cpu_util', 'mem', 'disk', 'net_rx', 'net_tx'].includes(statKey)\n            )\n              return;\n            if (_.includes(statKey, '_util')) {\n              // core utilization\n              liveStat[statKey as keyof typeof liveStat] = {\n                capacity:\n                  statKey === 'cuda_util'\n                    ? _.toFinite(parsedValue.node[statKey]['stats.max'])\n                    : _.toFinite(parsedValue.node[statKey].capacity),\n                current: _.toFinite(parsedValue.node[statKey].current),\n                ratio: _.toFinite(parsedValue.node[statKey].current) / 100 || 0,\n              };\n            } else if (statKey.includes('_mem')) {\n              // memory utilization\n              liveStat[statKey as keyof typeof liveStat] = {\n                capacity: _.toFinite(parsedValue.node[statKey].capacity),\n                current: _.toFinite(parsedValue.node[statKey].current),\n                ratio: _.toFinite(parsedValue.node[statKey].pct) / 100 || 0,\n              };\n            }\n          });\n          return (\n            <Flex direction=\"column\" gap=\"xxs\">\n              <Flex justify=\"between\" style={{ minWidth: 200 }}>\n                <Typography.Text>\n                  {mergedResourceSlots?.cpu?.human_readable_name}\n                </Typography.Text>\n                <BAIProgressWithLabel\n                  percent={liveStat.cpu_util.ratio * 100}\n                  width={120}\n                  valueLabel={\n                    toFixedFloorWithoutTrailingZeros(\n                      _.toFinite(liveStat.cpu_util.ratio * 100),\n                      1,\n                    ) + ' %'\n                  }\n                />\n              </Flex>\n              <Flex justify=\"between\" style={{ minWidth: 200 }}>\n                <Typography.Text>\n                  {mergedResourceSlots?.mem?.human_readable_name}\n                </Typography.Text>\n                <BAIProgressWithLabel\n                  percent={liveStat.mem_util.ratio}\n                  width={120}\n                  valueLabel={\n                    convertBinarySizeUnit(\n                      _.toString(liveStat.mem_util.current),\n                      'g',\n                    )?.numberFixed +\n                    '/' +\n                    convertBinarySizeUnit(\n                      _.toString(liveStat.mem_util.capacity),\n                      'g',\n                    )?.numberFixed +\n                    ' GiB'\n                  }\n                />\n              </Flex>\n              {_.map(_.keys(parsedValue?.node), (statKey) => {\n                if (['cpu_util', 'mem'].includes(statKey)) {\n                  return;\n                }\n                if (_.includes(statKey, '_util')) {\n                  const deviceName = _.split(statKey, '_')[0] + '.device';\n                  return (\n                    <Flex\n                      justify=\"between\"\n                      style={{ minWidth: 200, width: 'min-content' }}\n                      gap=\"xxs\"\n                    >\n                      <Typography.Text>\n                        {mergedResourceSlots?.[deviceName]?.human_readable_name}\n                        (util)\n                      </Typography.Text>\n                      <BAIProgressWithLabel\n                        width={120}\n                        percent={\n                          (liveStat[statKey as keyof typeof liveStat].current /\n                            liveStat[statKey as keyof typeof liveStat]\n                              .capacity) *\n                            100 || 0\n                        }\n                        valueLabel={\n                          _.toFinite(\n                            toFixedFloorWithoutTrailingZeros(\n                              liveStat[statKey as keyof typeof liveStat].ratio *\n                                100,\n                              1,\n                            ),\n                          ) + ' %'\n                        }\n                      />\n                    </Flex>\n                  );\n                }\n                if (_.includes(statKey, '_mem')) {\n                  const deviceName = _.split(statKey, '_')[0] + '.device';\n                  return (\n                    <Flex\n                      justify=\"between\"\n                      style={{ minWidth: 200, width: 'min-content' }}\n                      gap=\"xxs\"\n                    >\n                      <Typography.Text>\n                        {mergedResourceSlots?.[deviceName]?.human_readable_name}\n                        (mem)\n                      </Typography.Text>\n                      <BAIProgressWithLabel\n                        width={120}\n                        percent={\n                          (liveStat[statKey as keyof typeof liveStat].current /\n                            liveStat[statKey as keyof typeof liveStat]\n                              .capacity) *\n                            100 || 0\n                        }\n                        valueLabel={\n                          convertBinarySizeUnit(\n                            _.toString(\n                              liveStat[statKey as keyof typeof liveStat]\n                                .current,\n                            ),\n                            'g',\n                          )?.numberFixed +\n                          '/' +\n                          convertBinarySizeUnit(\n                            _.toString(\n                              liveStat[statKey as keyof typeof liveStat]\n                                .capacity,\n                            ),\n                            'g',\n                          )?.numberFixed +\n                          ' GiB'\n                        }\n                      />\n                    </Flex>\n                  );\n                }\n              })}\n            </Flex>\n          );\n        } else {\n          return t('agent.NoAvailableLiveStat');\n        }\n      },\n    },\n    {\n      title: t('agent.DiskPerc'),\n      key: 'disk_perc',\n      render: (value, record) => {\n        const parsedDisk =\n          JSON.parse(record?.live_stat || '{}')?.node?.disk ?? {};\n        const pctValue = _.toFinite(parsedDisk.pct) || 0;\n        const pct = _.toFinite(toFixedFloorWithoutTrailingZeros(pctValue, 2));\n        const color = pct > 80 ? token.colorError : token.colorSuccess;\n        return (\n          <Flex direction=\"column\">\n            <BAIProgressWithLabel\n              valueLabel={toFixedFloorWithoutTrailingZeros(pct, 1) + ' %'}\n              percent={pct}\n              strokeColor={color}\n              width={120}\n            />\n            <Typography.Text style={{ fontSize: token.fontSizeSM }}>\n              {bytesToGB(parsedDisk?.current)}GB /{' '}\n              {bytesToGB(parsedDisk?.capacity)}GB\n            </Typography.Text>\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('general.ResourceGroup'),\n      key: 'resource_group',\n      dataIndex: 'scaling_group',\n      sorter: true,\n    },\n    {\n      title: t('agent.Status'),\n      key: 'status',\n      dataIndex: 'status',\n      render: (value, record) => {\n        const parsedComputePlugins = JSON.parse(\n          record?.compute_plugins || '{}',\n        );\n        const parsedAvailableSlots = JSON.parse(\n          record?.available_slots || '{}',\n        );\n        return (\n          <Flex direction=\"column\" gap=\"xxs\" align=\"start\">\n            <DoubleTag\n              values={[\n                { label: 'Agent' },\n                {\n                  label: record?.version || '',\n                  color:\n                    value === 'ALIVE'\n                      ? 'green'\n                      : value === 'TERMINATED'\n                        ? 'red'\n                        : 'blue',\n                },\n              ]}\n            />\n            {parsedComputePlugins?.cuda ? (\n              <>\n                {parsedComputePlugins?.cuda?.cuda_version ? (\n                  <DoubleTag\n                    values={[\n                      { label: 'CUDA' },\n                      {\n                        label: parsedComputePlugins?.cuda?.cuda_version,\n                        color: 'green',\n                      },\n                    ]}\n                  />\n                ) : (\n                  <Tag color=\"green\">CUDA Disabled</Tag>\n                )}\n                <DoubleTag\n                  values={[\n                    { label: 'CUDA Plugin' },\n                    {\n                      label: parsedComputePlugins?.cuda?.version,\n                      color: 'blue',\n                    },\n                  ]}\n                />\n                {_.includes(_.keys(parsedAvailableSlots), 'cuda.shares') ? (\n                  <Tag color=\"blue\">Fractional GPU™</Tag>\n                ) : null}\n              </>\n            ) : null}\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('agent.Schedulable'),\n      key: 'schedulable',\n      dataIndex: 'schedulable',\n      render: (value) => {\n        return (\n          <Flex justify=\"center\">\n            {value === true ? (\n              <CheckCircleOutlined\n                style={{\n                  color: token.colorSuccess,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            ) : (\n              <MinusCircleOutlined\n                style={{\n                  color: token.colorTextDisabled,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            )}\n          </Flex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('general.Control'),\n      key: 'control',\n      fixed: 'right',\n      render: (value, record) => {\n        return (\n          <Flex>\n            <Button\n              size=\"large\"\n              style={{\n                color: token.colorSuccess,\n              }}\n              type=\"text\"\n              icon={<InfoCircleOutlined />}\n              onClick={() => setCurrentAgentInfo(record)}\n            />\n            <Button\n              size=\"large\"\n              style={{\n                color: token.colorInfo,\n              }}\n              type=\"text\"\n              icon={<SettingOutlined />}\n              onClick={() => setCurrentSettingAgent(record)}\n            />\n          </Flex>\n        );\n      },\n    },\n  ];\n\n  const [hiddenColumnKeys, setHiddenColumnKeys] =\n    useHiddenColumnKeysSetting('AgentList');\n\n  return (\n    <Flex direction=\"column\" align=\"stretch\" style={containerStyle}>\n      <Flex\n        justify=\"between\"\n        align=\"start\"\n        gap=\"xs\"\n        style={{ padding: token.paddingXS }}\n        wrap=\"wrap\"\n      >\n        <Flex\n          direction=\"row\"\n          gap={'sm'}\n          align=\"start\"\n          style={{ flex: 1 }}\n          wrap=\"wrap\"\n        >\n          <Segmented\n            options={[\n              {\n                label: t('agent.Connected'),\n                value: 'ALIVE',\n              },\n              {\n                label: t('agent.Terminated'),\n                value: 'TERMINATED',\n              },\n            ]}\n            value={\n              isPendingStatusFetch ? optimisticSelectedStatus : selectedStatus\n            }\n            onChange={(value) => {\n              setOptimisticSelectedStatus(value);\n              startStatusFetchTransition(() => {\n                setSelectedStatus(value);\n              });\n            }}\n          />\n\n          <BAIPropertyFilter\n            filterProperties={[\n              {\n                key: 'id',\n                propertyLabel: 'ID',\n                type: 'string',\n              },\n              {\n                key: 'addr',\n                propertyLabel: t('agent.Endpoint'),\n                type: 'string',\n              },\n              {\n                key: 'schedulable',\n                propertyLabel: t('agent.Schedulable'),\n                type: 'boolean',\n                options: [\n                  {\n                    label: t('general.Enabled'),\n                    value: 'true',\n                  },\n                  {\n                    label: t('general.Disabled'),\n                    value: 'false',\n                  },\n                ],\n              },\n            ]}\n            value={filterString}\n            // loading={isPendingFilter}\n            onChange={(value) => {\n              startFilterTransition(() => {\n                setFilterString(value);\n              });\n            }}\n          />\n        </Flex>\n        <Flex gap=\"xs\">\n          <Tooltip title={t('button.Refresh')}>\n            <Button\n              loading={isPendingRefresh}\n              onClick={() => updateFetchKeyInTransition()}\n              icon={<ReloadOutlined />}\n            ></Button>\n          </Tooltip>\n        </Flex>\n      </Flex>\n      <Table\n        bordered\n        scroll={{ x: 'max-content' }}\n        rowKey={'id'}\n        dataSource={filterNonNullItems(agent_list?.items)}\n        showSorterTooltip={false}\n        columns={\n          _.filter(\n            columns,\n            (column) => !_.includes(hiddenColumnKeys, _.toString(column?.key)),\n          ) as ColumnType<AnyObject>[]\n        }\n        pagination={{\n          pageSize: tablePaginationOption.pageSize,\n          showSizeChanger: true,\n          total: agent_list?.total_count,\n          current: tablePaginationOption.current,\n          showTotal(total, range) {\n            return `${range[0]}-${range[1]} of ${total} items`;\n          },\n          pageSizeOptions: ['10', '20', '50'],\n          style: { marginRight: token.marginXS },\n        }}\n        onChange={({ pageSize, current }, filters, sorter) => {\n          startPageChangeTransition(() => {\n            if (_.isNumber(current) && _.isNumber(pageSize)) {\n              setTablePaginationOption({\n                current,\n                pageSize,\n              });\n            }\n            setOrder(transformSorterToOrderString(sorter));\n          });\n        }}\n        loading={{\n          spinning:\n            isPendingPageChange || isPendingStatusFetch || isPendingFilter,\n          indicator: <LoadingOutlined />,\n        }}\n        {...tableProps}\n      />\n      <Flex\n        justify=\"end\"\n        style={{\n          padding: token.paddingXXS,\n        }}\n      >\n        <Button\n          type=\"text\"\n          icon={<SettingOutlined />}\n          onClick={() => {\n            toggleColumnSettingModal();\n          }}\n        />\n      </Flex>\n      <AgentDetailModal\n        agentDetailModalFrgmt={currentAgentInfo}\n        open={!!currentAgentInfo}\n        onRequestClose={() => setCurrentAgentInfo(null)}\n      />\n      <AgentSettingModal\n        agentSettingModalFrgmt={currentSettingAgent}\n        open={!!currentSettingAgent}\n        onRequestClose={(success) => {\n          if (success) {\n            updateFetchKeyInTransition();\n          }\n          setCurrentSettingAgent(null);\n        }}\n      />\n      <TableColumnsSettingModal\n        open={visibleColumnSettingModal}\n        onRequestClose={(values) => {\n          values?.selectedColumnKeys &&\n            setHiddenColumnKeys(\n              _.difference(\n                columns.map((column) => _.toString(column.key)),\n                values?.selectedColumnKeys,\n              ),\n            );\n          toggleColumnSettingModal();\n        }}\n        columns={columns}\n        hiddenColumnKeys={hiddenColumnKeys}\n      />\n    </Flex>\n  );\n};\n\nexport default AgentList;\n","import BAIModal, { BAIModalProps } from './BAIModal';\nimport {\n  AgentSettingModalFragment$data,\n  AgentSettingModalFragment$key,\n} from './__generated__/AgentSettingModalFragment.graphql';\nimport { AgentSettingModalMutation } from './__generated__/AgentSettingModalMutation.graphql';\nimport { App, Form, FormInstance, Switch } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment, useMutation } from 'react-relay';\n\ninterface AgentSettingModalProps extends BAIModalProps {\n  agentSettingModalFrgmt?: AgentSettingModalFragment$key | null;\n  onRequestClose: (success?: boolean) => void;\n}\n\nconst AgentSettingModal: React.FC<AgentSettingModalProps> = ({\n  agentSettingModalFrgmt = null,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { message } = App.useApp();\n  const formRef = useRef<FormInstance<AgentSettingModalFragment$data> | null>(\n    null,\n  );\n  const agent = useFragment(\n    graphql`\n      fragment AgentSettingModalFragment on Agent {\n        id\n        schedulable\n      }\n    `,\n    agentSettingModalFrgmt,\n  );\n\n  const [commitModifyAgentSetting, isInFlightCommitModifyAgentSetting] =\n    useMutation<AgentSettingModalMutation>(graphql`\n      mutation AgentSettingModalMutation(\n        $id: String!\n        $props: ModifyAgentInput!\n      ) {\n        modify_agent(id: $id, props: $props) {\n          ok\n          msg\n        }\n      }\n    `);\n\n  return (\n    <BAIModal\n      {...modalProps}\n      title={`${t('agent.AgentSetting')}: ${agent?.id}`}\n      onCancel={() => onRequestClose()}\n      destroyOnClose\n      width={300}\n      confirmLoading={isInFlightCommitModifyAgentSetting}\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            commitModifyAgentSetting({\n              variables: {\n                id: agent?.id || '',\n                props: {\n                  schedulable: values.schedulable,\n                },\n              },\n              onCompleted(res, errors) {\n                if (!res?.modify_agent?.ok || errors) {\n                  message.error(res?.modify_agent?.msg);\n                  onRequestClose();\n                } else {\n                  message.success(t('agent.AgentSettingUpdated'));\n                  onRequestClose(true);\n                }\n              },\n              onError(err) {\n                message.error(err?.message);\n              },\n            });\n          })\n          .catch(() => {});\n      }}\n    >\n      <Form ref={formRef} preserve={false} initialValues={{ ...agent }}>\n        <Form.Item\n          name=\"schedulable\"\n          label={t('agent.Schedulable')}\n          valuePropName=\"checked\"\n        >\n          <Switch />\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default AgentSettingModal;\n","import Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: string;\n  color?: string;\n};\n\nconst DoubleTag: React.FC<{\n  values?: Array<string> | Array<DoubleTagObjectValue>;\n  highlightKeyword?: string;\n}> = ({ values = [], highlightKeyword }) => {\n  if (values.length === 0) return null;\n  let objectValues: Array<DoubleTagObjectValue>;\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) =>\n        !_.isEmpty(objValue.label) ? (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {!_.isUndefined(highlightKeyword) ? (\n              <TextHighlighter keyword={highlightKeyword}>\n                {objValue.label}\n              </TextHighlighter>\n            ) : (\n              objValue.label\n            )}\n          </Tag>\n        ) : null,\n      )}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","/**\n * @generated SignedSource<<367ea7d320c428b094802d3ac53c7989>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentDetailModalFragment$data = {\n  readonly available_slots: string | null | undefined;\n  readonly cpu_cur_pct: number | null | undefined;\n  readonly id: string | null | undefined;\n  readonly live_stat: string | null | undefined;\n  readonly mem_cur_bytes: number | null | undefined;\n  readonly occupied_slots: string | null | undefined;\n  readonly \" $fragmentType\": \"AgentDetailModalFragment\";\n};\nexport type AgentDetailModalFragment$key = {\n  readonly \" $data\"?: AgentDetailModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AgentDetailModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"AgentDetailModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"live_stat\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"available_slots\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"occupied_slots\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"cpu_cur_pct\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"mem_cur_bytes\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Agent\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"cb343a0290034803cca4c2b82a1c1b68\";\n\nexport default node;\n","/**\n * @generated SignedSource<<ce707e92d2bcf784fa8e3c08fad6fa98>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentListQuery$variables = {\n  filter?: string | null | undefined;\n  limit: number;\n  offset: number;\n  order?: string | null | undefined;\n  status?: string | null | undefined;\n};\nexport type AgentListQuery$data = {\n  readonly agent_list: {\n    readonly items: ReadonlyArray<{\n      readonly addr: string | null | undefined;\n      readonly architecture: string | null | undefined;\n      readonly available_slots: string | null | undefined;\n      readonly compute_plugins: string | null | undefined;\n      readonly cpu_cur_pct: number | null | undefined;\n      readonly first_contact: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly live_stat: string | null | undefined;\n      readonly lost_at: string | null | undefined;\n      readonly mem_cur_bytes: number | null | undefined;\n      readonly occupied_slots: string | null | undefined;\n      readonly region: string | null | undefined;\n      readonly scaling_group: string | null | undefined;\n      readonly schedulable: boolean | null | undefined;\n      readonly status: string | null | undefined;\n      readonly status_changed: string | null | undefined;\n      readonly version: string | null | undefined;\n      readonly \" $fragmentSpreads\": FragmentRefs<\"AgentDetailModalFragment\" | \"AgentSettingModalFragment\">;\n    } | null | undefined>;\n    readonly total_count: number;\n  } | null | undefined;\n};\nexport type AgentListQuery = {\n  response: AgentListQuery$data;\n  variables: AgentListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"order\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv5 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"filter\",\n    \"variableName\": \"filter\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"limit\",\n    \"variableName\": \"limit\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"offset\",\n    \"variableName\": \"offset\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"order\",\n    \"variableName\": \"order\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"status\",\n    \"variableName\": \"status\"\n  }\n],\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"version\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"addr\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"region\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"compute_plugins\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"first_contact\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"lost_at\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status_changed\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"live_stat\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"cpu_cur_pct\",\n  \"storageKey\": null\n},\nv18 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mem_cur_bytes\",\n  \"storageKey\": null\n},\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"available_slots\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"occupied_slots\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"scaling_group\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"schedulable\",\n  \"storageKey\": null\n},\nv23 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"total_count\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v5/*: any*/),\n        \"concreteType\": \"AgentList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"agent_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Agent\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/),\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"AgentDetailModalFragment\"\n              },\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"AgentSettingModalFragment\"\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v23/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v0/*: any*/),\n      (v4/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"AgentListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v5/*: any*/),\n        \"concreteType\": \"AgentList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"agent_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Agent\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          (v23/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"e1a551c0261ce59a4b187a3bbb29b86b\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AgentListQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $filter: String\\n  $status: String\\n  $order: String\\n) {\\n  agent_list(limit: $limit, offset: $offset, filter: $filter, status: $status, order: $order) {\\n    items {\\n      id\\n      status\\n      version\\n      addr\\n      architecture\\n      region\\n      compute_plugins\\n      first_contact\\n      lost_at\\n      status_changed\\n      live_stat\\n      cpu_cur_pct\\n      mem_cur_bytes\\n      available_slots\\n      occupied_slots\\n      scaling_group\\n      schedulable\\n      ...AgentDetailModalFragment\\n      ...AgentSettingModalFragment\\n    }\\n    total_count\\n  }\\n}\\n\\nfragment AgentDetailModalFragment on Agent {\\n  id\\n  live_stat\\n  available_slots\\n  occupied_slots\\n  cpu_cur_pct\\n  mem_cur_bytes\\n}\\n\\nfragment AgentSettingModalFragment on Agent {\\n  id\\n  schedulable\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"1d6c6a390aad71e4b7815a623ca61d86\";\n\nexport default node;\n","/**\n * @generated SignedSource<<c9eae318cc6abeb4bdbb70f7721de0ed>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentSettingModalFragment$data = {\n  readonly id: string | null | undefined;\n  readonly schedulable: boolean | null | undefined;\n  readonly \" $fragmentType\": \"AgentSettingModalFragment\";\n};\nexport type AgentSettingModalFragment$key = {\n  readonly \" $data\"?: AgentSettingModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AgentSettingModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"AgentSettingModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"schedulable\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Agent\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"303f8ee06508c3b28511ab1a24a305d5\";\n\nexport default node;\n","/**\n * @generated SignedSource<<cee54cd77c144ce9cc3c9cada1e19ae3>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ModifyAgentInput = {\n  scaling_group?: string | null | undefined;\n  schedulable?: boolean | null | undefined;\n};\nexport type AgentSettingModalMutation$variables = {\n  id: string;\n  props: ModifyAgentInput;\n};\nexport type AgentSettingModalMutation$data = {\n  readonly modify_agent: {\n    readonly msg: string | null | undefined;\n    readonly ok: boolean | null | undefined;\n  } | null | undefined;\n};\nexport type AgentSettingModalMutation = {\n  response: AgentSettingModalMutation$data;\n  variables: AgentSettingModalMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"props\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"id\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"props\"\n      }\n    ],\n    \"concreteType\": \"ModifyAgent\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_agent\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"ok\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"msg\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentSettingModalMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"AgentSettingModalMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1a9e43d4bc6e78f3949d1a2a397ff00e\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentSettingModalMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation AgentSettingModalMutation(\\n  $id: String!\\n  $props: ModifyAgentInput!\\n) {\\n  modify_agent(id: $id, props: $props) {\\n    ok\\n    msg\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"13b2a6a91c7f08bbced5fde155ded60e\";\n\nexport default node;\n","import AgentList from '../components/AgentList';\nimport { Card, Skeleton, theme } from 'antd';\nimport React, { Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StringParam, useQueryParam, withDefault } from 'use-query-params';\n\ntype TabKey = 'agents' | 'storages' | 'resourceGroup';\n\ninterface ResourcesPageProps {}\n\nconst tabParam = withDefault(StringParam, 'agents');\n\nconst ResourcesPage: React.FC<ResourcesPageProps> = (props) => {\n  const { t } = useTranslation();\n  const [curTabKey, setCurTabKey] = useQueryParam('tab', tabParam, {\n    updateType: 'replace',\n  });\n\n  const { token } = theme.useToken();\n\n  return (\n    <Card\n      activeTabKey={curTabKey}\n      onTabChange={(key) => setCurTabKey(key as TabKey)}\n      tabList={[\n        {\n          key: 'agents',\n          tab: t('agent.Agent'),\n        },\n        {\n          key: 'storages',\n          tab: t('general.StorageProxies'),\n        },\n        {\n          key: 'resourceGroup',\n          tab: t('general.ResourceGroup'),\n        },\n      ]}\n      styles={{\n        body: {\n          padding: 0,\n          paddingTop: 1,\n          overflow: 'hidden',\n        },\n      }}\n    >\n      {curTabKey === 'agents' ? (\n        // To remove duplicated border in the bordered table, we need to remove margin of the container.\n        <Suspense\n          fallback={\n            <Skeleton\n              active\n              style={{ padding: token.paddingContentVerticalLG }}\n            />\n          }\n        >\n          <AgentList containerStyle={{ marginLeft: -1, marginRight: -1 }} />\n        </Suspense>\n      ) : null}\n      {curTabKey === 'storages' ? (\n        // @ts-ignore\n        <backend-ai-storage-proxy-list active />\n      ) : null}\n      {curTabKey === 'resourceGroup' ? (\n        // @ts-ignore\n        <backend-ai-resource-group-list active />\n      ) : null}\n    </Card>\n  );\n};\n\nexport default ResourcesPage;\n","\"use client\";\n\nimport { Col } from '../grid';\nexport default Col;","\"use client\";\n\nimport { Row } from '../grid';\nexport default Row;"],"names":["_ref","_parsedLiveStat$devic","_mergedResourceSlots$","_parsedLiveStat$devic2","_mergedResourceSlots$3","_convertBinarySizeUni","_convertBinarySizeUni2","_convertBinarySizeUni3","_convertBinarySizeUni4","_convertDecimalSizeUn","_parsedLiveStat$node","_parsedLiveStat$node$","_convertDecimalSizeUn2","_parsedLiveStat$node2","_parsedLiveStat$node3","agentDetailModalFrgmt","onRequestClose","modalProps","t","useTranslation","token","theme","useToken","mergedResourceSlots","useResourceSlotsDetails","agent","useFragment","_AgentDetailModalFragment","require","parsedLiveStat","JSON","parse","live_stat","parsedAvailableSlots","available_slots","_jsx","BAIModal","centered","title","id","onCancel","destroyOnClose","footer","children","_jsxs","Flex","direction","align","gap","Row","gutter","Col","xs","sm","devices","cpu_util","Typography","Title","level","style","marginTop","cpu","human_readable_name","_","value","key","_mergedResourceSlots$2","justify","Text","type","flex","BAIProgressWithLabel","percent","pct","valueLabel","toFixedFloorWithoutTrailingZeros","mem","convertBinarySizeUnit","mem_cur_bytes","number","numberUnit","node","convertDecimalSizeUnit","net_tx","current","net_rx","marginBottom","marginSM","includes","_mergedResourceSlots$4","deviceName","index","_mergedResourceSlots$5","_value$","_value$2","_mergedResourceSlots$6","_mergedResourceSlots$7","_value$3","_value$4","containerStyle","tableProps","isDarkMode","useThemeMode","currentAgentInfo","setCurrentAgentInfo","useState","currentSettingAgent","setCurrentSettingAgent","visibleColumnSettingModal","toggle","toggleColumnSettingModal","useToggle","baiClient","useSuspendedBackendaiClient","isPendingStatusFetch","startStatusFetchTransition","useTransition","isPendingRefresh","startRefreshTransition","isPendingPageChange","startPageChangeTransition","selectedStatus","setSelectedStatus","optimisticSelectedStatus","setOptimisticSelectedStatus","isPendingFilter","startFilterTransition","filterString","setFilterString","baiPaginationOption","tablePaginationOption","setTablePaginationOption","useBAIPaginationOptionState","pageSize","order","setOrder","fetchKey","updateFetchKey","useUpdatableState","fetchPolicy","updateFetchKeyInTransition","agent_list","useLazyLoadQuery","_AgentListQuery","limit","offset","filter","status","columns","fixed","render","record","showSorterTooltip","rowScope","_Fragment","dataIndex","addr","sorter","regionData","platform","location","length","color","icon","aws","amazon","azure","gcp","google","nbp","naver","openstack","dgx","local","alt","src","width","height","DoubleTag","values","label","Tag","dayjs","format","BAIIntervalView","callback","utils","elapsedTime","Date","now","delay","intervalValue","parsedOccupiedSlots","occupied_slots","cpuPercent","minWidth","ResourceTypeIcon","fontSize","sizeXS","display_unit","strokeColor","colorError","colorSuccess","memPercent","numberFixed","parsedValue","_convertBinarySizeUni5","_convertBinarySizeUni6","liveStat","capacity","ratio","mem_util","numCores","statKey","_convertBinarySizeUni7","_convertBinarySizeUni8","_JSON$parse$node$disk","_JSON$parse","_JSON$parse$node","parsedDisk","disk","pctValue","fontSizeSM","bytesToGB","_parsedComputePlugins","_parsedComputePlugins2","_parsedComputePlugins3","parsedComputePlugins","compute_plugins","version","cuda","cuda_version","CheckCircleOutlined","fontSizeXL","MinusCircleOutlined","colorTextDisabled","Button","size","InfoCircleOutlined","onClick","colorInfo","SettingOutlined","hiddenColumnKeys","setHiddenColumnKeys","useHiddenColumnKeysSetting","padding","paddingXS","wrap","Segmented","options","onChange","BAIPropertyFilter","filterProperties","propertyLabel","Tooltip","loading","ReloadOutlined","Table","bordered","scroll","x","rowKey","dataSource","filterNonNullItems","items","column","pagination","showSizeChanger","total","total_count","showTotal","range","pageSizeOptions","marginRight","marginXS","_ref2","filters","transformSorterToOrderString","spinning","indicator","LoadingOutlined","paddingXXS","AgentDetailModal","open","AgentSettingModal","agentSettingModalFrgmt","success","TableColumnsSettingModal","selectedColumnKeys","map","message","App","useApp","formRef","useRef","_AgentSettingModalFragment","commitModifyAgentSetting","isInFlightCommitModifyAgentSetting","useMutation","_AgentSettingModalMutation","confirmLoading","onOk","_formRef$current","validateFields","then","variables","props","schedulable","onCompleted","res","errors","_res$modify_agent","_res$modify_agent2","modify_agent","ok","error","msg","onError","err","catch","Form","ref","preserve","initialValues","Item","name","valuePropName","Switch","objectValues","highlightKeyword","React","objValue","idx","undefined","margin","TextHighlighter","keyword","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","v23","hash","tabParam","withDefault","StringParam","curTabKey","setCurTabKey","useQueryParam","updateType","Card","activeTabKey","onTabChange","tabList","tab","styles","body","paddingTop","overflow","Suspense","fallback","Skeleton","active","paddingContentVerticalLG","AgentList","marginLeft"],"sourceRoot":""}