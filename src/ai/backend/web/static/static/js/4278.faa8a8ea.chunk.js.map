{"version":3,"file":"static/js/4278.faa8a8ea.chunk.js","mappings":"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","sources":["components/DoubleTag.tsx","components/DynamicUnitInputNumber.tsx","components/ImageMetaIcon.tsx","components/InputNumberWithSlider.tsx","components/AgentSelect.tsx","components/DynamicUnitInputNumberWithSlider.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/ResourceGroupSelect.tsx","components/ResourceNumber.tsx","components/__generated__/AgentSelectQuery.graphql.ts","components/__generated__/ResourcePresetSelectQuery.graphql.ts","helper/const-vars.ts","hooks/__generated__/hooksUsingRelay_KeyPairQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql.ts","hooks/hooksUsingRelay.tsx","hooks/reactPaginationQueryOptions.tsx","hooks/useResourceLimitAndRemaining.tsx"],"sourcesContent":["import Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: string;\n  color?: string;\n};\n\nconst DoubleTag: React.FC<{\n  values?: Array<string> | Array<DoubleTagObjectValue>;\n  highlightKeyword?: string;\n}> = ({ values = [], highlightKeyword }) => {\n  if (values.length === 0) return null;\n  let objectValues: Array<DoubleTagObjectValue>;\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) =>\n        !_.isEmpty(objValue.label) ? (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {!_.isUndefined(highlightKeyword) ? (\n              <TextHighlighter keyword={highlightKeyword}>\n                {objValue.label}\n              </TextHighlighter>\n            ) : (\n              objValue.label\n            )}\n          </Tag>\n        ) : null,\n      )}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","import { convertBinarySizeUnit, parseUnit, SizeUnit } from '../helper';\nimport useControllableState from '../hooks/useControllableState';\nimport { usePrevious } from 'ahooks';\nimport { InputNumber, InputNumberProps, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nexport interface DynamicUnitInputNumberProps\n  extends Omit<\n    InputNumberProps,\n    'step' | 'max' | 'min' | 'value' | 'onChange'\n  > {\n  dynamicSteps?: number[];\n  disableAutoUnit?: boolean;\n  max?: string;\n  min?: string;\n  value?: string | null | undefined;\n  units?: string[];\n  roundStep?: number;\n  onChange?: (value: string) => void;\n}\n\nconst DynamicUnitInputNumber: React.FC<DynamicUnitInputNumberProps> = ({\n  dynamicSteps = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],\n  units = ['m', 'g', 't', 'p'],\n  disableAutoUnit = false,\n  min = '0m',\n  max = '300p',\n  roundStep,\n  ...inputNumberProps\n}) => {\n  const [value, setValue] = useControllableState<string | null | undefined>(\n    inputNumberProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const [numValue, _unitFromValue] =\n    value === null || value === undefined ? [null, null] : parseUnit(value);\n  const previousUnit = usePrevious(_unitFromValue);\n  const unit = _unitFromValue || previousUnit || units[0];\n\n  const [minNumValue, minUnit] = parseUnit(min);\n  const [maxNumValue, maxUnit] = parseUnit(max);\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const onInput = (e: Event) => {\n        // @ts-ignore\n        const value = e?.target?.value;\n        if (/^\\d+(g|m)$/.test(value)) {\n          // const [newNumber, newUnit] = parseUnit(value);\n          // if (newNumber === numValue && newUnit === unit) {\n          //   e.target.value = numValue;\n          // } else {\n          setValue(value);\n          // }\n        }\n      };\n      const target = ref.current;\n      target?.addEventListener('input', onInput);\n      return () => {\n        target?.removeEventListener('input', onInput);\n      };\n    }\n  }, [ref, numValue, _unitFromValue, setValue]);\n\n  return (\n    <InputNumber\n      ref={ref}\n      {...inputNumberProps}\n      onBlur={() => {\n        if (_.isNumber(roundStep) && roundStep > 0) {\n          const decimalCount = roundStep.toString().split('.')[1]?.length || 0;\n          if (\n            isNaN(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n                roundStep,\n            )\n          ) {\n            return;\n          }\n          setValue(\n            `${(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n              roundStep\n            ).toFixed(decimalCount)}${unit}`,\n          );\n        }\n      }}\n      value={numValue}\n      onChange={(newValue) => {\n        if (newValue === null || newValue === undefined) {\n          setValue(newValue);\n        } else {\n          setValue(`${newValue}${unit}`);\n        }\n      }}\n      //TODO: When min and max have different units, they should be calculated and put in.\n      // 입력의 초소단위 확인 0.4g 가 되는지 확인\n      max={\n        maxUnit === unit\n          ? maxNumValue\n          : convertBinarySizeUnit(max, unit as SizeUnit)?.number\n      }\n      min={\n        minUnit === unit\n          ? minNumValue\n          : // @ts-ignore\n            convertBinarySizeUnit(min, unit).number\n      }\n      addonAfter={\n        <Select\n          tabIndex={-1}\n          value={unit}\n          onChange={(newUnit) => {\n            setValue(`${numValue}${newUnit}`);\n          }}\n          onDropdownVisibleChange={(open) => {\n            // A null or undefined value doesn't have a unit info, so we need to set the value before setting the unit.\n            if ((open && value === null) || value === undefined) {\n              setValue(`0${unit}`);\n            }\n          }}\n          options={_.map(units, (unit) => ({\n            value: unit,\n            label: (\n              <Typography.Text\n                style={{\n                  fontFamily:\n                    \"'SFMono-Regular',Consolas,'Liberation Mono',Menlo,Courier,monospace\",\n                }}\n              >\n                {unit.toUpperCase() + 'iB'}\n              </Typography.Text>\n            ),\n          }))}\n          suffixIcon={units.length > 1 ? undefined : null}\n          open={units.length > 1 ? undefined : false}\n          style={{\n            cursor: units.length > 1 ? undefined : 'default',\n          }}\n        />\n      }\n      step={0} // this step applies when onStep doesn't setValue\n      onStep={(afterStepValue, info) => {\n        const numValueNotNull =\n          _.isNull(numValue) || _.isUndefined(numValue) ? 0 : numValue;\n        const index = _.sortedIndex(_.sortBy(dynamicSteps), numValueNotNull);\n        let nextIndex: number;\n        if (info.type === 'up') {\n          if (numValueNotNull === dynamicSteps[index]) {\n            nextIndex = index + 1;\n          } else {\n            nextIndex = index;\n          }\n        } else {\n          nextIndex = index - 1;\n        }\n\n        const currentUnitIndex = units.indexOf(unit);\n        if (!disableAutoUnit && nextIndex < 0) {\n          // WHEN MOVING TO MORE Smaller Unit: change unit and number\n          if (currentUnitIndex === 0) {\n            // if already at min unit, set to 0\n            setValue(`0${unit}`);\n          } else {\n            const nextValue = dynamicSteps[dynamicSteps.length - 1];\n            const nextUnit = units[currentUnitIndex - 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else if (!disableAutoUnit && nextIndex > dynamicSteps.length - 1) {\n          // WHEN MOVING TO MORE Bigger Unit: change unit and number\n          //  if already at max unit, step up/down by 1\n          if (currentUnitIndex === units.length - 1) {\n            setValue(\n              `${numValueNotNull + (info.type === 'up' ? 1 : -1)}${maxUnit}`,\n            );\n          } else {\n            const nextValue = dynamicSteps[0];\n            const nextUnit = units[currentUnitIndex + 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else {\n          // WHEN, DON'T NEED TO CHANGE UNIT\n          if (nextIndex >= 0 && nextIndex < dynamicSteps.length) {\n            let nextNumValue = dynamicSteps[nextIndex];\n            if (minUnit === unit && nextNumValue < minNumValue) {\n              nextNumValue = minNumValue;\n            } else if (maxUnit === unit && nextNumValue > maxNumValue) {\n              nextNumValue = maxNumValue;\n            }\n            setValue(`${nextNumValue}${unit}`);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DynamicUnitInputNumber;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n  alt?: string | null;\n}> = ({ image, style = {} }, bordered, alt = '') => {\n  const [, { getImageIcon }] = useBackendAIImageMetaData();\n\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: '1em',\n        height: '1em',\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","import { useUpdatableState } from '../hooks';\nimport useControllableState from '../hooks/useControllableState';\nimport Flex from './Flex';\nimport { InputNumber, Slider, InputNumberProps, SliderSingleProps } from 'antd';\nimport { SliderRangeProps } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\n\ntype OmitControlledProps<T> = Omit<T, 'value' | 'onChange'>;\n\ninterface InputNumberWithSliderProps {\n  min?: number;\n  max?: number;\n  step?: number | null;\n  disabled?: boolean;\n  value?: number;\n  onChange?: (value: number) => void;\n  inputNumberProps?: OmitControlledProps<InputNumberProps>;\n  sliderProps?:\n    | OmitControlledProps<SliderSingleProps>\n    | OmitControlledProps<SliderRangeProps>;\n}\nconst InputNumberWithSlider: React.FC<InputNumberWithSliderProps> = ({\n  min,\n  max,\n  step,\n  disabled,\n  inputNumberProps,\n  sliderProps,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableState(otherProps);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    // when step is 1, make sure the value is integer\n    if (step === 1 && value % 1 !== 0) {\n      setValue(_.max([Math.round(value), min]));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [step]);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    setTimeout(() => {\n      updateKey(value);\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        align=\"stretch\"\n        direction=\"column\"\n      >\n        <InputNumber\n          key={key}\n          ref={inputRef}\n          max={max}\n          min={min}\n          step={step ?? undefined}\n          disabled={disabled}\n          value={value}\n          onChange={setValue}\n          onBlur={() => {\n            if (_.isNumber(step) && step > 0) {\n              if (\n                _.isNumber(max) &&\n                max < _.toNumber(inputRef.current?.value || '0')\n              ) {\n                return; // do not update value if it is greater than max\n              }\n              const decimalCount = step.toString().split('.')[1]?.length || 0;\n              setValue(\n                _.max([\n                  _.toNumber(\n                    (\n                      Math.round(\n                        _.toNumber(inputRef.current?.value || '0') / step,\n                      ) * step\n                    ).toFixed(decimalCount),\n                  ),\n                  min,\n                ]),\n              );\n            }\n          }}\n          {...inputNumberProps}\n        />\n      </Flex>\n      <Flex direction=\"column\" align=\"stretch\" style={{ flex: 3 }}>\n        <Slider\n          max={max}\n          min={0}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={(value: any) => {\n            if (min !== undefined && value < min) {\n              return;\n            } else {\n              setValue(value);\n            }\n          }}\n          {...sliderProps}\n          // remove marks that are greater than max\n          marks={_.omitBy(sliderProps?.marks, (option, key) => {\n            return _.isNumber(max) ? _.parseInt(key) > max : false;\n          })}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default InputNumberWithSlider;\n","import { useBAIPaginationOptionState } from '../hooks/reactPaginationQueryOptions';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport { AgentSelectQuery } from './__generated__/AgentSelectQuery.graphql';\nimport { useControllableValue } from 'ahooks';\nimport { Select, SelectProps } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ninterface Props extends SelectProps {\n  autoSelectDefault?: boolean;\n  fetchKey?: string;\n  resourceGroup?: string | null;\n}\n\nconst AgentSelect: React.FC<Props> = ({\n  fetchKey,\n  resourceGroup,\n  ...selectProps\n}) => {\n  const { t } = useTranslation();\n  const [value, setValue] = useControllableValue(selectProps);\n\n  const { baiPaginationOption } = useBAIPaginationOptionState({\n    current: 1,\n    pageSize: 20,\n  });\n\n  const { agent_summary_list } = useLazyLoadQuery<AgentSelectQuery>(\n    graphql`\n      query AgentSelectQuery(\n        $limit: Int!\n        $offset: Int!\n        $status: String\n        $filter: String\n        $scaling_group: String\n      ) {\n        agent_summary_list(\n          limit: $limit\n          offset: $offset\n          status: $status\n          filter: $filter\n          scaling_group: $scaling_group\n        ) {\n          items {\n            id\n            status\n            schedulable\n            available_slots\n            occupied_slots\n            architecture\n          }\n          total_count\n        }\n      }\n    `,\n    {\n      limit: baiPaginationOption.limit,\n      offset: baiPaginationOption.offset,\n      status: 'ALIVE',\n      filter: 'schedulable is true', // true, false, null\n      scaling_group: resourceGroup,\n    },\n    {\n      fetchPolicy: 'network-only',\n      fetchKey,\n    },\n  );\n\n  const agentOptions = _.map(agent_summary_list?.items, (agent) => {\n    const availableSlotsInfo: {\n      [key in string]: string;\n    } = JSON.parse(agent?.available_slots ?? '{}');\n    const occupiedSlotsInfo: {\n      [key in string]: string;\n    } = JSON.parse(agent?.occupied_slots ?? '{}');\n    const remainingSlotsInfo: {\n      [key in string]: number;\n    } = _.chain(availableSlotsInfo)\n      .mapValues((value, key) => {\n        if (key.endsWith('.shares')) {\n          return parseFloat(value) - parseFloat(occupiedSlotsInfo[key] ?? 0);\n        } else {\n          return parseInt(value) - parseInt(occupiedSlotsInfo[key] ?? 0);\n        }\n      })\n      .value();\n    return {\n      label: (\n        <Flex direction=\"row\" justify=\"between\">\n          {agent?.id}\n          <Flex direction=\"row\" gap={'xxs'}>\n            {_.map(remainingSlotsInfo, (slot, key) => {\n              return (\n                <ResourceNumber\n                  key={key}\n                  // @ts-ignore\n                  type={key}\n                  value={slot.toString()}\n                  hideTooltip\n                />\n              );\n            })}\n          </Flex>\n        </Flex>\n      ),\n      value: agent?.id,\n    };\n  });\n\n  return (\n    <Select\n      onChange={(value, option) => {\n        setValue(value, option);\n      }}\n      {...selectProps}\n      value={value}\n      options={[\n        { label: t('session.launcher.autoSelect'), value: 'auto' },\n        ...agentOptions,\n      ]}\n    />\n  );\n};\n\nexport default AgentSelect;\n","import { compareNumberWithUnits, convertBinarySizeUnit } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport useControllableState from '../hooks/useControllableState';\nimport DynamicUnitInputNumber, {\n  DynamicUnitInputNumberProps,\n} from './DynamicUnitInputNumber';\nimport Flex from './Flex';\nimport { Slider, theme } from 'antd';\nimport { SliderMarks } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\n\nexport interface DynamicUnitInputNumberWithSliderProps\n  extends DynamicUnitInputNumberProps {\n  extraMarks?: SliderMarks;\n  hideSlider?: boolean;\n  warn?: string;\n  step?: number;\n}\nconst DynamicUnitInputNumberWithSlider: React.FC<\n  DynamicUnitInputNumberWithSliderProps\n> = ({\n  min = '0m',\n  max = '32g',\n  warn,\n  units = ['m', 'g'],\n  extraMarks,\n  hideSlider,\n  step = 0.05,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableState<string | undefined | null>(\n    otherProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const { token } = theme.useToken();\n  const minGiB = useMemo(() => convertBinarySizeUnit(min, 'g', 2), [min]);\n  const maxGiB = useMemo(() => convertBinarySizeUnit(max, 'g', 2), [max]);\n  const valueGiB = useMemo(\n    () => convertBinarySizeUnit(value || '0g', 'g', 2),\n    [value],\n  );\n\n  // const warnPercent = useMemo(() => {\n  //   return warn\n  //     ? ((iSizeToSize(warn, 'g', 2)?.number || 0) / (maxGiB?.number || 1)) * 100\n  //     : undefined;\n  // }, [warn, maxGiB?.number]);\n  // console.log('##marks', marks);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    setTimeout(() => {\n      updateKey(value?.toString());\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isMinOversMaxValue =\n    _.isNumber(minGiB?.number) &&\n    _.isNumber(maxGiB?.number) &&\n    minGiB?.number > maxGiB?.number;\n\n  const filterOutInvalidMarks = (marks: SliderMarks) => {\n    return _.omitBy({ ...marks }, (option, key) => {\n      const markNumber = parseFloat(key);\n      return (\n        minGiB &&\n        maxGiB &&\n        (minGiB?.number > markNumber || maxGiB?.number < markNumber)\n      );\n    });\n  };\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        direction=\"column\"\n        align=\"stretch\"\n      >\n        <DynamicUnitInputNumber\n          {...otherProps}\n          key={key}\n          min={min}\n          max={max}\n          units={units}\n          // set value to 0mib when min value overs max value\n          value={value}\n          onChange={(nextValue) => {\n            setValue(nextValue);\n          }}\n          style={{\n            minWidth: 130,\n          }}\n          roundStep={step}\n          changeOnBlur={!isMinOversMaxValue}\n        />\n      </Flex>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 3,\n          ...(hideSlider && {\n            visibility: 'hidden',\n            height: 0,\n          }),\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {/* {warn && (\n            <Flex\n              direction=\"row\"\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 14.5,\n                width: '100%',\n                height: 4,\n                padding: '0 5px',\n              }}\n              align=\"start\"\n            >\n              <div\n                style={{\n                  width: warnPercent + '%',\n                  height: 4,\n                }}\n              ></div>\n              <div\n                style={{\n                  marginTop: 3,\n                  marginLeft: -3.5,\n                  width: 0,\n                  height: 0,\n\n                  borderTop: '4px solid transparent',\n                  borderLeft: '4px solid transparent',\n                  borderRight: '4px solid transparent',\n                  borderBottom: `7px solid ${token.colorWarning}`,\n                }}\n              ></div>\n            </Flex>\n          )} */}\n          <Slider\n            max={maxGiB?.number}\n            styles={{\n              track:\n                (warn && {\n                  backgroundColor:\n                    compareNumberWithUnits(warn, value || '0b') < 0\n                      ? token.colorWarning\n                      : undefined,\n                }) ||\n                undefined,\n              rail: {\n                // backgroundColor:'red',\n                // fill: 'red',\n              },\n            }}\n            step={step}\n            // min={minGiB.number}  // DO NOT use min, because slider left should be 0\n\n            // For the slider, when min value overs max value, it will not work.\n            // In this case, hide all information and disabled the slider.\n            // Most of case, it's not a good idea to set the different value to the control value,\n            // but in this case, it's okay to hide all information and disabled the slider.\n            value={isMinOversMaxValue ? 0 : valueGiB?.number}\n            disabled={isMinOversMaxValue}\n            tooltip={{\n              formatter: isMinOversMaxValue\n                ? null\n                : (value = 0) => {\n                    return value < 1\n                      ? `${(value * 1024).toFixed(2)} MiB`\n                      : `${value.toFixed(2)} GiB`;\n                  },\n            }}\n            onChange={(newNumValue) => {\n              if (minGiB?.number && minGiB.number > newNumValue) {\n                setValue(min);\n              } else {\n                setValue(\n                  newNumValue < 1\n                    ? `${newNumValue * 1024}m`\n                    : `${newNumValue}g`,\n                );\n              }\n            }}\n            marks={filterOutInvalidMarks({\n              ...(minGiB &&\n                _.isNumber(minGiB?.number) && {\n                  [minGiB.number]: {\n                    style: {\n                      color: token.colorTextSecondary,\n                    },\n                    // if 0, without unit\n                    label:\n                      minGiB.number === 0\n                        ? minGiB.number\n                        : minGiB.number >= 1\n                          ? minGiB.number + 'g'\n                          : minGiB.number * 1024 + 'm',\n                  },\n                }),\n              // extra: remaining mark code should be located before max mark code to prevent overlapping when it is same value\n              ..._.omitBy(extraMarks, (option, key) => {\n                return _.isNumber(maxGiB?.number)\n                  ? _.parseInt(key) > (maxGiB?.number as number)\n                  : false;\n              }),\n              ...(maxGiB?.number && {\n                [maxGiB.number]: {\n                  style: {\n                    color: token.colorTextSecondary,\n                  },\n                  label:\n                    maxGiB.number === 0\n                      ? maxGiB.number\n                      : maxGiB.number >= 1\n                        ? maxGiB.number + 'g'\n                        : maxGiB.number * 1024 + 'm',\n                },\n              }),\n            })}\n          />\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default DynamicUnitInputNumberWithSlider;\n","import { localeCompare } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { ResourceSlotName, useResourceSlots } from '../hooks/backendai';\nimport useControllableState from '../hooks/useControllableState';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport {\n  ResourcePresetSelectQuery,\n  ResourcePresetSelectQuery$data,\n} from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport { useThrottleFn } from 'ahooks';\nimport { Select, Tooltip, theme } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\n\nexport type ResourcePreset = NonNullable<\n  NonNullable<ResourcePresetSelectQuery$data['resource_presets']>[number]\n>;\nexport interface ResourcePresetSelectProps\n  extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n  allocatablePresetNames?: string[];\n  showMinimumRequired?: boolean;\n  showCustom?: boolean;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  allocatablePresetNames,\n  showCustom,\n  showMinimumRequired,\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [resourceSlots] = useResourceSlots();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const [controllableValue, setControllableValue] =\n    useControllableState(selectProps);\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n\n  return (\n    <Select\n      loading={isPendingUpdate}\n      options={[\n        ...(showCustom\n          ? [\n              {\n                value: 'custom',\n                label: (\n                  <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n                    <EditOutlined /> {t('session.launcher.CustomAllocation')}\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.CustomAllocation'),\n              },\n            ]\n          : []),\n        ...(showMinimumRequired\n          ? [\n              {\n                value: 'minimum-required',\n                label: (\n                  <Flex gap={'xs'}>\n                    {t('session.launcher.MiniumAllocation')}\n                    <Tooltip\n                      title={t('session.launcher.MiniumAllocationTooltip')}\n                    >\n                      <InfoCircleOutlined\n                        style={{\n                          color: token.colorTextSecondary,\n                        }}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.MiniumAllocation'),\n              },\n            ]\n          : []),\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset, index) => {\n            const slotsInfo: {\n              [key in ResourceSlotName]: string;\n            } = JSON.parse(preset?.resource_slots || '{}');\n            const disabled = allocatablePresetNames\n              ? !allocatablePresetNames.includes(preset?.name || '')\n              : undefined;\n            return {\n              value: preset?.name,\n              label: (\n                <Flex direction=\"row\" justify=\"between\" gap={'xs'}>\n                  {preset?.name}\n                  <Flex\n                    direction=\"row\"\n                    gap={'xxs'}\n                    style={\n                      {\n                        // color: 'black',\n                        // opacity: isAvailable ? 1 : 0.4,\n                      }\n                    }\n                  >\n                    {_.map(\n                      _.omitBy(slotsInfo, (slot, key) =>\n                        _.isEmpty(resourceSlots[key as ResourceSlotName]),\n                      ),\n                      (slot, key) => {\n                        return (\n                          <ResourceNumber\n                            key={key}\n                            // @ts-ignore\n                            type={key}\n                            value={slot}\n                            hideTooltip\n                          />\n                        );\n                      },\n                    )}\n                  </Flex>\n                </Flex>\n              ),\n              preset,\n              disabled: disabled,\n            };\n          })\n            .sort(\n              (\n                a,\n                b, // by disabled\n              ) => (a.disabled === b.disabled ? 0 : a.disabled ? 1 : -1),\n            )\n            .sort((a, b) => localeCompare(a.value, b.value)), // by name\n        },\n      ]}\n      showSearch\n      // Set props from parent and override it\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValue}\n      optionLabelProp={\n        _.includes(['custom', 'minimum-required'], controllableValue)\n          ? 'selectedLabel'\n          : 'label'\n      }\n      onDropdownVisibleChange={(open) => {\n        selectProps.onDropdownVisibleChange &&\n          selectProps.onDropdownVisibleChange(open);\n        if (open) {\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import {\n  addNumberWithUnits,\n  compareNumberWithUnits,\n  convertBinarySizeUnit,\n} from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport { useCurrentKeyPairResourcePolicyLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupValue,\n} from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport {\n  MergedResourceLimits,\n  ResourcePreset,\n  useResourceLimitAndRemaining,\n} from '../hooks/useResourceLimitAndRemaining';\nimport AgentSelect from './AgentSelect';\nimport DynamicUnitInputNumberWithSlider from './DynamicUnitInputNumberWithSlider';\nimport Flex from './Flex';\nimport {\n  Image,\n  ImageEnvironmentFormInput,\n} from './ImageEnvironmentSelectFormItems';\nimport InputNumberWithSlider from './InputNumberWithSlider';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport { CaretDownOutlined, ReloadOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  Col,\n  Divider,\n  Form,\n  Radio,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { Suspense, useEffect, useMemo, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport const AUTOMATIC_DEFAULT_SHMEM = '64m';\nexport const RESOURCE_ALLOCATION_INITIAL_FORM_VALUES: DeepPartial<ResourceAllocationFormValue> =\n  {\n    resource: {\n      cpu: 0,\n      mem: '0g',\n      shmem: '0g',\n      accelerator: 0,\n    },\n    num_of_sessions: 1,\n    cluster_mode: 'single-node',\n    cluster_size: 1,\n    enabledAutomaticShmem: true,\n    agent: 'auto',\n  };\n\nexport const isMinOversMaxValue = (min: number, max: number) => {\n  return min >= max;\n};\n\nexport interface ResourceAllocationFormValue {\n  resource: {\n    cpu: number;\n    mem: string;\n    shmem: string;\n    accelerator: number;\n    acceleratorType: string;\n  };\n  resourceGroup: string;\n  num_of_sessions?: number;\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  enabledAutomaticShmem: boolean;\n  allocationPreset?: string;\n  agent?: string;\n}\n\ntype MergedResourceAllocationFormValue = ResourceAllocationFormValue &\n  ImageEnvironmentFormInput;\n\ninterface ResourceAllocationFormItemsProps {\n  enableNumOfSessions?: boolean;\n  enableResourcePresets?: boolean;\n  showRemainingWarning?: boolean;\n  forceImageMinValues?: boolean;\n}\n\nconst ResourceAllocationFormItems: React.FC<\n  ResourceAllocationFormItemsProps\n> = ({\n  enableNumOfSessions,\n  enableResourcePresets,\n  forceImageMinValues = false,\n  showRemainingWarning = false,\n}) => {\n  const form = Form.useFormInstance<MergedResourceAllocationFormValue>();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [{ keypairResourcePolicy, sessionLimitAndRemaining }] =\n    useCurrentKeyPairResourcePolicyLazyLoadQuery();\n\n  const [agentFetchKey, updateAgentFetchKey] = useUpdatableState('first');\n  const [isPendingAgentList, startAgentListTransition] = useTransition();\n\n  const currentProject = useCurrentProjectValue();\n  const currentResourceGroup = useCurrentResourceGroupValue(); // use global state\n\n  const currentImage = Form.useWatch(['environments', 'image'], {\n    form,\n    preserve: true,\n  });\n  const currentAllocationPreset = Form.useWatch(['allocationPreset'], {\n    form,\n    preserve: true,\n  });\n  const [{ currentImageMinM, remaining, resourceLimits, checkPresetInfo }] =\n    useResourceLimitAndRemaining({\n      currentProjectName: currentProject.name,\n      currentResourceGroup: currentResourceGroup || undefined, // global currentResourceGroup can be null\n      currentImage: currentImage,\n    });\n\n  const { mergedResourceSlots, resourceSlotsInRG: resourceSlots } =\n    useResourceSlotsDetails(currentResourceGroup || undefined);\n\n  const acceleratorSlots = _.omitBy(resourceSlots, (value, key) => {\n    if (['cpu', 'mem', 'shmem'].includes(key)) return true;\n\n    if (\n      !resourceLimits.accelerators[key]?.max ||\n      resourceLimits.accelerators[key]?.max === 0\n    )\n      return true;\n    return false;\n  });\n\n  const currentImageAcceleratorLimits = useMemo(\n    () =>\n      _.filter(currentImage?.resource_limits, (limit) =>\n        limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n      ),\n    [currentImage?.resource_limits],\n  );\n\n  const sessionSliderLimitAndRemaining = {\n    min: 1,\n    max: sessionLimitAndRemaining.max,\n    remaining: sessionLimitAndRemaining.remaining,\n  };\n\n  const allocatablePresetNames = useMemo(() => {\n    return getAllocatablePresetNames(\n      checkPresetInfo?.presets,\n      resourceLimits,\n      currentImage,\n    );\n  }, [checkPresetInfo?.presets, resourceLimits, currentImage]);\n\n  const ensureValidAcceleratorType = useEventNotStable(() => {\n    const currentAcceleratorType = form.getFieldValue([\n      'resource',\n      'acceleratorType',\n    ]);\n    // If the current accelerator type is not available,\n    // change accelerator type to the first supported accelerator\n    const nextAcceleratorType: string = acceleratorSlots[currentAcceleratorType]\n      ? currentAcceleratorType\n      : _.keys(acceleratorSlots)[0];\n\n    form.setFieldsValue({\n      resource: {\n        acceleratorType: nextAcceleratorType || currentAcceleratorType,\n      },\n    });\n  });\n\n  const updateAllocationPresetBasedOnResourceGroup = useEventNotStable(() => {\n    if (\n      _.includes(\n        ['custom', 'minimum-required'],\n        form.getFieldValue('allocationPreset'),\n      )\n    ) {\n      // if the current preset is custom or minimum-required, do nothing.\n    } else {\n      if (\n        allocatablePresetNames.includes(form.getFieldValue('allocationPreset'))\n      ) {\n        // if the current preset is available in the current resource group, do nothing.\n      } else if (enableResourcePresets && allocatablePresetNames[0]) {\n        const autoSelectedPreset = _.sortBy(allocatablePresetNames)[0];\n        form.setFieldsValue({\n          allocationPreset: autoSelectedPreset,\n        });\n        updateResourceFieldsBasedOnPreset(autoSelectedPreset);\n      } else {\n        // if the current preset is not available in the current resource group, set to custom\n        form.setFieldsValue({\n          allocationPreset: 'custom',\n        });\n      }\n    }\n    ensureValidAcceleratorType();\n    form\n      .validateFields(['resource'], {\n        recursive: true,\n      })\n      .catch(() => {});\n  });\n\n  useEffect(() => {\n    if (currentAllocationPreset === 'auto-select') {\n      currentResourceGroup && updateAllocationPresetBasedOnResourceGroup();\n    }\n  }, [\n    currentResourceGroup,\n    updateAllocationPresetBasedOnResourceGroup,\n    currentAllocationPreset,\n  ]);\n  // update allocation preset based on resource group and current image\n  useEffect(() => {\n    currentResourceGroup && updateAllocationPresetBasedOnResourceGroup();\n  }, [\n    currentResourceGroup,\n    updateAllocationPresetBasedOnResourceGroup,\n    currentImage,\n  ]);\n\n  const updateResourceFieldsBasedOnImage = (force?: boolean) => {\n    // when image changed, set value of resources to min value only if it's larger than current value\n    const minimumResources: Partial<ResourceAllocationFormValue['resource']> = {\n      cpu: resourceLimits.cpu?.min,\n      mem:\n        convertBinarySizeUnit(\n          (convertBinarySizeUnit(resourceLimits.shmem?.min, 'm')?.number || 0) +\n            (convertBinarySizeUnit(resourceLimits.mem?.min, 'm')?.number || 0) +\n            'm',\n          'g',\n        )?.number + 'g', //to prevent loosing precision\n    };\n\n    // NOTE: accelerator value setting is done inside the conditional statement\n    if (currentImageAcceleratorLimits.length > 0) {\n      if (\n        _.find(\n          currentImageAcceleratorLimits,\n          (limit) =>\n            limit?.key === form.getFieldValue(['resource', 'acceleratorType']),\n        )\n      ) {\n        // if current selected accelerator type is supported in the selected image,\n        minimumResources.acceleratorType = form.getFieldValue([\n          'resource',\n          'acceleratorType',\n        ]);\n        minimumResources.accelerator =\n          resourceLimits.accelerators[\n            form.getFieldValue(['resource', 'acceleratorType'])\n          ]?.min;\n      } else {\n        // if current selected accelerator type is not supported in the selected image,\n        // change accelerator type to the first supported accelerator type.\n        const nextImageSelectorType: string | undefined | null = // NOTE:\n          // filter from resourceSlots since resourceSlots and supported image could be non-identical.\n          // resourceSlots returns \"all resources enable to allocate(including AI accelerator)\"\n          // imageAcceleratorLimit returns \"all resources that is supported in the selected image\"\n          _.filter(currentImageAcceleratorLimits, (acceleratorInfo: any) =>\n            _.keys(resourceSlots).includes(acceleratorInfo?.key),\n          )[0]?.key;\n\n        if (nextImageSelectorType) {\n          minimumResources.accelerator =\n            resourceLimits.accelerators[nextImageSelectorType]?.min;\n          minimumResources.acceleratorType = nextImageSelectorType;\n        }\n      }\n    } else {\n      minimumResources.accelerator = 0;\n    }\n\n    if (!forceImageMinValues && !force) {\n      // delete keys that is not less than current value\n      (['cpu', 'accelerator'] as const).forEach((key) => {\n        const minNum = minimumResources[key];\n        if (\n          _.isNumber(minNum) &&\n          minNum < form.getFieldValue(['resource', key])\n        ) {\n          delete minimumResources[key];\n        }\n      });\n      (['mem', 'shmem'] as const).forEach((key) => {\n        const minNumStr = minimumResources[key];\n        if (\n          _.isString(minNumStr) &&\n          compareNumberWithUnits(\n            minNumStr,\n            form.getFieldValue(['resource', key]),\n          ) < 0\n        ) {\n          delete minimumResources[key];\n        }\n      });\n    }\n\n    form.setFieldsValue({\n      resource: {\n        ...minimumResources,\n      },\n    });\n\n    // set to 0 when currentImage doesn't support any AI accelerator\n    if (currentImage && currentImageAcceleratorLimits.length === 0) {\n      form.setFieldValue(['resource', 'accelerator'], 0);\n    }\n\n    if (form.getFieldValue('enabledAutomaticShmem')) {\n      runShmemAutomationRule(form.getFieldValue(['resource', 'mem']) || '0g');\n    }\n    form\n      .validateFields(['resource'], {\n        recursive: true,\n      })\n      .catch(() => {});\n  };\n\n  useEffect(() => {\n    updateResourceFieldsBasedOnImage();\n    // When the currentImage is changed, execute the latest updateResourceFieldsBasedOnImage function.\n    // So we don't need to add `updateResourceFieldsBasedOnImage` to the dependencies.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentImage]);\n\n  const updateResourceFieldsBasedOnPreset = (name: string) => {\n    const preset = _.find(\n      checkPresetInfo?.presets,\n      (preset) => preset.name === name,\n    );\n    const slots = _.pick(preset?.resource_slots, _.keys(resourceSlots));\n    const mem = convertBinarySizeUnit(\n      (slots?.mem || 0) + 'b',\n      'g',\n      2,\n    )?.numberUnit;\n    const acceleratorObj = _.omit(slots, ['cpu', 'mem', 'shmem']);\n\n    // Select the first matched AI accelerator type and value\n    const firstMatchedAcceleratorType = _.find(\n      _.keys(acceleratorSlots),\n      (value) => acceleratorObj[value] !== undefined,\n    );\n\n    let acceleratorSetting: {\n      acceleratorType?: string;\n      accelerator: number;\n    } = {\n      accelerator: 0,\n    };\n    if (firstMatchedAcceleratorType) {\n      acceleratorSetting = {\n        acceleratorType: firstMatchedAcceleratorType,\n        accelerator: Number(acceleratorObj[firstMatchedAcceleratorType] || 0),\n      };\n    }\n    form.setFieldsValue({\n      resource: {\n        // ...slots,\n        ...acceleratorSetting,\n        // transform to GB based on preset values\n        mem,\n        shmem: convertBinarySizeUnit((preset?.shared_memory || 0) + 'b', 'g', 2)\n          ?.numberUnit,\n        cpu: parseInt(slots?.cpu || '0') || 0,\n      },\n    });\n    runShmemAutomationRule(mem || '0g');\n\n    form\n      .validateFields(['resource'], {\n        recursive: true,\n      })\n      .catch(() => {});\n  };\n\n  const runShmemAutomationRule = (M_plus_S: string) => {\n    // if M+S > 4G, S can be 1G regard to current image's minimum mem(M)\n    if (\n      // M+S > 4G\n      compareNumberWithUnits(M_plus_S, '4g') >= 0 &&\n      // M+S > M+1G\n      compareNumberWithUnits(\n        M_plus_S,\n        addNumberWithUnits(currentImageMinM, '1g') || '0b',\n      ) >= 0 &&\n      // if 1G < AUTOMATIC_DEFAULT_SHMEM, no need to apply 1G rule\n      compareNumberWithUnits('1g', AUTOMATIC_DEFAULT_SHMEM) > 0\n    ) {\n      form.setFieldValue(['resource', 'shmem'], '1g');\n    } else {\n      form.setFieldValue(['resource', 'shmem'], AUTOMATIC_DEFAULT_SHMEM);\n    }\n  };\n\n  return (\n    <>\n      <Form.Item\n        name=\"resourceGroup\"\n        label={t('session.ResourceGroup')}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <ResourceGroupSelect projectName={currentProject.name} showSearch />\n        {/* <ResourceGroupSelectForCurrentProject showSearch /> */}\n      </Form.Item>\n\n      {enableResourcePresets ? (\n        <Form.Item\n          label={t('resourcePreset.ResourcePresets')}\n          name=\"allocationPreset\"\n          required\n          style={{ marginBottom: token.marginXS }}\n        >\n          <ResourcePresetSelect\n            showCustom={baiClient._config.allowCustomResourceAllocation}\n            showMinimumRequired={\n              baiClient._config.allowCustomResourceAllocation\n            }\n            onChange={(value, options) => {\n              switch (value) {\n                case 'custom':\n                  break;\n                case 'minimum-required':\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnImage(true);\n                  break;\n                default:\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnPreset(value);\n                  break;\n              }\n            }}\n            allocatablePresetNames={allocatablePresetNames}\n          />\n        </Form.Item>\n      ) : null}\n      <Card\n        style={{\n          marginBottom: token.margin,\n          display: baiClient._config.allowCustomResourceAllocation\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlots?.cpu && (\n                  <Form.Item\n                    name={['resource', 'cpu']}\n                    // initialValue={0}\n                    label={\n                      mergedResourceSlots?.cpu?.human_readable_name || 'CPU'\n                    }\n                    tooltip={{\n                      placement: 'right',\n                      title: <Trans i18nKey={'session.launcher.DescCPU'} />,\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        type: 'number',\n                        min: resourceLimits.cpu?.min,\n                        // TODO: set message\n                      },\n                      {\n                        type: 'number',\n                        max: resourceLimits.cpu?.max,\n                      },\n                      {\n                        warningOnly: true,\n                        validator: async (rule, value: number) => {\n                          if (\n                            _.isNumber(resourceLimits.cpu?.min) &&\n                            _.isNumber(resourceLimits.cpu?.max) &&\n                            isMinOversMaxValue(\n                              resourceLimits.cpu?.min,\n                              resourceLimits.cpu?.max,\n                            )\n                          ) {\n                            return Promise.reject(\n                              t(\n                                'session.launcher.InsufficientAllocationOfResourcesWarning',\n                              ),\n                            );\n                          }\n                          if (showRemainingWarning) {\n                            if (\n                              _.isNumber(remaining.cpu) &&\n                              value > remaining.cpu\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.EnqueueComputeSessionWarning',\n                                ),\n                              );\n                            }\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                    ]}\n                  >\n                    <InputNumberWithSlider\n                      inputNumberProps={{\n                        addonAfter:\n                          mergedResourceSlots?.cpu?.display_unit ||\n                          t('session.launcher.Core'),\n                      }}\n                      sliderProps={{\n                        marks: {\n                          // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                          ...(remaining.cpu\n                            ? {\n                                [remaining.cpu]: {\n                                  label: <RemainingMark />,\n                                },\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.min\n                            ? {\n                                [resourceLimits.cpu?.min]:\n                                  resourceLimits.cpu?.min,\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.max\n                            ? {\n                                [resourceLimits.cpu?.max]: {\n                                  style: {\n                                    color: token.colorTextSecondary,\n                                  },\n                                  label: resourceLimits.cpu?.max,\n                                },\n                              }\n                            : {}),\n                        },\n                      }}\n                      min={resourceLimits.cpu?.min}\n                      max={resourceLimits.cpu?.max}\n                      step={1}\n                      onChange={() => {\n                        form.setFieldValue('allocationPreset', 'custom');\n                      }}\n                    />\n                  </Form.Item>\n                )}\n                {resourceSlots?.mem && (\n                  <Form.Item\n                    label={t('session.launcher.Memory')}\n                    tooltip={{\n                      placement: 'right',\n                      props: {\n                        onClick: (e: any) => e.preventDefault(),\n                      },\n                      title: (\n                        <Flex\n                          direction=\"column\"\n                          onClick={(e) => e.preventDefault()}\n                        >\n                          <Trans i18nKey={'session.launcher.DescMemory'} />\n                          {/* <Divider\n                            style={{\n                              margin: 0,\n                              backgroundColor: token.colorBorderSecondary,\n                            }}\n                          />\n                         \n                          <Trans\n                            i18nKey={'session.launcher.DescSharedMemory'}\n                          /> */}\n                        </Flex>\n                      ),\n                    }}\n                    required\n                  >\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.resource.shmem !== next.resource.shmem\n                      }\n                    >\n                      {() => {\n                        return (\n                          <Form.Item\n                            name={['resource', 'mem']}\n                            noStyle\n                            rules={[\n                              {\n                                required: true,\n                              },\n                              {\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    _.isString(value) &&\n                                    resourceLimits.mem?.max &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.max,\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('general.MaxValueNotification', {\n                                        name: t('session.launcher.Memory'),\n                                        max:\n                                          _.toUpper(\n                                            resourceLimits.mem?.max || '0g',\n                                          ) + 'iB',\n                                      }),\n                                      // t('session.launcher.MinMemory', {\n                                      //   size: _.toUpper(\n                                      //     resourceLimits.mem?.min || '0g',\n                                      //   ),\n                                      // }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                // TODO: min of mem should be shmem + image's mem limit??\n                                validator: async (rule, value: string) => {\n                                  // const memMinPlusShmem =\n                                  //   addNumberWithUnits(\n                                  //     resourceLimits.mem?.min,\n                                  //     form.getFieldValue(['resource', 'shmem']),\n                                  //   ) || '0b';\n\n                                  if (\n                                    !_.isElement(value) &&\n                                    resourceLimits.mem?.min &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.min || '0g',\n                                    ) < 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('session.launcher.MinMemory', {\n                                        size: _.toUpper(\n                                          resourceLimits.mem?.min || '0g',\n                                        ),\n                                      }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                warningOnly: true,\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    compareNumberWithUnits(\n                                      resourceLimits.mem?.min as string,\n                                      resourceLimits.mem?.max as string,\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      t(\n                                        'session.launcher.InsufficientAllocationOfResourcesWarning',\n                                      ),\n                                    );\n                                  }\n                                  if (showRemainingWarning) {\n                                    if (\n                                      !_.isElement(value) &&\n                                      resourceLimits.mem &&\n                                      compareNumberWithUnits(\n                                        value,\n                                        remaining.mem + 'b',\n                                      ) > 0\n                                    ) {\n                                      return Promise.reject(\n                                        t(\n                                          'session.launcher.EnqueueComputeSessionWarning',\n                                        ),\n                                      );\n                                    }\n                                  }\n                                  return Promise.resolve();\n                                },\n                              },\n                            ]}\n                          >\n                            <DynamicUnitInputNumberWithSlider\n                              max={resourceLimits.mem?.max}\n                              // min=\"256m\"\n                              // min={'0g'}\n                              // min={addNumberWithUnits(\n                              //   resourceLimits.mem?.min,\n                              //   form.getFieldValue(['resource', 'shmem']) || '0g',\n                              // )}\n                              min={resourceLimits.mem?.min}\n                              // warn={\n                              //   checkPresetInfo?.scaling_group_remaining.mem ===\n                              //   undefined\n                              //     ? undefined\n                              //     : checkPresetInfo?.scaling_group_remaining.mem + 'g'\n                              // }\n                              addonBefore={'MEM'}\n                              extraMarks={{\n                                // ...(checkPresetInfo?.scaling_group_remaining.mem\n                                //   ? {\n                                //       // @ts-ignore\n                                //       [iSizeToSize(\n                                //         checkPresetInfo?.scaling_group_remaining\n                                //           .mem,\n                                //         'g',\n                                //         3,\n                                //       ).numberFixed]: {\n                                //         label: '-',\n                                //       },\n                                //     }\n                                //   : {}),\n                                // ...(form.getFieldValue(['resource', 'shmem'])\n                                //   ? {\n                                //       [iSizeToSize(\n                                //         form.getFieldValue([\n                                //           'resource',\n                                //           'shmem',\n                                //         ]),\n                                //         'g',\n                                //       )?.number || 0]: (\n                                //         <Flex\n                                //           style={{\n                                //             height: 8,\n                                //             width: 8,\n                                //             borderRadius: 4,\n                                //             backgroundColor: token.colorInfo,\n                                //             position: 'absolute',\n                                //             top: -10,\n                                //             transform: 'translateX(-50%)',\n                                //             opacity: 0.5,\n                                //             pointerEvents: 'none',\n                                //           }}\n                                //         ></Flex>\n                                //       ),\n                                //     }\n                                //   : undefined),\n                                ...(remaining.mem\n                                  ? {\n                                      //@ts-ignore\n                                      [convertBinarySizeUnit(\n                                        remaining.mem + 'b',\n                                        'g',\n                                        3,\n                                      )?.numberFixed]: {\n                                        label: <RemainingMark />,\n                                      },\n                                    }\n                                  : {}),\n                              }}\n                              onChange={(M_plus_S) => {\n                                if (\n                                  !M_plus_S ||\n                                  !form.getFieldValue('enabledAutomaticShmem')\n                                )\n                                  return;\n                                runShmemAutomationRule(M_plus_S);\n\n                                form.setFieldValue(\n                                  'allocationPreset',\n                                  'custom',\n                                );\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n\n                    <Flex direction=\"column\" gap={'xxs'} align=\"start\">\n                      <Flex direction=\"row\" gap={'xs'}>\n                        {t('session.launcher.EnableAutomaticMiniumShmem')}{' '}\n                        <Form.Item\n                          noStyle\n                          name={'enabledAutomaticShmem'}\n                          valuePropName=\"checked\"\n                        >\n                          <Switch\n                            size=\"small\"\n                            onChange={(checked) => {\n                              if (checked) {\n                                runShmemAutomationRule(\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                    '0g',\n                                );\n                              }\n                              form.setFieldValue('allocationPreset', 'custom');\n                            }}\n                          />\n                        </Form.Item>\n                      </Flex>\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prev, next) =>\n                          prev.resource.mem !== next.resource.mem ||\n                          prev.enabledAutomaticShmem !==\n                            next.enabledAutomaticShmem\n                        }\n                      >\n                        {() => {\n                          return (\n                            <Form.Item\n                              noStyle\n                              name={['resource', 'shmem']}\n                              // initialValue={'0g'}\n                              // label={t('session.launcher.SharedMemory')}\n                              hidden={form.getFieldValue(\n                                'enabledAutomaticShmem',\n                              )}\n                              tooltip={\n                                <Trans\n                                  i18nKey={'session.launcher.DescSharedMemory'}\n                                />\n                              }\n                              dependencies={[['resource', 'mem']]}\n                              rules={[\n                                {\n                                  required: true,\n                                },\n                                {},\n                                {\n                                  validator: async (rule, value: string) => {\n                                    if (\n                                      _.isEmpty(\n                                        getFieldValue('resource')?.mem,\n                                      ) ||\n                                      _.isEmpty(value) ||\n                                      compareNumberWithUnits(\n                                        getFieldValue('resource')?.mem,\n                                        value,\n                                      ) >= 0\n                                    ) {\n                                      return Promise.resolve();\n                                    } else {\n                                      throw t(\n                                        'resourcePreset.SHMEMShouldBeSmallerThanMemory',\n                                      );\n                                    }\n                                  },\n                                },\n                              ]}\n                            >\n                              <DynamicUnitInputNumberWithSlider\n                                // shmem max is mem max\n                                // min={resourceLimits.shmem?.min}\n                                min={resourceLimits.shmem?.min}\n                                // max={resourceLimits.mem?.max || '0g'}\n                                addonBefore={'SHM'}\n                                max={\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                  '0g'\n                                }\n                                hideSlider\n                                onChange={() => {\n                                  form.setFieldValue(\n                                    'allocationPreset',\n                                    'custom',\n                                  );\n                                }}\n                              />\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                )}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) => {\n                    return (\n                      prev.resource?.acceleratorType !==\n                        next.resource?.acceleratorType ||\n                      // ref: https://github.com/lablup/backend.ai-webui/issues/868\n                      // change gpu step to 1 when cluster_size > 1\n                      prev.cluster_size !== next.cluster_size\n                    );\n                  }}\n                >\n                  {({ getFieldValue }) => {\n                    const currentAcceleratorType = getFieldValue([\n                      'resource',\n                      'acceleratorType',\n                    ]);\n                    return (\n                      <Form.Item\n                        name={['resource', 'accelerator']}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        tooltip={{\n                          placement: 'right',\n                          title: (\n                            <Trans\n                              i18nKey={'session.launcher.DescAIAccelerator'}\n                            />\n                          ),\n                        }}\n                        rules={[\n                          {\n                            required: currentImageAcceleratorLimits.length > 0,\n                          },\n                          {\n                            type: 'number',\n                            min:\n                              resourceLimits.accelerators[\n                                currentAcceleratorType\n                              ]?.min || 0,\n                            max: resourceLimits.accelerators[\n                              currentAcceleratorType\n                            ]?.max,\n                          },\n                          {\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.endsWith(currentAcceleratorType, 'shares') &&\n                                form.getFieldValue('cluster_size') >= 2 &&\n                                value % 1 !== 0\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.OnlyAllowsDiscreteNumberByClusterSize',\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                          {\n                            warningOnly: true,\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.isNumber(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.min,\n                                ) &&\n                                _.isNumber(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.max,\n                                ) &&\n                                isMinOversMaxValue(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.min,\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.max,\n                                )\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.InsufficientAllocationOfResourcesWarning',\n                                  ),\n                                );\n                              }\n                              if (showRemainingWarning) {\n                                if (\n                                  _.isNumber(\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ],\n                                  ) &&\n                                  value >\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]\n                                ) {\n                                  return Promise.reject(\n                                    t(\n                                      'session.launcher.EnqueueComputeSessionWarning',\n                                    ),\n                                  );\n                                }\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          sliderProps={{\n                            marks: {\n                              0: 0,\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.accelerators[currentAcceleratorType]\n                                ? {\n                                    [remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(\n                                resourceLimits.accelerators[\n                                  currentAcceleratorType\n                                ]?.max,\n                              )\n                                ? {\n                                    // @ts-ignore\n                                    [resourceLimits.accelerators[\n                                      currentAcceleratorType\n                                    ]?.max]:\n                                      resourceLimits.accelerators[\n                                        currentAcceleratorType\n                                      ]?.max,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${mergedResourceSlots?.[currentAcceleratorType]?.display_unit || ''}`;\n                              },\n                              open:\n                                currentImageAcceleratorLimits.length <= 0\n                                  ? false\n                                  : undefined,\n                            },\n                          }}\n                          disabled={\n                            currentImageAcceleratorLimits.length === 0 &&\n                            _.isEmpty(\n                              form.getFieldValue(['environments', 'manual']),\n                            )\n                          }\n                          min={0}\n                          max={\n                            resourceLimits.accelerators[currentAcceleratorType]\n                              ?.max\n                          }\n                          step={\n                            _.endsWith(currentAcceleratorType, 'shares') &&\n                            form.getFieldValue('cluster_size') < 2\n                              ? 0.1\n                              : 1\n                          }\n                          onChange={() => {\n                            form.setFieldValue('allocationPreset', 'custom');\n                          }}\n                          inputNumberProps={{\n                            addonAfter: (\n                              <Form.Item\n                                noStyle\n                                name={['resource', 'acceleratorType']}\n                                initialValue={_.keys(acceleratorSlots)[0]}\n                              >\n                                <Select\n                                  tabIndex={-1}\n                                  disabled={\n                                    currentImageAcceleratorLimits.length ===\n                                      0 &&\n                                    _.isEmpty(\n                                      form.getFieldValue([\n                                        'environments',\n                                        'manual',\n                                      ]),\n                                    )\n                                  }\n                                  suffixIcon={\n                                    _.size(acceleratorSlots) > 1\n                                      ? undefined\n                                      : null\n                                  }\n                                  // open={\n                                  //   _.size(acceleratorSlots) > 1\n                                  //     ? undefined\n                                  //     : false\n                                  // }\n                                  popupMatchSelectWidth={false}\n                                  options={_.map(\n                                    acceleratorSlots,\n                                    (value, name) => {\n                                      return {\n                                        value: name,\n                                        label:\n                                          mergedResourceSlots?.[name]\n                                            ?.display_unit || 'UNIT',\n                                        disabled:\n                                          currentImageAcceleratorLimits.length >\n                                            0 &&\n                                          !_.find(\n                                            currentImageAcceleratorLimits,\n                                            (limit) => limit?.key === name,\n                                          ),\n                                      };\n                                    },\n                                  )}\n                                />\n                              </Form.Item>\n                            ),\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n      {enableNumOfSessions ? (\n        <Card\n          style={{\n            marginBottom: token.margin,\n          }}\n        >\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.cluster_size !== next.cluster_size\n            }\n          >\n            {() => {\n              return (\n                <Form.Item\n                  name={['num_of_sessions']}\n                  label={t('webui.menu.Sessions')}\n                  tooltip={<Trans i18nKey={'session.launcher.DescSession'} />}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                    },\n                    {\n                      warningOnly: true,\n                      validator: async (rule, value: number) => {\n                        if (showRemainingWarning) {\n                          if (\n                            sessionSliderLimitAndRemaining &&\n                            value > sessionSliderLimitAndRemaining.remaining\n                          ) {\n                            return Promise.reject(\n                              t(\n                                'session.launcher.EnqueueComputeSessionWarning',\n                              ),\n                            );\n                          }\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumberWithSlider\n                    inputNumberProps={{\n                      addonAfter: '#',\n                    }}\n                    disabled={form.getFieldValue('cluster_size') > 1}\n                    sliderProps={{\n                      marks: {\n                        [sessionSliderLimitAndRemaining?.min]:\n                          sessionSliderLimitAndRemaining?.min,\n                        // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                        ...(sessionSliderLimitAndRemaining?.remaining\n                          ? {\n                              [sessionSliderLimitAndRemaining?.remaining]: {\n                                label: <RemainingMark />,\n                              },\n                            }\n                          : {}),\n                        [sessionSliderLimitAndRemaining?.max]:\n                          sessionSliderLimitAndRemaining?.max,\n                      },\n                    }}\n                    min={sessionSliderLimitAndRemaining?.min}\n                    max={sessionSliderLimitAndRemaining?.max}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Form.Item>\n        </Card>\n      ) : null}\n      {/* TODO: Support cluster mode */}\n      {!baiClient._config.hideAgents && (\n        <Form.Item\n          label={t('session.launcher.SelectAgent')}\n          required\n          tooltip={<Trans i18nKey={'session.launcher.DescSelectAgent'} />}\n        >\n          <Flex gap={'xs'}>\n            <Suspense>\n              <Form.Item required noStyle style={{ flex: 1 }} name=\"agent\">\n                {baiClient.supports('agent-select') && (\n                  <AgentSelect\n                    resourceGroup={currentResourceGroup}\n                    fetchKey={agentFetchKey}\n                    onChange={(value, option) => {\n                      if (value !== 'auto') {\n                        form.setFieldsValue({\n                          cluster_mode: 'single-node',\n                          cluster_size: 1,\n                        });\n                      }\n                      // TODO: set cluster mode to single node and cluster size to 1 when agent value is not \"auto\"\n                    }}\n                  ></AgentSelect>\n                )}\n              </Form.Item>\n            </Suspense>\n            <Form.Item noStyle>\n              <Button\n                loading={isPendingAgentList}\n                onClick={() => {\n                  startAgentListTransition(() => updateAgentFetchKey());\n                }}\n                icon={<ReloadOutlined />}\n              ></Button>\n            </Form.Item>\n          </Flex>\n        </Form.Item>\n      )}\n      {baiClient.supports('multi-container') && (\n        // {false && (\n        <Form.Item\n          label={t('session.launcher.ClusterMode')}\n          tooltip={\n            <Flex direction=\"column\" align=\"start\">\n              {t('session.launcher.SingleNode')}\n              <Trans i18nKey={'session.launcher.DescSingleNode'} />\n              <Divider style={{ backgroundColor: token.colorBorder }} />\n              {t('session.launcher.MultiNode')}\n              <Trans i18nKey={'session.launcher.DescMultiNode'} />\n            </Flex>\n          }\n          required\n          dependencies={['agent']}\n        >\n          {({ getFieldValue }) => {\n            return (\n              <Card\n                style={{\n                  marginBottom: token.margin,\n                }}\n              >\n                <Row gutter={token.marginMD}>\n                  <Col xs={24}>\n                    {/* <Col xs={24} lg={12}> */}\n                    <Form.Item name={'cluster_mode'} required>\n                      <Radio.Group\n                        onChange={(e) => {\n                          form.validateFields().catch(() => {});\n                        }}\n                        disabled={getFieldValue('agent') !== 'auto'}\n                      >\n                        <Radio.Button value=\"single-node\">\n                          {t('session.launcher.SingleNode')}\n                        </Radio.Button>\n                        <Radio.Button value=\"multi-node\">\n                          {t('session.launcher.MultiNode')}\n                        </Radio.Button>\n                      </Radio.Group>\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24}>\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.cluster_mode !== next.cluster_mode\n                      }\n                    >\n                      {() => {\n                        const derivedClusterSizeMaxLimit = _.min([\n                          resourceLimits.cpu?.max,\n                          keypairResourcePolicy.max_containers_per_session,\n                        ]);\n                        const clusterUnit =\n                          form.getFieldValue('cluster_mode') === 'single-node'\n                            ? t('session.launcher.Container')\n                            : t('session.launcher.Node');\n                        return (\n                          <Form.Item\n                            name={'cluster_size'}\n                            label={t('session.launcher.ClusterSize')}\n                            required\n                            rules={[\n                              {\n                                warningOnly: true,\n                                validator: async (rule, value: number) => {\n                                  if (showRemainingWarning) {\n                                    const minCPU = _.min([\n                                      remaining.cpu,\n                                      keypairResourcePolicy.max_containers_per_session,\n                                    ]);\n                                    if (_.isNumber(minCPU) && value > minCPU) {\n                                      return Promise.reject(\n                                        t(\n                                          'session.launcher.EnqueueComputeSessionWarning',\n                                        ),\n                                      );\n                                    }\n                                  }\n                                  return Promise.resolve();\n                                },\n                              },\n                            ]}\n                          >\n                            <InputNumberWithSlider\n                              min={1}\n                              step={1}\n                              // TODO: max cluster size\n                              max={\n                                _.isNumber(derivedClusterSizeMaxLimit)\n                                  ? derivedClusterSizeMaxLimit\n                                  : undefined\n                              }\n                              disabled={\n                                derivedClusterSizeMaxLimit === 1 ||\n                                getFieldValue('agent') !== 'auto'\n                              }\n                              sliderProps={{\n                                marks: {\n                                  1: '1',\n                                  // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                                  ...(remaining.cpu\n                                    ? {\n                                        [remaining.cpu]: {\n                                          label: <RemainingMark />,\n                                        },\n                                      }\n                                    : {}),\n                                  ...(_.isNumber(derivedClusterSizeMaxLimit)\n                                    ? {\n                                        [derivedClusterSizeMaxLimit]:\n                                          derivedClusterSizeMaxLimit,\n                                      }\n                                    : {}),\n                                },\n                                tooltip: {\n                                  formatter: (value = 0) => {\n                                    return `${value} ${clusterUnit}`;\n                                  },\n                                },\n                              }}\n                              inputNumberProps={{\n                                addonAfter: clusterUnit,\n                              }}\n                              onChange={(value) => {\n                                if (value > 1) {\n                                  form.setFieldValue('num_of_sessions', 1);\n                                }\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            );\n          }}\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nconst RemainingMark: React.FC<{ title?: string }> = () => {\n  const { token } = theme.useToken();\n  return (\n    <Flex\n      style={{\n        position: 'absolute',\n        top: -24,\n        transform: 'translateX(-50%)',\n        color: token.colorSuccess,\n        opacity: 0.5,\n      }}\n    >\n      <CaretDownOutlined />\n    </Flex>\n  );\n};\n\nconst MemoizedResourceAllocationFormItems = React.memo(\n  ResourceAllocationFormItems,\n);\n\nexport default MemoizedResourceAllocationFormItems;\n\nexport const getAllocatablePresetNames = (\n  presets: Array<ResourcePreset> | undefined,\n  resourceLimits: MergedResourceLimits,\n  currentImage: Image,\n) => {\n  const currentImageAcceleratorLimits = _.filter(\n    currentImage?.resource_limits,\n    (limit) =>\n      limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n  );\n\n  const bySliderLimit = _.filter(presets, (preset) => {\n    // After allow pending session, we don't need to check allocatable field.\n    // if (_.has(preset, 'allocatable')) {\n    //   return !!preset.allocatable;\n    // }\n\n    // Check if all resource slots in the preset are less than or equal to resourceLimits\n    // Be careful with the type of values in resourceLimits, they are string or number\n    return _.every(preset.resource_slots, (value, key) => {\n      if (key === 'mem') {\n        // if mem resource limit is not defined, it is UNLIMITED\n        const isNoLimit = typeof resourceLimits[key]?.max !== 'string';\n        return isNoLimit\n          ? true\n          : typeof preset.resource_slots[key] === 'string' &&\n              typeof resourceLimits[key]?.max === 'string' &&\n              compareNumberWithUnits(\n                preset.resource_slots[key],\n                resourceLimits[key]?.max,\n              ) <= 0;\n      } else if (key === 'shmem') {\n        // no need to check shmem\n        return true;\n      } else if (key === 'cpu') {\n        // if cpu resource limit is not defined, it is UNLIMITED\n        const isNoLimit = _.isNaN(_.toNumber(resourceLimits[key]?.max));\n        return isNoLimit\n          ? true\n          : (_.toNumber(preset.resource_slots[key]) || 0) <=\n              _.toNumber(resourceLimits[key]?.max);\n      } else {\n        // if accelerator resource limit is not defined, it is UNLIMITED\n        const isNoLimit = _.isNaN(\n          _.toNumber(resourceLimits.accelerators[key]?.max),\n        );\n        return isNoLimit\n          ? true\n          : (_.toNumber(preset.resource_slots[key]) || 0) <=\n              _.toNumber(resourceLimits.accelerators[key]?.max);\n      }\n    });\n  }).map((preset) => preset.name);\n\n  const byImageAcceleratorLimits = _.filter(presets, (preset) => {\n    const acceleratorResourceOfPreset = _.omitBy(\n      preset.resource_slots,\n      (value, key) => {\n        if (['mem', 'cpu', 'shmem'].includes(key)) return true;\n      },\n    );\n    if (currentImageAcceleratorLimits.length === 0) {\n      // When current image doesn't require any accelerator,\n      // It's available if the preset doesn't have any accelerator\n      if (_.isEmpty(acceleratorResourceOfPreset)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      // When current image requires some accelerator,\n      // It's available if the preset has a required accelerator value that is larger than the current image's minimum value\n      return _.some(currentImageAcceleratorLimits, (limit) => {\n        return (\n          limit?.key &&\n          acceleratorResourceOfPreset[limit?.key] &&\n          _.toNumber(acceleratorResourceOfPreset[limit?.key]) >=\n            _.toNumber(limit?.min)\n        );\n      });\n    }\n  }).map((preset) => preset.name);\n  return currentImageAcceleratorLimits.length === 0\n    ? bySliderLimit\n    : _.intersection(bySliderLimit, byImageAcceleratorLimits);\n};\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport TextHighlighter from './TextHighlighter';\nimport { Select, SelectProps } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\n\ninterface ResourceGroupSelectProps extends SelectProps {\n  projectName: string;\n  autoSelectDefault?: boolean;\n  filter?: (projectName: string) => boolean;\n}\n\nconst ResourceGroupSelect: React.FC<ResourceGroupSelectProps> = ({\n  projectName,\n  autoSelectDefault,\n  filter,\n  searchValue,\n  onSearch,\n  loading,\n  ...selectProps\n}) => {\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const [fetchKey] = useUpdatableState('first');\n  const [controllableSearchValue, setControllableSearchValue] =\n    useControllableState<string>({\n      value: searchValue,\n      onChange: onSearch,\n    });\n\n  const [controllableValue, setControllableValue] =\n    useControllableState(selectProps);\n\n  const { data: resourceGroupSelectQueryResult } = useSuspenseTanQuery<\n    [\n      {\n        scaling_groups: {\n          name: string;\n        }[];\n      },\n      {\n        allowed: string[];\n        default: string;\n        volume_info: {\n          [key: string]: {\n            backend: string;\n            capabilities: string[];\n            usage: {\n              percentage: number;\n            };\n            sftp_scaling_groups?: string[];\n          };\n        };\n      },\n    ]\n  >({\n    queryKey: ['ResourceGroupSelectQuery', projectName],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      search.set('group', projectName);\n      return Promise.all([\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/scaling-groups?${search.toString()}`,\n        }),\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/folders/_/hosts`,\n        }),\n      ]);\n    },\n    staleTime: 0,\n    fetchKey: fetchKey,\n  });\n\n  const sftpResourceGroups = _.flatMap(\n    resourceGroupSelectQueryResult?.[1].volume_info,\n    (item) => item?.sftp_scaling_groups ?? [],\n  );\n\n  const resourceGroups = _.filter(\n    resourceGroupSelectQueryResult?.[0].scaling_groups,\n    (item) => {\n      if (_.includes(sftpResourceGroups, item.name)) {\n        return false;\n      }\n      if (filter) {\n        return filter(item.name);\n      }\n      return true;\n    },\n  );\n\n  useEffect(() => {\n    if (\n      controllableValue &&\n      !_.some(resourceGroups, (item) => item.name === controllableValue)\n    ) {\n      setControllableValue(undefined);\n    }\n  }, [resourceGroups, controllableValue, setControllableValue]);\n  const autoSelectedResourceGroup =\n    _.find(resourceGroups, (item) => item.name === 'default') ||\n    resourceGroups[0];\n  const autoSelectedOption = autoSelectedResourceGroup\n    ? {\n        label: autoSelectedResourceGroup.name,\n        value: autoSelectedResourceGroup.name,\n      }\n    : undefined;\n\n  useEffect(() => {\n    if (\n      autoSelectDefault &&\n      autoSelectedOption &&\n      autoSelectedOption.value !== selectProps.value\n    ) {\n      setControllableValue(autoSelectedOption.value, autoSelectedOption);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoSelectDefault]);\n\n  const searchProps: Pick<\n    SelectProps,\n    'onSearch' | 'searchValue' | 'showSearch'\n  > = selectProps.showSearch\n    ? {\n        onSearch: setControllableSearchValue,\n        searchValue: controllableSearchValue,\n        showSearch: true,\n      }\n    : {};\n\n  return (\n    <Select\n      defaultActiveFirstOption\n      {...searchProps}\n      defaultValue={autoSelectDefault ? autoSelectedOption : undefined}\n      onDropdownVisibleChange={(open) => {\n        // if (open) {\n        //   startLoadingTransition(() => {\n        //     updateFetchKey();\n        //   });\n        // }\n      }}\n      loading={loading}\n      options={_.map(resourceGroups, (resourceGroup) => {\n        return { value: resourceGroup.name, label: resourceGroup.name };\n      })}\n      optionRender={(option) => {\n        return (\n          <TextHighlighter keyword={controllableSearchValue}>\n            {option.data.value?.toString()}\n          </TextHighlighter>\n        );\n      }}\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValue}\n    />\n  );\n};\n\nexport default ResourceGroupSelect;\n","import { convertBinarySizeUnit } from '../helper';\nimport {\n  BaseResourceSlotName,\n  KnownAcceleratorResourceSlotName,\n  ResourceSlotName,\n  useResourceSlotsDetails,\n} from '../hooks/backendai';\nimport { useCurrentResourceGroupValue } from '../hooks/useCurrentProject';\nimport Flex from './Flex';\nimport { Tooltip, Typography, theme } from 'antd';\nimport _ from 'lodash';\nimport { MicrochipIcon } from 'lucide-react';\nimport React, { ReactElement } from 'react';\n\nexport type ResourceOpts = {\n  shmem?: number;\n};\ninterface ResourceNumberProps {\n  type: ResourceSlotName | string;\n  extra?: ReactElement;\n  opts?: ResourceOpts;\n  value: string;\n  hideTooltip?: boolean;\n  max?: string;\n}\n\ntype ResourceTypeInfo<V> = {\n  [key in KnownAcceleratorResourceSlotName]: V;\n} & {\n  [key in BaseResourceSlotName]: V;\n};\nconst ResourceNumber: React.FC<ResourceNumberProps> = ({\n  type,\n  value: amount,\n  extra,\n  opts,\n  hideTooltip = false,\n  max,\n}) => {\n  const { token } = theme.useToken();\n  const currentGroup = useCurrentResourceGroupValue();\n  const { mergedResourceSlots } = useResourceSlotsDetails(\n    currentGroup || undefined,\n  );\n\n  const formatAmount = (amount: string) => {\n    return mergedResourceSlots?.[type]?.number_format.binary\n      ? Number(\n          convertBinarySizeUnit(amount, 'g', 3, true)?.numberFixed,\n        ).toString()\n      : (mergedResourceSlots?.[type]?.number_format.round_length || 0) > 0\n        ? parseFloat(amount).toFixed(2)\n        : amount;\n  };\n\n  return (\n    <Flex direction=\"row\" gap=\"xxs\">\n      {mergedResourceSlots?.[type] ? (\n        <ResourceTypeIcon type={type} showTooltip={!hideTooltip} />\n      ) : (\n        type\n      )}\n\n      <Typography.Text>\n        {formatAmount(amount)}\n        {_.isUndefined(max)\n          ? null\n          : max === 'Infinity'\n            ? '~∞'\n            : `~${formatAmount(max)}`}\n      </Typography.Text>\n      <Typography.Text type=\"secondary\">\n        {mergedResourceSlots?.[type]?.display_unit || ''}\n      </Typography.Text>\n      {type === 'mem' && opts?.shmem && opts?.shmem > 0 ? (\n        <Typography.Text\n          type=\"secondary\"\n          style={{ fontSize: token.fontSizeSM }}\n        >\n          (SHM:{' '}\n          {convertBinarySizeUnit(opts.shmem + 'b', 'g', 2, true)?.numberFixed}\n          GiB)\n        </Typography.Text>\n      ) : null}\n      {extra}\n    </Flex>\n  );\n};\n\nconst MWCIconWrap: React.FC<{ size?: number; children: string }> = ({\n  size = 16,\n  children,\n}) => {\n  return (\n    // @ts-ignore\n    <mwc-icon\n      style={{\n        '--mdc-icon-size': `${size + 2}px`,\n        width: size,\n        height: size,\n      }}\n    >\n      {children}\n      {/* @ts-ignore */}\n    </mwc-icon>\n  );\n};\ninterface AccTypeIconProps\n  extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'src'> {\n  type: ResourceSlotName | string;\n  showIcon?: boolean;\n  showUnit?: boolean;\n  showTooltip?: boolean;\n  size?: number;\n}\nexport const ResourceTypeIcon: React.FC<AccTypeIconProps> = ({\n  type,\n  size = 16,\n  showIcon = true,\n  showUnit = true,\n  showTooltip = true,\n  ...props\n}) => {\n  const resourceTypeIconSrcMap: ResourceTypeInfo<ReactElement | string> = {\n    cpu: <MWCIconWrap size={size}>developer_board</MWCIconWrap>,\n    mem: <MWCIconWrap size={size}>memory</MWCIconWrap>,\n    'cuda.device': '/resources/icons/file_type_cuda.svg',\n    'cuda.shares': '/resources/icons/file_type_cuda.svg',\n    'rocm.device': '/resources/icons/rocm.svg',\n    'tpu.device': <MWCIconWrap size={size}>view_module</MWCIconWrap>,\n    'ipu.device': <MWCIconWrap size={size}>view_module</MWCIconWrap>,\n    'atom.device': '/resources/icons/rebel.svg',\n    'atom-plus.device': '/resources/icons/rebel.svg',\n    'gaudi2.device': '/resources/icons/gaudi.svg',\n    'warboy.device': '/resources/icons/furiosa.svg',\n    'rngd.device': '/resources/icons/furiosa.svg',\n    'hyperaccel-lpu.device': '/resources/icons/npu_generic.svg',\n  };\n\n  const targetIcon = resourceTypeIconSrcMap[\n    type as KnownAcceleratorResourceSlotName\n  ] ?? <MicrochipIcon />;\n\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n\n  const content =\n    typeof targetIcon === 'string' ? (\n      <img\n        {...props}\n        style={{\n          height: size,\n          alignSelf: 'center',\n          ...(props.style || {}),\n        }}\n        // @ts-ignore\n        src={resourceTypeIconSrcMap[type] || ''}\n        alt={type}\n      />\n    ) : (\n      <Flex style={{ width: 16, height: 16 }}>{targetIcon || type}</Flex>\n    );\n\n  return showTooltip ? (\n    <Tooltip title={mergedResourceSlots[type]?.description || type}>\n      {content}\n    </Tooltip>\n  ) : (\n    <Flex style={{ pointerEvents: 'none' }}>{content}</Flex>\n  );\n};\n\nexport default React.memo(ResourceNumber);\n","/**\n * @generated SignedSource<<fb92e3350cf8934880a2a423652d33ed>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type AgentSelectQuery$variables = {\n  filter?: string | null | undefined;\n  limit: number;\n  offset: number;\n  scaling_group?: string | null | undefined;\n  status?: string | null | undefined;\n};\nexport type AgentSelectQuery$data = {\n  readonly agent_summary_list: {\n    readonly items: ReadonlyArray<{\n      readonly architecture: string | null | undefined;\n      readonly available_slots: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly occupied_slots: string | null | undefined;\n      readonly schedulable: boolean | null | undefined;\n      readonly status: string | null | undefined;\n    } | null | undefined>;\n    readonly total_count: number;\n  } | null | undefined;\n};\nexport type AgentSelectQuery = {\n  response: AgentSelectQuery$data;\n  variables: AgentSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"scaling_group\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv5 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"filter\",\n        \"variableName\": \"filter\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"limit\",\n        \"variableName\": \"limit\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"offset\",\n        \"variableName\": \"offset\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"scaling_group\",\n        \"variableName\": \"scaling_group\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"status\",\n        \"variableName\": \"status\"\n      }\n    ],\n    \"concreteType\": \"AgentSummaryList\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"agent_summary_list\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"AgentSummary\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"items\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"status\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"schedulable\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"available_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"occupied_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"architecture\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"total_count\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentSelectQuery\",\n    \"selections\": (v5/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v4/*: any*/),\n      (v0/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"AgentSelectQuery\",\n    \"selections\": (v5/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"57b0881c2a4e4ba1bdeceb88d9ec41bd\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AgentSelectQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $status: String\\n  $filter: String\\n  $scaling_group: String\\n) {\\n  agent_summary_list(limit: $limit, offset: $offset, status: $status, filter: $filter, scaling_group: $scaling_group) {\\n    items {\\n      id\\n      status\\n      schedulable\\n      available_slots\\n      occupied_slots\\n      architecture\\n    }\\n    total_count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"a3558359a8ee951a4caa89c783133e85\";\n\nexport default node;\n","/**\n * @generated SignedSource<<d57c0906be259f6cb8e6f9de84e5a76e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = Record<PropertyKey, never>;\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null | undefined;\n    readonly resource_slots: string | null | undefined;\n    readonly shared_memory: any | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","export const UNLIMITED_MAX_CONTAINERS_PER_SESSIONS = 1000000;\nexport const UNLIMITED_MAX_CONCURRENT_SESSIONS = 1000000;\n","/**\n * @generated SignedSource<<738d3da4b0ca50f89164ba3ccebe320e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairQuery$variables = {\n  accessKey: string;\n};\nexport type hooksUsingRelay_KeyPairQuery$data = {\n  readonly keypair: {\n    readonly concurrency_used: number | null | undefined;\n    readonly id: string | null | undefined;\n    readonly resource_policy: string | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairQuery = {\n  response: hooksUsingRelay_KeyPairQuery$data;\n  variables: hooksUsingRelay_KeyPairQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"accessKey\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"access_key\",\n        \"variableName\": \"accessKey\"\n      }\n    ],\n    \"concreteType\": \"KeyPair\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_policy\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"concurrency_used\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1f8fc324e9907111de581f5cd2dc3640\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairQuery(\\n  $accessKey: String!\\n) {\\n  keypair(access_key: $accessKey) {\\n    id\\n    resource_policy\\n    concurrency_used\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8f5c91f0fc46a3366f57566ab688d81\";\n\nexport default node;\n","/**\n * @generated SignedSource<<77cdd03490e0b80daf3cd368360b2198>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$variables = {\n  name: string;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$data = {\n  readonly keypair_resource_policy: {\n    readonly max_concurrent_sessions: number | null | undefined;\n    readonly max_containers_per_session: number | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery = {\n  response: hooksUsingRelay_KeyPairResourcePolicyQuery$data;\n  variables: hooksUsingRelay_KeyPairResourcePolicyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_containers_per_session\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_concurrent_sessions\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ad7039c1935637fe3f3841f0ea8bf347\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairResourcePolicyQuery(\\n  $name: String!\\n) {\\n  keypair_resource_policy(name: $name) {\\n    max_containers_per_session\\n    max_concurrent_sessions\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f3f7364c63aefe9b03111b584c48c103\";\n\nexport default node;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { UNLIMITED_MAX_CONCURRENT_SESSIONS } from '../helper/const-vars';\nimport { hooksUsingRelay_KeyPairQuery } from './__generated__/hooksUsingRelay_KeyPairQuery.graphql';\nimport { hooksUsingRelay_KeyPairResourcePolicyQuery } from './__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useCallback } from 'react';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ninterface FetchOptions {\n  fetchKey?: string | number;\n  fetchPolicy?: FetchPolicy;\n}\nexport const useKeyPairLazyLoadQuery = (\n  accessKey: string,\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { keypair } = useLazyLoadQuery<hooksUsingRelay_KeyPairQuery>(\n    graphql`\n      query hooksUsingRelay_KeyPairQuery($accessKey: String!) {\n        keypair(access_key: $accessKey) {\n          id\n          resource_policy\n          concurrency_used\n        }\n      }\n    `,\n    {\n      accessKey: accessKey,\n    },\n    {\n      ...options,\n      fetchKey: fetchKey + options.fetchKey,\n    },\n  );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [keypair, { refresh }] as const;\n};\n\nexport const useCurrentKeyPairResourcePolicyLazyLoadQuery = (\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const { keypair_resource_policy } =\n    useLazyLoadQuery<hooksUsingRelay_KeyPairResourcePolicyQuery>(\n      graphql`\n        query hooksUsingRelay_KeyPairResourcePolicyQuery($name: String!) {\n          keypair_resource_policy(name: $name) {\n            max_containers_per_session\n            max_concurrent_sessions\n          }\n        }\n      `,\n      {\n        name: keypair?.resource_policy || '',\n      },\n      {\n        ...options,\n        fetchKey: fetchKey + options.fetchKey,\n      },\n    );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [\n    {\n      keypairResourcePolicy: (keypair_resource_policy || {}) as NonNullable<\n        typeof keypair_resource_policy\n      >,\n      keypair: (keypair || {}) as NonNullable<typeof keypair>,\n      sessionLimitAndRemaining: {\n        max: _.min([\n          (keypair_resource_policy || {}).max_concurrent_sessions ||\n            UNLIMITED_MAX_CONCURRENT_SESSIONS,\n          3, //BackendAiResourceBroker.DEFAULT_CONCURRENT_SESSION_COUNT\n        ]) as number,\n        remaining:\n          ((keypair_resource_policy || {}).max_concurrent_sessions || 3) -\n          ((keypair || {}).concurrency_used || 0),\n      },\n    },\n    { refresh },\n  ] as const;\n};\n","// import { offset_to_cursor } from \"../helper\";\nimport { LazyLoadQueryOptions } from '../helper/types';\nimport { SorterResult } from 'antd/lib/table/interface';\nimport _ from 'lodash';\nimport { useState } from 'react';\nimport {\n  fetchQuery,\n  GraphQLTaggedNode,\n  useRelayEnvironment,\n} from 'react-relay';\nimport {\n  ArrayParam,\n  NumberParam,\n  ObjectParam,\n  StringParam,\n  useQueryParams,\n} from 'use-query-params';\n\nexport type SorterInterface = Pick<SorterResult<any>, 'field' | 'order'>;\n\nexport const antdSorterResultToOrder = (\n  sorter: SorterInterface | SorterInterface[],\n) => {\n  const sorterArray = _.castArray(sorter).filter((s) => s.field);\n\n  return _.filter(\n    _.map(sorterArray, (s) =>\n      _.isNull(s.order)\n        ? undefined\n        : `${_.snakeCase(s.field as string).toUpperCase()}_${\n            s.order === 'ascend' ? 'ASC' : 'DESC'\n          }`,\n    ),\n  );\n};\n\nexport const orderToAntdSorterResult = (order: string[]) => {\n  return _.map(order, (o) => {\n    const names = o.split('_');\n    const orderKey = names.pop();\n    const field = _.camelCase(names.join('_'));\n    return {\n      field,\n      order: (orderKey === 'ASC' ? 'ascend' : 'descend') as\n        | 'ascend'\n        | 'descend'\n        | null,\n    };\n  });\n};\n\nexport const getSortOrderByName = (order: string[], name: string) => {\n  const sorterResult = orderToAntdSorterResult(order);\n  const sorter = _.find(sorterResult, (s) => s.field === name);\n  return sorter?.order;\n};\n\nexport const useRelayPaginationQueryOptions = <\n  // Q, N,\n  O,\n  F,\n>({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      first: pageSize,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n      order: order,\n      filter: filter,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n    // sorter?: SorterResult<N>[];\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n  }) => any;\n}) => {\n  const [isPending, setIsPending] = useState(false);\n\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    order: ArrayParam,\n    filter: ObjectParam,\n  });\n\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  //TODO: not use as\n  const order = (params.order || defaultVariables.order) as O[];\n  const filter = (params.filter || defaultVariables.filter) as F;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    // sorter: SorterResult<N>[],\n    newOrder: O[] = defaultVariables.order,\n    newFilter: F | undefined = defaultVariables.filter,\n    options?: {\n      withoutPendingStatus: boolean;\n    },\n  ) => {\n    if (options?.withoutPendingStatus !== true) {\n      setIsPending(true);\n    }\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setIsPending(false);\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          // eslint-disable-next-line\n          order: newOrder as [], // TODO: not use as []\n          // eslint-disable-next-line\n          filter: newFilter as {}, // TODO: not use as {}\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      isPending,\n      variables,\n      filter,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\nexport const useBAIPaginationQueryOptions = ({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      limit: pageSize,\n      offset: page > 1 ? (page - 1) * pageSize : 0,\n      filter: filter,\n      order: order,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  }) => any;\n}) => {\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    filter: StringParam,\n    order: StringParam,\n  });\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  const order = params.order || defaultVariables.order;\n  const filter = params.filter || defaultVariables.filter;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    newOrder: string | undefined = defaultVariables.order,\n    newFilter: string | undefined = defaultVariables.filter,\n  ) => {\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          order: newOrder,\n          filter: newFilter,\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      variables,\n      filter,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\ninterface BAIPaginationOption {\n  limit: number;\n  offset: number;\n  // filter?: string;\n  // order?: string;\n}\ninterface AntdBasicPaginationOption {\n  pageSize: number;\n  current: number;\n}\n\ninterface InitialPaginationOption\n  extends AntdBasicPaginationOption,\n    Omit<BAIPaginationOption, 'limit' | 'offset'> {}\nexport const useBAIPaginationOptionState = (\n  initialOptions: InitialPaginationOption,\n): {\n  baiPaginationOption: BAIPaginationOption;\n  tablePaginationOption: AntdBasicPaginationOption;\n  setTablePaginationOption: (pagination: AntdBasicPaginationOption) => void;\n} => {\n  const [options, setOptions] =\n    useState<AntdBasicPaginationOption>(initialOptions);\n  return {\n    baiPaginationOption: {\n      limit: options.pageSize,\n      offset:\n        options.current > 1 ? (options.current - 1) * options.pageSize : 0,\n    },\n    tablePaginationOption: {\n      pageSize: options.pageSize,\n      current: options.current,\n    },\n    setTablePaginationOption: (pagination) => {\n      if (!_.isEqual(pagination, options)) {\n        setOptions((current) => ({\n          ...current,\n          ...pagination,\n        }));\n      }\n    },\n  };\n};\n","import { useSuspendedBackendaiClient } from '.';\nimport { Image } from '../components/ImageEnvironmentSelectFormItems';\nimport { AUTOMATIC_DEFAULT_SHMEM } from '../components/ResourceAllocationFormItems';\nimport { addNumberWithUnits, convertBinarySizeUnit } from '../helper';\nimport { ResourceSlotName, useResourceSlots } from '../hooks/backendai';\nimport { useSuspenseTanQuery } from './reactQueryAlias';\nimport _ from 'lodash';\nimport { useMemo } from 'react';\n\nconst maxPerContainerRegex = /^max([A-Za-z0-9]+)PerContainer$/;\n\nexport const isMatchingMaxPerContainer = (configName: string, key: string) => {\n  const match = configName.match(maxPerContainerRegex);\n  if (match) {\n    const configLowerCase = match[1].toLowerCase();\n    const keyLowerCase = key.replaceAll(/[.-]/g, '').toLowerCase();\n    // Because some accelerator names are not the same as the config name, we need to check if the config name is a substring of the accelerator name\n    // cuda.shares => maxCUDASharesPerContainer\n    // cuda.device => maxCUDADevicesPerContainer (Not maxCUDADevicePerContainer)\n    return (\n      configLowerCase === keyLowerCase || configLowerCase === keyLowerCase + 's'\n    );\n  }\n  return false;\n};\nexport interface MergedResourceLimits {\n  accelerators: {\n    [key: string]:\n      | {\n          min?: number;\n          max?: number;\n        }\n      | undefined;\n  };\n  cpu?: {\n    min?: number;\n    max?: number;\n  };\n  mem?: {\n    min?: string;\n    max?: string;\n  };\n  shmem?: {\n    min?: string;\n    max?: string;\n  };\n}\n\ntype ResourceLimits = {\n  [key in ResourceSlotName]?: string | 'Infinity' | 'NaN';\n};\ntype ResourceUsing = ResourceLimits;\ntype ResourceRemaining = ResourceLimits;\ntype ScalingGroup = {\n  using: ResourceUsing;\n  remaining: ResourceRemaining;\n};\n\ntype ResourceSlots = {\n  cpu: string;\n  mem: string;\n  [key: string]: string;\n};\n\ntype RemainingSlots = {\n  cpu: number;\n  mem: number;\n  accelerators: {\n    [key: string]: number;\n  };\n};\n\nexport type ResourcePreset = {\n  name: string;\n  resource_slots: ResourceSlots;\n  shared_memory: string | null;\n  allocatable: boolean;\n};\n\ntype ResourceAllocation = {\n  keypair_limits: ResourceLimits;\n  keypair_using: ResourceUsing;\n  keypair_remaining: ResourceRemaining;\n  scaling_group_remaining: ResourceRemaining;\n  scaling_groups: {\n    [key: string]: ScalingGroup;\n  };\n  presets: ResourcePreset[];\n  group_limits: ResourceLimits;\n  group_using: ResourceUsing;\n  group_remaining: ResourceRemaining;\n};\n\ninterface Props {\n  currentProjectName: string;\n  currentImage?: Image;\n  currentResourceGroup?: string;\n  ignorePerContainerConfig?: boolean;\n}\n\n// determine resource limits and remaining for current resource group and current image in current project\nexport const useResourceLimitAndRemaining = ({\n  currentImage,\n  currentResourceGroup = '',\n  currentProjectName,\n  ignorePerContainerConfig = false,\n}: Props) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n\n  const {\n    data: checkPresetInfo,\n    refetch,\n    isRefetching,\n  } = useSuspenseTanQuery<ResourceAllocation | undefined>({\n    queryKey: ['check-presets', currentProjectName, currentResourceGroup],\n    queryFn: () => {\n      if (currentResourceGroup) {\n        return baiClient.resourcePreset\n          .check({\n            group: currentProjectName,\n            scaling_group: currentResourceGroup,\n          })\n          .catch(() => {});\n      } else {\n        return;\n      }\n    },\n    staleTime: 1000,\n    // suspense: !_.isEmpty(currentResourceGroup), //prevent flicking\n  });\n\n  const currentImageMinM =\n    _.find(currentImage?.resource_limits, (i) => i?.key === 'mem')?.min || '0g';\n\n  const resourceGroupResourceSize: {\n    cpu?: number;\n    mem?: string;\n    accelerators: {\n      [key: string]: number | undefined;\n    };\n  } = {\n    // scaling group all cpu (using + remaining), string type\n    cpu:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.cpu,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.cpu,\n      )\n        ? _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.cpu,\n          ) +\n          _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n              .cpu,\n          )\n        : undefined,\n    mem:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.mem,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.mem,\n      )\n        ? convertBinarySizeUnit(\n            _.toNumber(\n              checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.mem,\n            ) +\n              _.toNumber(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n                  .mem,\n              ) +\n              'b',\n            'g',\n            2,\n          )?.numberFixed + 'g'\n        : undefined,\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.[key],\n          ) &&\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.[\n              key\n            ],\n          )\n            ? _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.using[\n                  key\n                ],\n              ) +\n              _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]\n                  ?.remaining[key],\n              )\n            : undefined;\n        return result;\n      },\n      {} as {\n        [key: string]: number | undefined;\n      },\n    ),\n  };\n  const perContainerConfigs = useMemo(\n    () =>\n      _.omitBy(baiClient._config, (value, key) => {\n        return !maxPerContainerRegex.test(key);\n      }),\n    [baiClient._config],\n  );\n\n  const resourceLimits: MergedResourceLimits = {\n    cpu:\n      resourceSlots?.cpu === undefined\n        ? undefined\n        : {\n            min: _.max([\n              _.toNumber(\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'cpu')\n                  ?.min || '0',\n              ),\n            ]),\n            max: _.min([\n              ignorePerContainerConfig\n                ? undefined\n                : baiClient._config.maxCPUCoresPerContainer,\n              limitParser(checkPresetInfo?.keypair_limits.cpu),\n              limitParser(checkPresetInfo?.group_limits.cpu),\n              // resourceGroupResourceSize?.cpu,\n            ]),\n          },\n    mem:\n      resourceSlots?.mem === undefined\n        ? undefined\n        : {\n            // M to max of [ image's mem min, AUTOMATIC_DEFAULT_SHMEM]\n            // mem(M+S) should be larger than _.max([ image's mem min, AUTOMATIC_DEFAULT_SHMEM ]) + AUTOMATIC_DEFAULT_SHMEM (rule: S can not be larger than M)\n            min:\n              //handled by 'b' unit\n              addNumberWithUnits(\n                _.max([\n                  convertBinarySizeUnit(currentImageMinM, 'b')?.number,\n                  convertBinarySizeUnit(AUTOMATIC_DEFAULT_SHMEM, 'b')?.number,\n                  0,\n                ]) + 'b',\n                AUTOMATIC_DEFAULT_SHMEM,\n              ),\n            max:\n              //handled by 'g(GiB)' unit\n              _.min([\n                ignorePerContainerConfig\n                  ? undefined\n                  : baiClient._config.maxMemoryPerContainer,\n                limitParser(checkPresetInfo?.keypair_limits.mem) &&\n                  convertBinarySizeUnit(\n                    limitParser(checkPresetInfo?.keypair_limits.mem) + '',\n                    'g',\n                  )?.number,\n                limitParser(checkPresetInfo?.group_limits.mem) &&\n                  convertBinarySizeUnit(\n                    limitParser(checkPresetInfo?.group_limits.mem) + '',\n                    'g',\n                  )?.number,\n                // scaling group all mem (using + remaining), string type\n                // resourceGroupResourceSize?.mem &&\n                //   iSizeToSize(resourceGroupResourceSize?.mem + '', 'g')?.number,\n              ]) + 'g',\n          },\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        const perContainerLimit =\n          _.find(perContainerConfigs, (configValue, configName) => {\n            return isMatchingMaxPerContainer(configName, key);\n          }) ?? baiClient._config['cuda.device']; // FIXME: temporally `cuda.device` config, when undefined\n\n        result[key] = {\n          min: parseInt(\n            _.filter(\n              currentImage?.resource_limits,\n              (supportedAcceleratorInfo) => {\n                return supportedAcceleratorInfo?.key === key;\n              },\n            )?.[0]?.min || '0',\n          ),\n          max: _.min([\n            perContainerLimit || 8,\n            limitParser(\n              checkPresetInfo?.keypair_limits[key as ResourceSlotName],\n            ),\n            limitParser(checkPresetInfo?.group_limits[key as ResourceSlotName]),\n            // scaling group all cpu (using + remaining), string type\n            // resourceGroupResourceSize.accelerators[key],\n          ]),\n        };\n        return result;\n      },\n      {} as MergedResourceLimits['accelerators'],\n    ),\n  };\n  const remaining: RemainingSlots = {\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          _.min([\n            _.toNumber(\n              checkPresetInfo?.keypair_remaining[key as ResourceSlotName],\n            ),\n            _.toNumber(\n              checkPresetInfo?.group_remaining[key as ResourceSlotName],\n            ),\n            _.toNumber(\n              checkPresetInfo?.scaling_group_remaining[key as ResourceSlotName],\n            ),\n          ]) ?? Number.MAX_SAFE_INTEGER;\n        return result;\n      },\n      {} as RemainingSlots['accelerators'],\n    ),\n    cpu:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.cpu),\n        limitParser(checkPresetInfo?.group_remaining.cpu),\n        limitParser(checkPresetInfo?.scaling_group_remaining.cpu),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n    mem:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.mem),\n        limitParser(checkPresetInfo?.group_remaining.mem),\n        limitParser(checkPresetInfo?.scaling_group_remaining.mem),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n  };\n\n  return [\n    {\n      resourceGroupResourceSize,\n      resourceLimits,\n      remaining,\n      currentImageMinM,\n      isRefetching,\n      checkPresetInfo,\n    },\n    {\n      refetch,\n    },\n  ] as const;\n};\n\nconst limitParser = (limit: string | undefined) => {\n  if (limit === undefined) {\n    return undefined;\n  } else if (limit === 'Infinity') {\n    return undefined;\n  } else if (limit === 'NaN') {\n    return undefined;\n  } else {\n    return _.toNumber(limit);\n  }\n};\n"],"names":["_ref","objectValues","values","highlightKeyword","length","React","map","value","label","color","_jsx","Flex","direction","children","_","objValue","idx","Tag","style","undefined","margin","marginRight","TextHighlighter","keyword","_convertBinarySizeUni","dynamicSteps","units","disableAutoUnit","min","max","roundStep","inputNumberProps","setValue","useControllableState","defaultValue","numValue","_unitFromValue","parseUnit","previousUnit","usePrevious","unit","minNumValue","minUnit","maxNumValue","maxUnit","ref","useRef","useEffect","current","onInput","e","_e$target","target","test","addEventListener","removeEventListener","InputNumber","onBlur","_roundStep$toString$s","_ref$current","_ref$current2","decimalCount","toString","split","isNaN","Math","round","toFixed","onChange","newValue","convertBinarySizeUnit","number","addonAfter","Select","tabIndex","newUnit","onDropdownVisibleChange","open","options","Typography","Text","fontFamily","toUpperCase","suffixIcon","cursor","step","onStep","afterStepValue","info","numValueNotNull","index","nextIndex","type","currentUnitIndex","indexOf","nextValue","nextUnit","nextNumValue","ImageMetaIcon","bordered","image","alt","arguments","getImageIcon","useBackendAIImageMetaData","src","width","height","disabled","sliderProps","otherProps","inputRef","key","updateKey","useUpdatableState","setTimeout","_jsxs","gap","flex","minWidth","align","_inputRef$current","_step$toString$split$","_inputRef$current2","Slider","marks","option","fetchKey","resourceGroup","selectProps","t","useTranslation","useControllableValue","baiPaginationOption","useBAIPaginationOptionState","pageSize","agent_summary_list","useLazyLoadQuery","_AgentSelectQuery","require","limit","offset","status","filter","scaling_group","fetchPolicy","agentOptions","items","agent","_agent$available_slot","_agent$occupied_slots","availableSlotsInfo","JSON","parse","available_slots","occupiedSlotsInfo","occupied_slots","remainingSlotsInfo","mapValues","_occupiedSlotsInfo$ke","_occupiedSlotsInfo$ke2","endsWith","parseFloat","parseInt","justify","id","slot","ResourceNumber","hideTooltip","warn","extraMarks","hideSlider","token","theme","useToken","minGiB","useMemo","maxGiB","valueGiB","isMinOversMaxValue","_createElement","DynamicUnitInputNumber","changeOnBlur","visibility","styles","track","backgroundColor","compareNumberWithUnits","colorWarning","rail","tooltip","formatter","newNumValue","colorTextSecondary","markNumber","allocatablePresetNames","showCustom","showMinimumRequired","updateFetchKey","run","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","resourceSlots","useResourceSlots","isPendingUpdate","_startTransition","useTransition","controllableValue","setControllableValue","resource_presets","_ResourcePresetSelectQuery","loading","display","EditOutlined","selectedLabel","Tooltip","title","InfoCircleOutlined","preset","slotsInfo","resource_slots","includes","name","sort","a","b","localeCompare","showSearch","optionLabelProp","AUTOMATIC_DEFAULT_SHMEM","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","resource","cpu","mem","shmem","accelerator","num_of_sessions","cluster_mode","cluster_size","enabledAutomaticShmem","ResourceAllocationFormItems","enableNumOfSessions","enableResourcePresets","forceImageMinValues","showRemainingWarning","form","Form","useFormInstance","baiClient","useSuspendedBackendaiClient","keypairResourcePolicy","sessionLimitAndRemaining","useCurrentKeyPairResourcePolicyLazyLoadQuery","agentFetchKey","updateAgentFetchKey","isPendingAgentList","startAgentListTransition","currentProject","useCurrentProjectValue","currentResourceGroup","useCurrentResourceGroupValue","currentImage","useWatch","preserve","currentAllocationPreset","currentImageMinM","remaining","resourceLimits","checkPresetInfo","useResourceLimitAndRemaining","currentProjectName","mergedResourceSlots","resourceSlotsInRG","useResourceSlotsDetails","acceleratorSlots","_resourceLimits$accel","_resourceLimits$accel2","accelerators","currentImageAcceleratorLimits","resource_limits","sessionSliderLimitAndRemaining","getAllocatablePresetNames","presets","ensureValidAcceleratorType","useEventNotStable","currentAcceleratorType","getFieldValue","nextAcceleratorType","setFieldsValue","acceleratorType","updateAllocationPresetBasedOnResourceGroup","autoSelectedPreset","allocationPreset","updateResourceFieldsBasedOnPreset","validateFields","recursive","catch","updateResourceFieldsBasedOnImage","force","_resourceLimits$cpu","_convertBinarySizeUni2","_resourceLimits$shmem","_convertBinarySizeUni3","_resourceLimits$mem","minimumResources","_resourceLimits$accel3","_$filter$","nextImageSelectorType","acceleratorInfo","_resourceLimits$accel4","forEach","minNum","minNumStr","setFieldValue","runShmemAutomationRule","_convertBinarySizeUni4","_convertBinarySizeUni5","slots","numberUnit","acceleratorObj","firstMatchedAcceleratorType","acceleratorSetting","Number","shared_memory","M_plus_S","addNumberWithUnits","_Fragment","Item","rules","required","ResourceGroupSelect","projectName","marginBottom","marginXS","ResourcePresetSelect","_config","allowCustomResourceAllocation","Card","shouldUpdate","prev","cur","noStyle","_ref2","_mergedResourceSlots$","_resourceLimits$cpu2","_resourceLimits$cpu3","_mergedResourceSlots$2","_resourceLimits$cpu8","_resourceLimits$cpu9","_resourceLimits$cpu10","_resourceLimits$cpu11","_resourceLimits$cpu12","_resourceLimits$cpu13","_resourceLimits$cpu14","_resourceLimits$cpu15","human_readable_name","placement","Trans","i18nKey","warningOnly","validator","async","rule","_resourceLimits$cpu4","_resourceLimits$cpu5","_resourceLimits$cpu6","_resourceLimits$cpu7","Promise","reject","resolve","InputNumberWithSlider","display_unit","RemainingMark","props","onClick","preventDefault","next","_resourceLimits$mem10","_resourceLimits$mem11","_convertBinarySizeUni6","_resourceLimits$mem2","_resourceLimits$mem3","_resourceLimits$mem4","_resourceLimits$mem5","_resourceLimits$mem6","_resourceLimits$mem7","size","_resourceLimits$mem8","_resourceLimits$mem9","DynamicUnitInputNumberWithSlider","addonBefore","numberFixed","valuePropName","Switch","checked","_resourceLimits$shmem2","hidden","dependencies","_getFieldValue","_getFieldValue2","_prev$resource","_next$resource","_ref3","_resourceLimits$accel5","_resourceLimits$accel6","_resourceLimits$accel11","_resourceLimits$accel12","_resourceLimits$accel13","_resourceLimits$accel14","_resourceLimits$accel7","_resourceLimits$accel8","_resourceLimits$accel9","_resourceLimits$accel10","_mergedResourceSlots$3","initialValue","popupMatchSelectWidth","_mergedResourceSlots$4","hideAgents","Suspense","supports","AgentSelect","Button","icon","ReloadOutlined","Divider","colorBorder","_ref4","Row","gutter","marginMD","Col","xs","Radio","_resourceLimits$cpu16","derivedClusterSizeMaxLimit","max_containers_per_session","clusterUnit","minCPU","position","top","transform","colorSuccess","opacity","CaretDownOutlined","bySliderLimit","_resourceLimits$key","_resourceLimits$key2","_resourceLimits$key3","_resourceLimits$key4","_resourceLimits$key5","_resourceLimits$accel15","_resourceLimits$accel16","byImageAcceleratorLimits","acceleratorResourceOfPreset","autoSelectDefault","searchValue","onSearch","baiRequestWithPromise","useBaiSignedRequestWithPromise","controllableSearchValue","setControllableSearchValue","data","resourceGroupSelectQueryResult","useSuspenseTanQuery","queryKey","queryFn","search","URLSearchParams","set","all","method","url","staleTime","sftpResourceGroups","volume_info","item","_item$sftp_scaling_gr","sftp_scaling_groups","resourceGroups","scaling_groups","autoSelectedResourceGroup","autoSelectedOption","searchProps","defaultActiveFirstOption","optionRender","_option$data$value","amount","extra","opts","currentGroup","formatAmount","number_format","binary","round_length","ResourceTypeIcon","showTooltip","fontSize","fontSizeSM","MWCIconWrap","_resourceTypeIconSrcM","showIcon","showUnit","resourceTypeIconSrcMap","targetIcon","MicrochipIcon","content","alignSelf","description","pointerEvents","node","v0","v1","v2","v3","v4","v5","hash","UNLIMITED_MAX_CONTAINERS_PER_SESSIONS","UNLIMITED_MAX_CONCURRENT_SESSIONS","useKeyPairLazyLoadQuery","accessKey","keypair","_hooksUsingRelay_KeyPairQuery","refresh","useCallback","keypair_resource_policy","_hooksUsingRelay_KeyPairResourcePolicyQuery","resource_policy","max_concurrent_sessions","concurrency_used","initialOptions","setOptions","useState","tablePaginationOption","setTablePaginationOption","pagination","maxPerContainerRegex","_$find","_checkPresetInfo$scal","_checkPresetInfo$scal2","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal5","_checkPresetInfo$scal6","_checkPresetInfo$scal7","_checkPresetInfo$scal8","_checkPresetInfo$scal9","_checkPresetInfo$scal10","_checkPresetInfo$scal11","_checkPresetInfo$scal12","_$find2","_$min2","_$min3","ignorePerContainerConfig","refetch","isRefetching","resourcePreset","check","group","i","resourceGroupResourceSize","using","result","_checkPresetInfo$scal13","_checkPresetInfo$scal14","_checkPresetInfo$scal15","_checkPresetInfo$scal16","_checkPresetInfo$scal17","_checkPresetInfo$scal18","perContainerConfigs","maxCPUCoresPerContainer","limitParser","keypair_limits","group_limits","maxMemoryPerContainer","_$find3","_$filter","perContainerLimit","configValue","configName","isMatchingMaxPerContainer","match","configLowerCase","toLowerCase","keyLowerCase","replaceAll","supportedAcceleratorInfo","_$min","keypair_remaining","group_remaining","scaling_group_remaining","MAX_SAFE_INTEGER"],"sourceRoot":""}