{"version":3,"file":"static/js/330.72abf3fa.chunk.js","mappings":"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","sources":["components/BAIModal.tsx","components/EndpointStatusTag.tsx","components/FlexActivityIndicator.tsx","components/ModelServiceSettingModal.tsx","components/__generated__/EndpointStatusTagFragment.graphql.ts","components/__generated__/ModelServiceSettingModal_endpoint.graphql.ts","components/VFolderSelect.tsx","components/ServiceLauncherModal.tsx","pages/ServingListPage.tsx","pages/__generated__/ServingListPageQuery.graphql.ts"],"sourcesContent":["// @ts-ignore\nimport rawBAIModalCss from './BAIModal.css?raw';\nimport { Modal, ModalProps } from 'antd';\nimport React from 'react';\n\nexport interface BAIModalProps extends ModalProps {\n  okText?: string; // customize text of ok button with adequate content\n}\nconst BAIModal: React.FC<BAIModalProps> = ({ ...modalProps }) => {\n  return (\n    <>\n      <style>{rawBAIModalCss}</style>\n      <Modal\n        centered={modalProps.centered ?? true}\n        className=\"bai-modal\"\n        {...modalProps}\n      />\n    </>\n  );\n};\n\nexport default BAIModal;\n","import { EndpointStatusTagFragment$key } from './__generated__/EndpointStatusTagFragment.graphql';\nimport { Tag } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\ninterface EndpointStatusTagProps {\n  endpointFrgmt: EndpointStatusTagFragment$key | null;\n}\nconst EndpointStatusTag: React.FC<EndpointStatusTagProps> = ({\n  endpointFrgmt,\n}) => {\n  const endpoint = useFragment(\n    graphql`\n      fragment EndpointStatusTagFragment on Endpoint {\n        id\n        status\n      }\n    `,\n    endpointFrgmt,\n  );\n  let color = 'default';\n  switch (endpoint?.status?.toUpperCase()) {\n    case 'RUNNING':\n    case 'HEALTHY':\n      color = 'success';\n      break;\n\n    // case 'TERMINATED':\n    //   color = 'default';\n    //   break;\n  }\n\n  return <Tag color={color}>{endpoint?.status}</Tag>;\n};\n\nexport default EndpointStatusTag;\n","import Flex, { FlexProps } from './Flex';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Spin } from 'antd';\nimport React from 'react';\n\nconst FlexActivityIndicator: React.FC<FlexProps> = ({ style, children }) => {\n  return (\n    <Flex\n      direction=\"row\"\n      justify=\"center\"\n      align=\"center\"\n      style={{ width: '100%', height: '100%', ...style }}\n    >\n      <Spin indicator={<LoadingOutlined spin />} />\n      {children}\n    </Flex>\n  );\n};\n\nexport default FlexActivityIndicator;\n","import { baiSignedRequestWithPromise } from '../helper';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport { ModelServiceSettingModal_endpoint$key } from './__generated__/ModelServiceSettingModal_endpoint.graphql';\nimport { Form, InputNumber, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface Props extends BAIModalProps {\n  endpointFrgmt: ModelServiceSettingModal_endpoint$key | null;\n  onRequestClose: (success?: boolean) => void;\n}\n\ninterface ServiceSettingFormInput {\n  desired_session_count: number;\n}\n\nconst ModelServiceSettingModal: React.FC<Props> = ({\n  onRequestClose,\n  endpointFrgmt,\n  ...baiModalProps\n}) => {\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n\n  const endpoint = useFragment(\n    graphql`\n      fragment ModelServiceSettingModal_endpoint on Endpoint {\n        endpoint_id\n        desired_session_count\n      }\n    `,\n    endpointFrgmt,\n  );\n\n  const mutationToUpdateService = useTanMutation({\n    mutationFn: (values: ServiceSettingFormInput) => {\n      const body = {\n        to: values.desired_session_count,\n      };\n      return baiSignedRequestWithPromise({\n        method: 'POST',\n        url: `/services/${endpoint?.endpoint_id}/scale`,\n        body,\n        client: baiClient,\n      });\n    },\n  });\n\n  // Apply any operation after clicking OK button\n  const handleOk = (e: React.MouseEvent<HTMLElement>) => {\n    form\n      .validateFields()\n      .then((values) => {\n        mutationToUpdateService.mutate(values, {\n          onSuccess: () => {\n            console.log('service updated');\n            onRequestClose(true);\n          },\n          onError: (error) => {\n            console.log(error);\n            // TODO: show error message\n          },\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // Apply any operation after clicking Cancel button\n  const handleCancel = () => {\n    // console.log(\"Clicked cancel button\");\n    onRequestClose();\n  };\n\n  return (\n    <BAIModal\n      style={{\n        zIndex: 10000,\n      }}\n      destroyOnClose\n      onOk={handleOk}\n      onCancel={handleCancel}\n      okButtonProps={{\n        loading: mutationToUpdateService.isLoading,\n      }}\n      title={t('modelService.EditModelService')}\n      {...baiModalProps}\n    >\n      <Flex direction=\"row\" align=\"stretch\" justify=\"around\">\n        <Form\n          form={form}\n          preserve={false}\n          validateTrigger={['onChange', 'onBlur']}\n          initialValues={{\n            desired_session_count: endpoint?.desired_session_count,\n          }}\n          style={{ marginBottom: token.marginLG, marginTop: token.margin }}\n        >\n          <Form.Item\n            name=\"desired_session_count\"\n            label={t('modelService.DesiredSessionCount')}\n            rules={[\n              {\n                pattern: /^[0-9]+$/,\n                message: t('modelService.OnlyAllowsNonNegativeIntegers'),\n              },\n            ]}\n          >\n            <InputNumber type=\"number\" min={0} />\n          </Form.Item>\n        </Form>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default ModelServiceSettingModal;\n","/**\n * @generated SignedSource<<8a960e7428e05bcb25f322a53888680e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type EndpointStatusTagFragment$data = {\n  readonly id: string | null;\n  readonly status: string | null;\n  readonly \" $fragmentType\": \"EndpointStatusTagFragment\";\n};\nexport type EndpointStatusTagFragment$key = {\n  readonly \" $data\"?: EndpointStatusTagFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"EndpointStatusTagFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"EndpointStatusTagFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Endpoint\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"3b31efa50b55edddcb210b59003dc479\";\n\nexport default node;\n","/**\n * @generated SignedSource<<7fb89480050795760143361e3c0e5086>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ModelServiceSettingModal_endpoint$data = {\n  readonly desired_session_count: number | null;\n  readonly endpoint_id: string | null;\n  readonly \" $fragmentType\": \"ModelServiceSettingModal_endpoint\";\n};\nexport type ModelServiceSettingModal_endpoint$key = {\n  readonly \" $data\"?: ModelServiceSettingModal_endpoint$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ModelServiceSettingModal_endpoint\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ModelServiceSettingModal_endpoint\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"endpoint_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"desired_session_count\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Endpoint\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"881f18324b27eba6ff0fcfb83ae241d2\";\n\nexport default node;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useCurrentProjectValue, useUpdatableState } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport { Select, SelectProps } from 'antd';\nimport _ from 'lodash';\nimport React, { startTransition, useEffect } from 'react';\n\nexport type VFolder = {\n  name: string;\n  id: string;\n  quota_scope_id: string;\n  host: string;\n  status: string;\n  usage_mode: string;\n  created_at: string;\n  is_owner: boolean;\n  permission: string;\n  user: null;\n  group: string | null;\n  creator: string;\n  user_email: null;\n  group_name: string | null;\n  ownership_type: string;\n  type: string;\n  cloneable: boolean;\n  max_files: number;\n  max_size: null | number;\n  cur_size: number;\n};\n\ninterface VFolderSelectProps extends SelectProps {\n  autoSelectDefault?: boolean;\n  filter?: (vFolder: VFolder) => boolean;\n}\n\nconst VFolderSelect: React.FC<VFolderSelectProps> = ({\n  filter,\n  autoSelectDefault,\n  ...selectProps\n}) => {\n  const currentProject = useCurrentProjectValue();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  // const { vfolder_list } = useLazyLoadQuery<VFolderSelectQuery>(\n  //   graphql`\n  //     # query VFolderSelectQuery($group_id: UUID) {\n  //     query VFolderSelectQuery {\n  //       vfolder_list(limit: 20, offset: 0) {\n  //         # vfolder_list(limit: 20, offset: 0, group_id: $group_id) {\n  //         items {\n  //           id\n  //           name\n  //           status\n  //           usage_mode\n  //           ownership_type\n  //           user_email\n  //           group\n  //           group_name\n  //         }\n  //         total_count\n  //       }\n  //     }\n  //   `,\n  //   {\n  //     // group_id: currentProject.id,\n  //   },\n  //   {\n  //     fetchPolicy: \"store-and-network\",\n  //   }\n  // );\n  // console.log(\"vfolder_list\", vfolder_list);\n  const [key, checkUpdate] = useUpdatableState('first');\n\n  const { data } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', key],\n    queryFn: () => {\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?group_id=${currentProject.id}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 0,\n  });\n\n  const filteredVFolders = filter ? _.filter(data, filter) : data;\n\n  const autoSelectedOption = _.first(filteredVFolders)\n    ? {\n        label: _.first(filteredVFolders)?.name,\n        value: _.first(filteredVFolders)?.name,\n      }\n    : undefined;\n  useEffect(() => {\n    if (autoSelectDefault && autoSelectedOption) {\n      selectProps.onChange?.(autoSelectedOption.value, autoSelectedOption);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoSelectDefault]);\n  return (\n    <Select\n      showSearch\n      {...selectProps}\n      onDropdownVisibleChange={(open) => {\n        if (open) {\n          startTransition(() => {\n            checkUpdate();\n          });\n        }\n      }}\n    >\n      {_.map(filteredVFolders, (vfolder) => {\n        return (\n          <Select.Option key={vfolder?.id} value={vfolder?.name}>\n            {vfolder?.name}\n          </Select.Option>\n        );\n      })}\n    </Select>\n  );\n};\n\nexport default VFolderSelect;\n","import { baiSignedRequestWithPromise, iSizeToSize } from '../helper';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { useCurrentDomainValue } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport FlexActivityIndicator from './FlexActivityIndicator';\nimport ImageEnvironmentSelectFormItems, {\n  Image,\n  ImageEnvironmentFormInput,\n} from './ImageEnvironmentSelectFormItems';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport SliderInputItem from './SliderInputFormItem';\nimport VFolderSelect from './VFolderSelect';\nimport { Card, Form, Input, theme, Switch, message } from 'antd';\nimport _ from 'lodash';\nimport React, { Suspense } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ntype ClusterMode = 'single-node' | 'multi-node';\n\ninterface ServiceCreateConfigResourceOptsType {\n  shmem?: number | string;\n}\ninterface ServiceCreateConfigResourceType {\n  cpu: number | string;\n  mem: string;\n  'cuda.device'?: number | string;\n  'cuda.shares'?: number | string;\n}\n\ninterface ServiceCreateConfigType {\n  model: string;\n  model_version?: string;\n  model_mount_destination: string; // default == \"/models\"\n  environ: object; // environment variable\n  scaling_group: string;\n  resources: ServiceCreateConfigResourceType;\n  resource_opts?: ServiceCreateConfigResourceOptsType;\n}\ninterface ServiceCreateType {\n  name: string;\n  desired_session_count: number;\n  image: string;\n  arch: string;\n  group: string;\n  domain: string;\n  cluster_size: number;\n  cluster_mode: ClusterMode;\n  tag?: string;\n  startup_command?: string;\n  bootstrap_script?: string;\n  owner_access_key?: string;\n  open_to_public: boolean;\n  config: ServiceCreateConfigType;\n}\n\ninterface ServiceLauncherProps\n  extends Omit<BAIModalProps, 'onOK' | 'onCancel'> {\n  extraP?: boolean;\n  onRequestClose: (success?: boolean) => void;\n}\ninterface ServiceLauncherFormInput extends ImageEnvironmentFormInput {\n  serviceName: string;\n  gpu: number;\n  cpu: number;\n  mem: number;\n  shmem: number;\n  resourceGroup: string;\n  vFolderName: string;\n  desiredRoutingCount: number;\n  openToPublic: boolean;\n}\n\nconst ServiceLauncherModal: React.FC<ServiceLauncherProps> = ({\n  extraP,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  // const [modalText, setModalText] = useState(\"Content of the modal\");\n  const currentDomain = useCurrentDomainValue();\n  const [form] = Form.useForm<ServiceLauncherFormInput>();\n  const [resourceSlots] = useResourceSlots();\n\n  const mutationToCreateService = useTanMutation<\n    unknown,\n    {\n      message?: string;\n    },\n    ServiceLauncherFormInput\n  >({\n    mutationFn: (values) => {\n      const image: string = `${values.environments.image?.registry}/${values.environments.image?.name}:${values.environments.image?.tag}`;\n      const body: ServiceCreateType = {\n        name: values.serviceName,\n        desired_session_count: values.desiredRoutingCount,\n        image: image,\n        arch: values.environments.image?.architecture as string,\n        group: baiClient.current_group, // current Project Group,\n        domain: currentDomain, // current Domain Group,\n        cluster_size: 1, // FIXME: hardcoded. change it with option later\n        cluster_mode: 'single-node', // FIXME: hardcoded. change it with option later\n        open_to_public: values.openToPublic,\n        config: {\n          model: values.vFolderName,\n          model_mount_destination: '/models', // FIXME: hardcoded. change it with option later\n          environ: {}, // FIXME: hardcoded. change it with option later\n          scaling_group: values.resourceGroup,\n          resources: {\n            cpu: values.cpu,\n            mem: values.mem + 'G',\n          },\n        },\n      };\n      if (resourceSlots?.['cuda.shares']) {\n        body['config'].resources['cuda.shares'] = values.gpu;\n      }\n      if (resourceSlots?.['cuda.device']) {\n        body['config'].resources['cuda.device'] = values.gpu;\n      }\n      if (values.shmem && values.shmem > 0) {\n        body['config'].resource_opts = {\n          shmem: values.shmem + 'G',\n        };\n      }\n      return baiSignedRequestWithPromise({\n        method: 'POST',\n        url: '/services',\n        body,\n        client: baiClient,\n      });\n    },\n  });\n  // const scalingGroupList = use;\n  // modelStorageList: Record<string, any>[];\n  // environmentList: Record<string, any>[];\n  // name?: string;\n  // cpu: number | string;\n  // mem: number | string;\n  // npu?: number | string;\n  // shmem?: number | string;\n\n  // Apply any operation after clicking OK button\n  const handleOk = () => {\n    // setModalText(\"Lorem Ipsum\");\n    // setConfirmLoading(true);\n    // // TODO: send request to start service to manager server\n    // setTimeout(() => {\n    //   setConfirmLoading(false);\n    // }, 2000);\n    form\n      .validateFields()\n      .then((values) => {\n        mutationToCreateService.mutate(values, {\n          onSuccess: () => {\n            onRequestClose(true);\n          },\n          onError: (error) => {\n            if (error?.message) {\n              message.error(\n                _.truncate(error?.message, {\n                  length: 200,\n                }),\n              );\n            } else {\n              message.error(t('modelService.FailedToStartService'));\n            }\n          },\n        });\n      })\n      .catch((err) => {\n        if (err.errorFields?.[0].errors?.[0]) {\n          message.error(err.errorFields?.[0].errors?.[0]);\n        } else {\n          message.error(t('modelService.FormValidationFailed'));\n        }\n      });\n  };\n\n  // Apply any operation after clicking Cancel button\n  const handleCancel = () => {\n    // console.log(\"Clicked cancel button\");\n    onRequestClose();\n  };\n\n  return (\n    <BAIModal\n      title={t('modelService.StartNewServing')}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      destroyOnClose={true}\n      maskClosable={false}\n      confirmLoading={mutationToCreateService.isLoading}\n      {...modalProps}\n    >\n      <Suspense fallback={<FlexActivityIndicator />}>\n        <Form\n          disabled={mutationToCreateService.isLoading}\n          form={form}\n          preserve={false}\n          layout=\"vertical\"\n          labelCol={{ span: 12 }}\n          initialValues={\n            {\n              cpu: 1,\n              gpu: 0,\n              mem: 0.25,\n              shmem: 0,\n              desiredRoutingCount: 1,\n            } as ServiceLauncherFormInput\n          }\n        >\n          <Form.Item\n            label={t('modelService.ServiceName')}\n            name=\"serviceName\"\n            rules={[\n              {\n                pattern: /^(?=.{4,64}$)\\w[\\w.-]*\\w$/,\n                message: t('modelService.ServiceNameRule'),\n              },\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name=\"resourceGroup\"\n            label={t('session.ResourceGroup')}\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <ResourceGroupSelect autoSelectDefault />\n          </Form.Item>\n          <Form.Item\n            name=\"openToPublic\"\n            label={t('modelService.OpenToPublic')}\n            valuePropName=\"checked\"\n          >\n            <Switch></Switch>\n          </Form.Item>\n          <Form.Item\n            name={'vFolderName'}\n            label={t('session.launcher.ModelStorageToMount')}\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <VFolderSelect\n              filter={(vf) => vf.usage_mode === 'model'}\n              autoSelectDefault\n            />\n          </Form.Item>\n          <SliderInputItem\n            label={t('modelService.DesiredRoutingCount')}\n            name=\"desiredRoutingCount\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n            inputNumberProps={{\n              //TODO: change unit based on resource limit\n              addonAfter: '#',\n            }}\n            required\n          />\n          <Card\n            style={{\n              marginBottom: token.margin,\n            }}\n          >\n            <ImageEnvironmentSelectFormItems\n            // //TODO: test with real inference images\n            // filter={(image) => {\n            //   return !!_.find(image?.labels, (label) => {\n            //     return (\n            //       label?.key === \"ai.backend.role\" &&\n            //       label.value === \"INFERENCE\" //['COMPUTE', 'INFERENCE', 'SYSTEM']\n            //     );\n            //   });\n            // }}\n            />\n            <Form.Item\n              noStyle\n              shouldUpdate={(prev, cur) =>\n                prev.environments?.image?.digest !==\n                cur.environments?.image?.digest\n              }\n            >\n              {({ getFieldValue }) => {\n                // TODO: change min/max based on selected images resource limit and current user limit\n                const currentImage: Image =\n                  getFieldValue('environments')?.image;\n\n                return (\n                  <>\n                    <SliderInputItem\n                      name={'cpu'}\n                      label={t('session.launcher.CPU')}\n                      tooltip={<Trans i18nKey={'session.launcher.DescCPU'} />}\n                      min={parseInt(\n                        _.find(\n                          currentImage?.resource_limits,\n                          (i) => i?.key === 'cpu',\n                        )?.min || '0',\n                      )}\n                      max={baiClient._config.maxCPUCoresPerContainer || 128}\n                      inputNumberProps={{\n                        addonAfter: t('session.launcher.Core'),\n                      }}\n                      required\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    />\n                    <SliderInputItem\n                      name={'mem'}\n                      label={t('session.launcher.Memory')}\n                      tooltip={\n                        <Trans i18nKey={'session.launcher.DescMemory'} />\n                      }\n                      max={baiClient._config.maxMemoryPerContainer || 1536}\n                      min={0}\n                      inputNumberProps={{\n                        addonAfter: 'GiB',\n                      }}\n                      step={0.25}\n                      required\n                      rules={[\n                        {\n                          required: true,\n                        },\n                        ({ getFieldValue }) => ({\n                          validator(_form, value) {\n                            const sizeGInfo = iSizeToSize(\n                              _.find(\n                                currentImage?.resource_limits,\n                                (i) => i?.key === 'mem',\n                              )?.min || '0B',\n                              'G',\n                            );\n\n                            if (sizeGInfo.number > value) {\n                              return Promise.reject(\n                                new Error(\n                                  t('session.launcher.MinMemory', {\n                                    size: sizeGInfo.numberUnit,\n                                  }),\n                                ),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        }),\n                      ]}\n                    />\n                    <SliderInputItem\n                      name={'shmem'}\n                      label={t('session.launcher.SharedMemory')}\n                      tooltip={\n                        <Trans i18nKey={'session.launcher.DescSharedMemory'} />\n                      }\n                      max={baiClient._config.maxShmPerContainer || 8}\n                      min={0}\n                      step={0.25}\n                      inputNumberProps={{\n                        addonAfter: 'GiB',\n                      }}\n                      required\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    />\n                    {(resourceSlots?.['cuda.device'] ||\n                      resourceSlots?.['cuda.shares']) && (\n                      <SliderInputItem\n                        style={{ marginBottom: 0 }}\n                        name={'gpu'}\n                        label={t('session.launcher.AIAccelerator')}\n                        tooltip={\n                          <Trans\n                            i18nKey={'session.launcher.DescAIAccelerator'}\n                          />\n                        }\n                        max={\n                          resourceSlots['cuda.shares']\n                            ? baiClient._config.maxCUDASharesPerContainer\n                            : baiClient._config.maxCUDADevicesPerContainer\n                        }\n                        step={resourceSlots['cuda.shares'] ? 0.1 : 1}\n                        inputNumberProps={{\n                          //TODO: change unit based on resource limit\n                          addonAfter: 'GPU',\n                        }}\n                        required\n                        rules={[\n                          {\n                            required: true,\n                          },\n                        ]}\n                      />\n                    )}\n                  </>\n                );\n              }}\n            </Form.Item>\n          </Card>\n        </Form>\n      </Suspense>\n    </BAIModal>\n  );\n};\n\nexport default ServiceLauncherModal;\n","import BAIModal from '../components/BAIModal';\nimport EndpointStatusTag from '../components/EndpointStatusTag';\nimport Flex from '../components/Flex';\nimport ModelServiceSettingModal from '../components/ModelServiceSettingModal';\nimport ServiceLauncherModal from '../components/ServiceLauncherModal';\nimport { baiSignedRequestWithPromise } from '../helper';\nimport {\n  useCurrentProjectValue,\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n} from '../hooks';\n// import { getSortOrderByName } from '../hooks/reactPaginationQueryOptions';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport {\n  ServingListPageQuery,\n  ServingListPageQuery$data,\n} from './__generated__/ServingListPageQuery.graphql';\nimport {\n  CheckOutlined,\n  CloseOutlined,\n  DeleteOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport { useRafInterval } from 'ahooks';\nimport { Button, Table, Tabs, Typography, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport { default as dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React, {\n  PropsWithChildren,\n  Suspense,\n  useState,\n  useTransition,\n  startTransition as startTransitionWithoutPendingState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\nimport { Link } from 'react-router-dom';\n\n// FIXME: need to apply filtering type of service later\ntype TabKey = 'services'; //  \"running\" | \"finished\" | \"others\";\n\ntype Endpoint = NonNullable<\n  NonNullable<\n    NonNullable<\n      NonNullable<ServingListPageQuery$data>['endpoint_list']\n    >['items']\n  >[0]\n>;\n\nconst ServingListPage: React.FC<PropsWithChildren> = ({ children }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const curProject = useCurrentProjectValue();\n  const [isOpenServiceLauncher, setIsOpenServiceLauncher] = useState(false);\n  const [selectedModelService, setSelectedModelService] = useState<Endpoint>();\n  const [isOpenModelServiceSettingModal, setIsOpenModelServiceSettingModal] =\n    useState(false);\n\n  // const [paginationState, setPaginationState] = useState<{\n  const [paginationState] = useState<{\n    current: number;\n    pageSize: number;\n  }>({\n    current: 1,\n    pageSize: 100,\n  });\n\n  const [isRefetchPending, startRefetchTransition] = useTransition();\n  const [\n    isOpenModelServiceTerminatingModal,\n    setIsOpenModelServiceTerminatingModal,\n  ] = useState(false);\n  const [servicesFetchKey, updateServicesFetchKey] =\n    useUpdatableState('initial-fetch');\n  // FIXME: need to apply filtering type of service later\n  const [selectedTab, setSelectedTab] = useState<TabKey>('services');\n  // const [selectedGeneration, setSelectedGeneration] = useState<\n  //   \"current\" | \"next\"\n  // >(\"next\");\n\n  useRafInterval(() => {\n    startTransitionWithoutPendingState(() => {\n      updateServicesFetchKey();\n    });\n  }, 7000);\n\n  const { endpoint_list: modelServiceList } =\n    // TODO: need to convert LazyLoadQuery to pagination query with option\n    useLazyLoadQuery<ServingListPageQuery>(\n      graphql`\n        query ServingListPageQuery(\n          $offset: Int!\n          $limit: Int!\n          $projectID: UUID\n        ) {\n          endpoint_list(\n            offset: $offset\n            limit: $limit\n            project: $projectID\n            filter: \"name != 'koalpaca-test'\"\n          ) {\n            total_count\n            items {\n              name\n              endpoint_id\n              image\n              model\n              domain\n              status\n              project\n              resource_group\n              resource_slots\n              url\n              open_to_public\n              created_at\n              created_user\n              desired_session_count @required(action: NONE)\n              routings {\n                routing_id\n                endpoint\n                session\n                traffic_ratio\n                status\n              }\n              ...ModelServiceSettingModal_endpoint\n              ...EndpointStatusTagFragment\n            }\n          }\n        }\n      `,\n      {\n        offset: (paginationState.current - 1) * paginationState.pageSize,\n        limit: paginationState.pageSize,\n        projectID: curProject.id,\n      },\n      {\n        fetchPolicy:\n          servicesFetchKey === 'initial-fetch'\n            ? 'store-and-network'\n            : 'network-only',\n        fetchKey: servicesFetchKey,\n      },\n    );\n\n  const sortedEndpointList = _.sortBy(modelServiceList?.items, 'name');\n\n  // FIXME: struggling with sending data when active tab changes!\n  // const runningModelServiceList = modelServiceList?.filter(\n  //   (item: any) => item.desired_session_count >= 0\n  // );\n\n  // const terminatedModelServiceList = modelServiceList?.filter(\n  //   (item: any) => item.desired_session_count < 0\n  // );\n\n  const terminateModelServiceMutation = useTanMutation({\n    mutationFn: () => {\n      return baiSignedRequestWithPromise({\n        method: 'DELETE',\n        url: '/services/' + selectedModelService?.endpoint_id,\n        client: baiClient,\n      });\n    },\n  });\n  // const { data, refetch } = useTanQuery({\n  //   queryKey: \"terminateModelService\",\n  //   queryFn: () => {\n  //     return baiSignedRequestWithPromise({\n  //       method: \"DELETE\",\n  //       url: \"/services/\" + selectedModelService?.id,\n  //       client: baiClient,\n  //     });\n  //   },\n  //   onSuccess: (res: any) => {\n  //     console.log(res);\n  //   },\n  //   onError: (err: any) => {\n  //     console.log(err);\n  //   },\n  //   enabled: false,\n  //   // for to render even this query fails\n  //   suspense: true,\n  // });\n\n  return (\n    <>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{ padding: token.padding, gap: token.margin }}\n      >\n        {/* <Card bordered title={t(\"summary.ResourceStatistics\")}>\n          <p>SessionList</p>\n        </Card> */}\n        {/* <Card bodyStyle={{ paddingTop: 0 }}> */}\n        <Flex direction=\"column\" align=\"stretch\">\n          <Flex style={{ flex: 1 }}>\n            <Tabs\n              // type=\"card\"\n              activeKey={selectedTab}\n              onChange={(key) => setSelectedTab(key as TabKey)}\n              tabBarStyle={{ marginBottom: 0 }}\n              style={{\n                width: '100%',\n                paddingLeft: token.paddingMD,\n                paddingRight: token.paddingMD,\n                borderTopLeftRadius: token.borderRadius,\n                borderTopRightRadius: token.borderRadius,\n              }}\n              items={[\n                { key: 'services', label: t('modelService.Services') },\n                // FIXME: need to apply filtering type of service later\n                // {\n                //   key: \"running\",\n                //   label: t(\"session.Running\"),\n                // },\n                // {\n                //   key: \"finished\",\n                //   label: t(\"session.Finished\"),\n                // },\n                // {\n                //   key: \"others\",\n                //   label: t(\"session.Others\"),\n                // },\n              ]}\n              tabBarExtraContent={{\n                right: (\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setIsOpenServiceLauncher(true);\n                    }}\n                  >\n                    {t('modelService.StartService')}\n                  </Button>\n                ),\n              }}\n            />\n            {/* <Button type=\"text\" icon={<MoreOutlined />} /> */}\n          </Flex>\n          {/* <Button type=\"primary\" icon={<PoweroffOutlined />}>\n          시작\n        </Button> */}\n\n          {/* @ts-ignore */}\n          {/* <backend-ai-session-launcher\n        location=\"session\"\n        id=\"session-launcher\"\n        active\n      /> */}\n          <Suspense fallback={<div>loading..</div>}>\n            {/* <ServingList\n              loading={isRefetchPending}\n              projectId={curProject.id}\n              status={[]}\n              extraFetchKey={\"\"}\n              dataSource={modelServiceList}\n              onClickEdit={(row) => {\n                setIsOpenModelServiceSettingModal(true);\n                setSelectedModelService(row);\n              }}\n              onClickTerminate={(row) => {\n                setIsOpenModelServiceTerminatingModal(true);\n                setSelectedModelService(row);\n              }}\n            /> */}\n            <Table\n              loading={isRefetchPending}\n              scroll={{ x: 'max-content' }}\n              rowKey={'endpoint_id'}\n              dataSource={(sortedEndpointList || []) as Endpoint[]}\n              columns={[\n                {\n                  title: t('modelService.EndpointName'),\n                  dataIndex: 'endpoint_id',\n                  fixed: 'left',\n                  render: (endpoint_id, row) => (\n                    <Link to={'/serving/' + endpoint_id}>{row.name}</Link>\n                  ),\n                },\n                {\n                  title: t('modelService.EndpointId'),\n                  dataIndex: 'endpoint_id',\n                  width: 310,\n                  render: (endpoint_id) => (\n                    <Typography.Text code>{endpoint_id}</Typography.Text>\n                  ),\n                },\n                {\n                  title: t('modelService.Controls'),\n                  dataIndex: 'controls',\n                  render: (text, row) => (\n                    <Flex direction=\"row\" align=\"stretch\">\n                      <Button\n                        type=\"text\"\n                        icon={<SettingOutlined />}\n                        style={\n                          row.desired_session_count < 0 ||\n                          row.status?.toLowerCase() === 'destroying'\n                            ? undefined\n                            : {\n                                color: '#29b6f6',\n                              }\n                        }\n                        disabled={\n                          row.desired_session_count < 0 ||\n                          row.status?.toLowerCase() === 'destroying'\n                        }\n                        onClick={() => {\n                          setIsOpenModelServiceSettingModal(true);\n                          setSelectedModelService(row);\n                        }}\n                      />\n                      <Button\n                        type=\"text\"\n                        icon={\n                          <DeleteOutlined\n                            style={\n                              row.desired_session_count < 0 ||\n                              row.status?.toLowerCase() === 'destroying'\n                                ? undefined\n                                : {\n                                    color: token.colorError,\n                                  }\n                            }\n                          />\n                        }\n                        disabled={\n                          row.desired_session_count < 0 ||\n                          row.status?.toLowerCase() === 'destroying'\n                        }\n                        onClick={() => {\n                          setIsOpenModelServiceTerminatingModal(true);\n                          setSelectedModelService(row);\n                        }}\n                      />\n                    </Flex>\n                  ),\n                },\n                {\n                  title: t('modelService.Status'),\n                  render: (text, row) => (\n                    <EndpointStatusTag endpointFrgmt={row} />\n                  ),\n                },\n                {\n                  title: t('modelService.CreatedAt'),\n                  dataIndex: 'created_at',\n                  render: (created_at) => {\n                    return dayjs(created_at).format('ll LT');\n                  },\n                  defaultSortOrder: 'descend',\n                  sortDirections: ['descend', 'ascend', 'descend'],\n                  sorter: (a, b) => {\n                    const date1 = dayjs(a.created_at);\n                    const date2 = dayjs(b.created_at);\n                    return date1.diff(date2);\n                  },\n                },\n                {\n                  title: t('modelService.DesiredSessionCount'),\n                  dataIndex: 'desired_session_count',\n                  render: (desired_session_count) => {\n                    return desired_session_count < 0\n                      ? '-'\n                      : desired_session_count;\n                  },\n                },\n                {\n                  title: (\n                    <Flex direction=\"column\" align=\"start\">\n                      {t('modelService.RoutingsCount')}\n                      <br />\n                      <Typography.Text\n                        type=\"secondary\"\n                        style={{ fontWeight: 'normal' }}\n                      >\n                        ({t('modelService.Active/Total')})\n                      </Typography.Text>\n                    </Flex>\n                  ),\n                  // dataIndex: \"active_route_count\",\n                  render: (text, row) => {\n                    return (\n                      _.filter(row.routings, (r) => r?.status === 'HEALTHY')\n                        .length +\n                      ' / ' +\n                      row.routings?.length\n                    );\n                    // [r for r in endpoint.routings if r.status == RouteStatus.HEALTHY]\n                  },\n                },\n                {\n                  title: t('modelService.Public'),\n                  render: (text, row) =>\n                    row.open_to_public ? (\n                      <CheckOutlined style={{ color: token.colorSuccess }} />\n                    ) : (\n                      <CloseOutlined\n                        style={{ color: token.colorTextSecondary }}\n                      />\n                    ),\n                },\n              ]}\n              pagination={false}\n              // pagination={{\n              //   pageSize: paginationState.pageSize,\n              //   current: paginationState.current,\n              //   total: modelServiceList?.total_count || 0,\n              //   showSizeChanger: true,\n              //   // showTotal(total, range) {\n              //   //   return `${range[0]}-${range[1]} of ${total}`;\n              //   // },\n              //   onChange(page, pageSize) {\n              //     startRefetchTransition(() => {\n              //       setPaginationState({\n              //         current: page,\n              //         pageSize: pageSize || 100,\n              //       });\n              //     });\n              //   },\n              // }}\n            />\n          </Suspense>\n        </Flex>\n      </Flex>\n      <BAIModal\n        open={isOpenModelServiceTerminatingModal}\n        title={t('dialog.title.LetsDouble-Check')}\n        okButtonProps={{\n          loading: terminateModelServiceMutation.isLoading,\n        }}\n        onOk={() => {\n          // FIXME: any better idea for handling result?\n          terminateModelServiceMutation.mutate(undefined, {\n            onSuccess: (res) => {\n              startRefetchTransition(() => {\n                updateServicesFetchKey();\n              });\n              setIsOpenModelServiceTerminatingModal(false);\n            },\n            onError: (err) => {\n              console.log('terminateModelServiceMutation Error', err);\n            },\n          });\n        }}\n        onCancel={() => {\n          setIsOpenModelServiceTerminatingModal(false);\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\" justify=\"center\">\n          <p>\n            {t('modelService.YouAreAboutToTerminate') +\n              (selectedModelService?.name || '') +\n              '.'}\n          </p>\n          <p>{t('dialog.ask.DoYouWantToProceed')}</p>\n        </Flex>\n      </BAIModal>\n      <ModelServiceSettingModal\n        open={isOpenModelServiceSettingModal}\n        onRequestClose={(success) => {\n          setIsOpenModelServiceSettingModal(false);\n          if (success) {\n            startRefetchTransition(() => {\n              updateServicesFetchKey();\n            });\n          }\n        }}\n        endpointFrgmt={selectedModelService || null}\n      />\n      <ServiceLauncherModal\n        open={isOpenServiceLauncher}\n        onRequestClose={(success) => {\n          setIsOpenServiceLauncher(!isOpenServiceLauncher);\n          if (success) {\n            startRefetchTransition(() => {\n              updateServicesFetchKey();\n            });\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport default ServingListPage;\n","/**\n * @generated SignedSource<<707caeffb277dd09e80f406d25e12a85>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ServingListPageQuery$variables = {\n  limit: number;\n  offset: number;\n  projectID?: string | null;\n};\nexport type ServingListPageQuery$data = {\n  readonly endpoint_list: {\n    readonly items: ReadonlyArray<{\n      readonly created_at: string;\n      readonly created_user: string | null;\n      readonly desired_session_count: number;\n      readonly domain: string | null;\n      readonly endpoint_id: string | null;\n      readonly image: string | null;\n      readonly model: string | null;\n      readonly name: string | null;\n      readonly open_to_public: boolean | null;\n      readonly project: string | null;\n      readonly resource_group: string | null;\n      readonly resource_slots: any | null;\n      readonly routings: ReadonlyArray<{\n        readonly endpoint: string | null;\n        readonly routing_id: string | null;\n        readonly session: string | null;\n        readonly status: string | null;\n        readonly traffic_ratio: number | null;\n      } | null> | null;\n      readonly status: string | null;\n      readonly url: string | null;\n      readonly \" $fragmentSpreads\": FragmentRefs<\"EndpointStatusTagFragment\" | \"ModelServiceSettingModal_endpoint\">;\n    } | null>;\n    readonly total_count: number;\n  } | null;\n};\nexport type ServingListPageQuery = {\n  response: ServingListPageQuery$data;\n  variables: ServingListPageQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"projectID\"\n},\nv3 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"filter\",\n    \"value\": \"name != 'koalpaca-test'\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"limit\",\n    \"variableName\": \"limit\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"offset\",\n    \"variableName\": \"offset\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"project\",\n    \"variableName\": \"projectID\"\n  }\n],\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"total_count\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"endpoint_id\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"model\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"domain\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"project\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"resource_group\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"resource_slots\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"url\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"open_to_public\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"created_at\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"created_user\",\n  \"storageKey\": null\n},\nv18 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"desired_session_count\",\n  \"storageKey\": null\n},\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"routing_id\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"endpoint\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"session\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"traffic_ratio\",\n  \"storageKey\": null\n},\nv23 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ServingListPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"EndpointList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"endpoint_list\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Endpoint\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v5/*: any*/),\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              {\n                \"kind\": \"RequiredField\",\n                \"field\": (v18/*: any*/),\n                \"action\": \"NONE\",\n                \"path\": \"endpoint_list.items.desired_session_count\"\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"Routing\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"routings\",\n                \"plural\": true,\n                \"selections\": [\n                  (v19/*: any*/),\n                  (v20/*: any*/),\n                  (v21/*: any*/),\n                  (v22/*: any*/),\n                  (v10/*: any*/)\n                ],\n                \"storageKey\": null\n              },\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"ModelServiceSettingModal_endpoint\"\n              },\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"EndpointStatusTagFragment\"\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v0/*: any*/),\n      (v2/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"ServingListPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"EndpointList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"endpoint_list\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Endpoint\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v5/*: any*/),\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"Routing\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"routings\",\n                \"plural\": true,\n                \"selections\": [\n                  (v19/*: any*/),\n                  (v20/*: any*/),\n                  (v21/*: any*/),\n                  (v22/*: any*/),\n                  (v10/*: any*/),\n                  (v23/*: any*/)\n                ],\n                \"storageKey\": null\n              },\n              (v23/*: any*/)\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"29c0fd05bb424c36d099de9e8db60a98\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ServingListPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ServingListPageQuery(\\n  $offset: Int!\\n  $limit: Int!\\n  $projectID: UUID\\n) {\\n  endpoint_list(offset: $offset, limit: $limit, project: $projectID, filter: \\\"name != 'koalpaca-test'\\\") {\\n    total_count\\n    items {\\n      name\\n      endpoint_id\\n      image\\n      model\\n      domain\\n      status\\n      project\\n      resource_group\\n      resource_slots\\n      url\\n      open_to_public\\n      created_at\\n      created_user\\n      desired_session_count\\n      routings {\\n        routing_id\\n        endpoint\\n        session\\n        traffic_ratio\\n        status\\n        id\\n      }\\n      ...ModelServiceSettingModal_endpoint\\n      ...EndpointStatusTagFragment\\n      id\\n    }\\n  }\\n}\\n\\nfragment EndpointStatusTagFragment on Endpoint {\\n  id\\n  status\\n}\\n\\nfragment ModelServiceSettingModal_endpoint on Endpoint {\\n  endpoint_id\\n  desired_session_count\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"436527bf622a2af8e2aaa29de86d091b\";\n\nexport default node;\n"],"names":["_ref","_modalProps$centered","modalProps","Object","assign","_objectDestructuringEmpty","_jsxs","_Fragment","children","_jsx","Modal","_objectSpread","centered","className","_endpoint$status","endpointFrgmt","endpoint","useFragment","_EndpointStatusTagFragment","require","color","status","toUpperCase","Tag","style","Flex","direction","justify","align","width","height","Spin","indicator","LoadingOutlined","spin","onRequestClose","baiModalProps","_objectWithoutProperties","_excluded","token","theme","useToken","baiClient","useSuspendedBackendaiClient","t","useTranslation","_Form$useForm","Form","useForm","form","_slicedToArray","_ModelServiceSettingModal_endpoint","mutationToUpdateService","useTanMutation","mutationFn","values","body","to","desired_session_count","baiSignedRequestWithPromise","method","url","concat","endpoint_id","client","BAIModal","zIndex","destroyOnClose","onOk","e","validateFields","then","mutate","onSuccess","console","log","onError","error","catch","err","onCancel","okButtonProps","loading","isLoading","title","preserve","validateTrigger","initialValues","marginBottom","marginLG","marginTop","margin","Item","name","label","rules","pattern","message","InputNumber","type","min","node","_$first","_$first2","filter","autoSelectDefault","selectProps","currentProject","useCurrentProjectValue","baiRequestWithPromise","useBaiSignedRequestWithPromise","_useUpdatableState","useUpdatableState","_useUpdatableState2","key","checkUpdate","data","useTanQuery","queryKey","queryFn","id","staleTime","filteredVFolders","_","autoSelectedOption","value","undefined","useEffect","_selectProps$onChange","onChange","call","Select","showSearch","onDropdownVisibleChange","open","startTransition","vfolder","Option","extraP","currentDomain","useCurrentDomainValue","_useResourceSlots","useResourceSlots","resourceSlots","mutationToCreateService","_values$environments$","_values$environments$2","_values$environments$3","_values$environments$4","image","environments","registry","tag","serviceName","desiredRoutingCount","arch","architecture","group","current_group","domain","cluster_size","cluster_mode","open_to_public","openToPublic","config","model","vFolderName","model_mount_destination","environ","scaling_group","resourceGroup","resources","cpu","mem","gpu","shmem","resource_opts","length","_err$errorFields","_err$errorFields$0$er","_err$errorFields2","_err$errorFields2$0$e","errorFields","errors","maskClosable","confirmLoading","Suspense","fallback","FlexActivityIndicator","disabled","layout","labelCol","span","required","Input","ResourceGroupSelect","valuePropName","Switch","VFolderSelect","vf","usage_mode","SliderInputItem","inputNumberProps","addonAfter","Card","ImageEnvironmentSelectFormItems","noStyle","shouldUpdate","prev","cur","_prev$environments","_prev$environments$im","_cur$environments","_cur$environments$ima","digest","_ref2","_getFieldValue","_$find","currentImage","getFieldValue","tooltip","Trans","i18nKey","parseInt","resource_limits","i","max","_config","maxCPUCoresPerContainer","maxMemoryPerContainer","step","_ref3","validator","_form","_$find2","sizeGInfo","iSizeToSize","number","Promise","reject","Error","size","numberUnit","resolve","maxShmPerContainer","maxCUDASharesPerContainer","maxCUDADevicesPerContainer","curProject","_useState","useState","_useState2","isOpenServiceLauncher","setIsOpenServiceLauncher","_useState3","_useState4","selectedModelService","setSelectedModelService","_useState5","_useState6","isOpenModelServiceSettingModal","setIsOpenModelServiceSettingModal","_useState7","current","pageSize","paginationState","_useTransition","useTransition","_useTransition2","isRefetchPending","startRefetchTransition","_useState9","_useState10","isOpenModelServiceTerminatingModal","setIsOpenModelServiceTerminatingModal","servicesFetchKey","updateServicesFetchKey","_useState11","_useState12","selectedTab","setSelectedTab","useRafInterval","startTransitionWithoutPendingState","modelServiceList","useLazyLoadQuery","_ServingListPageQuery","offset","limit","projectID","fetchPolicy","fetchKey","endpoint_list","sortedEndpointList","items","terminateModelServiceMutation","padding","gap","flex","Tabs","activeKey","tabBarStyle","paddingLeft","paddingMD","paddingRight","borderTopLeftRadius","borderRadius","borderTopRightRadius","tabBarExtraContent","right","Button","onClick","Table","scroll","x","rowKey","dataSource","columns","dataIndex","fixed","render","row","Link","Typography","Text","code","text","_row$status","_row$status2","_row$status3","_row$status4","icon","SettingOutlined","toLowerCase","DeleteOutlined","colorError","EndpointStatusTag","created_at","dayjs","format","defaultSortOrder","sortDirections","sorter","a","b","date1","date2","diff","fontWeight","_row$routings","routings","r","CheckOutlined","colorSuccess","CloseOutlined","colorTextSecondary","pagination","res","ModelServiceSettingModal","success","ServiceLauncherModal","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","v23","hash"],"sourceRoot":""}