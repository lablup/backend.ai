{"version":3,"file":"static/js/52.f1b71482.chunk.js","mappings":"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","sources":["hooks/useIntervalValue.tsx","components/BAIIntervalText.tsx","components/DatePickerISO.tsx","components/__generated__/VFolderPermissionTag_VFolder.graphql.ts","BAICard.tsx","components/EnvVarFormList.tsx","components/PortSelectFormItem.tsx","components/SessionKernelTag.tsx","components/SessionNameFormItem.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/**\n * Custom hook that executes a callback function at a specified interval.\n *\n * @param callback The function to be executed at the specified interval.\n * @param delay The delay (in milliseconds) between each execution of the callback function. If `null`, the interval is cleared(pause).\n */\nexport function useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef<() => any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current?.();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n/**\n * Custom hook that provides a value updated at a specified interval.\n *\n * @param calculator - A function that calculates the value.\n * @param delay - The delay in milliseconds between updates.\n * @param triggerKey - An optional key that triggers an immediate update when changed.\n * @returns The updated value.\n */\nexport const useIntervalValue = (\n  calculator: () => any,\n  delay: number,\n  triggerKey?: string,\n) => {\n  const [result, setResult] = useState(calculator());\n\n  useEffect(() => {\n    if (triggerKey) {\n      setResult(calculator());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [triggerKey]);\n\n  useInterval(() => {\n    const newResult = calculator();\n    if (newResult !== result) setResult(newResult);\n  }, delay);\n\n  return result;\n};\n","import { useIntervalValue } from '../hooks/useIntervalValue';\nimport React from 'react';\n\nconst BAIIntervalText: React.FC<{\n  callback: () => any;\n  delay: number;\n  triggerKey?: string;\n}> = ({ callback, delay, triggerKey }) => {\n  const value = useIntervalValue(callback, delay, triggerKey);\n  return value;\n};\n\nexport default BAIIntervalText;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO: React.FC<DatePickerISOProps> = ({\n  value,\n  onChange,\n  localFormat,\n  ...pickerProps\n}) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n};\n\nexport default DatePickerISO;\n","/**\n * @generated SignedSource<<a6063364be2bb8e0d0d7ede25c023b08>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null | undefined;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\ninterface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n              ? token.colorWarning\n              : status === 'success'\n                ? token.colorSuccess\n                : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          !_.isEmpty(variableName) &&\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                    onChange={() => {\n                      const fieldNames = fields.map((field, index) => [\n                        props.name,\n                        index,\n                        'variable',\n                      ]);\n                      form.validateFields(fieldNames);\n                    }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\n                        'session.launcher.EnvironmentVariableValueRequired',\n                      ),\n                    },\n                  ]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input\n                    placeholder=\"Value\"\n                    // onChange={() => {\n                    //   const valueFields = fields.map((field, index) => [\n                    //     props.name,\n                    //     index,\n                    //     'value',\n                    //   ]);\n                    //   form.validateFields(valueFields);\n                    // }}\n                  />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                {t('session.launcher.AddEnvironmentVariable')}\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nexport default EnvVarFormList;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({ ...formItemProps }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name=\"ports\"\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        {\n          max: baiClient._config.maxCountForPreopenPorts,\n          type: 'array',\n          message: t('session.launcher.PreOpenPortMaxCountLimit', {\n            count: baiClient._config.maxCountForPreopenPorts,\n          }),\n        },\n        ({ getFieldValue }) => ({\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                const port = parseInt(v);\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          return (\n            <PortTag\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n}\nexport const PortTag: React.FC<PortTagProps> = ({ value, ...tagProps }) => {\n  const port = parseInt(value);\n  const isValid = port >= MIN_PORT && port <= MAX_PORT;\n  return <Tag color={isValid ? undefined : 'red'} {...tagProps} />;\n};\n\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport DoubleTag from './DoubleTag';\nimport { Tag } from 'antd';\nimport React from 'react';\n\nconst SessionKernelTag: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n}> = ({ image, style = {} }, bordered) => {\n  image = image || '';\n  const [\n    ,\n    {\n      getImageAliasName,\n      getBaseVersion,\n      getBaseImage,\n      getArchitecture,\n      tagAlias,\n    },\n  ] = useBackendAIImageMetaData();\n\n  return (\n    <>\n      <DoubleTag\n        values={[\n          {\n            label: tagAlias(getImageAliasName(image)),\n            color: 'blue',\n          },\n          {\n            label: getBaseVersion(image),\n            color: 'green',\n          },\n        ]}\n      />\n      <Tag color=\"green\">{tagAlias(getBaseImage(image))}</Tag>\n      <Tag color=\"green\">{tagAlias(getArchitecture(image))}</Tag>\n    </>\n  );\n};\n\nexport default React.memo(SessionKernelTag);\n","import { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={[\n        {\n          min: 4,\n          message: t('session.Validation.SessionNameTooShort'),\n        },\n        {\n          max: 64,\n          message: t('session.Validation.SessionNameTooLong64'),\n        },\n        {\n          validator(f, value) {\n            if (_.isEmpty(value)) {\n              return Promise.resolve();\n            }\n            if (!/^\\w/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldStartWith'),\n              );\n            }\n\n            if (!/^[\\w.-]*$/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameInvalidCharacter'),\n              );\n            }\n\n            if (!/\\w$/.test(value) && value.length >= 4) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldEndWith'),\n              );\n            }\n            return Promise.resolve();\n          },\n        },\n      ]}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport { VFolderPermissionTag_VFolder$key } from './__generated__/VFolderPermissionTag_VFolder.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useCurrentProjectValue, useUpdatableState } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport { useShadowRoot } from './DefaultProviders';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  Button,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string | number;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\nexport interface VFolderTableProps extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n}\n\nconst VFolderTable: React.FC<VFolderTableProps> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = '/home/work/',\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  ...tableProps\n}) => {\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableValue<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableValue<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey, currentProject.id],\n    queryFn: () => {\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?group_id=${currentProject.id}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 0,\n  });\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.chain(allFolderList)\n    .filter((vf) => (filter ? filter(vf) : true))\n    .filter((vf) => {\n      if (selectedRowKeys.includes(getRowKey(vf))) {\n        return true;\n      }\n      return !searchKey || vf.name.includes(searchKey);\n    })\n    .value();\n  // const { token } = theme.useToken();\n  // const searchInput = useRef<InputRef>(null);\n\n  // TODO: set defaults\n  // useUpdateEffect(() => {\n  //   setSelectedRowKeys(defaultSelectedKeys || []);\n  // }, [defaultSelectedKeys]);\n\n  const handleAliasUpdate = (e?: any) => {\n    e?.preventDefault();\n    internalForm\n      .validateFields()\n      .then((values) => {})\n      .catch(() => {})\n      .finally(() => {\n        setAliasMap(\n          _.mapValues(\n            _.pickBy(internalForm.getFieldsValue(), (v) => !!v), //remove empty\n            (v, k) => mapAliasToPath(k, v), // add alias base path\n          ),\n        );\n      });\n  };\n\n  const mapAliasToPath = (name: VFolderKey, input?: string) => {\n    if (_.isEmpty(input)) {\n      return `${aliasBasePath}${name}`;\n    } else if (input?.startsWith('/')) {\n      return input;\n    } else {\n      return `${aliasBasePath}${input}`;\n    }\n  };\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : {\n                    maxWidth: 200,\n                  }\n            }\n          >\n            <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || mapAliasToPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: /^[a-zA-Z0-9_/-]*$/,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    mapAliasToPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={mapAliasToPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        // onPressEnter={handleAliasUpdate}\n                        // onBlur={handleAliasUpdate}\n                        onChange={handleAliasUpdate}\n                        allowClear\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Button\n          loading={isPendingRefetch}\n          icon={<ReloadOutlined />}\n          onClick={() => {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Form form={internalForm}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import VFolderTable, { AliasMap, VFolderTableProps } from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFromItemProps extends Omit<FormItemProps, 'name'> {\n  filter?: VFolderTableProps['filter'];\n}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n}\n\nconst VFolderTableFromItem: React.FC<VFolderTableFromItemProps> = ({\n  filter,\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  Form.useWatch('vfoldersAliasMap', form);\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey=\"name\"\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n          filter={filter}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFromItem;\n","import BAICard from '../BAICard';\nimport BAIIntervalText from '../components/BAIIntervalText';\nimport DatePickerISO from '../components/DatePickerISO';\nimport DoubleTag from '../components/DoubleTag';\nimport EnvVarFormList, {\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  PortTag,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionKernelTag from '../components/SessionKernelTag';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport VFolderTableFromItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport {\n  useCurrentProjectValue,\n  useSuspendedBackendaiClient,\n  useWebUINavigate,\n} from '../hooks';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport { useThemeMode } from '../hooks/useThemeMode';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn } from 'ahooks';\nimport {\n  Alert,\n  App,\n  Breadcrumb,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Descriptions,\n  Form,\n  FormInstance,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Table,\n  Tag,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { useRecoilValue } from 'recoil';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\nconst INITIAL_FORM_VALUES: SessionLauncherValue = {\n  sessionType: 'interactive',\n  // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n  allocationPreset: 'auto-preset',\n  hpcOptimization: {\n    autoEnabled: true,\n    OMP_NUM_THREADS: '1',\n    OPENBLAS_NUM_THREADS: '1',\n  },\n  batch: {\n    enabled: false,\n    command: undefined,\n    scheduleDate: undefined,\n  },\n  envvars: [],\n  ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n};\nconst stepParam = withDefault(NumberParam, 0);\nconst formValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n}\n\ntype SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n  let sessionMode: SessionMode = 'normal';\n\n  const mainContentDivRef = useRecoilValue(mainContentDivRefState);\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const [\n    { step: currentStep, formValues: formValuesFromQueryParams, redirectTo },\n    setQuery,\n  ] = useQueryParams({\n    step: stepParam,\n    formValues: formValuesParam,\n    redirectTo: StringParam,\n  });\n\n  const { isDarkMode } = useThemeMode();\n  const navigate = useNavigate();\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const baiClient = useSuspendedBackendaiClient();\n  const currentProject = useCurrentProjectValue();\n\n  const { upsertNotification } = useSetBAINotification();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.omit(\n            form.getFieldsValue(),\n            ['environments.image'],\n            ['environments.customizedTag'],\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  // After first render, set fields value using query params if it is NOT same as initial values\n  useEffect(() => {\n    if (\n      // if form is changed, validate it to show error on the first render\n      JSON.stringify(INITIAL_FORM_VALUES) !==\n      JSON.stringify(formValuesFromQueryParams)\n    ) {\n      form.setFieldsValue(formValuesFromQueryParams);\n      form.validateFields().catch((e) => {});\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: (\n          <PlayCircleFilled />\n          // <Flex\n          //   align=\"center\"\n          //   justify=\"center\"\n          //   style={{\n          //     // border: '1px solid gray',\n          //     backgroundColor: '#E8E7E7',\n          //     width: 24,\n          //     height: 24,\n          //     borderRadius: 12,\n          //     fontSize: 16,\n          //   }}\n          // >\n          //   <CaretRightOutlined />\n          // </Flex>\n        ),\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  // console.log(form.getFieldError(['resource', 'shmem']));\n  // console.log(form.getFieldValue(['resource']));\n\n  const moveToPreview = () => {\n    form\n      .validateFields()\n      .catch((e) => {})\n      .finally(() => {\n        setCurrentStep(steps.length - 1);\n      });\n  };\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n\n    setIsStartingSession(true);\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mounts) || values.mounts.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          kernelName,\n          architecture,\n          sessionName: sessionName,\n          config: {\n            type: values.sessionType,\n\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            group_name: currentProject.name,\n            domain: baiClient._config.domainName,\n            scaling_group: values.resourceGroup,\n            ///////////////////////////\n\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: _.map(values.ports, (v) => parseInt(v)),\n          },\n        };\n\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                20000,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                console.log(err);\n                throw err;\n                // console.log(err);\n                // if (err && err.message) {\n                //   if ('statusCode' in err && err.statusCode === 408) {\n                //     this.notification.text = _text(\n                //       'session.launcher.sessionStillPreparing',\n                //     );\n                //   } else {\n                //     if (err.description) {\n                //       this.notification.text = PainKiller.relieve(err.description);\n                //     } else {\n                //       this.notification.text = PainKiller.relieve(err.message);\n                //     }\n                //   }\n                //   this.notification.detail = err.message;\n                //   this.notification.show(true, err);\n                // } else if (err && err.title) {\n                //   this.notification.text = PainKiller.relieve(err.title);\n                //   this.notification.show(true, err);\n                // }\n              });\n          },\n        );\n        // console.log('##', values.mounts);\n        // console.log(sessionInfo);\n        webuiNavigate(redirectTo || '/job');\n        upsertNotification({\n          key: 'session-launcher:' + sessionName,\n          backgroundTask: {\n            promise: Promise.all(sessionPromises),\n            status: 'pending',\n            statusDescriptions: {\n              pending: t('session.PreparingSession'),\n              resolved: t('eduapi.ComputeSessionPrepared'),\n            },\n          },\n          duration: 0,\n          message: t('general.Session') + ': ' + sessionName,\n          open: true,\n        });\n        await Promise.all(sessionPromises)\n          .then(([firstSession]) => {\n            // console.log('##sessionPromises', firstSession);\n            if (\n              values.num_of_sessions === 1 &&\n              values.sessionType !== 'batch'\n            ) {\n              const res = firstSession;\n              let appOptions: {\n                [key in string]: any;\n              };\n              if ('kernelId' in res) {\n                // API v4\n                appOptions = {\n                  'session-name': res.kernelId,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              } else {\n                // API >= v5\n                appOptions = {\n                  'session-uuid': res.sessionId,\n                  'session-name': res.sessionName,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              }\n              const service_info = res.servicePorts;\n              if (Array.isArray(service_info) === true) {\n                appOptions['app-services'] = service_info.map(\n                  (a: { name: string }) => a.name,\n                );\n              } else {\n                appOptions['app-services'] = [];\n              }\n              // TODO: support import and inference\n              // if (sessionMode === 'import') {\n              //   appOptions['runtime'] = 'jupyter';\n              //   appOptions['filename'] = this.importFilename;\n              // }\n              // if (sessionMode === 'inference') {\n              //   appOptions['runtime'] = appOptions['app-services'].find(\n              //     (element: any) => !['ttyd', 'sshd'].includes(element),\n              //   );\n              // }\n\n              // only launch app when it has valid service ports\n              if (service_info.length > 0) {\n                // @ts-ignore\n                globalThis.appLauncher.showLauncher(appOptions);\n              }\n            }\n          })\n          .catch(() => {\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      {redirectTo && (\n        <Breadcrumb\n          items={[\n            {\n              title: t('webui.menu.Sessions'),\n              onClick: (e) => {\n                e.preventDefault();\n                webuiNavigate(redirectTo);\n              },\n              href: redirectTo,\n            },\n            {\n              title: t('session.launcher.StartNewSession'),\n            },\n          ]}\n        />\n      )}\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          {/* <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={3} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                icon={<BlockOutlined />}\n                disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n              >\n                {t('session.launcher.TemplateAndHistory')}\n              </Button>\n            </Flex>\n          </Flex> */}\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={INITIAL_FORM_VALUES}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      className=\"session-type-radio-group\"\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      label={t('session.launcher.SessionStartTime')}\n                      extra={\n                        <Form.Item\n                          noStyle\n                          shouldUpdate={(prev, next) =>\n                            prev.batch.scheduleDate !== next.batch.scheduleDate\n                          }\n                        >\n                          {() => {\n                            const scheduleDate = form.getFieldValue([\n                              'batch',\n                              'scheduleDate',\n                            ]);\n                            return (\n                              <BAIIntervalText\n                                delay={1000}\n                                callback={() => {\n                                  const scheduleDate = form.getFieldValue([\n                                    'batch',\n                                    'scheduleDate',\n                                  ]);\n                                  if (scheduleDate) {\n                                    if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                      if (\n                                        form.getFieldError([\n                                          'batch',\n                                          'scheduleDate',\n                                        ]).length === 0\n                                      ) {\n                                        form.validateFields([\n                                          ['batch', 'scheduleDate'],\n                                        ]);\n                                      }\n                                      return undefined;\n                                    } else {\n                                      return dayjs(scheduleDate).fromNow();\n                                    }\n                                  } else {\n                                    return undefined;\n                                  }\n                                }}\n                                triggerKey={\n                                  scheduleDate ? scheduleDate : 'none'\n                                }\n                              />\n                            );\n                          }}\n                        </Form.Item>\n                      }\n                    >\n                      <Flex direction=\"row\" gap={'xs'}>\n                        <Form.Item\n                          noStyle\n                          name={['batch', 'enabled']}\n                          valuePropName=\"checked\"\n                        >\n                          <Checkbox\n                            onChange={(e) => {\n                              if (\n                                e.target.checked &&\n                                _.isEmpty(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                )\n                              ) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  dayjs().add(2, 'minutes').toISOString(),\n                                );\n                              } else if (e.target.checked === false) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  undefined,\n                                );\n                              }\n                              form.validateFields([['batch', 'scheduleDate']]);\n                            }}\n                          >\n                            {t('session.launcher.Enable')}\n                          </Checkbox>\n                        </Form.Item>\n                        <Form.Item\n                          noStyle\n                          // dependencies={[['batch', 'enabled']]}\n                          shouldUpdate={(prev, next) => {\n                            return (\n                              // @ts-ignore\n                              prev.batch?.enabled !== next.batch?.enabled\n                            );\n                          }}\n                        >\n                          {() => {\n                            const disabled =\n                              form.getFieldValue('batch')?.enabled !== true;\n                            return (\n                              <>\n                                <Form.Item\n                                  name={['batch', 'scheduleDate']}\n                                  noStyle\n                                  rules={[\n                                    {\n                                      // required: true,\n                                      validator: async (rule, value) => {\n                                        if (\n                                          value &&\n                                          dayjs(value).isBefore(dayjs())\n                                        ) {\n                                          return Promise.reject(\n                                            t(\n                                              'session.launcher.StartTimeMustBeInTheFuture',\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <DatePickerISO\n                                    disabled={disabled}\n                                    showTime\n                                    localFormat\n                                    disabledDate={(value) => {\n                                      return value.isBefore(\n                                        dayjs().startOf('day'),\n                                      );\n                                    }}\n                                  />\n                                </Form.Item>\n                                {/* <Form.Item\n                                      noStyle\n                                      name={['batch', 'scheduleTime']}\n                                    >\n                                      <TimePicker disabled={disabled} />\n                                    </Form.Item> */}\n                              </>\n                            );\n                          }}\n                        </Form.Item>\n                      </Flex>\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableNumOfSessions\n                    enableResourcePresets\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFromItem\n                    filter={(vfolder) => {\n                      return vfolder.status === 'ready';\n                    }}\n                  />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('sessionName').length > 0 ||\n                        form.getFieldError(['batch', 'command']).length > 0 ||\n                        form.getFieldError(['batch', 'scheduleDate']).length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\" column={1}>\n                        <Descriptions.Item label={t('session.SessionType')}>\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        {!_.isEmpty(form.getFieldValue('sessionName')) && (\n                          <Descriptions.Item\n                            label={t('session.launcher.SessionName')}\n                          >\n                            {form.getFieldValue('sessionName')}\n                          </Descriptions.Item>\n                        )}\n                        {sessionType === 'batch' && (\n                          <>\n                            <Descriptions.Item\n                              label={t('session.launcher.StartUpCommand')}\n                            >\n                              {form.getFieldValue(['batch', 'command']) ? (\n                                <SyntaxHighlighter\n                                  style={isDarkMode ? dark : undefined}\n                                  language=\"shell\"\n                                  customStyle={{\n                                    margin: 0,\n                                    width: '100%',\n                                  }}\n                                >\n                                  {form.getFieldValue(['batch', 'command'])}\n                                </SyntaxHighlighter>\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                            <Descriptions.Item\n                              label={t('session.launcher.ScheduleTimeSimple')}\n                            >\n                              {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                                dayjs(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                ).format('LLL (Z)')\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                          </>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(form.getFieldValue('envvars'), (v, idx) => {\n                          return (\n                            form.getFieldError(['envvars', idx, 'variable'])\n                              .length > 0 ||\n                            form.getFieldError(['envvars', idx, 'value'])\n                              .length > 0\n                          );\n                        })\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" column={2}>\n                        <Descriptions.Item\n                          label={t('session.launcher.Project')}\n                        >\n                          {currentProject.name}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.ResourceGroup')}>\n                          {form.getFieldValue('resourceGroup')}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.Image')} span={2}>\n                          <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }}>\n                            <ImageMetaIcon\n                              image={\n                                form.getFieldValue('environments')?.version ||\n                                form.getFieldValue('environments')?.manual\n                              }\n                            />\n                            {/* {form.getFieldValue('environments').image} */}\n                            <Flex direction=\"row\">\n                              {form.getFieldValue('environments')?.manual ? (\n                                <Typography.Text copyable code>\n                                  form.getFieldValue('environments')?.manual\n                                </Typography.Text>\n                              ) : (\n                                <>\n                                  <SessionKernelTag\n                                    image={\n                                      form.getFieldValue('environments')\n                                        ?.version\n                                    }\n                                  />\n                                  {form.getFieldValue('environments')\n                                    ?.customizedTag ? (\n                                    <DoubleTag\n                                      values={[\n                                        {\n                                          label: 'Customized',\n                                          color: 'cyan',\n                                        },\n                                        {\n                                          label:\n                                            form.getFieldValue('environments')\n                                              ?.customizedTag,\n                                          color: 'cyan',\n                                        },\n                                      ]}\n                                    />\n                                  ) : null}\n                                  <Typography.Text\n                                    copyable={{\n                                      text: form.getFieldValue('environments')\n                                        ?.version,\n                                    }}\n                                  />\n                                </>\n                              )}\n                            </Flex>\n                          </Flex>\n                        </Descriptions.Item>\n                        {form.getFieldValue('envvars')?.length > 0 && (\n                          <Descriptions.Item\n                            label={t('session.launcher.EnvironmentVariable')}\n                          >\n                            {form.getFieldValue('envvars')?.length ? (\n                              <SyntaxHighlighter\n                                style={isDarkMode ? dark : undefined}\n                                codeTagProps={{\n                                  style: {\n                                    // fontFamily: 'monospace',\n                                  },\n                                }}\n                                // showLineNumbers\n                                customStyle={{\n                                  margin: 0,\n                                  width: '100%',\n                                }}\n                              >\n                                {_.map(\n                                  form.getFieldValue('envvars'),\n                                  (v: { variable: string; value: string }) =>\n                                    `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                                ).join('\\n')}\n                              </SyntaxHighlighter>\n                            ) : (\n                              <Typography.Text type=\"secondary\">\n                                -\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.ResourceAllocation')}\n                      status={\n                        _.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldError(['resource', key]).length > 0\n                          );\n                        }) || form.getFieldError(['num_of_sessions']).length > 0\n                          ? 'error'\n                          : // : _.some(form.getFieldValue('resource'), (v, key) => {\n                            //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n                            //     // console.log(form.getFieldValue(['resource']));\n                            //     return (\n                            //       form.getFieldWarning(['resource', key]).length >\n                            //       0\n                            //     );\n                            //   })\n                            // ? 'warning'\n                            undefined\n                      }\n                      size=\"small\"\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Flex direction=\"column\" align=\"stretch\">\n                        {_.some(\n                          form.getFieldValue('resource')?.resource,\n                          (v, key) => {\n                            return (\n                              form.getFieldWarning(['resource', key]).length > 0\n                            );\n                          },\n                        ) && (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t(\n                              'session.launcher.EnqueueComputeSessionWarning',\n                            )}\n                          />\n                        )}\n\n                        <Descriptions column={2}>\n                          <Descriptions.Item\n                            label={t(\n                              'session.launcher.ResourceAllocationPerContainer',\n                            )}\n                            span={2}\n                          >\n                            <Flex\n                              direction=\"row\"\n                              align=\"start\"\n                              gap={'sm'}\n                              wrap=\"wrap\"\n                              style={{ flex: 1 }}\n                            >\n                              {form.getFieldValue('allocationPreset') ===\n                              'custom' ? (\n                                // t('session.launcher.CustomAllocation')\n                                ''\n                              ) : (\n                                <Tag>\n                                  {form.getFieldValue('allocationPreset')}\n                                </Tag>\n                              )}\n\n                              <FormResourceNumbers form={form} />\n                              {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                            </Flex>\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.NumberOfContainer')}\n                          >\n                            {form.getFieldValue('cluster_size') === 1\n                              ? form.getFieldValue('num_of_sessions')\n                              : form.getFieldValue('cluster_size')}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.ClusterMode')}\n                          >\n                            {form.getFieldValue('cluster_mode') ===\n                            'single-node'\n                              ? t('session.launcher.SingleNode')\n                              : t('session.launcher.MultiNode')}\n                          </Descriptions.Item>\n                        </Descriptions>\n                        <Card\n                          size=\"small\"\n                          type=\"inner\"\n                          title={t('session.launcher.TotalAllocation')}\n                        >\n                          <Flex direction=\"row\" gap=\"xxs\">\n                            <FormResourceNumbers\n                              form={form}\n                              containerCount={\n                                form.getFieldValue('cluster_size') === 1\n                                  ? form.getFieldValue('num_of_sessions')\n                                  : form.getFieldValue('cluster_size')\n                              }\n                            />\n                          </Flex>\n                        </Card>\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {form.getFieldValue('mounts')?.length > 0 ? (\n                        <Table\n                          rowKey=\"name\"\n                          size=\"small\"\n                          pagination={false}\n                          columns={[\n                            {\n                              dataIndex: 'name',\n                              title: t('data.folders.Name'),\n                            },\n                            {\n                              dataIndex: 'alias',\n                              title: t('session.launcher.FolderAlias'),\n                              render: (value, record) => {\n                                return _.isEmpty(value) ? (\n                                  <Typography.Text\n                                    type=\"secondary\"\n                                    style={{\n                                      opacity: 0.7,\n                                    }}\n                                  >\n                                    {`/home/work/${record.name}`}\n                                  </Typography.Text>\n                                ) : (\n                                  value\n                                );\n                              },\n                            },\n                          ]}\n                          dataSource={_.map(\n                            form.getFieldValue('mounts'),\n                            (v) => {\n                              return {\n                                name: v,\n                                alias:\n                                  form.getFieldValue('vfoldersAliasMap')?.[v],\n                              };\n                            },\n                          )}\n                        ></Table>\n                      ) : (\n                        <Alert\n                          type=\"warning\"\n                          showIcon\n                          message={t('session.launcher.NoFolderMounted')}\n                        />\n                      )}\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n\n                            {!_.isArray(form.getFieldValue('ports')) ||\n                            form.getFieldValue('ports')?.length === 0 ? (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            ) : null}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    {/* <Popconfirm\n                    title={t('session.CheckAgainDialog')}\n                    placement=\"topLeft\"\n                    okButtonProps={{\n                      danger: true,\n                    }}\n                    okText={t('button.Reset')}\n                    onConfirm={() => {\n                      // @ts-ignore\n                      form.resetFields({\n\n                      });\n                    }}\n                  >\n                    <Button ghost danger>\n                      {t('button.Reset')}\n                    </Button>\n                  </Popconfirm> */}\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        form.resetFields();\n\n                        navigate('/session/start');\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </Flex>\n                  <Flex direction=\"row\" gap=\"sm\">\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button onClick={moveToPreview}>\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Flex style={{ position: 'sticky', top: 80 }}>\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                // handle \"skip to review\" step specifically, because validation\n                if (nextCurrent === steps.length - 1) {\n                  moveToPreview();\n                } else {\n                  setCurrentStep(nextCurrent);\n                }\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Flex>\n        )}\n      </Flex>\n      {/* <FolderExplorer\n        folderName={selectedFolderName}\n        open={!!selectedFolderName}\n        onRequestClose={() => {\n          setSelectedFolderName(undefined);\n        }}\n      /> */}\n    </Flex>\n  );\n};\n\nconst FormResourceNumbers: React.FC<{\n  form: FormInstance;\n  containerCount?: number;\n}> = ({ form, containerCount = 1 }) => {\n  return (\n    <>\n      {_.map(\n        _.omit(\n          form.getFieldsValue().resource,\n          'shmem',\n          'accelerator',\n          'acceleratorType',\n        ),\n        (value, type) => {\n          return (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (iSizeToSize(value, 'b')?.number || 0) * containerCount + ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: form.getFieldValue('resource').shmem\n                  ? (iSizeToSize(form.getFieldValue('resource').shmem, 'b')\n                      ?.number || 0) * containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {_.isNumber(form.getFieldValue(['resource', 'accelerator'])) &&\n        form.getFieldValue(['resource', 'acceleratorType']) && (\n          <ResourceNumber\n            // @ts-ignore\n            type={form.getFieldValue(['resource', 'acceleratorType'])}\n            value={_.toString(\n              form.getFieldValue(['resource', 'accelerator']) * containerCount,\n            )}\n          />\n        )}\n    </>\n  );\n};\n// const SessionTypeItem: React.FC<{\n//   title: string;\n//   description?: string;\n// }> = ({ title, description }) => {\n//   const { token } = theme.useToken();\n//   return (\n//     <Flex\n//       direction=\"column\"\n//       style={{ padding: token.paddingXS }}\n//       align=\"stretch\"\n//     >\n//       <Typography.Title level={5}>{title}</Typography.Title>\n//       <Typography.Text\n//         type=\"secondary\"\n//         // @ts-ignore\n//         style={{ textWrap: 'wrap' }}\n//       >\n//         {description}\n//       </Typography.Text>\n//     </Flex>\n//   );\n// };\n\n// interface StepContentProps extends FlexProps{\n\n// }\n// const StepContent: React.FC<{}> = () => {\n//   return <Flex>\n\n//   </Flex>\n// }\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nconst generateRandomString = () => {\n  let randNum = Math.floor(Math.random() * 52 * 52 * 52);\n\n  const parseNum = (num: number) => {\n    if (num < 26) return String.fromCharCode(65 + num);\n    else return String.fromCharCode(97 + num - 26);\n  };\n\n  let randStr = '';\n\n  for (let i = 0; i < 3; i++) {\n    randStr += parseNum(randNum % 52);\n    randNum = Math.floor(randNum / 52);\n  }\n\n  return randStr;\n};\n\nexport default SessionLauncherPage;\n"],"names":["useIntervalValue","calculator","delay","triggerKey","result","setResult","useState","useEffect","callback","savedCallback","useRef","current","id","setInterval","_savedCallback$curren","call","clearInterval","useInterval","newResult","_ref","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","_jsx","DatePicker","dayjs","undefined","_value","_value2","_value2$tz","_","newValue","format","tz","toISOString","node","status","extraButtonTitle","onClickExtraButton","extra","style","cardProps","token","theme","useToken","_extra","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","onClick","children","Card","borderColor","colorSuccess","formItemProps","props","inputRef","t","useTranslation","form","Form","useFormInstance","List","fields","_ref2","add","remove","_jsxs","Flex","direction","gap","align","map","_ref3","index","key","name","restField","Item","marginBottom","flex","rules","required","message","pattern","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","variable","length","Promise","reject","resolve","Input","ref","placeholder","fieldNames","field","validateFields","validateTrigger","MinusCircleOutlined","noStyle","setTimeout","focus","PlusOutlined","block","PortTag","tagProps","port","parseInt","isValid","Tag","color","baiClient","useSuspendedBackendaiClient","label","tooltip","Trans","i18nKey","max","_config","maxCountForPreopenPorts","count","values","v","Error","Select","mode","tagRender","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","SessionKernelTag","bordered","image","getImageAliasName","getBaseVersion","getBaseImage","getArchitecture","tagAlias","useBackendAIImageMetaData","_Fragment","DoubleTag","React","min","f","test","allowClear","autoComplete","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","require","tagValues","r","w","d","perm","hasPermission","includes","toUpperCase","compact","filter","showAliasInput","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","aliasBasePath","aliasMap","controlledAliasMap","onChangeAliasMap","rowKey","tableProps","getRowKey","record","setSelectedRowKeys","defaultValue","setAliasMap","internalForm","useForm","setFieldsValue","startsWith","slice","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","fetchKey","updateFetchKey","useUpdatableState","isPendingRefetch","startRefetchTransition","useTransition","data","allFolderList","useTanQuery","queryKey","queryFn","method","url","concat","staleTime","searchKey","setSearchKey","displayingFolders","vf","handleAliasUpdate","then","catch","finally","getFieldsValue","k","mapAliasToPath","input","shadowRoot","useShadowRoot","columns","title","Typography","Text","fontWeight","Tooltip","getPopupContainer","QuestionCircleOutlined","dataIndex","sorter","a","b","localeCompare","render","isCurrentRowSelected","display","height","maxWidth","TextHighlighter","keyword","shouldUpdate","prev","cur","allAliasPathMap","reduce","async","path","usage_mode","UserOutlined","group_name","row","VFolderPermissionTag","created_at","justify","target","loading","ReloadOutlined","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","useWatch","hidden","arr","valuePropName","trigger","VFolderTable","setFieldValue","pagination","INITIAL_FORM_VALUES","sessionType","allocationPreset","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","enabled","command","scheduleDate","envvars","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","stepParam","withDefault","NumberParam","formValuesParam","JsonParam","FormResourceNumbers","containerCount","resource","_iSizeToSize","_iSizeToSize2","ResourceNumber","iSizeToSize","number","opts","shmem","generateSessionId","text","possible","charAt","Math","floor","random","generateRandomString","randNum","randStr","num","String","fromCharCode","SessionLauncherPage","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue7","_form$getFieldValue8","_form$getFieldValue9","_form$getFieldValue10","_form$getFieldValue11","_form$getFieldValue12","_form$getFieldValue14","app","App","useApp","sessionMode","mainContentDivRef","useRecoilValue","mainContentDivRefState","isStartingSession","setIsStartingSession","step","currentStep","formValues","formValuesFromQueryParams","redirectTo","setQuery","useQueryParams","StringParam","isDarkMode","useThemeMode","navigate","useNavigate","webuiNavigate","useWebUINavigate","upsertNotification","useSetBAINotification","run","syncFormToURLWithDebounce","useDebounceFn","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","JSON","stringify","_mainContentDivRef$cu","scrollTo","preserve","steps","PlayCircleFilled","currentStepKey","hasError","getFieldsError","item","errors","moveToPreview","justifyContent","Breadcrumb","items","href","Provider","onFormChange","info","layout","requiredMark","initialValues","Radio","className","options","code","SessionNameFormItem","TextArea","autoSize","next","BAIIntervalText","isBefore","getFieldError","fromNow","Checkbox","checked","_prev$batch","_next$batch","_form$getFieldValue","disabled","DatePickerISO","showTime","disabledDate","startOf","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","ResourceAllocationFormItems","enableNumOfSessions","enableResourcePresets","Switch","checkedChildren","unCheckedChildren","_prev$hpcOptimization","_next$hpcOptimization","Row","gutter","marginMD","marginTop","Col","xs","sm","InputNumber","stringMode","VFolderTableFromItem","vfolder","PortSelectFormItem","BAICard","size","findIndex","Descriptions","column","SyntaxHighlighter","dark","language","customStyle","margin","idx","span","ImageMetaIcon","version","manual","copyable","customizedTag","codeTagProps","join","getFieldWarning","Alert","showIcon","wrap","opacity","_form$getFieldValue13","alias","Popconfirm","description","onConfirm","resetFields","okText","okButtonProps","danger","paddingRight","paddingLeft","LeftOutlined","PlayCircleOutlined","startSession","mounts","modal","confirm","content","onOk","onCancel","imageFullName","environments","kernelName","architecture","split","sessionName","sessionInfo","config","startsAt","startupCommand","domain","domainName","scaling_group","resourceGroup","cluster_mode","cluster_size","maxWaitSeconds","cpu","mem","compareNumberWithUnits","accelerator","acceleratorType","mount_map","vfoldersAliasMap","env","preopen_ports","ports","sessionPromises","num_of_sessions","formattedSessionName","createIfNotExists","res","created","err","backgroundTask","promise","all","statusDescriptions","pending","resolved","duration","firstSession","appOptions","kernelId","sessionId","service_info","servicePorts","Array","isArray","globalThis","appLauncher","showLauncher","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","s"],"sourceRoot":""}