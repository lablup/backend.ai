{"version":3,"file":"static/js/649.7fb4f271.chunk.js","mappings":"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","sources":["components/DoubleTag.tsx","components/DynamicUnitInputNumber.tsx","components/ImageMetaIcon.tsx","components/InputNumberWithSlider.tsx","components/DynamicUnitInputNumberWithSlider.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/__generated__/ResourcePresetSelectQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql.ts","hooks/hooksUsingRelay.tsx","hooks/useResourceLimitAndRemaining.tsx"],"sourcesContent":["import Flex from './Flex';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: ValueType;\n  color?: string;\n};\n\ntype ValueType = string | React.ReactNode;\nconst DoubleTag: React.FC<{\n  values?: ValueType[] | DoubleTagObjectValue[];\n}> = ({ values = [] }) => {\n  if (values.length === 0) return null;\n  let objectValues: DoubleTagObjectValue[];\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) => {\n        return (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {objValue.label}\n          </Tag>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","import { iSizeToSize, parseUnit } from '../helper';\nimport { useControllableValue, usePrevious } from 'ahooks';\nimport { InputNumber, InputNumberProps, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nexport interface DynamicUnitInputNumberProps\n  extends Omit<\n    InputNumberProps,\n    'step' | 'max' | 'min' | 'value' | 'onChange'\n  > {\n  dynamicSteps?: number[];\n  disableAutoUnit?: boolean;\n  max?: string;\n  min?: string;\n  value?: string | null | undefined;\n  units?: string[];\n  roundStep?: number;\n  onChange?: (value: string) => void;\n}\n\nconst DynamicUnitInputNumber: React.FC<DynamicUnitInputNumberProps> = ({\n  dynamicSteps = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],\n  units = ['m', 'g', 't', 'p'],\n  disableAutoUnit = false,\n  min = '0m',\n  max = '300p',\n  roundStep,\n  ...inputNumberProps\n}) => {\n  const [value, setValue] = useControllableValue<string | null | undefined>(\n    inputNumberProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const [numValue, _unitFromValue] =\n    value === null || value === undefined ? [null, null] : parseUnit(value);\n  const previousUnit = usePrevious(_unitFromValue);\n  const unit = _unitFromValue || previousUnit || units[0];\n\n  const [minNumValue, minUnit] = parseUnit(min);\n  const [maxNumValue, maxUnit] = parseUnit(max);\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const onInput = (e: Event) => {\n        // @ts-ignore\n        const value = e?.target?.value;\n        if (/^\\d+(g|m)$/.test(value)) {\n          // const [newNumber, newUnit] = parseUnit(value);\n          // if (newNumber === numValue && newUnit === unit) {\n          //   e.target.value = numValue;\n          // } else {\n          setValue(value);\n          // }\n        }\n      };\n      const target = ref.current;\n      target?.addEventListener('input', onInput);\n      return () => {\n        target?.removeEventListener('input', onInput);\n      };\n    }\n  }, [ref, numValue, _unitFromValue, setValue]);\n\n  return (\n    <InputNumber\n      ref={ref}\n      {...inputNumberProps}\n      onBlur={() => {\n        if (_.isNumber(roundStep) && roundStep > 0) {\n          const decimalCount = roundStep.toString().split('.')[1]?.length || 0;\n          if (\n            isNaN(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n                roundStep,\n            )\n          ) {\n            return;\n          }\n          setValue(\n            `${(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n              roundStep\n            ).toFixed(decimalCount)}${unit}`,\n          );\n        }\n      }}\n      value={numValue}\n      onChange={(newValue) => {\n        if (newValue === null || newValue === undefined) {\n          setValue(newValue);\n        } else {\n          setValue(`${newValue}${unit}`);\n        }\n      }}\n      //TODO: When min and max have different units, they should be calculated and put in.\n      // 입력의 초소단위 확인 0.4g 가 되는지 확인\n      // @ts-ignore\n      max={maxUnit === unit ? maxNumValue : iSizeToSize(max, unit).number}\n      min={\n        minUnit === unit\n          ? minNumValue\n          : // @ts-ignore\n            iSizeToSize(min, unit).number\n      }\n      addonAfter={\n        <Select\n          tabIndex={-1}\n          value={unit}\n          onChange={(newUnit) => {\n            setValue(`${numValue}${newUnit}`);\n          }}\n          onDropdownVisibleChange={(open) => {\n            // A null or undefined value doesn't have a unit info, so we need to set the value before setting the unit.\n            if ((open && value === null) || value === undefined) {\n              setValue(`0${unit}`);\n            }\n          }}\n          options={_.map(units, (unit) => ({\n            value: unit,\n            label: (\n              <Typography.Text\n                style={{\n                  fontFamily:\n                    \"'SFMono-Regular',Consolas,'Liberation Mono',Menlo,Courier,monospace\",\n                }}\n              >\n                {unit.toUpperCase() + 'iB'}\n              </Typography.Text>\n            ),\n          }))}\n          suffixIcon={units.length > 1 ? undefined : null}\n          open={units.length > 1 ? undefined : false}\n          style={{\n            cursor: units.length > 1 ? undefined : 'default',\n          }}\n        />\n      }\n      step={0} // this step applies when onStep doesn't setValue\n      onStep={(afterStepValue, info) => {\n        const numValueNotNull =\n          _.isNull(numValue) || _.isUndefined(numValue) ? 0 : numValue;\n        const index = _.sortedIndex(_.sortBy(dynamicSteps), numValueNotNull);\n        let nextIndex: number;\n        if (info.type === 'up') {\n          if (numValueNotNull === dynamicSteps[index]) {\n            nextIndex = index + 1;\n          } else {\n            nextIndex = index;\n          }\n        } else {\n          nextIndex = index - 1;\n        }\n\n        const currentUnitIndex = units.indexOf(unit);\n        if (!disableAutoUnit && nextIndex < 0) {\n          // WHEN MOVING TO MORE Smaller Unit: change unit and number\n          if (currentUnitIndex === 0) {\n            // if already at min unit, set to 0\n            setValue(`0${unit}`);\n          } else {\n            const nextValue = dynamicSteps[dynamicSteps.length - 1];\n            const nextUnit = units[currentUnitIndex - 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else if (!disableAutoUnit && nextIndex > dynamicSteps.length - 1) {\n          // WHEN MOVING TO MORE Bigger Unit: change unit and number\n          //  if already at max unit, step up/down by 1\n          if (currentUnitIndex === units.length - 1) {\n            setValue(\n              `${numValueNotNull + (info.type === 'up' ? 1 : -1)}${maxUnit}`,\n            );\n          } else {\n            const nextValue = dynamicSteps[0];\n            const nextUnit = units[currentUnitIndex + 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else {\n          // WHEN, DON'T NEED TO CHANGE UNIT\n          if (nextIndex >= 0 && nextIndex < dynamicSteps.length) {\n            let nextNumValue = dynamicSteps[nextIndex];\n            if (minUnit === unit && nextNumValue < minNumValue) {\n              nextNumValue = minNumValue;\n            } else if (maxUnit === unit && nextNumValue > maxNumValue) {\n              nextNumValue = maxNumValue;\n            }\n            setValue(`${nextNumValue}${unit}`);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DynamicUnitInputNumber;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n  alt?: string | null;\n}> = ({ image, style = {} }, bordered, alt = '') => {\n  const [, { getImageIcon }] = useBackendAIImageMetaData();\n\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: '1em',\n        height: '1em',\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","import { useUpdatableState } from '../hooks';\nimport Flex from './Flex';\nimport { useControllableValue } from 'ahooks';\nimport { InputNumber, Slider, InputNumberProps, SliderSingleProps } from 'antd';\nimport { SliderRangeProps } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\n\ntype OmitControlledProps<T> = Omit<T, 'value' | 'onChange'>;\n\ninterface InputNumberWithSliderProps {\n  min?: number;\n  max?: number;\n  step?: number | null;\n  disabled?: boolean;\n  value?: number;\n  onChange?: (value: number) => void;\n  inputNumberProps?: OmitControlledProps<InputNumberProps>;\n  sliderProps?:\n    | OmitControlledProps<SliderSingleProps>\n    | OmitControlledProps<SliderRangeProps>;\n}\nconst InputNumberWithSlider: React.FC<InputNumberWithSliderProps> = ({\n  min,\n  max,\n  step,\n  disabled,\n  inputNumberProps,\n  sliderProps,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableValue(otherProps);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    // when step is 1, make sure the value is integer\n    if (step === 1 && value % 1 !== 0) {\n      setValue(_.max([Math.round(value), min]));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [step]);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    setTimeout(() => {\n      updateKey(value);\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        align=\"stretch\"\n        direction=\"column\"\n      >\n        <InputNumber\n          key={key}\n          ref={inputRef}\n          max={max}\n          min={min}\n          step={step ?? undefined}\n          disabled={disabled}\n          value={value}\n          onChange={setValue}\n          onBlur={() => {\n            if (_.isNumber(step) && step > 0) {\n              const decimalCount = step.toString().split('.')[1]?.length || 0;\n              setValue(\n                _.max([\n                  _.toNumber(\n                    (\n                      Math.round(\n                        _.toNumber(inputRef.current?.value || '0') / step,\n                      ) * step\n                    ).toFixed(decimalCount),\n                  ),\n                  min,\n                ]),\n              );\n            }\n          }}\n          {...inputNumberProps}\n        />\n      </Flex>\n      <Flex direction=\"column\" align=\"stretch\" style={{ flex: 3 }}>\n        <Slider\n          max={max}\n          min={0}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={(value: any) => {\n            if (min !== undefined && value < min) {\n              return;\n            } else {\n              setValue(value);\n            }\n          }}\n          {...sliderProps}\n          // remove marks that are greater than max\n          marks={_.omitBy(sliderProps?.marks, (option, key) => {\n            return _.isNumber(max) ? _.parseInt(key) > max : false;\n          })}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default InputNumberWithSlider;\n","import { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport DynamicUnitInputNumber, {\n  DynamicUnitInputNumberProps,\n} from './DynamicUnitInputNumber';\nimport Flex from './Flex';\nimport { useControllableValue } from 'ahooks';\nimport { Slider, theme } from 'antd';\nimport { SliderMarks } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\n\nexport interface DynamicUnitInputNumberWithSliderProps\n  extends DynamicUnitInputNumberProps {\n  extraMarks?: SliderMarks;\n  hideSlider?: boolean;\n  warn?: string;\n  step?: number;\n}\nconst DynamicUnitInputNumberWithSlider: React.FC<\n  DynamicUnitInputNumberWithSliderProps\n> = ({\n  min = '0m',\n  max = '32g',\n  warn,\n  units = ['m', 'g'],\n  extraMarks,\n  hideSlider,\n  step = 0.05,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableValue<string | undefined | null>(\n    otherProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const { token } = theme.useToken();\n  const minGiB = useMemo(() => iSizeToSize(min, 'g', 2), [min]);\n  const maxGiB = useMemo(() => iSizeToSize(max, 'g', 2), [max]);\n  const valueGiB = useMemo(() => iSizeToSize(value || '0g', 'g', 2), [value]);\n\n  // const warnPercent = useMemo(() => {\n  //   return warn\n  //     ? ((iSizeToSize(warn, 'g', 2)?.number || 0) / (maxGiB?.number || 1)) * 100\n  //     : undefined;\n  // }, [warn, maxGiB?.number]);\n  // console.log('##marks', marks);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    setTimeout(() => {\n      updateKey(value);\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        direction=\"column\"\n        align=\"stretch\"\n      >\n        <DynamicUnitInputNumber\n          {...otherProps}\n          key={key}\n          min={min}\n          max={max}\n          units={units}\n          value={value}\n          onChange={(nextValue) => {\n            setValue(nextValue);\n          }}\n          style={{\n            minWidth: 130,\n          }}\n          roundStep={step}\n        />\n      </Flex>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 3,\n          ...(hideSlider && {\n            visibility: 'hidden',\n            height: 0,\n          }),\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {/* {warn && (\n            <Flex\n              direction=\"row\"\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 14.5,\n                width: '100%',\n                height: 4,\n                padding: '0 5px',\n              }}\n              align=\"start\"\n            >\n              <div\n                style={{\n                  width: warnPercent + '%',\n                  height: 4,\n                }}\n              ></div>\n              <div\n                style={{\n                  marginTop: 3,\n                  marginLeft: -3.5,\n                  width: 0,\n                  height: 0,\n\n                  borderTop: '4px solid transparent',\n                  borderLeft: '4px solid transparent',\n                  borderRight: '4px solid transparent',\n                  borderBottom: `7px solid ${token.colorWarning}`,\n                }}\n              ></div>\n            </Flex>\n          )} */}\n          <Slider\n            max={maxGiB?.number}\n            styles={{\n              track:\n                (warn && {\n                  backgroundColor:\n                    compareNumberWithUnits(warn, value || '0b') < 0\n                      ? token.colorWarning\n                      : undefined,\n                }) ||\n                undefined,\n              rail: {\n                // backgroundColor:'red',\n                // fill: 'red',\n              },\n            }}\n            step={step}\n            // min={minGiB.number}  // DO NOT use min, because slider left should be 0\n            value={valueGiB?.number}\n            tooltip={{\n              formatter: (value = 0) => {\n                return value < 1\n                  ? `${(value * 1024).toFixed(2)} MiB`\n                  : `${value.toFixed(2)} GiB`;\n              },\n            }}\n            onChange={(newNumValue) => {\n              if (minGiB?.number && minGiB.number > newNumValue) {\n                setValue(min);\n              } else {\n                setValue(\n                  newNumValue < 1\n                    ? `${newNumValue * 1024}m`\n                    : `${newNumValue}g`,\n                );\n              }\n            }}\n            marks={{\n              // 0: {\n              //   style: {\n              //     color: token.colorTextSecondary,\n              //   },\n              //   label: 0,\n              // },\n              ...(minGiB &&\n                _.isNumber(minGiB?.number) && {\n                  [minGiB.number]: {\n                    style: {\n                      color: token.colorTextSecondary,\n                    },\n                    // if 0, without unit\n                    label:\n                      minGiB.number === 0\n                        ? minGiB.number\n                        : minGiB.number >= 1\n                          ? minGiB.number + 'g'\n                          : minGiB.number * 1024 + 'm',\n                  },\n                }),\n              // extra: remaining mark code should be located before max mark code to prevent overlapping when it is same value\n              ..._.omitBy(extraMarks, (option, key) => {\n                return _.isNumber(maxGiB?.number)\n                  ? _.parseInt(key) > (maxGiB?.number as number)\n                  : false;\n              }),\n              ...(maxGiB?.number && {\n                [maxGiB.number]: {\n                  style: {\n                    color: token.colorTextSecondary,\n                  },\n                  label:\n                    maxGiB.number === 0\n                      ? maxGiB.number\n                      : maxGiB.number >= 1\n                        ? maxGiB.number + 'g'\n                        : maxGiB.number * 1024 + 'm',\n                },\n              }),\n            }}\n          />\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default DynamicUnitInputNumberWithSlider;\n","import { localeCompare } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport {\n  ResourcePresetSelectQuery,\n  ResourcePresetSelectQuery$data,\n} from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport { useControllableValue, useThrottleFn } from 'ahooks';\nimport { Select, Tooltip, theme } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\n\nexport type ResourcePreset = NonNullable<\n  NonNullable<ResourcePresetSelectQuery$data['resource_presets']>[number]\n>;\nexport interface ResourcePresetSelectProps\n  extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n  allocatablePresetNames?: string[];\n  showMinimumRequired?: boolean;\n  showCustom?: boolean;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  allocatablePresetNames,\n  showCustom,\n  showMinimumRequired,\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [resourceSlots] = useResourceSlots();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const [controllableValue, setControllableValue] =\n    useControllableValue(selectProps);\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n\n  return (\n    <Select\n      loading={isPendingUpdate}\n      options={[\n        ...(showCustom\n          ? [\n              {\n                value: 'custom',\n                label: (\n                  <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n                    <EditOutlined /> {t('session.launcher.CustomAllocation')}\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.CustomAllocation'),\n              },\n            ]\n          : []),\n        ...(showMinimumRequired\n          ? [\n              {\n                value: 'minimum-required',\n                label: (\n                  <Flex gap={'xs'}>\n                    {t('session.launcher.MiniumAllocation')}\n                    <Tooltip\n                      title={t('session.launcher.MiniumAllocationTooltip')}\n                    >\n                      <InfoCircleOutlined\n                        style={{\n                          color: token.colorTextSecondary,\n                        }}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.MiniumAllocation'),\n              },\n            ]\n          : []),\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset, index) => {\n            const slotsInfo: {\n              [key in string]: string;\n            } = JSON.parse(preset?.resource_slots);\n            const disabled = allocatablePresetNames\n              ? !allocatablePresetNames.includes(preset?.name || '')\n              : undefined;\n            return {\n              value: preset?.name,\n              label: (\n                <Flex direction=\"row\" justify=\"between\" gap={'xs'}>\n                  {preset?.name}\n                  <Flex\n                    direction=\"row\"\n                    gap={'xxs'}\n                    style={\n                      {\n                        // color: 'black',\n                        // opacity: isAvailable ? 1 : 0.4,\n                      }\n                    }\n                  >\n                    {_.map(\n                      _.omitBy(slotsInfo, (slot, key) =>\n                        // @ts-ignore\n                        _.isEmpty(resourceSlots[key]),\n                      ),\n                      (slot, key) => {\n                        return (\n                          <ResourceNumber\n                            key={key}\n                            // @ts-ignore\n                            type={key}\n                            value={slot}\n                            hideTooltip\n                          />\n                        );\n                      },\n                    )}\n                  </Flex>\n                </Flex>\n              ),\n              preset,\n              disabled: disabled,\n            };\n          })\n            .sort(\n              (\n                a,\n                b, // by disabled\n              ) => (a.disabled === b.disabled ? 0 : a.disabled ? 1 : -1),\n            )\n            .sort((a, b) => localeCompare(a.value, b.value)), // by name\n        },\n      ]}\n      showSearch\n      // Set props from parent and override it\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValue}\n      optionLabelProp={\n        _.includes(['custom', 'minimum-required'], controllableValue)\n          ? 'selectedLabel'\n          : 'label'\n      }\n      onDropdownVisibleChange={(open) => {\n        selectProps.onDropdownVisibleChange &&\n          selectProps.onDropdownVisibleChange(open);\n        if (open) {\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import {\n  addNumberWithUnits,\n  compareNumberWithUnits,\n  iSizeToSize,\n} from '../helper';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { useCurrentKeyPairResourcePolicyLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupValue,\n} from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport { useResourceLimitAndRemaining } from '../hooks/useResourceLimitAndRemaining';\nimport DynamicUnitInputNumberWithSlider from './DynamicUnitInputNumberWithSlider';\nimport Flex from './Flex';\nimport { ImageEnvironmentFormInput } from './ImageEnvironmentSelectFormItems';\nimport InputNumberWithSlider from './InputNumberWithSlider';\nimport ResourceGroupSelectForCurrentProject from './ResourceGroupSelectForCurrentProject';\nimport { ACCELERATOR_UNIT_MAP } from './ResourceNumber';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport {\n  Card,\n  Col,\n  Divider,\n  Form,\n  Radio,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport const AUTOMATIC_DEFAULT_SHMEM = '64m';\nexport const RESOURCE_ALLOCATION_INITIAL_FORM_VALUES = {\n  resource: {\n    cpu: 0,\n    mem: '0g',\n    shmem: '0g',\n    accelerator: 0,\n  },\n  num_of_sessions: 1,\n  cluster_mode: 'single-node',\n  cluster_size: 1,\n  enabledAutomaticShmem: true,\n};\n\nexport interface ResourceAllocationFormValue {\n  resource: {\n    cpu: number;\n    mem: string;\n    shmem: string;\n    accelerator: number;\n    acceleratorType: string;\n  };\n  resourceGroup: string;\n  num_of_sessions?: number;\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  enabledAutomaticShmem: boolean;\n  allocationPreset?: string;\n}\n\ntype MergedResourceAllocationFormValue = ResourceAllocationFormValue &\n  ImageEnvironmentFormInput;\n\ninterface ResourceAllocationFormItemsProps {\n  enableNumOfSessions?: boolean;\n  enableResourcePresets?: boolean;\n  showRemainingWarning?: boolean;\n  forceImageMinValues?: boolean;\n}\n\nconst ResourceAllocationFormItems: React.FC<\n  ResourceAllocationFormItemsProps\n> = ({\n  enableNumOfSessions,\n  enableResourcePresets,\n  forceImageMinValues = false,\n  showRemainingWarning = false,\n}) => {\n  const form = Form.useFormInstance<MergedResourceAllocationFormValue>();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n\n  const [{ keypairResourcePolicy, sessionLimitAndRemaining }] =\n    useCurrentKeyPairResourcePolicyLazyLoadQuery();\n\n  const currentProject = useCurrentProjectValue();\n  const currentResourceGroup = useCurrentResourceGroupValue(); // use global state\n\n  const currentImage = Form.useWatch(['environments', 'image'], {\n    form,\n    preserve: true,\n  });\n  const [{ currentImageMinM, remaining, resourceLimits, checkPresetInfo }] =\n    useResourceLimitAndRemaining({\n      currentProjectName: currentProject.name,\n      currentResourceGroup: currentResourceGroup || undefined, // global currentResourceGroup can be null\n      currentImage: currentImage,\n    });\n\n  const acceleratorSlots = _.omitBy(resourceSlots, (value, key) => {\n    if (['cpu', 'mem', 'shmem'].includes(key)) return true;\n\n    if (\n      !resourceLimits.accelerators[key]?.max ||\n      resourceLimits.accelerators[key]?.max === 0\n    )\n      return true;\n    return false;\n  });\n\n  const currentImageAcceleratorLimits = _.filter(\n    currentImage?.resource_limits,\n    (limit) =>\n      limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n  );\n\n  const sessionSliderLimitAndRemaining = {\n    min: 1,\n    max: sessionLimitAndRemaining.max,\n    remaining: sessionLimitAndRemaining.remaining,\n  };\n\n  const allocatablePresetNames = useMemo(() => {\n    const bySliderLimit = _.filter(checkPresetInfo?.presets, (preset) => {\n      if (\n        typeof preset.resource_slots.mem === 'string' &&\n        typeof resourceLimits.mem?.max === 'string' &&\n        compareNumberWithUnits(\n          preset.resource_slots.mem,\n          resourceLimits.mem?.max,\n        ) > 0\n      ) {\n        return false;\n      }\n      if (\n        typeof preset.resource_slots.cpu === 'number' &&\n        typeof resourceLimits.cpu?.max === 'number' &&\n        preset.resource_slots.cpu > resourceLimits.cpu?.max\n      ) {\n        return false;\n      }\n      const acceleratorKeys = _.keys(\n        _.omit(preset.resource_slots, ['mem', 'cpu', 'shmem']),\n      );\n      const isAvailable = _.every(acceleratorKeys, (key) => {\n        if (\n          key &&\n          typeof preset.resource_slots[key] === 'string' &&\n          typeof resourceLimits.accelerators[key]?.max === 'number' &&\n          _.toNumber(preset.resource_slots[key]) >\n            _.toNumber(resourceLimits.accelerators[key]?.max)\n        ) {\n          return false;\n        }\n        return true;\n      });\n      return isAvailable;\n    }).map((preset) => preset.name);\n\n    const byImageAcceleratorLimits = _.filter(\n      checkPresetInfo?.presets,\n      (preset) => {\n        const acceleratorResourceOfPreset = _.omitBy(\n          preset.resource_slots,\n          (value, key) => {\n            if (['mem', 'cpu', 'shmem'].includes(key) || value === '0')\n              return true;\n          },\n        );\n        if (currentImageAcceleratorLimits.length === 0) {\n          if (_.isEmpty(acceleratorResourceOfPreset)) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        return _.some(currentImageAcceleratorLimits, (limit) => {\n          return _.some(acceleratorResourceOfPreset, (value, key) => {\n            return (\n              limit?.key === key && _.toNumber(value) >= _.toNumber(limit?.min)\n            );\n          });\n        });\n      },\n    ).map((preset) => preset.name);\n\n    return currentImageAcceleratorLimits.length > 0\n      ? bySliderLimit\n      : _.intersection(bySliderLimit, byImageAcceleratorLimits);\n  }, [\n    checkPresetInfo?.presets,\n    resourceLimits.accelerators,\n    resourceLimits.cpu?.max,\n    resourceLimits.mem?.max,\n    currentImageAcceleratorLimits,\n  ]);\n\n  const updateAllocationPresetBasedOnResourceGroup = useEventNotStable(() => {\n    if (\n      _.includes(\n        ['custom', 'minimum-required'],\n        form.getFieldValue('allocationPreset'),\n      )\n    ) {\n    } else {\n      if (\n        allocatablePresetNames.includes(form.getFieldValue('allocationPreset'))\n      ) {\n        // if the current preset is available in the current resource group, do nothing.\n      } else if (enableResourcePresets && allocatablePresetNames[0]) {\n        const autoSelectedPreset = _.sortBy(allocatablePresetNames)[0];\n        form.setFieldsValue({\n          allocationPreset: autoSelectedPreset,\n        });\n        updateResourceFieldsBasedOnPreset(autoSelectedPreset);\n      } else {\n        form.setFieldsValue({\n          allocationPreset: 'custom',\n        });\n      }\n    }\n\n    form\n      .validateFields(['resource'], {\n        recursive: true,\n      })\n      .catch(() => {});\n  });\n\n  // update allocation preset based on resource group and current image\n  useEffect(() => {\n    currentResourceGroup && updateAllocationPresetBasedOnResourceGroup();\n  }, [\n    currentResourceGroup,\n    updateAllocationPresetBasedOnResourceGroup,\n    currentImage,\n  ]);\n\n  const updateResourceFieldsBasedOnImage = (force?: boolean) => {\n    // when image changed, set value of resources to min value only if it's larger than current value\n    const minimumResources: Partial<ResourceAllocationFormValue['resource']> = {\n      cpu: resourceLimits.cpu?.min,\n      mem:\n        iSizeToSize(\n          (iSizeToSize(resourceLimits.shmem?.min, 'm')?.number || 0) +\n            (iSizeToSize(resourceLimits.mem?.min, 'm')?.number || 0) +\n            'm',\n          'g',\n        )?.number + 'g', //to prevent loosing precision\n    };\n\n    // NOTE: accelerator value setting is done inside the conditional statement\n    if (currentImageAcceleratorLimits.length > 0) {\n      if (\n        _.find(\n          currentImageAcceleratorLimits,\n          (limit) =>\n            limit?.key === form.getFieldValue(['resource', 'acceleratorType']),\n        )\n      ) {\n        // if current selected accelerator type is supported in the selected image,\n        minimumResources.acceleratorType = form.getFieldValue([\n          'resource',\n          'acceleratorType',\n        ]);\n        minimumResources.accelerator =\n          resourceLimits.accelerators[\n            form.getFieldValue(['resource', 'acceleratorType'])\n          ]?.min;\n      } else {\n        // if current selected accelerator type is not supported in the selected image,\n        // change accelerator type to the first supported accelerator type.\n        const nextImageSelectorType: string | undefined | null = // NOTE:\n          // filter from resourceSlots since resourceSlots and supported image could be non-identical.\n          // resourceSlots returns \"all resources enable to allocate(including AI accelerator)\"\n          // imageAcceleratorLimit returns \"all resources that is supported in the selected image\"\n          _.filter(currentImageAcceleratorLimits, (acceleratorInfo: any) =>\n            _.keys(resourceSlots).includes(acceleratorInfo?.key),\n          )[0]?.key;\n\n        if (nextImageSelectorType) {\n          minimumResources.accelerator =\n            resourceLimits.accelerators[nextImageSelectorType]?.min;\n          minimumResources.acceleratorType = nextImageSelectorType;\n        }\n      }\n    } else {\n      minimumResources.accelerator = 0;\n    }\n\n    if (!forceImageMinValues && !force) {\n      // delete keys that is not less than current value\n      (['cpu', 'accelerator'] as const).forEach((key) => {\n        const minNum = minimumResources[key];\n        if (\n          _.isNumber(minNum) &&\n          minNum < form.getFieldValue(['resource', key])\n        ) {\n          delete minimumResources[key];\n        }\n      });\n      (['mem', 'shmem'] as const).forEach((key) => {\n        const minNumStr = minimumResources[key];\n        if (\n          _.isString(minNumStr) &&\n          compareNumberWithUnits(\n            minNumStr,\n            form.getFieldValue(['resource', key]),\n          ) < 0\n        ) {\n          delete minimumResources[key];\n        }\n      });\n    }\n\n    form.setFieldsValue({\n      resource: {\n        ...minimumResources,\n      },\n    });\n\n    // set to 0 when currentImage doesn't support any AI accelerator\n    if (currentImage && currentImageAcceleratorLimits.length === 0) {\n      form.setFieldValue(['resource', 'accelerator'], 0);\n    }\n\n    if (form.getFieldValue('enabledAutomaticShmem')) {\n      runShmemAutomationRule(form.getFieldValue(['resource', 'mem']) || '0g');\n    }\n    form\n      .validateFields(['resource'], {\n        recursive: true,\n      })\n      .catch(() => {});\n  };\n\n  useEffect(() => {\n    updateResourceFieldsBasedOnImage();\n    // When the currentImage is changed, execute the latest updateResourceFieldsBasedOnImage function.\n    // So we don't need to add `updateResourceFieldsBasedOnImage` to the dependencies.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentImage]);\n\n  const updateResourceFieldsBasedOnPreset = (name: string) => {\n    const preset = _.find(\n      checkPresetInfo?.presets,\n      (preset) => preset.name === name,\n    );\n    const slots = _.pick(preset?.resource_slots, _.keys(resourceSlots));\n    const mem = iSizeToSize((slots?.mem || 0) + 'b', 'g', 2)?.numberUnit;\n    const acceleratorObj = _.omit(slots, ['cpu', 'mem', 'shmem']);\n\n    // Select the first matched AI accelerator type and value\n    const firstMatchedAcceleratorType = _.find(\n      _.keys(acceleratorSlots),\n      (value) => acceleratorObj[value] !== undefined,\n    );\n\n    let acceleratorSetting: {\n      acceleratorType?: string;\n      accelerator: number;\n    } = {\n      accelerator: 0,\n    };\n    if (firstMatchedAcceleratorType) {\n      acceleratorSetting = {\n        acceleratorType: firstMatchedAcceleratorType,\n        accelerator: Number(acceleratorObj[firstMatchedAcceleratorType] || 0),\n      };\n    }\n    form.setFieldsValue({\n      resource: {\n        // ...slots,\n        ...acceleratorSetting,\n        // transform to GB based on preset values\n        mem,\n        shmem: iSizeToSize((preset?.shared_memory || 0) + 'b', 'g', 2)\n          ?.numberUnit,\n        cpu: parseInt(slots?.cpu || '0') || 0,\n      },\n    });\n    runShmemAutomationRule(mem || '0g');\n\n    form\n      .validateFields(['resource'], {\n        recursive: true,\n      })\n      .catch(() => {});\n  };\n\n  const runShmemAutomationRule = (M_plus_S: string) => {\n    // if M+S > 4G, S can be 1G regard to current image's minimum mem(M)\n    if (\n      // M+S > 4G\n      compareNumberWithUnits(M_plus_S, '4g') >= 0 &&\n      // M+S > M+1G\n      compareNumberWithUnits(\n        M_plus_S,\n        addNumberWithUnits(currentImageMinM, '1g') || '0b',\n      ) >= 0 &&\n      // if 1G < AUTOMATIC_DEFAULT_SHMEM, no need to apply 1G rule\n      compareNumberWithUnits('1g', AUTOMATIC_DEFAULT_SHMEM) > 0\n    ) {\n      form.setFieldValue(['resource', 'shmem'], '1g');\n    } else {\n      form.setFieldValue(['resource', 'shmem'], AUTOMATIC_DEFAULT_SHMEM);\n    }\n  };\n\n  return (\n    <>\n      <Form.Item\n        name=\"resourceGroup\"\n        label={t('session.ResourceGroup')}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        {/* WARN: ResourceGroupSelectForCurrentProject component can not be controlled (no `value` props).  It uses global state */}\n        <ResourceGroupSelectForCurrentProject showSearch />\n      </Form.Item>\n\n      {enableResourcePresets ? (\n        <Form.Item\n          label={t('resourcePreset.ResourcePresets')}\n          name=\"allocationPreset\"\n          required\n          style={{ marginBottom: token.marginXS }}\n        >\n          <ResourcePresetSelect\n            showCustom\n            showMinimumRequired\n            onChange={(value, options) => {\n              switch (value) {\n                case 'custom':\n                  break;\n                case 'minimum-required':\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnImage(true);\n                  break;\n                default:\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnPreset(value);\n                  break;\n              }\n            }}\n            allocatablePresetNames={allocatablePresetNames}\n          />\n        </Form.Item>\n      ) : null}\n      <Card\n        style={{\n          marginBottom: token.margin,\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlots?.cpu && (\n                  <Form.Item\n                    name={['resource', 'cpu']}\n                    // initialValue={0}\n                    label={t('session.launcher.CPU')}\n                    tooltip={{\n                      placement: 'right',\n                      title: <Trans i18nKey={'session.launcher.DescCPU'} />,\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        type: 'number',\n                        min: resourceLimits.cpu?.min,\n                        // TODO: set message\n                      },\n                      {\n                        warningOnly: true,\n                        validator: async (rule, value: number) => {\n                          if (showRemainingWarning) {\n                            if (\n                              _.isNumber(remaining.cpu) &&\n                              value > remaining.cpu\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.EnqueueComputeSessionWarning',\n                                ),\n                              );\n                            }\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                    ]}\n                  >\n                    <InputNumberWithSlider\n                      inputNumberProps={{\n                        addonAfter: t('session.launcher.Core'),\n                      }}\n                      sliderProps={{\n                        marks: {\n                          // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                          ...(remaining.cpu\n                            ? {\n                                [remaining.cpu]: {\n                                  label: <RemainingMark />,\n                                },\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.min\n                            ? {\n                                [resourceLimits.cpu?.min]:\n                                  resourceLimits.cpu?.min,\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.max\n                            ? {\n                                [resourceLimits.cpu?.max]: {\n                                  style: {\n                                    color: token.colorTextSecondary,\n                                  },\n                                  label: resourceLimits.cpu?.max,\n                                },\n                              }\n                            : {}),\n                        },\n                      }}\n                      min={resourceLimits.cpu?.min}\n                      max={resourceLimits.cpu?.max}\n                      step={1}\n                      onChange={() => {\n                        form.setFieldValue('allocationPreset', 'custom');\n                      }}\n                    />\n                  </Form.Item>\n                )}\n                {resourceSlots?.mem && (\n                  <Form.Item\n                    label={t('session.launcher.Memory')}\n                    tooltip={{\n                      placement: 'right',\n                      props: {\n                        onClick: (e: any) => e.preventDefault(),\n                      },\n                      title: (\n                        <Flex\n                          direction=\"column\"\n                          onClick={(e) => e.preventDefault()}\n                        >\n                          <Trans i18nKey={'session.launcher.DescMemory'} />\n                          {/* <Divider\n                            style={{\n                              margin: 0,\n                              backgroundColor: token.colorBorderSecondary,\n                            }}\n                          />\n                         \n                          <Trans\n                            i18nKey={'session.launcher.DescSharedMemory'}\n                          /> */}\n                        </Flex>\n                      ),\n                    }}\n                    required\n                  >\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.resource.shmem !== next.resource.shmem\n                      }\n                    >\n                      {() => {\n                        return (\n                          <Form.Item\n                            name={['resource', 'mem']}\n                            noStyle\n                            rules={[\n                              {\n                                required: true,\n                              },\n                              {\n                                // TODO: min of mem should be shmem + image's mem limit??\n                                validator: async (rule, value: string) => {\n                                  // const memMinPlusShmem =\n                                  //   addNumberWithUnits(\n                                  //     resourceLimits.mem?.min,\n                                  //     form.getFieldValue(['resource', 'shmem']),\n                                  //   ) || '0b';\n\n                                  if (\n                                    !_.isElement(value) &&\n                                    resourceLimits.mem?.min &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.min || '0g',\n                                    ) < 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('session.launcher.MinMemory', {\n                                        size: _.toUpper(\n                                          resourceLimits.mem?.min || '0g',\n                                        ),\n                                      }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                warningOnly: true,\n                                validator: async (rule, value: string) => {\n                                  if (showRemainingWarning) {\n                                    if (\n                                      !_.isElement(value) &&\n                                      resourceLimits.mem &&\n                                      compareNumberWithUnits(\n                                        value,\n                                        remaining.mem + 'b',\n                                      ) > 0\n                                    ) {\n                                      return Promise.reject(\n                                        t(\n                                          'session.launcher.EnqueueComputeSessionWarning',\n                                        ),\n                                      );\n                                    }\n                                  }\n                                  return Promise.resolve();\n                                },\n                              },\n                            ]}\n                          >\n                            <DynamicUnitInputNumberWithSlider\n                              max={resourceLimits.mem?.max}\n                              // min=\"256m\"\n                              // min={'0g'}\n                              // min={addNumberWithUnits(\n                              //   resourceLimits.mem?.min,\n                              //   form.getFieldValue(['resource', 'shmem']) || '0g',\n                              // )}\n                              min={resourceLimits.mem?.min}\n                              // warn={\n                              //   checkPresetInfo?.scaling_group_remaining.mem ===\n                              //   undefined\n                              //     ? undefined\n                              //     : checkPresetInfo?.scaling_group_remaining.mem + 'g'\n                              // }\n                              addonBefore={'MEM'}\n                              extraMarks={{\n                                // ...(checkPresetInfo?.scaling_group_remaining.mem\n                                //   ? {\n                                //       // @ts-ignore\n                                //       [iSizeToSize(\n                                //         checkPresetInfo?.scaling_group_remaining\n                                //           .mem,\n                                //         'g',\n                                //         3,\n                                //       ).numberFixed]: {\n                                //         label: '-',\n                                //       },\n                                //     }\n                                //   : {}),\n                                // ...(form.getFieldValue(['resource', 'shmem'])\n                                //   ? {\n                                //       [iSizeToSize(\n                                //         form.getFieldValue([\n                                //           'resource',\n                                //           'shmem',\n                                //         ]),\n                                //         'g',\n                                //       )?.number || 0]: (\n                                //         <Flex\n                                //           style={{\n                                //             height: 8,\n                                //             width: 8,\n                                //             borderRadius: 4,\n                                //             backgroundColor: token.colorInfo,\n                                //             position: 'absolute',\n                                //             top: -10,\n                                //             transform: 'translateX(-50%)',\n                                //             opacity: 0.5,\n                                //             pointerEvents: 'none',\n                                //           }}\n                                //         ></Flex>\n                                //       ),\n                                //     }\n                                //   : undefined),\n                                ...(remaining.mem\n                                  ? {\n                                      //@ts-ignore\n                                      [iSizeToSize(remaining.mem + 'b', 'g', 3)\n                                        ?.numberFixed]: {\n                                        label: <RemainingMark />,\n                                      },\n                                    }\n                                  : {}),\n                              }}\n                              onChange={(M_plus_S) => {\n                                if (\n                                  !M_plus_S ||\n                                  !form.getFieldValue('enabledAutomaticShmem')\n                                )\n                                  return;\n                                runShmemAutomationRule(M_plus_S);\n\n                                form.setFieldValue(\n                                  'allocationPreset',\n                                  'custom',\n                                );\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n\n                    <Flex direction=\"column\" gap={'xxs'} align=\"start\">\n                      <Flex direction=\"row\" gap={'xs'}>\n                        {t('session.launcher.EnableAutomaticMiniumShmem')}{' '}\n                        <Form.Item\n                          noStyle\n                          name={'enabledAutomaticShmem'}\n                          valuePropName=\"checked\"\n                        >\n                          <Switch\n                            size=\"small\"\n                            onChange={(checked) => {\n                              if (checked) {\n                                runShmemAutomationRule(\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                    '0g',\n                                );\n                              }\n                              form.setFieldValue('allocationPreset', 'custom');\n                            }}\n                          />\n                        </Form.Item>\n                      </Flex>\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prev, next) =>\n                          prev.resource.mem !== next.resource.mem ||\n                          prev.enabledAutomaticShmem !==\n                            next.enabledAutomaticShmem\n                        }\n                      >\n                        {() => {\n                          return (\n                            <Form.Item\n                              noStyle\n                              name={['resource', 'shmem']}\n                              // initialValue={'0g'}\n                              // label={t('session.launcher.SharedMemory')}\n                              hidden={form.getFieldValue(\n                                'enabledAutomaticShmem',\n                              )}\n                              tooltip={\n                                <Trans\n                                  i18nKey={'session.launcher.DescSharedMemory'}\n                                />\n                              }\n                              dependencies={[['resource', 'mem']]}\n                              rules={[\n                                {\n                                  required: true,\n                                },\n                                {},\n                                {\n                                  validator: async (rule, value: string) => {\n                                    if (\n                                      _.isEmpty(\n                                        getFieldValue('resource')?.mem,\n                                      ) ||\n                                      _.isEmpty(value) ||\n                                      compareNumberWithUnits(\n                                        getFieldValue('resource')?.mem,\n                                        value,\n                                      ) >= 0\n                                    ) {\n                                      return Promise.resolve();\n                                    } else {\n                                      throw t(\n                                        'resourcePreset.SHMEMShouldBeSmallerThanMemory',\n                                      );\n                                    }\n                                  },\n                                },\n                              ]}\n                            >\n                              <DynamicUnitInputNumberWithSlider\n                                // shmem max is mem max\n                                // min={resourceLimits.shmem?.min}\n                                min={resourceLimits.shmem?.min}\n                                // max={resourceLimits.mem?.max || '0g'}\n                                addonBefore={'SHM'}\n                                max={\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                  '0g'\n                                }\n                                hideSlider\n                                onChange={() => {\n                                  form.setFieldValue(\n                                    'allocationPreset',\n                                    'custom',\n                                  );\n                                }}\n                              />\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                )}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) => {\n                    return (\n                      prev.resource?.acceleratorType !==\n                        next.resource?.acceleratorType ||\n                      // ref: https://github.com/lablup/backend.ai-webui/issues/868\n                      // change gpu step to 1 when cluster_size > 1\n                      prev.cluster_size !== next.cluster_size\n                    );\n                  }}\n                >\n                  {({ getFieldValue }) => {\n                    const currentAcceleratorType = getFieldValue([\n                      'resource',\n                      'acceleratorType',\n                    ]);\n                    return (\n                      <Form.Item\n                        name={['resource', 'accelerator']}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        tooltip={{\n                          placement: 'right',\n                          title: (\n                            <Trans\n                              i18nKey={'session.launcher.DescAIAccelerator'}\n                            />\n                          ),\n                        }}\n                        rules={[\n                          {\n                            required: currentImageAcceleratorLimits.length > 0,\n                          },\n                          {\n                            type: 'number',\n                            min:\n                              resourceLimits.accelerators[\n                                currentAcceleratorType\n                              ]?.min || 0,\n                            max: resourceLimits.accelerators[\n                              currentAcceleratorType\n                            ]?.max,\n                          },\n                          {\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.endsWith(currentAcceleratorType, 'shares') &&\n                                form.getFieldValue('cluster_size') >= 2 &&\n                                value % 1 !== 0\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.OnlyAllowsDiscreteNumberByClusterSize',\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                          {\n                            warningOnly: true,\n                            validator: async (rule: any, value: number) => {\n                              if (showRemainingWarning) {\n                                if (\n                                  _.isNumber(\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ],\n                                  ) &&\n                                  value >\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]\n                                ) {\n                                  return Promise.reject(\n                                    t(\n                                      'session.launcher.EnqueueComputeSessionWarning',\n                                    ),\n                                  );\n                                }\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          sliderProps={{\n                            marks: {\n                              0: 0,\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.accelerators[currentAcceleratorType]\n                                ? {\n                                    [remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(\n                                resourceLimits.accelerators[\n                                  currentAcceleratorType\n                                ]?.max,\n                              )\n                                ? {\n                                    // @ts-ignore\n                                    [resourceLimits.accelerators[\n                                      currentAcceleratorType\n                                    ]?.max]:\n                                      resourceLimits.accelerators[\n                                        currentAcceleratorType\n                                      ]?.max,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${ACCELERATOR_UNIT_MAP[currentAcceleratorType]}`;\n                              },\n                              open:\n                                currentImageAcceleratorLimits.length <= 0\n                                  ? false\n                                  : undefined,\n                            },\n                          }}\n                          disabled={\n                            currentImageAcceleratorLimits.length === 0 &&\n                            _.isEmpty(\n                              form.getFieldValue(['environments', 'manual']),\n                            )\n                          }\n                          min={0}\n                          max={\n                            resourceLimits.accelerators[currentAcceleratorType]\n                              ?.max\n                          }\n                          step={\n                            _.endsWith(currentAcceleratorType, 'shares') &&\n                            form.getFieldValue('cluster_size') < 2\n                              ? 0.1\n                              : 1\n                          }\n                          onChange={() => {\n                            form.setFieldValue('allocationPreset', 'custom');\n                          }}\n                          inputNumberProps={{\n                            addonAfter: (\n                              <Form.Item\n                                noStyle\n                                name={['resource', 'acceleratorType']}\n                                initialValue={_.keys(acceleratorSlots)[0]}\n                              >\n                                <Select\n                                  tabIndex={-1}\n                                  disabled={\n                                    currentImageAcceleratorLimits.length ===\n                                      0 &&\n                                    _.isEmpty(\n                                      form.getFieldValue([\n                                        'environments',\n                                        'manual',\n                                      ]),\n                                    )\n                                  }\n                                  suffixIcon={\n                                    _.size(acceleratorSlots) > 1\n                                      ? undefined\n                                      : null\n                                  }\n                                  // open={\n                                  //   _.size(acceleratorSlots) > 1\n                                  //     ? undefined\n                                  //     : false\n                                  // }\n                                  popupMatchSelectWidth={false}\n                                  options={_.map(\n                                    acceleratorSlots,\n                                    (value, name) => {\n                                      return {\n                                        value: name,\n                                        label:\n                                          ACCELERATOR_UNIT_MAP[name] || 'UNIT',\n                                        disabled:\n                                          currentImageAcceleratorLimits.length >\n                                            0 &&\n                                          !_.find(\n                                            currentImageAcceleratorLimits,\n                                            (limit) => limit?.key === name,\n                                          ),\n                                      };\n                                    },\n                                  )}\n                                />\n                              </Form.Item>\n                            ),\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n      {enableNumOfSessions ? (\n        <Card\n          style={{\n            marginBottom: token.margin,\n          }}\n        >\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.cluster_size !== next.cluster_size\n            }\n          >\n            {() => {\n              return (\n                <Form.Item\n                  name={['num_of_sessions']}\n                  label={t('webui.menu.Sessions')}\n                  tooltip={<Trans i18nKey={'session.launcher.DescSession'} />}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                    },\n                    {\n                      warningOnly: true,\n                      validator: async (rule, value: number) => {\n                        if (showRemainingWarning) {\n                          if (\n                            sessionSliderLimitAndRemaining &&\n                            value > sessionSliderLimitAndRemaining.remaining\n                          ) {\n                            return Promise.reject(\n                              t(\n                                'session.launcher.EnqueueComputeSessionWarning',\n                              ),\n                            );\n                          }\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumberWithSlider\n                    inputNumberProps={{\n                      addonAfter: '#',\n                    }}\n                    disabled={form.getFieldValue('cluster_size') > 1}\n                    sliderProps={{\n                      marks: {\n                        [sessionSliderLimitAndRemaining?.min]:\n                          sessionSliderLimitAndRemaining?.min,\n                        // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                        ...(sessionSliderLimitAndRemaining?.remaining\n                          ? {\n                              [sessionSliderLimitAndRemaining?.remaining]: {\n                                label: <RemainingMark />,\n                              },\n                            }\n                          : {}),\n                        [sessionSliderLimitAndRemaining?.max]:\n                          sessionSliderLimitAndRemaining?.max,\n                      },\n                    }}\n                    min={sessionSliderLimitAndRemaining?.min}\n                    max={sessionSliderLimitAndRemaining?.max}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Form.Item>\n        </Card>\n      ) : null}\n      {/* TODO: Support cluster mode */}\n      {baiClient.supports('multi-container') && (\n        // {false && (\n        <Form.Item\n          label={t('session.launcher.ClusterMode')}\n          tooltip={\n            <Flex direction=\"column\" align=\"start\">\n              {t('session.launcher.SingleNode')}\n              <Trans i18nKey={'session.launcher.DescSingleNode'} />\n              <Divider style={{ backgroundColor: token.colorBorder }} />\n              {t('session.launcher.MultiNode')}\n              <Trans i18nKey={'session.launcher.DescMultiNode'} />\n            </Flex>\n          }\n          required\n        >\n          <Card\n            style={{\n              marginBottom: token.margin,\n            }}\n          >\n            <Row gutter={token.marginMD}>\n              <Col xs={24}>\n                {/* <Col xs={24} lg={12}> */}\n                <Form.Item name={'cluster_mode'} required>\n                  <Radio.Group\n                    onChange={(e) => {\n                      form.validateFields().catch(() => {});\n                    }}\n                  >\n                    <Radio.Button value=\"single-node\">\n                      {t('session.launcher.SingleNode')}\n                    </Radio.Button>\n                    <Radio.Button value=\"multi-node\">\n                      {t('session.launcher.MultiNode')}\n                    </Radio.Button>\n                  </Radio.Group>\n                </Form.Item>\n              </Col>\n              <Col xs={24}>\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) =>\n                    prev.cluster_mode !== next.cluster_mode\n                  }\n                >\n                  {() => {\n                    const derivedClusterSizeMaxLimit = _.min([\n                      resourceLimits.cpu?.max,\n                      keypairResourcePolicy.max_containers_per_session,\n                    ]);\n                    const clusterUnit =\n                      form.getFieldValue('cluster_mode') === 'single-node'\n                        ? t('session.launcher.Container')\n                        : t('session.launcher.Node');\n                    return (\n                      <Form.Item\n                        name={'cluster_size'}\n                        label={t('session.launcher.ClusterSize')}\n                        required\n                        rules={[\n                          {\n                            warningOnly: true,\n                            validator: async (rule, value: number) => {\n                              if (showRemainingWarning) {\n                                const minCPU = _.min([\n                                  remaining.cpu,\n                                  keypairResourcePolicy.max_containers_per_session,\n                                ]);\n                                if (_.isNumber(minCPU) && value > minCPU) {\n                                  return Promise.reject(\n                                    t(\n                                      'session.launcher.EnqueueComputeSessionWarning',\n                                    ),\n                                  );\n                                }\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          min={1}\n                          step={1}\n                          // TODO: max cluster size\n                          max={\n                            _.isNumber(derivedClusterSizeMaxLimit)\n                              ? derivedClusterSizeMaxLimit\n                              : undefined\n                          }\n                          disabled={derivedClusterSizeMaxLimit === 1}\n                          sliderProps={{\n                            marks: {\n                              1: '1',\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.cpu\n                                ? {\n                                    [remaining.cpu]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(derivedClusterSizeMaxLimit)\n                                ? {\n                                    [derivedClusterSizeMaxLimit]:\n                                      derivedClusterSizeMaxLimit,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${clusterUnit}`;\n                              },\n                            },\n                          }}\n                          inputNumberProps={{\n                            addonAfter: clusterUnit,\n                          }}\n                          onChange={(value) => {\n                            if (value > 1) {\n                              form.setFieldValue('num_of_sessions', 1);\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </Col>\n            </Row>\n          </Card>\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nconst RemainingMark: React.FC<{ title?: string }> = () => {\n  const { token } = theme.useToken();\n  return (\n    <Flex\n      style={{\n        position: 'absolute',\n        top: -24,\n        transform: 'translateX(-50%)',\n        color: token.colorSuccess,\n        opacity: 0.5,\n      }}\n    >\n      <CaretDownOutlined />\n    </Flex>\n  );\n};\n\nconst MemoizedResourceAllocationFormItems = React.memo(\n  ResourceAllocationFormItems,\n);\n\nexport default MemoizedResourceAllocationFormItems;\n","/**\n * @generated SignedSource<<7893010249a8558bb6de4f479d99f12f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = Record<PropertyKey, never>;\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null | undefined;\n    readonly resource_slots: any | null | undefined;\n    readonly shared_memory: any | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","/**\n * @generated SignedSource<<8778f761ce6a09e82f9dd28167c11901>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairQuery$variables = {\n  accessKey: string;\n};\nexport type hooksUsingRelay_KeyPairQuery$data = {\n  readonly keypair: {\n    readonly concurrency_used: number | null | undefined;\n    readonly id: string | null | undefined;\n    readonly resource_policy: string | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairQuery = {\n  response: hooksUsingRelay_KeyPairQuery$data;\n  variables: hooksUsingRelay_KeyPairQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"accessKey\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"access_key\",\n        \"variableName\": \"accessKey\"\n      }\n    ],\n    \"concreteType\": \"KeyPair\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_policy\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"concurrency_used\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1f8fc324e9907111de581f5cd2dc3640\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairQuery(\\n  $accessKey: String!\\n) {\\n  keypair(access_key: $accessKey) {\\n    id\\n    resource_policy\\n    concurrency_used\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8f5c91f0fc46a3366f57566ab688d81\";\n\nexport default node;\n","/**\n * @generated SignedSource<<3381af962875475b393ccdb463fe5531>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$variables = {\n  name: string;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$data = {\n  readonly keypair_resource_policy: {\n    readonly max_concurrent_sessions: number | null | undefined;\n    readonly max_containers_per_session: number | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery = {\n  response: hooksUsingRelay_KeyPairResourcePolicyQuery$data;\n  variables: hooksUsingRelay_KeyPairResourcePolicyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_containers_per_session\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_concurrent_sessions\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ad7039c1935637fe3f3841f0ea8bf347\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairResourcePolicyQuery(\\n  $name: String!\\n) {\\n  keypair_resource_policy(name: $name) {\\n    max_containers_per_session\\n    max_concurrent_sessions\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f3f7364c63aefe9b03111b584c48c103\";\n\nexport default node;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { hooksUsingRelay_KeyPairQuery } from './__generated__/hooksUsingRelay_KeyPairQuery.graphql';\nimport { hooksUsingRelay_KeyPairResourcePolicyQuery } from './__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useCallback } from 'react';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ninterface FetchOptions {\n  fetchKey?: string | number;\n  fetchPolicy?: FetchPolicy;\n}\nexport const useKeyPairLazyLoadQuery = (\n  accessKey: string,\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { keypair } = useLazyLoadQuery<hooksUsingRelay_KeyPairQuery>(\n    graphql`\n      query hooksUsingRelay_KeyPairQuery($accessKey: String!) {\n        keypair(access_key: $accessKey) {\n          id\n          resource_policy\n          concurrency_used\n        }\n      }\n    `,\n    {\n      accessKey: accessKey,\n    },\n    {\n      ...options,\n      fetchKey: fetchKey + options.fetchKey,\n    },\n  );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [keypair, { refresh }] as const;\n};\n\nexport const useCurrentKeyPairResourcePolicyLazyLoadQuery = (\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const { keypair_resource_policy } =\n    useLazyLoadQuery<hooksUsingRelay_KeyPairResourcePolicyQuery>(\n      graphql`\n        query hooksUsingRelay_KeyPairResourcePolicyQuery($name: String!) {\n          keypair_resource_policy(name: $name) {\n            max_containers_per_session\n            max_concurrent_sessions\n          }\n        }\n      `,\n      {\n        name: keypair?.resource_policy || '',\n      },\n      {\n        ...options,\n        fetchKey: fetchKey + options.fetchKey,\n      },\n    );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [\n    {\n      keypairResourcePolicy: (keypair_resource_policy || {}) as NonNullable<\n        typeof keypair_resource_policy\n      >,\n      keypair: (keypair || {}) as NonNullable<typeof keypair>,\n      sessionLimitAndRemaining: {\n        max: _.min([\n          (keypair_resource_policy || {}).max_concurrent_sessions,\n          3, //BackendAiResourceBroker.DEFAULT_CONCURRENT_SESSION_COUNT\n        ]) as number,\n        remaining:\n          ((keypair_resource_policy || {}).max_concurrent_sessions || 3) -\n          ((keypair || {}).concurrency_used || 0),\n      },\n    },\n    { refresh },\n  ] as const;\n};\n","import { useSuspendedBackendaiClient } from '.';\nimport { Image } from '../components/ImageEnvironmentSelectFormItems';\nimport { AUTOMATIC_DEFAULT_SHMEM } from '../components/ResourceAllocationFormItems';\nimport { addNumberWithUnits, iSizeToSize } from '../helper';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { useTanQuery } from './reactQueryAlias';\nimport _ from 'lodash';\n\ninterface MergedResourceLimits {\n  accelerators: {\n    [key: string]:\n      | {\n          min?: number;\n          max?: number;\n        }\n      | undefined;\n  };\n  cpu?: {\n    min?: number;\n    max?: number;\n  };\n  mem?: {\n    min?: string;\n    max?: string;\n  };\n  shmem?: {\n    min?: string;\n    max?: string;\n  };\n}\n\ntype ResourceLimits = {\n  cpu: string | 'Infinity' | 'NaN';\n  mem: string | 'Infinity' | 'NaN';\n  'cuda.device': string | 'Infinity' | 'NaN';\n};\ntype ResourceUsing = ResourceLimits;\ntype ResourceRemaining = ResourceLimits;\ntype ScalingGroup = {\n  using: ResourceUsing;\n  remaining: ResourceRemaining;\n};\n\ntype ResourceSlots = {\n  cpu: string;\n  mem: string;\n  'cuda.device': string;\n  [key: string]: string;\n};\n\ntype RemainingSlots = {\n  cpu: number;\n  mem: number;\n  accelerators: {\n    [key: string]: number;\n  };\n};\n\nexport type ResourcePreset = {\n  name: string;\n  resource_slots: ResourceSlots;\n  shared_memory: string | null;\n  allocatable: boolean;\n};\n\ntype ResourceAllocation = {\n  keypair_limits: ResourceLimits;\n  keypair_using: ResourceUsing;\n  keypair_remaining: ResourceRemaining;\n  scaling_group_remaining: ResourceRemaining;\n  scaling_groups: {\n    [key: string]: ScalingGroup;\n  };\n  presets: ResourcePreset[];\n  group_limits: ResourceLimits;\n  group_using: ResourceUsing;\n  group_remaining: ResourceRemaining;\n};\n\ninterface Props {\n  currentProjectName: string;\n  currentImage?: Image;\n  currentResourceGroup?: string;\n}\n\n// determine resource limits and remaining for current resource group and current image in current project\nexport const useResourceLimitAndRemaining = ({\n  currentImage,\n  currentResourceGroup = '',\n  currentProjectName,\n}: Props) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n\n  const {\n    data: checkPresetInfo,\n    refetch,\n    isRefetching,\n  } = useTanQuery<ResourceAllocation | undefined>({\n    queryKey: ['check-presets', currentProjectName, currentResourceGroup],\n    queryFn: () => {\n      if (currentResourceGroup) {\n        return baiClient.resourcePreset\n          .check({\n            group: currentProjectName,\n            scaling_group: currentResourceGroup,\n          })\n          .catch(() => {});\n      } else {\n        return;\n      }\n    },\n    staleTime: 1000,\n    suspense: true,\n    // suspense: !_.isEmpty(currentResourceGroup), //prevent flicking\n  });\n\n  const currentImageMinM =\n    _.find(currentImage?.resource_limits, (i) => i?.key === 'mem')?.min || '0g';\n\n  const resourceGroupResourceSize: {\n    cpu?: number;\n    mem?: string;\n    accelerators: {\n      [key: string]: number | undefined;\n    };\n  } = {\n    // scaling group all cpu (using + remaining), string type\n    cpu:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.cpu,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.cpu,\n      )\n        ? _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.cpu,\n          ) +\n          _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n              .cpu,\n          )\n        : undefined,\n    mem:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.mem,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.mem,\n      )\n        ? iSizeToSize(\n            _.toNumber(\n              checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.mem,\n            ) +\n              _.toNumber(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n                  .mem,\n              ) +\n              'b',\n            'g',\n            2,\n          )?.numberFixed + 'g'\n        : undefined,\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.[key],\n          ) &&\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.[\n              key\n            ],\n          )\n            ? _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.using[\n                  key\n                ],\n              ) +\n              _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]\n                  ?.remaining[key],\n              )\n            : undefined;\n        return result;\n      },\n      {} as {\n        [key: string]: number | undefined;\n      },\n    ),\n  };\n  const resourceLimits: MergedResourceLimits = {\n    cpu:\n      resourceSlots?.cpu === undefined\n        ? undefined\n        : {\n            min: _.max([\n              _.toNumber(\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'cpu')\n                  ?.min || '0',\n              ),\n            ]),\n            max: _.min([\n              baiClient._config.maxCPUCoresPerContainer,\n              limitParser(checkPresetInfo?.keypair_limits.cpu),\n              limitParser(checkPresetInfo?.group_limits.cpu),\n              resourceGroupResourceSize?.cpu,\n            ]),\n          },\n    mem:\n      resourceSlots?.mem === undefined\n        ? undefined\n        : {\n            // M to max of [ image's mem min, AUTOMATIC_DEFAULT_SHMEM]\n            // mem(M+S) should be larger than _.max([ image's mem min, AUTOMATIC_DEFAULT_SHMEM ]) + AUTOMATIC_DEFAULT_SHMEM (rule: S can not be larger than M)\n            min:\n              //handled by 'b' unit\n              addNumberWithUnits(\n                _.max([\n                  iSizeToSize(currentImageMinM, 'b')?.number,\n                  iSizeToSize(AUTOMATIC_DEFAULT_SHMEM, 'b')?.number,\n                  0,\n                ]) + 'b',\n                AUTOMATIC_DEFAULT_SHMEM,\n              ),\n            max:\n              //handled by 'g(GiB)' unit\n              _.min([\n                baiClient._config.maxMemoryPerContainer,\n                limitParser(checkPresetInfo?.keypair_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.keypair_limits.mem) + '',\n                    'g',\n                  )?.number,\n                limitParser(checkPresetInfo?.group_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.group_limits.mem) + '',\n                    'g',\n                  )?.number,\n                // scaling group all mem (using + remaining), string type\n                resourceGroupResourceSize?.mem &&\n                  iSizeToSize(resourceGroupResourceSize?.mem + '', 'g')?.number,\n              ]) + 'g',\n          },\n    // shmem:\n    //   resourceSlots?.mem === undefined\n    //     ? undefined\n    //     : {\n    //         min: _.max([\n    //           _.find(currentImage?.resource_limits, (i) => i?.key === 'shmem')\n    //             ?.min,\n    //           '64m',\n    //         ]),\n    //       },\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        const configName =\n          {\n            'cuda.device': 'maxCUDADevicesPerContainer',\n            'cuda.shares': 'maxCUDASharesPerContainer',\n            'rocm.device': 'maxROCMDevicesPerContainer',\n            'tpu.device': 'maxTPUDevicesPerContainer',\n            'ipu.device': 'maxIPUDevicesPerContainer',\n            'atom.device': 'maxATOMDevicesPerContainer',\n            'warboy.device': 'maxWarboyDevicesPerContainer',\n            'hyperaccel-lpu.device': 'maxHyperaccelLPUDevicesPerContainer', // FIXME: add maxLPUDevicesPerContainer to config\n          }[key] || 'cuda.device'; // FIXME: temporally `cuda.device` config, when undefined\n        result[key] = {\n          min: parseInt(\n            _.filter(\n              currentImage?.resource_limits,\n              (supportedAcceleratorInfo) => {\n                return supportedAcceleratorInfo?.key === key;\n              },\n            )?.[0]?.min || '0',\n          ),\n          max: _.min([\n            baiClient._config[configName] || 8,\n            // scaling group all cpu (using + remaining), string type\n            resourceGroupResourceSize.accelerators[key],\n          ]),\n        };\n        return result;\n      },\n      {} as MergedResourceLimits['accelerators'],\n    ),\n  };\n  const remaining: RemainingSlots = {\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          _.min([\n            // @ts-ignore\n            _.toNumber(checkPresetInfo?.keypair_remaining[key]),\n            // @ts-ignore\n            _.toNumber(checkPresetInfo?.group_remaining[key]),\n            // @ts-ignore\n            _.toNumber(checkPresetInfo?.scaling_group_remaining[key]),\n          ]) ?? Number.MAX_SAFE_INTEGER;\n        return result;\n      },\n      {} as RemainingSlots['accelerators'],\n    ),\n    cpu:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.cpu),\n        limitParser(checkPresetInfo?.group_remaining.cpu),\n        limitParser(checkPresetInfo?.scaling_group_remaining.cpu),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n    mem:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.mem),\n        limitParser(checkPresetInfo?.group_remaining.mem),\n        limitParser(checkPresetInfo?.scaling_group_remaining.mem),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n  };\n\n  return [\n    {\n      resourceGroupResourceSize,\n      resourceLimits,\n      remaining,\n      currentImageMinM,\n      isRefetching,\n      checkPresetInfo,\n    },\n    {\n      refetch,\n    },\n  ] as const;\n};\n\nconst limitParser = (limit: string | undefined) => {\n  if (limit === undefined) {\n    return undefined;\n  } else if (limit === 'Infinity') {\n    return undefined;\n  } else if (limit === 'NaN') {\n    return undefined;\n  } else {\n    return _.toNumber(limit);\n  }\n};\n"],"names":["_ref","objectValues","values","length","React","map","value","label","color","_jsx","Flex","direction","children","_","objValue","idx","Tag","style","undefined","margin","marginRight","dynamicSteps","units","disableAutoUnit","min","max","roundStep","inputNumberProps","setValue","useControllableValue","defaultValue","numValue","_unitFromValue","parseUnit","previousUnit","usePrevious","unit","minNumValue","minUnit","maxNumValue","maxUnit","ref","useRef","useEffect","current","onInput","e","_e$target","target","test","addEventListener","removeEventListener","InputNumber","onBlur","_roundStep$toString$s","_ref$current","_ref$current2","decimalCount","toString","split","isNaN","Math","round","concat","toFixed","onChange","newValue","iSizeToSize","number","addonAfter","Select","tabIndex","newUnit","onDropdownVisibleChange","open","options","Typography","Text","fontFamily","toUpperCase","suffixIcon","cursor","step","onStep","afterStepValue","info","numValueNotNull","index","nextIndex","type","currentUnitIndex","indexOf","nextValue","nextUnit","nextNumValue","ImageMetaIcon","bordered","image","alt","arguments","getImageIcon","useBackendAIImageMetaData","src","width","height","disabled","sliderProps","otherProps","inputRef","key","updateKey","useUpdatableState","setTimeout","_jsxs","gap","flex","minWidth","align","_step$toString$split$","_inputRef$current","Slider","marks","option","warn","extraMarks","hideSlider","token","theme","useToken","minGiB","useMemo","maxGiB","valueGiB","_createElement","DynamicUnitInputNumber","visibility","styles","track","backgroundColor","compareNumberWithUnits","colorWarning","rail","tooltip","formatter","newNumValue","colorTextSecondary","allocatablePresetNames","showCustom","showMinimumRequired","selectProps","fetchKey","updateFetchKey","run","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","resourceSlots","useResourceSlots","t","useTranslation","isPendingUpdate","_startTransition","useTransition","controllableValue","setControllableValue","resource_presets","useLazyLoadQuery","_ResourcePresetSelectQuery","require","fetchPolicy","loading","display","EditOutlined","selectedLabel","Tooltip","title","InfoCircleOutlined","preset","slotsInfo","JSON","parse","resource_slots","includes","name","justify","slot","ResourceNumber","hideTooltip","sort","a","b","localeCompare","showSearch","optionLabelProp","AUTOMATIC_DEFAULT_SHMEM","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","resource","cpu","mem","shmem","accelerator","num_of_sessions","cluster_mode","cluster_size","enabledAutomaticShmem","ResourceAllocationFormItems","_resourceLimits$cpu3","_resourceLimits$mem3","enableNumOfSessions","enableResourcePresets","forceImageMinValues","showRemainingWarning","form","Form","useFormInstance","baiClient","useSuspendedBackendaiClient","keypairResourcePolicy","sessionLimitAndRemaining","useCurrentKeyPairResourcePolicyLazyLoadQuery","currentProject","useCurrentProjectValue","currentResourceGroup","useCurrentResourceGroupValue","currentImage","useWatch","preserve","currentImageMinM","remaining","resourceLimits","checkPresetInfo","useResourceLimitAndRemaining","currentProjectName","acceleratorSlots","_resourceLimits$accel","_resourceLimits$accel2","accelerators","currentImageAcceleratorLimits","resource_limits","limit","sessionSliderLimitAndRemaining","bySliderLimit","presets","_resourceLimits$mem","_resourceLimits$mem2","_resourceLimits$cpu","_resourceLimits$cpu2","acceleratorKeys","_resourceLimits$accel3","_resourceLimits$accel4","byImageAcceleratorLimits","acceleratorResourceOfPreset","updateAllocationPresetBasedOnResourceGroup","useEventNotStable","getFieldValue","autoSelectedPreset","setFieldsValue","allocationPreset","updateResourceFieldsBasedOnPreset","validateFields","recursive","catch","updateResourceFieldsBasedOnImage","force","_resourceLimits$cpu4","_iSizeToSize","_iSizeToSize2","_resourceLimits$shmem","_iSizeToSize3","_resourceLimits$mem4","minimumResources","_resourceLimits$accel5","acceleratorType","_$filter$","nextImageSelectorType","acceleratorInfo","_resourceLimits$accel6","forEach","minNum","minNumStr","setFieldValue","runShmemAutomationRule","_iSizeToSize4","_iSizeToSize5","slots","numberUnit","acceleratorObj","firstMatchedAcceleratorType","acceleratorSetting","Number","shared_memory","parseInt","M_plus_S","addNumberWithUnits","_Fragment","Item","rules","required","ResourceGroupSelectForCurrentProject","marginBottom","marginXS","ResourcePresetSelect","Card","shouldUpdate","prev","cur","noStyle","_ref2","_resourceLimits$cpu5","_resourceLimits$cpu6","_resourceLimits$cpu7","_resourceLimits$cpu8","_resourceLimits$cpu9","_resourceLimits$cpu10","_resourceLimits$cpu11","_resourceLimits$cpu12","_resourceLimits$cpu13","placement","Trans","i18nKey","warningOnly","validator","async","rule","Promise","reject","resolve","InputNumberWithSlider","RemainingMark","props","onClick","preventDefault","next","_resourceLimits$mem8","_resourceLimits$mem9","_iSizeToSize6","_resourceLimits$mem5","_resourceLimits$mem6","_resourceLimits$mem7","size","DynamicUnitInputNumberWithSlider","addonBefore","numberFixed","valuePropName","Switch","checked","_resourceLimits$shmem2","hidden","dependencies","_getFieldValue","_getFieldValue2","_prev$resource","_next$resource","_ref3","_resourceLimits$accel7","_resourceLimits$accel8","_resourceLimits$accel9","_resourceLimits$accel10","_resourceLimits$accel11","_resourceLimits$accel12","currentAcceleratorType","ACCELERATOR_UNIT_MAP","initialValue","popupMatchSelectWidth","supports","Divider","colorBorder","Row","gutter","marginMD","Col","xs","Radio","_resourceLimits$cpu14","derivedClusterSizeMaxLimit","max_containers_per_session","clusterUnit","minCPU","position","top","transform","colorSuccess","opacity","CaretDownOutlined","node","v0","hash","v1","useKeyPairLazyLoadQuery","accessKey","keypair","_hooksUsingRelay_KeyPairQuery","refresh","useCallback","_config","keypair_resource_policy","_hooksUsingRelay_KeyPairResourcePolicyQuery","resource_policy","max_concurrent_sessions","concurrency_used","_$find","_checkPresetInfo$scal","_checkPresetInfo$scal2","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal5","_checkPresetInfo$scal6","_checkPresetInfo$scal7","_checkPresetInfo$scal8","_checkPresetInfo$scal9","_checkPresetInfo$scal10","_checkPresetInfo$scal11","_checkPresetInfo$scal12","_$find2","_$min2","_$min3","data","refetch","isRefetching","useTanQuery","queryKey","queryFn","resourcePreset","check","group","scaling_group","staleTime","suspense","i","resourceGroupResourceSize","scaling_groups","using","result","_checkPresetInfo$scal13","_checkPresetInfo$scal14","_checkPresetInfo$scal15","_checkPresetInfo$scal16","_checkPresetInfo$scal17","_checkPresetInfo$scal18","maxCPUCoresPerContainer","limitParser","keypair_limits","group_limits","maxMemoryPerContainer","_$filter","configName","supportedAcceleratorInfo","_$min","keypair_remaining","group_remaining","scaling_group_remaining","MAX_SAFE_INTEGER"],"sourceRoot":""}