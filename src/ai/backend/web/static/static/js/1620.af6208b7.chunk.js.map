{"version":3,"file":"static/js/1620.af6208b7.chunk.js","mappings":"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","sources":["components/BAILink.tsx","components/DoubleTag.tsx","components/DynamicUnitInputNumber.tsx","components/EnvVarFormList.tsx","components/FolderExplorerOpener.tsx","components/ImageEnvironmentSelectFormItems.tsx","components/ImageMetaIcon.tsx","components/ImageTags.tsx","components/InputNumberWithSlider.tsx","hooks/useResourceLimitAndRemaining.tsx","components/AgentSelect.tsx","components/DynamicUnitInputNumberWithSlider.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/ResourceGroupSelect.tsx","components/ResourceNumber.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","components/__generated__/AgentSelectQuery.graphql.ts","components/__generated__/ImageEnvironmentSelectFormItemsQuery.graphql.ts","components/__generated__/ResourcePresetSelectQuery.graphql.ts","components/__generated__/VFolderPermissionTag_VFolder.graphql.ts","components/__generated__/VFolderTableProjectQuery.graphql.ts","helper/const-vars.ts","hooks/__generated__/hooksUsingRelay_KeyPairQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql.ts","hooks/hooksUsingRelay.tsx","hooks/reactPaginationQueryOptions.tsx"],"sourcesContent":["import { Typography } from 'antd';\nimport { createStyles } from 'antd-style';\nimport React from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\n\nconst useStyles = createStyles(({ css, token }) => ({\n  hover: css`\n    text-decoration: none;\n    /* color: ${token.colorLink}; */\n\n    &:hover {\n      /* color: ${token.colorLinkHover}; */\n      text-decoration: underline;\n    }\n  `,\n}));\n\ninterface BAILinkProps extends Omit<LinkProps, 'to'> {\n  type?: 'hover';\n  to?: LinkProps['to'];\n}\nconst BAILink: React.FC<BAILinkProps> = ({ type, to, ...linkProps }) => {\n  const { styles } = useStyles();\n  return to ? (\n    <Link\n      className={type === 'hover' ? styles.hover : undefined}\n      to={to}\n      {...linkProps}\n    />\n  ) : (\n    <Typography.Link\n      className={type === 'hover' ? styles.hover : undefined}\n      onClick={linkProps.onClick}\n      {...linkProps}\n    />\n  );\n};\n\nexport default BAILink;\n","import Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: string;\n  color?: string;\n};\n\nconst DoubleTag: React.FC<{\n  values?: Array<string> | Array<DoubleTagObjectValue>;\n  highlightKeyword?: string;\n}> = ({ values = [], highlightKeyword }) => {\n  if (values.length === 0) return null;\n  let objectValues: Array<DoubleTagObjectValue>;\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) =>\n        !_.isEmpty(objValue.label) ? (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {!_.isUndefined(highlightKeyword) ? (\n              <TextHighlighter keyword={highlightKeyword}>\n                {objValue.label}\n              </TextHighlighter>\n            ) : (\n              objValue.label\n            )}\n          </Tag>\n        ) : null,\n      )}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","import { convertBinarySizeUnit, parseUnit, SizeUnit } from '../helper';\nimport useControllableState from '../hooks/useControllableState';\nimport { usePrevious } from 'ahooks';\nimport { InputNumber, InputNumberProps, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nexport interface DynamicUnitInputNumberProps\n  extends Omit<\n    InputNumberProps,\n    'step' | 'max' | 'min' | 'value' | 'onChange'\n  > {\n  dynamicSteps?: number[];\n  disableAutoUnit?: boolean;\n  max?: string;\n  min?: string;\n  value?: string | null | undefined;\n  units?: string[];\n  roundStep?: number;\n  onChange?: (value: string) => void;\n}\n\nconst DynamicUnitInputNumber: React.FC<DynamicUnitInputNumberProps> = ({\n  dynamicSteps = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],\n  units = ['m', 'g', 't', 'p'],\n  disableAutoUnit = false,\n  min = '0m',\n  max = '300p',\n  roundStep,\n  ...inputNumberProps\n}) => {\n  const [value, setValue] = useControllableState<string | null | undefined>(\n    inputNumberProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const [numValue, _unitFromValue] =\n    value === null || value === undefined ? [null, null] : parseUnit(value);\n  const previousUnit = usePrevious(_unitFromValue);\n  const unit = _unitFromValue || previousUnit || units[0];\n\n  const [minNumValue, minUnit] = parseUnit(min);\n  const [maxNumValue, maxUnit] = parseUnit(max);\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const onInput = (e: Event) => {\n        // @ts-ignore\n        const value = e?.target?.value;\n        if (/^\\d+(g|m)$/.test(value)) {\n          // const [newNumber, newUnit] = parseUnit(value);\n          // if (newNumber === numValue && newUnit === unit) {\n          //   e.target.value = numValue;\n          // } else {\n          setValue(value);\n          // }\n        }\n      };\n      const target = ref.current;\n      target?.addEventListener('input', onInput);\n      return () => {\n        target?.removeEventListener('input', onInput);\n      };\n    }\n  }, [ref, numValue, _unitFromValue, setValue]);\n\n  return (\n    <InputNumber\n      ref={ref}\n      {...inputNumberProps}\n      onBlur={() => {\n        if (_.isNumber(roundStep) && roundStep > 0) {\n          const decimalCount = roundStep.toString().split('.')[1]?.length || 0;\n          if (\n            isNaN(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n                roundStep,\n            )\n          ) {\n            return;\n          }\n          setValue(\n            `${(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n              roundStep\n            ).toFixed(decimalCount)}${unit}`,\n          );\n        }\n      }}\n      value={numValue}\n      onChange={(newValue) => {\n        if (newValue === null || newValue === undefined) {\n          setValue(newValue);\n        } else {\n          setValue(`${newValue}${unit}`);\n        }\n      }}\n      //TODO: When min and max have different units, they should be calculated and put in.\n      // 입력의 초소단위 확인 0.4g 가 되는지 확인\n      max={\n        maxUnit === unit\n          ? maxNumValue\n          : convertBinarySizeUnit(max, unit as SizeUnit)?.number\n      }\n      min={\n        minUnit === unit\n          ? minNumValue\n          : // @ts-ignore\n            convertBinarySizeUnit(min, unit).number\n      }\n      addonAfter={\n        <Select\n          tabIndex={-1}\n          value={unit}\n          onChange={(newUnit) => {\n            setValue(`${numValue}${newUnit}`);\n          }}\n          onDropdownVisibleChange={(open) => {\n            // A null or undefined value doesn't have a unit info, so we need to set the value before setting the unit.\n            if ((open && value === null) || value === undefined) {\n              setValue(`0${unit}`);\n            }\n          }}\n          options={_.map(units, (unit) => ({\n            value: unit,\n            label: (\n              <Typography.Text\n                style={{\n                  fontFamily:\n                    \"'SFMono-Regular',Consolas,'Liberation Mono',Menlo,Courier,monospace\",\n                }}\n              >\n                {unit.toUpperCase() + 'iB'}\n              </Typography.Text>\n            ),\n          }))}\n          suffixIcon={units.length > 1 ? undefined : null}\n          open={units.length > 1 ? undefined : false}\n          style={{\n            cursor: units.length > 1 ? undefined : 'default',\n          }}\n        />\n      }\n      step={0} // this step applies when onStep doesn't setValue\n      onStep={(afterStepValue, info) => {\n        const numValueNotNull =\n          _.isNull(numValue) || _.isUndefined(numValue) ? 0 : numValue;\n        const index = _.sortedIndex(_.sortBy(dynamicSteps), numValueNotNull);\n        let nextIndex: number;\n        if (info.type === 'up') {\n          if (numValueNotNull === dynamicSteps[index]) {\n            nextIndex = index + 1;\n          } else {\n            nextIndex = index;\n          }\n        } else {\n          nextIndex = index - 1;\n        }\n\n        const currentUnitIndex = units.indexOf(unit);\n        if (!disableAutoUnit && nextIndex < 0) {\n          // WHEN MOVING TO MORE Smaller Unit: change unit and number\n          if (currentUnitIndex === 0) {\n            // if already at min unit, set to 0\n            setValue(`0${unit}`);\n          } else {\n            const nextValue = dynamicSteps[dynamicSteps.length - 1];\n            const nextUnit = units[currentUnitIndex - 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else if (!disableAutoUnit && nextIndex > dynamicSteps.length - 1) {\n          // WHEN MOVING TO MORE Bigger Unit: change unit and number\n          //  if already at max unit, step up/down by 1\n          if (currentUnitIndex === units.length - 1) {\n            setValue(\n              `${numValueNotNull + (info.type === 'up' ? 1 : -1)}${maxUnit}`,\n            );\n          } else {\n            const nextValue = dynamicSteps[0];\n            const nextUnit = units[currentUnitIndex + 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else {\n          // WHEN, DON'T NEED TO CHANGE UNIT\n          if (nextIndex >= 0 && nextIndex < dynamicSteps.length) {\n            let nextNumValue = dynamicSteps[nextIndex];\n            if (minUnit === unit && nextNumValue < minNumValue) {\n              nextNumValue = minNumValue;\n            } else if (maxUnit === unit && nextNumValue > maxNumValue) {\n              nextNumValue = maxNumValue;\n            }\n            setValue(`${nextNumValue}${unit}`);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DynamicUnitInputNumber;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          !_.isEmpty(variableName) &&\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                    onChange={() => {\n                      const fieldNames = fields.map((field, index) => [\n                        props.name,\n                        index,\n                        'variable',\n                      ]);\n                      form.validateFields(fieldNames);\n                    }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\n                        'session.launcher.EnvironmentVariableValueRequired',\n                      ),\n                    },\n                  ]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input\n                    placeholder=\"Value\"\n                    // onChange={() => {\n                    //   const valueFields = fields.map((field, index) => [\n                    //     props.name,\n                    //     index,\n                    //     'value',\n                    //   ]);\n                    //   form.validateFields(valueFields);\n                    // }}\n                  />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                {t('session.launcher.AddEnvironmentVariable')}\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nconst sensitivePatterns = [\n  /AUTH/i,\n  /ACCESS/i,\n  /SECRET/i,\n  /_KEY/i,\n  /PASSWORD/i,\n  /PASSWD/i,\n  /PWD/i,\n  /TOKEN/i,\n  /PRIVATE/i,\n  /CREDENTIAL/i,\n  /JWT/i,\n  /KEYPAIR/i,\n  /CERTIFICATE/i,\n  /SSH/i,\n  /ENCRYPT/i,\n  /SIGNATURE/i,\n  /SALT/i,\n  /PIN/i,\n  /PASSPHRASE/i,\n  /OAUTH/i,\n];\n\nexport function isSensitiveEnv(key: string) {\n  return sensitivePatterns.some((pattern) => pattern.test(key));\n}\n\nexport function sanitizeSensitiveEnv(envs: EnvVarFormListValue[]) {\n  return _.map(envs, (env) => {\n    if (env && isSensitiveEnv(env.variable)) {\n      return { ...env, value: '' };\n    }\n    return env;\n  });\n}\n\nexport default EnvVarFormList;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { StringParam, useQueryParam } from 'use-query-params';\n\nconst LegacyFolderExplorer = React.lazy(() => import('./LegacyFolderExplorer'));\n\nconst FolderExplorerOpener = () => {\n  const [folderId, setFolderId] = useQueryParam('folder', StringParam);\n  const normalizedFolderId = folderId?.replaceAll('-', '');\n\n  return (\n    <LegacyFolderExplorer\n      vfolderID={normalizedFolderId || ''}\n      open={!!normalizedFolderId}\n      onRequestClose={() => {\n        setFolderId(null, 'replaceIn');\n      }}\n      destroyOnClose\n    />\n  );\n};\n\nexport default FolderExplorerOpener;\n\nexport const useFolderExplorerOpener = () => {\n  const [, setFolderId] = useQueryParam('folder', StringParam);\n\n  const location = useLocation();\n  // a function to generate new path with folder id based on current path\n  const generateFolderPath = (id: string) => {\n    // get current path\n    const searchParams = new URLSearchParams(location.search);\n    // set folder id\n    searchParams.set('folder', id);\n    return {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    };\n  };\n\n  return {\n    open: (id: string) => {\n      setFolderId(id);\n    },\n    generateFolderPath,\n  };\n};\n","import { getImageFullName, localeCompare } from '../helper';\nimport { preserveDotStartCase } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\n// @ts-ignore\nimport cssRaw from './ImageEnvironmentSelectFormItems.css?raw';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { ImageTags } from './ImageTags';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  ImageEnvironmentSelectFormItemsQuery,\n  ImageEnvironmentSelectFormItemsQuery$data,\n} from './__generated__/ImageEnvironmentSelectFormItemsQuery.graphql';\nimport {\n  Divider,\n  Form,\n  Input,\n  RefSelectProps,\n  Select,\n  Tag,\n  theme,\n  Typography,\n} from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport type Image = NonNullable<\n  NonNullable<ImageEnvironmentSelectFormItemsQuery$data>['images']\n>[0];\n\ntype ImageGroup = {\n  groupName: string;\n  environmentGroups: {\n    environmentName: string;\n    displayName: string;\n    prefix?: string;\n    images: Image[];\n  }[];\n};\n\nexport type ImageEnvironmentFormInput = {\n  environments: {\n    environment: string;\n    version: string;\n    image: Image | undefined;\n    manual?: string;\n    customizedTag?: string;\n  };\n};\n\ninterface ImageEnvironmentSelectFormItemsProps {\n  filter?: (image: Image) => boolean;\n  showPrivate?: boolean;\n}\n\nfunction compareVersions(version1: string, version2: string): number {\n  const v1 = version1.split('.').map(Number);\n  const v2 = version2.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const num1 = v1[i] || 0;\n    const num2 = v2[i] || 0;\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nconst isPrivateImage = (image: Image) => {\n  return _.some(image?.labels, (label) => {\n    return (\n      label?.key === 'ai.backend.features' &&\n      label?.value?.split(' ').includes('private')\n    );\n  });\n};\n\nconst ImageEnvironmentSelectFormItems: React.FC<\n  ImageEnvironmentSelectFormItemsProps\n> = ({ filter, showPrivate }) => {\n  const form = Form.useFormInstance<ImageEnvironmentFormInput>();\n  const environments = Form.useWatch('environments', { form, preserve: true });\n  const baiClient = useSuspendedBackendaiClient();\n  const supportExtendedImageInfo = baiClient?.supports('extended-image-info');\n\n  const [environmentSearch, setEnvironmentSearch] = useState('');\n  const [versionSearch, setVersionSearch] = useState('');\n  const { t } = useTranslation();\n  const [metadata, { getBaseVersion, getImageMeta, tagAlias }] =\n    useBackendAIImageMetaData();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n\n  const envSelectRef = useRef<RefSelectProps>(null);\n  const versionSelectRef = useRef<RefSelectProps>(null);\n  const imageEnvironmentSelectFormItemsVariables = baiClient?._config\n    ?.showNonInstalledImages\n    ? {}\n    : { installed: true };\n  const { images } = useLazyLoadQuery<ImageEnvironmentSelectFormItemsQuery>(\n    graphql`\n      query ImageEnvironmentSelectFormItemsQuery($installed: Boolean) {\n        images(is_installed: $installed) {\n          id\n          name @deprecatedSince(version: \"24.12.0\")\n          humanized_name\n          tag\n          registry\n          architecture\n          digest\n          installed\n          resource_limits {\n            key\n            min\n            max\n          }\n          labels {\n            key\n            value\n          }\n          namespace @since(version: \"24.12.0\")\n          base_image_name @since(version: \"24.12.0\")\n          tags @since(version: \"24.12.0\") {\n            key\n            value\n          }\n          version @since(version: \"24.12.0\")\n        }\n      }\n    `,\n    imageEnvironmentSelectFormItemsVariables,\n    {\n      fetchPolicy: 'store-and-network',\n    },\n  );\n\n  // If not initial value, select first value\n  // auto select when relative field is changed\n  useEffect(() => {\n    if (!_.isEmpty(environments?.manual)) {\n      // set undefined fields related to environments when manual is set\n      if (environments.environment || environments.version) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n          },\n        });\n      }\n      return;\n    }\n\n    let matchedEnvironmentByVersion:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    let matchedImageByVersion: Image | undefined;\n    let version = form.getFieldValue('environments')?.version;\n    // FIXME: manually add architecture based on amd64\n    if (version && version.indexOf('@') < 0) {\n      version += '@x86_64';\n    }\n    version &&\n      _.find(imageGroups, (group) => {\n        matchedEnvironmentByVersion = _.find(\n          group.environmentGroups,\n          (environment) => {\n            matchedImageByVersion = _.find(\n              environment.images,\n              (image) => getImageFullName(image) === version,\n            );\n            return !!matchedImageByVersion; // break iteration\n          },\n        );\n        return !!matchedEnvironmentByVersion; // break iteration\n      });\n\n    // if matchedEnvironmentByVersion is not existed, select first values\n    let nextEnvironment: ImageGroup['environmentGroups'][0] | undefined;\n    let nextImage: Image | undefined;\n    if (matchedEnvironmentByVersion) {\n      nextEnvironment = matchedEnvironmentByVersion;\n      nextImage = matchedImageByVersion;\n    } else if (form.getFieldValue(['environments', 'environment'])) {\n      _.find(imageGroups, (group) => {\n        nextEnvironment = _.find(group.environmentGroups, (environment) => {\n          return (\n            environment.environmentName ===\n            form.getFieldValue(['environments', 'environment'])\n          );\n        });\n        nextImage = nextEnvironment?.images[0];\n        return !!nextEnvironment;\n      });\n    }\n\n    if (!nextEnvironment || !nextImage) {\n      nextEnvironment = imageGroups[0]?.environmentGroups[0];\n      nextImage = nextEnvironment?.images[0];\n    }\n\n    const customizedImageTag = _.find(\n      nextImage?.labels,\n      (item) =>\n        item !== null && item?.key === 'ai.backend.customized-image.name',\n    )?.value;\n\n    if (nextImage) {\n      if (\n        !matchedEnvironmentByVersion &&\n        baiClient._config.allow_manual_image_name_for_session &&\n        version\n      ) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n            manual: version,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      } else {\n        form.setFieldsValue({\n          environments: {\n            environment: nextEnvironment.environmentName,\n            version: getImageFullName(nextImage),\n            image: nextImage,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      }\n    } else if (baiClient._config.allow_manual_image_name_for_session) {\n      // if no image is available, only set manual if it's allowed\n      form.setFieldValue(['environments', 'manual'], version);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environments?.version, environments?.manual]); // environments?.environment,\n\n  const imageGroups: ImageGroup[] = useMemo(\n    () =>\n      _.chain(images)\n        .filter((image) => {\n          return (\n            (showPrivate ? true : !isPrivateImage(image)) &&\n            (filter ? filter(image) : true)\n          );\n        })\n        .groupBy((image) => {\n          // group by using `group` property of image info\n          return (\n            metadata?.imageInfo[getImageMeta(getImageFullName(image) || '').key]\n              ?.group || 'Custom Environments'\n          );\n        })\n        .map((images, groupName) => {\n          return {\n            groupName,\n            environmentGroups: _.chain(images)\n              // sub group by using (environment) `name` property of image info\n              .groupBy((image) => {\n                return (\n                  // metadata?.imageInfo[\n                  //   getImageMeta(getImageFullName(image) || \"\").key\n                  // ]?.name || image?.name\n                  `${image?.registry}/${\n                    supportExtendedImageInfo ? image?.namespace : image?.name\n                  }`\n                );\n              })\n              .map((images, environmentName) => {\n                const imageKey = environmentName.split('/')?.[2];\n                const displayName =\n                  imageKey && metadata?.imageInfo[imageKey]?.name;\n\n                return {\n                  environmentName,\n                  displayName:\n                    displayName ||\n                    (_.last(environmentName.split('/')) as string),\n                  prefix: _.chain(environmentName)\n                    .split('/')\n                    .drop(1)\n                    .dropRight(1)\n                    .join('/')\n                    .value(),\n                  images: images.sort(\n                    (a, b) =>\n                      compareVersions(\n                        // latest version comes first\n                        b?.tag?.split('-')?.[0] ?? '',\n                        a?.tag?.split('-')?.[0] ?? '',\n                      ) || localeCompare(a?.architecture, b?.architecture),\n                  ),\n                };\n              })\n\n              .sortBy((item) => item.displayName)\n              .value(),\n          };\n        })\n        .sortBy((item) => item.groupName)\n        .value(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [images, metadata, filter, showPrivate],\n  );\n\n  // support search image by full name\n  const { fullNameMatchedImage } = useMemo(() => {\n    let fullNameMatchedImage: Image | undefined;\n    let fullNameMatchedImageGroup:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    if (environmentSearch.length) {\n      _.chain(\n        imageGroups\n          .flatMap((group) => group.environmentGroups)\n          .find((envGroup) => {\n            fullNameMatchedImageGroup = envGroup;\n            fullNameMatchedImage = _.find(envGroup.images, (image) => {\n              return getImageFullName(image) === environmentSearch;\n            });\n            return !!fullNameMatchedImage;\n          }),\n      ).value();\n    }\n    return {\n      fullNameMatchedImage,\n      fullNameMatchedImageGroup,\n    };\n  }, [environmentSearch, imageGroups]);\n\n  return (\n    <>\n      <style>{cssRaw}</style>\n      <Form.Item\n        className=\"image-environment-select-form-item\"\n        name={['environments', 'environment']}\n        label={\n          <Typography.Text\n            copyable={{\n              text: getImageFullName(\n                form.getFieldValue(['environments', 'image']),\n              ),\n            }}\n          >\n            {t('session.launcher.Environments')} /{' '}\n            {t('session.launcher.Version')}\n          </Typography.Text>\n        }\n        rules={[{ required: _.isEmpty(environments?.manual) }]}\n        style={{ marginBottom: 10 }}\n      >\n        <Select\n          ref={envSelectRef}\n          showSearch\n          // open={true}\n          // autoClearSearchValue\n          searchValue={environmentSearch}\n          onSearch={setEnvironmentSearch}\n          defaultActiveFirstOption={true}\n          optionFilterProp=\"filterValue\"\n          onChange={(value) => {\n            if (fullNameMatchedImage) {\n              form.setFieldsValue({\n                environments: {\n                  environment:\n                    (supportExtendedImageInfo\n                      ? fullNameMatchedImage?.namespace\n                      : fullNameMatchedImage?.name) || '',\n                  version: getImageFullName(fullNameMatchedImage),\n                  image: fullNameMatchedImage,\n                },\n              });\n            }\n            // NOTE: when user set environment only then set the version to the first item\n            else {\n              const firstInListImage: Image = imageGroups\n                .flatMap((group) => group.environmentGroups)\n                .filter((envGroup) => envGroup.environmentName === value)[0]\n                .images[0];\n              form.setFieldsValue({\n                environments: {\n                  environment:\n                    (supportExtendedImageInfo\n                      ? firstInListImage?.namespace\n                      : firstInListImage?.name) || '',\n                  version: getImageFullName(firstInListImage),\n                  image: firstInListImage,\n                },\n              });\n            }\n          }}\n          disabled={\n            baiClient._config.allow_manual_image_name_for_session &&\n            !_.isEmpty(environments?.manual)\n          }\n        >\n          {fullNameMatchedImage ? (\n            <Select.Option\n              value={\n                supportExtendedImageInfo\n                  ? fullNameMatchedImage?.namespace\n                  : fullNameMatchedImage?.name\n              }\n              filterValue={getImageFullName(fullNameMatchedImage)}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"center\"\n                gap=\"xs\"\n                style={{ display: 'inline-flex' }}\n              >\n                <ImageMetaIcon\n                  image={getImageFullName(fullNameMatchedImage) || ''}\n                  style={{\n                    width: 15,\n                    height: 15,\n                  }}\n                />\n                {getImageFullName(fullNameMatchedImage)}\n              </Flex>\n            </Select.Option>\n          ) : (\n            _.map(imageGroups, (group) => {\n              return (\n                <Select.OptGroup key={group.groupName} label={group.groupName}>\n                  {_.map(group.environmentGroups, (environmentGroup) => {\n                    const firstImage = environmentGroup.images[0];\n                    const currentMetaImageInfo =\n                      metadata?.imageInfo[\n                        environmentGroup.environmentName.split('/')?.[2]\n                      ];\n\n                    const extraFilterValues: string[] = [];\n                    let environmentPrefixTag = null;\n                    if (\n                      environmentGroup.prefix &&\n                      !['lablup', 'cloud', 'stable'].includes(\n                        environmentGroup.prefix,\n                      )\n                    ) {\n                      extraFilterValues.push(environmentGroup.prefix);\n                      environmentPrefixTag = (\n                        <Tag color=\"purple\">\n                          <TextHighlighter keyword={environmentSearch}>\n                            {environmentGroup.prefix}\n                          </TextHighlighter>\n                        </Tag>\n                      );\n                    }\n\n                    const tagsFromMetaImageInfoLabel = _.map(\n                      currentMetaImageInfo?.label,\n                      (label) => {\n                        if (\n                          _.isUndefined(label.category) &&\n                          label.tag &&\n                          label.color\n                        ) {\n                          extraFilterValues.push(label.tag);\n                          return (\n                            <Tag color={label.color} key={label.tag}>\n                              <TextHighlighter\n                                keyword={environmentSearch}\n                                key={label.tag}\n                              >\n                                {label.tag}\n                              </TextHighlighter>\n                            </Tag>\n                          );\n                        }\n                        return null;\n                      },\n                    );\n                    return (\n                      <Select.Option\n                        key={environmentGroup.environmentName}\n                        value={environmentGroup.environmentName}\n                        filterValue={\n                          environmentGroup.displayName +\n                          '\\t' +\n                          extraFilterValues.join('\\t')\n                        }\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\" align=\"center\" gap=\"xs\">\n                            <ImageMetaIcon\n                              image={getImageFullName(firstImage) || ''}\n                              style={{\n                                width: 15,\n                                height: 15,\n                              }}\n                            />\n                            <TextHighlighter keyword={environmentSearch}>\n                              {environmentGroup.displayName}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            // style={{ flex: 1 }}\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {environmentPrefixTag}\n                            {tagsFromMetaImageInfoLabel}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  })}\n                </Select.OptGroup>\n              );\n            })\n          )}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prev, cur) =>\n          prev.environments?.environment !== cur.environments?.environment\n        }\n      >\n        {({ getFieldValue }) => {\n          let selectedEnvironmentGroup:\n            | ImageGroup['environmentGroups'][0]\n            | undefined;\n          _.find(imageGroups, (group) => {\n            return _.find(group.environmentGroups, (environment) => {\n              if (\n                environment.environmentName ===\n                getFieldValue('environments')?.environment\n              ) {\n                selectedEnvironmentGroup = environment;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          });\n          return (\n            <Form.Item\n              className=\"image-environment-select-form-item\"\n              name={['environments', 'version']}\n              rules={[{ required: _.isEmpty(environments?.manual) }]}\n            >\n              <Select\n                ref={versionSelectRef}\n                onChange={(value) => {\n                  const selectedImage = _.find(images, (image) => {\n                    return getImageFullName(image) === value;\n                  });\n                  form.setFieldValue(['environments', 'image'], selectedImage);\n                }}\n                showSearch\n                searchValue={versionSearch}\n                onSearch={setVersionSearch}\n                // autoClearSearchValue\n                optionFilterProp=\"filterValue\"\n                // optionLabelProp=\"label\"\n                dropdownRender={(menu) => (\n                  <>\n                    <Flex\n                      style={{\n                        fontWeight: token.fontWeightStrong,\n                        paddingLeft: token.paddingSM,\n                      }}\n                    >\n                      {t('session.launcher.Version')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Architecture')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Tags')}\n                    </Flex>\n                    <Divider style={{ margin: '8px 0' }} />\n                    {menu}\n                  </>\n                )}\n                disabled={\n                  baiClient._config.allow_manual_image_name_for_session &&\n                  !_.isEmpty(environments?.manual)\n                }\n              >\n                {_.map(\n                  _.uniqBy(selectedEnvironmentGroup?.images, 'id'),\n\n                  (image) => {\n                    const [version, tag, ...requirements] = image?.tag?.split(\n                      '-',\n                    ) || ['', '', ''];\n\n                    let metadataTagAlias = metadata?.tagAlias[tag];\n                    if (!metadataTagAlias) {\n                      for (const [key, replaceString] of Object.entries(\n                        metadata?.tagReplace || {},\n                      )) {\n                        const pattern = new RegExp(key);\n                        if (pattern.test(tag)) {\n                          metadataTagAlias = tag?.replace(\n                            pattern,\n                            replaceString,\n                          );\n                        }\n                      }\n                      if (!metadataTagAlias) {\n                        metadataTagAlias = tag;\n                      }\n                    }\n\n                    const extraFilterValues: string[] = [];\n                    const requirementTags = _.chain(requirements)\n                      .filter(\n                        (requirement) => !requirement.startsWith('customized_'),\n                      )\n                      .map((requirement, idx) => (\n                        <DoubleTag\n                          key={idx}\n                          values={_.split(\n                            metadata?.tagAlias[requirement] || requirement,\n                            ':',\n                          ).map((str) => {\n                            extraFilterValues.push(str);\n                            return {\n                              label: str,\n                              highlightKeyword: versionSearch,\n                            };\n                          })}\n                        />\n                      ))\n                      .value();\n                    const imageLabels = image?.labels;\n                    if (imageLabels) {\n                      const customizedImageNameLabelIdx = _.findIndex(\n                        imageLabels,\n                        (item) =>\n                          item !== null &&\n                          item?.key === 'ai.backend.customized-image.name',\n                      );\n                      if (\n                        customizedImageNameLabelIdx &&\n                        imageLabels[customizedImageNameLabelIdx]\n                      ) {\n                        const tag =\n                          imageLabels[customizedImageNameLabelIdx]?.value || '';\n                        extraFilterValues.push('Customized');\n                        extraFilterValues.push(tag);\n                        requirementTags.push(\n                          <DoubleTag\n                            key={requirementTags.length + 1}\n                            highlightKeyword={versionSearch}\n                            values={[\n                              {\n                                label: 'Customized',\n                                color: 'cyan',\n                              },\n                              {\n                                label: tag ?? '',\n                                color: 'cyan',\n                              },\n                            ]}\n                          />,\n                        );\n                      }\n                    }\n                    return (\n                      <Select.Option\n                        key={image?.id}\n                        value={getImageFullName(image)}\n                        filterValue={[\n                          version,\n                          metadataTagAlias,\n                          image?.architecture,\n                          ...extraFilterValues,\n                        ].join('\\t')}\n                      >\n                        {supportExtendedImageInfo ? (\n                          <Flex direction=\"row\">\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.version}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.architecture}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <Flex direction=\"row\" align=\"start\">\n                              {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                              {_.map(\n                                image?.tags,\n                                (tag: { key: string; value: string }) => {\n                                  const isCustomized = _.includes(\n                                    tag.key,\n                                    'customized_',\n                                  );\n                                  const tagValue = isCustomized\n                                    ? _.find(image?.labels, {\n                                        key: 'ai.backend.customized-image.name',\n                                      })?.value\n                                    : tag.value;\n                                  const aliasedTag = tagAlias(\n                                    tag.key + tagValue,\n                                  );\n                                  return _.isEqual(\n                                    aliasedTag,\n                                    preserveDotStartCase(tag.key + tagValue),\n                                  ) ? (\n                                    <DoubleTag\n                                      key={tag.key}\n                                      highlightKeyword={versionSearch}\n                                      values={[\n                                        {\n                                          label: tagAlias(tag.key),\n                                          color: isCustomized ? 'cyan' : 'blue',\n                                        },\n                                        {\n                                          label: tagValue ?? '',\n                                          color: isCustomized ? 'cyan' : 'blue',\n                                        },\n                                      ]}\n                                    />\n                                  ) : (\n                                    <Tag\n                                      key={tag.key}\n                                      color={isCustomized ? 'cyan' : 'blue'}\n                                    >\n                                      <TextHighlighter keyword={versionSearch}>\n                                        {aliasedTag}\n                                      </TextHighlighter>\n                                    </Tag>\n                                  );\n                                },\n                              )}\n                            </Flex>\n                          </Flex>\n                        ) : (\n                          <Flex direction=\"row\" justify=\"between\">\n                            <Flex direction=\"row\">\n                              <TextHighlighter keyword={versionSearch}>\n                                {getBaseVersion(getImageFullName(image) || '')}\n                              </TextHighlighter>\n                              <Divider type=\"vertical\" />\n                              <TextHighlighter keyword={versionSearch}>\n                                {image?.architecture}\n                              </TextHighlighter>\n                              <Divider type=\"vertical\" />\n                              <ImageTags\n                                tag={image?.tag || ''}\n                                highlightKeyword={versionSearch}\n                                labels={\n                                  image?.labels as Array<{\n                                    key: string;\n                                    value: string;\n                                  }>\n                                }\n                              />\n                            </Flex>\n                          </Flex>\n                        )}\n                      </Select.Option>\n                    );\n                  },\n                )}\n              </Select>\n            </Form.Item>\n          );\n        }}\n      </Form.Item>\n      <Form.Item\n        label={t('session.launcher.ManualImageName')}\n        name={['environments', 'manual']}\n        style={{\n          display: baiClient._config.allow_manual_image_name_for_session\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Input\n          allowClear\n          onChange={(value) => {\n            if (!_.isEmpty(value)) {\n              form.setFieldsValue({\n                environments: {\n                  environment: undefined,\n                  version: undefined,\n                  image: undefined,\n                },\n              });\n            } else {\n            }\n          }}\n        />\n      </Form.Item>\n      <Form.Item noStyle hidden name={['environments', 'image']}>\n        <Input />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ImageEnvironmentSelectFormItems;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  alt?: string;\n}> = ({ image, style = {}, alt = '' }) => {\n  const [, { getImageIcon }] = useBackendAIImageMetaData();\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: '1em',\n        height: '1em',\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","import { preserveDotStartCase } from '../helper';\nimport { useBackendAIImageMetaData } from '../hooks';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag, TagProps } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\ninterface ImageAliasNameAndBaseVersionTagsProps\n  extends Omit<DoubleTagObjectValue, 'label'> {\n  image: string | null;\n}\nexport const ImageAliasNameAndBaseVersionTags: React.FC<\n  ImageAliasNameAndBaseVersionTagsProps\n> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageAliasName, getBaseVersion, tagAlias }] =\n    useBackendAIImageMetaData();\n  return (\n    <DoubleTag\n      values={[\n        {\n          label: tagAlias(getImageAliasName(image)),\n          color: 'blue',\n        },\n        {\n          label: getBaseVersion(image),\n          color: 'green',\n        },\n      ]}\n      {...props}\n    />\n  );\n};\n\ninterface BaseVersionTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseVersionTags: React.FC<BaseVersionTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseVersion, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getBaseVersion(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseVersion(image))}\n    </Tag>\n  );\n};\n\ninterface BaseImageTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseImageTags: React.FC<BaseImageTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseImage, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getBaseImage(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseImage(image))}\n    </Tag>\n  );\n};\n\ninterface ArchitectureTagsProps extends TagProps {\n  image: string | null;\n}\nexport const ArchitectureTags: React.FC<ArchitectureTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getArchitecture, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getArchitecture(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {getArchitecture(image)}\n    </Tag>\n  );\n};\n\ninterface LangTagsProps extends TagProps {\n  image: string | null;\n}\nexport const LangTags: React.FC<LangTagsProps> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageLang, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getImageLang(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getImageLang(image))}\n    </Tag>\n  );\n};\n\ninterface ConstraintTagsProps extends TagProps {\n  tag: string;\n  labels: { key: string; value: string }[];\n  highlightKeyword?: string;\n}\nexport const ConstraintTags: React.FC<ConstraintTagsProps> = ({\n  tag,\n  labels,\n  highlightKeyword,\n  ...props\n}) => {\n  labels = labels || [];\n  const [, { getConstraints }] = useBackendAIImageMetaData();\n  const constraints = getConstraints(tag, labels);\n  return (\n    <Flex direction=\"row\" align=\"start\">\n      {!_.isEmpty(constraints?.[0]) ? (\n        <Tag color=\"blue\" {...props}>\n          <TextHighlighter keyword={highlightKeyword}>\n            {constraints[0]}\n          </TextHighlighter>\n        </Tag>\n      ) : null}\n      {!_.isEmpty(constraints?.[1]) ? (\n        <DoubleTag\n          color=\"cyan\"\n          highlightKeyword={highlightKeyword}\n          values={[\n            {\n              label: 'Customized',\n              color: 'cyan',\n            },\n            {\n              label: constraints[1],\n              color: 'cyan',\n            },\n          ]}\n          {...props}\n        />\n      ) : null}\n    </Flex>\n  );\n};\n\nconst SessionKernelTags: React.FC<{\n  image: string | null;\n  border?: boolean;\n}> = ({ image }) => {\n  image = image || '';\n  return (\n    <>\n      <ImageAliasNameAndBaseVersionTags image={image} />\n      <BaseImageTags image={image} />\n      <ArchitectureTags image={image} />\n    </>\n  );\n};\n\nexport default React.memo(SessionKernelTags);\n\ninterface ImageTagsProps extends TagProps {\n  tag: string;\n  labels: Array<{ key: string; value: string }>;\n  highlightKeyword?: string;\n}\nexport const ImageTags: React.FC<ImageTagsProps> = ({\n  tag,\n  labels,\n  highlightKeyword,\n  ...props\n}) => {\n  labels = labels || [];\n  const [, { getTags, tagAlias }] = useBackendAIImageMetaData();\n  const tags = getTags(tag, labels);\n  return (\n    <Flex direction=\"row\" align=\"start\">\n      {_.map(tags, (tag: { key: string; value: string }, index) => {\n        const isCustomized = tag.key === 'Customized';\n        const aliasedTag = tagAlias(tag.key + tag.value);\n        return _.isEqual(\n          aliasedTag,\n          preserveDotStartCase(tag.key + tag.value),\n        ) ? (\n          <DoubleTag\n            key={tag.key}\n            highlightKeyword={highlightKeyword}\n            values={[\n              {\n                label: tagAlias(tag.key),\n                color: isCustomized ? 'cyan' : 'blue',\n              },\n              {\n                label: tag.value,\n                color: isCustomized ? 'cyan' : 'blue',\n              },\n            ]}\n          />\n        ) : (\n          <Tag key={tag.key} color={isCustomized ? 'cyan' : 'blue'}>\n            <TextHighlighter keyword={highlightKeyword} key={index}>\n              {aliasedTag}\n            </TextHighlighter>\n          </Tag>\n        );\n      })}\n    </Flex>\n  );\n};\n","import { useUpdatableState } from '../hooks';\nimport useControllableState from '../hooks/useControllableState';\nimport Flex from './Flex';\nimport { InputNumber, Slider, InputNumberProps, SliderSingleProps } from 'antd';\nimport { SliderRangeProps } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\n\ntype OmitControlledProps<T> = Omit<T, 'value' | 'onChange'>;\n\ninterface InputNumberWithSliderProps {\n  min?: number;\n  max?: number;\n  step?: number | null;\n  disabled?: boolean;\n  value?: number;\n  allowNegative?: boolean;\n  onChange?: (value: number) => void;\n  inputNumberProps?: OmitControlledProps<InputNumberProps>;\n  sliderProps?:\n    | OmitControlledProps<SliderSingleProps>\n    | OmitControlledProps<SliderRangeProps>;\n}\nconst InputNumberWithSlider: React.FC<InputNumberWithSliderProps> = ({\n  min,\n  max,\n  step,\n  disabled,\n  inputNumberProps,\n  sliderProps,\n  allowNegative,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableState(otherProps);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (!allowNegative) {\n      // when step is 1, make sure the value is integer\n      if (step === 1 && value % 1 !== 0) {\n        setValue(_.max([Math.round(value), min]));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [step]);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    if (!allowNegative) {\n      setTimeout(() => {\n        updateKey(value);\n      }, 0);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        align=\"stretch\"\n        direction=\"column\"\n      >\n        <InputNumber\n          key={key}\n          ref={inputRef}\n          max={max}\n          min={min}\n          step={step ?? undefined}\n          disabled={disabled}\n          value={value}\n          onChange={setValue}\n          onBlur={() => {\n            if (_.isNumber(step) && step > 0) {\n              if (\n                _.isNumber(max) &&\n                max < _.toNumber(inputRef.current?.value || '0')\n              ) {\n                return; // do not update value if it is greater than max\n              }\n              const decimalCount = step.toString().split('.')[1]?.length || 0;\n              setValue(\n                _.max([\n                  _.toNumber(\n                    (\n                      Math.round(\n                        _.toNumber(inputRef.current?.value || '0') / step,\n                      ) * step\n                    ).toFixed(decimalCount),\n                  ),\n                  min,\n                ]),\n              );\n            }\n          }}\n          {...inputNumberProps}\n        />\n      </Flex>\n      <Flex direction=\"column\" align=\"stretch\" style={{ flex: 3 }}>\n        <Slider\n          max={max}\n          min={min}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={(value: any) => {\n            if (min !== undefined && value < min) {\n              return;\n            } else {\n              setValue(value);\n            }\n          }}\n          {...sliderProps}\n          // remove marks that are greater than max\n          marks={_.omitBy(sliderProps?.marks, (option, key) => {\n            return _.isNumber(max) ? _.parseInt(key) > max : false;\n          })}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default InputNumberWithSlider;\n","import { useSuspendedBackendaiClient } from '.';\nimport { Image } from '../components/ImageEnvironmentSelectFormItems';\nimport { AUTOMATIC_DEFAULT_SHMEM } from '../components/ResourceAllocationFormItems';\nimport { addNumberWithUnits, convertBinarySizeUnit } from '../helper';\nimport { ResourceSlotName, useResourceSlots } from '../hooks/backendai';\nimport { useSuspenseTanQuery } from './reactQueryAlias';\nimport { useResourceGroupsForCurrentProject } from './useCurrentProject';\nimport _ from 'lodash';\nimport { useMemo } from 'react';\n\nconst maxPerContainerRegex = /^max([A-Za-z0-9]+)PerContainer$/;\n\nexport const isMatchingMaxPerContainer = (configName: string, key: string) => {\n  const match = configName.match(maxPerContainerRegex);\n  if (match) {\n    const configLowerCase = match[1].toLowerCase();\n    const keyLowerCase = key.replaceAll(/[.-]/g, '').toLowerCase();\n    // Because some accelerator names are not the same as the config name, we need to check if the config name is a substring of the accelerator name\n    // cuda.shares => maxCUDASharesPerContainer\n    // cuda.device => maxCUDADevicesPerContainer (Not maxCUDADevicePerContainer)\n    return (\n      configLowerCase === keyLowerCase || configLowerCase === keyLowerCase + 's'\n    );\n  }\n  return false;\n};\nexport interface MergedResourceLimits {\n  accelerators: {\n    [key: string]:\n      | {\n          min?: number;\n          max?: number;\n        }\n      | undefined;\n  };\n  cpu?: {\n    min?: number;\n    max?: number;\n  };\n  mem?: {\n    min?: string;\n    max?: string;\n  };\n  shmem?: {\n    min?: string;\n    max?: string;\n  };\n}\n\ntype ResourceLimits = {\n  [key in ResourceSlotName]?: string | 'Infinity' | 'NaN';\n};\ntype ResourceUsing = ResourceLimits;\ntype ResourceRemaining = ResourceLimits;\ntype ScalingGroup = {\n  using: ResourceUsing;\n  remaining: ResourceRemaining;\n};\n\ntype ResourceSlots = {\n  cpu: string;\n  mem: string;\n  [key: string]: string;\n};\n\ntype RemainingSlots = {\n  cpu: number;\n  mem: number;\n  accelerators: {\n    [key: string]: number;\n  };\n};\n\nexport type ResourcePreset = {\n  name: string;\n  resource_slots: ResourceSlots;\n  shared_memory: string | null;\n  allocatable: boolean;\n};\n\ntype ResourceAllocation = {\n  keypair_limits: ResourceLimits;\n  keypair_using: ResourceUsing;\n  keypair_remaining: ResourceRemaining;\n  scaling_group_remaining: ResourceRemaining;\n  scaling_groups: {\n    [key: string]: ScalingGroup;\n  };\n  presets: ResourcePreset[];\n  group_limits: ResourceLimits;\n  group_using: ResourceUsing;\n  group_remaining: ResourceRemaining;\n};\n\ninterface Props {\n  currentProjectName: string;\n  currentImage?: Image;\n  currentResourceGroup?: string;\n  ignorePerContainerConfig?: boolean;\n}\n\n// determine resource limits and remaining for current resource group and current image in current project\nexport const useResourceLimitAndRemaining = ({\n  currentImage,\n  currentResourceGroup = '',\n  currentProjectName,\n  ignorePerContainerConfig = false,\n}: Props) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n  const { resourceGroups } = useResourceGroupsForCurrentProject();\n\n  const {\n    data: checkPresetInfo,\n    refetch,\n    isRefetching,\n  } = useSuspenseTanQuery<ResourceAllocation | null>({\n    queryKey: ['check-presets', currentProjectName, currentResourceGroup],\n    queryFn: () => {\n      if (\n        currentResourceGroup &&\n        _.some(resourceGroups, (rg) => rg.name === currentResourceGroup)\n      ) {\n        return baiClient.resourcePreset\n          .check({\n            group: currentProjectName,\n            scaling_group: currentResourceGroup,\n          })\n          .catch(() => {});\n      } else {\n        return null;\n      }\n    },\n    staleTime: 1000,\n    // suspense: !_.isEmpty(currentResourceGroup), //prevent flicking\n  });\n\n  const currentImageMinM =\n    _.find(currentImage?.resource_limits, (i) => i?.key === 'mem')?.min || '0g';\n\n  const resourceGroupResourceSize: {\n    cpu?: number;\n    mem?: string;\n    accelerators: {\n      [key: string]: number | undefined;\n    };\n  } = {\n    // scaling group all cpu (using + remaining), string type\n    cpu:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.cpu,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.cpu,\n      )\n        ? _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.cpu,\n          ) +\n          _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n              .cpu,\n          )\n        : undefined,\n    mem:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.mem,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.mem,\n      )\n        ? convertBinarySizeUnit(\n            _.toNumber(\n              checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.mem,\n            ) +\n              _.toNumber(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n                  .mem,\n              ) +\n              'b',\n            'g',\n            2,\n          )?.numberFixed + 'g'\n        : undefined,\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.[key],\n          ) &&\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.[\n              key\n            ],\n          )\n            ? _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.using[\n                  key\n                ],\n              ) +\n              _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]\n                  ?.remaining[key],\n              )\n            : undefined;\n        return result;\n      },\n      {} as {\n        [key: string]: number | undefined;\n      },\n    ),\n  };\n  const perContainerConfigs = useMemo(\n    () =>\n      _.omitBy(baiClient._config, (value, key) => {\n        return !maxPerContainerRegex.test(key);\n      }),\n    [baiClient._config],\n  );\n\n  const resourceLimits: MergedResourceLimits = {\n    cpu:\n      resourceSlots?.cpu === undefined\n        ? undefined\n        : {\n            min: _.max([\n              _.toNumber(\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'cpu')\n                  ?.min || '0',\n              ),\n            ]),\n            max: _.min([\n              ignorePerContainerConfig\n                ? undefined\n                : baiClient._config.maxCPUCoresPerContainer,\n              limitParser(checkPresetInfo?.keypair_limits.cpu),\n              limitParser(checkPresetInfo?.group_limits.cpu),\n              // resourceGroupResourceSize?.cpu,\n            ]),\n          },\n    mem:\n      resourceSlots?.mem === undefined\n        ? undefined\n        : {\n            // M to max of [ image's mem min, AUTOMATIC_DEFAULT_SHMEM]\n            // mem(M+S) should be larger than _.max([ image's mem min, AUTOMATIC_DEFAULT_SHMEM ]) + AUTOMATIC_DEFAULT_SHMEM (rule: S can not be larger than M)\n            min:\n              //handled by 'b' unit\n              addNumberWithUnits(\n                _.max([\n                  convertBinarySizeUnit(currentImageMinM, 'b')?.number,\n                  convertBinarySizeUnit(AUTOMATIC_DEFAULT_SHMEM, 'b')?.number,\n                  0,\n                ]) + 'b',\n                AUTOMATIC_DEFAULT_SHMEM,\n              ),\n            max:\n              //handled by 'g(GiB)' unit\n              _.min([\n                ignorePerContainerConfig\n                  ? undefined\n                  : baiClient._config.maxMemoryPerContainer,\n                limitParser(checkPresetInfo?.keypair_limits.mem) &&\n                  convertBinarySizeUnit(\n                    limitParser(checkPresetInfo?.keypair_limits.mem) + '',\n                    'g',\n                  )?.number,\n                limitParser(checkPresetInfo?.group_limits.mem) &&\n                  convertBinarySizeUnit(\n                    limitParser(checkPresetInfo?.group_limits.mem) + '',\n                    'g',\n                  )?.number,\n                // scaling group all mem (using + remaining), string type\n                // resourceGroupResourceSize?.mem &&\n                //   iSizeToSize(resourceGroupResourceSize?.mem + '', 'g')?.number,\n              ]) + 'g',\n          },\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        const perContainerLimit =\n          _.find(perContainerConfigs, (configValue, configName) => {\n            return isMatchingMaxPerContainer(configName, key);\n          }) ?? baiClient._config['cuda.device']; // FIXME: temporally `cuda.device` config, when undefined\n\n        result[key] = {\n          min: parseInt(\n            _.filter(\n              currentImage?.resource_limits,\n              (supportedAcceleratorInfo) => {\n                return supportedAcceleratorInfo?.key === key;\n              },\n            )?.[0]?.min || '0',\n          ),\n          max: _.min([\n            perContainerLimit || 8,\n            limitParser(\n              checkPresetInfo?.keypair_limits[key as ResourceSlotName],\n            ),\n            limitParser(checkPresetInfo?.group_limits[key as ResourceSlotName]),\n            // scaling group all cpu (using + remaining), string type\n            // resourceGroupResourceSize.accelerators[key],\n          ]),\n        };\n        return result;\n      },\n      {} as MergedResourceLimits['accelerators'],\n    ),\n  };\n  const remaining: RemainingSlots = {\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          _.min([\n            _.toNumber(\n              checkPresetInfo?.keypair_remaining[key as ResourceSlotName],\n            ),\n            _.toNumber(\n              checkPresetInfo?.group_remaining[key as ResourceSlotName],\n            ),\n            _.toNumber(\n              checkPresetInfo?.scaling_group_remaining[key as ResourceSlotName],\n            ),\n          ]) ?? Number.MAX_SAFE_INTEGER;\n        return result;\n      },\n      {} as RemainingSlots['accelerators'],\n    ),\n    cpu:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.cpu),\n        limitParser(checkPresetInfo?.group_remaining.cpu),\n        limitParser(checkPresetInfo?.scaling_group_remaining.cpu),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n    mem:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.mem),\n        limitParser(checkPresetInfo?.group_remaining.mem),\n        limitParser(checkPresetInfo?.scaling_group_remaining.mem),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n  };\n\n  return [\n    {\n      resourceGroupResourceSize,\n      resourceLimits,\n      remaining,\n      currentImageMinM,\n      isRefetching,\n      checkPresetInfo,\n    },\n    {\n      refetch,\n    },\n  ] as const;\n};\n\nconst limitParser = (limit: string | undefined) => {\n  if (limit === undefined) {\n    return undefined;\n  } else if (limit === 'Infinity') {\n    return undefined;\n  } else if (limit === 'NaN') {\n    return undefined;\n  } else {\n    return _.toNumber(limit);\n  }\n};\n","import { useBAIPaginationOptionState } from '../hooks/reactPaginationQueryOptions';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport { AgentSelectQuery } from './__generated__/AgentSelectQuery.graphql';\nimport { useControllableValue } from 'ahooks';\nimport { Select, SelectProps } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ninterface Props extends SelectProps {\n  autoSelectDefault?: boolean;\n  fetchKey?: string;\n  resourceGroup?: string | null;\n}\n\nconst AgentSelect: React.FC<Props> = ({\n  fetchKey,\n  resourceGroup,\n  ...selectProps\n}) => {\n  const { t } = useTranslation();\n  const [value, setValue] = useControllableValue(selectProps);\n\n  const { baiPaginationOption } = useBAIPaginationOptionState({\n    current: 1,\n    pageSize: 20,\n  });\n\n  const { agent_summary_list } = useLazyLoadQuery<AgentSelectQuery>(\n    graphql`\n      query AgentSelectQuery(\n        $limit: Int!\n        $offset: Int!\n        $status: String\n        $filter: String\n        $scaling_group: String\n      ) {\n        agent_summary_list(\n          limit: $limit\n          offset: $offset\n          status: $status\n          filter: $filter\n          scaling_group: $scaling_group\n        ) {\n          items {\n            id\n            status\n            schedulable\n            available_slots\n            occupied_slots\n            architecture\n          }\n          total_count\n        }\n      }\n    `,\n    {\n      limit: baiPaginationOption.limit,\n      offset: baiPaginationOption.offset,\n      status: 'ALIVE',\n      filter: 'schedulable is true', // true, false, null\n      scaling_group: resourceGroup,\n    },\n    {\n      fetchPolicy: 'network-only',\n      fetchKey,\n    },\n  );\n\n  const agentOptions = _.map(agent_summary_list?.items, (agent) => {\n    const availableSlotsInfo: {\n      [key in string]: string;\n    } = JSON.parse(agent?.available_slots ?? '{}');\n    const occupiedSlotsInfo: {\n      [key in string]: string;\n    } = JSON.parse(agent?.occupied_slots ?? '{}');\n    const remainingSlotsInfo: {\n      [key in string]: number;\n    } = _.chain(availableSlotsInfo)\n      .mapValues((value, key) => {\n        if (key.endsWith('.shares')) {\n          return parseFloat(value) - parseFloat(occupiedSlotsInfo[key] ?? 0);\n        } else {\n          return parseInt(value) - parseInt(occupiedSlotsInfo[key] ?? 0);\n        }\n      })\n      .value();\n    return {\n      label: (\n        <Flex direction=\"row\" justify=\"between\">\n          {agent?.id}\n          <Flex direction=\"row\" gap={'xxs'}>\n            {_.map(remainingSlotsInfo, (slot, key) => {\n              return (\n                <ResourceNumber\n                  key={key}\n                  // @ts-ignore\n                  type={key}\n                  value={slot.toString()}\n                  hideTooltip\n                />\n              );\n            })}\n          </Flex>\n        </Flex>\n      ),\n      value: agent?.id,\n    };\n  });\n\n  return (\n    <Select\n      onChange={(value, option) => {\n        setValue(value, option);\n      }}\n      {...selectProps}\n      value={value}\n      options={[\n        { label: t('session.launcher.AutoSelect'), value: 'auto' },\n        ...agentOptions,\n      ]}\n    />\n  );\n};\n\nexport default AgentSelect;\n","import { compareNumberWithUnits, convertBinarySizeUnit } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport useControllableState from '../hooks/useControllableState';\nimport DynamicUnitInputNumber, {\n  DynamicUnitInputNumberProps,\n} from './DynamicUnitInputNumber';\nimport Flex from './Flex';\nimport { Slider, theme } from 'antd';\nimport { SliderMarks } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\n\nexport interface DynamicUnitInputNumberWithSliderProps\n  extends DynamicUnitInputNumberProps {\n  extraMarks?: SliderMarks;\n  hideSlider?: boolean;\n  warn?: string;\n  step?: number;\n}\nconst DynamicUnitInputNumberWithSlider: React.FC<\n  DynamicUnitInputNumberWithSliderProps\n> = ({\n  min = '0m',\n  max = '32g',\n  warn,\n  units = ['m', 'g'],\n  extraMarks,\n  hideSlider,\n  step = 0.05,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableState<string | undefined | null>(\n    otherProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const { token } = theme.useToken();\n  const minGiB = useMemo(() => convertBinarySizeUnit(min, 'g', 2), [min]);\n  const maxGiB = useMemo(() => convertBinarySizeUnit(max, 'g', 2), [max]);\n  const valueGiB = useMemo(\n    () => convertBinarySizeUnit(value || '0g', 'g', 2),\n    [value],\n  );\n\n  // const warnPercent = useMemo(() => {\n  //   return warn\n  //     ? ((iSizeToSize(warn, 'g', 2)?.number || 0) / (maxGiB?.number || 1)) * 100\n  //     : undefined;\n  // }, [warn, maxGiB?.number]);\n  // console.log('##marks', marks);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    setTimeout(() => {\n      updateKey(value?.toString());\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isMinOversMaxValue =\n    _.isNumber(minGiB?.number) &&\n    _.isNumber(maxGiB?.number) &&\n    minGiB?.number > maxGiB?.number;\n\n  const filterOutInvalidMarks = (marks: SliderMarks) => {\n    return _.omitBy({ ...marks }, (option, key) => {\n      const markNumber = parseFloat(key);\n      return (\n        minGiB &&\n        maxGiB &&\n        (minGiB?.number > markNumber || maxGiB?.number < markNumber)\n      );\n    });\n  };\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        direction=\"column\"\n        align=\"stretch\"\n      >\n        <DynamicUnitInputNumber\n          {...otherProps}\n          key={key}\n          min={min}\n          max={max}\n          units={units}\n          // set value to 0mib when min value overs max value\n          value={value}\n          onChange={(nextValue) => {\n            setValue(nextValue);\n          }}\n          style={{\n            minWidth: 130,\n          }}\n          roundStep={step}\n          changeOnBlur={!isMinOversMaxValue}\n        />\n      </Flex>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 3,\n          ...(hideSlider && {\n            visibility: 'hidden',\n            height: 0,\n          }),\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {/* {warn && (\n            <Flex\n              direction=\"row\"\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 14.5,\n                width: '100%',\n                height: 4,\n                padding: '0 5px',\n              }}\n              align=\"start\"\n            >\n              <div\n                style={{\n                  width: warnPercent + '%',\n                  height: 4,\n                }}\n              ></div>\n              <div\n                style={{\n                  marginTop: 3,\n                  marginLeft: -3.5,\n                  width: 0,\n                  height: 0,\n\n                  borderTop: '4px solid transparent',\n                  borderLeft: '4px solid transparent',\n                  borderRight: '4px solid transparent',\n                  borderBottom: `7px solid ${token.colorWarning}`,\n                }}\n              ></div>\n            </Flex>\n          )} */}\n          <Slider\n            max={maxGiB?.number}\n            styles={{\n              track:\n                (warn && {\n                  backgroundColor:\n                    compareNumberWithUnits(warn, value || '0b') < 0\n                      ? token.colorWarning\n                      : undefined,\n                }) ||\n                undefined,\n              rail: {\n                // backgroundColor:'red',\n                // fill: 'red',\n              },\n            }}\n            step={step}\n            // min={minGiB.number}  // DO NOT use min, because slider left should be 0\n\n            // For the slider, when min value overs max value, it will not work.\n            // In this case, hide all information and disabled the slider.\n            // Most of case, it's not a good idea to set the different value to the control value,\n            // but in this case, it's okay to hide all information and disabled the slider.\n            value={isMinOversMaxValue ? 0 : valueGiB?.number}\n            disabled={isMinOversMaxValue}\n            tooltip={{\n              formatter: isMinOversMaxValue\n                ? null\n                : (value = 0) => {\n                    return value < 1\n                      ? `${(value * 1024).toFixed(2)} MiB`\n                      : `${value.toFixed(2)} GiB`;\n                  },\n            }}\n            onChange={(newNumValue) => {\n              if (minGiB?.number && minGiB.number > newNumValue) {\n                setValue(min);\n              } else {\n                setValue(\n                  newNumValue < 1\n                    ? `${newNumValue * 1024}m`\n                    : `${newNumValue}g`,\n                );\n              }\n            }}\n            marks={filterOutInvalidMarks({\n              ...(minGiB &&\n                _.isNumber(minGiB?.number) && {\n                  [minGiB.number]: {\n                    style: {\n                      color: token.colorTextSecondary,\n                    },\n                    // if 0, without unit\n                    label:\n                      minGiB.number === 0\n                        ? minGiB.number\n                        : minGiB.number >= 1\n                          ? minGiB.number + 'g'\n                          : minGiB.number * 1024 + 'm',\n                  },\n                }),\n              // extra: remaining mark code should be located before max mark code to prevent overlapping when it is same value\n              ..._.omitBy(extraMarks, (option, key) => {\n                return _.isNumber(maxGiB?.number)\n                  ? _.parseInt(key) > (maxGiB?.number as number)\n                  : false;\n              }),\n              ...(maxGiB?.number && {\n                [maxGiB.number]: {\n                  style: {\n                    color: token.colorTextSecondary,\n                  },\n                  label:\n                    maxGiB.number === 0\n                      ? maxGiB.number\n                      : maxGiB.number >= 1\n                        ? maxGiB.number + 'g'\n                        : maxGiB.number * 1024 + 'm',\n                },\n              }),\n            })}\n          />\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default DynamicUnitInputNumberWithSlider;\n","import { localeCompare } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { ResourceSlotName, useResourceSlots } from '../hooks/backendai';\nimport useControllableState from '../hooks/useControllableState';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport {\n  ResourcePresetSelectQuery,\n  ResourcePresetSelectQuery$data,\n} from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport { useThrottleFn } from 'ahooks';\nimport { Select, Tooltip, theme } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\n\nexport type ResourcePreset = NonNullable<\n  NonNullable<ResourcePresetSelectQuery$data['resource_presets']>[number]\n>;\nexport interface ResourcePresetSelectProps\n  extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n  allocatablePresetNames?: string[];\n  showMinimumRequired?: boolean;\n  showCustom?: boolean;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  allocatablePresetNames,\n  showCustom,\n  showMinimumRequired,\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [resourceSlots] = useResourceSlots();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const [controllableValue, setControllableValue] =\n    useControllableState(selectProps);\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n\n  return (\n    <Select\n      loading={isPendingUpdate}\n      options={[\n        ...(showCustom\n          ? [\n              {\n                value: 'custom',\n                label: (\n                  <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n                    <EditOutlined /> {t('session.launcher.CustomAllocation')}\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.CustomAllocation'),\n              },\n            ]\n          : []),\n        ...(showMinimumRequired\n          ? [\n              {\n                value: 'minimum-required',\n                label: (\n                  <Flex gap={'xs'}>\n                    {t('session.launcher.MiniumAllocation')}\n                    <Tooltip\n                      title={t('session.launcher.MiniumAllocationTooltip')}\n                    >\n                      <InfoCircleOutlined\n                        style={{\n                          color: token.colorTextSecondary,\n                        }}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.MiniumAllocation'),\n              },\n            ]\n          : []),\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset, index) => {\n            const slotsInfo: {\n              [key in ResourceSlotName]: string;\n            } = JSON.parse(preset?.resource_slots || '{}');\n            const disabled = allocatablePresetNames\n              ? !allocatablePresetNames.includes(preset?.name || '')\n              : undefined;\n            return {\n              value: preset?.name,\n              label: (\n                <Flex direction=\"row\" justify=\"between\" gap={'xs'}>\n                  {preset?.name}\n                  <Flex\n                    direction=\"row\"\n                    gap={'xxs'}\n                    style={\n                      {\n                        // color: 'black',\n                        // opacity: isAvailable ? 1 : 0.4,\n                      }\n                    }\n                  >\n                    {_.map(\n                      _.omitBy(slotsInfo, (slot, key) =>\n                        _.isEmpty(resourceSlots[key as ResourceSlotName]),\n                      ),\n                      (slot, key) => {\n                        return (\n                          <ResourceNumber\n                            key={key}\n                            // @ts-ignore\n                            type={key}\n                            value={slot}\n                            hideTooltip\n                          />\n                        );\n                      },\n                    )}\n                  </Flex>\n                </Flex>\n              ),\n              preset,\n              disabled: disabled,\n            };\n          })\n            .sort(\n              (\n                a,\n                b, // by disabled\n              ) => (a.disabled === b.disabled ? 0 : a.disabled ? 1 : -1),\n            )\n            .sort((a, b) => localeCompare(a.value, b.value)), // by name\n        },\n      ]}\n      showSearch\n      // Set props from parent and override it\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValue}\n      optionLabelProp={\n        _.includes(['custom', 'minimum-required'], controllableValue)\n          ? 'selectedLabel'\n          : 'label'\n      }\n      onDropdownVisibleChange={(open) => {\n        selectProps.onDropdownVisibleChange &&\n          selectProps.onDropdownVisibleChange(open);\n        if (open) {\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import {\n  addNumberWithUnits,\n  compareNumberWithUnits,\n  convertBinarySizeUnit,\n} from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport { useCurrentKeyPairResourcePolicyLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport {\n  MergedResourceLimits,\n  ResourcePreset,\n  useResourceLimitAndRemaining,\n} from '../hooks/useResourceLimitAndRemaining';\nimport AgentSelect from './AgentSelect';\nimport BAISelect from './BAISelect';\nimport DynamicUnitInputNumberWithSlider from './DynamicUnitInputNumberWithSlider';\nimport Flex from './Flex';\n// import FormItemControl from './FormItemControl';\nimport {\n  Image,\n  ImageEnvironmentFormInput,\n} from './ImageEnvironmentSelectFormItems';\nimport InputNumberWithSlider from './InputNumberWithSlider';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport { CaretDownOutlined, ReloadOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  Col,\n  Divider,\n  Form,\n  Radio,\n  Row,\n  Switch,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { Suspense, useEffect, useMemo, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport const AUTOMATIC_DEFAULT_SHMEM = '64m';\nexport const RESOURCE_ALLOCATION_INITIAL_FORM_VALUES: DeepPartial<ResourceAllocationFormValue> =\n  {\n    resource: {\n      cpu: 0,\n      mem: '0g',\n      shmem: '0g',\n      accelerator: 0,\n    },\n    num_of_sessions: 1,\n    cluster_mode: 'single-node',\n    cluster_size: 1,\n    enabledAutomaticShmem: true,\n    agent: 'auto',\n  };\n\nexport const isMinOversMaxValue = (min: number, max: number) => {\n  return min >= max;\n};\n\nexport interface ResourceAllocationFormValue {\n  resource: {\n    cpu: number;\n    mem: string;\n    shmem: string;\n    accelerator: number;\n    acceleratorType: string;\n  };\n  resourceGroup: string;\n  num_of_sessions?: number;\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  enabledAutomaticShmem: boolean;\n  allocationPreset?: string;\n  agent?: string;\n}\n\ntype MergedResourceAllocationFormValue = ResourceAllocationFormValue &\n  ImageEnvironmentFormInput;\n\ninterface ResourceAllocationFormItemsProps {\n  enableAgentSelect?: boolean;\n  enableNumOfSessions?: boolean;\n  enableResourcePresets?: boolean;\n  showRemainingWarning?: boolean;\n  forceImageMinValues?: boolean;\n}\n\nconst ResourceAllocationFormItems: React.FC<\n  ResourceAllocationFormItemsProps\n> = ({\n  enableAgentSelect = false,\n  enableNumOfSessions,\n  enableResourcePresets,\n  forceImageMinValues = false,\n  showRemainingWarning = false,\n}) => {\n  const form = Form.useFormInstance<MergedResourceAllocationFormValue>();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [{ keypairResourcePolicy, sessionLimitAndRemaining }] =\n    useCurrentKeyPairResourcePolicyLazyLoadQuery();\n\n  const [agentFetchKey, updateAgentFetchKey] = useUpdatableState('first');\n  const [isPendingAgentList, startAgentListTransition] = useTransition();\n\n  const currentProject = useCurrentProjectValue();\n  const currentResourceGroupInForm =\n    Form.useWatch(['resourceGroup'], {\n      form,\n      preserve: true,\n    }) || form.getFieldValue('resourceGroup');\n\n  const currentImage = Form.useWatch(['environments', 'image'], {\n    form,\n    preserve: true,\n  });\n  const currentAllocationPreset = Form.useWatch(['allocationPreset'], {\n    form,\n    preserve: true,\n  });\n  const currentEnvironmentManual = Form.useWatch(['environments', 'manual'], {\n    form,\n    preserve: true,\n  });\n\n  const [{ currentImageMinM, remaining, resourceLimits, checkPresetInfo }] =\n    useResourceLimitAndRemaining({\n      currentProjectName: currentProject.name,\n      currentResourceGroup: currentResourceGroupInForm || undefined, // global currentResourceGroup can be null\n      currentImage: currentImage,\n    });\n\n  const { mergedResourceSlots, resourceSlotsInRG } = useResourceSlotsDetails(\n    currentResourceGroupInForm || undefined,\n  );\n\n  // When undefined, it means that the resourceSlots are not loaded yet.\n  const acceleratorSlots = resourceSlotsInRG\n    ? _.omitBy(resourceSlotsInRG, (value, key) => {\n        if (['cpu', 'mem', 'shmem'].includes(key)) return true;\n\n        if (\n          !resourceLimits.accelerators[key]?.max ||\n          resourceLimits.accelerators[key]?.max === 0\n        )\n          return true;\n        return false;\n      })\n    : undefined;\n\n  // When undefined, it means that the image is not determined yet.\n  const currentImageAcceleratorLimits = useMemo(\n    () =>\n      currentImage\n        ? _.filter(currentImage?.resource_limits, (limit) =>\n            limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n          )\n        : undefined,\n    [currentImage],\n  );\n\n  // Disable accelerator input when there is no accelerator slot or no accelerator required in the selected image\n  // TODO: use `supported_accelerators` information from the image instead of `currentImageAcceleratorLimits` (FR-55)\n  const isAcceleratorInputDisabled =\n    (!_.isUndefined(acceleratorSlots) && _.isEmpty(acceleratorSlots)) ||\n    (currentImageAcceleratorLimits &&\n      currentImageAcceleratorLimits.length === 0 &&\n      _.isEmpty(currentEnvironmentManual));\n\n  useEffect(() => {\n    if (isAcceleratorInputDisabled) {\n      form.setFieldsValue({\n        resource: {\n          accelerator: 0,\n        },\n      });\n    }\n  }, [isAcceleratorInputDisabled, form]);\n\n  const sessionSliderLimitAndRemaining = {\n    min: 1,\n    max: sessionLimitAndRemaining.max,\n    remaining: sessionLimitAndRemaining.remaining,\n  };\n\n  const allocatablePresetNames = useMemo(() => {\n    return getAllocatablePresetNames(\n      checkPresetInfo?.presets,\n      resourceLimits,\n      currentImage,\n    );\n  }, [checkPresetInfo?.presets, resourceLimits, currentImage]);\n\n  const ensureValidAcceleratorType = useEventNotStable(() => {\n    const currentAcceleratorType = form.getFieldValue([\n      'resource',\n      'acceleratorType',\n    ]);\n    // If the current accelerator type is not available,\n    // change accelerator type to the first supported accelerator\n    const nextAcceleratorType = acceleratorSlots?.[currentAcceleratorType]\n      ? currentAcceleratorType\n      : _.keys(acceleratorSlots)[0];\n\n    form.setFieldsValue({\n      resource: {\n        acceleratorType: nextAcceleratorType || currentAcceleratorType,\n      },\n    });\n  });\n\n  const updateResourceFieldsBasedOnImage = useEventNotStable(\n    (force?: boolean) => {\n      // when image changed, set value of resources to min value only if it's larger than current value\n      const minimumResources: Partial<ResourceAllocationFormValue['resource']> =\n        {\n          cpu: resourceLimits.cpu?.min,\n          mem:\n            convertBinarySizeUnit(\n              (convertBinarySizeUnit(resourceLimits.shmem?.min, 'm')?.number ||\n                0) +\n                (convertBinarySizeUnit(resourceLimits.mem?.min, 'm')?.number ||\n                  0) +\n                'm',\n              'g',\n            )?.number + 'g', //to prevent loosing precision\n        };\n\n      // NOTE: accelerator value setting is done inside the conditional statement\n      if (\n        currentImageAcceleratorLimits &&\n        currentImageAcceleratorLimits.length > 0\n      ) {\n        if (\n          _.find(\n            currentImageAcceleratorLimits,\n            (limit) =>\n              limit?.key ===\n              form.getFieldValue(['resource', 'acceleratorType']),\n          )\n        ) {\n          // if current selected accelerator type is supported in the selected image,\n          minimumResources.acceleratorType = form.getFieldValue([\n            'resource',\n            'acceleratorType',\n          ]);\n          minimumResources.accelerator =\n            resourceLimits.accelerators[\n              form.getFieldValue(['resource', 'acceleratorType'])\n            ]?.min;\n        } else {\n          // if current selected accelerator type is not supported in the selected image,\n          // change accelerator type to the first supported accelerator type.\n          const nextImageSelectorType: string | undefined | null = // NOTE:\n            // filter from resourceSlots since resourceSlots and supported image could be non-identical.\n            // resourceSlots returns \"all resources enable to allocate(including AI accelerator)\"\n            // imageAcceleratorLimit returns \"all resources that is supported in the selected image\"\n            _.filter(currentImageAcceleratorLimits, (acceleratorInfo: any) =>\n              _.keys(resourceSlotsInRG).includes(acceleratorInfo?.key),\n            )[0]?.key;\n\n          if (nextImageSelectorType) {\n            minimumResources.accelerator =\n              resourceLimits.accelerators[nextImageSelectorType]?.min;\n            minimumResources.acceleratorType = nextImageSelectorType;\n          }\n        }\n      } else {\n        minimumResources.accelerator = 0;\n      }\n\n      if (!forceImageMinValues && !force) {\n        // delete keys that is not less than current value\n        (['cpu', 'accelerator'] as const).forEach((key) => {\n          const minNum = minimumResources[key];\n          if (\n            _.isNumber(minNum) &&\n            minNum < form.getFieldValue(['resource', key])\n          ) {\n            delete minimumResources[key];\n          }\n        });\n        (['mem', 'shmem'] as const).forEach((key) => {\n          const minNumStr = minimumResources[key];\n          if (\n            _.isString(minNumStr) &&\n            compareNumberWithUnits(\n              minNumStr,\n              form.getFieldValue(['resource', key]),\n            ) < 0\n          ) {\n            delete minimumResources[key];\n          }\n        });\n      }\n\n      form.setFieldsValue({\n        resource: {\n          ...minimumResources,\n        },\n      });\n\n      // set to 0 when currentImage doesn't support any AI accelerator\n      if (\n        currentImage &&\n        currentImageAcceleratorLimits &&\n        currentImageAcceleratorLimits.length === 0\n      ) {\n        form.setFieldValue(['resource', 'accelerator'], 0);\n      }\n\n      if (form.getFieldValue('enabledAutomaticShmem')) {\n        runShmemAutomationRule(form.getFieldValue(['resource', 'mem']) || '0g');\n      }\n      form\n        .validateFields(['resource'], {\n          recursive: true,\n        })\n        .catch(() => {});\n    },\n  );\n\n  const updateResourceFieldsBasedOnPreset = useEventNotStable(\n    (name: string) => {\n      const preset = _.find(\n        checkPresetInfo?.presets,\n        (preset) => preset.name === name,\n      );\n      const slots = _.pick(preset?.resource_slots, _.keys(resourceSlotsInRG));\n      const mem = convertBinarySizeUnit(\n        (slots?.mem || 0) + 'b',\n        'g',\n        2,\n      )?.numberUnit;\n      const acceleratorObj = _.omit(slots, ['cpu', 'mem', 'shmem']);\n\n      // Select the first matched AI accelerator type and value\n      const firstMatchedAcceleratorType = _.find(\n        _.keys(acceleratorSlots),\n        (value) => acceleratorObj[value] !== undefined,\n      );\n\n      let acceleratorSetting: {\n        acceleratorType?: string;\n        accelerator: number;\n      } = {\n        accelerator: 0,\n      };\n      if (firstMatchedAcceleratorType) {\n        acceleratorSetting = {\n          acceleratorType: firstMatchedAcceleratorType,\n          accelerator: Number(acceleratorObj[firstMatchedAcceleratorType] || 0),\n        };\n      }\n      form.setFieldsValue({\n        resource: {\n          // ...slots,\n          ...acceleratorSetting,\n          // transform to GB based on preset values\n          mem,\n          shmem: convertBinarySizeUnit(\n            (preset?.shared_memory || 0) + 'b',\n            'g',\n            2,\n          )?.numberUnit,\n          cpu: parseInt(slots?.cpu || '0') || 0,\n        },\n      });\n      runShmemAutomationRule(mem || '0g');\n\n      form\n        .validateFields(['resource'], {\n          recursive: true,\n        })\n        .catch(() => {});\n    },\n  );\n\n  const runShmemAutomationRule = (M_plus_S: string) => {\n    // if M+S > 4G, S can be 1G regard to current image's minimum mem(M)\n    if (\n      // M+S > 4G\n      compareNumberWithUnits(M_plus_S, '4g') >= 0 &&\n      // M+S > M+1G\n      compareNumberWithUnits(\n        M_plus_S,\n        addNumberWithUnits(currentImageMinM, '1g') || '0b',\n      ) >= 0 &&\n      // if 1G < AUTOMATIC_DEFAULT_SHMEM, no need to apply 1G rule\n      compareNumberWithUnits('1g', AUTOMATIC_DEFAULT_SHMEM) > 0\n    ) {\n      form.setFieldValue(['resource', 'shmem'], '1g');\n    } else {\n      form.setFieldValue(['resource', 'shmem'], AUTOMATIC_DEFAULT_SHMEM);\n    }\n  };\n\n  // This effect is\n  // - for auto selecting the preset right after initialling the form and resourceSlots are loaded\n  // - ensuring accelerator type is valid when related data is changed\n  useEffect(() => {\n    // `auto-select` is the initial value of the form\n    // if resourceSlots is loaded, update the form based on the resourceSlots\n    if (\n      currentAllocationPreset === 'auto-select' &&\n      !_.isUndefined(resourceSlotsInRG)\n    ) {\n      if (\n        _.includes(\n          ['custom', 'minimum-required'],\n          form.getFieldValue('allocationPreset'),\n        )\n      ) {\n        // if the current preset is custom or minimum-required, do nothing.\n      } else {\n        if (\n          allocatablePresetNames.includes(\n            form.getFieldValue('allocationPreset'),\n          )\n        ) {\n          // if the current preset is available in the current resource group, do nothing.\n        } else if (enableResourcePresets && allocatablePresetNames[0]) {\n          const autoSelectedPreset = _.sortBy(allocatablePresetNames)[0];\n          form.setFieldsValue({\n            allocationPreset: autoSelectedPreset,\n          });\n          updateResourceFieldsBasedOnPreset(autoSelectedPreset);\n        } else {\n          // if the current preset is not available in the current resource group, set to custom\n          form.setFieldsValue({\n            allocationPreset: 'custom',\n          });\n        }\n      }\n      ensureValidAcceleratorType();\n      form\n        .validateFields(['resource'], {\n          recursive: true,\n        })\n        .catch(() => {});\n    } else {\n      ensureValidAcceleratorType();\n    }\n  }, [\n    currentAllocationPreset,\n    allocatablePresetNames,\n    resourceSlotsInRG,\n    form,\n    enableResourcePresets,\n    // below are functions wrapped by useEventNotStable\n    ensureValidAcceleratorType,\n    updateResourceFieldsBasedOnPreset,\n  ]);\n\n  // This effect is for auto updating the resource fields when minimum-required preset is selected\n  useEffect(() => {\n    if (currentAllocationPreset === 'minimum-required') {\n      updateResourceFieldsBasedOnImage(true);\n    }\n  }, [currentImage, currentAllocationPreset, updateResourceFieldsBasedOnImage]);\n\n  return (\n    <>\n      <Form.Item\n        name=\"resourceGroup\"\n        label={t('session.ResourceGroup')}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <ResourceGroupSelect projectName={currentProject.name} showSearch />\n      </Form.Item>\n\n      {enableResourcePresets ? (\n        <Form.Item\n          label={t('resourcePreset.ResourcePresets')}\n          name=\"allocationPreset\"\n          required\n          style={{ marginBottom: token.marginXS }}\n        >\n          <ResourcePresetSelect\n            showCustom={baiClient._config.allowCustomResourceAllocation}\n            showMinimumRequired={\n              baiClient._config.allowCustomResourceAllocation\n            }\n            onChange={(value, options) => {\n              switch (value) {\n                case 'custom':\n                  break;\n                case 'minimum-required':\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  // updating resource fields based on preset is handled in useEffect because it has another dependency(image).\n                  break;\n                default:\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnPreset(value);\n                  break;\n              }\n            }}\n            allocatablePresetNames={allocatablePresetNames}\n          />\n        </Form.Item>\n      ) : null}\n      <Card\n        style={{\n          marginBottom: token.margin,\n          display: baiClient._config.allowCustomResourceAllocation\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlotsInRG?.cpu && (\n                  <Form.Item\n                    name={['resource', 'cpu']}\n                    // initialValue={0}\n                    label={\n                      mergedResourceSlots?.cpu?.human_readable_name || 'CPU'\n                    }\n                    tooltip={{\n                      placement: 'right',\n                      title: <Trans i18nKey={'session.launcher.DescCPU'} />,\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        type: 'number',\n                        min: resourceLimits.cpu?.min,\n                        // TODO: set message\n                      },\n                      {\n                        type: 'number',\n                        max: resourceLimits.cpu?.max,\n                      },\n                      {\n                        warningOnly: true,\n                        validator: async (rule, value: number) => {\n                          if (\n                            _.isNumber(resourceLimits.cpu?.min) &&\n                            _.isNumber(resourceLimits.cpu?.max) &&\n                            isMinOversMaxValue(\n                              resourceLimits.cpu?.min,\n                              resourceLimits.cpu?.max,\n                            )\n                          ) {\n                            return Promise.reject(\n                              t(\n                                'session.launcher.InsufficientAllocationOfResourcesWarning',\n                              ),\n                            );\n                          }\n                          if (showRemainingWarning) {\n                            if (\n                              _.isNumber(remaining.cpu) &&\n                              value > remaining.cpu\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.EnqueueComputeSessionWarning',\n                                ),\n                              );\n                            }\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                    ]}\n                  >\n                    <InputNumberWithSlider\n                      inputNumberProps={{\n                        addonAfter:\n                          mergedResourceSlots?.cpu?.display_unit ||\n                          t('session.launcher.Core'),\n                      }}\n                      sliderProps={{\n                        marks: {\n                          // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                          ...(remaining.cpu\n                            ? {\n                                [remaining.cpu]: {\n                                  label: <RemainingMark />,\n                                },\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.min\n                            ? {\n                                [resourceLimits.cpu?.min]:\n                                  resourceLimits.cpu?.min,\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.max\n                            ? {\n                                [resourceLimits.cpu?.max]: {\n                                  style: {\n                                    color: token.colorTextSecondary,\n                                  },\n                                  label: resourceLimits.cpu?.max,\n                                },\n                              }\n                            : {}),\n                        },\n                      }}\n                      min={resourceLimits.cpu?.min}\n                      max={resourceLimits.cpu?.max}\n                      step={1}\n                      onChange={() => {\n                        form.setFieldValue('allocationPreset', 'custom');\n                      }}\n                    />\n                  </Form.Item>\n                )}\n                {resourceSlotsInRG?.mem && (\n                  <Form.Item\n                    label={t('session.launcher.Memory')}\n                    tooltip={{\n                      placement: 'right',\n                      props: {\n                        onClick: (e: any) => e.preventDefault(),\n                      },\n                      title: (\n                        <Flex\n                          direction=\"column\"\n                          onClick={(e) => e.preventDefault()}\n                        >\n                          <Trans i18nKey={'session.launcher.DescMemory'} />\n                          {/* <Divider\n                            style={{\n                              margin: 0,\n                              backgroundColor: token.colorBorderSecondary,\n                            }}\n                          />\n                         \n                          <Trans\n                            i18nKey={'session.launcher.DescSharedMemory'}\n                          /> */}\n                        </Flex>\n                      ),\n                    }}\n                    required\n                  >\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.resource.shmem !== next.resource.shmem\n                      }\n                    >\n                      {() => {\n                        return (\n                          <Form.Item\n                            name={['resource', 'mem']}\n                            noStyle\n                            rules={[\n                              {\n                                required: true,\n                              },\n                              {\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    _.isString(value) &&\n                                    resourceLimits.mem?.max &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.max,\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('general.MaxValueNotification', {\n                                        name: t('session.launcher.Memory'),\n                                        max:\n                                          _.toUpper(\n                                            resourceLimits.mem?.max || '0g',\n                                          ) + 'iB',\n                                      }),\n                                      // t('session.launcher.MinMemory', {\n                                      //   size: _.toUpper(\n                                      //     resourceLimits.mem?.min || '0g',\n                                      //   ),\n                                      // }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                // TODO: min of mem should be shmem + image's mem limit??\n                                validator: async (rule, value: string) => {\n                                  // const memMinPlusShmem =\n                                  //   addNumberWithUnits(\n                                  //     resourceLimits.mem?.min,\n                                  //     form.getFieldValue(['resource', 'shmem']),\n                                  //   ) || '0b';\n\n                                  if (\n                                    !_.isElement(value) &&\n                                    resourceLimits.mem?.min &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.min || '0g',\n                                    ) < 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('session.launcher.MinMemory', {\n                                        size: _.toUpper(\n                                          resourceLimits.mem?.min || '0g',\n                                        ),\n                                      }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                warningOnly: true,\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    compareNumberWithUnits(\n                                      resourceLimits.mem?.min as string,\n                                      resourceLimits.mem?.max as string,\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      t(\n                                        'session.launcher.InsufficientAllocationOfResourcesWarning',\n                                      ),\n                                    );\n                                  }\n                                  if (showRemainingWarning) {\n                                    if (\n                                      !_.isElement(value) &&\n                                      resourceLimits.mem &&\n                                      compareNumberWithUnits(\n                                        value,\n                                        remaining.mem + 'b',\n                                      ) > 0\n                                    ) {\n                                      return Promise.reject(\n                                        t(\n                                          'session.launcher.EnqueueComputeSessionWarning',\n                                        ),\n                                      );\n                                    }\n                                  }\n                                  return Promise.resolve();\n                                },\n                              },\n                            ]}\n                          >\n                            <DynamicUnitInputNumberWithSlider\n                              max={resourceLimits.mem?.max}\n                              // min=\"256m\"\n                              // min={'0g'}\n                              // min={addNumberWithUnits(\n                              //   resourceLimits.mem?.min,\n                              //   form.getFieldValue(['resource', 'shmem']) || '0g',\n                              // )}\n                              min={resourceLimits.mem?.min}\n                              // warn={\n                              //   checkPresetInfo?.scaling_group_remaining.mem ===\n                              //   undefined\n                              //     ? undefined\n                              //     : checkPresetInfo?.scaling_group_remaining.mem + 'g'\n                              // }\n                              addonBefore={'MEM'}\n                              extraMarks={{\n                                // ...(checkPresetInfo?.scaling_group_remaining.mem\n                                //   ? {\n                                //       // @ts-ignore\n                                //       [iSizeToSize(\n                                //         checkPresetInfo?.scaling_group_remaining\n                                //           .mem,\n                                //         'g',\n                                //         3,\n                                //       ).numberFixed]: {\n                                //         label: '-',\n                                //       },\n                                //     }\n                                //   : {}),\n                                // ...(form.getFieldValue(['resource', 'shmem'])\n                                //   ? {\n                                //       [iSizeToSize(\n                                //         form.getFieldValue([\n                                //           'resource',\n                                //           'shmem',\n                                //         ]),\n                                //         'g',\n                                //       )?.number || 0]: (\n                                //         <Flex\n                                //           style={{\n                                //             height: 8,\n                                //             width: 8,\n                                //             borderRadius: 4,\n                                //             backgroundColor: token.colorInfo,\n                                //             position: 'absolute',\n                                //             top: -10,\n                                //             transform: 'translateX(-50%)',\n                                //             opacity: 0.5,\n                                //             pointerEvents: 'none',\n                                //           }}\n                                //         ></Flex>\n                                //       ),\n                                //     }\n                                //   : undefined),\n                                ...(remaining.mem\n                                  ? {\n                                      //@ts-ignore\n                                      [convertBinarySizeUnit(\n                                        remaining.mem + 'b',\n                                        'g',\n                                        3,\n                                      )?.numberFixed]: {\n                                        label: <RemainingMark />,\n                                      },\n                                    }\n                                  : {}),\n                              }}\n                              onChange={(M_plus_S) => {\n                                if (\n                                  !M_plus_S ||\n                                  !form.getFieldValue('enabledAutomaticShmem')\n                                )\n                                  return;\n                                runShmemAutomationRule(M_plus_S);\n\n                                form.setFieldValue(\n                                  'allocationPreset',\n                                  'custom',\n                                );\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n\n                    <Flex direction=\"column\" gap={'xxs'} align=\"start\">\n                      <Flex direction=\"row\" gap={'xs'}>\n                        {t('session.launcher.EnableAutomaticMiniumShmem')}{' '}\n                        <Form.Item\n                          noStyle\n                          name={'enabledAutomaticShmem'}\n                          valuePropName=\"checked\"\n                        >\n                          <Switch\n                            size=\"small\"\n                            onChange={(checked) => {\n                              if (checked) {\n                                runShmemAutomationRule(\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                    '0g',\n                                );\n                              }\n                              form.setFieldValue('allocationPreset', 'custom');\n                            }}\n                          />\n                        </Form.Item>\n                      </Flex>\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prev, next) =>\n                          prev.resource.mem !== next.resource.mem ||\n                          prev.enabledAutomaticShmem !==\n                            next.enabledAutomaticShmem\n                        }\n                      >\n                        {() => {\n                          return (\n                            <Form.Item\n                              noStyle\n                              name={['resource', 'shmem']}\n                              // initialValue={'0g'}\n                              // label={t('session.launcher.SharedMemory')}\n                              hidden={form.getFieldValue(\n                                'enabledAutomaticShmem',\n                              )}\n                              tooltip={\n                                <Trans\n                                  i18nKey={'session.launcher.DescSharedMemory'}\n                                />\n                              }\n                              dependencies={[['resource', 'mem']]}\n                              rules={[\n                                {\n                                  required: true,\n                                },\n                                {},\n                                {\n                                  validator: async (rule, value: string) => {\n                                    if (\n                                      _.isEmpty(\n                                        getFieldValue('resource')?.mem,\n                                      ) ||\n                                      _.isEmpty(value) ||\n                                      compareNumberWithUnits(\n                                        getFieldValue('resource')?.mem,\n                                        value,\n                                      ) >= 0\n                                    ) {\n                                      return Promise.resolve();\n                                    } else {\n                                      throw t(\n                                        'resourcePreset.SHMEMShouldBeSmallerThanMemory',\n                                      );\n                                    }\n                                  },\n                                },\n                              ]}\n                            >\n                              <DynamicUnitInputNumberWithSlider\n                                // shmem max is mem max\n                                // min={resourceLimits.shmem?.min}\n                                min={resourceLimits.shmem?.min}\n                                // max={resourceLimits.mem?.max || '0g'}\n                                addonBefore={'SHM'}\n                                max={\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                  '0g'\n                                }\n                                hideSlider\n                                onChange={() => {\n                                  form.setFieldValue(\n                                    'allocationPreset',\n                                    'custom',\n                                  );\n                                }}\n                              />\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                )}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) => {\n                    return (\n                      prev.resource?.acceleratorType !==\n                        next.resource?.acceleratorType ||\n                      // ref: https://github.com/lablup/backend.ai-webui/issues/868\n                      // change gpu step to 1 when cluster_size > 1\n                      prev.cluster_size !== next.cluster_size\n                    );\n                  }}\n                >\n                  {({ getFieldValue }) => {\n                    const currentAcceleratorType = getFieldValue([\n                      'resource',\n                      'acceleratorType',\n                    ]);\n                    return (\n                      <Form.Item\n                        name={['resource', 'accelerator']}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        tooltip={{\n                          placement: 'right',\n                          title: (\n                            <Trans\n                              i18nKey={'session.launcher.DescAIAccelerator'}\n                            />\n                          ),\n                        }}\n                        rules={[\n                          {\n                            required:\n                              currentImageAcceleratorLimits &&\n                              currentImageAcceleratorLimits.length > 0,\n                          },\n                          {\n                            type: 'number',\n                            min:\n                              resourceLimits.accelerators[\n                                currentAcceleratorType\n                              ]?.min || 0,\n                            max: resourceLimits.accelerators[\n                              currentAcceleratorType\n                            ]?.max,\n                          },\n                          {\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.endsWith(currentAcceleratorType, 'shares') &&\n                                form.getFieldValue('cluster_size') >= 2 &&\n                                value % 1 !== 0\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.OnlyAllowsDiscreteNumberByClusterSize',\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                          {\n                            warningOnly: true,\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.isNumber(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.min,\n                                ) &&\n                                _.isNumber(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.max,\n                                ) &&\n                                isMinOversMaxValue(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.min,\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.max,\n                                )\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.InsufficientAllocationOfResourcesWarning',\n                                  ),\n                                );\n                              }\n                              if (showRemainingWarning) {\n                                if (\n                                  _.isNumber(\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ],\n                                  ) &&\n                                  value >\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]\n                                ) {\n                                  return Promise.reject(\n                                    t(\n                                      'session.launcher.EnqueueComputeSessionWarning',\n                                    ),\n                                  );\n                                }\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          sliderProps={{\n                            marks: {\n                              0: 0,\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.accelerators[currentAcceleratorType]\n                                ? {\n                                    [remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(\n                                resourceLimits.accelerators[\n                                  currentAcceleratorType\n                                ]?.max,\n                              )\n                                ? {\n                                    // @ts-ignore\n                                    [resourceLimits.accelerators[\n                                      currentAcceleratorType\n                                    ]?.max]:\n                                      resourceLimits.accelerators[\n                                        currentAcceleratorType\n                                      ]?.max,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${mergedResourceSlots?.[currentAcceleratorType]?.display_unit || ''}`;\n                              },\n                              open: isAcceleratorInputDisabled\n                                ? false\n                                : undefined,\n                            },\n                          }}\n                          disabled={isAcceleratorInputDisabled}\n                          min={0}\n                          max={\n                            resourceLimits.accelerators[currentAcceleratorType]\n                              ?.max\n                          }\n                          step={\n                            _.endsWith(currentAcceleratorType, 'shares') &&\n                            form.getFieldValue('cluster_size') < 2\n                              ? 0.1\n                              : 1\n                          }\n                          onChange={() => {\n                            form.setFieldValue('allocationPreset', 'custom');\n                          }}\n                          inputNumberProps={{\n                            addonAfter: (\n                              <Form.Item\n                                noStyle\n                                name={['resource', 'acceleratorType']}\n                                initialValue={_.keys(acceleratorSlots)[0]}\n                                hidden={isAcceleratorInputDisabled}\n                              >\n                                <BAISelect\n                                  autoSelectOption\n                                  tabIndex={-1}\n                                  // Do not delete disabled prop. It is necessary to prevent the user from changing the value.\n                                  suffixIcon={\n                                    _.size(acceleratorSlots) > 1\n                                      ? undefined\n                                      : null\n                                  }\n                                  popupMatchSelectWidth={false}\n                                  options={_.map(\n                                    acceleratorSlots,\n                                    (value, name) => {\n                                      return {\n                                        value: name,\n                                        label:\n                                          mergedResourceSlots?.[name]\n                                            ?.display_unit || 'UNIT',\n                                        disabled:\n                                          currentImageAcceleratorLimits &&\n                                          currentImageAcceleratorLimits.length >\n                                            0 &&\n                                          !_.find(\n                                            currentImageAcceleratorLimits,\n                                            (limit) => limit?.key === name,\n                                          ),\n                                      };\n                                    },\n                                  )}\n                                />\n                              </Form.Item>\n                            ),\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n      {enableNumOfSessions ? (\n        <Card\n          style={{\n            marginBottom: token.margin,\n          }}\n        >\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.cluster_size !== next.cluster_size\n            }\n          >\n            {() => {\n              return (\n                <Form.Item\n                  name={['num_of_sessions']}\n                  label={t('webui.menu.Sessions')}\n                  tooltip={<Trans i18nKey={'session.launcher.DescSession'} />}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                    },\n                    {\n                      warningOnly: true,\n                      validator: async (rule, value: number) => {\n                        if (showRemainingWarning) {\n                          if (\n                            sessionSliderLimitAndRemaining &&\n                            value > sessionSliderLimitAndRemaining.remaining\n                          ) {\n                            return Promise.reject(\n                              t(\n                                'session.launcher.EnqueueComputeSessionWarning',\n                              ),\n                            );\n                          }\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumberWithSlider\n                    inputNumberProps={{\n                      addonAfter: '#',\n                    }}\n                    disabled={form.getFieldValue('cluster_size') > 1}\n                    sliderProps={{\n                      marks: {\n                        [sessionSliderLimitAndRemaining?.min]:\n                          sessionSliderLimitAndRemaining?.min,\n                        // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                        ...(sessionSliderLimitAndRemaining?.remaining\n                          ? {\n                              [sessionSliderLimitAndRemaining?.remaining]: {\n                                label: <RemainingMark />,\n                              },\n                            }\n                          : {}),\n                        [sessionSliderLimitAndRemaining?.max]:\n                          sessionSliderLimitAndRemaining?.max,\n                      },\n                    }}\n                    min={sessionSliderLimitAndRemaining?.min}\n                    max={sessionSliderLimitAndRemaining?.max}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Form.Item>\n        </Card>\n      ) : null}\n      {/* TODO: Support cluster mode */}\n      {enableAgentSelect && (\n        <Form.Item\n          label={t('session.launcher.SelectAgent')}\n          required\n          tooltip={<Trans i18nKey={'session.launcher.DescSelectAgent'} />}\n        >\n          <Flex gap={'xs'}>\n            <Suspense>\n              <Form.Item required noStyle style={{ flex: 1 }} name=\"agent\">\n                <AgentSelect\n                  resourceGroup={currentResourceGroupInForm}\n                  fetchKey={agentFetchKey}\n                  onChange={(value, option) => {\n                    if (value !== 'auto') {\n                      form.setFieldsValue({\n                        cluster_mode: 'single-node',\n                        cluster_size: 1,\n                      });\n                    }\n                    // TODO: set cluster mode to single node and cluster size to 1 when agent value is not \"auto\"\n                  }}\n                ></AgentSelect>\n              </Form.Item>\n            </Suspense>\n            <Form.Item noStyle>\n              <Button\n                loading={isPendingAgentList}\n                onClick={() => {\n                  startAgentListTransition(() => updateAgentFetchKey());\n                }}\n                icon={<ReloadOutlined />}\n              ></Button>\n            </Form.Item>\n          </Flex>\n        </Form.Item>\n      )}\n      {baiClient.supports('multi-container') && (\n        // {false && (\n        <Form.Item\n          label={t('session.launcher.ClusterMode')}\n          tooltip={\n            <Flex direction=\"column\" align=\"start\">\n              {t('session.launcher.SingleNode')}\n              <Trans i18nKey={'session.launcher.DescSingleNode'} />\n              <Divider style={{ backgroundColor: token.colorBorder }} />\n              {t('session.launcher.MultiNode')}\n              <Trans i18nKey={'session.launcher.DescMultiNode'} />\n            </Flex>\n          }\n          required\n          dependencies={['agent']}\n        >\n          {({ getFieldValue }) => {\n            return (\n              <Card\n                style={{\n                  marginBottom: token.margin,\n                }}\n              >\n                <Row gutter={token.marginMD}>\n                  <Col xs={24}>\n                    {/* <Col xs={24} lg={12}> */}\n                    <Form.Item name={'cluster_mode'} required>\n                      <Radio.Group\n                        onChange={(e) => {\n                          form.validateFields().catch(() => {});\n                        }}\n                        disabled={getFieldValue('agent') !== 'auto'}\n                      >\n                        <Radio.Button value=\"single-node\">\n                          {t('session.launcher.SingleNode')}\n                        </Radio.Button>\n                        <Radio.Button value=\"multi-node\">\n                          {t('session.launcher.MultiNode')}\n                        </Radio.Button>\n                      </Radio.Group>\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24}>\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.cluster_mode !== next.cluster_mode\n                      }\n                    >\n                      {() => {\n                        const derivedClusterSizeMaxLimit = _.min([\n                          resourceLimits.cpu?.max,\n                          keypairResourcePolicy.max_containers_per_session,\n                        ]);\n                        const clusterUnit =\n                          form.getFieldValue('cluster_mode') === 'single-node'\n                            ? t('session.launcher.Container')\n                            : t('session.launcher.Node');\n                        return (\n                          <Form.Item\n                            name={'cluster_size'}\n                            label={t('session.launcher.ClusterSize')}\n                            required\n                            rules={[\n                              {\n                                warningOnly: true,\n                                validator: async (rule, value: number) => {\n                                  if (showRemainingWarning) {\n                                    const minCPU = _.min([\n                                      remaining.cpu,\n                                      keypairResourcePolicy.max_containers_per_session,\n                                    ]);\n                                    if (_.isNumber(minCPU) && value > minCPU) {\n                                      return Promise.reject(\n                                        t(\n                                          'session.launcher.EnqueueComputeSessionWarning',\n                                        ),\n                                      );\n                                    }\n                                  }\n                                  return Promise.resolve();\n                                },\n                              },\n                            ]}\n                          >\n                            <InputNumberWithSlider\n                              min={1}\n                              step={1}\n                              // TODO: max cluster size\n                              max={\n                                _.isNumber(derivedClusterSizeMaxLimit)\n                                  ? derivedClusterSizeMaxLimit\n                                  : undefined\n                              }\n                              disabled={\n                                derivedClusterSizeMaxLimit === 1 ||\n                                getFieldValue('agent') !== 'auto'\n                              }\n                              sliderProps={{\n                                marks: {\n                                  1: '1',\n                                  // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                                  ...(remaining.cpu\n                                    ? {\n                                        [remaining.cpu]: {\n                                          label: <RemainingMark />,\n                                        },\n                                      }\n                                    : {}),\n                                  ...(_.isNumber(derivedClusterSizeMaxLimit)\n                                    ? {\n                                        [derivedClusterSizeMaxLimit]:\n                                          derivedClusterSizeMaxLimit,\n                                      }\n                                    : {}),\n                                },\n                                tooltip: {\n                                  formatter: (value = 0) => {\n                                    return `${value} ${clusterUnit}`;\n                                  },\n                                },\n                              }}\n                              inputNumberProps={{\n                                addonAfter: clusterUnit,\n                              }}\n                              onChange={(value) => {\n                                if (value > 1) {\n                                  form.setFieldValue('num_of_sessions', 1);\n                                }\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            );\n          }}\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nconst RemainingMark: React.FC<{ title?: string }> = () => {\n  const { token } = theme.useToken();\n  return (\n    <Flex\n      style={{\n        position: 'absolute',\n        top: -24,\n        transform: 'translateX(-50%)',\n        color: token.colorSuccess,\n        opacity: 0.5,\n      }}\n    >\n      <CaretDownOutlined />\n    </Flex>\n  );\n};\n\nconst MemoizedResourceAllocationFormItems = React.memo(\n  ResourceAllocationFormItems,\n);\n\nexport default MemoizedResourceAllocationFormItems;\n\nexport const getAllocatablePresetNames = (\n  presets: Array<ResourcePreset> | undefined,\n  resourceLimits: MergedResourceLimits,\n  currentImage: Image,\n) => {\n  const currentImageAcceleratorLimits = _.filter(\n    currentImage?.resource_limits,\n    (limit) =>\n      limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n  );\n\n  const bySliderLimit = _.filter(presets, (preset) => {\n    // After allow pending session, we don't need to check allocatable field.\n    // if (_.has(preset, 'allocatable')) {\n    //   return !!preset.allocatable;\n    // }\n\n    // Check if all resource slots in the preset are less than or equal to resourceLimits\n    // Be careful with the type of values in resourceLimits, they are string or number\n    return _.every(preset.resource_slots, (value, key) => {\n      if (key === 'mem') {\n        // if mem resource limit is not defined, it is UNLIMITED\n        const isNoLimit = typeof resourceLimits[key]?.max !== 'string';\n        return isNoLimit\n          ? true\n          : typeof preset.resource_slots[key] === 'string' &&\n              typeof resourceLimits[key]?.max === 'string' &&\n              compareNumberWithUnits(\n                preset.resource_slots[key],\n                resourceLimits[key]?.max,\n              ) <= 0;\n      } else if (key === 'shmem') {\n        // no need to check shmem\n        return true;\n      } else if (key === 'cpu') {\n        // if cpu resource limit is not defined, it is UNLIMITED\n        const isNoLimit = _.isNaN(_.toNumber(resourceLimits[key]?.max));\n        return isNoLimit\n          ? true\n          : (_.toNumber(preset.resource_slots[key]) || 0) <=\n              _.toNumber(resourceLimits[key]?.max);\n      } else {\n        // if accelerator resource limit is not defined, it is UNLIMITED\n        const isNoLimit = _.isNaN(\n          _.toNumber(resourceLimits.accelerators[key]?.max),\n        );\n        return isNoLimit\n          ? true\n          : (_.toNumber(preset.resource_slots[key]) || 0) <=\n              _.toNumber(resourceLimits.accelerators[key]?.max);\n      }\n    });\n  }).map((preset) => preset.name);\n\n  const byImageAcceleratorLimits = _.filter(presets, (preset) => {\n    const acceleratorResourceOfPreset = _.omitBy(\n      preset.resource_slots,\n      (value, key) => {\n        if (['mem', 'cpu', 'shmem'].includes(key)) return true;\n      },\n    );\n    if (currentImageAcceleratorLimits.length === 0) {\n      // When current image doesn't require any accelerator,\n      // It's available if the preset doesn't have any accelerator\n      if (_.isEmpty(acceleratorResourceOfPreset)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      // When current image requires some accelerator,\n      // It's available if the preset has a required accelerator value that is larger than the current image's minimum value\n      return (\n        currentImageAcceleratorLimits &&\n        _.some(currentImageAcceleratorLimits, (limit) => {\n          return (\n            limit?.key &&\n            acceleratorResourceOfPreset[limit?.key] &&\n            _.toNumber(acceleratorResourceOfPreset[limit?.key]) >=\n              _.toNumber(limit?.min)\n          );\n        })\n      );\n    }\n  }).map((preset) => preset.name);\n  return currentImageAcceleratorLimits.length === 0\n    ? bySliderLimit\n    : _.intersection(bySliderLimit, byImageAcceleratorLimits);\n};\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport TextHighlighter from './TextHighlighter';\nimport { Select, SelectProps } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\n\ninterface ResourceGroupSelectProps extends SelectProps {\n  projectName: string;\n  autoSelectDefault?: boolean;\n  filter?: (projectName: string) => boolean;\n}\n\nconst ResourceGroupSelect: React.FC<ResourceGroupSelectProps> = ({\n  projectName,\n  autoSelectDefault,\n  filter,\n  searchValue,\n  onSearch,\n  loading,\n  ...selectProps\n}) => {\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const [fetchKey] = useUpdatableState('first');\n  const [controllableSearchValue, setControllableSearchValue] =\n    useControllableState<string>({\n      value: searchValue,\n      onChange: onSearch,\n    });\n\n  const [controllableValue, setControllableValueDoNotUseWithoutTransition] =\n    useControllableState(selectProps);\n  const [isPendingChangeTransition, startChangeTransition] = useTransition();\n\n  const [optimisticValue, setOptimisticValue] = useState();\n  const setControllableValueWithTransition = React.useCallback(\n    (v: typeof controllableValue, ...args: any[]) => {\n      setOptimisticValue(v);\n      startChangeTransition(() => {\n        setControllableValueDoNotUseWithoutTransition(v, ...args);\n      });\n    },\n    [startChangeTransition, setControllableValueDoNotUseWithoutTransition],\n  );\n\n  const { data: resourceGroupSelectQueryResult } = useSuspenseTanQuery<\n    [\n      {\n        scaling_groups: {\n          name: string;\n        }[];\n      },\n      {\n        allowed: string[];\n        default: string;\n        volume_info: {\n          [key: string]: {\n            backend: string;\n            capabilities: string[];\n            usage: {\n              percentage: number;\n            };\n            sftp_scaling_groups?: string[];\n          };\n        };\n      },\n    ]\n  >({\n    queryKey: ['ResourceGroupSelectQuery', projectName],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      search.set('group', projectName);\n      return Promise.all([\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/scaling-groups?${search.toString()}`,\n        }),\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/folders/_/hosts`,\n        }),\n      ]);\n    },\n    staleTime: 0,\n    fetchKey: fetchKey,\n  });\n\n  const sftpResourceGroups = _.flatMap(\n    resourceGroupSelectQueryResult?.[1].volume_info,\n    (item) => item?.sftp_scaling_groups ?? [],\n  );\n\n  const resourceGroups = _.filter(\n    resourceGroupSelectQueryResult?.[0].scaling_groups,\n    (item) => {\n      if (_.includes(sftpResourceGroups, item.name)) {\n        return false;\n      }\n      if (filter) {\n        return filter(item.name);\n      }\n      return true;\n    },\n  );\n\n  // If the current selected value is not in the resourceGroups, reset the value to undefined\n  useEffect(() => {\n    if (\n      controllableValue &&\n      !_.some(resourceGroups, (item) => item.name === controllableValue)\n    ) {\n      setControllableValueWithTransition(undefined);\n    }\n  }, [resourceGroups, controllableValue, setControllableValueWithTransition]);\n\n  // Auto select is only executed once\n  const autoSelectedResourceGroup =\n    _.find(resourceGroups, (item) => item.name === 'default') ||\n    resourceGroups[0];\n  const autoSelectedOption = autoSelectedResourceGroup\n    ? {\n        label: autoSelectedResourceGroup.name,\n        value: autoSelectedResourceGroup.name,\n      }\n    : undefined;\n\n  useEffect(() => {\n    if (\n      autoSelectDefault &&\n      autoSelectedOption &&\n      autoSelectedOption.value !== selectProps.value\n    ) {\n      setControllableValueWithTransition(\n        autoSelectedOption.value,\n        autoSelectedOption,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoSelectDefault]);\n\n  const searchProps: Pick<\n    SelectProps,\n    'onSearch' | 'searchValue' | 'showSearch'\n  > = selectProps.showSearch\n    ? {\n        onSearch: setControllableSearchValue,\n        searchValue: controllableSearchValue,\n        showSearch: true,\n      }\n    : {};\n\n  return (\n    <Select\n      defaultActiveFirstOption\n      {...searchProps}\n      defaultValue={autoSelectDefault ? autoSelectedOption : undefined}\n      loading={loading || isPendingChangeTransition}\n      disabled={isPendingChangeTransition}\n      options={_.map(resourceGroups, (resourceGroup) => {\n        return { value: resourceGroup.name, label: resourceGroup.name };\n      })}\n      optionRender={(option) => {\n        return (\n          <TextHighlighter keyword={controllableSearchValue}>\n            {option.data.value?.toString()}\n          </TextHighlighter>\n        );\n      }}\n      {...selectProps}\n      value={isPendingChangeTransition ? optimisticValue : controllableValue}\n      onChange={setControllableValueWithTransition}\n    />\n  );\n};\n\nexport default ResourceGroupSelect;\n","import { convertBinarySizeUnit } from '../helper';\nimport {\n  BaseResourceSlotName,\n  KnownAcceleratorResourceSlotName,\n  ResourceSlotName,\n  useResourceSlotsDetails,\n} from '../hooks/backendai';\nimport { useCurrentResourceGroupValue } from '../hooks/useCurrentProject';\nimport Flex from './Flex';\nimport { Tooltip, Typography, theme } from 'antd';\nimport _ from 'lodash';\nimport { MicrochipIcon } from 'lucide-react';\nimport React, { ReactElement } from 'react';\n\nexport type ResourceOpts = {\n  shmem?: number;\n};\ninterface ResourceNumberProps {\n  type: ResourceSlotName | string;\n  extra?: ReactElement;\n  opts?: ResourceOpts;\n  value: string;\n  hideTooltip?: boolean;\n  max?: string;\n}\n\ntype ResourceTypeInfo<V> = {\n  [key in KnownAcceleratorResourceSlotName]: V;\n} & {\n  [key in BaseResourceSlotName]: V;\n};\nconst ResourceNumber: React.FC<ResourceNumberProps> = ({\n  type,\n  value: amount,\n  extra,\n  opts,\n  hideTooltip = false,\n  max,\n}) => {\n  const { token } = theme.useToken();\n  const currentGroup = useCurrentResourceGroupValue();\n  const { mergedResourceSlots } = useResourceSlotsDetails(\n    currentGroup || undefined,\n  );\n\n  const formatAmount = (amount: string) => {\n    return mergedResourceSlots?.[type]?.number_format.binary\n      ? Number(\n          convertBinarySizeUnit(amount, 'g', 3, true)?.numberFixed,\n        ).toString()\n      : (mergedResourceSlots?.[type]?.number_format.round_length || 0) > 0\n        ? parseFloat(amount).toFixed(2)\n        : amount;\n  };\n\n  return (\n    <Flex direction=\"row\" gap=\"xxs\">\n      {mergedResourceSlots?.[type] ? (\n        <ResourceTypeIcon type={type} showTooltip={!hideTooltip} />\n      ) : (\n        type\n      )}\n\n      <Typography.Text>\n        {formatAmount(amount)}\n        {_.isUndefined(max)\n          ? null\n          : max === 'Infinity'\n            ? '~∞'\n            : `~${formatAmount(max)}`}\n      </Typography.Text>\n      <Typography.Text type=\"secondary\">\n        {mergedResourceSlots?.[type]?.display_unit || ''}\n      </Typography.Text>\n      {type === 'mem' && opts?.shmem && opts?.shmem > 0 ? (\n        <Typography.Text\n          type=\"secondary\"\n          style={{ fontSize: token.fontSizeSM }}\n        >\n          (SHM:{' '}\n          {convertBinarySizeUnit(opts.shmem + 'b', 'g', 2, true)?.numberFixed}\n          GiB)\n        </Typography.Text>\n      ) : null}\n      {extra}\n    </Flex>\n  );\n};\n\nconst MWCIconWrap: React.FC<{ size?: number; children: string }> = ({\n  size = 16,\n  children,\n}) => {\n  return (\n    // @ts-ignore\n    <mwc-icon\n      style={{\n        '--mdc-icon-size': `${size + 2}px`,\n        width: size,\n        height: size,\n      }}\n    >\n      {children}\n      {/* @ts-ignore */}\n    </mwc-icon>\n  );\n};\ninterface AccTypeIconProps\n  extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'src'> {\n  type: ResourceSlotName | string;\n  showIcon?: boolean;\n  showUnit?: boolean;\n  showTooltip?: boolean;\n  size?: number;\n}\nexport const ResourceTypeIcon: React.FC<AccTypeIconProps> = ({\n  type,\n  size = 16,\n  showIcon = true,\n  showUnit = true,\n  showTooltip = true,\n  ...props\n}) => {\n  const resourceTypeIconSrcMap: ResourceTypeInfo<ReactElement | string> = {\n    cpu: <MWCIconWrap size={size}>developer_board</MWCIconWrap>,\n    mem: <MWCIconWrap size={size}>memory</MWCIconWrap>,\n    'cuda.device': '/resources/icons/file_type_cuda.svg',\n    'cuda.shares': '/resources/icons/file_type_cuda.svg',\n    'rocm.device': '/resources/icons/rocm.svg',\n    'tpu.device': <MWCIconWrap size={size}>view_module</MWCIconWrap>,\n    'ipu.device': <MWCIconWrap size={size}>view_module</MWCIconWrap>,\n    'atom.device': '/resources/icons/rebel.svg',\n    'atom-plus.device': '/resources/icons/rebel.svg',\n    'gaudi2.device': '/resources/icons/gaudi.svg',\n    'warboy.device': '/resources/icons/furiosa.svg',\n    'rngd.device': '/resources/icons/furiosa.svg',\n    'hyperaccel-lpu.device': '/resources/icons/npu_generic.svg',\n  };\n\n  const targetIcon = resourceTypeIconSrcMap[\n    type as KnownAcceleratorResourceSlotName\n  ] ?? <MicrochipIcon />;\n\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n\n  const content =\n    typeof targetIcon === 'string' ? (\n      <img\n        {...props}\n        style={{\n          height: size,\n          alignSelf: 'center',\n          ...(props.style || {}),\n        }}\n        // @ts-ignore\n        src={resourceTypeIconSrcMap[type] || ''}\n        alt={type}\n      />\n    ) : (\n      <Flex style={{ width: 16, height: 16 }}>{targetIcon || type}</Flex>\n    );\n\n  return showTooltip ? (\n    <Tooltip title={mergedResourceSlots[type]?.description || type}>\n      {content}\n    </Tooltip>\n  ) : (\n    <Flex style={{ pointerEvents: 'none' }}>{content}</Flex>\n  );\n};\n\nexport default React.memo(ResourceNumber);\n","import DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport { VFolderPermissionTag_VFolder$key } from './__generated__/VFolderPermissionTag_VFolder.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useKeyPairLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport BAILink from './BAILink';\nimport { useShadowRoot } from './DefaultProviders';\nimport Flex from './Flex';\nimport FolderCreateModal from './FolderCreateModal';\nimport { useFolderExplorerOpener } from './FolderExplorerOpener';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport { VFolderTableProjectQuery } from './__generated__/VFolderTableProjectQuery.graphql';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Descriptions,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { PlusIcon } from 'lucide-react';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  useTransition,\n} from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\nexport interface VFolderTableProps extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n  onChangeAutoMountedFolders?: (names: Array<string>) => void;\n  showAutoMountedFoldersSection?: boolean;\n}\n\nexport const vFolderAliasNameRegExp = /^[a-zA-Z0-9_/.-]*$/;\nexport const DEFAULT_ALIAS_BASE_PATH = '/home/work/';\nconst VFolderTable: React.FC<VFolderTableProps> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = DEFAULT_ALIAS_BASE_PATH,\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  onChangeAutoMountedFolders,\n  showAutoMountedFoldersSection,\n  ...tableProps\n}) => {\n  const { generateFolderPath } = useFolderExplorerOpener();\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [isOpenCreateModal, setIsOpenCreateModal] = useState(false);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableState<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableState<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useSuspenseTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey, currentProject.id],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      search.set('group_id', currentProject.id);\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?${search.toString()}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 1000,\n  });\n\n  const { domain, group, keypair_resource_policy } =\n    useLazyLoadQuery<VFolderTableProjectQuery>(\n      graphql`\n        query VFolderTableProjectQuery(\n          $domain_name: String!\n          $group_id: UUID!\n          $keypair_resource_policy_name: String!\n        ) {\n          domain(name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          group(id: $group_id, domain_name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          keypair_resource_policy(name: $keypair_resource_policy_name) {\n            allowed_vfolder_hosts\n          }\n        }\n      `,\n      {\n        domain_name: baiClient._config.domainName,\n        group_id: currentProject.id,\n        keypair_resource_policy_name: keypair?.resource_policy || '',\n      },\n      {\n        fetchPolicy: 'store-and-network',\n        fetchKey: fetchKey,\n      },\n    );\n\n  const filteredFolderListByPermission = useMemo(() => {\n    const allowedVFolderHostsByDomain = JSON.parse(\n      domain?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByGroup = JSON.parse(\n      group?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByKeypairResourcePolicy = JSON.parse(\n      keypair_resource_policy?.allowed_vfolder_hosts || '{}',\n    );\n\n    const mergedVFolderPermissions = _.merge(\n      {}, // start with empty object\n      allowedVFolderHostsByDomain,\n      allowedVFolderHostsByGroup,\n      allowedVFolderHostsByKeypairResourcePolicy,\n    );\n    // only allow mount if volume permission has 'mount-in-session'\n    const mountAllowedVolumes = Object.keys(mergedVFolderPermissions).filter(\n      (volume) => mergedVFolderPermissions[volume].includes('mount-in-session'),\n    );\n    // Need to filter allFolderList from allowed vfolder\n    return allFolderList?.filter((folder) =>\n      mountAllowedVolumes.includes(folder.host),\n    );\n  }, [domain, group, keypair_resource_policy, allFolderList]);\n\n  const autoMountedFolderNamesByPermission = useMemo(\n    () =>\n      _.chain(filteredFolderListByPermission)\n        .filter((vf) => vf.status === 'ready' && vf.name?.startsWith('.'))\n        .map((vf) => vf.name)\n        .value(),\n    [filteredFolderListByPermission],\n  );\n\n  useEffect(() => {\n    _.isFunction(onChangeAutoMountedFolders) &&\n      onChangeAutoMountedFolders(autoMountedFolderNamesByPermission);\n    // Do not need to run when `autoMountedFolderNames` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoMountedFolderNamesByPermission]);\n\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.chain(filteredFolderListByPermission)\n    .filter((vf) => (filter ? filter(vf) : true))\n    .filter((vf) => {\n      if (selectedRowKeys.includes(getRowKey(vf))) {\n        return true;\n      }\n      return !searchKey || vf.name.includes(searchKey);\n    })\n    .value();\n\n  /**\n   * Converts the input path to an aliased path based on the provided name and input.\n   * If the input is empty, it appends the name to the alias base path.\n   * If the input starts with '/', it returns the input as is.\n   * Otherwise, it appends the input to the alias base path.\n   *\n   * @param name - The name of the VFolderKey.\n   * @param input - The input path to be converted.\n   * @returns The aliased path based on the name and input.\n   */\n  const inputToAliasPath = useCallback(\n    (name: VFolderKey, input?: string) => {\n      if (input === undefined || input === '') {\n        return `${aliasBasePath}${name}`;\n      } else if (input.startsWith('/')) {\n        return input;\n      } else {\n        return `${aliasBasePath}${input}`;\n      }\n    },\n    [aliasBasePath],\n  );\n\n  const handleAliasUpdate = useEventNotStable(() => {\n    setAliasMap(\n      _.mapValues(\n        _.pickBy(internalForm.getFieldsValue({ strict: false }), (v) => !!v), //remove empty\n        (v, k) => inputToAliasPath(k, v), // add alias base path\n      ),\n    );\n    internalForm.validateFields().catch(() => {});\n  });\n\n  useEffect(() => {\n    handleAliasUpdate();\n    // `selectedRowKeys` can be changed by parents at any time, so we need to check whether `selectedRowKeys` has changed using JSON.stringify\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(selectedRowKeys), handleAliasUpdate]);\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"start\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : {\n                    maxWidth: 200,\n                  }\n            }\n          >\n            <BAILink type=\"hover\" to={generateFolderPath(record.id)}>\n              <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            </BAILink>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || inputToAliasPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: vFolderAliasNameRegExp,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    inputToAliasPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            const aliasPath = inputToAliasPath(\n                              getRowKey(record),\n                              value,\n                            );\n                            if (\n                              value &&\n                              _.map(\n                                autoMountedFolderNamesByPermission,\n                                // `n` is the name of the auto mounted folder. It cannot be empty.\n                                (n) => inputToAliasPath('', n),\n                              ).includes(aliasPath)\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.FolderAliasOverlappingToAutoMount',\n                                ),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={inputToAliasPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        allowClear\n                        onChange={() => {\n                          handleAliasUpdate();\n                        }}\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n      defaultSortOrder: 'descend',\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingRefetch}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startRefetchTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n        <Tooltip title={t('data.CreateANewStorageFolder')}>\n          <Button\n            icon={<PlusIcon />}\n            type=\"primary\"\n            ghost\n            onClick={() => {\n              setIsOpenCreateModal(true);\n            }}\n          />\n        </Tooltip>\n      </Flex>\n      <Form form={internalForm} component={false} preserve={false}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          sortDirections={['ascend', 'descend']}\n          {...tableProps}\n        />\n      </Form>\n      {showAutoMountedFoldersSection &&\n      autoMountedFolderNamesByPermission.length > 0 ? (\n        <>\n          <Descriptions size=\"small\">\n            <Descriptions.Item label={t('data.AutomountFolders')}>\n              {_.map(autoMountedFolderNamesByPermission, (name) => {\n                return <Tag key={name}>{name}</Tag>;\n              })}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ) : null}\n      <FolderCreateModal\n        open={isOpenCreateModal}\n        onRequestClose={(result) => {\n          setIsOpenCreateModal(false);\n          if (result) {\n            startRefetchTransition(() => {\n              updateFetchKey();\n              setSelectedRowKeys((x) => [\n                ...x,\n                // @ts-ignore\n                result[rowKey],\n              ]);\n            });\n          }\n        }}\n      />\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import { VFolder } from './VFolderSelect';\nimport VFolderTable, {\n  AliasMap,\n  DEFAULT_ALIAS_BASE_PATH,\n  VFolderTableProps,\n  vFolderAliasNameRegExp,\n} from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFormItemProps extends Omit<FormItemProps, 'name'> {\n  filter?: VFolderTableProps['filter'];\n  rowKey?: keyof VFolder;\n  tableProps?: Partial<VFolderTableProps>;\n}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n  autoMountedFolderNames?: string[];\n}\n\nconst VFolderTableFormItem: React.FC<VFolderTableFormItemProps> = ({\n  filter,\n  rowKey = 'name',\n  tableProps,\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              if (_.some(arr, (alias) => !vFolderAliasNameRegExp.test(alias))) {\n                return Promise.reject(t('session.launcher.FolderAliasInvalid'));\n              }\n\n              if (\n                _.some(\n                  form.getFieldValue('autoMountedFolderNames'),\n                  (autoName) =>\n                    arr.includes(DEFAULT_ALIAS_BASE_PATH + autoName),\n                )\n              ) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlappingToAutoMount'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item hidden name=\"autoMountedFolderNames\" />\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey={rowKey}\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n          filter={filter}\n          showAutoMountedFoldersSection\n          onChangeAutoMountedFolders={(names) => {\n            form.setFieldValue('autoMountedFolderNames', names);\n          }}\n          {...tableProps}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFormItem;\n","/**\n * @generated SignedSource<<fb92e3350cf8934880a2a423652d33ed>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type AgentSelectQuery$variables = {\n  filter?: string | null | undefined;\n  limit: number;\n  offset: number;\n  scaling_group?: string | null | undefined;\n  status?: string | null | undefined;\n};\nexport type AgentSelectQuery$data = {\n  readonly agent_summary_list: {\n    readonly items: ReadonlyArray<{\n      readonly architecture: string | null | undefined;\n      readonly available_slots: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly occupied_slots: string | null | undefined;\n      readonly schedulable: boolean | null | undefined;\n      readonly status: string | null | undefined;\n    } | null | undefined>;\n    readonly total_count: number;\n  } | null | undefined;\n};\nexport type AgentSelectQuery = {\n  response: AgentSelectQuery$data;\n  variables: AgentSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"scaling_group\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv5 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"filter\",\n        \"variableName\": \"filter\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"limit\",\n        \"variableName\": \"limit\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"offset\",\n        \"variableName\": \"offset\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"scaling_group\",\n        \"variableName\": \"scaling_group\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"status\",\n        \"variableName\": \"status\"\n      }\n    ],\n    \"concreteType\": \"AgentSummaryList\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"agent_summary_list\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"AgentSummary\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"items\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"status\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"schedulable\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"available_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"occupied_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"architecture\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"total_count\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentSelectQuery\",\n    \"selections\": (v5/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v4/*: any*/),\n      (v0/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"AgentSelectQuery\",\n    \"selections\": (v5/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"57b0881c2a4e4ba1bdeceb88d9ec41bd\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AgentSelectQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $status: String\\n  $filter: String\\n  $scaling_group: String\\n) {\\n  agent_summary_list(limit: $limit, offset: $offset, status: $status, filter: $filter, scaling_group: $scaling_group) {\\n    items {\\n      id\\n      status\\n      schedulable\\n      available_slots\\n      occupied_slots\\n      architecture\\n    }\\n    total_count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"a3558359a8ee951a4caa89c783133e85\";\n\nexport default node;\n","/**\n * @generated SignedSource<<069eed3537c1f9d3b16b394a33ab2743>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ImageEnvironmentSelectFormItemsQuery$variables = {\n  installed?: boolean | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery$data = {\n  readonly images: ReadonlyArray<{\n    readonly architecture: string | null | undefined;\n    readonly base_image_name: string | null | undefined;\n    readonly digest: string | null | undefined;\n    readonly humanized_name: string | null | undefined;\n    readonly id: string | null | undefined;\n    readonly installed: boolean | null | undefined;\n    readonly labels: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly name: string | null | undefined;\n    readonly namespace: string | null | undefined;\n    readonly registry: string | null | undefined;\n    readonly resource_limits: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly max: string | null | undefined;\n      readonly min: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly tag: string | null | undefined;\n    readonly tags: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly version: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery = {\n  response: ImageEnvironmentSelectFormItemsQuery$data;\n  variables: ImageEnvironmentSelectFormItemsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"installed\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"key\",\n  \"storageKey\": null\n},\nv2 = [\n  (v1/*: any*/),\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"value\",\n    \"storageKey\": null\n  }\n],\nv3 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"is_installed\",\n        \"variableName\": \"installed\"\n      }\n    ],\n    \"concreteType\": \"Image\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"images\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"humanized_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"tag\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"registry\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"architecture\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"digest\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"installed\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ResourceLimit\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"resource_limits\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"min\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"max\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"labels\",\n        \"plural\": true,\n        \"selections\": (v2/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"namespace\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"base_image_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"tags\",\n        \"plural\": true,\n        \"selections\": (v2/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"version\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v3/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v3/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"9ff1339a66b7da77df70de956e3c7dd8\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageEnvironmentSelectFormItemsQuery(\\n  $installed: Boolean\\n) {\\n  images(is_installed: $installed) {\\n    id\\n    name @deprecatedSince(version: \\\"24.12.0\\\")\\n    humanized_name\\n    tag\\n    registry\\n    architecture\\n    digest\\n    installed\\n    resource_limits {\\n      key\\n      min\\n      max\\n    }\\n    labels {\\n      key\\n      value\\n    }\\n    namespace @since(version: \\\"24.12.0\\\")\\n    base_image_name @since(version: \\\"24.12.0\\\")\\n    tags @since(version: \\\"24.12.0\\\") {\\n      key\\n      value\\n    }\\n    version @since(version: \\\"24.12.0\\\")\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"40b2d995106300fffb0c3a5d66103d38\";\n\nexport default node;\n","/**\n * @generated SignedSource<<d57c0906be259f6cb8e6f9de84e5a76e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = Record<PropertyKey, never>;\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null | undefined;\n    readonly resource_slots: string | null | undefined;\n    readonly shared_memory: any | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","/**\n * @generated SignedSource<<aed62292557ed2085f1400aef2426716>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null | undefined;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","/**\n * @generated SignedSource<<e248ecb3a254452b53cfc67d5cc53bec>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type VFolderTableProjectQuery$variables = {\n  domain_name: string;\n  group_id: string;\n  keypair_resource_policy_name: string;\n};\nexport type VFolderTableProjectQuery$data = {\n  readonly domain: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n  readonly group: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n  readonly keypair_resource_policy: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n};\nexport type VFolderTableProjectQuery = {\n  response: VFolderTableProjectQuery$data;\n  variables: VFolderTableProjectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"domain_name\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"group_id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"keypair_resource_policy_name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"allowed_vfolder_hosts\",\n    \"storageKey\": null\n  }\n],\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"domain_name\"\n      }\n    ],\n    \"concreteType\": \"Domain\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"domain\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"domain_name\",\n        \"variableName\": \"domain_name\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"group_id\"\n      }\n    ],\n    \"concreteType\": \"Group\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"group\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"keypair_resource_policy_name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"2c2ce905afd89e93c6d761f22ed59f3d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"VFolderTableProjectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query VFolderTableProjectQuery(\\n  $domain_name: String!\\n  $group_id: UUID!\\n  $keypair_resource_policy_name: String!\\n) {\\n  domain(name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  group(id: $group_id, domain_name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  keypair_resource_policy(name: $keypair_resource_policy_name) {\\n    allowed_vfolder_hosts\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ccdbaa52a63c2ea005423e7c541eff80\";\n\nexport default node;\n","export const UNLIMITED_MAX_CONTAINERS_PER_SESSIONS = 1000000;\nexport const UNLIMITED_MAX_CONCURRENT_SESSIONS = 1000000;\nexport const SIGNED_32BIT_MAX_INT = 2147483647;\nexport const SIGNED_32BIT_MIN_INT = -2147483648;\n","/**\n * @generated SignedSource<<738d3da4b0ca50f89164ba3ccebe320e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairQuery$variables = {\n  accessKey: string;\n};\nexport type hooksUsingRelay_KeyPairQuery$data = {\n  readonly keypair: {\n    readonly concurrency_used: number | null | undefined;\n    readonly id: string | null | undefined;\n    readonly resource_policy: string | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairQuery = {\n  response: hooksUsingRelay_KeyPairQuery$data;\n  variables: hooksUsingRelay_KeyPairQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"accessKey\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"access_key\",\n        \"variableName\": \"accessKey\"\n      }\n    ],\n    \"concreteType\": \"KeyPair\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_policy\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"concurrency_used\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1f8fc324e9907111de581f5cd2dc3640\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairQuery(\\n  $accessKey: String!\\n) {\\n  keypair(access_key: $accessKey) {\\n    id\\n    resource_policy\\n    concurrency_used\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8f5c91f0fc46a3366f57566ab688d81\";\n\nexport default node;\n","/**\n * @generated SignedSource<<77cdd03490e0b80daf3cd368360b2198>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$variables = {\n  name: string;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$data = {\n  readonly keypair_resource_policy: {\n    readonly max_concurrent_sessions: number | null | undefined;\n    readonly max_containers_per_session: number | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery = {\n  response: hooksUsingRelay_KeyPairResourcePolicyQuery$data;\n  variables: hooksUsingRelay_KeyPairResourcePolicyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_containers_per_session\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_concurrent_sessions\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ad7039c1935637fe3f3841f0ea8bf347\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairResourcePolicyQuery(\\n  $name: String!\\n) {\\n  keypair_resource_policy(name: $name) {\\n    max_containers_per_session\\n    max_concurrent_sessions\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f3f7364c63aefe9b03111b584c48c103\";\n\nexport default node;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { UNLIMITED_MAX_CONCURRENT_SESSIONS } from '../helper/const-vars';\nimport { hooksUsingRelay_KeyPairQuery } from './__generated__/hooksUsingRelay_KeyPairQuery.graphql';\nimport { hooksUsingRelay_KeyPairResourcePolicyQuery } from './__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useCallback } from 'react';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ninterface FetchOptions {\n  fetchKey?: string | number;\n  fetchPolicy?: FetchPolicy;\n}\nexport const useKeyPairLazyLoadQuery = (\n  accessKey: string,\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { keypair } = useLazyLoadQuery<hooksUsingRelay_KeyPairQuery>(\n    graphql`\n      query hooksUsingRelay_KeyPairQuery($accessKey: String!) {\n        keypair(access_key: $accessKey) {\n          id\n          resource_policy\n          concurrency_used\n        }\n      }\n    `,\n    {\n      accessKey: accessKey,\n    },\n    {\n      ...options,\n      fetchKey: fetchKey + options.fetchKey,\n    },\n  );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [keypair, { refresh }] as const;\n};\n\nexport const useCurrentKeyPairResourcePolicyLazyLoadQuery = (\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const { keypair_resource_policy } =\n    useLazyLoadQuery<hooksUsingRelay_KeyPairResourcePolicyQuery>(\n      graphql`\n        query hooksUsingRelay_KeyPairResourcePolicyQuery($name: String!) {\n          keypair_resource_policy(name: $name) {\n            max_containers_per_session\n            max_concurrent_sessions\n          }\n        }\n      `,\n      {\n        name: keypair?.resource_policy || '',\n      },\n      {\n        ...options,\n        fetchKey: fetchKey + options.fetchKey,\n      },\n    );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [\n    {\n      keypairResourcePolicy: (keypair_resource_policy || {}) as NonNullable<\n        typeof keypair_resource_policy\n      >,\n      keypair: (keypair || {}) as NonNullable<typeof keypair>,\n      sessionLimitAndRemaining: {\n        max: _.min([\n          (keypair_resource_policy || {}).max_concurrent_sessions ||\n            UNLIMITED_MAX_CONCURRENT_SESSIONS,\n          3, //BackendAiResourceBroker.DEFAULT_CONCURRENT_SESSION_COUNT\n        ]) as number,\n        remaining:\n          ((keypair_resource_policy || {}).max_concurrent_sessions || 3) -\n          ((keypair || {}).concurrency_used || 0),\n      },\n    },\n    { refresh },\n  ] as const;\n};\n","// import { offset_to_cursor } from \"../helper\";\nimport { LazyLoadQueryOptions } from '../helper/types';\nimport { SorterResult } from 'antd/lib/table/interface';\nimport _ from 'lodash';\nimport { useState } from 'react';\nimport {\n  fetchQuery,\n  GraphQLTaggedNode,\n  useRelayEnvironment,\n} from 'react-relay';\nimport {\n  ArrayParam,\n  NumberParam,\n  ObjectParam,\n  StringParam,\n  useQueryParams,\n} from 'use-query-params';\n\nexport type SorterInterface = Pick<SorterResult<any>, 'field' | 'order'>;\n\nexport const antdSorterResultToOrder = (\n  sorter: SorterInterface | SorterInterface[],\n) => {\n  const sorterArray = _.castArray(sorter).filter((s) => s.field);\n\n  return _.filter(\n    _.map(sorterArray, (s) =>\n      _.isNull(s.order)\n        ? undefined\n        : `${_.snakeCase(s.field as string).toUpperCase()}_${\n            s.order === 'ascend' ? 'ASC' : 'DESC'\n          }`,\n    ),\n  );\n};\n\nexport const orderToAntdSorterResult = (order: string[]) => {\n  return _.map(order, (o) => {\n    const names = o.split('_');\n    const orderKey = names.pop();\n    const field = _.camelCase(names.join('_'));\n    return {\n      field,\n      order: (orderKey === 'ASC' ? 'ascend' : 'descend') as\n        | 'ascend'\n        | 'descend'\n        | null,\n    };\n  });\n};\n\nexport const getSortOrderByName = (order: string[], name: string) => {\n  const sorterResult = orderToAntdSorterResult(order);\n  const sorter = _.find(sorterResult, (s) => s.field === name);\n  return sorter?.order;\n};\n\nexport const useRelayPaginationQueryOptions = <\n  // Q, N,\n  O,\n  F,\n>({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      first: pageSize,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n      order: order,\n      filter: filter,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n    // sorter?: SorterResult<N>[];\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n  }) => any;\n}) => {\n  const [isPending, setIsPending] = useState(false);\n\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    order: ArrayParam,\n    filter: ObjectParam,\n  });\n\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  //TODO: not use as\n  const order = (params.order || defaultVariables.order) as O[];\n  const filter = (params.filter || defaultVariables.filter) as F;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    // sorter: SorterResult<N>[],\n    newOrder: O[] = defaultVariables.order,\n    newFilter: F | undefined = defaultVariables.filter,\n    options?: {\n      withoutPendingStatus: boolean;\n    },\n  ) => {\n    if (options?.withoutPendingStatus !== true) {\n      setIsPending(true);\n    }\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setIsPending(false);\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          // eslint-disable-next-line\n          order: newOrder as [], // TODO: not use as []\n          // eslint-disable-next-line\n          filter: newFilter as {}, // TODO: not use as {}\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      isPending,\n      variables,\n      filter,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\nexport const useBAIPaginationQueryOptions = ({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      limit: pageSize,\n      offset: page > 1 ? (page - 1) * pageSize : 0,\n      filter: filter,\n      order: order,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  }) => any;\n}) => {\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    filter: StringParam,\n    order: StringParam,\n  });\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  const order = params.order || defaultVariables.order;\n  const filter = params.filter || defaultVariables.filter;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    newOrder: string | undefined = defaultVariables.order,\n    newFilter: string | undefined = defaultVariables.filter,\n  ) => {\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          order: newOrder,\n          filter: newFilter,\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      variables,\n      filter,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\ninterface BAIPaginationOption {\n  limit: number;\n  offset: number;\n  first?: number;\n  // filter?: string;\n  // order?: string;\n}\ninterface AntdBasicPaginationOption {\n  pageSize: number;\n  current: number;\n}\n\ninterface InitialPaginationOption\n  extends AntdBasicPaginationOption,\n    Omit<BAIPaginationOption, 'limit' | 'offset'> {}\nexport const useBAIPaginationOptionState = (\n  initialOptions: InitialPaginationOption,\n): {\n  baiPaginationOption: BAIPaginationOption;\n  tablePaginationOption: AntdBasicPaginationOption;\n  setTablePaginationOption: (\n    pagination: Partial<AntdBasicPaginationOption>,\n  ) => void;\n} => {\n  const [options, setOptions] =\n    useState<AntdBasicPaginationOption>(initialOptions);\n  return {\n    baiPaginationOption: {\n      limit: options.pageSize,\n      first: options.pageSize,\n      offset:\n        options.current > 1 ? (options.current - 1) * options.pageSize : 0,\n    },\n    tablePaginationOption: {\n      pageSize: options.pageSize,\n      current: options.current,\n    },\n    setTablePaginationOption: (pagination) => {\n      if (!_.isEqual(pagination, options)) {\n        setOptions((current) => ({\n          ...current,\n          ...pagination,\n        }));\n      }\n    },\n  };\n};\n"],"names":["useStyles","createStyles","_ref","css","token","hover","colorLink","colorLinkHover","_ref2","type","to","linkProps","styles","_jsx","Link","className","undefined","Typography","onClick","objectValues","values","highlightKeyword","length","React","map","value","label","color","Flex","direction","children","_","objValue","idx","Tag","style","margin","marginRight","TextHighlighter","keyword","_convertBinarySizeUni","dynamicSteps","units","disableAutoUnit","min","max","roundStep","inputNumberProps","setValue","useControllableState","defaultValue","numValue","_unitFromValue","parseUnit","previousUnit","usePrevious","unit","minNumValue","minUnit","maxNumValue","maxUnit","ref","useRef","useEffect","current","onInput","e","_e$target","target","test","addEventListener","removeEventListener","InputNumber","onBlur","_roundStep$toString$s","_ref$current","_ref$current2","decimalCount","toString","split","isNaN","Math","round","toFixed","onChange","newValue","convertBinarySizeUnit","number","addonAfter","Select","tabIndex","newUnit","onDropdownVisibleChange","open","options","Text","fontFamily","toUpperCase","suffixIcon","cursor","step","onStep","afterStepValue","info","numValueNotNull","index","nextIndex","currentUnitIndex","indexOf","nextValue","nextUnit","nextNumValue","sensitivePatterns","sanitizeSensitiveEnv","envs","env","key","variable","some","pattern","formItemProps","props","inputRef","t","useTranslation","form","Form","useFormInstance","List","fields","add","remove","_jsxs","gap","align","_ref3","name","restField","Item","marginBottom","flex","rules","required","message","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","Promise","reject","resolve","Input","placeholder","fieldNames","field","validateFields","validateTrigger","MinusCircleOutlined","noStyle","Button","setTimeout","focus","icon","PlusOutlined","block","LegacyFolderExplorer","FolderExplorerOpener","folderId","setFolderId","useQueryParam","StringParam","normalizedFolderId","replaceAll","vfolderID","onRequestClose","destroyOnClose","useFolderExplorerOpener","location","useLocation","id","generateFolderPath","searchParams","URLSearchParams","search","set","pathname","_baiClient$_config","filter","showPrivate","environments","useWatch","preserve","baiClient","useSuspendedBackendaiClient","supportExtendedImageInfo","supports","environmentSearch","setEnvironmentSearch","useState","versionSearch","setVersionSearch","metadata","getBaseVersion","getImageMeta","tagAlias","useBackendAIImageMetaData","theme","useToken","isDarkMode","useThemeMode","envSelectRef","versionSelectRef","imageEnvironmentSelectFormItemsVariables","_config","showNonInstalledImages","installed","images","useLazyLoadQuery","_ImageEnvironmentSelectFormItemsQuery","require","fetchPolicy","_form$getFieldValue","_$find","_nextImage","manual","environment","version","setFieldsValue","image","matchedEnvironmentByVersion","matchedImageByVersion","nextEnvironment","nextImage","_imageGroups$","_nextEnvironment2","imageGroups","group","environmentGroups","getImageFullName","_nextEnvironment","environmentName","customizedImageTag","labels","item","allow_manual_image_name_for_session","customizedTag","setFieldValue","useMemo","_label$value","includes","isPrivateImage","groupBy","_metadata$imageInfo$g","imageInfo","groupName","registry","namespace","_environmentName$spli","_metadata$imageInfo$i","imageKey","displayName","prefix","drop","dropRight","join","sort","a","b","_b$tag$split$","_b$tag","_b$tag$split","_a$tag$split$","_a$tag","_a$tag$split","version1","version2","v1","Number","v2","num1","num2","compareVersions","tag","localeCompare","architecture","sortBy","fullNameMatchedImage","fullNameMatchedImageGroup","flatMap","find","envGroup","_Fragment","copyable","text","showSearch","searchValue","onSearch","defaultActiveFirstOption","optionFilterProp","firstInListImage","disabled","Option","filterValue","display","ImageMetaIcon","width","height","OptGroup","environmentGroup","_environmentGroup$env","firstImage","currentMetaImageInfo","extraFilterValues","environmentPrefixTag","push","tagsFromMetaImageInfoLabel","category","justify","marginLeft","marginXS","flexShrink","shouldUpdate","prev","cur","_prev$environments","_cur$environments","_selectedEnvironmentG","selectedEnvironmentGroup","_getFieldValue","selectedImage","dropdownRender","menu","fontWeight","fontWeightStrong","paddingLeft","paddingSM","Divider","_image$tag","requirements","metadataTagAlias","replaceString","Object","entries","tagReplace","RegExp","replace","requirementTags","requirement","startsWith","DoubleTag","str","imageLabels","customizedImageNameLabelIdx","_imageLabels$customiz","tags","_$find2","isCustomized","tagValue","aliasedTag","preserveDotStartCase","ImageTags","allowClear","hidden","alt","getImageIcon","src","ImageAliasNameAndBaseVersionTags","getImageAliasName","BaseImageTags","getBaseImage","ArchitectureTags","getArchitecture","SessionKernelTags","_ref7","_ref8","getTags","sliderProps","allowNegative","otherProps","updateKey","useUpdatableState","minWidth","_inputRef$current","_step$toString$split$","_inputRef$current2","Slider","marks","option","maxPerContainerRegex","useResourceLimitAndRemaining","_checkPresetInfo$scal","_checkPresetInfo$scal2","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal5","_checkPresetInfo$scal6","_checkPresetInfo$scal7","_checkPresetInfo$scal8","_checkPresetInfo$scal9","_checkPresetInfo$scal10","_checkPresetInfo$scal11","_checkPresetInfo$scal12","_convertBinarySizeUni2","_convertBinarySizeUni3","_convertBinarySizeUni4","_convertBinarySizeUni5","_$min2","_$min3","currentImage","currentResourceGroup","currentProjectName","ignorePerContainerConfig","resourceSlots","useResourceSlots","acceleratorSlots","resourceGroups","useResourceGroupsForCurrentProject","data","checkPresetInfo","refetch","isRefetching","useSuspenseTanQuery","queryKey","queryFn","rg","resourcePreset","check","scaling_group","catch","staleTime","currentImageMinM","resource_limits","resourceGroupResourceSize","cpu","scaling_groups","using","remaining","mem","numberFixed","accelerators","result","_checkPresetInfo$scal13","_checkPresetInfo$scal14","_checkPresetInfo$scal15","_checkPresetInfo$scal16","_checkPresetInfo$scal17","_checkPresetInfo$scal18","perContainerConfigs","resourceLimits","maxCPUCoresPerContainer","limitParser","keypair_limits","group_limits","addNumberWithUnits","AUTOMATIC_DEFAULT_SHMEM","maxMemoryPerContainer","_$find3","_$filter","_$filter$","perContainerLimit","configValue","configName","isMatchingMaxPerContainer","match","configLowerCase","toLowerCase","keyLowerCase","parseInt","supportedAcceleratorInfo","_$min","keypair_remaining","group_remaining","scaling_group_remaining","MAX_SAFE_INTEGER","limit","fetchKey","resourceGroup","selectProps","useControllableValue","baiPaginationOption","useBAIPaginationOptionState","pageSize","agent_summary_list","_AgentSelectQuery","offset","status","agentOptions","items","agent","_agent$available_slot","_agent$occupied_slots","availableSlotsInfo","JSON","parse","available_slots","occupiedSlotsInfo","occupied_slots","remainingSlotsInfo","mapValues","_occupiedSlotsInfo$ke","_occupiedSlotsInfo$ke2","endsWith","parseFloat","slot","ResourceNumber","hideTooltip","warn","extraMarks","hideSlider","minGiB","maxGiB","valueGiB","isMinOversMaxValue","_createElement","DynamicUnitInputNumber","changeOnBlur","visibility","track","backgroundColor","compareNumberWithUnits","colorWarning","rail","tooltip","formatter","arguments","newNumValue","colorTextSecondary","markNumber","allocatablePresetNames","showCustom","showMinimumRequired","updateFetchKey","run","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","isPendingUpdate","_startTransition","useTransition","controllableValue","setControllableValue","resource_presets","_ResourcePresetSelectQuery","loading","EditOutlined","selectedLabel","Tooltip","title","InfoCircleOutlined","preset","slotsInfo","resource_slots","optionLabelProp","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","resource","shmem","accelerator","num_of_sessions","cluster_mode","cluster_size","enabledAutomaticShmem","ResourceAllocationFormItems","enableAgentSelect","enableNumOfSessions","enableResourcePresets","forceImageMinValues","showRemainingWarning","keypairResourcePolicy","sessionLimitAndRemaining","useCurrentKeyPairResourcePolicyLazyLoadQuery","agentFetchKey","updateAgentFetchKey","isPendingAgentList","startAgentListTransition","currentProject","useCurrentProjectValue","currentResourceGroupInForm","currentAllocationPreset","currentEnvironmentManual","mergedResourceSlots","resourceSlotsInRG","useResourceSlotsDetails","_resourceLimits$accel","_resourceLimits$accel2","currentImageAcceleratorLimits","isAcceleratorInputDisabled","sessionSliderLimitAndRemaining","getAllocatablePresetNames","presets","ensureValidAcceleratorType","useEventNotStable","currentAcceleratorType","nextAcceleratorType","acceleratorType","updateResourceFieldsBasedOnImage","force","_resourceLimits$cpu","_resourceLimits$shmem","_resourceLimits$mem","minimumResources","_resourceLimits$accel3","nextImageSelectorType","acceleratorInfo","_resourceLimits$accel4","forEach","minNum","minNumStr","runShmemAutomationRule","recursive","updateResourceFieldsBasedOnPreset","slots","numberUnit","acceleratorObj","firstMatchedAcceleratorType","acceleratorSetting","shared_memory","M_plus_S","autoSelectedPreset","allocationPreset","ResourceGroupSelect","projectName","ResourcePresetSelect","allowCustomResourceAllocation","Card","_mergedResourceSlots$","_resourceLimits$cpu2","_resourceLimits$cpu3","_mergedResourceSlots$2","_resourceLimits$cpu8","_resourceLimits$cpu9","_resourceLimits$cpu10","_resourceLimits$cpu11","_resourceLimits$cpu12","_resourceLimits$cpu13","_resourceLimits$cpu14","_resourceLimits$cpu15","human_readable_name","placement","Trans","i18nKey","warningOnly","async","_resourceLimits$cpu4","_resourceLimits$cpu5","_resourceLimits$cpu6","_resourceLimits$cpu7","InputNumberWithSlider","display_unit","RemainingMark","preventDefault","next","_resourceLimits$mem10","_resourceLimits$mem11","_convertBinarySizeUni6","_resourceLimits$mem2","_resourceLimits$mem3","_resourceLimits$mem4","_resourceLimits$mem5","_resourceLimits$mem6","_resourceLimits$mem7","size","_resourceLimits$mem8","_resourceLimits$mem9","DynamicUnitInputNumberWithSlider","addonBefore","valuePropName","Switch","checked","_resourceLimits$shmem2","dependencies","_getFieldValue2","_prev$resource","_next$resource","_resourceLimits$accel5","_resourceLimits$accel6","_resourceLimits$accel11","_resourceLimits$accel12","_resourceLimits$accel13","_resourceLimits$accel14","_resourceLimits$accel7","_resourceLimits$accel8","_resourceLimits$accel9","_resourceLimits$accel10","_mergedResourceSlots$3","initialValue","BAISelect","autoSelectOption","popupMatchSelectWidth","_mergedResourceSlots$4","Suspense","AgentSelect","ReloadOutlined","colorBorder","Row","gutter","marginMD","Col","xs","Radio","_resourceLimits$cpu16","derivedClusterSizeMaxLimit","max_containers_per_session","clusterUnit","minCPU","position","top","transform","colorSuccess","opacity","CaretDownOutlined","bySliderLimit","_resourceLimits$key","_resourceLimits$key2","_resourceLimits$key3","_resourceLimits$key4","_resourceLimits$key5","_resourceLimits$accel15","_resourceLimits$accel16","byImageAcceleratorLimits","acceleratorResourceOfPreset","autoSelectDefault","baiRequestWithPromise","useBaiSignedRequestWithPromise","controllableSearchValue","setControllableSearchValue","setControllableValueDoNotUseWithoutTransition","isPendingChangeTransition","startChangeTransition","optimisticValue","setOptimisticValue","setControllableValueWithTransition","v","_len","args","Array","_key","resourceGroupSelectQueryResult","all","method","url","sftpResourceGroups","volume_info","_item$sftp_scaling_gr","sftp_scaling_groups","autoSelectedResourceGroup","autoSelectedOption","searchProps","optionRender","_option$data$value","amount","extra","opts","currentGroup","useCurrentResourceGroupValue","formatAmount","number_format","binary","round_length","ResourceTypeIcon","showTooltip","fontSize","fontSizeSM","MWCIconWrap","_resourceTypeIconSrcM","showIcon","showUnit","resourceTypeIconSrcMap","targetIcon","MicrochipIcon","content","alignSelf","description","pointerEvents","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","tagValues","r","w","d","perm","hasPermission","compact","vFolderAliasNameRegExp","DEFAULT_ALIAS_BASE_PATH","showAliasInput","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","aliasBasePath","aliasMap","controlledAliasMap","onChangeAliasMap","rowKey","onChangeAutoMountedFolders","showAutoMountedFoldersSection","tableProps","getRowKey","record","isOpenCreateModal","setIsOpenCreateModal","setSelectedRowKeys","setAliasMap","keypair","useKeyPairLazyLoadQuery","accessKey","internalForm","useForm","slice","isPendingRefetch","startRefetchTransition","allFolderList","domain","keypair_resource_policy","_VFolderTableProjectQuery","domain_name","domainName","group_id","keypair_resource_policy_name","resource_policy","filteredFolderListByPermission","allowedVFolderHostsByDomain","allowed_vfolder_hosts","allowedVFolderHostsByGroup","allowedVFolderHostsByKeypairResourcePolicy","mergedVFolderPermissions","mountAllowedVolumes","keys","volume","folder","host","autoMountedFolderNamesByPermission","vf","_vf$name","searchKey","setSearchKey","displayingFolders","inputToAliasPath","useCallback","input","handleAliasUpdate","getFieldsValue","strict","k","stringify","shadowRoot","useShadowRoot","columns","getPopupContainer","QuestionCircleOutlined","dataIndex","sorter","render","isCurrentRowSelected","maxWidth","BAILink","allAliasPathMap","reduce","path","aliasPath","n","stopPropagation","usage_mode","UserOutlined","group_name","row","VFolderPermissionTag","created_at","dayjs","format","defaultSortOrder","PlusIcon","ghost","component","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","sortDirections","Descriptions","FolderCreateModal","arr","alias","autoName","trigger","VFolderTable","pagination","names","node","v0","v3","v4","v5","hash","UNLIMITED_MAX_CONTAINERS_PER_SESSIONS","UNLIMITED_MAX_CONCURRENT_SESSIONS","SIGNED_32BIT_MAX_INT","_hooksUsingRelay_KeyPairQuery","refresh","_hooksUsingRelay_KeyPairResourcePolicyQuery","max_concurrent_sessions","concurrency_used","initialOptions","setOptions","first","tablePaginationOption","setTablePaginationOption"],"sourceRoot":""}