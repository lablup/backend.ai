{"version":3,"file":"static/js/525.b870e16b.chunk.js","mappings":"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","sources":["components/ResetPasswordRequired.tsx","components/TOTPActivateModal.tsx","components/UserProfileSettingModal.tsx","components/__generated__/TOTPActivateModalFragment.graphql.ts","../node_modules/@ant-design/icons-svg/es/asn/WarningTwoTone.js","../node_modules/@ant-design/icons/es/icons/WarningTwoTone.js"],"sourcesContent":["import { baiSignedRequestWithPromise } from '../helper';\nimport { useAnonymousBackendaiClient } from '../hooks';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport { useWebComponentInfo } from './DefaultProviders';\nimport Flex from './Flex';\nimport { WarningTwoTone } from '@ant-design/icons';\nimport { Button, Form, Modal, Typography, Input, theme } from 'antd';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\n// src/components/backend-ai-common-utils.ts\nexport const passwordPattern = /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[_\\W]).{8,}$/;\n\nconst ResetPasswordRequired = () => {\n  const { value, dispatchEvent } = useWebComponentInfo();\n  let parsedValue: {\n    open: boolean;\n    currentPassword: string;\n    username: string;\n    api_endpoint: string;\n  };\n  try {\n    parsedValue = JSON.parse(value || '');\n  } catch (error) {\n    parsedValue = {\n      open: false,\n      currentPassword: '',\n      username: '',\n      api_endpoint: '',\n    };\n  }\n  const { open, currentPassword, username, api_endpoint } = parsedValue;\n\n  const { token } = theme.useToken();\n  const [form] = Form.useForm<{\n    newPassword: string;\n    confirm: string;\n  }>();\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (open) {\n      form.resetFields();\n    }\n  }, [open, form]);\n\n  const anonymousBaiClient = useAnonymousBackendaiClient({ api_endpoint });\n\n  const mutation = useTanMutation({\n    mutationFn: (body: {\n      username: string;\n      current_password: string;\n      new_password: string;\n    }) => {\n      return baiSignedRequestWithPromise({\n        method: 'POST',\n        url: '/server/update-password-no-auth',\n        body,\n        client: anonymousBaiClient,\n      });\n    },\n  });\n\n  const onSubmit = () => {\n    form.validateFields().then((values) => {\n      mutation.mutate(\n        {\n          username: username,\n          current_password: currentPassword,\n          new_password: values.newPassword,\n        },\n        {\n          onSuccess(data, variables, context) {\n            dispatchEvent('ok', null);\n          },\n          onError(error, variables, context) {},\n        },\n      );\n    });\n  };\n\n  return (\n    <Modal\n      open={open}\n      centered\n      mask={false}\n      onCancel={() => {\n        dispatchEvent('cancel', null);\n      }}\n      keyboard={false}\n      maskClosable={false}\n      footer={null}\n      width={450}\n      destroyOnClose={true}\n      forceRender\n    >\n      <Flex\n        direction=\"column\"\n        justify=\"start\"\n        align=\"stretch\"\n        gap={'md'}\n        style={{\n          alignSelf: 'stretch',\n          paddingTop: token.paddingMD,\n          paddingBottom: token.paddingMD,\n        }}\n      >\n        <Typography.Title level={3} style={{ margin: 0 }}>\n          <WarningTwoTone twoToneColor={token.colorWarning} />{' '}\n          {t('webui.menu.PleaseChangeYourPassword')}\n        </Typography.Title>\n        {t('webui.menu.YouMushChangeYourPassword')}\n        <Form\n          form={form}\n          layout=\"vertical\"\n          initialValues={{\n            currentPassword: currentPassword,\n          }}\n          disabled={mutation.isLoading}\n        >\n          <Form.Item\n            name=\"newPassword\"\n            label={t('webui.menu.NewPassword')}\n            rules={[\n              {\n                required: true,\n              },\n              {\n                pattern: passwordPattern,\n                message: t('webui.menu.InvalidPasswordMessage').toString(),\n              },\n              () => ({\n                validator(_, value) {\n                  if (currentPassword === value) {\n                    return Promise.reject(\n                      new Error(\n                        t('webui.menu.NewPasswordCannotBeSame').toString(),\n                      ),\n                    );\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n            hasFeedback\n          >\n            <Input.Password />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm\"\n            label={t('webui.menu.NewPasswordAgain')}\n            dependencies={['newPassword']}\n            hasFeedback\n            rules={[\n              {\n                required: true,\n              },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('newPassword') === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    new Error(t('environment.PasswordsDoNotMatch').toString()),\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input.Password onPressEnter={onSubmit} />\n          </Form.Item>\n        </Form>\n        <Button type=\"primary\" onClick={onSubmit} loading={mutation.isLoading}>\n          {t('webui.menu.Update')}\n        </Button>\n      </Flex>\n    </Modal>\n  );\n};\n\nexport default ResetPasswordRequired;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport { TOTPActivateModalFragment$key } from './__generated__/TOTPActivateModalFragment.graphql';\nimport { QRCode, Typography, Input, theme, Form, message, Spin } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useQuery } from 'react-query';\nimport { useFragment } from 'react-relay';\n\ntype TOTPActivateFormInput = {\n  OTP: number;\n};\n\ninterface Props extends BAIModalProps {\n  userFrgmt?: TOTPActivateModalFragment$key | null;\n  onRequestClose: (success?: boolean) => void;\n}\n\nconst TOTPActivateModal: React.FC<Props> = ({\n  userFrgmt = null,\n  onRequestClose,\n  ...baiModalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [form] = Form.useForm<TOTPActivateFormInput>();\n\n  const user = useFragment(\n    graphql`\n      fragment TOTPActivateModalFragment on User {\n        email\n        totp_activated @skipOnClient(if: $isNotSupportTotp)\n      }\n    `,\n    userFrgmt,\n  );\n\n  const baiClient = useSuspendedBackendaiClient();\n  let initializedTotp = useQuery<{\n    totp_key: string;\n    totp_uri: string;\n  }>({\n    queryKey: ['initialize_totp', baiClient?.email, baiModalProps.open],\n    queryFn: () => {\n      return user?.email === baiClient?.email &&\n        !user?.totp_activated &&\n        baiModalProps.open\n        ? baiClient.initialize_totp()\n        : null;\n    },\n    suspense: false,\n    staleTime: 0,\n    cacheTime: 0,\n  });\n\n  const mutationToActivateTotp = useTanMutation({\n    mutationFn: (values: TOTPActivateFormInput) => {\n      return baiClient.activate_totp(values.OTP);\n    },\n  });\n\n  const _onOk = () => {\n    form\n      .validateFields()\n      .then((values) => {\n        mutationToActivateTotp.mutate(values, {\n          onSuccess: () => {\n            message.success(t('totp.TotpSetupCompleted'));\n            onRequestClose(true);\n          },\n          onError: () => {\n            message.error(t('totp.InvalidTotpCode'));\n          },\n        });\n        new Promise((resolve, reject) => {}).then(() => {\n          onRequestClose(true);\n        });\n      })\n      .catch(() => {});\n  };\n\n  return (\n    <BAIModal\n      title={t('webui.menu.SetupTotp')}\n      maskClosable={false}\n      confirmLoading={mutationToActivateTotp.isLoading}\n      onOk={_onOk}\n      onCancel={() => {\n        onRequestClose();\n      }}\n      {...baiModalProps}\n    >\n      {initializedTotp.isLoading ? (\n        <Flex justify=\"center\" direction=\"row\">\n          <Spin />\n        </Flex>\n      ) : !initializedTotp.data ? (\n        <Flex justify=\"center\" direction=\"row\">\n          {t('totp.TotpSetupNotAvailable')}\n        </Flex>\n      ) : (\n        <>\n          {t('totp.ScanQRToEnable')}\n          <Flex\n            justify=\"center\"\n            style={{ margin: token.marginSM, gap: token.margin }}\n          >\n            <QRCode value={initializedTotp.data.totp_uri} />\n          </Flex>\n          {t('totp.TypeInAuthKey')}\n          <Flex\n            justify=\"center\"\n            style={{ margin: token.marginSM, gap: token.margin }}\n          >\n            <Typography.Text copyable code>\n              {initializedTotp.data.totp_key}\n            </Typography.Text>\n          </Flex>\n          {t('totp.EnterConfirmationCode')}\n          <Form\n            preserve={false}\n            form={form}\n            validateTrigger={['onChange', 'onBlur']}\n          >\n            <Flex\n              justify=\"center\"\n              style={{ margin: token.marginSM, gap: token.margin }}\n            >\n              <Form.Item\n                name=\"OTP\"\n                rules={[\n                  {\n                    required: true,\n                    message: t('totp.RequireOTP'),\n                  },\n                  {\n                    pattern: /^[0-9]+$/,\n                    message: t('credential.validation.NumbersOnly'),\n                  },\n                ]}\n              >\n                <Input\n                  maxLength={6}\n                  allowClear\n                  placeholder=\"000000\"\n                  style={{ maxWidth: 150 }}\n                />\n              </Form.Item>\n            </Flex>\n          </Form>\n        </>\n      )}\n    </BAIModal>\n  );\n};\n\nexport default TOTPActivateModal;\n","/**\n @license\n Copyright (c) 2015-2023 Lablup Inc. All rights reserved.\n */\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { useCurrentUserInfo } from '../hooks/backendai';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport BAIModal from './BAIModal';\nimport { passwordPattern } from './ResetPasswordRequired';\nimport TOTPActivateModal from './TOTPActivateModal';\nimport { UserProfileQuery } from './UserProfileSettingModalQuery';\n// @ts-ignore\nimport { UserProfileSettingModalQuery } from './__generated__/UserProfileSettingModalQuery.graphql';\nimport { ExclamationCircleFilled, LoadingOutlined } from '@ant-design/icons';\nimport { useToggle } from 'ahooks';\nimport { Modal, ModalProps, Input, Form, message, Switch, Spin } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PreloadedQuery, usePreloadedQuery } from 'react-relay';\n\ninterface Props extends ModalProps {\n  queryRef: PreloadedQuery<UserProfileSettingModalQuery>;\n  onRequestClose: (success?: boolean) => void;\n  onRequestRefresh: () => void;\n  totpSupported?: boolean;\n  isRefreshModalPending?: boolean;\n}\n\ntype UserProfileFormValues = {\n  full_name: string;\n  originalPassword?: string;\n  newPasswordConfirm?: string;\n  newPassword?: string;\n  totp_activated: boolean;\n};\n\nconst UserProfileSettingModal: React.FC<Props> = ({\n  onRequestClose,\n  onRequestRefresh,\n  isRefreshModalPending,\n  totpSupported,\n  queryRef,\n  ...baiModalProps\n}) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm<UserProfileFormValues>();\n  const [messageApi, contextHolder] = message.useMessage();\n  const [modal, modalContextHolder] = Modal.useModal();\n  const [isOpenTOTPActivateModal, { toggle: toggleTOTPActivateModal }] =\n    useToggle(false);\n  const baiClient = useSuspendedBackendaiClient();\n\n  // const { data: isManagerSupportingTOTP } = useTanQuery(\n  //   'isManagerSupportingTOTP',\n  //   () => {\n  //     return baiClient.isManagerSupportingTOTP();\n  //   },\n  //   {\n  //     suspense: true,\n  //   },\n  // );\n  // const totpSupported = baiClient.supports('2FA') && isManagerSupportingTOTP;\n\n  const [userInfo, userMutations] = useCurrentUserInfo();\n  // const [fetchKey, updateFetchKey] = useUpdatableState('initial-fetch');\n\n  const { user } = usePreloadedQuery(UserProfileQuery, queryRef);\n\n  const mutationToRemoveTotp = useTanMutation({\n    mutationFn: () => {\n      return baiClient.remove_totp();\n    },\n  });\n\n  const onSubmit = () => {\n    form\n      .validateFields()\n      .then((values) => {\n        userMutations.updateFullName(values.full_name, {\n          onSuccess: (newFullName) => {\n            if (newFullName !== userInfo.full_name) {\n              messageApi.open({\n                type: 'success',\n                content: t('webui.menu.FullnameUpdated'),\n              });\n            }\n\n            if (\n              values.newPassword &&\n              values.newPasswordConfirm &&\n              values.originalPassword\n            ) {\n              userMutations.updatePassword(\n                {\n                  new_password: values.newPassword,\n                  new_password2: values.newPasswordConfirm,\n                  old_password: values.originalPassword,\n                },\n                {\n                  onSuccess: () => {\n                    messageApi.open({\n                      type: 'success',\n                      content: t('webui.menu.PasswordUpdated'),\n                    });\n                    onRequestClose(true);\n                  },\n                  onError: (e) => {\n                    messageApi.open({\n                      type: 'error',\n                      content: e.message,\n                    });\n                  },\n                },\n              );\n            } else {\n              onRequestClose(true);\n            }\n          },\n          onError: (e) => {\n            messageApi.open({\n              type: 'error',\n              content: e.message,\n            });\n          },\n        });\n      })\n      .catch(() => {});\n  };\n\n  return (\n    <>\n      <BAIModal\n        {...baiModalProps}\n        okText={t('webui.menu.Update')}\n        cancelText={t('webui.menu.Cancel')}\n        onCancel={() => {\n          onRequestClose();\n        }}\n        confirmLoading={userInfo.isPendingMutation}\n        onOk={() => onSubmit()}\n        centered\n        destroyOnClose\n        title={t('webui.menu.MyAccountInformation')}\n      >\n        <Spin spinning={isRefreshModalPending} indicator={<LoadingOutlined />}>\n          <Form\n            layout=\"vertical\"\n            labelCol={{ span: 8 }}\n            form={form}\n            initialValues={{\n              full_name: userInfo.full_name,\n              totp_activated: user?.totp_activated || false,\n            }}\n            preserve={false}\n          >\n            <Form.Item\n              name=\"full_name\"\n              label={t('webui.menu.FullName')}\n              rules={[\n                () => ({\n                  validator(_, value) {\n                    if (value && value.length < 65) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(\n                      new Error(t('webui.menu.FullNameInvalid')),\n                    );\n                  },\n                }),\n              ]}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              name=\"originalPassword\"\n              label={t('webui.menu.OriginalPassword')}\n              rules={[\n                ({ getFieldValue }) => ({\n                  validator(_, value) {\n                    if (\n                      !value &&\n                      (getFieldValue('newPassword') ||\n                        getFieldValue('newPasswordConfirm'))\n                    ) {\n                      return Promise.reject(\n                        new Error(t('webui.menu.InputOriginalPassword')),\n                      );\n                    }\n                    return Promise.resolve();\n                  },\n                }),\n              ]}\n              dependencies={['newPassword', 'newPasswordConfirm']}\n            >\n              <Input.Password />\n            </Form.Item>\n            <Form.Item\n              name=\"newPassword\"\n              label={t('webui.menu.NewPassword')}\n              rules={[\n                {\n                  pattern: passwordPattern,\n                  message: t('webui.menu.InvalidPasswordMessage'),\n                },\n              ]}\n            >\n              <Input.Password />\n            </Form.Item>\n            <Form.Item\n              name=\"newPasswordConfirm\"\n              label={t('webui.menu.NewPasswordAgain')}\n              dependencies={['newPassword']}\n              rules={[\n                ({ getFieldValue }) => ({\n                  validator(_, value) {\n                    if (!value || getFieldValue('newPassword') === value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(\n                      new Error(t('webui.menu.NewPasswordMismatch')),\n                    );\n                  },\n                }),\n              ]}\n            >\n              <Input.Password />\n            </Form.Item>\n            {!!totpSupported && (\n              <Form.Item\n                name=\"totp_activated\"\n                label={t('webui.menu.TotpActivated')}\n                valuePropName=\"checked\"\n              >\n                <Switch\n                  loading={mutationToRemoveTotp.isLoading}\n                  onChange={(checked: boolean) => {\n                    if (checked) {\n                      toggleTOTPActivateModal();\n                    } else {\n                      if (user?.totp_activated) {\n                        form.setFieldValue('totp_activated', true);\n                        modal.confirm({\n                          title: t('totp.TurnOffTotp'),\n                          icon: <ExclamationCircleFilled />,\n                          content: t('totp.ConfirmTotpRemovalBody'),\n                          okText: t('button.Yes'),\n                          okType: 'danger',\n                          cancelText: t('button.No'),\n                          onOk() {\n                            mutationToRemoveTotp.mutate(undefined, {\n                              onSuccess: () => {\n                                message.success(\n                                  t('totp.RemoveTotpSetupCompleted'),\n                                );\n                                // updateFetchKey();\n                                onRequestRefresh();\n\n                                form.setFieldValue('totp_activated', false);\n                              },\n                              onError: (error: any) => {\n                                message.error(error.message);\n                              },\n                            });\n                          },\n                          onCancel() {\n                            form.setFieldValue('totp_activated', true);\n                          },\n                        });\n                      }\n                    }\n                  }}\n                />\n              </Form.Item>\n            )}\n          </Form>\n        </Spin>\n        {!!totpSupported && (\n          <TOTPActivateModal\n            userFrgmt={user}\n            open={isOpenTOTPActivateModal}\n            onRequestClose={(success) => {\n              if (success) {\n                // updateFetchKey();\n                onRequestRefresh();\n              } else {\n                form.setFieldValue('totp_activated', false);\n              }\n              toggleTOTPActivateModal();\n            }}\n          />\n        )}\n      </BAIModal>\n      {contextHolder}\n      {modalContextHolder}\n    </>\n  );\n};\n\nexport default UserProfileSettingModal;\n","/**\n * @generated SignedSource<<84ef114f996ea8a63ee4526fc5d27953>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type TOTPActivateModalFragment$data = {\n  readonly email: string | null;\n  readonly totp_activated: boolean | null;\n  readonly \" $fragmentType\": \"TOTPActivateModalFragment\";\n};\nexport type TOTPActivateModalFragment$key = {\n  readonly \" $data\"?: TOTPActivateModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"TOTPActivateModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [\n    {\n      \"kind\": \"RootArgument\",\n      \"name\": \"isNotSupportTotp\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"TOTPActivateModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"email\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"totp_activated\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"User\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"f5da6b3094f7d70bef9373d9c907955c\";\n\nexport default node;\n","// This icon file is generated automatically.\nvar WarningTwoTone = { \"icon\": function render(primaryColor, secondaryColor) { return { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z\", \"fill\": primaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M172.2 828.1h679.6L512 239.9 172.2 828.1zM560 720a48.01 48.01 0 01-96 0 48.01 48.01 0 0196 0zm-16-304v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V416c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M464 720a48 48 0 1096 0 48 48 0 10-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8z\", \"fill\": primaryColor } }] }; }, \"name\": \"warning\", \"theme\": \"twotone\" };\nexport default WarningTwoTone;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport WarningTwoToneSvg from \"@ant-design/icons-svg/es/asn/WarningTwoTone\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar WarningTwoTone = function WarningTwoTone(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: WarningTwoToneSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  WarningTwoTone.displayName = 'WarningTwoTone';\n}\nexport default /*#__PURE__*/React.forwardRef(WarningTwoTone);"],"names":["passwordPattern","parsedValue","_useWebComponentInfo","useWebComponentInfo","value","dispatchEvent","JSON","parse","error","open","currentPassword","username","api_endpoint","_parsedValue","token","theme","useToken","_Form$useForm","Form","useForm","form","_slicedToArray","t","useTranslation","useEffect","resetFields","anonymousBaiClient","useAnonymousBackendaiClient","mutation","useTanMutation","mutationFn","body","baiSignedRequestWithPromise","method","url","client","onSubmit","validateFields","then","values","mutate","current_password","new_password","newPassword","onSuccess","data","variables","context","onError","_jsx","Modal","centered","mask","onCancel","keyboard","maskClosable","footer","width","destroyOnClose","forceRender","children","_jsxs","Flex","direction","justify","align","gap","style","alignSelf","paddingTop","paddingMD","paddingBottom","Typography","Title","level","margin","WarningTwoTone","twoToneColor","colorWarning","layout","initialValues","disabled","isLoading","Item","name","label","rules","required","pattern","message","toString","validator","_","Promise","reject","Error","resolve","hasFeedback","Input","Password","dependencies","_ref","getFieldValue","onPressEnter","Button","type","onClick","loading","_ref$userFrgmt","userFrgmt","onRequestClose","baiModalProps","_objectWithoutProperties","_excluded","user","useFragment","_TOTPActivateModalFragment","require","baiClient","useSuspendedBackendaiClient","initializedTotp","useQuery","queryKey","email","queryFn","totp_activated","initialize_totp","suspense","staleTime","cacheTime","mutationToActivateTotp","activate_totp","OTP","BAIModal","_objectSpread","title","confirmLoading","onOk","success","catch","Spin","_Fragment","marginSM","QRCode","totp_uri","Text","copyable","code","totp_key","preserve","validateTrigger","maxLength","allowClear","placeholder","maxWidth","onRequestRefresh","isRefreshModalPending","totpSupported","queryRef","_message$useMessage","useMessage","_message$useMessage2","messageApi","contextHolder","_Modal$useModal","useModal","_Modal$useModal2","modal","modalContextHolder","_useToggle","useToggle","_useToggle2","isOpenTOTPActivateModal","toggleTOTPActivateModal","toggle","_useCurrentUserInfo","useCurrentUserInfo","_useCurrentUserInfo2","userInfo","userMutations","usePreloadedQuery","UserProfileQuery","mutationToRemoveTotp","remove_totp","okText","cancelText","isPendingMutation","updateFullName","full_name","newFullName","content","newPasswordConfirm","originalPassword","updatePassword","new_password2","old_password","e","spinning","indicator","LoadingOutlined","labelCol","span","length","_ref2","_ref3","valuePropName","Switch","onChange","checked","setFieldValue","confirm","icon","ExclamationCircleFilled","okType","undefined","TOTPActivateModal","node","primaryColor","secondaryColor","props","ref","React","AntdIcon","_extends","WarningTwoToneSvg"],"sourceRoot":""}