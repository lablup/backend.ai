{"version":3,"file":"static/js/2501.81914f93.chunk.js","mappings":"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","sources":["../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/Panel.js","../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/hooks/useItems.js","../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/hooks/useResizable.js","../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/hooks/useSizes.js","../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/hooks/sizeUtil.js","../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/SplitBar.js","../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/style/index.js","../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/Splitter.js","../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/hooks/useResize.js","../../node_modules/.pnpm/antd@5.27.5_date-fns@3.6.0_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/antd/es/splitter/index.js"],"sourcesContent":["\"use client\";\n\nimport React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nexport const InternalPanel = /*#__PURE__*/forwardRef((props, ref) => {\n  const {\n    prefixCls,\n    className,\n    children,\n    size,\n    style = {}\n  } = props;\n  const panelClassName = classNames(`${prefixCls}-panel`, {\n    [`${prefixCls}-panel-hidden`]: size === 0\n  }, className);\n  const hasSize = size !== undefined;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    className: panelClassName,\n    style: Object.assign(Object.assign({}, style), {\n      // Use auto when start from ssr\n      flexBasis: hasSize ? size : 'auto',\n      flexGrow: hasSize ? 0 : 1\n    })\n  }, children);\n});\nif (process.env.NODE_ENV !== 'production') {\n  InternalPanel.displayName = 'Panel';\n}\nconst Panel = () => null;\nexport default Panel;","var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nfunction getCollapsible(collapsible) {\n  if (collapsible && typeof collapsible === 'object') {\n    return Object.assign(Object.assign({}, collapsible), {\n      showCollapsibleIcon: collapsible.showCollapsibleIcon === undefined ? 'auto' : collapsible.showCollapsibleIcon\n    });\n  }\n  const mergedCollapsible = !!collapsible;\n  return {\n    start: mergedCollapsible,\n    end: mergedCollapsible,\n    showCollapsibleIcon: 'auto'\n  };\n}\n/**\n * Convert `children` into `items`.\n */\nfunction useItems(children) {\n  const items = React.useMemo(() => toArray(children).filter(item => /*#__PURE__*/React.isValidElement(item)).map(node => {\n    const {\n      props\n    } = node;\n    const {\n        collapsible\n      } = props,\n      restProps = __rest(props, [\"collapsible\"]);\n    return Object.assign(Object.assign({}, restProps), {\n      collapsible: getCollapsible(collapsible)\n    });\n  }), [children]);\n  return items;\n}\nexport default useItems;","import * as React from 'react';\nfunction getShowCollapsibleIcon(prev, next) {\n  if (prev.collapsible && next.collapsible) {\n    if (prev.showCollapsibleIcon === true || next.showCollapsibleIcon === true) {\n      return true;\n    }\n    if (prev.showCollapsibleIcon === 'auto' || next.showCollapsibleIcon === 'auto') {\n      return 'auto';\n    }\n    return false;\n  }\n  if (prev.collapsible) {\n    return prev.showCollapsibleIcon;\n  }\n  if (next.collapsible) {\n    return next.showCollapsibleIcon;\n  }\n  return false;\n}\nexport default function useResizable(items, pxSizes, isRTL) {\n  return React.useMemo(() => {\n    const resizeInfos = [];\n    for (let i = 0; i < items.length - 1; i += 1) {\n      const prevItem = items[i];\n      const nextItem = items[i + 1];\n      const prevSize = pxSizes[i];\n      const nextSize = pxSizes[i + 1];\n      const {\n        resizable: prevResizable = true,\n        min: prevMin,\n        collapsible: prevCollapsible\n      } = prevItem;\n      const {\n        resizable: nextResizable = true,\n        min: nextMin,\n        collapsible: nextCollapsible\n      } = nextItem;\n      const mergedResizable =\n      // Both need to be resizable\n      prevResizable && nextResizable && (\n      // Prev is not collapsed and limit min size\n      prevSize !== 0 || !prevMin) && (\n      // Next is not collapsed and limit min size\n      nextSize !== 0 || !nextMin);\n      const prevEndCollapsible = !!prevCollapsible.end && prevSize > 0;\n      const nextStartExpandable = !!nextCollapsible.start && nextSize === 0 && prevSize > 0;\n      const startCollapsible = prevEndCollapsible || nextStartExpandable;\n      const nextStartCollapsible = !!nextCollapsible.start && nextSize > 0;\n      const prevEndExpandable = !!prevCollapsible.end && prevSize === 0 && nextSize > 0;\n      const endCollapsible = nextStartCollapsible || prevEndExpandable;\n      const showStartCollapsibleIcon = getShowCollapsibleIcon({\n        collapsible: prevEndCollapsible,\n        showCollapsibleIcon: prevCollapsible.showCollapsibleIcon\n      }, {\n        collapsible: nextStartExpandable,\n        showCollapsibleIcon: nextCollapsible.showCollapsibleIcon\n      });\n      const showEndCollapsibleIcon = getShowCollapsibleIcon({\n        collapsible: nextStartCollapsible,\n        showCollapsibleIcon: nextCollapsible.showCollapsibleIcon\n      }, {\n        collapsible: prevEndExpandable,\n        showCollapsibleIcon: prevCollapsible.showCollapsibleIcon\n      });\n      resizeInfos[i] = {\n        resizable: mergedResizable,\n        startCollapsible: !!(isRTL ? endCollapsible : startCollapsible),\n        endCollapsible: !!(isRTL ? startCollapsible : endCollapsible),\n        showStartCollapsibleIcon: isRTL ? showEndCollapsibleIcon : showStartCollapsibleIcon,\n        showEndCollapsibleIcon: isRTL ? showStartCollapsibleIcon : showEndCollapsibleIcon\n      };\n    }\n    return resizeInfos;\n  }, [pxSizes, items]);\n}","import React from 'react';\nimport { autoPtgSizes } from './sizeUtil';\nexport function getPtg(str) {\n  return Number(str.slice(0, -1)) / 100;\n}\nfunction isPtg(itemSize) {\n  return typeof itemSize === 'string' && itemSize.endsWith('%');\n}\n/**\n * Save the size state.\n * Align the size into flex percentage base.\n */\nexport default function useSizes(items, containerSize) {\n  const propSizes = items.map(item => item.size);\n  const itemsCount = items.length;\n  const mergedContainerSize = containerSize || 0;\n  const ptg2px = ptg => ptg * mergedContainerSize;\n  // We do not need care the size state match the `items` length in `useState`.\n  // It will calculate later.\n  const [innerSizes, setInnerSizes] = React.useState(() => items.map(item => item.defaultSize));\n  const sizes = React.useMemo(() => {\n    var _a;\n    const mergedSizes = [];\n    for (let i = 0; i < itemsCount; i += 1) {\n      mergedSizes[i] = (_a = propSizes[i]) !== null && _a !== void 0 ? _a : innerSizes[i];\n    }\n    return mergedSizes;\n  }, [itemsCount, innerSizes, propSizes]);\n  const postPercentMinSizes = React.useMemo(() => items.map(item => {\n    if (isPtg(item.min)) {\n      return getPtg(item.min);\n    }\n    return (item.min || 0) / mergedContainerSize;\n  }), [items, mergedContainerSize]);\n  const postPercentMaxSizes = React.useMemo(() => items.map(item => {\n    if (isPtg(item.max)) {\n      return getPtg(item.max);\n    }\n    return (item.max || mergedContainerSize) / mergedContainerSize;\n  }), [items, mergedContainerSize]);\n  // Post handle the size. Will do:\n  // 1. Convert all the px into percentage if not empty.\n  // 2. Get rest percentage for exist percentage.\n  // 3. Fill the rest percentage into empty item.\n  const postPercentSizes = React.useMemo(() => {\n    const ptgList = [];\n    // Fill default percentage\n    for (let i = 0; i < itemsCount; i += 1) {\n      const itemSize = sizes[i];\n      if (isPtg(itemSize)) {\n        ptgList[i] = getPtg(itemSize);\n      } else if (itemSize || itemSize === 0) {\n        const num = Number(itemSize);\n        if (!Number.isNaN(num)) {\n          ptgList[i] = num / mergedContainerSize;\n        }\n      } else {\n        ptgList[i] = undefined;\n      }\n    }\n    // Use autoPtgSizes to handle the undefined sizes\n    return autoPtgSizes(ptgList, postPercentMinSizes, postPercentMaxSizes);\n  }, [sizes, mergedContainerSize, postPercentMinSizes, postPercentMaxSizes]);\n  const postPxSizes = React.useMemo(() => postPercentSizes.map(ptg2px), [postPercentSizes, mergedContainerSize]);\n  // If ssr, we will use the size from developer config first.\n  const panelSizes = React.useMemo(() => containerSize ? postPxSizes : sizes, [postPxSizes, containerSize]);\n  return [panelSizes, postPxSizes, postPercentSizes, postPercentMinSizes, postPercentMaxSizes, setInnerSizes];\n}","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nexport function autoPtgSizes(ptgSizes, minPtgSizes, maxPtgSizes) {\n  // Static current data\n  let currentTotalPtg = 0;\n  const undefinedIndexes = [];\n  ptgSizes.forEach((size, index) => {\n    if (size === undefined) {\n      undefinedIndexes.push(index);\n    } else {\n      currentTotalPtg += size;\n    }\n  });\n  const restPtg = 1 - currentTotalPtg;\n  const undefinedCount = undefinedIndexes.length;\n  // Fill if exceed\n  if (restPtg < 0) {\n    const scale = 1 / currentTotalPtg;\n    return ptgSizes.map(size => size === undefined ? 0 : size * scale);\n  }\n  // Check if limit exists\n  let sumMin = 0;\n  let sumMax = 0;\n  let limitMin = 0;\n  let limitMax = 1;\n  for (const index of undefinedIndexes) {\n    const min = minPtgSizes[index] || 0;\n    const max = maxPtgSizes[index] || 1;\n    sumMin += min;\n    sumMax += max;\n    limitMin = Math.max(limitMin, min);\n    limitMax = Math.min(limitMax, max);\n  }\n  // Impossible case, just average fill\n  if (sumMin > 1 && sumMax < 1) {\n    const avg = 1 / undefinedCount;\n    return ptgSizes.map(size => size === undefined ? avg : size);\n  }\n  // Quickly fill if can\n  const restAvg = restPtg / undefinedCount;\n  if (limitMin <= restAvg && restAvg <= limitMax) {\n    return ptgSizes.map(size => size === undefined ? restAvg : size);\n  }\n  // Greedy algorithm\n  const result = _toConsumableArray(ptgSizes);\n  let remain = restPtg - sumMin;\n  for (let i = 0; i < undefinedCount; i += 1) {\n    const index = undefinedIndexes[i];\n    const min = minPtgSizes[index] || 0;\n    const max = maxPtgSizes[index] || 1;\n    result[index] = min;\n    const canAdd = max - min;\n    const add = Math.min(canAdd, remain);\n    result[index] += add;\n    remain -= add;\n  }\n  return result;\n}","\"use client\";\n\nimport React, { useState } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport LeftOutlined from \"@ant-design/icons/es/icons/LeftOutlined\";\nimport RightOutlined from \"@ant-design/icons/es/icons/RightOutlined\";\nimport UpOutlined from \"@ant-design/icons/es/icons/UpOutlined\";\nimport classNames from 'classnames';\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nfunction getValidNumber(num) {\n  return typeof num === 'number' && !Number.isNaN(num) && Number.isFinite(num) ? Math.round(num) : 0;\n}\nconst SplitBar = props => {\n  const {\n    prefixCls,\n    vertical,\n    index,\n    active,\n    ariaNow,\n    ariaMin,\n    ariaMax,\n    resizable,\n    startCollapsible,\n    endCollapsible,\n    onOffsetStart,\n    onOffsetUpdate,\n    onOffsetEnd,\n    onCollapse,\n    lazy,\n    containerSize,\n    showStartCollapsibleIcon,\n    showEndCollapsibleIcon\n  } = props;\n  const splitBarPrefixCls = `${prefixCls}-bar`;\n  // ======================== Resize ========================\n  const [startPos, setStartPos] = useState(null);\n  const [constrainedOffset, setConstrainedOffset] = useState(0);\n  const constrainedOffsetX = vertical ? 0 : constrainedOffset;\n  const constrainedOffsetY = vertical ? constrainedOffset : 0;\n  const onMouseDown = e => {\n    if (resizable && e.currentTarget) {\n      setStartPos([e.pageX, e.pageY]);\n      onOffsetStart(index);\n    }\n  };\n  const onTouchStart = e => {\n    if (resizable && e.touches.length === 1) {\n      const touch = e.touches[0];\n      setStartPos([touch.pageX, touch.pageY]);\n      onOffsetStart(index);\n    }\n  };\n  // Updated constraint calculation\n  const getConstrainedOffset = rawOffset => {\n    const currentPos = containerSize * ariaNow / 100;\n    const newPos = currentPos + rawOffset;\n    // Calculate available space\n    const minAllowed = Math.max(0, containerSize * ariaMin / 100);\n    const maxAllowed = Math.min(containerSize, containerSize * ariaMax / 100);\n    // Constrain new position within bounds\n    const clampedPos = Math.max(minAllowed, Math.min(maxAllowed, newPos));\n    return clampedPos - currentPos;\n  };\n  const handleLazyMove = useEvent((offsetX, offsetY) => {\n    const constrainedOffsetValue = getConstrainedOffset(vertical ? offsetY : offsetX);\n    setConstrainedOffset(constrainedOffsetValue);\n  });\n  const handleLazyEnd = useEvent(() => {\n    onOffsetUpdate(index, constrainedOffsetX, constrainedOffsetY, true);\n    setConstrainedOffset(0);\n    onOffsetEnd(true);\n  });\n  const getVisibilityClass = mode => {\n    switch (mode) {\n      case true:\n        return `${splitBarPrefixCls}-collapse-bar-always-visible`;\n      case false:\n        return `${splitBarPrefixCls}-collapse-bar-always-hidden`;\n      case 'auto':\n        return `${splitBarPrefixCls}-collapse-bar-hover-only`;\n    }\n  };\n  useLayoutEffect(() => {\n    if (!startPos) {\n      return;\n    }\n    const onMouseMove = e => {\n      const {\n        pageX,\n        pageY\n      } = e;\n      const offsetX = pageX - startPos[0];\n      const offsetY = pageY - startPos[1];\n      if (lazy) {\n        handleLazyMove(offsetX, offsetY);\n      } else {\n        onOffsetUpdate(index, offsetX, offsetY);\n      }\n    };\n    const onMouseUp = () => {\n      if (lazy) {\n        handleLazyEnd();\n      } else {\n        onOffsetEnd();\n      }\n      setStartPos(null);\n    };\n    const handleTouchMove = e => {\n      if (e.touches.length === 1) {\n        const touch = e.touches[0];\n        const offsetX = touch.pageX - startPos[0];\n        const offsetY = touch.pageY - startPos[1];\n        if (lazy) {\n          handleLazyMove(offsetX, offsetY);\n        } else {\n          onOffsetUpdate(index, offsetX, offsetY);\n        }\n      }\n    };\n    const handleTouchEnd = () => {\n      if (lazy) {\n        handleLazyEnd();\n      } else {\n        onOffsetEnd();\n      }\n      setStartPos(null);\n    };\n    const eventHandlerMap = {\n      mousemove: onMouseMove,\n      mouseup: onMouseUp,\n      touchmove: handleTouchMove,\n      touchend: handleTouchEnd\n    };\n    for (const [event, handler] of Object.entries(eventHandlerMap)) {\n      // eslint-disable-next-line react-web-api/no-leaked-event-listener\n      window.addEventListener(event, handler);\n    }\n    return () => {\n      for (const [event, handler] of Object.entries(eventHandlerMap)) {\n        window.removeEventListener(event, handler);\n      }\n    };\n  }, [startPos, index, lazy]);\n  const transformStyle = {\n    [`--${splitBarPrefixCls}-preview-offset`]: `${constrainedOffset}px`\n  };\n  // ======================== Render ========================\n  const StartIcon = vertical ? UpOutlined : LeftOutlined;\n  const EndIcon = vertical ? DownOutlined : RightOutlined;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: splitBarPrefixCls,\n    role: \"separator\",\n    \"aria-valuenow\": getValidNumber(ariaNow),\n    \"aria-valuemin\": getValidNumber(ariaMin),\n    \"aria-valuemax\": getValidNumber(ariaMax)\n  }, lazy && (/*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(`${splitBarPrefixCls}-preview`, {\n      [`${splitBarPrefixCls}-preview-active`]: !!constrainedOffset\n    }),\n    style: transformStyle\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(`${splitBarPrefixCls}-dragger`, {\n      [`${splitBarPrefixCls}-dragger-disabled`]: !resizable,\n      [`${splitBarPrefixCls}-dragger-active`]: active\n    }),\n    onMouseDown: onMouseDown,\n    onTouchStart: onTouchStart\n  }), startCollapsible && (/*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(`${splitBarPrefixCls}-collapse-bar`, `${splitBarPrefixCls}-collapse-bar-start`, getVisibilityClass(showStartCollapsibleIcon)),\n    onClick: () => onCollapse(index, 'start')\n  }, /*#__PURE__*/React.createElement(StartIcon, {\n    className: classNames(`${splitBarPrefixCls}-collapse-icon`, `${splitBarPrefixCls}-collapse-start`)\n  }))), endCollapsible && (/*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(`${splitBarPrefixCls}-collapse-bar`, `${splitBarPrefixCls}-collapse-bar-end`, getVisibilityClass(showEndCollapsibleIcon)),\n    onClick: () => onCollapse(index, 'end')\n  }, /*#__PURE__*/React.createElement(EndIcon, {\n    className: classNames(`${splitBarPrefixCls}-collapse-icon`, `${splitBarPrefixCls}-collapse-end`)\n  }))));\n};\nexport default SplitBar;","import { resetComponent } from '../../style';\nimport { genStyleHooks } from '../../theme/internal';\nconst genRtlStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [`&-rtl${componentCls}-horizontal`]: {\n      [`> ${componentCls}-bar`]: {\n        [`${componentCls}-bar-collapse-previous`]: {\n          insetInlineEnd: 0,\n          insetInlineStart: 'unset'\n        },\n        [`${componentCls}-bar-collapse-next`]: {\n          insetInlineEnd: 'unset',\n          insetInlineStart: 0\n        }\n      }\n    },\n    [`&-rtl${componentCls}-vertical`]: {\n      [`> ${componentCls}-bar`]: {\n        [`${componentCls}-bar-collapse-previous`]: {\n          insetInlineEnd: '50%',\n          insetInlineStart: 'unset'\n        },\n        [`${componentCls}-bar-collapse-next`]: {\n          insetInlineEnd: '50%',\n          insetInlineStart: 'unset'\n        }\n      }\n    }\n  };\n};\nconst centerStyle = {\n  position: 'absolute',\n  top: '50%',\n  left: {\n    _skip_check_: true,\n    value: '50%'\n  },\n  transform: 'translate(-50%, -50%)'\n};\nconst genSplitterStyle = token => {\n  const {\n    componentCls,\n    colorFill,\n    splitBarDraggableSize,\n    splitBarSize,\n    splitTriggerSize,\n    controlItemBgHover,\n    controlItemBgActive,\n    controlItemBgActiveHover,\n    prefixCls\n  } = token;\n  const splitBarCls = `${componentCls}-bar`;\n  const splitMaskCls = `${componentCls}-mask`;\n  const splitPanelCls = `${componentCls}-panel`;\n  const halfTriggerSize = token.calc(splitTriggerSize).div(2).equal();\n  const splitterBarPreviewOffsetVar = `${prefixCls}-bar-preview-offset`;\n  const splitterBarPreviewStyle = {\n    position: 'absolute',\n    background: token.colorPrimary,\n    opacity: 0.2,\n    pointerEvents: 'none',\n    transition: 'none',\n    zIndex: 1,\n    display: 'none'\n  };\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'flex',\n      width: '100%',\n      height: '100%',\n      alignItems: 'stretch',\n      // ======================== SplitBar ========================\n      // Use `>` to avoid conflict with mix layout\n      [`> ${splitBarCls}`]: {\n        flex: 'none',\n        position: 'relative',\n        userSelect: 'none',\n        // ======================= Dragger =======================\n        [`${splitBarCls}-dragger`]: Object.assign(Object.assign({}, centerStyle), {\n          zIndex: 1,\n          // Hover background\n          '&::before': Object.assign({\n            content: '\"\"',\n            background: controlItemBgHover\n          }, centerStyle),\n          // Spinner\n          '&::after': Object.assign({\n            content: '\"\"',\n            background: colorFill\n          }, centerStyle),\n          // Hover\n          [`&:hover:not(${splitBarCls}-dragger-active)`]: {\n            '&::before': {\n              background: controlItemBgActive\n            }\n          },\n          // Active\n          '&-active': {\n            zIndex: 2,\n            '&::before': {\n              background: controlItemBgActiveHover\n            }\n          },\n          // Disabled, not use `pointer-events: none` since still need trigger collapse\n          [`&-disabled${splitBarCls}-dragger`]: {\n            zIndex: 0,\n            '&, &:hover, &-active': {\n              cursor: 'default',\n              '&::before': {\n                background: controlItemBgHover\n              }\n            },\n            '&::after': {\n              display: 'none'\n            }\n          }\n        }),\n        // ======================= Collapse =======================\n        [`${splitBarCls}-collapse-bar`]: Object.assign(Object.assign({}, centerStyle), {\n          zIndex: token.zIndexPopupBase,\n          background: controlItemBgHover,\n          fontSize: token.fontSizeSM,\n          borderRadius: token.borderRadiusXS,\n          color: token.colorText,\n          cursor: 'pointer',\n          opacity: 0,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          // Hover\n          '&:hover': {\n            background: controlItemBgActive\n          },\n          // Active\n          '&:active': {\n            background: controlItemBgActiveHover\n          }\n        }),\n        '&:hover, &:active': {\n          [`${splitBarCls}-collapse-bar-hover-only`]: {\n            opacity: 1\n          }\n        },\n        [`${splitBarCls}-collapse-bar-hover-only`]: {\n          '@media(hover:none)': {\n            opacity: 1\n          }\n        },\n        [`${splitBarCls}-collapse-bar-always-hidden`]: {\n          display: 'none'\n        },\n        [`${splitBarCls}-collapse-bar-always-visible`]: {\n          opacity: 1\n        }\n      },\n      // =========================== Mask =========================\n      // Util dom for handle cursor\n      [splitMaskCls]: {\n        position: 'fixed',\n        zIndex: token.zIndexPopupBase,\n        inset: 0,\n        '&-horizontal': {\n          cursor: 'col-resize'\n        },\n        '&-vertical': {\n          cursor: 'row-resize'\n        }\n      },\n      // ==========================================================\n      // ==                        Layout                        ==\n      // ==========================================================\n      '&-horizontal': {\n        flexDirection: 'row',\n        [`> ${splitBarCls}`]: {\n          width: 0,\n          // ======================= Preview =======================\n          [`${splitBarCls}-preview`]: Object.assign(Object.assign({\n            height: '100%',\n            width: splitBarSize\n          }, splitterBarPreviewStyle), {\n            [`&${splitBarCls}-preview-active`]: {\n              display: 'block',\n              transform: `translateX(var(--${splitterBarPreviewOffsetVar}))`\n            }\n          }),\n          // ======================= Dragger =======================\n          [`${splitBarCls}-dragger`]: {\n            cursor: 'col-resize',\n            height: '100%',\n            width: splitTriggerSize,\n            '&::before': {\n              height: '100%',\n              width: splitBarSize\n            },\n            '&::after': {\n              height: splitBarDraggableSize,\n              width: splitBarSize\n            }\n          },\n          // ======================= Collapse =======================\n          [`${splitBarCls}-collapse-bar`]: {\n            width: token.fontSizeSM,\n            height: token.controlHeightSM,\n            '&-start': {\n              left: {\n                _skip_check_: true,\n                value: 'auto'\n              },\n              right: {\n                _skip_check_: true,\n                value: halfTriggerSize\n              },\n              transform: 'translateY(-50%)'\n            },\n            '&-end': {\n              left: {\n                _skip_check_: true,\n                value: halfTriggerSize\n              },\n              right: {\n                _skip_check_: true,\n                value: 'auto'\n              },\n              transform: 'translateY(-50%)'\n            }\n          }\n        }\n      },\n      '&-vertical': {\n        flexDirection: 'column',\n        [`> ${splitBarCls}`]: {\n          height: 0,\n          // ======================= Preview =======================\n          [`${splitBarCls}-preview`]: Object.assign(Object.assign({\n            height: splitBarSize,\n            width: '100%'\n          }, splitterBarPreviewStyle), {\n            [`&${splitBarCls}-preview-active`]: {\n              display: 'block',\n              transform: `translateY(var(--${splitterBarPreviewOffsetVar}))`\n            }\n          }),\n          // ======================= Dragger =======================\n          [`${splitBarCls}-dragger`]: {\n            cursor: 'row-resize',\n            width: '100%',\n            height: splitTriggerSize,\n            '&::before': {\n              width: '100%',\n              height: splitBarSize\n            },\n            '&::after': {\n              width: splitBarDraggableSize,\n              height: splitBarSize\n            }\n          },\n          // ======================= Collapse =======================\n          [`${splitBarCls}-collapse-bar`]: {\n            height: token.fontSizeSM,\n            width: token.controlHeightSM,\n            '&-start': {\n              top: 'auto',\n              bottom: halfTriggerSize,\n              transform: 'translateX(-50%)'\n            },\n            '&-end': {\n              top: halfTriggerSize,\n              bottom: 'auto',\n              transform: 'translateX(-50%)'\n            }\n          }\n        }\n      },\n      // ========================= Panels =========================\n      [splitPanelCls]: {\n        overflow: 'auto',\n        padding: '0 1px',\n        scrollbarWidth: 'thin',\n        boxSizing: 'border-box',\n        '&-hidden': {\n          padding: 0,\n          overflow: 'hidden'\n        },\n        [`&:has(${componentCls}:only-child)`]: {\n          overflow: 'hidden'\n        }\n      }\n    }), genRtlStyle(token))\n  };\n};\nexport const prepareComponentToken = token => {\n  var _a;\n  const splitBarSize = token.splitBarSize || 2;\n  const splitTriggerSize = token.splitTriggerSize || 6;\n  // https://github.com/ant-design/ant-design/pull/51223\n  const resizeSpinnerSize = token.resizeSpinnerSize || 20;\n  const splitBarDraggableSize = (_a = token.splitBarDraggableSize) !== null && _a !== void 0 ? _a : resizeSpinnerSize;\n  return {\n    splitBarSize,\n    splitTriggerSize,\n    splitBarDraggableSize,\n    resizeSpinnerSize\n  };\n};\n// ============================== Export ==============================\nexport default genStyleHooks('Splitter', genSplitterStyle, prepareComponentToken);","\"use client\";\n\n/* eslint-disable react/no-array-index-key */\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport { devUseWarning } from '../_util/warning';\nimport { useComponentConfig } from '../config-provider/context';\nimport useCSSVarCls from '../config-provider/hooks/useCSSVarCls';\nimport useItems from './hooks/useItems';\nimport useResizable from './hooks/useResizable';\nimport useResize from './hooks/useResize';\nimport useSizes from './hooks/useSizes';\nimport { InternalPanel } from './Panel';\nimport SplitBar from './SplitBar';\nimport useStyle from './style';\nconst Splitter = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    style,\n    layout = 'horizontal',\n    children,\n    rootClassName,\n    onResizeStart,\n    onResize,\n    onResizeEnd,\n    lazy\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    className: contextClassName,\n    style: contextStyle\n  } = useComponentConfig('splitter');\n  const prefixCls = getPrefixCls('splitter', customizePrefixCls);\n  const rootCls = useCSSVarCls(prefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, rootCls);\n  // ======================== Direct ========================\n  const isVertical = layout === 'vertical';\n  const isRTL = direction === 'rtl';\n  const reverse = !isVertical && isRTL;\n  // ====================== Items Data ======================\n  const items = useItems(children);\n  // >>> Warning for uncontrolled\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Splitter');\n    const existSize = items.some(item => item.size !== undefined);\n    const existUndefinedSize = items.some(item => item.size === undefined);\n    if (existSize && existUndefinedSize && !onResize) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usage', 'When part of `Splitter.Panel` has `size`, `onResize` is required or change `size` to `defaultSize`.') : void 0;\n    }\n  }\n  // ====================== Container =======================\n  const [containerSize, setContainerSize] = useState();\n  const onContainerResize = size => {\n    const {\n      offsetWidth,\n      offsetHeight\n    } = size;\n    const containerSize = isVertical ? offsetHeight : offsetWidth;\n    // Skip when container has no size, Such as nested in a hidden tab panel\n    // to fix: https://github.com/ant-design/ant-design/issues/51106\n    if (containerSize === 0) {\n      return;\n    }\n    setContainerSize(containerSize);\n  };\n  // ========================= Size =========================\n  const [panelSizes, itemPxSizes, itemPtgSizes, itemPtgMinSizes, itemPtgMaxSizes, updateSizes] = useSizes(items, containerSize);\n  // ====================== Resizable =======================\n  const resizableInfos = useResizable(items, itemPxSizes, isRTL);\n  const [onOffsetStart, onOffsetUpdate, onOffsetEnd, onCollapse, movingIndex] = useResize(items, resizableInfos, itemPtgSizes, containerSize, updateSizes, isRTL);\n  // ======================== Events ========================\n  const onInternalResizeStart = useEvent(index => {\n    onOffsetStart(index);\n    onResizeStart === null || onResizeStart === void 0 ? void 0 : onResizeStart(itemPxSizes);\n  });\n  const onInternalResizeUpdate = useEvent((index, offset, lazyEnd) => {\n    const nextSizes = onOffsetUpdate(index, offset);\n    if (lazyEnd) {\n      onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(nextSizes);\n    } else {\n      onResize === null || onResize === void 0 ? void 0 : onResize(nextSizes);\n    }\n  });\n  const onInternalResizeEnd = useEvent(lazyEnd => {\n    onOffsetEnd();\n    if (!lazyEnd) {\n      onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(itemPxSizes);\n    }\n  });\n  const onInternalCollapse = useEvent((index, type) => {\n    const nextSizes = onCollapse(index, type);\n    onResize === null || onResize === void 0 ? void 0 : onResize(nextSizes);\n    onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(nextSizes);\n  });\n  // ======================== Styles ========================\n  const containerClassName = classNames(prefixCls, className, `${prefixCls}-${layout}`, {\n    [`${prefixCls}-rtl`]: isRTL\n  }, rootClassName, contextClassName, cssVarCls, rootCls, hashId);\n  // ======================== Render ========================\n  const maskCls = `${prefixCls}-mask`;\n  const stackSizes = React.useMemo(() => {\n    const mergedSizes = [];\n    let stack = 0;\n    for (let i = 0; i < items.length; i += 1) {\n      stack += itemPtgSizes[i];\n      mergedSizes.push(stack);\n    }\n    return mergedSizes;\n  }, [itemPtgSizes]);\n  const mergedStyle = Object.assign(Object.assign({}, contextStyle), style);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(ResizeObserver, {\n    onResize: onContainerResize\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyle,\n    className: containerClassName\n  }, items.map((item, idx) => {\n    // Panel\n    const panel = /*#__PURE__*/React.createElement(InternalPanel, Object.assign({}, item, {\n      prefixCls: prefixCls,\n      size: panelSizes[idx]\n    }));\n    // Split Bar\n    let splitBar = null;\n    const resizableInfo = resizableInfos[idx];\n    if (resizableInfo) {\n      const ariaMinStart = (stackSizes[idx - 1] || 0) + itemPtgMinSizes[idx];\n      const ariaMinEnd = (stackSizes[idx + 1] || 100) - itemPtgMaxSizes[idx + 1];\n      const ariaMaxStart = (stackSizes[idx - 1] || 0) + itemPtgMaxSizes[idx];\n      const ariaMaxEnd = (stackSizes[idx + 1] || 100) - itemPtgMinSizes[idx + 1];\n      splitBar = /*#__PURE__*/React.createElement(SplitBar, {\n        lazy: lazy,\n        index: idx,\n        active: movingIndex === idx,\n        prefixCls: prefixCls,\n        vertical: isVertical,\n        resizable: resizableInfo.resizable,\n        ariaNow: stackSizes[idx] * 100,\n        ariaMin: Math.max(ariaMinStart, ariaMinEnd) * 100,\n        ariaMax: Math.min(ariaMaxStart, ariaMaxEnd) * 100,\n        startCollapsible: resizableInfo.startCollapsible,\n        endCollapsible: resizableInfo.endCollapsible,\n        showStartCollapsibleIcon: resizableInfo.showStartCollapsibleIcon,\n        showEndCollapsibleIcon: resizableInfo.showEndCollapsibleIcon,\n        onOffsetStart: onInternalResizeStart,\n        onOffsetUpdate: (index, offsetX, offsetY, lazyEnd) => {\n          let offset = isVertical ? offsetY : offsetX;\n          if (reverse) {\n            offset = -offset;\n          }\n          onInternalResizeUpdate(index, offset, lazyEnd);\n        },\n        onOffsetEnd: onInternalResizeEnd,\n        onCollapse: onInternalCollapse,\n        containerSize: containerSize || 0\n      });\n    }\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: `split-panel-${idx}`\n    }, panel, splitBar);\n  }), typeof movingIndex === 'number' && (/*#__PURE__*/React.createElement(\"div\", {\n    \"aria-hidden\": true,\n    className: classNames(maskCls, `${maskCls}-${layout}`)\n  })))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Splitter.displayName = 'Splitter';\n}\nexport default Splitter;","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { getPtg } from './useSizes';\n/**\n * Handle user drag resize logic.\n */\nexport default function useResize(items, resizableInfos, percentSizes, containerSize, updateSizes, isRTL) {\n  const limitSizes = items.map(item => [item.min, item.max]);\n  const mergedContainerSize = containerSize || 0;\n  const ptg2px = ptg => ptg * mergedContainerSize;\n  // ======================== Resize ========================\n  function getLimitSize(str, defaultLimit) {\n    if (typeof str === 'string') {\n      return ptg2px(getPtg(str));\n    }\n    return str !== null && str !== void 0 ? str : defaultLimit;\n  }\n  // Real px sizes\n  const [cacheSizes, setCacheSizes] = React.useState([]);\n  const cacheCollapsedSize = React.useRef([]);\n  /**\n   * When start drag, check the direct is `start` or `end`.\n   * This will handle when 2 splitter bar are in the same position.\n   */\n  const [movingIndex, setMovingIndex] = React.useState(null);\n  const getPxSizes = () => percentSizes.map(ptg2px);\n  const onOffsetStart = index => {\n    setCacheSizes(getPxSizes());\n    setMovingIndex({\n      index,\n      confirmed: false\n    });\n  };\n  const onOffsetUpdate = (index, offset) => {\n    var _a;\n    // First time trigger move index update is not sync in the state\n    let confirmedIndex = null;\n    // We need to know what the real index is.\n    if ((!movingIndex || !movingIndex.confirmed) && offset !== 0) {\n      // Search for the real index\n      if (offset > 0) {\n        confirmedIndex = index;\n        setMovingIndex({\n          index,\n          confirmed: true\n        });\n      } else {\n        for (let i = index; i >= 0; i -= 1) {\n          if (cacheSizes[i] > 0 && resizableInfos[i].resizable) {\n            confirmedIndex = i;\n            setMovingIndex({\n              index: i,\n              confirmed: true\n            });\n            break;\n          }\n        }\n      }\n    }\n    const mergedIndex = (_a = confirmedIndex !== null && confirmedIndex !== void 0 ? confirmedIndex : movingIndex === null || movingIndex === void 0 ? void 0 : movingIndex.index) !== null && _a !== void 0 ? _a : index;\n    const numSizes = _toConsumableArray(cacheSizes);\n    const nextIndex = mergedIndex + 1;\n    // Get boundary\n    const startMinSize = getLimitSize(limitSizes[mergedIndex][0], 0);\n    const endMinSize = getLimitSize(limitSizes[nextIndex][0], 0);\n    const startMaxSize = getLimitSize(limitSizes[mergedIndex][1], mergedContainerSize);\n    const endMaxSize = getLimitSize(limitSizes[nextIndex][1], mergedContainerSize);\n    let mergedOffset = offset;\n    // Align with the boundary\n    if (numSizes[mergedIndex] + mergedOffset < startMinSize) {\n      mergedOffset = startMinSize - numSizes[mergedIndex];\n    }\n    if (numSizes[nextIndex] - mergedOffset < endMinSize) {\n      mergedOffset = numSizes[nextIndex] - endMinSize;\n    }\n    if (numSizes[mergedIndex] + mergedOffset > startMaxSize) {\n      mergedOffset = startMaxSize - numSizes[mergedIndex];\n    }\n    if (numSizes[nextIndex] - mergedOffset > endMaxSize) {\n      mergedOffset = numSizes[nextIndex] - endMaxSize;\n    }\n    // Do offset\n    numSizes[mergedIndex] += mergedOffset;\n    numSizes[nextIndex] -= mergedOffset;\n    updateSizes(numSizes);\n    return numSizes;\n  };\n  const onOffsetEnd = () => {\n    setMovingIndex(null);\n  };\n  // ======================= Collapse =======================\n  const onCollapse = (index, type) => {\n    const currentSizes = getPxSizes();\n    const adjustedType = isRTL ? type === 'start' ? 'end' : 'start' : type;\n    const currentIndex = adjustedType === 'start' ? index : index + 1;\n    const targetIndex = adjustedType === 'start' ? index + 1 : index;\n    const currentSize = currentSizes[currentIndex];\n    const targetSize = currentSizes[targetIndex];\n    if (currentSize !== 0 && targetSize !== 0) {\n      // Collapse directly\n      currentSizes[currentIndex] = 0;\n      currentSizes[targetIndex] += currentSize;\n      cacheCollapsedSize.current[index] = currentSize;\n    } else {\n      const totalSize = currentSize + targetSize;\n      const currentSizeMin = getLimitSize(limitSizes[currentIndex][0], 0);\n      const currentSizeMax = getLimitSize(limitSizes[currentIndex][1], mergedContainerSize);\n      const targetSizeMin = getLimitSize(limitSizes[targetIndex][0], 0);\n      const targetSizeMax = getLimitSize(limitSizes[targetIndex][1], mergedContainerSize);\n      const limitStart = Math.max(currentSizeMin, totalSize - targetSizeMax);\n      const limitEnd = Math.min(currentSizeMax, totalSize - targetSizeMin);\n      const halfOffset = targetSizeMin || (limitEnd - limitStart) / 2;\n      const targetCacheCollapsedSize = cacheCollapsedSize.current[index];\n      const currentCacheCollapsedSize = totalSize - targetCacheCollapsedSize;\n      const shouldUseCache = targetCacheCollapsedSize && targetCacheCollapsedSize <= targetSizeMax && targetCacheCollapsedSize >= targetSizeMin && currentCacheCollapsedSize <= currentSizeMax && currentCacheCollapsedSize >= currentSizeMin;\n      if (shouldUseCache) {\n        currentSizes[targetIndex] = targetCacheCollapsedSize;\n        currentSizes[currentIndex] = currentCacheCollapsedSize;\n      } else {\n        currentSizes[currentIndex] -= halfOffset;\n        currentSizes[targetIndex] += halfOffset;\n      }\n    }\n    updateSizes(currentSizes);\n    return currentSizes;\n  };\n  return [onOffsetStart, onOffsetUpdate, onOffsetEnd, onCollapse, movingIndex === null || movingIndex === void 0 ? void 0 : movingIndex.index];\n}","\"use client\";\n\nimport Panel from './Panel';\nimport SplitterComp from './Splitter';\nconst Splitter = SplitterComp;\nSplitter.Panel = Panel;\nexport default Splitter;"],"names":["InternalPanel","forwardRef","props","ref","prefixCls","className","children","size","style","panelClassName","classNames","hasSize","undefined","React","Object","assign","flexBasis","flexGrow","Panel","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","getCollapsible","collapsible","showCollapsibleIcon","mergedCollapsible","start","end","toArray","filter","item","map","node","restProps","getShowCollapsibleIcon","prev","next","getPtg","str","Number","slice","isPtg","itemSize","endsWith","useSizes","items","containerSize","propSizes","itemsCount","mergedContainerSize","ptg2px","ptg","innerSizes","setInnerSizes","defaultSize","sizes","_a","mergedSizes","postPercentMinSizes","min","postPercentMaxSizes","max","postPercentSizes","ptgList","num","isNaN","ptgSizes","minPtgSizes","maxPtgSizes","currentTotalPtg","undefinedIndexes","forEach","index","push","restPtg","undefinedCount","scale","sumMin","sumMax","limitMin","limitMax","Math","avg","restAvg","result","_toConsumableArray","remain","canAdd","add","autoPtgSizes","postPxSizes","getValidNumber","isFinite","round","vertical","active","ariaNow","ariaMin","ariaMax","resizable","startCollapsible","endCollapsible","onOffsetStart","onOffsetUpdate","onOffsetEnd","onCollapse","lazy","showStartCollapsibleIcon","showEndCollapsibleIcon","splitBarPrefixCls","startPos","setStartPos","useState","constrainedOffset","setConstrainedOffset","constrainedOffsetX","constrainedOffsetY","handleLazyMove","useEvent","offsetX","offsetY","constrainedOffsetValue","rawOffset","currentPos","newPos","minAllowed","maxAllowed","getConstrainedOffset","handleLazyEnd","getVisibilityClass","mode","useLayoutEffect","eventHandlerMap","mousemove","pageX","pageY","mouseup","onMouseUp","touchmove","touches","touch","touchend","handleTouchEnd","event","handler","entries","window","addEventListener","removeEventListener","transformStyle","StartIcon","UpOutlined","LeftOutlined","EndIcon","DownOutlined","RightOutlined","role","onMouseDown","currentTarget","onTouchStart","onClick","genRtlStyle","token","componentCls","insetInlineEnd","insetInlineStart","centerStyle","position","top","left","_skip_check_","value","transform","genStyleHooks","colorFill","splitBarDraggableSize","splitBarSize","splitTriggerSize","controlItemBgHover","controlItemBgActive","controlItemBgActiveHover","splitBarCls","splitMaskCls","splitPanelCls","halfTriggerSize","calc","div","equal","splitterBarPreviewOffsetVar","splitterBarPreviewStyle","background","colorPrimary","opacity","pointerEvents","transition","zIndex","display","resetComponent","width","height","alignItems","flex","userSelect","content","cursor","zIndexPopupBase","fontSize","fontSizeSM","borderRadius","borderRadiusXS","color","colorText","justifyContent","inset","flexDirection","controlHeightSM","right","bottom","overflow","padding","scrollbarWidth","boxSizing","resizeSpinnerSize","customizePrefixCls","layout","rootClassName","onResizeStart","onResize","onResizeEnd","getPrefixCls","direction","contextClassName","contextStyle","useComponentConfig","rootCls","useCSSVarCls","wrapCSSVar","hashId","cssVarCls","useStyle","isVertical","isRTL","reverse","useItems","setContainerSize","panelSizes","itemPxSizes","itemPtgSizes","itemPtgMinSizes","itemPtgMaxSizes","updateSizes","resizableInfos","pxSizes","resizeInfos","prevItem","nextItem","prevSize","nextSize","prevResizable","prevMin","prevCollapsible","nextResizable","nextMin","nextCollapsible","mergedResizable","prevEndCollapsible","nextStartExpandable","nextStartCollapsible","prevEndExpandable","useResizable","movingIndex","percentSizes","limitSizes","getLimitSize","defaultLimit","cacheSizes","setCacheSizes","cacheCollapsedSize","setMovingIndex","getPxSizes","confirmed","offset","confirmedIndex","mergedIndex","numSizes","nextIndex","startMinSize","endMinSize","startMaxSize","endMaxSize","mergedOffset","type","currentSizes","adjustedType","currentIndex","targetIndex","currentSize","targetSize","current","totalSize","currentSizeMin","currentSizeMax","targetSizeMin","targetSizeMax","limitStart","limitEnd","halfOffset","targetCacheCollapsedSize","currentCacheCollapsedSize","useResize","onInternalResizeStart","onInternalResizeUpdate","lazyEnd","nextSizes","onInternalResizeEnd","onInternalCollapse","containerClassName","maskCls","stackSizes","stack","mergedStyle","ResizeObserver","offsetWidth","offsetHeight","idx","panel","splitBar","resizableInfo","ariaMinStart","ariaMinEnd","ariaMaxStart","ariaMaxEnd","SplitBar","key","Splitter","SplitterComp"],"sourceRoot":""}