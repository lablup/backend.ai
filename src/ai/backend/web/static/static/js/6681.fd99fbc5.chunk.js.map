{"version":3,"file":"static/js/6681.fd99fbc5.chunk.js","mappings":"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","sources":["__generated__/AgentListQuery.graphql.ts","__generated__/AgentDetailModalFragment.graphql.ts","components/AgentDetailModal.tsx","__generated__/AgentSettingModalMutation.graphql.ts","__generated__/AgentSettingModalFragment.graphql.ts","components/AgentSettingModal.tsx","components/AgentList.tsx","components/TableColumnsSettingModal.tsx","hooks/useHiddenColumnKeysSetting.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<1fcf7648fca8f26acc45b90619893b54>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentListQuery$variables = {\n  filter?: string | null | undefined;\n  limit: number;\n  offset: number;\n  order?: string | null | undefined;\n  status?: string | null | undefined;\n};\nexport type AgentListQuery$data = {\n  readonly agent_list: {\n    readonly items: ReadonlyArray<{\n      readonly addr: string | null | undefined;\n      readonly architecture: string | null | undefined;\n      readonly available_slots: string | null | undefined;\n      readonly compute_plugins: string | null | undefined;\n      readonly cpu_cur_pct: number | null | undefined;\n      readonly first_contact: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly live_stat: string | null | undefined;\n      readonly lost_at: string | null | undefined;\n      readonly mem_cur_bytes: number | null | undefined;\n      readonly occupied_slots: string | null | undefined;\n      readonly region: string | null | undefined;\n      readonly scaling_group: string | null | undefined;\n      readonly schedulable: boolean | null | undefined;\n      readonly status: string | null | undefined;\n      readonly status_changed: string | null | undefined;\n      readonly version: string | null | undefined;\n      readonly \" $fragmentSpreads\": FragmentRefs<\"AgentDetailModalFragment\" | \"AgentSettingModalFragment\">;\n    } | null | undefined>;\n    readonly total_count: number;\n  } | null | undefined;\n};\nexport type AgentListQuery = {\n  response: AgentListQuery$data;\n  variables: AgentListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"order\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv5 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"filter\",\n    \"variableName\": \"filter\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"limit\",\n    \"variableName\": \"limit\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"offset\",\n    \"variableName\": \"offset\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"order\",\n    \"variableName\": \"order\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"status\",\n    \"variableName\": \"status\"\n  }\n],\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"version\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"addr\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"region\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"compute_plugins\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"first_contact\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"lost_at\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status_changed\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"live_stat\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"cpu_cur_pct\",\n  \"storageKey\": null\n},\nv18 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mem_cur_bytes\",\n  \"storageKey\": null\n},\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"available_slots\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"occupied_slots\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"scaling_group\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"schedulable\",\n  \"storageKey\": null\n},\nv23 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"total_count\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v5/*: any*/),\n        \"concreteType\": \"AgentList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"agent_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Agent\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/),\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"AgentDetailModalFragment\"\n              },\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"AgentSettingModalFragment\"\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v23/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v0/*: any*/),\n      (v4/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"AgentListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v5/*: any*/),\n        \"concreteType\": \"AgentList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"agent_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Agent\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          (v23/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"e1a551c0261ce59a4b187a3bbb29b86b\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AgentListQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $filter: String\\n  $status: String\\n  $order: String\\n) {\\n  agent_list(limit: $limit, offset: $offset, filter: $filter, status: $status, order: $order) {\\n    items {\\n      id\\n      status\\n      version\\n      addr\\n      architecture\\n      region\\n      compute_plugins\\n      first_contact\\n      lost_at\\n      status_changed\\n      live_stat\\n      cpu_cur_pct\\n      mem_cur_bytes\\n      available_slots\\n      occupied_slots\\n      scaling_group\\n      schedulable\\n      ...AgentDetailModalFragment\\n      ...AgentSettingModalFragment\\n    }\\n    total_count\\n  }\\n}\\n\\nfragment AgentDetailModalFragment on Agent {\\n  id\\n  live_stat\\n  available_slots\\n  occupied_slots\\n  cpu_cur_pct\\n  mem_cur_bytes\\n}\\n\\nfragment AgentSettingModalFragment on Agent {\\n  id\\n  schedulable\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"1d6c6a390aad71e4b7815a623ca61d86\";\n\nexport default node;\n","/**\n * @generated SignedSource<<367ea7d320c428b094802d3ac53c7989>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentDetailModalFragment$data = {\n  readonly available_slots: string | null | undefined;\n  readonly cpu_cur_pct: number | null | undefined;\n  readonly id: string | null | undefined;\n  readonly live_stat: string | null | undefined;\n  readonly mem_cur_bytes: number | null | undefined;\n  readonly occupied_slots: string | null | undefined;\n  readonly \" $fragmentType\": \"AgentDetailModalFragment\";\n};\nexport type AgentDetailModalFragment$key = {\n  readonly \" $data\"?: AgentDetailModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AgentDetailModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"AgentDetailModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"live_stat\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"available_slots\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"occupied_slots\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"cpu_cur_pct\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"mem_cur_bytes\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Agent\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"cb343a0290034803cca4c2b82a1c1b68\";\n\nexport default node;\n","import { AgentDetailModalFragment$key } from '../__generated__/AgentDetailModalFragment.graphql';\nimport {\n  convertToBinaryUnit,\n  convertToDecimalUnit,\n  toFixedFloorWithoutTrailingZeros,\n} from '../helper';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport { Col, Row, theme, Typography } from 'antd';\nimport { BAIFlex, BAIModal, BAIModalProps } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useFragment } from 'react-relay';\n\ntype LiveStat = {\n  capacity: string;\n  current: string;\n  pct: string;\n  'stats.avg': string;\n  'stats.max': string;\n  unit_hint: string;\n};\n\ninterface AgentDetailModalProps extends BAIModalProps {\n  agentDetailModalFrgmt?: AgentDetailModalFragment$key | null;\n  onRequestClose: () => void;\n}\n\nconst AgentDetailModal: React.FC<AgentDetailModalProps> = ({\n  agentDetailModalFrgmt = null,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n  const agent = useFragment(\n    graphql`\n      fragment AgentDetailModalFragment on Agent {\n        id\n        live_stat\n        available_slots\n        occupied_slots\n        cpu_cur_pct\n        mem_cur_bytes\n      }\n    `,\n    agentDetailModalFrgmt,\n  );\n  const parsedLiveStat = JSON.parse(agent?.live_stat || '{}');\n  const parsedAvailableSlots = JSON.parse(agent?.available_slots || '{}');\n\n  return (\n    <BAIModal\n      {...modalProps}\n      centered\n      title={`${t('agent.DetailedInformation')}: ${agent?.id}`}\n      onCancel={onRequestClose}\n      destroyOnHidden\n      footer={null}\n    >\n      <BAIFlex direction=\"column\" align=\"stretch\" gap={'md'}>\n        <Row gutter={[24, 24]}>\n          <Col xs={24} sm={12}>\n            {parsedLiveStat?.devices?.cpu_util ? (\n              <BAIFlex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                <Typography.Title level={5} style={{ marginTop: 0 }}>\n                  {mergedResourceSlots?.cpu?.human_readable_name}\n                </Typography.Title>\n                {_.map(parsedLiveStat?.devices?.cpu_util, (value, key) => (\n                  <BAIFlex justify=\"between\">\n                    <Typography.Text\n                      key={key}\n                      type=\"secondary\"\n                      style={{ flex: 0.5 }}\n                    >\n                      {mergedResourceSlots?.cpu?.human_readable_name}\n                      {key}\n                    </Typography.Text>\n                    <BAIProgressWithLabel\n                      percent={value?.pct}\n                      valueLabel={\n                        toFixedFloorWithoutTrailingZeros(value?.pct, 1) + '%'\n                      }\n                    />\n                  </BAIFlex>\n                ))}\n              </BAIFlex>\n            ) : null}\n          </Col>\n          <Col xs={24} sm={12}>\n            {parsedAvailableSlots?.mem ? (\n              <BAIFlex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                <Typography.Title level={5} style={{ marginTop: 0 }}>\n                  {mergedResourceSlots?.mem?.human_readable_name}\n                </Typography.Title>\n                <BAIProgressWithLabel\n                  percent={\n                    (_.toNumber(\n                      convertToBinaryUnit(_.toString(agent?.mem_cur_bytes), 'g')\n                        ?.number,\n                    ) /\n                      _.toNumber(\n                        convertToBinaryUnit(parsedAvailableSlots?.mem, 'g')\n                          ?.number,\n                      )) *\n                      100 || 0\n                  }\n                  valueLabel={`${\n                    convertToBinaryUnit(_.toString(agent?.mem_cur_bytes), 'g')\n                      ?.displayValue\n                  } / ${convertToBinaryUnit(parsedAvailableSlots?.mem, 'g')?.displayValue}`}\n                />\n              </BAIFlex>\n            ) : null}\n            {parsedLiveStat?.node ? (\n              <BAIFlex direction=\"column\" gap=\"xxs\" align=\"start\">\n                <Typography.Title level={5} style={{ marginTop: 0 }}>\n                  {t('session.launcher.Network')}\n                </Typography.Title>\n                <BAIFlex gap=\"xl\">\n                  <Typography.Text>TX:</Typography.Text>\n                  <Typography.Text>\n                    {\n                      convertToDecimalUnit(\n                        parsedLiveStat?.node?.net_tx?.current,\n                        'm',\n                        2,\n                      )?.displayValue\n                    }\n                    B\n                  </Typography.Text>\n                </BAIFlex>\n                <BAIFlex gap=\"xl\">\n                  <Typography.Text>RX:</Typography.Text>\n                  <Typography.Text>\n                    {\n                      convertToDecimalUnit(\n                        parsedLiveStat?.node?.net_rx?.current,\n                        'm',\n                        2,\n                      )?.displayValue\n                    }\n                    B\n                  </Typography.Text>\n                </BAIFlex>\n              </BAIFlex>\n            ) : null}\n          </Col>\n        </Row>\n        <Row gutter={[24, 24]} style={{ marginBottom: token.marginSM }}>\n          {_.map(_.keys(parsedLiveStat?.devices), (key) => {\n            if (['cpu_util', 'mem', 'disk', 'net_rx', 'net_tx'].includes(key)) {\n              return null;\n            } else if (_.includes(key, '_util')) {\n              const deviceName = _.split(key, '_')[0] + '.device';\n              return (\n                <Col xs={24} sm={12}>\n                  <BAIFlex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                    <Typography.Title level={5} style={{ marginTop: 0 }}>\n                      {mergedResourceSlots?.[deviceName]?.human_readable_name}{' '}\n                      {t('session.Utilization')}\n                    </Typography.Title>\n                    {_.map(\n                      _.toPairs(parsedLiveStat?.devices[key]),\n                      (value, index) => (\n                        <BAIFlex justify=\"between\">\n                          <Typography.Text\n                            key={index}\n                            type=\"secondary\"\n                            style={{ flex: 0.5 }}\n                          >\n                            {\n                              mergedResourceSlots?.[deviceName]\n                                ?.human_readable_name\n                            }\n                            {index}\n                          </Typography.Text>\n                          <BAIProgressWithLabel\n                            percent={_.toFinite((value?.[1] as LiveStat)?.pct)}\n                            valueLabel={\n                              toFixedFloorWithoutTrailingZeros(\n                                (value?.[1] as LiveStat)?.pct,\n                                1,\n                              ) + '%'\n                            }\n                          />\n                        </BAIFlex>\n                      ),\n                    )}\n                  </BAIFlex>\n                </Col>\n              );\n            } else if (_.includes(key, '_mem')) {\n              const deviceName = _.split(key, '_')[0] + '.device';\n              return (\n                <Col xs={24} sm={12}>\n                  <BAIFlex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                    <Typography.Title level={5} style={{ marginTop: 0 }}>\n                      {mergedResourceSlots?.[deviceName]?.human_readable_name}{' '}\n                      {t('session.launcher.Memory')}\n                    </Typography.Title>\n                    {_.map(\n                      _.toPairs(parsedLiveStat?.devices[key]),\n                      (value, index) => (\n                        <BAIFlex justify=\"between\">\n                          <Typography.Text\n                            key={index}\n                            type=\"secondary\"\n                            style={{ flex: 0.5 }}\n                          >\n                            {\n                              mergedResourceSlots?.[deviceName]\n                                ?.human_readable_name\n                            }\n                            {index}\n                          </Typography.Text>\n                          <BAIProgressWithLabel\n                            percent={_.toFinite((value?.[1] as LiveStat)?.pct)}\n                            valueLabel={\n                              toFixedFloorWithoutTrailingZeros(\n                                (value?.[1] as LiveStat)?.pct,\n                                1,\n                              ) + '%'\n                            }\n                          />\n                        </BAIFlex>\n                      ),\n                    )}\n                  </BAIFlex>\n                </Col>\n              );\n            }\n          })}\n        </Row>\n      </BAIFlex>\n    </BAIModal>\n  );\n};\n\nexport default AgentDetailModal;\n","/**\n * @generated SignedSource<<b98a20d912bb8bece6193f100224dd3d>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ModifyAgentInput = {\n  scaling_group?: string | null | undefined;\n  schedulable?: boolean | null | undefined;\n};\nexport type AgentSettingModalMutation$variables = {\n  id: string;\n  props: ModifyAgentInput;\n};\nexport type AgentSettingModalMutation$data = {\n  readonly modify_agent: {\n    readonly msg: string | null | undefined;\n    readonly ok: boolean | null | undefined;\n  } | null | undefined;\n};\nexport type AgentSettingModalMutation = {\n  response: AgentSettingModalMutation$data;\n  variables: AgentSettingModalMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"props\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"id\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"props\"\n      }\n    ],\n    \"concreteType\": \"ModifyAgent\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_agent\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"ok\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"msg\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentSettingModalMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"AgentSettingModalMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1a9e43d4bc6e78f3949d1a2a397ff00e\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentSettingModalMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation AgentSettingModalMutation(\\n  $id: String!\\n  $props: ModifyAgentInput!\\n) {\\n  modify_agent(id: $id, props: $props) {\\n    ok\\n    msg\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"13b2a6a91c7f08bbced5fde155ded60e\";\n\nexport default node;\n","/**\n * @generated SignedSource<<c9eae318cc6abeb4bdbb70f7721de0ed>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentSettingModalFragment$data = {\n  readonly id: string | null | undefined;\n  readonly schedulable: boolean | null | undefined;\n  readonly \" $fragmentType\": \"AgentSettingModalFragment\";\n};\nexport type AgentSettingModalFragment$key = {\n  readonly \" $data\"?: AgentSettingModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AgentSettingModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"AgentSettingModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"schedulable\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Agent\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"303f8ee06508c3b28511ab1a24a305d5\";\n\nexport default node;\n","import {\n  AgentSettingModalFragment$data,\n  AgentSettingModalFragment$key,\n} from '../__generated__/AgentSettingModalFragment.graphql';\nimport { AgentSettingModalMutation } from '../__generated__/AgentSettingModalMutation.graphql';\nimport { App, Form, FormInstance, Switch } from 'antd';\nimport { BAIModal, BAIModalProps } from 'backend.ai-ui';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useFragment, useMutation } from 'react-relay';\n\ninterface AgentSettingModalProps extends BAIModalProps {\n  agentSettingModalFrgmt?: AgentSettingModalFragment$key | null;\n  onRequestClose: (success?: boolean) => void;\n}\n\nconst AgentSettingModal: React.FC<AgentSettingModalProps> = ({\n  agentSettingModalFrgmt = null,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { message } = App.useApp();\n  const formRef = useRef<FormInstance<AgentSettingModalFragment$data> | null>(\n    null,\n  );\n  const agent = useFragment(\n    graphql`\n      fragment AgentSettingModalFragment on Agent {\n        id\n        schedulable\n      }\n    `,\n    agentSettingModalFrgmt,\n  );\n\n  const [commitModifyAgentSetting, isInFlightCommitModifyAgentSetting] =\n    useMutation<AgentSettingModalMutation>(graphql`\n      mutation AgentSettingModalMutation(\n        $id: String!\n        $props: ModifyAgentInput!\n      ) {\n        modify_agent(id: $id, props: $props) {\n          ok\n          msg\n        }\n      }\n    `);\n\n  return (\n    <BAIModal\n      {...modalProps}\n      title={`${t('agent.AgentSetting')}: ${agent?.id}`}\n      onCancel={() => onRequestClose()}\n      destroyOnHidden\n      width={300}\n      confirmLoading={isInFlightCommitModifyAgentSetting}\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            commitModifyAgentSetting({\n              variables: {\n                id: agent?.id || '',\n                props: {\n                  schedulable: values.schedulable,\n                },\n              },\n              onCompleted(res, errors) {\n                if (!res?.modify_agent?.ok || errors) {\n                  message.error(res?.modify_agent?.msg);\n                  onRequestClose();\n                } else {\n                  message.success(t('agent.AgentSettingUpdated'));\n                  onRequestClose(true);\n                }\n              },\n              onError(err) {\n                message.error(err?.message);\n              },\n            });\n          })\n          .catch(() => {});\n      }}\n    >\n      <Form ref={formRef} preserve={false} initialValues={{ ...agent }}>\n        <Form.Item\n          name=\"schedulable\"\n          label={t('agent.Schedulable')}\n          valuePropName=\"checked\"\n          required={true}\n        >\n          <Switch />\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default AgentSettingModal;\n","import { AgentDetailModalFragment$key } from '../__generated__/AgentDetailModalFragment.graphql';\nimport {\n  AgentListQuery,\n  AgentListQuery$data,\n} from '../__generated__/AgentListQuery.graphql';\nimport { AgentSettingModalFragment$key } from '../__generated__/AgentSettingModalFragment.graphql';\nimport {\n  convertToBinaryUnit,\n  convertToDecimalUnit,\n  convertUnitValue,\n  toFixedFloorWithoutTrailingZeros,\n} from '../helper';\nimport { INITIAL_FETCH_KEY, useSuspendedBackendaiClient } from '../hooks';\nimport { ResourceSlotName, useResourceSlotsDetails } from '../hooks/backendai';\nimport { useBAIPaginationOptionStateOnSearchParam } from '../hooks/reactPaginationQueryOptions';\nimport { useHiddenColumnKeysSetting } from '../hooks/useHiddenColumnKeysSetting';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport AgentDetailModal from './AgentDetailModal';\nimport AgentSettingModal from './AgentSettingModal';\nimport BAIIntervalView from './BAIIntervalView';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport BAIRadioGroup from './BAIRadioGroup';\nimport DoubleTag from './DoubleTag';\nimport { ResourceTypeIcon } from './ResourceNumber';\nimport TableColumnsSettingModal from './TableColumnsSettingModal';\nimport {\n  CheckCircleOutlined,\n  InfoCircleOutlined,\n  MinusCircleOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport { useControllableValue, useToggle } from 'ahooks';\nimport { Button, TableProps, Tag, theme, Tooltip, Typography } from 'antd';\nimport { AnyObject } from 'antd/es/_util/type';\nimport { ColumnsType, ColumnType } from 'antd/es/table';\nimport {\n  filterOutNullAndUndefined,\n  BAITable,\n  BAIFlex,\n  BAIPropertyFilter,\n  BAIFlexProps,\n} from 'backend.ai-ui';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useState, useDeferredValue } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\nimport { StringParam, useQueryParams, withDefault } from 'use-query-params';\n\ntype Agent = NonNullable<AgentListQuery$data['agent_list']>['items'][number];\n\ninterface AgentListProps {\n  tableProps?: Omit<TableProps, 'dataSource'>;\n  headerProps?: BAIFlexProps;\n  fetchKey?: string;\n  onChangeFetchKey?: (key: string) => void;\n}\n\nconst AgentList: React.FC<AgentListProps> = ({\n  tableProps,\n  headerProps,\n  ...otherProps\n}) => {\n  'use memo';\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n  const [currentAgentInfo, setCurrentAgentInfo] =\n    useState<AgentDetailModalFragment$key | null>();\n  const [currentSettingAgent, setCurrentSettingAgent] =\n    useState<AgentSettingModalFragment$key | null>();\n  const [visibleColumnSettingModal, { toggle: toggleColumnSettingModal }] =\n    useToggle();\n  const baiClient = useSuspendedBackendaiClient();\n  const [queryParams, setQueryParams] = useQueryParams({\n    status: withDefault(StringParam, 'ALIVE'),\n    filter: withDefault(StringParam, undefined),\n    order: withDefault(StringParam, undefined),\n  });\n\n  const {\n    baiPaginationOption,\n    tablePaginationOption,\n    setTablePaginationOption,\n  } = useBAIPaginationOptionStateOnSearchParam({\n    current: 1,\n    pageSize: 10,\n  });\n\n  const [fetchKey, setFetchKey] = useControllableValue(otherProps, {\n    valuePropName: 'fetchKey',\n    trigger: 'onChangeFetchKey',\n    defaultValue: INITIAL_FETCH_KEY,\n  });\n\n  const queryVariables = {\n    limit: baiPaginationOption.limit,\n    offset: baiPaginationOption.offset,\n    filter: queryParams.filter,\n    order: queryParams.order,\n    status: queryParams.status,\n  };\n\n  const deferredQueryVariables = useDeferredValue(queryVariables);\n  const deferredFetchKey = useDeferredValue(fetchKey);\n\n  const updateFetchKey = () => {\n    setFetchKey(() => new Date().toISOString());\n  };\n\n  const { agent_list } = useLazyLoadQuery<AgentListQuery>(\n    graphql`\n      query AgentListQuery(\n        $limit: Int!\n        $offset: Int!\n        $filter: String\n        $status: String\n        $order: String\n      ) {\n        agent_list(\n          limit: $limit\n          offset: $offset\n          filter: $filter\n          status: $status\n          order: $order\n        ) {\n          items {\n            id\n            status\n            version\n            addr\n            architecture\n            region\n            compute_plugins\n            first_contact\n            lost_at\n            status_changed\n            live_stat\n            cpu_cur_pct\n            mem_cur_bytes\n            available_slots\n            occupied_slots\n            scaling_group\n            schedulable\n            ...AgentDetailModalFragment\n            ...AgentSettingModalFragment\n          }\n          total_count\n        }\n      }\n    `,\n    deferredQueryVariables,\n    {\n      fetchKey: deferredFetchKey,\n      fetchPolicy:\n        deferredFetchKey === INITIAL_FETCH_KEY\n          ? 'store-and-network'\n          : 'network-only',\n    },\n  );\n\n  const columns: ColumnsType<Agent> = [\n    {\n      title: <>ID / {t('agent.Endpoint')}</>,\n      key: 'id',\n      dataIndex: 'id',\n      fixed: 'left',\n      render: (value, record) => {\n        return (\n          <BAIFlex direction=\"column\" align=\"start\">\n            <Typography.Text>{value}</Typography.Text>\n            <Typography.Text type=\"secondary\">{record?.addr}</Typography.Text>\n          </BAIFlex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('agent.Region'),\n      key: 'region',\n      dataIndex: 'region',\n      render: (value) => {\n        const platformData: {\n          [key: string]: { color: string; icon: string };\n        } = {\n          aws: { color: 'orange', icon: 'aws' },\n          amazon: { color: 'orange', icon: 'aws' },\n          azure: { color: 'blue', icon: 'azure' },\n          gcp: { color: 'lightblue', icon: 'gcp' },\n          google: { color: 'lightblue', icon: 'gcp' },\n          nbp: { color: 'green', icon: 'nbp' },\n          naver: { color: 'green', icon: 'nbp' },\n          openstack: { color: 'red', icon: 'openstack' },\n          dgx: { color: 'green', icon: 'local' },\n          local: { color: 'yellow', icon: 'local' },\n        };\n\n        const regionData = _.split(value, '/');\n        const platform = regionData?.[0];\n        const location = regionData?.length > 1 ? regionData[1] : '';\n        const { color, icon } = platformData[platform] || {\n          color: 'yellow',\n          icon: 'local',\n        };\n        return (\n          <BAIFlex gap={'xxs'}>\n            <img\n              alt={value}\n              src={`/resources/icons/${icon}.png`}\n              style={{\n                width: '32px',\n                height: '32px',\n                filter: isDarkMode && icon === 'local' ? 'invert(1)' : '',\n              }}\n            />\n            {location !== '' ? (\n              <DoubleTag\n                values={[\n                  { label: location, color: color },\n                  { label: platform, color: color },\n                ]}\n              />\n            ) : (\n              <Tag color={color}>{platform}</Tag>\n            )}\n          </BAIFlex>\n        );\n      },\n    },\n    {\n      title: t('agent.Architecture'),\n      key: 'architecture',\n      dataIndex: 'architecture',\n    },\n    {\n      title: t('agent.Starts'),\n      key: 'first_contact',\n      dataIndex: 'first_contact',\n      render: (value) => {\n        return (\n          <BAIFlex direction=\"column\">\n            <Typography.Text>{dayjs(value).format('ll LTS')}</Typography.Text>\n            <BAIIntervalView\n              callback={() => {\n                return baiClient.utils.elapsedTime(value, Date.now());\n              }}\n              delay={1000}\n              render={(intervalValue) => (\n                <DoubleTag\n                  values={[\n                    { label: t('agent.Running') },\n                    {\n                      label: intervalValue,\n                    },\n                  ]}\n                />\n              )}\n            />\n          </BAIFlex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('agent.Allocation'),\n      key: 'allocation',\n      render: (_value, record) => {\n        const parsedOccupiedSlots: {\n          [key in ResourceSlotName]: string | undefined;\n        } = JSON.parse(record?.occupied_slots || '{}');\n        const parsedAvailableSlots: {\n          [key in ResourceSlotName]: string | undefined;\n        } = JSON.parse(record?.available_slots || '{}');\n        return (\n          <BAIFlex direction=\"column\" gap=\"xxs\">\n            {_.map(\n              parsedAvailableSlots,\n              (_value: string | number, key: ResourceSlotName) => {\n                if (key === 'cpu') {\n                  const cpuPercent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots.cpu) /\n                      _.toNumber(parsedAvailableSlots.cpu)) *\n                      100,\n                  );\n                  return (\n                    <BAIFlex\n                      key={key}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                    >\n                      <BAIFlex gap=\"xxs\">\n                        <ResourceTypeIcon key={key} type={key} />\n                        <Typography.Text>\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedOccupiedSlots.cpu || 0,\n                            0,\n                          )}\n                          &nbsp;/&nbsp;\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedAvailableSlots.cpu || 0,\n                            0,\n                          )}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          {mergedResourceSlots?.cpu?.display_unit}\n                        </Typography.Text>\n                      </BAIFlex>\n                      <BAIProgressWithLabel\n                        percent={cpuPercent}\n                        strokeColor={\n                          cpuPercent > 80\n                            ? token.colorError\n                            : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(cpuPercent, 1) + ' %'\n                        }\n                      />\n                    </BAIFlex>\n                  );\n                } else if (key === 'mem') {\n                  const memPercent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots.mem) /\n                      _.toNumber(parsedAvailableSlots.mem)) *\n                      100,\n                  );\n                  return (\n                    <BAIFlex\n                      key={'mem'}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                    >\n                      <BAIFlex gap=\"xxs\">\n                        <ResourceTypeIcon type={'mem'} />\n                        <Typography.Text>\n                          {convertToBinaryUnit(parsedOccupiedSlots.mem, 'g', 0)\n                            ?.numberFixed ?? 0}\n                          &nbsp;/&nbsp;\n                          {convertToBinaryUnit(parsedAvailableSlots.mem, 'g', 0)\n                            ?.numberFixed ?? 0}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          GiB\n                        </Typography.Text>\n                      </BAIFlex>\n                      <BAIProgressWithLabel\n                        percent={memPercent}\n                        strokeColor={\n                          memPercent > 80\n                            ? token.colorError\n                            : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(memPercent, 1) + ' %'\n                        }\n                      />\n                    </BAIFlex>\n                  );\n                } else if (parsedAvailableSlots[key]) {\n                  const percent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots[key]) /\n                      _.toNumber(parsedAvailableSlots[key])) *\n                      100,\n                  );\n                  return (\n                    <BAIFlex\n                      key={key}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                      gap=\"xxs\"\n                    >\n                      <BAIFlex gap=\"xxs\">\n                        <ResourceTypeIcon key={key} type={key} />\n                        <Typography.Text>\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedOccupiedSlots[key] || 0,\n                            2,\n                          )}\n                          &nbsp;/&nbsp;\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedAvailableSlots[key],\n                            2,\n                          )}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          {mergedResourceSlots?.[key]?.display_unit}\n                        </Typography.Text>\n                      </BAIFlex>\n                      <BAIProgressWithLabel\n                        percent={percent}\n                        strokeColor={\n                          percent > 80 ? token.colorError : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(percent, 1) + ' %'\n                        }\n                      />\n                    </BAIFlex>\n                  );\n                }\n              },\n            )}\n          </BAIFlex>\n        );\n      },\n    },\n    {\n      title: t('agent.Utilization'),\n      key: 'live_stat',\n      dataIndex: 'live_stat',\n      render: (value, record) => {\n        const parsedValue = JSON.parse(value || '{}');\n        const available_slots = JSON.parse(record?.available_slots || '{}');\n        if (record?.status === 'ALIVE') {\n          const liveStat = {\n            cpu_util: { capacity: 0, current: 0, ratio: 0 },\n            mem_util: { capacity: 0, current: 0, ratio: 0 },\n          };\n          if (parsedValue && parsedValue.node && parsedValue.devices) {\n            const numCores = _.keys(parsedValue.devices.cpu_util).length;\n            liveStat.cpu_util.capacity = _.toFinite(\n              parsedValue.node.cpu_util.capacity,\n            );\n            liveStat.cpu_util.current = _.toFinite(\n              parsedValue.node.cpu_util.current,\n            );\n            liveStat.cpu_util.ratio =\n              liveStat.cpu_util.current /\n                liveStat.cpu_util.capacity /\n                numCores || 0;\n            liveStat.mem_util.capacity = _.toInteger(\n              available_slots.mem || parsedValue.node.mem.capacity,\n            );\n            liveStat.mem_util.current = _.toInteger(\n              parsedValue.node.mem.current,\n            );\n            liveStat.mem_util.ratio =\n              liveStat.mem_util.current / liveStat.mem_util.capacity || 0;\n          }\n          _.forEach(_.keys(parsedValue?.node), (statKey) => {\n            if (\n              ['cpu_util', 'mem', 'disk', 'net_rx', 'net_tx'].includes(statKey)\n            )\n              return;\n            if (_.includes(statKey, '_util')) {\n              // core utilization\n              liveStat[statKey as keyof typeof liveStat] = {\n                capacity: _.toFinite(parsedValue.node[statKey].capacity) || 100,\n                current: _.toFinite(parsedValue.node[statKey].current),\n                ratio: _.toFinite(parsedValue.node[statKey].current) / 100 || 0,\n              };\n            } else if (statKey.includes('_mem')) {\n              // memory utilization\n              liveStat[statKey as keyof typeof liveStat] = {\n                capacity: _.toFinite(parsedValue.node[statKey].capacity),\n                current: _.toFinite(parsedValue.node[statKey].current),\n                ratio: _.toFinite(parsedValue.node[statKey].pct) / 100 || 0,\n              };\n            }\n          });\n          const baseUnit =\n            convertUnitValue(_.toString(liveStat.mem_util.capacity), 'auto')\n              ?.unit || 'g';\n          return (\n            <BAIFlex direction=\"column\" gap=\"xxs\">\n              <BAIFlex\n                justify=\"between\"\n                style={{ minWidth: 200, width: '100%' }}\n              >\n                <Typography.Text>\n                  {mergedResourceSlots?.cpu?.human_readable_name}\n                </Typography.Text>\n                <BAIProgressWithLabel\n                  percent={liveStat.cpu_util.ratio * 100}\n                  width={120}\n                  valueLabel={\n                    toFixedFloorWithoutTrailingZeros(\n                      _.toFinite(liveStat.cpu_util.ratio * 100),\n                      1,\n                    ) + ' %'\n                  }\n                />\n              </BAIFlex>\n              <BAIFlex\n                justify=\"between\"\n                style={{ minWidth: 200, width: '100%' }}\n              >\n                <Typography.Text>\n                  {mergedResourceSlots?.mem?.human_readable_name}\n                </Typography.Text>\n                <BAIProgressWithLabel\n                  percent={liveStat.mem_util.ratio * 100}\n                  width={120}\n                  valueLabel={\n                    convertToBinaryUnit(\n                      _.toString(liveStat.mem_util.current),\n                      baseUnit,\n                    )?.numberFixed +\n                    ' / ' +\n                    convertToBinaryUnit(\n                      _.toString(liveStat.mem_util.capacity),\n                      baseUnit,\n                    )?.displayValue\n                  }\n                />\n              </BAIFlex>\n              {_.map(_.keys(parsedValue?.node), (statKey) => {\n                if (['cpu_util', 'mem'].includes(statKey)) {\n                  return;\n                }\n                if (_.includes(statKey, '_util')) {\n                  const deviceName = _.split(statKey, '_')[0] + '.device';\n                  return (\n                    <BAIFlex\n                      key={statKey}\n                      justify=\"between\"\n                      style={{ minWidth: 200, width: '100%' }}\n                      gap=\"xxs\"\n                    >\n                      <Typography.Text>\n                        {mergedResourceSlots?.[deviceName]?.human_readable_name}\n                        (util)\n                      </Typography.Text>\n                      <BAIProgressWithLabel\n                        width={120}\n                        percent={\n                          (liveStat[statKey as keyof typeof liveStat].current /\n                            liveStat[statKey as keyof typeof liveStat]\n                              .capacity) *\n                            100 || 0\n                        }\n                        valueLabel={\n                          _.toFinite(\n                            toFixedFloorWithoutTrailingZeros(\n                              liveStat[statKey as keyof typeof liveStat].ratio *\n                                100,\n                              1,\n                            ),\n                          ) + ' %'\n                        }\n                      />\n                    </BAIFlex>\n                  );\n                }\n                if (_.includes(statKey, '_mem')) {\n                  const deviceName = _.split(statKey, '_')[0] + '.device';\n                  const baseUnit =\n                    convertUnitValue(\n                      _.toString(\n                        liveStat[statKey as keyof typeof liveStat].capacity,\n                      ),\n                      'auto',\n                    )?.unit || 'g';\n                  return (\n                    <BAIFlex\n                      key={statKey}\n                      justify=\"between\"\n                      style={{ minWidth: 200, width: '100%' }}\n                      gap=\"xxs\"\n                    >\n                      <Typography.Text>\n                        {mergedResourceSlots?.[deviceName]?.human_readable_name}\n                        (mem)\n                      </Typography.Text>\n                      <BAIProgressWithLabel\n                        width={120}\n                        percent={\n                          (liveStat[statKey as keyof typeof liveStat].current /\n                            liveStat[statKey as keyof typeof liveStat]\n                              .capacity) *\n                            100 || 0\n                        }\n                        valueLabel={\n                          convertToBinaryUnit(\n                            _.toString(\n                              liveStat[statKey as keyof typeof liveStat]\n                                .current,\n                            ),\n                            baseUnit,\n                          )?.numberFixed +\n                          ' / ' +\n                          convertToBinaryUnit(\n                            _.toString(\n                              liveStat[statKey as keyof typeof liveStat]\n                                .capacity,\n                            ),\n                            baseUnit,\n                          )?.displayValue\n                        }\n                      />\n                    </BAIFlex>\n                  );\n                }\n              })}\n            </BAIFlex>\n          );\n        } else {\n          return t('agent.NoAvailableLiveStat');\n        }\n      },\n    },\n    {\n      title: t('agent.DiskPerc'),\n      key: 'disk_perc',\n      render: (_value, record) => {\n        const parsedDisk =\n          JSON.parse(record?.live_stat || '{}')?.node?.disk ?? {};\n        const pctValue = _.toFinite(parsedDisk.pct) || 0;\n        const pct = _.toFinite(toFixedFloorWithoutTrailingZeros(pctValue, 2));\n        const color = pct > 80 ? token.colorError : token.colorSuccess;\n        const baseUnit =\n          convertUnitValue(parsedDisk?.capacity, 'auto', {\n            base: 1000,\n          })?.unit || 'g';\n        return (\n          <BAIFlex direction=\"column\">\n            <BAIProgressWithLabel\n              valueLabel={toFixedFloorWithoutTrailingZeros(pct, 1) + ' %'}\n              percent={pct}\n              strokeColor={color}\n              width={120}\n            />\n            <Typography.Text style={{ fontSize: token.fontSizeSM }}>\n              {convertToDecimalUnit(parsedDisk?.current, baseUnit)?.numberFixed}\n              &nbsp;/&nbsp;\n              {\n                convertToDecimalUnit(parsedDisk?.capacity, baseUnit)\n                  ?.displayValue\n              }\n            </Typography.Text>\n          </BAIFlex>\n        );\n      },\n    },\n    {\n      title: t('general.ResourceGroup'),\n      key: 'resource_group',\n      dataIndex: 'scaling_group',\n      sorter: true,\n    },\n    {\n      title: t('agent.Status'),\n      key: 'status',\n      dataIndex: 'status',\n      render: (value, record) => {\n        const parsedComputePlugins = JSON.parse(\n          record?.compute_plugins || '{}',\n        );\n        const parsedAvailableSlots = JSON.parse(\n          record?.available_slots || '{}',\n        );\n        return (\n          <BAIFlex direction=\"column\" gap=\"xxs\" align=\"start\">\n            <DoubleTag\n              values={[\n                { label: 'Agent' },\n                {\n                  label: record?.version || '',\n                  color:\n                    value === 'ALIVE'\n                      ? 'green'\n                      : value === 'TERMINATED'\n                        ? 'red'\n                        : 'blue',\n                },\n              ]}\n            />\n            {parsedComputePlugins?.cuda ? (\n              <>\n                {parsedComputePlugins?.cuda?.cuda_version ? (\n                  <DoubleTag\n                    values={[\n                      { label: 'CUDA' },\n                      {\n                        label: parsedComputePlugins?.cuda?.cuda_version,\n                        color: 'green',\n                      },\n                    ]}\n                  />\n                ) : (\n                  <Tag color=\"green\">CUDA Disabled</Tag>\n                )}\n                <DoubleTag\n                  values={[\n                    { label: 'CUDA Plugin' },\n                    {\n                      label: parsedComputePlugins?.cuda?.version,\n                      color: 'blue',\n                    },\n                  ]}\n                />\n                {_.includes(_.keys(parsedAvailableSlots), 'cuda.shares') ? (\n                  <Tag color=\"blue\">Fractional GPU™</Tag>\n                ) : null}\n              </>\n            ) : null}\n          </BAIFlex>\n        );\n      },\n    },\n    {\n      title: t('agent.Schedulable'),\n      key: 'schedulable',\n      dataIndex: 'schedulable',\n      render: (value) => {\n        return (\n          <BAIFlex justify=\"center\">\n            {value === true ? (\n              <CheckCircleOutlined\n                style={{\n                  color: token.colorSuccess,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            ) : (\n              <MinusCircleOutlined\n                style={{\n                  color: token.colorTextDisabled,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            )}\n          </BAIFlex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('general.Control'),\n      key: 'control',\n      fixed: 'right',\n      render: (_value, record) => {\n        return (\n          <BAIFlex>\n            <Button\n              style={{\n                color: token.colorSuccess,\n              }}\n              type=\"text\"\n              icon={<InfoCircleOutlined />}\n              onClick={() => setCurrentAgentInfo(record)}\n            />\n            <Button\n              style={{\n                color: token.colorInfo,\n              }}\n              type=\"text\"\n              icon={<SettingOutlined />}\n              onClick={() => setCurrentSettingAgent(record)}\n            />\n          </BAIFlex>\n        );\n      },\n    },\n  ];\n\n  const [hiddenColumnKeys, setHiddenColumnKeys] =\n    useHiddenColumnKeysSetting('AgentList');\n\n  return (\n    <BAIFlex direction=\"column\" align=\"stretch\" gap=\"sm\">\n      <BAIFlex justify=\"between\" align=\"start\" wrap=\"wrap\" {...headerProps}>\n        <BAIFlex\n          direction=\"row\"\n          gap={'sm'}\n          align=\"start\"\n          style={{ flex: 1 }}\n          wrap=\"wrap\"\n        >\n          <BAIRadioGroup\n            options={[\n              {\n                label: t('agent.Connected'),\n                value: 'ALIVE',\n              },\n              {\n                label: t('agent.Terminated'),\n                value: 'TERMINATED',\n              },\n            ]}\n            value={queryParams.status}\n            onChange={(e) => {\n              setQueryParams({ status: e.target.value }, 'replaceIn');\n            }}\n          />\n\n          <BAIPropertyFilter\n            filterProperties={[\n              {\n                key: 'id',\n                propertyLabel: 'ID',\n                type: 'string',\n              },\n              {\n                key: 'addr',\n                propertyLabel: t('agent.Endpoint'),\n                type: 'string',\n              },\n              {\n                key: 'schedulable',\n                propertyLabel: t('agent.Schedulable'),\n                type: 'boolean',\n                options: [\n                  {\n                    label: t('general.Enabled'),\n                    value: 'true',\n                  },\n                  {\n                    label: t('general.Disabled'),\n                    value: 'false',\n                  },\n                ],\n              },\n            ]}\n            value={queryParams.filter}\n            onChange={(value) => {\n              setQueryParams({ filter: value }, 'replaceIn');\n            }}\n          />\n        </BAIFlex>\n        <BAIFlex gap=\"xs\">\n          <Tooltip title={t('button.Refresh')}>\n            <Button\n              loading={deferredFetchKey !== fetchKey}\n              onClick={() => updateFetchKey()}\n              icon={<ReloadOutlined />}\n            ></Button>\n          </Tooltip>\n        </BAIFlex>\n      </BAIFlex>\n      <BAITable\n        size=\"small\"\n        scroll={{ x: 'max-content' }}\n        rowKey={'id'}\n        dataSource={filterOutNullAndUndefined(agent_list?.items)}\n        showSorterTooltip={false}\n        columns={\n          _.filter(\n            columns,\n            (column) => !_.includes(hiddenColumnKeys, _.toString(column?.key)),\n          ) as ColumnType<AnyObject>[]\n        }\n        resizable\n        pagination={{\n          pageSize: tablePaginationOption.pageSize,\n          total: agent_list?.total_count,\n          current: tablePaginationOption.current,\n          extraContent: (\n            <Button\n              type=\"text\"\n              icon={<SettingOutlined />}\n              onClick={() => {\n                toggleColumnSettingModal();\n              }}\n            />\n          ),\n          onChange(current, pageSize) {\n            if (_.isNumber(current) && _.isNumber(pageSize)) {\n              setTablePaginationOption({\n                current,\n                pageSize,\n              });\n            }\n          },\n        }}\n        onChangeOrder={(order) => {\n          setQueryParams({ order }, 'replaceIn');\n        }}\n        loading={\n          deferredQueryVariables !== queryVariables ||\n          deferredFetchKey !== fetchKey\n        }\n        {...tableProps}\n      />\n      <AgentDetailModal\n        agentDetailModalFrgmt={currentAgentInfo}\n        open={!!currentAgentInfo}\n        onRequestClose={() => setCurrentAgentInfo(null)}\n      />\n      <AgentSettingModal\n        agentSettingModalFrgmt={currentSettingAgent}\n        open={!!currentSettingAgent}\n        onRequestClose={(success) => {\n          if (success) {\n            updateFetchKey();\n          }\n          setCurrentSettingAgent(null);\n        }}\n      />\n      <TableColumnsSettingModal\n        open={visibleColumnSettingModal}\n        onRequestClose={(values) => {\n          values?.selectedColumnKeys &&\n            setHiddenColumnKeys(\n              _.difference(\n                columns.map((column) => _.toString(column.key)),\n                values?.selectedColumnKeys,\n              ),\n            );\n          toggleColumnSettingModal();\n        }}\n        columns={columns}\n        hiddenColumnKeys={hiddenColumnKeys}\n      />\n    </BAIFlex>\n  );\n};\n\nexport default AgentList;\n","import { SearchOutlined } from '@ant-design/icons';\nimport { Checkbox, Input, theme, Form } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { FormInstance } from 'antd/lib';\nimport { BAIModal, BAIModalProps } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface FormValues {\n  searchInput?: string;\n  selectedColumnKeys?: Array<string>;\n}\n\ninterface TableColumnsSettingProps extends BAIModalProps {\n  open: boolean;\n  onRequestClose: (formValues?: FormValues) => void;\n  columns: ColumnsType<any>;\n  hiddenColumnKeys?: Array<string>;\n}\n\nconst TableColumnsSettingModal: React.FC<TableColumnsSettingProps> = ({\n  open,\n  onRequestClose,\n  columns,\n  hiddenColumnKeys,\n  ...modalProps\n}) => {\n  const formRef = useRef<FormInstance>(null);\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const onChangeTitleToString: any = (element: any) => {\n    const text = React.Children.map(element.props.children, (child) => {\n      if (typeof child === 'string') {\n        return child;\n      }\n    });\n    return text;\n  };\n\n  const columnOptions = _.map(columns, (column) => {\n    if (typeof column.title === 'string') {\n      return {\n        label: column.title,\n        value: _.toString(column.key),\n      };\n    } else if (typeof column.title === 'object' && 'props' in column.title!) {\n      return {\n        label: onChangeTitleToString(column.title),\n        value: _.toString(column.key),\n      };\n    } else {\n      return {\n        label: undefined,\n        value: _.toString(column.key),\n      };\n    }\n  });\n\n  return (\n    <BAIModal\n      title={t('table.SettingTable')}\n      open={open}\n      destroyOnHidden\n      centered\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            onRequestClose(values);\n          })\n          .catch(() => {});\n      }}\n      onCancel={() => {\n        onRequestClose();\n      }}\n      {...modalProps}\n    >\n      <Form\n        ref={formRef}\n        preserve={false}\n        initialValues={{\n          selectedColumnKeys: _.map(columnOptions, 'value')?.filter(\n            (columnKey) => !_.includes(hiddenColumnKeys, columnKey),\n          ),\n        }}\n        layout=\"vertical\"\n      >\n        <Form.Item\n          name=\"searchInput\"\n          label={t('table.SelectColumnToDisplay')}\n          style={{ marginBottom: 0 }}\n        >\n          <Input\n            prefix={<SearchOutlined />}\n            style={{ marginBottom: token.marginSM }}\n            placeholder={t('table.SearchTableColumn')}\n          />\n        </Form.Item>\n        <Form.Item\n          noStyle\n          shouldUpdate={(prev, cur) => prev.searchInput !== cur.searchInput}\n        >\n          {({ getFieldValue }) => {\n            const searchKeyword = getFieldValue('searchInput')\n              ? _.toLower(getFieldValue('searchInput'))\n              : undefined;\n\n            const filteredColumns = _.map(columnOptions, (columnOption) =>\n              _.toLower(_.toString(columnOption.label)).includes(\n                searchKeyword || '',\n              )\n                ? columnOption\n                : {\n                    ...columnOption,\n                    style: {\n                      display: 'none',\n                    },\n                  },\n            );\n            return (\n              <Form.Item\n                name=\"selectedColumnKeys\"\n                style={{\n                  height: 220,\n                  overflowY: 'auto',\n                }}\n                rules={[\n                  {\n                    required: true,\n                    message: t('general.validation.PleaseSelectOptions'),\n                  },\n                ]}\n              >\n                <Checkbox.Group\n                  options={filteredColumns}\n                  style={{ flexDirection: 'column' }}\n                />\n              </Form.Item>\n            );\n          }}\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default TableColumnsSettingModal;\n","import { useBAISettingUserState } from './useBAISetting';\n\ntype KnownSettingName =\n  | 'AgentList'\n  | 'AgentSummaryList'\n  | 'ContainerRegistryList'\n  | 'CustomizedImageList'\n  | 'ErrorLogList'\n  | 'ImageList'\n  | 'KeypairResourcePolicyList'\n  | 'ProjectResourcePolicyList'\n  | 'UserResourcePolicyList'\n  | 'EndpointListPage';\n\nexport const useHiddenColumnKeysSetting = (listName: KnownSettingName) => {\n  const [hiddenColumnKeys, setHiddenColumnKeys] = useBAISettingUserState(\n    `hiddenColumnKeys.${listName}`,\n  );\n\n  return [hiddenColumnKeys, setHiddenColumnKeys] as const;\n};\n"],"names":["node","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","v23","hash","_ref","_parsedLiveStat$devic","_mergedResourceSlots$","_parsedLiveStat$devic2","_mergedResourceSlots$3","_convertToBinaryUnit","_convertToBinaryUnit2","_convertToBinaryUnit3","_convertToBinaryUnit4","_convertToDecimalUnit","_parsedLiveStat$node","_parsedLiveStat$node$","_convertToDecimalUnit2","_parsedLiveStat$node2","_parsedLiveStat$node3","agentDetailModalFrgmt","onRequestClose","modalProps","t","useTranslation","token","theme","useToken","mergedResourceSlots","useResourceSlotsDetails","agent","useFragment","_AgentDetailModalFragment","parsedLiveStat","JSON","parse","live_stat","parsedAvailableSlots","available_slots","_jsx","BAIModal","centered","title","id","onCancel","destroyOnHidden","footer","children","_jsxs","BAIFlex","direction","align","gap","Row","gutter","Col","xs","sm","devices","cpu_util","Typography","Title","level","style","marginTop","cpu","human_readable_name","_","value","key","_mergedResourceSlots$2","justify","Text","type","flex","BAIProgressWithLabel","percent","pct","valueLabel","toFixedFloorWithoutTrailingZeros","mem","convertToBinaryUnit","mem_cur_bytes","number","displayValue","convertToDecimalUnit","net_tx","current","net_rx","marginBottom","marginSM","includes","_mergedResourceSlots$4","deviceName","index","_mergedResourceSlots$5","_value$","_value$2","_mergedResourceSlots$6","_mergedResourceSlots$7","_value$3","_value$4","agentSettingModalFrgmt","message","App","useApp","formRef","useRef","_AgentSettingModalFragment","commitModifyAgentSetting","isInFlightCommitModifyAgentSetting","useMutation","_AgentSettingModalMutation","width","confirmLoading","onOk","_formRef$current","validateFields","then","values","variables","props","schedulable","onCompleted","res","errors","_res$modify_agent","_res$modify_agent2","modify_agent","ok","error","msg","success","onError","err","catch","Form","ref","preserve","initialValues","Item","name","label","valuePropName","required","Switch","t0","$","_c","headerProps","otherProps","tableProps","isDarkMode","useThemeMode","currentAgentInfo","setCurrentAgentInfo","useState","currentSettingAgent","setCurrentSettingAgent","visibleColumnSettingModal","t1","useToggle","toggle","toggleColumnSettingModal","baiClient","useSuspendedBackendaiClient","t2","Symbol","for","status","withDefault","StringParam","filter","undefined","order","queryParams","setQueryParams","useQueryParams","t3","pageSize","baiPaginationOption","tablePaginationOption","setTablePaginationOption","useBAIPaginationOptionStateOnSearchParam","t4","trigger","defaultValue","INITIAL_FETCH_KEY","fetchKey","setFetchKey","useControllableValue","t5","limit","offset","queryVariables","deferredQueryVariables","useDeferredValue","deferredFetchKey","t6","_temp","updateFetchKey","t7","_AgentListQuery","t8","t9","fetchPolicy","agent_list","useLazyLoadQuery","t10","t11","t12","t13","t14","t15","t16","t17","t18","_Fragment","value_0","regionData","platform","location","length","color","icon","aws","amazon","azure","gcp","google","nbp","naver","openstack","dgx","local","src","height","DoubleTag","Tag","value_1","dayjs","format","BAIIntervalView","callback","utils","elapsedTime","Date","now","delay","render","intervalValue","_value","record_0","parsedOccupiedSlots","record","occupied_slots","_value_0","cpuPercent","minWidth","ResourceTypeIcon","fontSize","sizeXS","display_unit","strokeColor","colorError","colorSuccess","_convertToBinaryUnit$","_convertToBinaryUnit$2","memPercent","numberFixed","value_2","record_1","parsedValue","_convertUnitValue","liveStat","capacity","ratio","mem_util","numCores","statKey","baseUnit","convertUnitValue","unit","statKey_0","_convertUnitValue2","_convertToBinaryUnit5","_convertToBinaryUnit6","deviceName_0","baseUnit_0","_value_1","record_2","_JSON$parse$node$disk","_JSON$parse","_JSON$parse$node","_convertUnitValue3","parsedDisk","disk","pctValue","color_0","baseUnit_1","base","fontSizeSM","value_4","CheckCircleOutlined","fontSizeXL","MinusCircleOutlined","colorTextDisabled","_value_2","record_4","Button","InfoCircleOutlined","onClick","colorInfo","SettingOutlined","columns","dataIndex","fixed","_temp2","sorter","_temp3","hiddenColumnKeys","setHiddenColumnKeys","useHiddenColumnKeysSetting","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","t31","t32","t33","t34","t35","t36","t37","t38","t39","t40","t41","e","target","BAIRadioGroup","options","onChange","propertyLabel","value_5","BAIPropertyFilter","filterProperties","wrap","t42","t43","t44","t45","t46","t47","ReloadOutlined","loading","Tooltip","T0","BAITable","t49","x","t51","items","t52","filterOutNullAndUndefined","t54","column","t55","t56","total_count","t57","t58","t59","t60","total","extraContent","t61","t62","size","scroll","rowKey","dataSource","showSorterTooltip","resizable","pagination","onChangeOrder","t63","t64","t65","AgentDetailModal","open","t66","t67","t68","AgentSettingModal","TableColumnsSettingModal","selectedColumnKeys","map","_temp4","toISOString","addr","value_3","record_3","_parsedComputePlugins","_parsedComputePlugins2","_parsedComputePlugins3","parsedComputePlugins","compute_plugins","parsedAvailableSlots_0","version","cuda","cuda_version","column_0","_$map","columnOptions","element","React","child","columnKey","layout","Input","prefix","SearchOutlined","placeholder","noStyle","shouldUpdate","prev","cur","searchInput","_ref2","getFieldValue","searchKeyword","filteredColumns","columnOption","display","overflowY","rules","Checkbox","Group","flexDirection","listName","useBAISettingUserState"],"sourceRoot":""}