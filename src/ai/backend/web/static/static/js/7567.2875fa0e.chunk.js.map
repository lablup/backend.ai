{"version":3,"file":"static/js/7567.2875fa0e.chunk.js","mappings":"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","sources":["../../node_modules/.pnpm/@codemirror+lang-javascript@6.2.3/node_modules/@codemirror/lang-javascript/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/javascript';\nimport { syntaxTree, LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, defineLanguageFacet, sublanguageProp, LanguageSupport } from '@codemirror/language';\nimport { EditorSelection } from '@codemirror/state';\nimport { EditorView } from '@codemirror/view';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\nimport { NodeWeakMap, IterMode } from '@lezer/common';\n\n/**\nA collection of JavaScript-related\n[snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).\n*/\nconst snippets = [\n    /*@__PURE__*/snippetCompletion(\"function ${name}(${params}) {\\n\\t${}\\n}\", {\n        label: \"function\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${name} of ${collection}) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"of loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"do {\\n\\t${}\\n} while (${})\", {\n        label: \"do\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"while (${}) {\\n\\t${}\\n}\", {\n        label: \"while\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"try {\\n\\t${}\\n} catch (${error}) {\\n\\t${}\\n}\", {\n        label: \"try\",\n        detail: \"/ catch block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n}\", {\n        label: \"if\",\n        detail: \"block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n} else {\\n\\t${}\\n}\", {\n        label: \"if\",\n        detail: \"/ else block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"class ${name} {\\n\\tconstructor(${params}) {\\n\\t\\t${}\\n\\t}\\n}\", {\n        label: \"class\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import {${names}} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"named\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import ${name} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"default\",\n        type: \"keyword\"\n    })\n];\n/**\nA collection of snippet completions for TypeScript. Includes the\nJavaScript [snippets](https://codemirror.net/6/docs/ref/#lang-javascript.snippets).\n*/\nconst typescriptSnippets = /*@__PURE__*/snippets.concat([\n    /*@__PURE__*/snippetCompletion(\"interface ${name} {\\n\\t${}\\n}\", {\n        label: \"interface\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"type ${name} = ${type}\", {\n        label: \"type\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"enum ${name} {\\n\\t${}\\n}\", {\n        label: \"enum\",\n        detail: \"definition\",\n        type: \"keyword\"\n    })\n]);\n\nconst cache = /*@__PURE__*/new NodeWeakMap();\nconst ScopeNodes = /*@__PURE__*/new Set([\n    \"Script\", \"Block\",\n    \"FunctionExpression\", \"FunctionDeclaration\", \"ArrowFunction\", \"MethodDeclaration\",\n    \"ForStatement\"\n]);\nfunction defID(type) {\n    return (node, def) => {\n        let id = node.node.getChild(\"VariableDefinition\");\n        if (id)\n            def(id, type);\n        return true;\n    };\n}\nconst functionContext = [\"FunctionDeclaration\"];\nconst gatherCompletions = {\n    FunctionDeclaration: /*@__PURE__*/defID(\"function\"),\n    ClassDeclaration: /*@__PURE__*/defID(\"class\"),\n    ClassExpression: () => true,\n    EnumDeclaration: /*@__PURE__*/defID(\"constant\"),\n    TypeAliasDeclaration: /*@__PURE__*/defID(\"type\"),\n    NamespaceDeclaration: /*@__PURE__*/defID(\"namespace\"),\n    VariableDefinition(node, def) { if (!node.matchContext(functionContext))\n        def(node, \"variable\"); },\n    TypeDefinition(node, def) { def(node, \"type\"); },\n    __proto__: null\n};\nfunction getScope(doc, node) {\n    let cached = cache.get(node);\n    if (cached)\n        return cached;\n    let completions = [], top = true;\n    function def(node, type) {\n        let name = doc.sliceString(node.from, node.to);\n        completions.push({ label: name, type });\n    }\n    node.cursor(IterMode.IncludeAnonymous).iterate(node => {\n        if (top) {\n            top = false;\n        }\n        else if (node.name) {\n            let gather = gatherCompletions[node.name];\n            if (gather && gather(node, def) || ScopeNodes.has(node.name))\n                return false;\n        }\n        else if (node.to - node.from > 8192) {\n            // Allow caching for bigger internal nodes\n            for (let c of getScope(doc, node.node))\n                completions.push(c);\n            return false;\n        }\n    });\n    cache.set(node, completions);\n    return completions;\n}\nconst Identifier = /^[\\w$\\xa1-\\uffff][\\w$\\d\\xa1-\\uffff]*$/;\nconst dontComplete = [\n    \"TemplateString\", \"String\", \"RegExp\",\n    \"LineComment\", \"BlockComment\",\n    \"VariableDefinition\", \"TypeDefinition\", \"Label\",\n    \"PropertyDefinition\", \"PropertyName\",\n    \"PrivatePropertyDefinition\", \"PrivatePropertyName\",\n    \"JSXText\", \"JSXAttributeValue\", \"JSXOpenTag\", \"JSXCloseTag\", \"JSXSelfClosingTag\",\n    \".\", \"?.\"\n];\n/**\nCompletion source that looks up locally defined names in\nJavaScript code.\n*/\nfunction localCompletionSource(context) {\n    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n    if (dontComplete.indexOf(inner.name) > -1)\n        return null;\n    let isWord = inner.name == \"VariableName\" ||\n        inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));\n    if (!isWord && !context.explicit)\n        return null;\n    let options = [];\n    for (let pos = inner; pos; pos = pos.parent) {\n        if (ScopeNodes.has(pos.name))\n            options = options.concat(getScope(context.state.doc, pos));\n    }\n    return {\n        options,\n        from: isWord ? inner.from : context.pos,\n        validFor: Identifier\n    };\n}\nfunction pathFor(read, member, name) {\n    var _a;\n    let path = [];\n    for (;;) {\n        let obj = member.firstChild, prop;\n        if ((obj === null || obj === void 0 ? void 0 : obj.name) == \"VariableName\") {\n            path.push(read(obj));\n            return { path: path.reverse(), name };\n        }\n        else if ((obj === null || obj === void 0 ? void 0 : obj.name) == \"MemberExpression\" && ((_a = (prop = obj.lastChild)) === null || _a === void 0 ? void 0 : _a.name) == \"PropertyName\") {\n            path.push(read(prop));\n            member = obj;\n        }\n        else {\n            return null;\n        }\n    }\n}\n/**\nHelper function for defining JavaScript completion sources. It\nreturns the completable name and object path for a completion\ncontext, or null if no name/property completion should happen at\nthat position. For example, when completing after `a.b.c` it will\nreturn `{path: [\"a\", \"b\"], name: \"c\"}`. When completing after `x`\nit will return `{path: [], name: \"x\"}`. When not in a property or\nname, it will return null if `context.explicit` is false, and\n`{path: [], name: \"\"}` otherwise.\n*/\nfunction completionPath(context) {\n    let read = (node) => context.state.doc.sliceString(node.from, node.to);\n    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n    if (inner.name == \"PropertyName\") {\n        return pathFor(read, inner.parent, read(inner));\n    }\n    else if ((inner.name == \".\" || inner.name == \"?.\") && inner.parent.name == \"MemberExpression\") {\n        return pathFor(read, inner.parent, \"\");\n    }\n    else if (dontComplete.indexOf(inner.name) > -1) {\n        return null;\n    }\n    else if (inner.name == \"VariableName\" || inner.to - inner.from < 20 && Identifier.test(read(inner))) {\n        return { path: [], name: read(inner) };\n    }\n    else if (inner.name == \"MemberExpression\") {\n        return pathFor(read, inner, \"\");\n    }\n    else {\n        return context.explicit ? { path: [], name: \"\" } : null;\n    }\n}\nfunction enumeratePropertyCompletions(obj, top) {\n    let options = [], seen = new Set;\n    for (let depth = 0;; depth++) {\n        for (let name of (Object.getOwnPropertyNames || Object.keys)(obj)) {\n            if (!/^[a-zA-Z_$\\xaa-\\uffdc][\\w$\\xaa-\\uffdc]*$/.test(name) || seen.has(name))\n                continue;\n            seen.add(name);\n            let value;\n            try {\n                value = obj[name];\n            }\n            catch (_) {\n                continue;\n            }\n            options.push({\n                label: name,\n                type: typeof value == \"function\" ? (/^[A-Z]/.test(name) ? \"class\" : top ? \"function\" : \"method\")\n                    : top ? \"variable\" : \"property\",\n                boost: -depth\n            });\n        }\n        let next = Object.getPrototypeOf(obj);\n        if (!next)\n            return options;\n        obj = next;\n    }\n}\n/**\nDefines a [completion source](https://codemirror.net/6/docs/ref/#autocomplete.CompletionSource) that\ncompletes from the given scope object (for example `globalThis`).\nWill enter properties of the object when completing properties on\na directly-named path.\n*/\nfunction scopeCompletionSource(scope) {\n    let cache = new Map;\n    return (context) => {\n        let path = completionPath(context);\n        if (!path)\n            return null;\n        let target = scope;\n        for (let step of path.path) {\n            target = target[step];\n            if (!target)\n                return null;\n        }\n        let options = cache.get(target);\n        if (!options)\n            cache.set(target, options = enumeratePropertyCompletions(target, !path.path.length));\n        return {\n            from: context.pos - path.name.length,\n            options,\n            validFor: Identifier\n        };\n    };\n}\n\n/**\nA language provider based on the [Lezer JavaScript\nparser](https://github.com/lezer-parser/javascript), extended with\nhighlighting and indentation information.\n*/\nconst javascriptLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"javascript\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch\\b|finally\\b)/ }),\n                LabeledStatement: flatIndent,\n                SwitchBody: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                Block: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                ArrowFunction: cx => cx.baseIndent + cx.unit,\n                \"TemplateString BlockComment\": () => null,\n                \"Statement Property\": /*@__PURE__*/continuedIndent({ except: /^{/ }),\n                JSXElement(context) {\n                    let closed = /^\\s*<\\//.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                JSXEscape(context) {\n                    let closed = /\\s*\\}/.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                \"JSXOpenTag JSXSelfClosingTag\"(context) {\n                    return context.column(context.node.from) + context.unit;\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType\": foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"] },\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\n        wordChars: \"$\"\n    }\n});\nconst jsxSublanguage = {\n    test: node => /^JSX/.test(node.name),\n    facet: /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"{/*\", close: \"*/}\" } } })\n};\n/**\nA language provider for TypeScript.\n*/\nconst typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: \"ts\" }, \"typescript\");\n/**\nLanguage provider for JSX.\n*/\nconst jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n    dialect: \"jsx\",\n    props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]\n});\n/**\nLanguage provider for JSX + TypeScript.\n*/\nconst tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n    dialect: \"jsx ts\",\n    props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]\n}, \"typescript\");\nlet kwCompletion = (name) => ({ label: name, type: \"keyword\" });\nconst keywords = /*@__PURE__*/\"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield\".split(\" \").map(kwCompletion);\nconst typescriptKeywords = /*@__PURE__*/keywords.concat(/*@__PURE__*/[\"declare\", \"implements\", \"private\", \"protected\", \"public\"].map(kwCompletion));\n/**\nJavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)\nand local variable completion.\n*/\nfunction javascript(config = {}) {\n    let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)\n        : config.typescript ? typescriptLanguage : javascriptLanguage;\n    let completions = config.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets.concat(keywords);\n    return new LanguageSupport(lang, [\n        javascriptLanguage.data.of({\n            autocomplete: ifNotIn(dontComplete, completeFromList(completions))\n        }),\n        javascriptLanguage.data.of({\n            autocomplete: localCompletionSource\n        }),\n        config.jsx ? autoCloseTags : [],\n    ]);\n}\nfunction findOpenTag(node) {\n    for (;;) {\n        if (node.name == \"JSXOpenTag\" || node.name == \"JSXSelfClosingTag\" || node.name == \"JSXFragmentTag\")\n            return node;\n        if (node.name == \"JSXEscape\" || !node.parent)\n            return null;\n        node = node.parent;\n    }\n}\nfunction elementName(doc, tree, max = doc.length) {\n    for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {\n        if (ch.name == \"JSXIdentifier\" || ch.name == \"JSXBuiltin\" || ch.name == \"JSXNamespacedName\" ||\n            ch.name == \"JSXMemberExpression\")\n            return doc.sliceString(ch.from, Math.min(ch.to, max));\n    }\n    return \"\";\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*//Android\\b/.test(navigator.userAgent);\n/**\nExtension that will automatically insert JSX close tags when a `>` or\n`/` is typed.\n*/\nconst autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text, defaultInsert) => {\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||\n        from != to || (text != \">\" && text != \"/\") ||\n        !javascriptLanguage.isActiveAt(view.state, from, -1))\n        return false;\n    let base = defaultInsert(), { state } = base;\n    let closeTags = state.changeByRange(range => {\n        var _a;\n        let { head } = range, around = syntaxTree(state).resolveInner(head - 1, -1), name;\n        if (around.name == \"JSXStartTag\")\n            around = around.parent;\n        if (state.doc.sliceString(head - 1, head) != text || around.name == \"JSXAttributeValue\" && around.to > head) ;\n        else if (text == \">\" && around.name == \"JSXFragmentTag\") {\n            return { range, changes: { from: head, insert: `</>` } };\n        }\n        else if (text == \"/\" && around.name == \"JSXStartCloseTag\") {\n            let empty = around.parent, base = empty.parent;\n            if (base && empty.from == head - 2 &&\n                ((name = elementName(state.doc, base.firstChild, head)) || ((_a = base.firstChild) === null || _a === void 0 ? void 0 : _a.name) == \"JSXFragmentTag\")) {\n                let insert = `${name}>`;\n                return { range: EditorSelection.cursor(head + insert.length, -1), changes: { from: head, insert } };\n            }\n        }\n        else if (text == \">\") {\n            let openTag = findOpenTag(around);\n            if (openTag && openTag.name == \"JSXOpenTag\" &&\n                !/^\\/?>|^<\\//.test(state.doc.sliceString(head, head + 2)) &&\n                (name = elementName(state.doc, openTag, head)))\n                return { range, changes: { from: head, insert: `</${name}>` } };\n        }\n        return { range };\n    });\n    if (closeTags.changes.empty)\n        return false;\n    view.dispatch([\n        base,\n        state.update(closeTags, { userEvent: \"input.complete\", scrollIntoView: true })\n    ]);\n    return true;\n});\n\n/**\nConnects an [ESLint](https://eslint.org/) linter to CodeMirror's\n[lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the\n[`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)\nclass, and `config` an optional ESLint configuration. The return\nvalue of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)\nto create a JavaScript linting extension.\n\nNote that ESLint targets node, and is tricky to run in the\nbrowser. The\n[eslint-linter-browserify](https://github.com/UziTech/eslint-linter-browserify)\npackage may help with that (see\n[example](https://github.com/UziTech/eslint-linter-browserify/blob/master/example/script.js)).\n*/\nfunction esLint(eslint, config) {\n    if (!config) {\n        config = {\n            parserOptions: { ecmaVersion: 2019, sourceType: \"module\" },\n            env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },\n            rules: {}\n        };\n        eslint.getRules().forEach((desc, name) => {\n            if (desc.meta.docs.recommended)\n                config.rules[name] = 2;\n        });\n    }\n    return (view) => {\n        let { state } = view, found = [];\n        for (let { from, to } of javascriptLanguage.findRegions(state)) {\n            let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };\n            for (let d of eslint.verify(state.sliceDoc(from, to), config))\n                found.push(translateDiagnostic(d, state.doc, offset));\n        }\n        return found;\n    };\n}\nfunction mapPos(line, col, doc, offset) {\n    return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);\n}\nfunction translateDiagnostic(input, doc, offset) {\n    let start = mapPos(input.line, input.column, doc, offset);\n    let result = {\n        from: start,\n        to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\n        message: input.message,\n        source: input.ruleId ? \"eslint:\" + input.ruleId : \"eslint\",\n        severity: input.severity == 1 ? \"warning\" : \"error\",\n    };\n    if (input.fix) {\n        let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;\n        result.actions = [{\n                name: \"fix\",\n                apply(view, start) {\n                    view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });\n                }\n            }];\n    }\n    return result;\n}\n\nexport { autoCloseTags, completionPath, esLint, javascript, javascriptLanguage, jsxLanguage, localCompletionSource, scopeCompletionSource, snippets, tsxLanguage, typescriptLanguage, typescriptSnippets };\n"],"names":["snippets","snippetCompletion","label","detail","type","typescriptSnippets","concat","cache","NodeWeakMap","ScopeNodes","Set","defID","node","def","id","getChild","functionContext","gatherCompletions","FunctionDeclaration","ClassDeclaration","ClassExpression","EnumDeclaration","TypeAliasDeclaration","NamespaceDeclaration","VariableDefinition","matchContext","TypeDefinition","__proto__","getScope","doc","cached","get","completions","top","name","sliceString","from","to","push","cursor","IterMode","IncludeAnonymous","iterate","gather","has","c","set","Identifier","dontComplete","localCompletionSource","context","inner","syntaxTree","state","resolveInner","pos","indexOf","isWord","test","sliceDoc","explicit","options","parent","validFor","pathFor","read","member","_a","path","prop","obj","firstChild","reverse","lastChild","completionPath","scopeCompletionSource","scope","Map","target","step","seen","depth","Object","getOwnPropertyNames","keys","value","add","_","boost","next","getPrototypeOf","enumeratePropertyCompletions","length","javascriptLanguage","LRLanguage","define","parser","configure","props","indentNodeProp","IfStatement","continuedIndent","except","TryStatement","LabeledStatement","flatIndent","SwitchBody","after","textAfter","closed","isCase","baseIndent","unit","Block","delimitedIndent","closing","ArrowFunction","cx","TemplateString BlockComment","JSXElement","lineIndent","JSXEscape","column","foldNodeProp","foldInside","BlockComment","tree","languageData","closeBrackets","brackets","commentTokens","line","block","open","close","indentOnInput","wordChars","jsxSublanguage","facet","defineLanguageFacet","typescriptLanguage","dialect","jsxLanguage","sublanguageProp","n","isTop","undefined","tsxLanguage","kwCompletion","keywords","split","map","typescriptKeywords","javascript","config","arguments","lang","jsx","typescript","LanguageSupport","data","of","autocomplete","ifNotIn","completeFromList","autoCloseTags","elementName","max","ch","nextSibling","Math","min","android","navigator","userAgent","EditorView","inputHandler","view","text","defaultInsert","composing","compositionStarted","readOnly","isActiveAt","base","closeTags","changeByRange","range","head","around","changes","insert","empty","EditorSelection","openTag","findOpenTag","dispatch","update","userEvent","scrollIntoView","esLint","eslint","parserOptions","ecmaVersion","sourceType","env","browser","es6","es2015","es2017","es2020","rules","getRules","forEach","desc","meta","docs","recommended","found","findRegions","fromLine","lineAt","offset","number","col","d","verify","translateDiagnostic","mapPos","input","start","result","endLine","endColumn","message","source","ruleId","severity","fix","actions","apply"],"sourceRoot":""}