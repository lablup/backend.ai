{"version":3,"file":"static/js/6735.c4ecf4ba.chunk.js","mappings":"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","sources":["hooks/useTokenizer.ts","components/lablupTalkativotUI/ChatSender.tsx","components/lablupTalkativotUI/ModelSelect.tsx","components/lablupTalkativotUI/CopyButton.tsx","components/lablupTalkativotUI/ChatMessageContent.tsx","components/lablupTalkativotUI/ChatMessage.tsx","components/lablupTalkativotUI/ScrollBottomHandlerButton.tsx","components/lablupTalkativotUI/VirtualChatMessageList.tsx","components/lablupTalkativotUI/LLMChatCard.tsx"],"sourcesContent":["import { startTransition, useEffect, useState } from 'react';\n\nexport const encodeAsync = async (str: string) => {\n  const { encode } = await import('gpt-tokenizer');\n\n  return encode(str).length;\n};\n\nexport const useTokenCount = (input: string = '') => {\n  const [value, setNum] = useState(0);\n\n  useEffect(() => {\n    startTransition(() => {\n      encodeAsync(input)\n        .then(setNum)\n        .catch(() => {\n          setNum(input.length);\n        });\n    });\n  }, [input]);\n\n  return value;\n};\n","import { Sender, SenderProps } from '@ant-design/x';\nimport { GetRef } from 'antd';\nimport { useEffect, useRef } from 'react';\n\ninterface ChatSenderProps extends SenderProps {\n  loading?: boolean;\n  autoFocus?: boolean;\n  onStop?: () => void;\n  onSend?: () => void;\n}\nconst ChatSender: React.FC<ChatSenderProps> = ({\n  style,\n  loading,\n  autoFocus,\n  onStop,\n  onSend,\n  ...senderProps\n}) => {\n  const senderRef = useRef<GetRef<typeof Sender>>(null);\n\n  useEffect(() => {\n    if (autoFocus && senderRef.current) {\n      senderRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  return (\n    <Sender\n      ref={senderRef}\n      {...senderProps}\n      loading={loading}\n      onSubmit={() => {\n        onSend?.();\n      }}\n      onCancel={() => {\n        onStop?.();\n      }}\n      submitType=\"enter\"\n    />\n  );\n};\nexport default ChatSender;\n","import { BAIModel } from './LLMChatCard';\nimport { Select, SelectProps } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface ModelSelectProps extends SelectProps {\n  models?: Array<BAIModel>;\n  allowCustomModel?: boolean;\n}\n\nconst ModelSelect: React.FC<ModelSelectProps> = ({\n  models,\n  allowCustomModel,\n  ...selectProps\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Select\n      placeholder={t('chatui.SelectModel')}\n      style={{\n        fontWeight: 'normal',\n      }}\n      showSearch\n      options={_.concat(\n        allowCustomModel\n          ? [\n              {\n                label: 'Custom',\n                // @ts-ignore\n                value: 'custom',\n              },\n            ]\n          : [],\n        _.chain(models)\n          .groupBy('group')\n          .mapValues((ms) =>\n            _.map(ms, (m) => ({\n              label: m.label,\n              value: m.name,\n            })),\n          )\n          .map((v, k) => ({\n            label: k === 'undefined' ? 'Others' : k,\n            options: v,\n          }))\n          .value(),\n      )}\n      popupMatchSelectWidth={false}\n      {...selectProps}\n    />\n  );\n};\n\nexport default ModelSelect;\n","import { Button, ButtonProps, Tooltip } from 'antd';\nimport { CopyConfig } from 'antd/es/typography/Base';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface CopyButtonProps extends ButtonProps {\n  copyable?: Omit<CopyConfig, 'text'> & { text: string };\n  defaultIcon?: React.ReactNode;\n}\nconst CopyButton: React.FC<CopyButtonProps> = ({\n  copyable,\n  defaultIcon,\n  ...props\n}) => {\n  const [isCopied, setIsCopied] = useState(false);\n\n  const handleCopy = async () => {\n    setIsCopied(true);\n  };\n\n  useEffect(() => {\n    if (isCopied) {\n      const timeout = setTimeout(() => {\n        setIsCopied(false);\n      }, 2000);\n      return () => clearTimeout(timeout);\n    }\n  }, [isCopied]);\n\n  return (\n    <Tooltip\n      title={isCopied ? 'Copied!' : 'Copy'}\n      open={isCopied ? true : undefined}\n    >\n      <CopyToClipboard text={copyable?.text || ''} onCopy={handleCopy}>\n        <Button\n          icon={\n            isCopied ? <CheckIcon /> : defaultIcon ? defaultIcon : <CopyIcon />\n          }\n          {...props}\n        />\n      </CopyToClipboard>\n    </Tooltip>\n  );\n};\n\nexport default CopyButton;\n","import CopyButton from './CopyButton';\nimport { Card, Typography } from 'antd';\n// `rehype-katex` does not import the CSS file, so we need to import it manually.\nimport 'katex/dist/katex.min.css';\nimport React from 'react';\nimport Markdown from 'react-markdown';\nimport {\n  Prism as SyntaxHighlighter,\n  SyntaxHighlighterProps,\n} from 'react-syntax-highlighter';\nimport { oneLight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport rehypeKatex from 'rehype-katex';\nimport remarkGfm from 'remark-gfm';\nimport remarkMath from 'remark-math';\n\nconst { Text } = Typography;\n\nconst ChatMessageContent: React.FC<{\n  children?: string;\n}> = ({ children }) => {\n  return (\n    <Markdown\n      remarkPlugins={[remarkGfm, remarkMath]}\n      rehypePlugins={[rehypeKatex]}\n      components={{\n        p({ node, ...props }) {\n          // @ts-ignore\n          return <p {...props} style={{ whiteSpace: 'pre-wrap' }} />;\n        },\n        code(props) {\n          const { children, className, node, ref, ...rest } = props;\n          const match = /language-(\\w+)/.exec(className || '');\n          const content = String(children).replace(/\\n$/, '');\n          return match ? (\n            <Card\n              title={\n                <Text style={{ fontWeight: 'normal' }} type=\"secondary\">\n                  {match[1]}\n                </Text>\n              }\n              type=\"inner\"\n              size=\"small\"\n              extra={\n                <CopyButton\n                  type=\"text\"\n                  copyable={{\n                    text: 's',\n                  }}\n                />\n              }\n              styles={{\n                body: { padding: 0 },\n                header: { margin: 0 },\n              }}\n            >\n              <div style={{ margin: '-0.5em 0', width: '100%' }}>\n                <CodeBlock\n                  ref={ref}\n                  {...rest}\n                  PreTag=\"div\"\n                  language={match[1]}\n                  style={oneLight}\n                  wrapLongLines\n                  wrapLines\n                >\n                  {content}\n                </CodeBlock>\n              </div>\n            </Card>\n          ) : (\n            <code {...rest} className={className}>\n              {/* @ts-ignore */}\n              {children}\n            </code>\n          );\n        },\n      }}\n    >\n      {children}\n    </Markdown>\n  );\n};\n\nconst X: React.FC<SyntaxHighlighterProps> = ({ children, ...props }) => {\n  return <SyntaxHighlighter {...props}>{children}</SyntaxHighlighter>;\n};\nconst CodeBlock = React.memo(X);\n\nexport default React.memo(ChatMessageContent);\n","import Flex from '../Flex';\n// ES 2015\nimport ChatMessageContent from './ChatMessageContent';\nimport { Message } from '@ai-sdk/react';\nimport { Attachments } from '@ant-design/x';\nimport { useThrottle } from 'ahooks';\nimport { Avatar, theme, Image, Collapse, Typography, Spin } from 'antd';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ndayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\n\nconst ChatMessage: React.FC<{\n  message: Message;\n  placement?: 'left' | 'right';\n  extra?: React.ReactNode;\n  enableExtraHover?: boolean;\n  containerStyle?: React.CSSProperties;\n  isStreaming?: boolean;\n  // avatar?:\n}> = ({\n  extra,\n  message,\n  placement = 'left',\n  containerStyle,\n  enableExtraHover,\n  isStreaming,\n}) => {\n  const { token } = theme.useToken();\n  const { t } = useTranslation();\n  const [isHovered, setIsHovered] = useState(false);\n\n  const throttledMessageReasoning = useThrottle(message.reasoning, {\n    wait: 50,\n  });\n  const throttledMessageContent = useThrottle(message.content, { wait: 50 });\n\n  return (\n    <Flex\n      direction={placement === 'left' ? 'row' : 'row-reverse'}\n      justify={'start'}\n      align=\"baseline\"\n      style={{\n        marginLeft: placement === 'left' ? '0' : '15%',\n        marginRight: placement === 'right' ? '0' : 20,\n        ...containerStyle,\n      }}\n      gap={'sm'}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {message.role !== 'user' ? (\n        <Avatar\n          // icon={message.role === \"user\" ? \"🧑‍🦰\" : \"🤖\"}\n          icon={'🤖'}\n          style={{ fontSize: token.fontSizeHeading3 }}\n        />\n      ) : null}\n\n      <Flex\n        direction=\"column\"\n        align={placement === 'left' ? 'start' : 'end'}\n        wrap=\"wrap\"\n        style={{ flex: 1 }}\n        gap={'xs'}\n      >\n        {_.map(message.experimental_attachments, (attachment, index) =>\n          _.includes(attachment?.contentType, 'image/') ? (\n            <Flex\n              style={{\n                border: 'none',\n                textAlign: 'end',\n              }}\n              align=\"end\"\n            >\n              <Image\n                key={`${message?.id}-${index}`}\n                src={attachment?.url}\n                alt={attachment?.name}\n                style={{\n                  maxWidth: '50vw',\n                  maxHeight: '12vh',\n                  borderRadius: token.borderRadius,\n                }}\n              />\n            </Flex>\n          ) : (\n            <Attachments.FileCard\n              key={index}\n              item={{\n                uid: `${message?.id}-${index}`,\n                name: attachment?.name || attachment?.url,\n                type: attachment?.contentType,\n                description: attachment?.name,\n                url: attachment?.url,\n              }}\n            />\n          ),\n        )}\n        <Flex\n          align=\"stretch\"\n          direction=\"column\"\n          style={{\n            borderRadius: token.borderRadius,\n            borderColor: token.colorBorderSecondary,\n            borderWidth: token.lineWidth,\n            padding: '1em',\n            paddingTop: 0,\n            paddingBottom: 0,\n            backgroundColor:\n              message.role !== 'user'\n                ? token.colorBgContainer\n                : token.colorBgContainerDisabled,\n            maxWidth: '100%',\n            width: _.trim(message.reasoning) ? '100%' : 'auto',\n          }}\n        >\n          {_.trim(message.reasoning) && (\n            <Collapse\n              style={{\n                marginTop: token.margin,\n                width: '100%',\n              }}\n              items={[\n                {\n                  key: 'reasoning',\n                  label: _.isEmpty(throttledMessageContent) ? (\n                    <Flex gap=\"xs\">\n                      <Typography.Text>{t('chatui.Thinking')}</Typography.Text>\n                      <Spin size=\"small\" />\n                    </Flex>\n                  ) : (\n                    <Typography.Text>\n                      {t('chatui.ViewReasoning')}\n                    </Typography.Text>\n                  ),\n                  children: (\n                    <ChatMessageContent>\n                      {throttledMessageReasoning}\n                    </ChatMessageContent>\n                  ),\n                },\n              ]}\n            />\n          )}\n          <ChatMessageContent>\n            {throttledMessageContent + (isStreaming ? '\\n●' : '')}\n          </ChatMessageContent>\n        </Flex>\n        <Flex\n          style={{\n            fontSize: token.fontSizeSM,\n            ...(enableExtraHover\n              ? {\n                  opacity: isHovered ? 1 : 0,\n                  transition: 'opacity 0.2s',\n                  transitionDelay: isHovered ? '0s' : '0.2s',\n                }\n              : {}),\n          }}\n        >\n          {extra}\n        </Flex>\n        {/* <Text\n          type=\"secondary\"\n          style={{\n            fontSize: token.fontSizeSM,\n            opacity: isHovered ? 1 : 0,\n            transition: \"opacity 0.2s\",\n            transitionDelay: isHovered ? \"0s\" : \"0.2s\",\n          }}\n        >\n          {dayjs(message.createdAt)?.isSame(new Date(), \"day\")\n            ? dayjs(message.createdAt).format(\"LT\")\n            : dayjs(message.createdAt).format(\"L LT\")}\n        </Text> */}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default ChatMessage;\n","import { useEventNotStable } from '../../hooks/useEventNotStable';\nimport { Button } from 'antd';\nimport { ArrowDownIcon } from 'lucide-react';\nimport React, { useEffect } from 'react';\n\ninterface ScrollBottomHandlerButtonProps {\n  autoScroll?: boolean;\n  atBottom?: boolean;\n  lastMessageContent?: string;\n  onScrollToBottom: (type: 'click' | 'auto') => void;\n}\nconst ScrollBottomHandlerButton: React.FC<ScrollBottomHandlerButtonProps> = ({\n  autoScroll,\n  atBottom,\n  lastMessageContent,\n  ...props\n}) => {\n  const onScrollToBottom = useEventNotStable(props.onScrollToBottom);\n\n  useEffect(() => {\n    if (atBottom && autoScroll) {\n      onScrollToBottom?.('auto');\n    }\n  }, [atBottom, autoScroll, lastMessageContent, onScrollToBottom]);\n\n  return (\n    <Button\n      icon={<ArrowDownIcon />}\n      shape=\"circle\"\n      onClick={() => {\n        onScrollToBottom && onScrollToBottom('click');\n      }}\n    ></Button>\n  );\n};\n\nexport default ScrollBottomHandlerButton;\n","import Flex from '../Flex';\nimport ChatMessage from './ChatMessage';\nimport CopyButton from './CopyButton';\nimport ScrollBottomHandlerButton from './ScrollBottomHandlerButton';\nimport { Message } from '@ai-sdk/react';\nimport { theme } from 'antd';\nimport Compact from 'antd/es/space/Compact';\nimport _ from 'lodash';\nimport React, { useRef, useState } from 'react';\nimport { Virtuoso, VirtuosoHandle } from 'react-virtuoso';\n\n// import AutoScroll from '../AutoScroll';\n// import Item from '../ChatItem';\n\ninterface VirtualizedListProps {\n  messages: Array<Message>;\n  isStreaming?: boolean;\n}\nconst VirtualChatMessageList: React.FC<VirtualizedListProps> = ({\n  messages,\n  isStreaming,\n}) => {\n  const virtuosoRef = useRef<VirtuosoHandle>(null);\n  const [atBottom, setAtBottom] = useState(true);\n  const { token } = theme.useToken();\n  // overscan should be 1.5 times the height of the window\n  const overscan = typeof window !== 'undefined' ? window.innerHeight * 1.5 : 0;\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{ height: '100%', flex: 1 }}\n    >\n      <Virtuoso\n        atBottomStateChange={setAtBottom}\n        atBottomThreshold={60}\n        computeItemKey={(_, item) => item.id}\n        data={messages}\n        followOutput={'auto'}\n        initialTopMostItemIndex={messages?.length - 1}\n        itemContent={(index, m) => {\n          return (\n            <ChatMessage\n              key={m.id}\n              message={m}\n              placement={m.role === 'user' ? 'right' : 'left'}\n              containerStyle={{\n                paddingLeft: token.paddingMD,\n                paddingRight: token.paddingMD,\n                paddingTop: index === 0 ? token.paddingMD : 0,\n                paddingBottom:\n                  index === messages.length - 1 ? token.paddingMD : 0,\n              }}\n              isStreaming={\n                m.role !== 'user' &&\n                isStreaming &&\n                index === messages.length - 1\n              }\n              enableExtraHover={m.role === 'user'}\n              extra={\n                m.role !== 'user' ? (\n                  <Compact>\n                    <CopyButton\n                      type=\"text\"\n                      size=\"small\"\n                      copyable={{\n                        text: m.content,\n                      }}\n                    />\n                    {/* <Button/> */}\n                    {/* <Button/> */}\n                  </Compact>\n                ) : (\n                  <Compact>{null}</Compact>\n                )\n              }\n            />\n          );\n        }}\n        overscan={overscan}\n        ref={virtuosoRef}\n      />\n      <div\n        style={{\n          position: 'absolute',\n          right: '50%',\n          transform: 'translateX(+50%)',\n          bottom: token.marginSM,\n          opacity: atBottom ? 0 : 1,\n          transition: 'opacity 0.2s',\n          transitionDelay: atBottom ? '0s' : '0.2s',\n        }}\n      >\n        <ScrollBottomHandlerButton\n          atBottom={atBottom}\n          autoScroll={isStreaming}\n          onScrollToBottom={(type) => {\n            const virtuoso = virtuosoRef.current;\n            switch (type) {\n              case 'auto': {\n                virtuoso?.scrollToIndex({\n                  align: 'end',\n                  behavior: 'auto',\n                  index: 'LAST',\n                });\n                break;\n              }\n              case 'click': {\n                virtuoso?.scrollToIndex({\n                  align: 'end',\n                  behavior: 'smooth',\n                  index: 'LAST',\n                });\n                break;\n              }\n            }\n          }}\n          lastMessageContent={_.get(_.last(messages), 'content')}\n        />\n      </div>\n    </Flex>\n  );\n};\n\nexport default VirtualChatMessageList;\n","'use client';\n\nimport { createDataTransferFiles, filterEmptyItem } from '../../helper';\nimport { useWebUINavigate } from '../../hooks';\nimport { useTokenCount } from '../../hooks/useTokenizer';\nimport Flex from '../Flex';\nimport ChatSender from './ChatSender';\nimport ModelSelect from './ModelSelect';\nimport VirtualChatMessageList from './VirtualChatMessageList';\nimport { createOpenAI } from '@ai-sdk/openai';\nimport { useChat } from '@ai-sdk/react';\nimport {\n  CloudUploadOutlined,\n  DeleteOutlined,\n  LinkOutlined,\n  MoreOutlined,\n  RocketOutlined,\n} from '@ant-design/icons';\nimport { Attachments, AttachmentsProps, Sender } from '@ant-design/x';\nimport { useControllableValue } from 'ahooks';\nimport {\n  streamText,\n  extractReasoningMiddleware,\n  wrapLanguageModel,\n  ChatRequestOptions,\n} from 'ai';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  CardProps,\n  Dropdown,\n  Form,\n  FormInstance,\n  Input,\n  MenuProps,\n  Tag,\n  theme,\n  Typography,\n} from 'antd';\nimport _ from 'lodash';\nimport { Scale } from 'lucide-react';\nimport React, { useEffect, useRef, useState, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport type BAIModel = {\n  id: string;\n  label?: string;\n  name?: string;\n  group?: string;\n  created?: string;\n  description?: string;\n};\ntype BAIAgent = {};\nexport interface LLMChatCardProps extends CardProps {\n  models?: Array<BAIModel>;\n  agents?: Array<BAIAgent>;\n  modelId?: string;\n  agentId?: string;\n  endpointId?: string;\n  baseURL?: string;\n  apiKey?: string;\n  headers?: Record<string, string> | Headers;\n  credentials?: RequestCredentials;\n  fetchOnClient?: boolean;\n  allowCustomModel?: boolean;\n  alert?: React.ReactNode;\n  leftExtra?: React.ReactNode;\n  inputMessage?: string;\n  inputAttachment?: AttachmentsProps['items'];\n  submitKey?: string;\n  onAgentChange?: (agentId: string) => void;\n  onModelChange?: (modelId: string) => void;\n  onInputChange?: (input: string) => void;\n  onAttachmentChange?: (attachment: AttachmentsProps['items']) => void;\n  onSubmitChange?: () => void;\n  showCompareMenuItem?: boolean;\n  modelToken?: string;\n}\n\nconst LLMChatCard: React.FC<LLMChatCardProps> = ({\n  models = [],\n  endpointId,\n  baseURL,\n  headers,\n  credentials,\n  apiKey,\n  fetchOnClient,\n  allowCustomModel,\n  alert,\n  leftExtra,\n  inputMessage,\n  inputAttachment,\n  submitKey,\n  onInputChange,\n  onAttachmentChange,\n  onSubmitChange,\n  showCompareMenuItem,\n  modelToken,\n  ...cardProps\n}) => {\n  const webuiNavigate = useWebUINavigate();\n  const [isOpenAttachments, setIsOpenAttachments] = useState(false);\n  const [files, setFiles] = useState<AttachmentsProps['items']>([]);\n\n  const [modelId, setModelId] = useControllableValue(cardProps, {\n    valuePropName: 'modelId',\n    trigger: 'onModelChange',\n    defaultValue: models?.[0]?.id,\n  });\n\n  const customModelFormRef = useRef<FormInstance>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  const {\n    messages,\n    error,\n    input,\n    setInput,\n    stop,\n    isLoading,\n    append,\n    setMessages,\n    // ...chatHelpers,\n  } = useChat({\n    api: baseURL,\n    headers,\n    credentials,\n    body: {\n      modelId: modelId,\n    },\n    fetch: async (input, init) => {\n      if (fetchOnClient || modelId === 'custom') {\n        const body = JSON.parse(init?.body as string);\n        const provider = createOpenAI({\n          baseURL: allowCustomModel\n            ? customModelFormRef.current?.getFieldValue('baseURL')\n            : baseURL,\n          apiKey:\n            (allowCustomModel\n              ? customModelFormRef.current?.getFieldValue('token')\n              : apiKey) || 'dummy',\n        });\n        const result = streamText({\n          abortSignal: init?.signal || undefined,\n          model: wrapLanguageModel({\n            model: provider(\n              allowCustomModel\n                ? customModelFormRef.current?.getFieldValue('modelId')\n                : modelId,\n            ),\n            middleware: extractReasoningMiddleware({ tagName: 'think' }),\n          }),\n          messages: body?.messages,\n        });\n        setStartTime(Date.now());\n        return result.toDataStreamResponse({\n          sendReasoning: true,\n        });\n      } else {\n        return fetch(input, init);\n      }\n    },\n  });\n  const { token } = theme.useToken();\n  const { t } = useTranslation();\n\n  const [startTime, setStartTime] = useState<number | null>(null);\n\n  // If the `inputMessage` prop exists, the `input` state has to follow it.\n  useEffect(() => {\n    if (!_.isUndefined(inputMessage)) {\n      setInput(inputMessage);\n    }\n  }, [inputMessage, setInput]);\n\n  const setFilesFromInputAttachment = (\n    inputAttachment: AttachmentsProps['items'],\n  ) => {\n    if (!_.isUndefined(inputAttachment) && !_.isEqual(files, inputAttachment)) {\n      setFiles(inputAttachment);\n      setIsOpenAttachments(true);\n    }\n  };\n\n  // If the `inputAttachment` prop exists, the `files` state has to follow it.\n  useEffect(() => {\n    setFilesFromInputAttachment(inputAttachment);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputAttachment]);\n\n  useEffect(() => {\n    if (!_.isUndefined(submitKey) && input) {\n      const chatRequestOptions: ChatRequestOptions = {};\n      if (!_.isEmpty(files)) {\n        chatRequestOptions.experimental_attachments =\n          createDataTransferFiles(files);\n      }\n      append(\n        {\n          role: 'user',\n          content: input,\n        },\n        chatRequestOptions,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [submitKey]);\n\n  const inputTokenCount = useTokenCount(input);\n\n  const allChatMessageString = useMemo(() => {\n    return _.map(messages, (message) => message?.content).join('');\n  }, [messages]);\n  const chatsTokenCount = useTokenCount(allChatMessageString);\n  const totalTokenCount = inputTokenCount + chatsTokenCount;\n\n  const lastAssistantMessageString = useMemo(() => {\n    const lastAssistantMessage = _.last(messages);\n    if (lastAssistantMessage?.role === 'assistant') {\n      return lastAssistantMessage?.content;\n    } else {\n      return '';\n    }\n  }, [messages]);\n\n  const lastAssistantTokenCount = useTokenCount(lastAssistantMessageString);\n  const tokenPerSecond = useMemo(() => {\n    return lastAssistantTokenCount > 0 && startTime\n      ? lastAssistantTokenCount / ((Date.now() - startTime) / 1000)\n      : 0;\n  }, [lastAssistantTokenCount, startTime]);\n\n  const items: MenuProps['items'] = filterEmptyItem([\n    showCompareMenuItem && {\n      key: 'compare',\n      label: t('chatui.CompareWithOtherModels'),\n      icon: <Scale />,\n      onClick: () => {\n        webuiNavigate(\n          `/serving?tab=chatting&endpointId=${endpointId}&modelId=${modelId}`,\n        );\n      },\n    },\n    showCompareMenuItem && {\n      type: 'divider',\n    },\n    {\n      key: 'clear',\n      danger: true,\n      label: t('chatui.DeleteChatHistory'),\n      icon: <DeleteOutlined />,\n      onClick: () => {\n        setMessages([]);\n      },\n    },\n  ]);\n\n  return (\n    <Card\n      ref={cardRef}\n      bordered\n      extra={\n        [\n          // <Checkbox key=\"sync\">Sync</Checkbox>,\n          // <Button key=\"setting\" type=\"text\" icon={<SlidersHorizontalIcon/>}></Button>,\n        ]\n      }\n      {...cardProps}\n      title={\n        <Flex direction=\"column\" align=\"stretch\" gap={'sm'}>\n          <Flex direction=\"row\" gap={'xs'}>\n            {/* <Select\n            options={[\n              {\n                label: \"Default Agent\",\n                value: \"default\",\n              },\n            ]}\n            value={\"default\"}\n            popupMatchSelectWidth={false}\n          ></Select> */}\n            {leftExtra}\n            <ModelSelect\n              models={models}\n              value={modelId}\n              onChange={setModelId}\n              allowCustomModel={allowCustomModel}\n            />\n            <Dropdown menu={{ items }} trigger={['click']}>\n              <Button\n                type=\"link\"\n                onClick={(e) => e.preventDefault()}\n                icon={<MoreOutlined />}\n                style={{ color: token.colorTextSecondary, width: token.sizeMS }}\n              />\n            </Dropdown>\n          </Flex>\n        </Flex>\n      }\n      style={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n      styles={{\n        body: {\n          backgroundColor: token.colorFillQuaternary,\n          borderRadius: 0,\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          padding: 0,\n          height: '50%',\n          position: 'relative',\n        },\n        actions: {\n          paddingLeft: token.paddingContentHorizontal,\n          paddingRight: token.paddingContentHorizontal,\n        },\n        header: {\n          zIndex: 1,\n        },\n      }}\n      actions={[\n        <ChatSender\n          autoFocus\n          value={input}\n          placeholder=\"Say something...\"\n          header={\n            <Sender.Header\n              closable={false}\n              title={t('chatui.Attachments')}\n              open={!!isOpenAttachments && !_.isEmpty(files)}\n              onOpenChange={setIsOpenAttachments}\n              styles={{\n                content: {\n                  padding: 0,\n                },\n              }}\n            >\n              <Attachments\n                beforeUpload={() => false}\n                getDropContainer={() => cardRef.current}\n                accept=\"image/*,text/*\"\n                items={files}\n                onChange={({ fileList }) => {\n                  setFiles(fileList);\n                  onAttachmentChange?.(fileList);\n                }}\n                placeholder={(type) =>\n                  type === 'drop'\n                    ? {\n                        title: t('chatui.DropFileHere'),\n                      }\n                    : {\n                        icon: <CloudUploadOutlined />,\n                        title: t('chatui.UploadFiles'),\n                        description: t('chatui.UploadFilesDescription'),\n                      }\n                }\n              />\n            </Sender.Header>\n          }\n          prefix={\n            <Attachments\n              beforeUpload={() => false}\n              getDropContainer={() => cardRef.current}\n              accept=\"image/*,text/*\"\n              items={files}\n              onChange={({ fileList }) => {\n                setFiles(fileList);\n                onAttachmentChange?.(fileList);\n                setIsOpenAttachments(true);\n              }}\n              placeholder={(type) =>\n                type === 'drop'\n                  ? {\n                      title: t('chatui.DropFileHere'),\n                    }\n                  : {\n                      icon: <CloudUploadOutlined />,\n                      title: t('chatui.UploadFiles'),\n                      description: t('chatui.UploadFilesDescription'),\n                    }\n              }\n            >\n              <Badge dot={!_.isEmpty(files) && !isOpenAttachments}>\n                <Button type=\"text\" icon={<LinkOutlined />} />\n              </Badge>\n            </Attachments>\n          }\n          onChange={(v: string) => {\n            setInput(v);\n            if (onInputChange) {\n              onInputChange(v);\n            }\n          }}\n          loading={isLoading}\n          onStop={() => {\n            stop();\n          }}\n          onSend={() => {\n            if (input || !_.isEmpty(files)) {\n              const chatRequestOptions: ChatRequestOptions = {};\n              if (!_.isEmpty(files)) {\n                chatRequestOptions.experimental_attachments =\n                  createDataTransferFiles(files);\n              }\n              append(\n                {\n                  role: 'user',\n                  content: input,\n                },\n                chatRequestOptions,\n              );\n\n              setTimeout(() => {\n                setInput('');\n                setFiles([]);\n                setIsOpenAttachments(false);\n              }, 0);\n              onSubmitChange?.();\n            }\n          }}\n          style={{ flex: 1 }}\n        />,\n      ]}\n    >\n      <Flex\n        direction=\"row\"\n        style={{\n          padding: token.paddingSM,\n          paddingRight: token.paddingContentHorizontalLG,\n          paddingLeft: token.paddingContentHorizontalLG,\n          backgroundColor: token.colorBgContainer,\n          display:\n            (allowCustomModel && modelId === 'custom' && 'flex') || 'none',\n        }}\n      >\n        <Form\n          ref={customModelFormRef}\n          layout=\"horizontal\"\n          size=\"small\"\n          requiredMark=\"optional\"\n          style={{ flex: 1 }}\n          key={baseURL}\n          initialValues={{\n            baseURL: baseURL,\n            token: modelToken,\n          }}\n        >\n          {alert ? (\n            <div style={{ marginBottom: token.size }}>{alert}</div>\n          ) : null}\n          <Form.Item\n            label=\"baseURL\"\n            name=\"baseURL\"\n            rules={[\n              {\n                type: 'url',\n              },\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input placeholder=\"https://domain/v1\" />\n          </Form.Item>\n          <Form.Item\n            label=\"Model ID\"\n            name=\"modelId\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input placeholder=\"llm-model\" />\n          </Form.Item>\n          <Form.Item label=\"Token\" name=\"token\">\n            <Input />\n          </Form.Item>\n        </Form>\n      </Flex>\n      {/* <ChatMessageList messages={messages}  /> */}\n      {!_.isEmpty(error?.message) ? (\n        <Alert\n          message={error?.message}\n          type=\"error\"\n          showIcon\n          style={{\n            margin: token.marginSM,\n          }}\n          closable\n        />\n      ) : null}\n      <VirtualChatMessageList messages={messages} isStreaming={isLoading} />\n      <Flex justify=\"end\" align=\"end\" style={{ margin: token.marginSM }}>\n        <Tag>\n          <Flex gap={'xs'}>\n            <RocketOutlined />\n            <Flex gap={'xxs'}>\n              <Typography.Text>{tokenPerSecond.toFixed(2)}</Typography.Text>\n              <Typography.Text type=\"secondary\">tok/s</Typography.Text>\n            </Flex>\n            <Flex gap={'xxs'}>\n              <Typography.Text>{totalTokenCount}</Typography.Text>\n              <Typography.Text type=\"secondary\">total tokens</Typography.Text>\n            </Flex>\n          </Flex>\n        </Tag>\n      </Flex>\n    </Card>\n  );\n};\n\nexport default LLMChatCard;\n"],"names":["useTokenCount","input","arguments","length","undefined","value","setNum","useState","useEffect","startTransition","async","encode","str","encodeAsync","then","catch","_ref","style","loading","autoFocus","onStop","onSend","senderProps","senderRef","useRef","current","focus","_jsx","Sender","ref","onSubmit","onCancel","submitType","models","allowCustomModel","selectProps","t","useTranslation","Select","placeholder","fontWeight","showSearch","options","_","label","groupBy","mapValues","ms","m","name","map","v","k","popupMatchSelectWidth","copyable","defaultIcon","props","isCopied","setIsCopied","timeout","setTimeout","clearTimeout","Tooltip","title","open","children","CopyToClipboard","text","onCopy","Button","icon","CheckIcon","CopyIcon","Text","Typography","ChatMessageContent","Markdown","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeKatex","components","p","_ref2","node","whiteSpace","code","className","rest","match","exec","content","String","replace","Card","type","size","extra","CopyButton","styles","body","padding","header","margin","width","CodeBlock","PreTag","language","oneLight","wrapLongLines","wrapLines","X","_ref3","SyntaxHighlighter","React","dayjs","localizedFormat","relativeTime","message","placement","containerStyle","enableExtraHover","isStreaming","token","theme","useToken","isHovered","setIsHovered","throttledMessageReasoning","useThrottle","reasoning","wait","throttledMessageContent","_jsxs","Flex","direction","justify","align","marginLeft","marginRight","gap","onMouseEnter","onMouseLeave","role","Avatar","fontSize","fontSizeHeading3","wrap","flex","experimental_attachments","attachment","index","contentType","border","textAlign","Image","src","url","alt","maxWidth","maxHeight","borderRadius","id","Attachments","FileCard","item","uid","description","borderColor","colorBorderSecondary","borderWidth","lineWidth","paddingTop","paddingBottom","backgroundColor","colorBgContainer","colorBgContainerDisabled","Collapse","marginTop","items","key","Spin","fontSizeSM","opacity","transition","transitionDelay","autoScroll","atBottom","lastMessageContent","onScrollToBottom","useEventNotStable","ArrowDownIcon","shape","onClick","messages","virtuosoRef","setAtBottom","overscan","window","innerHeight","height","Virtuoso","atBottomStateChange","atBottomThreshold","computeItemKey","data","followOutput","initialTopMostItemIndex","itemContent","ChatMessage","paddingLeft","paddingMD","paddingRight","Compact","position","right","transform","bottom","marginSM","ScrollBottomHandlerButton","virtuoso","scrollToIndex","behavior","_models$","endpointId","baseURL","headers","credentials","apiKey","fetchOnClient","alert","leftExtra","inputMessage","inputAttachment","submitKey","onInputChange","onAttachmentChange","onSubmitChange","showCompareMenuItem","modelToken","cardProps","webuiNavigate","useWebUINavigate","isOpenAttachments","setIsOpenAttachments","files","setFiles","modelId","setModelId","useControllableValue","valuePropName","trigger","defaultValue","customModelFormRef","cardRef","error","setInput","stop","isLoading","append","setMessages","useChat","api","fetch","init","_customModelFormRef$c","_customModelFormRef$c2","_customModelFormRef$c3","JSON","parse","provider","createOpenAI","getFieldValue","result","streamText","abortSignal","signal","model","wrapLanguageModel","middleware","extractReasoningMiddleware","tagName","setStartTime","Date","now","toDataStreamResponse","sendReasoning","startTime","setFilesFromInputAttachment","chatRequestOptions","createDataTransferFiles","inputTokenCount","allChatMessageString","useMemo","join","totalTokenCount","lastAssistantMessageString","lastAssistantMessage","lastAssistantTokenCount","tokenPerSecond","filterEmptyItem","Scale","danger","DeleteOutlined","bordered","ModelSelect","onChange","Dropdown","menu","e","preventDefault","MoreOutlined","color","colorTextSecondary","sizeMS","display","flexDirection","colorFillQuaternary","actions","paddingContentHorizontal","zIndex","ChatSender","Header","closable","onOpenChange","beforeUpload","getDropContainer","accept","fileList","CloudUploadOutlined","prefix","Badge","dot","LinkOutlined","paddingSM","paddingContentHorizontalLG","Form","layout","requiredMark","initialValues","marginBottom","Item","rules","required","Input","Alert","showIcon","VirtualChatMessageList","Tag","RocketOutlined","toFixed"],"sourceRoot":""}