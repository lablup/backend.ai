{"version":3,"file":"static/js/6502.ca66cc9a.chunk.js","mappings":"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","sources":["__generated__/SessionOwnerSetterCardQuery.graphql.ts","components/DatePickerISO.tsx","components/HiddenFormItem.tsx","components/SessionNameFormItem.tsx","components/PortSelectFormItem.tsx","components/SessionLauncherErrorTourProps.tsx","components/SessionOwnerSetterCard.tsx","components/SessionLauncherPreview.tsx","hooks/useRecentSessionHistory.tsx","components/SessionTemplateModal.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<d19e05501e2f8044559e0684fe36364e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionOwnerSetterCardQuery$variables = {\n  email: string;\n};\nexport type SessionOwnerSetterCardQuery$data = {\n  readonly keypairs: ReadonlyArray<{\n    readonly access_key: string | null | undefined;\n  } | null | undefined> | null | undefined;\n  readonly user: {\n    readonly domain_name: string | null | undefined;\n    readonly groups: ReadonlyArray<{\n      readonly id: string | null | undefined;\n      readonly name: string | null | undefined;\n    } | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type SessionOwnerSetterCardQuery = {\n  response: SessionOwnerSetterCardQuery$data;\n  variables: SessionOwnerSetterCardQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"domain_name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"UserGroup\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"groups\",\n  \"plural\": true,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    (v4/*: any*/)\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"a8de553c14d6730a6825cba2f409be0d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionOwnerSetterCardQuery(\\n  $email: String!\\n) {\\n  keypairs(email: $email) {\\n    access_key\\n    id\\n  }\\n  user(email: $email) {\\n    domain_name\\n    groups {\\n      name\\n      id\\n    }\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ba086835ea654ab889e0e6aaefa0abfe\";\n\nexport default node;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport { GetRef } from 'antd/lib';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO = React.forwardRef<\n  GetRef<typeof DatePicker>,\n  DatePickerISOProps\n>(({ value, onChange, localFormat, ...pickerProps }, ref) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      ref={ref}\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n});\n\nDatePickerISO.displayName = 'DatePickerISO';\nexport default DatePickerISO;\n","import { Form, FormItemProps } from 'antd';\nimport React, { useEffect } from 'react';\n\ninterface HiddenFormItemProps extends Omit<FormItemProps, 'children'> {\n  value: any;\n}\nconst HiddenFormItem: React.FC<HiddenFormItemProps> = ({ value, ...props }) => {\n  const form = Form.useFormInstance();\n  useEffect(() => {\n    form.setFieldValue(props.name, value);\n  }, [value, form, props.name]);\n  return <Form.Item {...props} hidden />;\n};\n\nexport default HiddenFormItem;\n","import { Form, FormItemProps, Input } from 'antd';\nimport { TFunction } from 'i18next';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\n\nexport const getSessionNameRules = (\n  t: TFunction,\n): Exclude<FormItemProps['rules'], undefined> => [\n  {\n    min: 4,\n    message: t('session.validation.SessionNameTooShort'),\n  },\n  {\n    max: 64,\n    message: t('session.validation.SessionNameTooLong64'),\n  },\n  {\n    validator(f, value) {\n      if (_.isEmpty(value)) {\n        return Promise.resolve();\n      }\n      if (!/^\\w/.test(value)) {\n        return Promise.reject(\n          t('session.validation.SessionNameShouldStartWith'),\n        );\n      }\n\n      if (!/^[\\w.-]*$/.test(value)) {\n        return Promise.reject(\n          t('session.validation.SessionNameInvalidCharacter'),\n        );\n      }\n\n      if (!/\\w$/.test(value) && value.length >= 4) {\n        return Promise.reject(t('session.validation.SessionNameShouldEndWith'));\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={getSessionNameRules(t)}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({\n  name = 'ports',\n  ...formItemProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const form = Form.useFormInstance();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name={name}\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        () => ({\n          validator(rule, values) {\n            if (\n              transformPortValuesToNumbers(values).length <=\n              baiClient._config.maxCountForPreopenPorts\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(\n                  t('session.launcher.PreOpenPortMaxCountLimit', {\n                    count: baiClient._config.maxCountForPreopenPorts,\n                  }),\n                ),\n              );\n            }\n          },\n        }),\n        () => ({\n          // To check if the port range is not start <= end\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                return parseInt(v).toString() === v || isPortRangeStr(v);\n              })\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(t('session.launcher.InvalidPortFormat')),\n              );\n            }\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            const allPorts = transformPortValuesToNumbers(values);\n            if (\n              _.every(allPorts, (port) => {\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            // To check if the port is duplicated\n            const allPorts = transformPortValuesToNumbers(values);\n            if (_.uniq(allPorts).length === allPorts.length) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.DuplicatedPort')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          const hasDuplicated =\n            _.filter(\n              transformPortValuesToNumbers(form.getFieldValue(name)),\n              (v) => v === parseInt(props.value),\n            ).length > 1;\n          return (\n            <PortTag\n              inValid={hasDuplicated}\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.PreOpen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n  inValid?: boolean;\n}\n\nexport const PortTag: React.FC<PortTagProps> = ({\n  inValid,\n  value,\n  ...tagProps\n}) => {\n  return (\n    <Tag\n      color={!inValid && isValidPortStr(value) ? undefined : 'red'}\n      {...tagProps}\n    />\n  );\n};\n\nexport const isValidPortStr = (portStr: string) => {\n  // consider range as valid\n  if (isPortRangeStr(portStr)) {\n    const splitPortRange = portStr.split(':');\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start >= MIN_PORT && end <= MAX_PORT;\n  } else if (\n    portStr === parseInt(portStr).toString() &&\n    parseInt(portStr) >= MIN_PORT &&\n    parseInt(portStr) <= MAX_PORT\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const isPortRangeStr = (portRange: string) => {\n  const splitPortRange = portRange.split(':');\n  if (splitPortRange.length === 2) {\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start <= end;\n  }\n  return false;\n};\n\nexport const parsePortRangeToNumbers = (portRange: string) => {\n  const [start, end] = portRange.split(':').map((v) => parseInt(v));\n  return _.range(start, end + 1);\n};\n\nexport const transformPortValuesToNumbers = (\n  values: PortSelectFormValues['ports'],\n) => {\n  return _.flatten(\n    _.map(values, (v) =>\n      isPortRangeStr(v) ? parsePortRangeToNumbers(v) : parseInt(v),\n    ),\n  );\n};\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useBAISettingUserState } from '../hooks/useBAISetting';\nimport { Tour, TourProps } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionLauncherValidationTourProps extends Omit<TourProps, 'steps'> {}\nconst SessionLauncherValidationTour: React.FC<\n  SessionLauncherValidationTourProps\n> = ({ open, onClose, ...otherProps }) => {\n  const { t } = useTranslation();\n  const [hasOpenedValidationTour, setHasOpenedValidationTour] =\n    useBAISettingUserState('has_opened_tour_neo_session_validation');\n\n  const steps = [\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.ValidationErrorText'),\n      target: () =>\n        document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t(\n        'tourGuide.neoSessionLauncher.FixErrorFieldByModifyButton',\n      ),\n      target: () =>\n        (\n          document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement\n        )?.querySelector('.ant-card-extra') as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.FixErrorAndTryAgainText'),\n      target: () =>\n        document.querySelector(\n          '[data-test-id=\"neo-session-launcher-tour-step-navigation\"]',\n        ) as HTMLElement,\n    },\n  ];\n  return (\n    <Tour\n      steps={steps}\n      onClose={(e) => {\n        onClose?.(e);\n        setHasOpenedValidationTour(true);\n      }}\n      open={!hasOpenedValidationTour && open}\n      {...otherProps}\n    />\n  );\n};\n\nexport default SessionLauncherValidationTour;\n","import { SessionOwnerSetterCardQuery } from '../__generated__/SessionOwnerSetterCardQuery.graphql';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAICard, { BAICardProps } from './BAICard';\nimport BAISelect from './BAISelect';\nimport Flex from './Flex';\nimport HiddenFormItem from './HiddenFormItem';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Form,\n  Input,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport { CardProps } from 'antd/lib';\nimport _ from 'lodash';\nimport { CheckIcon } from 'lucide-react';\nimport React, { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, fetchQuery, useRelayEnvironment } from 'react-relay';\n\nexport interface SessionOwnerSetterFormValues {\n  owner?:\n    | {\n        email: string;\n        accesskey: string;\n        project: string;\n        resourceGroup: string;\n        enabled: true;\n        domainName: string;\n      }\n    | {\n        email?: string;\n        accesskey?: string;\n        project?: string;\n        resourceGroup?: string;\n        enabled: false;\n        domainName?: string;\n      };\n}\n\nconst SessionOwnerSetterCard: React.FC<CardProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const form = Form.useFormInstance<SessionOwnerSetterFormValues>();\n\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n\n  const [fetchingEmail, setFetchingEmail] = useState<string>();\n  const relayEvn = useRelayEnvironment();\n\n  const { data, isFetching } = useTanQuery({\n    queryKey: ['SessionOwnerSetterCard', 'ownerInfo', fetchingEmail],\n    queryFn: () => {\n      const email = form.getFieldValue(['owner', 'email']);\n      if (!email) return;\n\n      const query = graphql`\n        query SessionOwnerSetterCardQuery($email: String!) {\n          keypairs(email: $email) {\n            access_key\n          }\n          user(email: $email) {\n            domain_name\n            groups {\n              name\n              id\n            }\n          }\n        }\n      `;\n      return fetchQuery<SessionOwnerSetterCardQuery>(relayEvn, query, {\n        email,\n      }).toPromise();\n    },\n    enabled: !!fetchingEmail,\n  });\n\n  const ownerKeypairs = form.getFieldValue(['owner', 'email'])\n    ? data?.keypairs\n    : undefined;\n  const owner = form.getFieldValue(['owner', 'email']) ? data?.user : undefined;\n\n  const nonExistentOwner = !isFetching && fetchingEmail && !owner;\n\n  return (\n    <Card\n      title={t('session.launcher.SetSessionOwner')}\n      extra={\n        <Form.Item name={['owner', 'enabled']} valuePropName=\"checked\" noStyle>\n          <Switch />\n        </Form.Item>\n      }\n      styles={\n        isActive\n          ? undefined\n          : {\n              header: {\n                borderBottom: 'none',\n              },\n              body: {\n                display: isActive ? 'block' : 'none',\n              },\n            }\n      }\n      {...props}\n    >\n      <HiddenFormItem\n        name={['owner', 'domainName']}\n        value={owner?.domain_name}\n      />\n      <Form.Item dependencies={[['owner', 'enabled']]} noStyle>\n        {({ getFieldValue }) => {\n          return (\n            <>\n              <Flex>\n                <Form.Item\n                  name={['owner', 'email']}\n                  label={t('session.launcher.OwnerEmail')}\n                  rules={[\n                    {\n                      required: isActive,\n                    },\n                    {\n                      type: 'email',\n                      message: t('credential.validation.InvalidEmailAddress'),\n                    },\n                  ]}\n                  style={{ flex: 1 }}\n                  validateStatus={nonExistentOwner ? 'error' : undefined}\n                  help={\n                    nonExistentOwner\n                      ? t('credential.NoUserToDisplay')\n                      : undefined\n                  }\n                >\n                  <Input.Search\n                    onSearch={(v) => {\n                      // startTransition(()=>{\n                      form\n                        .validateFields([['owner', 'email']])\n                        .then(() => {\n                          setFetchingEmail(v);\n                        })\n                        .catch(() => {});\n                      // })\n                    }}\n                    onChange={() => {\n                      setFetchingEmail('');\n                      form.setFieldsValue({\n                        owner: {\n                          accesskey: '',\n                          project: undefined,\n                          resourceGroup: undefined,\n                        },\n                      });\n                    }}\n                    loading={isFetching}\n                    enterButton={\n                      !isFetching && owner ? (\n                        <Button icon={<CheckIcon />} />\n                      ) : undefined\n                    }\n                  />\n                </Form.Item>\n              </Flex>\n              <Form.Item\n                name={['owner', 'accesskey']}\n                label={t('session.launcher.OwnerAccessKey')}\n                rules={[\n                  {\n                    required: getFieldValue(['owner', 'enabled']),\n                  },\n                ]}\n              >\n                <BAISelect\n                  options={_.map(ownerKeypairs, (k) => {\n                    return {\n                      label: k?.access_key,\n                      value: k?.access_key,\n                    };\n                  })}\n                  autoSelectOption\n                  disabled={_.isEmpty(fetchingEmail) || isFetching}\n                  // defaultActiveFirstOption\n                />\n              </Form.Item>\n              <Row gutter={token.marginSM}>\n                <Col span={12}>\n                  <Form.Item\n                    name={['owner', 'project']}\n                    label={t('session.launcher.OwnerGroup')}\n                    rules={[\n                      {\n                        required: getFieldValue(['owner', 'enabled']),\n                      },\n                    ]}\n                  >\n                    <BAISelect\n                      options={_.map(owner?.groups, (g) => {\n                        return {\n                          label: g?.name,\n                          value: g?.name,\n                        };\n                      })}\n                      autoSelectOption\n                      disabled={_.isEmpty(fetchingEmail) || isFetching}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item dependencies={[['owner', 'project']]} noStyle>\n                    {({ getFieldValue }) => {\n                      return (\n                        <Suspense\n                          fallback={\n                            <Form.Item\n                              label={t('session.launcher.OwnerResourceGroup')}\n                              rules={[\n                                {\n                                  required: getFieldValue(['owner', 'enabled']),\n                                },\n                              ]}\n                            >\n                              <Select loading />\n                            </Form.Item>\n                          }\n                        >\n                          <Form.Item\n                            name={['owner', 'resourceGroup']}\n                            label={t('session.launcher.OwnerResourceGroup')}\n                            rules={[\n                              {\n                                required: getFieldValue(['owner', 'enabled']),\n                              },\n                            ]}\n                          >\n                            {getFieldValue(['owner', 'project']) ? (\n                              <ResourceGroupSelect\n                                projectName={getFieldValue([\n                                  'owner',\n                                  'project',\n                                ])}\n                                disabled={\n                                  _.isEmpty(fetchingEmail) || isFetching\n                                }\n                                autoSelectDefault\n                              />\n                            ) : (\n                              <Select disabled />\n                            )}\n                          </Form.Item>\n                        </Suspense>\n                      );\n                    }}\n                  </Form.Item>\n                </Col>\n              </Row>\n            </>\n          );\n        }}\n      </Form.Item>\n    </Card>\n  );\n};\n\nexport const SessionOwnerSetterPreviewCard: React.FC<BAICardProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n  const currentUserRole = useCurrentUserRole();\n  return (\n    (currentUserRole === 'admin' || currentUserRole === 'superadmin') &&\n    isActive && (\n      <BAICard\n        title={t('session.launcher.SetSessionOwner')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError(['owner', 'email']).length > 0 ||\n          form.getFieldError(['owner', 'accesskey']).length > 0 ||\n          form.getFieldError(['owner', 'project']).length > 0 ||\n          form.getFieldError(['owner', 'resourceGroup']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        {...props}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.OwnerEmail')}>\n            {form.getFieldValue(['owner', 'email'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerAccessKey')}>\n            {form.getFieldValue(['owner', 'accesskey'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerGroup')}>\n            {form.getFieldValue(['owner', 'project'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerResourceGroup')}>\n            {form.getFieldValue(['owner', 'resourceGroup'])}\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    )\n  );\n};\n\nexport default SessionOwnerSetterCard;\n","import { preserveDotStartCase, getImageFullName } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport {\n  SessionLauncherFormValue,\n  ResourceNumbersOfSession,\n  SessionLauncherStepKey,\n} from '../pages/SessionLauncherPage';\nimport BAICard from './BAICard';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { ImageTags } from './ImageTags';\nimport { PortTag } from './PortSelectFormItem';\nimport { SessionOwnerSetterPreviewCard } from './SessionOwnerSetterCard';\nimport SourceCodeViewer from './SourceCodeViewer';\nimport {\n  Descriptions,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  Tag,\n  Alert,\n  Card,\n  Table,\n  Form,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst SessionLauncherPreview: React.FC<{\n  onClickEditStep: (stepKey: SessionLauncherStepKey) => void;\n}> = ({ onClickEditStep }) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance<SessionLauncherFormValue>();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  const sessionType = Form.useWatch('sessionType', { form, preserve: true });\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n  const supportExtendedImageInfo =\n    baiClient?.supports('extended-image-info') ?? false;\n  const currentProject = useCurrentProjectValue();\n  const [, { getBaseVersion, getBaseImage, tagAlias }] =\n    useBackendAIImageMetaData();\n  const { isDarkMode } = useThemeMode();\n\n  return (\n    <>\n      <BAICard\n        title={t('session.launcher.SessionType')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError('sessionName').length > 0 ||\n          form.getFieldError(['batch', 'command']).length > 0 ||\n          form.getFieldError(['batch', 'scheduleDate']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.SessionType')}>\n            {form.getFieldValue('sessionType')}\n          </Descriptions.Item>\n          {!_.isEmpty(form.getFieldValue('sessionName')) && (\n            <Descriptions.Item label={t('session.launcher.SessionName')}>\n              {form.getFieldValue('sessionName')}\n            </Descriptions.Item>\n          )}\n          {sessionType === 'batch' && (\n            <>\n              <Descriptions.Item\n                label={t('session.launcher.StartUpCommand')}\n                labelStyle={{ whiteSpace: 'nowrap' }}\n                contentStyle={{\n                  overflow: 'auto',\n                }}\n              >\n                {form.getFieldValue(['batch', 'command']) ? (\n                  <SourceCodeViewer language=\"shell\">\n                    {form.getFieldValue(['batch', 'command'])}\n                  </SourceCodeViewer>\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('session.launcher.SessionStartTime')}>\n                {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                  dayjs(form.getFieldValue(['batch', 'scheduleDate'])).format(\n                    'LLL (Z)',\n                  )\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              {supportBatchTimeout ? (\n                <Descriptions.Item\n                  label={t('session.launcher.BatchJobTimeoutDuration')}\n                >\n                  {form.getFieldValue(['batch', 'timeout']) ? (\n                    <Typography.Text>\n                      {form.getFieldValue(['batch', 'timeout'])}\n                      {form.getFieldValue(['batch', 'timeoutUnit']) || 's'}\n                    </Typography.Text>\n                  ) : (\n                    <Typography.Text type=\"secondary\">\n                      {t('general.None')}\n                    </Typography.Text>\n                  )}\n                </Descriptions.Item>\n              ) : null}\n            </>\n          )}\n        </Descriptions>\n      </BAICard>\n      <SessionOwnerSetterPreviewCard\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      />\n      <BAICard\n        title={t('session.launcher.Environments')}\n        showDivider\n        size=\"small\"\n        status={\n          _.some(\n            form.getFieldValue(\n              'envvars',\n            ) as SessionLauncherFormValue['envvars'],\n            (v, idx) => {\n              return (\n                form.getFieldError(['envvars', idx, 'variable']).length > 0 ||\n                form.getFieldError(['envvars', idx, 'value']).length > 0\n              );\n            },\n          )\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.Project')}>\n            {currentProject.name}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('general.Image')}>\n            {supportExtendedImageInfo ? (\n              <Row style={{ flexFlow: 'nowrap' }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                    style={{ marginRight: token.marginXS }}\n                  />\n                </Col>\n                <Col>\n                  <Flex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            form.getFieldValue('environments')?.image\n                              ?.base_image_name,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {form.getFieldValue('environments')?.image?.version}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                        {_.map(\n                          form.getFieldValue('environments')?.image?.tags,\n                          (tag: { key: string; value: string }) => {\n                            const isCustomized = _.includes(\n                              tag.key,\n                              'customized_',\n                            );\n                            const tagValue = isCustomized\n                              ? _.find(\n                                  form.getFieldValue('environments')?.image\n                                    ?.labels,\n                                  {\n                                    key: 'ai.backend.customized-image.name',\n                                  },\n                                )?.value\n                              : tag.value;\n                            const aliasedTag = tagAlias(tag.key + tagValue);\n                            return _.isEqual(\n                              aliasedTag,\n                              preserveDotStartCase(tag.key + tagValue),\n                            ) || isCustomized ? (\n                              <DoubleTag\n                                key={tag.key}\n                                values={[\n                                  {\n                                    label: tagAlias(tag.key),\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                  {\n                                    label: tagValue,\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                ]}\n                              />\n                            ) : (\n                              <Tag\n                                key={tag.key}\n                                color={isCustomized ? 'cyan' : 'blue'}\n                              >\n                                {aliasedTag}\n                              </Tag>\n                            );\n                          },\n                        )}\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </Flex>\n                </Col>\n              </Row>\n            ) : (\n              <Row style={{ flexFlow: 'nowrap', gap: token.sizeXS }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                  />\n                </Col>\n                <Col>\n                  {/* {form.getFieldValue('environments').image} */}\n                  <Flex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            getBaseImage(\n                              form.getFieldValue('environments')?.version,\n                            ),\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {getBaseVersion(\n                            form.getFieldValue('environments')?.version,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <ImageTags\n                          tag={form.getFieldValue([\n                            'environments',\n                            'image',\n                            'tag',\n                          ])}\n                          labels={\n                            form.getFieldValue('environments')?.image\n                              ?.labels as Array<{\n                              key: string;\n                              value: string;\n                            }>\n                          }\n                        />\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </Flex>\n                </Col>\n              </Row>\n            )}\n          </Descriptions.Item>\n          {form.getFieldValue('envvars')?.length > 0 && (\n            <Descriptions.Item\n              label={t('session.launcher.EnvironmentVariable')}\n            >\n              {form.getFieldValue('envvars')?.length ? (\n                <SyntaxHighlighter\n                  style={isDarkMode ? dark : undefined}\n                  codeTagProps={{\n                    style: {\n                      // fontFamily: 'monospace',\n                    },\n                  }}\n                  // showLineNumbers\n                  customStyle={{\n                    margin: 0,\n                    width: '100%',\n                  }}\n                >\n                  {_.map(\n                    form.getFieldValue('envvars'),\n                    (v: { variable: string; value: string }) =>\n                      `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                  ).join('\\n')}\n                </SyntaxHighlighter>\n              ) : (\n                <Typography.Text type=\"secondary\">-</Typography.Text>\n              )}\n            </Descriptions.Item>\n          )}\n        </Descriptions>\n      </BAICard>\n      <BAICard\n        title={t('session.launcher.ResourceAllocation')}\n        showDivider\n        status={\n          _.some(form.getFieldValue('resource'), (v, key) => {\n            return (\n              // @ts-ignore\n              form.getFieldError(['resource', key]).length > 0\n            );\n          }) ||\n          form.getFieldError(['num_of_sessions']).length > 0 ||\n          form.getFieldError('resourceGroup').length > 0\n            ? 'error'\n            : // : _.some(form.getFieldValue('resource'), (v, key) => {\n              //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n              //     // console.log(form.getFieldValue(['resource']));\n              //     return (\n              //       form.getFieldWarning(['resource', key]).length >\n              //       0\n              //     );\n              //   })\n              // ? 'warning'\n              undefined\n        }\n        size=\"small\"\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {_.some(\n            form.getFieldValue('resource'),\n            (v, key: keyof SessionLauncherFormValue['resource']) => {\n              return (\n                // @ts-ignore\n                form.getFieldWarning(['resource', key]).length > 0\n              );\n            },\n          ) && (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.EnqueueComputeSessionWarning')}\n            />\n          )}\n\n          <Descriptions column={2}>\n            <Descriptions.Item label={t('general.ResourceGroup')} span={2}>\n              {form.getFieldValue('resourceGroup') || (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              )}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={t('session.launcher.ResourceAllocationPerContainer')}\n              span={2}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"start\"\n                gap={'sm'}\n                wrap=\"wrap\"\n                style={{ flex: 1 }}\n              >\n                {form.getFieldValue('allocationPreset') === 'custom' ? (\n                  // t('session.launcher.CustomAllocation')\n                  ''\n                ) : (\n                  <Tag>{form.getFieldValue('allocationPreset')}</Tag>\n                )}\n\n                <ResourceNumbersOfSession\n                  resource={form.getFieldValue('resource')}\n                />\n                {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n              </Flex>\n            </Descriptions.Item>\n            {baiClient.supports('agent-select') &&\n              !baiClient?._config?.hideAgents && (\n                <Descriptions.Item label={t('session.launcher.AgentNode')}>\n                  {form.getFieldValue('agent') ||\n                    t('session.launcher.AutoSelect')}\n                </Descriptions.Item>\n              )}\n            <Descriptions.Item label={t('session.launcher.NumberOfContainer')}>\n              {form.getFieldValue('cluster_size') === 1\n                ? form.getFieldValue('num_of_sessions')\n                : form.getFieldValue('cluster_size')}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('session.launcher.ClusterMode')}>\n              {form.getFieldValue('cluster_mode') === 'single-node'\n                ? t('session.launcher.SingleNode')\n                : t('session.launcher.MultiNode')}\n            </Descriptions.Item>\n          </Descriptions>\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={t('session.launcher.TotalAllocation')}\n          >\n            <Flex direction=\"row\" gap=\"xxs\">\n              <ResourceNumbersOfSession\n                resource={form.getFieldValue('resource')}\n                containerCount={\n                  form.getFieldValue('cluster_size') === 1\n                    ? form.getFieldValue('num_of_sessions')\n                    : form.getFieldValue('cluster_size')\n                }\n              />\n            </Flex>\n          </Card>\n        </Flex>\n      </BAICard>\n      <BAICard\n        title={t('webui.menu.Data&Storage')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError('vfoldersAliasMap').length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('storage');\n        }}\n      >\n        {/* {console.log(_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames')]))} */}\n        {/* {_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames').length]) > 0 ? ( */}\n        <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n          {form.getFieldValue('mounts')?.length > 0 ? (\n            <Table\n              rowKey=\"name\"\n              size=\"small\"\n              pagination={false}\n              columns={[\n                {\n                  dataIndex: 'name',\n                  title: t('data.folders.Name'),\n                },\n                {\n                  dataIndex: 'alias',\n                  title: t('session.launcher.FolderAlias'),\n                  render: (value, record) => {\n                    return _.isEmpty(value) ? (\n                      <Typography.Text\n                        type=\"secondary\"\n                        style={{\n                          opacity: 0.7,\n                        }}\n                      >\n                        {`/home/work/${record.name}`}\n                      </Typography.Text>\n                    ) : (\n                      value\n                    );\n                  },\n                },\n              ]}\n              dataSource={_.map(form.getFieldValue('mounts'), (v) => {\n                return {\n                  name: v,\n                  alias: form.getFieldValue('vfoldersAliasMap')?.[v],\n                };\n              })}\n            ></Table>\n          ) : (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.NoFolderMounted')}\n            />\n          )}\n          {form.getFieldValue('autoMountedFolderNames')?.length > 0 ? (\n            <Descriptions size=\"small\">\n              <Descriptions.Item label={t('data.AutomountFolders')}>\n                {_.map(form.getFieldValue('autoMountedFolderNames'), (name) => {\n                  return <Tag>{name}</Tag>;\n                })}\n              </Descriptions.Item>\n            </Descriptions>\n          ) : null}\n        </Flex>\n      </BAICard>\n      <BAICard\n        title=\"Network\"\n        showDivider\n        size=\"small\"\n        status={form.getFieldError('ports').length > 0 ? 'error' : undefined}\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('network');\n        }}\n      >\n        <Descriptions size=\"small\">\n          <Descriptions.Item label={t('session.launcher.PreOpenPortTitle')}>\n            <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }} wrap=\"wrap\">\n              {/* {form.getFieldValue('environments').image} */}\n              {_.sortBy(form.getFieldValue('ports'), (v) => parseInt(v)).map(\n                (v, idx) => (\n                  <PortTag key={idx + v} value={v} style={{ margin: 0 }}>\n                    {v}\n                  </PortTag>\n                ),\n              )}\n\n              {!_.isArray(form.getFieldValue('ports')) ||\n              form.getFieldValue('ports')?.length === 0 ? (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              ) : null}\n            </Flex>\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    </>\n  );\n};\n\nexport default SessionLauncherPreview;\n","import { generateRandomString } from '../helper';\nimport { SessionHistory, useBAISettingUserState } from './useBAISetting';\nimport { useEventNotStable } from './useEventNotStable';\nimport _ from 'lodash';\n\nexport const useRecentSessionHistory = () => {\n  const [recentSessions, setRecentSessionHistory] = useBAISettingUserState(\n    'recentSessionHistory',\n  );\n\n  const push = useEventNotStable(\n    ({\n      id,\n      params,\n      createdAt,\n      name,\n    }: SelectivePartial<SessionHistory, 'id' | 'createdAt'>) => {\n      const newHistory: SessionHistory = {\n        id: id ?? generateRandomString(8),\n        params,\n        createdAt: createdAt ?? new Date().toISOString(),\n        name: name,\n      };\n      // push new history to the top of recentSessionHistory and keep it up to 5\n      const newRecentSessionHistory = _.sortBy(\n        [newHistory, ...(recentSessions || [])],\n        '-createdAt',\n      ).slice(0, 5);\n      setRecentSessionHistory(newRecentSessionHistory);\n    },\n  );\n  const clear = useEventNotStable(() => setRecentSessionHistory([]));\n  const remove = useEventNotStable((id: string) => {\n    const newRecentSessionHistory = (recentSessions || []).filter(\n      (item) => item.id !== id,\n    );\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n\n  const update = useEventNotStable((id: string, name: string) => {\n    const newRecentSessionHistory = (recentSessions || []).map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          name,\n        };\n      }\n      return item;\n    });\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n\n  return [\n    recentSessions,\n    {\n      push,\n      clear,\n      remove,\n      update,\n    },\n  ] as const;\n};\n\nexport const usePinnedSessionHistory = () => {\n  const [pinnedSessionHistory, setPinnedSessionHistory] =\n    useBAISettingUserState('pinnedSessionHistory');\n  const [recentSessionHistory] = useBAISettingUserState('recentSessionHistory');\n\n  const pin = useEventNotStable((id: string) => {\n    const pinnedItem = (recentSessionHistory || []).find(\n      (item) => item.id === id,\n    );\n    pinnedItem &&\n      setPinnedSessionHistory([...(pinnedSessionHistory || []), pinnedItem]);\n  });\n\n  const unpin = useEventNotStable((id: string) => {\n    const newPinnedSessionHistory = (pinnedSessionHistory || []).filter(\n      (item) => item.id !== id,\n    );\n    setPinnedSessionHistory(newPinnedSessionHistory);\n  });\n\n  const update = useEventNotStable((id: string, name: string) => {\n    const newPinnedSessionHistory = (pinnedSessionHistory || []).map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          name,\n        };\n      }\n      return item;\n    });\n    setPinnedSessionHistory(newPinnedSessionHistory);\n  });\n\n  return [\n    pinnedSessionHistory,\n    {\n      pin,\n      unpin,\n      update,\n    },\n  ] as const;\n};\n","import { useBackendAIImageMetaData } from '../hooks';\nimport { SessionHistory } from '../hooks/useBAISetting';\nimport {\n  usePinnedSessionHistory,\n  useRecentSessionHistory,\n} from '../hooks/useRecentSessionHistory';\nimport {\n  ResourceNumbersOfSession,\n  SessionLauncherFormValue,\n} from '../pages/SessionLauncherPage';\nimport BAILink from './BAILink';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport BAITable from './BAITable';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport QuestionIconWithTooltip from './QuestionIconWithTooltip';\nimport { Button, theme, Tooltip, Typography } from 'antd';\nimport { createStyles } from 'antd-style';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { PinIcon } from 'lucide-react';\nimport React, { Key, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyle = createStyles(({ token, css }) => ({\n  fixEditableVerticalAlign: css`\n    & {\n      margin-top: 0px !important;\n    }\n  `,\n}));\n\ninterface SessionTemplateModalProps\n  extends Omit<BAIModalProps, 'onOk' | 'onCancel'> {\n  onRequestClose: (formValue?: SessionLauncherFormValue) => void;\n}\n\ninterface ParsedSessionHistory\n  extends SessionLauncherFormValue,\n    SessionHistory {\n  pinned?: boolean;\n}\n\nconst SessionTemplateModal: React.FC<SessionTemplateModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { styles } = useStyle();\n  const [sessionHistory, { update: updateSessionHistory }] =\n    useRecentSessionHistory();\n  const [hoverRowKey, setHoverRowKey] = useState<Key | null>(null);\n\n  const [, { getImageAliasName, getBaseVersion }] = useBackendAIImageMetaData();\n  const [pinnedSessionHistory, { pin, unpin, update: updatePinnedHistory }] =\n    usePinnedSessionHistory();\n\n  const [, setSelectedHistoryId] = useState<string>();\n  const { token } = theme.useToken();\n\n  const parsedSessionHistory: Array<ParsedSessionHistory> = useMemo(() => {\n    const parseToFormValues = (history: SessionHistory, isPinned: boolean) => {\n      const params = new URLSearchParams(history.params);\n      const formValues: SessionLauncherFormValue = JSON.parse(\n        params.get('formValues') || '{}',\n      );\n      return {\n        ...formValues,\n        pinned: isPinned,\n        name: history.name,\n      };\n    };\n\n    // const params = new URLSearchParams(history.params);\n    //   const formValues: SessionLauncherFormValue = JSON.parse(\n    //     params.get('formValues') || '{}',\n    //   );\n    const recent = _.map(sessionHistory, (history) => ({\n      ...history,\n      ...parseToFormValues(history, false),\n    }));\n\n    const pinned = _.map(pinnedSessionHistory, (history) => ({\n      ...history,\n      ...parseToFormValues(history, true),\n    }));\n\n    return _.chain([...pinned, ...recent])\n      .unionBy('id')\n      .value();\n  }, [sessionHistory, pinnedSessionHistory]);\n\n  return (\n    <BAIModal\n      width={800}\n      title={t('session.launcher.RecentHistory')}\n      footer={null}\n      onCancel={() => {\n        // reset\n        setSelectedHistoryId(undefined);\n        modalProps.onRequestClose();\n      }}\n      {...modalProps}\n    >\n      <Flex direction=\"column\" align=\"stretch\" gap=\"sm\">\n        <Typography.Text>\n          {t('session.launcher.YouCanStartWithHistory')}\n        </Typography.Text>\n        <BAITable<ParsedSessionHistory>\n          rowSelection={{\n            selectedRowKeys: pinnedSessionHistory?.map((item) => item.id),\n            columnWidth: 0,\n            hideSelectAll: true,\n            renderCell: () => null,\n          }}\n          scroll={{ x: 'max-content' }}\n          dataSource={parsedSessionHistory}\n          pagination={false}\n          onRow={(record) => ({\n            onMouseEnter: () => setHoverRowKey(record.id),\n            onMouseLeave: () => setHoverRowKey(null),\n          })}\n          rowKey={(record) => record.id}\n          columns={[\n            {\n              title: (\n                <Flex gap={'xxs'}>\n                  <PinIcon />\n                  <QuestionIconWithTooltip\n                    title={t('session.launcher.PinnedHistoryTooltip')}\n                  />\n                </Flex>\n              ),\n              dataIndex: 'pinned',\n              width: 40,\n              render: (value, record) => {\n                const isPinned = !!record.pinned;\n                const isHovered = hoverRowKey === record.id;\n                return isPinned ? (\n                  <Button\n                    size=\"small\"\n                    onClick={() => {\n                      unpin(record.id);\n                      // TODO: add it to recent session history\n                    }}\n                    type=\"link\"\n                  >\n                    <PinIcon />\n                  </Button>\n                ) : (\n                  <Button\n                    size=\"small\"\n                    onClick={() => pin(record.id)}\n                    type=\"link\"\n                  >\n                    <PinIcon\n                      style={{\n                        color: isHovered\n                          ? token.colorTextQuaternary\n                          : 'transparent',\n                      }}\n                    />\n                  </Button>\n                );\n              },\n            },\n            {\n              title: t('session.launcher.SessionNameShort'),\n              dataIndex: 'name',\n              render: (name, record) => {\n                const displayName = name || record.id.split('-')[0];\n                return (\n                  <Typography.Link\n                    className={styles.fixEditableVerticalAlign}\n                    editable={{\n                      onChange(value) {\n                        if (!_.isEmpty(value)) {\n                          updateSessionHistory(record.id, value);\n                          record.pinned &&\n                            updatePinnedHistory(record.id, value);\n                        }\n                      },\n                      text: displayName,\n                    }}\n                  >\n                    <BAILink\n                      type=\"hover\"\n                      onClick={() => {\n                        const params = _.find(sessionHistory, {\n                          id: record.id,\n                        })?.params;\n                        modalProps.onRequestClose?.(\n                          JSON.parse(\n                            new URLSearchParams(params).get('formValues') ||\n                              '{}',\n                          ),\n                        );\n                      }}\n                    >\n                      {displayName}\n                    </BAILink>\n                  </Typography.Link>\n                );\n              },\n            },\n            {\n              title: t('session.launcher.Environments'),\n              dataIndex: ['environments', 'version'],\n              render: (version, record) => {\n                const imageStr =\n                  record.environments.version || record.environments.manual;\n                return (\n                  imageStr && (\n                    <Tooltip title={imageStr} placement=\"right\">\n                      <Flex gap={'xxs'}>\n                        <ImageMetaIcon image={imageStr} />\n                        <Typography.Text>\n                          {getImageAliasName(imageStr)}{' '}\n                          {getBaseVersion(imageStr)}\n                        </Typography.Text>\n                      </Flex>\n                    </Tooltip>\n                  )\n                );\n              },\n              onCell: () => ({\n                style: { maxWidth: 250, textOverflow: 'ellipsis' },\n              }),\n            },\n            {\n              title: t('session.launcher.ResourceAllocation'),\n              dataIndex: 'resource',\n              render: (resource) => {\n                // return JSON.stringify(resource)\n                return (\n                  <Flex gap={'xs'}>\n                    <ResourceNumbersOfSession resource={resource} />\n                  </Flex>\n                );\n              },\n            },\n            // {\n            //   dataIndex: 'mounts',\n            //   render: (value, record) => {\n            //     return _.join(record.mounts,', ');\n            //   }\n            // },\n            {\n              title: t('session.launcher.CreatedAt'),\n              dataIndex: 'createdAt',\n              render: (createdAt: string) => {\n                return dayjs(createdAt).fromNow();\n              },\n            },\n          ]}\n        />\n      </Flex>\n      {/* <Tabs\n        defaultActiveKey=\"history\"\n        items={[\n          {\n            key: 'template',\n            label: t('session.launcher.Template'),\n            children: <div>Template</div>,\n          },\n          {\n            key: 'history',\n            label: t('session.launcher.RecentHistory'),\n            children: (\n              \n            ),\n          },\n        ]}\n      /> */}\n    </BAIModal>\n  );\n};\n\nexport default SessionTemplateModal;\n","import BAIIntervalView from '../components/BAIIntervalView';\nimport DatePickerISO from '../components/DatePickerISO';\nimport EnvVarFormList, {\n  sanitizeSensitiveEnv,\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  transformPortValuesToNumbers,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionLauncherValidationTour from '../components/SessionLauncherErrorTourProps';\nimport SessionLauncherPreview from '../components/SessionLauncherPreview';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport SessionOwnerSetterCard, {\n  SessionOwnerSetterFormValues,\n} from '../components/SessionOwnerSetterCard';\nimport SessionTemplateModal from '../components/SessionTemplateModal';\nimport VFolderTableFormItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport {\n  compareNumberWithUnits,\n  formatDuration,\n  generateRandomString,\n  convertToBinaryUnit,\n  filterEmptyItem,\n} from '../helper';\nimport {\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n  useWebUINavigate,\n} from '../hooks';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupState,\n} from '../hooks/useCurrentProject';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn, useToggle } from 'ahooks';\nimport {\n  App,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Form,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport _ from 'lodash';\nimport React, { useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\nexport interface SessionResources {\n  group_name?: string;\n  domain?: string;\n  type?: 'interactive' | 'batch' | 'inference' | 'system';\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  maxWaitSeconds?: number;\n  starts_at?: string;\n  startupCommand?: string;\n  bootstrap_script?: string;\n  owner_access_key?: string;\n  enqueueOnly?: boolean;\n  config?: {\n    resources?: {\n      cpu: number;\n      mem: string;\n      [key: string]: number | string;\n    };\n    resource_opts?: {\n      shmem?: string;\n      allow_fractional_resource_fragmentation?: boolean;\n    };\n    mounts?: string[];\n    mount_map?: {\n      [key: string]: string;\n    };\n    environ?: {\n      [key: string]: string;\n    };\n    scaling_group?: string;\n    preopen_ports?: number[];\n    agent_list?: string[];\n  };\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  batchTimeout?: string;\n  resources: SessionResources;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n    timeoutEnabled?: boolean;\n    timeout?: string;\n    timeoutUnit?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS?: string;\n    OPENBLAS_NUM_THREADS?: string;\n  };\n  bootstrap_script?: string;\n}\n\nexport type SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues &\n  SessionOwnerSetterFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\n\nexport type AppOption = {\n  'session-name'?: string;\n  'session-uuid'?: string;\n  'access-key'?: string;\n  mode?: SessionMode;\n  'app-services'?: Array<string>;\n  runtime?: string;\n  filename?: string;\n  // [key in string]: any;\n};\n\nexport type SessionLauncherStepKey =\n  | 'sessionType'\n  | 'environment'\n  | 'storage'\n  | 'network'\n  | 'review';\ninterface StepPropsWithKey extends StepProps {\n  key: SessionLauncherStepKey;\n}\n\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n  let sessionMode: SessionMode = 'normal';\n\n  const mainContentDivRef = useAtomValue(mainContentDivRefState);\n  const baiClient = useSuspendedBackendaiClient();\n  const currentUserRole = useCurrentUserRole();\n  const [currentGlobalResourceGroup, setCurrentGlobalResourceGroup] =\n    useCurrentResourceGroupState();\n\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const INITIAL_FORM_VALUES: DeepPartial<SessionLauncherFormValue> = useMemo(\n    () => ({\n      sessionType: 'interactive',\n      // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n      allocationPreset: 'auto-select',\n      hpcOptimization: {\n        autoEnabled: true,\n      },\n      batch: {\n        enabled: false,\n        command: undefined,\n        scheduleDate: undefined,\n        ...(supportBatchTimeout && {\n          timeoutEnabled: false,\n          timeout: undefined,\n          timeoutUnit: 's',\n        }),\n      },\n      envvars: [],\n      // set default_session_environment only if set\n      ...(baiClient._config?.default_session_environment && {\n        environments: {\n          environment: baiClient._config?.default_session_environment,\n        },\n      }),\n      ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n      resourceGroup: currentGlobalResourceGroup || undefined,\n    }),\n    [\n      baiClient._config?.default_session_environment,\n      currentGlobalResourceGroup,\n      supportBatchTimeout,\n    ],\n  );\n  const StepParam = withDefault(NumberParam, 0);\n  const FormValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n  const AppOptionParam = withDefault(JsonParam, {});\n  const [\n    {\n      step: currentStep,\n      formValues: formValuesFromQueryParams,\n      redirectTo,\n      appOption: appOptionFromQueryParams,\n    },\n    setQuery,\n  ] = useQueryParams({\n    step: StepParam,\n    formValues: FormValuesParam,\n    redirectTo: StringParam,\n    appOption: AppOptionParam,\n  });\n  const { search } = useLocation();\n\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const currentProject = useCurrentProjectValue();\n\n  const [isOpenTemplateModal, { toggle: toggleIsOpenTemplateModal }] =\n    useToggle();\n  const { upsertNotification } = useSetBAINotification();\n  const [, { push: pushSessionHistory }] = useRecentSessionHistory();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      const currentValue = form.getFieldsValue();\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.extend(\n            _.omit(\n              form.getFieldsValue(),\n              ['environments.image'],\n              ['environments.customizedTag'],\n              ['autoMountedFolderNames'],\n              ['owner'],\n              ['envvars'],\n            ),\n            {\n              envvars: sanitizeSensitiveEnv(currentValue.envvars),\n            },\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  useEffect(() => {\n    if (!_.isEmpty(formValuesFromQueryParams)) {\n      form.validateFields().catch((e) => {});\n    }\n    // Run this memo only for the first time\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const mergedInitialValues = useMemo(() => {\n    return _.merge({}, INITIAL_FORM_VALUES, formValuesFromQueryParams);\n  }, [INITIAL_FORM_VALUES, formValuesFromQueryParams]);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps: Array<StepPropsWithKey> = filterEmptyItem([\n    {\n      title: t('session.launcher.SessionType'),\n      key: 'sessionType',\n      // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n    },\n    {\n      title: `${t('session.launcher.Environments')} & ${t(\n        'session.launcher.ResourceAllocation',\n      )} `,\n      key: 'environment',\n    },\n    sessionType !== 'inference' && {\n      title: t('webui.menu.Data&Storage'),\n      key: 'storage',\n    },\n    {\n      title: t('session.launcher.Network'),\n      key: 'network',\n    },\n    {\n      title: t('session.launcher.ConfirmAndLaunch'),\n      icon: <PlayCircleFilled />,\n      // @ts-ignore\n      key: 'review',\n    },\n  ]);\n\n  const currentStepKey = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  const [finalStepLastValidateTime, setFinalStepLastValidateTime] =\n    useUpdatableState('first'); // Force re-render after validation in final step.\n\n  useEffect(() => {\n    if (currentStep === steps.length - 1) {\n      form\n        .validateFields()\n        .catch((error) => {})\n        .finally(() => setFinalStepLastValidateTime());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep, form, setFinalStepLastValidateTime, steps.length]);\n\n  useEffect(() => {\n    if (finalStepLastValidateTime !== 'first') {\n      if (hasError) {\n        setValidationTourOpen(true);\n      } else {\n        setValidationTourOpen(false);\n      }\n    }\n  }, [finalStepLastValidateTime, hasError]);\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n    setIsStartingSession(true);\n    const usedSearchParams = search;\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mounts) || values.mounts.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          // Basic session information\n          sessionName: sessionName,\n          kernelName,\n          architecture,\n          resources: {\n            // Project and domain settings\n            group_name: values.owner?.enabled\n              ? values.owner.project\n              : currentProject.name,\n            domain: values.owner?.enabled\n              ? values.owner.domainName\n              : baiClient._config.domainName,\n\n            // Session configuration\n            type: values.sessionType,\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n\n            // Owner settings (optional)\n            // FYI, `config.scaling_group` also changes based on owner settings\n            ...(values.owner?.enabled\n              ? {\n                  owner_access_key: values.owner.accesskey,\n                }\n              : {}),\n\n            // Batch mode settings (optional)\n            ...(values.sessionType === 'batch'\n              ? {\n                  starts_at: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // Bootstrap script (optional)\n            ...(values.bootstrap_script\n              ? { bootstrap_script: values.bootstrap_script }\n              : {}),\n\n            // Batch timeout configuration (optional)\n            ...(supportBatchTimeout &&\n            values?.batch?.timeoutEnabled &&\n            !_.isUndefined(values?.batch?.timeout)\n              ? {\n                  batchTimeout:\n                    _.toString(values.batch.timeout) +\n                    values?.batch?.timeoutUnit,\n                }\n              : undefined),\n\n            config: {\n              // Resource allocation\n              resources: {\n                cpu: values.resource.cpu,\n                mem: values.resource.mem,\n                // Add accelerator only if specified\n                ...(values.resource.accelerator > 0\n                  ? {\n                      [values.resource.acceleratorType]:\n                        values.resource.accelerator,\n                    }\n                  : undefined),\n              },\n              scaling_group: values.owner?.enabled\n                ? values.owner.project\n                : values.resourceGroup,\n              resource_opts: {\n                shmem:\n                  compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n                  compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                    ? '1g'\n                    : values.resource.shmem,\n                // allow_fractional_resource_fragmentation can be added here if needed\n              },\n\n              // Storage configuration\n              mounts: values.mounts,\n              mount_map: values.vfoldersAliasMap,\n\n              // Environment variables\n              environ: {\n                ..._.fromPairs(\n                  values.envvars.map((v) => [v.variable, v.value]),\n                ),\n                // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n                ...(values.hpcOptimization.autoEnabled\n                  ? {}\n                  : _.omit(values.hpcOptimization, 'autoEnabled')),\n              },\n\n              // Networking\n              preopen_ports: transformPortValuesToNumbers(values.ports),\n\n              // Agent selection (optional)\n              ...(baiClient.supports('agent-select') &&\n              !baiClient?._config?.hideAgents &&\n              values.agent !== 'auto'\n                ? {\n                    // Filter out undefined values\n                    agent_list: [values.agent].filter(\n                      (agent): agent is string => !!agent,\n                    ),\n                  }\n                : undefined),\n            },\n          },\n        };\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.resources,\n                undefined,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean; status: string }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                if (res?.status === 'CANCELLED') {\n                  // Case about failed to start new session kind of \"docker image not found\" or etc.\n                  throw new Error(\n                    t('session.launcher.FailedToStartNewSession'),\n                  );\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                if (err?.message?.includes('The session already exists')) {\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                } else {\n                  throw err;\n                }\n              });\n          },\n        );\n        // After sending a create request, navigate to job page and set current resource group\n        setCurrentGlobalResourceGroup(values.resourceGroup);\n        const backupTo = window.location.pathname + window.location.search;\n        webuiNavigate(redirectTo || '/job');\n        upsertNotification({\n          key: 'session-launcher:' + sessionName,\n          backgroundTask: {\n            promise: Promise.all(sessionPromises),\n            status: 'pending',\n            onChange: {\n              pending: t('session.PreparingSession'),\n              resolved: t('eduapi.ComputeSessionPrepared'),\n            },\n          },\n          duration: 0,\n          message: t('general.Session') + ': ' + sessionName,\n          open: true,\n        });\n\n        pushSessionHistory({\n          params: usedSearchParams,\n          name: sessionName,\n        });\n\n        await Promise.all(sessionPromises)\n          .then(\n            ([firstSession]: Array<{\n              kernelId?: string;\n              sessionId: string;\n              sessionName: string;\n              servicePorts: Array<{ name: string }>;\n            }>) => {\n              // After the session is created, add a \"See Details\" button to navigate to the session page.\n              upsertNotification({\n                key: 'session-launcher:' + sessionName,\n                to: {\n                  pathname: '/session',\n                  search: new URLSearchParams({\n                    sessionDetail: firstSession.sessionId,\n                  }).toString(),\n                },\n              });\n              if (\n                values.num_of_sessions === 1 &&\n                values.sessionType !== 'batch'\n              ) {\n                const res = firstSession;\n                let appOptions: AppOption = _.cloneDeep(\n                  appOptionFromQueryParams,\n                );\n                if ('kernelId' in res) {\n                  // API v4\n                  appOptions = _.extend(appOptions, {\n                    'session-name': res.kernelId,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                } else {\n                  // API >= v5\n                  appOptions = _.extend(appOptions, {\n                    'session-uuid': res.sessionId,\n                    'session-name': res.sessionName,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                }\n                const service_info = res.servicePorts;\n                if (Array.isArray(service_info) === true) {\n                  appOptions['app-services'] = service_info.map(\n                    (a: { name: string }) => a.name,\n                  );\n                } else {\n                  appOptions['app-services'] = [];\n                }\n                // TODO: support import and inference\n                // if (sessionMode === 'import') {\n                //   appOptions['runtime'] = 'jupyter';\n                //   appOptions['filename'] = this.importFilename;\n                // }\n                // if (sessionMode === 'inference') {\n                //   appOptions['runtime'] = appOptions['app-services'].find(\n                //     (element: any) => !['ttyd', 'sshd'].includes(element),\n                //   );\n                // }\n\n                // only launch app when it has valid service ports\n                if (service_info.length > 0) {\n                  // @ts-ignore\n                  globalThis.appLauncher.showLauncher(appOptions);\n                }\n              }\n            },\n          )\n          .catch(() => {\n            upsertNotification({\n              key: 'session-launcher:' + sessionName,\n              to: backupTo,\n              toText: t('button.Edit'),\n            });\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n\n  const [validationTourOpen, setValidationTourOpen] = useState(false);\n\n  const [isQueryReset, setIsQueryReset] = useState(false);\n  useLayoutEffect(() => {\n    if (isQueryReset) {\n      form.resetFields();\n      setIsQueryReset(false);\n    }\n  }, [isQueryReset, form]);\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={4} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                // icon={<BlockOutlined />}\n                // disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n                onClick={() => toggleIsOpenTemplateModal()}\n              >\n                {t('session.launcher.RecentHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={mergedInitialValues}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                  <Form.Item\n                    name=\"bootstrap_script\"\n                    label=\"Bootstrap Script\"\n                    hidden\n                  >\n                    <Input />\n                  </Form.Item>\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      noStyle\n                      dependencies={[['batch', 'scheduleDate']]}\n                    >\n                      {() => {\n                        const scheduleDate = form.getFieldValue([\n                          'batch',\n                          'scheduleDate',\n                        ]);\n                        return (\n                          <BAIIntervalView\n                            delay={1000}\n                            callback={() => {\n                              const scheduleDate = form.getFieldValue([\n                                'batch',\n                                'scheduleDate',\n                              ]);\n                              if (scheduleDate) {\n                                if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                  if (\n                                    form.getFieldError([\n                                      'batch',\n                                      'scheduleDate',\n                                    ]).length === 0\n                                  ) {\n                                    form.validateFields([\n                                      ['batch', 'scheduleDate'],\n                                    ]);\n                                  }\n                                  return undefined;\n                                } else {\n                                  return dayjs(scheduleDate).fromNow();\n                                }\n                              } else {\n                                return undefined;\n                              }\n                            }}\n                            triggerKey={scheduleDate ? scheduleDate : 'none'}\n                            render={(time) => {\n                              return (\n                                <Form.Item\n                                  label={t('session.launcher.SessionStartTime')}\n                                  extra={time}\n                                >\n                                  <Flex direction=\"row\" gap={'xs'}>\n                                    <Form.Item\n                                      noStyle\n                                      name={['batch', 'enabled']}\n                                      valuePropName=\"checked\"\n                                    >\n                                      <Checkbox\n                                        onChange={(e) => {\n                                          if (\n                                            e.target.checked &&\n                                            _.isEmpty(\n                                              form.getFieldValue([\n                                                'batch',\n                                                'scheduleDate',\n                                              ]),\n                                            )\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              dayjs()\n                                                .add(2, 'minutes')\n                                                .toISOString(),\n                                            );\n                                          } else if (\n                                            e.target.checked === false\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              undefined,\n                                            );\n                                          }\n                                          form.validateFields([\n                                            ['batch', 'scheduleDate'],\n                                          ]);\n                                        }}\n                                      >\n                                        {t('session.launcher.Enable')}\n                                      </Checkbox>\n                                    </Form.Item>\n                                    <Form.Item\n                                      noStyle\n                                      // dependencies={[['batch', 'enabled']]}\n                                      shouldUpdate={(prev, next) => {\n                                        return (\n                                          // @ts-ignore\n                                          prev.batch?.enabled !==\n                                          next.batch?.enabled\n                                        );\n                                      }}\n                                    >\n                                      {() => {\n                                        const disabled =\n                                          form.getFieldValue('batch')\n                                            ?.enabled !== true;\n                                        return (\n                                          <>\n                                            <Form.Item\n                                              name={['batch', 'scheduleDate']}\n                                              noStyle\n                                              rules={[\n                                                {\n                                                  // required: true,\n                                                  validator: async (\n                                                    rule,\n                                                    value,\n                                                  ) => {\n                                                    if (\n                                                      value &&\n                                                      dayjs(value).isBefore(\n                                                        dayjs(),\n                                                      )\n                                                    ) {\n                                                      return Promise.reject(\n                                                        t(\n                                                          'session.launcher.StartTimeMustBeInTheFuture',\n                                                        ),\n                                                      );\n                                                    }\n                                                    return Promise.resolve();\n                                                  },\n                                                },\n                                              ]}\n                                            >\n                                              <DatePickerISO\n                                                disabled={disabled}\n                                                showTime\n                                                localFormat\n                                                disabledDate={(value) => {\n                                                  return value.isBefore(\n                                                    dayjs().startOf('day'),\n                                                  );\n                                                }}\n                                              />\n                                            </Form.Item>\n                                            {/* <Form.Item\n                                              noStyle\n                                              name={['batch', 'scheduleTime']}\n                                            >\n                                              <TimePicker disabled={disabled} />\n                                            </Form.Item> */}\n                                          </>\n                                        );\n                                      }}\n                                    </Form.Item>\n                                  </Flex>\n                                </Form.Item>\n                              );\n                            }}\n                          />\n                        );\n                      }}\n                    </Form.Item>\n\n                    {supportBatchTimeout ? (\n                      <Form.Item\n                        noStyle\n                        dependencies={[\n                          ['batch', 'timeoutEnabled'],\n                          ['batch', 'timeoutUnit'],\n                        ]}\n                      >\n                        {() => {\n                          const timeout = form.getFieldValue([\n                            'batch',\n                            'timeout',\n                          ]);\n                          const unit = form.getFieldValue([\n                            'batch',\n                            'timeoutUnit',\n                          ]);\n\n                          const timeDuration = dayjs.duration(\n                            timeout,\n                            unit ?? 's',\n                          );\n\n                          const formattedDuration = formatDuration(\n                            timeDuration,\n                            t,\n                          );\n\n                          const durationText =\n                            !_.isNull(timeout) && _.toFinite(timeout) > 0\n                              ? formattedDuration\n                              : null;\n                          return (\n                            <Form.Item\n                              label={t(\n                                'session.launcher.BatchJobTimeoutDuration',\n                              )}\n                              tooltip={t(\n                                'session.launcher.BatchJobTimeoutDurationDesc',\n                              )}\n                              // extra={durationText}\n                              help={durationText}\n                            >\n                              <Flex direction=\"row\" gap={'xs'}>\n                                <Form.Item\n                                  noStyle\n                                  name={['batch', 'timeoutEnabled']}\n                                  valuePropName=\"checked\"\n                                >\n                                  <Checkbox\n                                    onChange={(e) => {\n                                      if (e.target.checked === false) {\n                                        form.setFieldValue(\n                                          ['batch', 'timeout'],\n                                          undefined,\n                                        );\n                                      }\n                                      form.validateFields([\n                                        ['batch', 'timeout'],\n                                      ]);\n                                    }}\n                                  >\n                                    {t('session.launcher.Enable')}\n                                  </Checkbox>\n                                </Form.Item>\n                                <Form.Item\n                                  noStyle\n                                  dependencies={[['batch', 'timeoutEnabled']]}\n                                >\n                                  {() => {\n                                    const disabled =\n                                      form.getFieldValue([\n                                        'batch',\n                                        'timeoutEnabled',\n                                      ]) !== true;\n                                    return (\n                                      <>\n                                        <Form.Item\n                                          name={['batch', 'timeout']}\n                                          label={t(\n                                            'session.launcher.BatchJobTimeoutDuration',\n                                          )}\n                                          noStyle\n                                          rules={[\n                                            {\n                                              min: 0,\n                                              type: 'number',\n                                              message: t(\n                                                'error.AllowsPositiveNumberOnly',\n                                              ),\n                                            },\n                                            {\n                                              required: !disabled,\n                                            },\n                                          ]}\n                                        >\n                                          <InputNumber\n                                            disabled={disabled}\n                                            min={1}\n                                            addonAfter={\n                                              <Form.Item\n                                                noStyle\n                                                name={['batch', 'timeoutUnit']}\n                                              >\n                                                <Select\n                                                  tabIndex={-1}\n                                                  style={{ minWidth: 75 }}\n                                                  options={[\n                                                    {\n                                                      label: t('time.Sec'),\n                                                      value: 's',\n                                                    },\n                                                    {\n                                                      label: t('time.Min'),\n                                                      value: 'm',\n                                                    },\n                                                    {\n                                                      label: t('time.Hour'),\n                                                      value: 'h',\n                                                    },\n                                                    {\n                                                      label: t('time.Day'),\n                                                      value: 'd',\n                                                    },\n                                                    {\n                                                      label: t('time.Week'),\n                                                      value: 'w',\n                                                    },\n                                                  ]}\n                                                />\n                                              </Form.Item>\n                                            }\n                                          />\n                                        </Form.Item>\n                                      </>\n                                    );\n                                  }}\n                                </Form.Item>\n                              </Flex>\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    ) : null}\n                  </Card>\n                )}\n\n                {(currentUserRole === 'admin' ||\n                  currentUserRole === 'superadmin') && (\n                  <SessionOwnerSetterCard\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  />\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableAgentSelect={\n                      !baiClient._config.hideAgents &&\n                      baiClient.supports('agent-select')\n                    }\n                    enableNumOfSessions\n                    enableResourcePresets\n                    showRemainingWarning\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue({\n                                hpcOptimization: {\n                                  autoEnabled: true,\n                                  OMP_NUM_THREADS: undefined,\n                                  OPENBLAS_NUM_THREADS: undefined,\n                                },\n                              });\n                            } else {\n                              form.setFieldsValue({\n                                hpcOptimization: {\n                                  autoEnabled: false,\n                                  OMP_NUM_THREADS: '1',\n                                  OPENBLAS_NUM_THREADS: '1',\n                                },\n                              });\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={1}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={1}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle dependencies={['owner']}>\n                    {({ getFieldValue }) => {\n                      const ownerInfo = getFieldValue('owner');\n                      const isValidOwner =\n                        ownerInfo?.enabled &&\n                        _.every(_.omit(ownerInfo, 'enabled'), (key, value) => {\n                          return key !== undefined;\n                        });\n\n                      return (\n                        <VFolderTableFormItem\n                          filter={(vfolder) => {\n                            return (\n                              vfolder.status === 'ready' &&\n                              !vfolder.name?.startsWith('.')\n                            );\n                          }}\n                          tableProps={{\n                            ownerEmail: isValidOwner\n                              ? ownerInfo?.email\n                              : undefined,\n                          }}\n                        />\n                      );\n                    }}\n                  </Form.Item>\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <SessionLauncherPreview\n                    onClickEditStep={(stepKey) => {\n                      const nextStep = _.findIndex(steps, { key: stepKey });\n                      setCurrentStep(nextStep);\n                    }}\n                  />\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        setQuery({}, 'replace');\n                        setIsQueryReset(true);\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </Flex>\n                  <Flex\n                    data-test-id=\"neo-session-launcher-tour-step-navigation\"\n                    direction=\"row\"\n                    gap=\"sm\"\n                  >\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Flex\n            data-test-id=\"neo-session-launcher-tour-step\"\n            style={{ position: 'sticky', top: 80 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Flex>\n        )}\n      </Flex>\n      <SessionTemplateModal\n        onRequestClose={(formValue) => {\n          if (formValue) {\n            const fieldsValue = _.merge(\n              {\n                // reset fields related to optional and nested fields\n                sessionName: '',\n                ports: [],\n                mounts: [],\n                vfoldersAliasMap: {},\n                bootstrap_script: '',\n                num_of_sessions: 1,\n                owner: {\n                  enabled: false,\n                  accesskey: '',\n                  domainName: '',\n                  email: undefined,\n                  project: '',\n                  resourceGroup: '',\n                },\n                environments: {\n                  manual: '',\n                },\n                batch: {\n                  enabled: false,\n                  command: undefined,\n                  scheduleDate: undefined,\n                },\n                agent: 'auto', // Add the missing 'agent' property\n              } as Omit<\n                Required<OptionalFieldsOnly<SessionLauncherFormValue>>,\n                'autoMountedFolderNames'\n              >,\n              formValue,\n            );\n\n            if (!_.isEmpty(fieldsValue.sessionName)) {\n              fieldsValue.sessionName =\n                fieldsValue.sessionName + '-' + generateRandomString(4);\n            }\n            form.setFieldsValue(fieldsValue);\n            setCurrentStep(steps.length - 1);\n            form.validateFields().catch(() => {});\n          }\n          toggleIsOpenTemplateModal();\n        }}\n        open={isOpenTemplateModal}\n      />\n      {currentStep === steps.length - 1 ? (\n        <ErrorBoundary fallback={null}>\n          <SessionLauncherValidationTour\n            open={validationTourOpen}\n            onClose={() => {\n              setValidationTourOpen(false);\n            }}\n            scrollIntoViewOptions\n          />\n        </ErrorBoundary>\n      ) : undefined}\n    </Flex>\n  );\n};\n\ntype FormOrResourceRequired = {\n  resource: ResourceAllocationFormValue['resource'];\n  containerCount?: number;\n};\n\nexport const ResourceNumbersOfSession: React.FC<FormOrResourceRequired> = ({\n  resource,\n  containerCount = 1,\n}) => {\n  return (\n    <>\n      {_.map(\n        _.omit(resource, 'shmem', 'accelerator', 'acceleratorType'),\n        (value, type) => {\n          return value === '0' ? null : (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (convertToBinaryUnit(value.toString(), '')?.number || 0) *\n                      containerCount +\n                    ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: resource.shmem\n                  ? (convertToBinaryUnit(resource.shmem, '')?.number || 0) *\n                    containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {resource &&\n      resource.accelerator &&\n      resource.acceleratorType &&\n      _.isNumber(resource.accelerator) ? (\n        <ResourceNumber\n          // @ts-ignore\n          type={resource.acceleratorType}\n          value={_.toString(resource.accelerator * containerCount)}\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nexport default SessionLauncherPage;\n"],"names":["node","v0","v1","v2","v3","v4","v5","hash","DatePickerISO","React","_ref","ref","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","_jsx","DatePicker","dayjs","undefined","_value","_value2","_value2$tz","_","newValue","format","tz","toISOString","displayName","props","form","Form","useFormInstance","useEffect","setFieldValue","name","Item","hidden","getSessionNameRules","t","min","message","max","validator","f","Promise","resolve","test","length","reject","formItemProps","useTranslation","label","rules","children","Input","allowClear","autoComplete","MIN_PORT","MAX_PORT","PortTag","_ref2","inValid","tagProps","Tag","color","isValidPortStr","portStr","isPortRangeStr","splitPortRange","split","start","end","map","v","parseInt","toString","portRange","transformPortValuesToNumbers","values","parsePortRangeToNumbers","baiClient","useSuspendedBackendaiClient","tooltip","Trans","i18nKey","extra","rule","_config","maxCountForPreopenPorts","Error","count","allPorts","port","Select","mode","tagRender","hasDuplicated","getFieldValue","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","style","width","suffixIcon","open","tokenSeparators","otherProps","hasOpenedValidationTour","setHasOpenedValidationTour","useBAISettingUserState","steps","title","description","target","_document$getElements","document","getElementsByClassName","_document$getElements2","_document$getElements3","querySelector","Tour","SessionOwnerSetterPreviewCard","isActive","useWatch","currentUserRole","useCurrentUserRole","BAICard","showDivider","size","status","getFieldError","extraButtonTitle","_jsxs","Descriptions","column","token","theme","useToken","fetchingEmail","setFetchingEmail","useState","relayEvn","useRelayEnvironment","data","isFetching","useTanQuery","queryKey","queryFn","email","query","_SessionOwnerSetterCardQuery","require","fetchQuery","toPromise","enabled","ownerKeypairs","keypairs","owner","user","nonExistentOwner","Card","valuePropName","noStyle","Switch","styles","header","borderBottom","body","display","HiddenFormItem","domain_name","dependencies","_Fragment","Flex","required","type","flex","validateStatus","help","Search","onSearch","validateFields","then","catch","setFieldsValue","accesskey","project","resourceGroup","loading","enterButton","Button","icon","CheckIcon","BAISelect","options","k","access_key","autoSelectOption","disabled","Row","gutter","marginSM","Col","span","groups","g","Suspense","fallback","ResourceGroupSelect","projectName","autoSelectDefault","_baiClient$supports","_baiClient$supports2","_form$getFieldValue","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue6$","_form$getFieldValue7","_form$getFieldValue7$","_form$getFieldValue8","_form$getFieldValue8$","_form$getFieldValue9","_form$getFieldValue9$","_form$getFieldValue12","_form$getFieldValue13","_form$getFieldValue14","_form$getFieldValue15","_form$getFieldValue16","_form$getFieldValue17","_form$getFieldValue18","_form$getFieldValue19","_form$getFieldValue20","_form$getFieldValue21","_form$getFieldValue22","_form$getFieldValue23","_form$getFieldValue24","_form$getFieldValue25","_form$getFieldValue26","_form$getFieldValue27","_form$getFieldValue28","_baiClient$_config","_form$getFieldValue29","_form$getFieldValue31","_form$getFieldValue32","onClickEditStep","sessionType","preserve","supportBatchTimeout","supports","supportExtendedImageInfo","currentProject","useCurrentProjectValue","getBaseVersion","getBaseImage","tagAlias","useBackendAIImageMetaData","isDarkMode","useThemeMode","onClickExtraButton","labelStyle","whiteSpace","contentStyle","overflow","SourceCodeViewer","language","Typography","Text","idx","flexFlow","ImageMetaIcon","image","version","manual","marginRight","marginXS","direction","wrap","code","wordBreak","copyable","text","base_image_name","Divider","architecture","tags","tag","_$find","_form$getFieldValue10","_form$getFieldValue11","isCustomized","key","tagValue","labels","aliasedTag","preserveDotStartCase","DoubleTag","colorPrimary","getImageFullName","gap","sizeXS","ImageTags","SyntaxHighlighter","dark","codeTagProps","customStyle","margin","variable","join","align","getFieldWarning","Alert","showIcon","ResourceNumbersOfSession","resource","hideAgents","containerCount","Table","rowKey","pagination","columns","dataIndex","render","record","opacity","dataSource","_form$getFieldValue30","alias","useRecentSessionHistory","recentSessions","setRecentSessionHistory","push","useEventNotStable","id","params","createdAt","newHistory","generateRandomString","Date","newRecentSessionHistory","slice","clear","remove","filter","item","update","useStyle","createStyles","css","fixEditableVerticalAlign","modalProps","sessionHistory","updateSessionHistory","hoverRowKey","setHoverRowKey","getImageAliasName","pinnedSessionHistory","pin","unpin","updatePinnedHistory","usePinnedSessionHistory","setPinnedSessionHistory","recentSessionHistory","pinnedItem","find","newPinnedSessionHistory","setSelectedHistoryId","parsedSessionHistory","useMemo","parseToFormValues","history","isPinned","URLSearchParams","JSON","parse","get","pinned","recent","unionBy","BAIModal","footer","onCancel","onRequestClose","BAITable","rowSelection","selectedRowKeys","columnWidth","hideSelectAll","renderCell","scroll","x","onRow","onMouseEnter","onMouseLeave","PinIcon","QuestionIconWithTooltip","isHovered","onClick","colorTextQuaternary","Link","className","editable","BAILink","_modalProps$onRequest","call","imageStr","environments","Tooltip","placement","onCell","maxWidth","textOverflow","fromNow","_ref3","_convertToBinaryUnit","_convertToBinaryUnit2","ResourceNumber","convertToBinaryUnit","number","opts","shmem","accelerator","acceleratorType","generateSessionId","possible","i","charAt","Math","floor","random","SessionLauncherPage","_baiClient$_config3","_steps$currentStep","app","App","useApp","sessionMode","mainContentDivRef","useAtomValue","mainContentDivRefState","currentGlobalResourceGroup","setCurrentGlobalResourceGroup","useCurrentResourceGroupState","isStartingSession","setIsStartingSession","INITIAL_FORM_VALUES","_baiClient$_config2","allocationPreset","hpcOptimization","autoEnabled","batch","command","scheduleDate","timeoutEnabled","timeout","timeoutUnit","envvars","default_session_environment","environment","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","StepParam","withDefault","NumberParam","FormValuesParam","JsonParam","AppOptionParam","step","currentStep","formValues","formValuesFromQueryParams","redirectTo","appOption","appOptionFromQueryParams","setQuery","useQueryParams","StringParam","search","useLocation","webuiNavigate","useWebUINavigate","isOpenTemplateModal","toggle","toggleIsOpenTemplateModal","useToggle","upsertNotification","useSetBAINotification","pushSessionHistory","run","syncFormToURLWithDebounce","useDebounceFn","currentValue","getFieldsValue","sanitizeSensitiveEnv","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","useForm","mergedInitialValues","_mainContentDivRef$cu","current","scrollTo","filterEmptyItem","PlayCircleFilled","currentStepKey","hasError","getFieldsError","errors","finalStepLastValidateTime","setFinalStepLastValidateTime","useUpdatableState","error","finally","setValidationTourOpen","validationTourOpen","isQueryReset","setIsQueryReset","useLayoutEffect","resetFields","justifyContent","justify","Title","level","marginTop","paddingRight","paddingLeft","Provider","onFormChange","info","layout","requiredMark","initialValues","Radio","SessionNameFormItem","TextArea","autoSize","BAIIntervalView","delay","callback","isBefore","triggerKey","time","Checkbox","checked","add","shouldUpdate","prev","next","_prev$batch","_next$batch","async","showTime","disabledDate","startOf","unit","timeDuration","formattedDuration","formatDuration","durationText","InputNumber","addonAfter","tabIndex","minWidth","SessionOwnerSetterCard","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableAgentSelect","enableNumOfSessions","enableResourcePresets","showRemainingWarning","checkedChildren","unCheckedChildren","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","_prev$hpcOptimization","_next$hpcOptimization","marginMD","xs","sm","stringMode","ownerInfo","isValidOwner","VFolderTableFormItem","vfolder","_vfolder$name","startsWith","tableProps","ownerEmail","PortSelectFormItem","SessionLauncherPreview","stepKey","Popconfirm","onConfirm","QuestionCircleOutlined","colorError","okText","okButtonProps","danger","LeftOutlined","PlayCircleOutlined","startSession","usedSearchParams","_values$owner","_values$owner2","_values$owner3","_values$batch","_values$batch2","_values$batch3","_values$owner4","_baiClient$_config4","mounts","modal","confirm","content","onOk","imageFullName","kernelName","sessionName","sessionInfo","resources","group_name","domain","domainName","cluster_mode","cluster_size","maxWaitSeconds","owner_access_key","starts_at","startupCommand","bootstrap_script","batchTimeout","config","cpu","mem","scaling_group","resource_opts","compareNumberWithUnits","mount_map","vfoldersAliasMap","environ","preopen_ports","ports","agent","agent_list","sessionPromises","num_of_sessions","formattedSessionName","createIfNotExists","res","created","err","_err$message","includes","backupTo","window","location","pathname","backgroundTask","promise","all","pending","resolved","duration","firstSession","to","sessionDetail","sessionId","appOptions","kernelId","service_info","servicePorts","Array","isArray","a","globalThis","appLauncher","showLauncher","toText","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","items","s","SessionTemplateModal","formValue","fieldsValue","SessionLauncherValidationTour","scrollIntoViewOptions"],"sourceRoot":""}