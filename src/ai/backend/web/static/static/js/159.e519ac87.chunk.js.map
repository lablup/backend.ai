{"version":3,"file":"static/js/159.e519ac87.chunk.js","mappings":"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","sources":["components/ManageAppsModal.tsx","../node_modules/@ant-design/icons-svg/es/asn/DeleteOutlined.js","../node_modules/@ant-design/icons/es/icons/DeleteOutlined.js"],"sourcesContent":["import BAIModal, { BAIModalProps } from './BAIModal';\nimport { useWebComponentInfo } from './DefaultProviders';\nimport Flex from './Flex';\nimport { DeleteOutlined, PlusOutlined, CheckOutlined } from '@ant-design/icons';\nimport { Input, Typography, Space, Button, Form } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface Props extends BAIModalProps {}\nconst { Text } = Typography;\nconst ManageAppsModal: React.FC<Props> = ({ ...baiModalProps }) => {\n  const { t } = useTranslation();\n  const { value, dispatchEvent } = useWebComponentInfo();\n  let parsedValue: {\n    open: boolean;\n    servicePorts: any;\n  };\n  try {\n    parsedValue = JSON.parse(value || '');\n  } catch (error) {\n    parsedValue = {\n      open: false,\n      servicePorts: [],\n    };\n  }\n  const { open, servicePorts } = parsedValue;\n  const onFinish = (values: any) => {\n    console.log('Saved settings. ', values);\n  };\n\n  return (\n    <BAIModal\n      open={open}\n      onCancel={() => {\n        dispatchEvent('cancel', null);\n      }}\n      centered\n      title={t('environment.ManageApps')}\n      {...baiModalProps}\n      footer={[\n        <Flex direction=\"row\" justify=\"between\">\n          <Button type=\"text\" danger>\n            {t('button.Reset')}\n          </Button>\n          <Button type=\"primary\" icon={<CheckOutlined />}>\n            {t('button.Save')}\n          </Button>\n        </Flex>,\n      ]}\n    >\n      <Form\n        initialValues={{ apps: servicePorts }}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n      >\n        <Flex direction=\"column\" gap={'xs'}>\n          <Space.Compact block>\n            <Text style={{ width: '30%' }}>{t('environment.AppName')}</Text>\n            <Text style={{ width: '30%' }}>{t('environment.Protocol')}</Text>\n            <Text style={{ width: '30%' }}>{t('environment.Port')}</Text>\n            <Text style={{ width: '10%', textAlign: 'center' }}>\n              {/* {t(\"environment.Action\")} */}\n            </Text>\n          </Space.Compact>\n          <Form.List name=\"apps\">\n            {(fields, { add, remove }) => (\n              <Flex direction=\"column\" gap=\"sm\">\n                {fields.map((field) => (\n                  <Flex direction=\"row\" gap={'xs'}>\n                    <Space.Compact block key={field.key}>\n                      <Form.Item\n                        {...field}\n                        name={[field.name, 'app']}\n                        rules={[\n                          {\n                            required: true,\n                            message: t('environment.AppNameMustNotBeEmpty'),\n                          },\n                        ]}\n                        noStyle\n                      >\n                        <Input />\n                      </Form.Item>\n                      <Form.Item\n                        {...field}\n                        name={[field.name, 'protocol']}\n                        noStyle\n                      >\n                        <Input />\n                      </Form.Item>\n                      <Form.Item {...field} name={[field.name, 'port']} noStyle>\n                        <Input />\n                      </Form.Item>\n                    </Space.Compact>\n                    <Button\n                      type=\"text\"\n                      onClick={() => remove(field.name)}\n                      style={{ width: '10%' }}\n                      icon={<DeleteOutlined />}\n                    />\n                  </Flex>\n                ))}\n                <Button\n                  type=\"dashed\"\n                  onClick={() => add()}\n                  block\n                  icon={<PlusOutlined />}\n                >\n                  {t('button.Add')}\n                </Button>\n              </Flex>\n            )}\n          </Form.List>\n        </Flex>\n      </Form>\n      {/* <Space direction=\"vertical\">\n                <Space.Compact block>\n                    <Text style={{ width: '30%' }}>{t('environment.AppName')}</Text>\n                    <Text style={{ width: '30%' }}>{t('environment.Protocol')}</Text>\n                    <Text style={{ width: '30%' }}>{t('environment.Port')}</Text>\n                    <Text style={{ width: '10%' }}>{t('environment.Action')}</Text>\n                </Space.Compact>\n                {servicePorts?.map((item: any, index: number) => {\n                    return (\n                        <Space.Compact block key={index}>\n                            <Input style={{ width: '30%' }} defaultValue={item.app}/>\n                            <Input style={{ width: '30%' }} defaultValue={item.protocol}/>\n                            <Input style={{ width: '30%' }} defaultValue={item.port}/>\n                            <Button style={{ width: '10%' }} icon={<DeleteOutlined />}/>\n                        </Space.Compact>\n                    )\n                })}\n                <Button block icon={<PlusOutlined />}>{t('general.Add')}</Button>\n            </Space> */}\n    </BAIModal>\n  );\n};\n\nexport default ManageAppsModal;\n","// This icon file is generated automatically.\nvar DeleteOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z\" } }] }, \"name\": \"delete\", \"theme\": \"outlined\" };\nexport default DeleteOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport DeleteOutlinedSvg from \"@ant-design/icons-svg/es/asn/DeleteOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar DeleteOutlined = function DeleteOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: DeleteOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  DeleteOutlined.displayName = 'DeleteOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(DeleteOutlined);"],"names":["Text","Typography","_ref","parsedValue","baiModalProps","Object","assign","_objectDestructuringEmpty","t","useTranslation","_useWebComponentInfo","useWebComponentInfo","value","dispatchEvent","JSON","parse","error","open","servicePorts","_parsedValue","_jsx","BAIModal","_objectSpread","onCancel","centered","title","footer","_jsxs","Flex","direction","justify","children","Button","type","danger","icon","CheckOutlined","Form","initialValues","apps","onFinish","values","console","log","autoComplete","gap","Space","Compact","block","style","width","textAlign","List","name","fields","_ref2","add","remove","map","field","Item","rules","required","message","noStyle","Input","key","onClick","DeleteOutlined","PlusOutlined","props","ref","React","AntdIcon","_extends","DeleteOutlinedSvg"],"sourceRoot":""}