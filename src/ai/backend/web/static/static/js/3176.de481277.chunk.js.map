{"version":3,"file":"static/js/3176.de481277.chunk.js","mappings":"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","sources":["components/ComputeSessionNodeItems/ContainerLogModal.tsx","hooks/useMemoWithPrevious.tsx","components/ComputeSessionNodeItems/__generated__/ConnectedKernelListLegacyQuery.graphql.ts","components/ComputeSessionNodeItems/__generated__/ConnectedKernelListQuery.graphql.ts","components/ComputeSessionNodeItems/__generated__/ContainerCommitModalFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/ContainerLogModalFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/EditableSessionNameFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/EditableSessionNameMutation.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionActionButtonsFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionIdleChecksFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionIdleChecksNodeFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionTypeTagFragment.graphql.ts","components/ComputeSessionNodeItems/ConnectedKernelList.tsx","components/ComputeSessionNodeItems/EditableSessionName.tsx","components/BAIIcons/ContainerCommit.svg","components/BAIIcons/ContainerCommitIcon.tsx","components/BAIIcons/SessionLog.svg","components/BAIIcons/SessionLogIcon.tsx","components/BAIIcons/TerminalApp.svg","components/BAIIcons/TerminalAppIcon.tsx","components/BAIIcons/Terminate.svg","components/BAIIcons/TerminateIcon.tsx","components/ComputeSessionNodeItems/ContainerCommitModal.tsx","components/ComputeSessionNodeItems/SessionActionButtons.tsx","hooks/useBackendAIAppLauncher.tsx","components/ComputeSessionNodeItems/SessionIdleChecks.tsx","components/ComputeSessionNodeItems/SessionTypeTag.tsx","components/IdleCheckDescriptionModal.tsx","components/SessionDetailContent.tsx","components/SessionDetailDrawer.tsx","components/UnmountModalAfterClose.tsx","components/__generated__/SessionDetailContentLegacyQuery.graphql.ts","components/__generated__/SessionDetailContentQuery.graphql.ts","helper/csv-util.ts"],"sourcesContent":["import { downloadBlob } from '../../helper/csv-util';\nimport { useSuspendedBackendaiClient } from '../../hooks';\nimport { useCurrentUserRole } from '../../hooks/backendai';\nimport { useTanQuery } from '../../hooks/reactQueryAlias';\nimport { useMemoWithPrevious } from '../../hooks/useMemoWithPrevious';\nimport BAIModal, { BAIModalProps } from '../BAIModal';\nimport BAISelect from '../BAISelect';\nimport Flex from '../Flex';\nimport { ContainerLogModalFragment$key } from './__generated__/ContainerLogModalFragment.graphql';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { LazyLog, ScrollFollow } from '@melloware/react-logviewer';\nimport { Button, Divider, Grid, theme, Tooltip, Typography } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { DownloadIcon } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface ContainerLogModalProps extends BAIModalProps {\n  sessionFrgmt: ContainerLogModalFragment$key | null;\n  defaultKernelId?: string;\n}\n\nconst ContainerLogModal: React.FC<ContainerLogModalProps> = ({\n  sessionFrgmt,\n  defaultKernelId,\n  ...modalProps\n}) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const userRole = useCurrentUserRole();\n\n  const session = useFragment(\n    graphql`\n      fragment ContainerLogModalFragment on ComputeSessionNode {\n        id\n        row_id @required(action: NONE)\n        name\n        status\n        access_key\n        kernel_nodes {\n          edges {\n            node {\n              id\n              row_id\n              container_id\n              cluster_idx\n              cluster_role\n            }\n          }\n        }\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const kernelNodes = session?.kernel_nodes?.edges?.map((e) => e?.node) || [];\n  const [selectedKernelId, setSelectedKernelId] = useState(\n    defaultKernelId ||\n      _.find(kernelNodes, (e) => e?.cluster_role === 'main')?.row_id ||\n      kernelNodes[0]?.row_id,\n  );\n\n  useEffect(() => {\n    if (modalProps.open === false) {\n      setSelectedKernelId(undefined);\n    }\n  }, [modalProps.open]);\n\n  // Currently we can only fetch full logs\n  // const [logSize, setLogSize] = useState<100|'full'>('full');\n  const {\n    data: logs,\n    refetch,\n    isPending,\n    isRefetching,\n    dataUpdatedAt,\n  } = useTanQuery<string>({\n    queryKey: [\n      'containerLog',\n      session?.row_id,\n      session?.access_key,\n      selectedKernelId,\n      modalProps.open,\n    ],\n    queryFn: async () => {\n      if (\n        !modalProps.open ||\n        !session?.row_id ||\n        !session?.access_key ||\n        !selectedKernelId\n      ) {\n        return '';\n      }\n      return await baiClient\n        .get_logs(session?.row_id, session?.access_key, selectedKernelId, 15000)\n        .then((req: any) => req.result.logs);\n    },\n    staleTime: 5000,\n  });\n\n  // let queryParams: Array<string> = [];\n  // if (session?.access_key != null) {\n  //   queryParams.push(`owner_access_key=${session.access_key}`);\n  // }\n  // if (baiClient.supports('per-kernel-logs') && selectedKernelId !== null) {\n  //   queryParams.push(`kernel_id=${selectedKernelId}`);\n  // }\n  // let queryString = `/session/${session?.row_id}/logs`;\n  // if (queryParams.length > 0) {\n  //   queryString += `?${queryParams.join('&')}`;\n  // }\n  // // const url = `${baiClient._endpoint}${queryString}`\n\n  // const signed = baiClient.newSignedRequest('GET', queryString, null);\n  // console.log(signed)\n  // console.log(signed.uri);\n\n  const [lastLineNumbers, { resetPrevious: resetPreviousLineNumber }] =\n    useMemoWithPrevious(() => logs?.split('\\n').length || 0, [logs]);\n\n  const { md } = Grid.useBreakpoint();\n  const { t } = useTranslation();\n\n  return (\n    <BAIModal\n      title={\n        <Flex style={{ maxWidth: '100%' }} gap={'sm'}>\n          <Typography.Title level={4} style={{ margin: 0, flexShrink: 0 }}>\n            Logs\n          </Typography.Title>\n          {session ? (\n            <>\n              <Typography.Text style={{ fontWeight: 'normal' }} ellipsis>\n                {session?.name}\n              </Typography.Text>\n              <Typography.Text\n                style={{ fontWeight: 'normal', fontFamily: 'monospace' }}\n                copyable={{\n                  text: session?.row_id,\n                  tooltips: t('button.CopySomething', {\n                    name: t('session.SessionId'),\n                  }),\n                }}\n              >\n                ({md ? session?.row_id : session?.row_id.split('-')?.[0]})\n              </Typography.Text>\n            </>\n          ) : null}\n        </Flex>\n      }\n      width={'100%'}\n      styles={{\n        header: {\n          width: '100%',\n        },\n        body: {\n          height: 'calc(100vh - 100px)',\n          maxHeight: 'calc(100vh - 100px)',\n        },\n      }}\n      {...modalProps}\n      footer={null}\n      destroyOnClose\n    >\n      <Flex\n        direction=\"column\"\n        align=\"start\"\n        style={{ height: '100%' }}\n        gap={'sm'}\n      >\n        <Flex gap=\"sm\" wrap=\"wrap\">\n          Kernel Role\n          <BAISelect\n            value={selectedKernelId}\n            onChange={(value) => {\n              setSelectedKernelId(value);\n              resetPreviousLineNumber();\n            }}\n            autoSelectOption\n            options={_.chain(session?.kernel_nodes?.edges)\n              .sortBy((e) => `${e?.node?.cluster_role} ${e?.node?.cluster_idx}`)\n              .map((e) => {\n                return {\n                  label: (\n                    <>\n                      {e?.node?.cluster_role}\n                      {e?.node?.cluster_role !== 'main'\n                        ? e?.node?.cluster_idx\n                        : ''}\n                      {userRole === 'admin' || userRole === 'superadmin' ? (\n                        <Typography.Text\n                          style={{\n                            fontFamily: 'monospace',\n                            fontSize: token.fontSizeSM,\n                          }}\n                          type=\"secondary\"\n                        >\n                          ({(e?.node?.row_id || '').substring(0, 5)})\n                        </Typography.Text>\n                      ) : null}\n                    </>\n                  ),\n                  value: e?.node?.row_id,\n                };\n              })\n              .value()}\n          />\n          <Divider type=\"vertical\" />\n          {/* Request logs\n          <Select\n            value={logSize}\n            options={[\n              {\n                label: 'last 100 lines',\n                value: 100,\n              },\n              {\n                label: 'Full logs',\n                value: 'full',\n              },\n            ]}\n            onChange={(value) => { \n              setLogSize(value);\n              if(value!=='full'){\n                resetPreviousLineNumber();\n              }\n              refetch();\n            }}\n          ></Select> */}\n          <Tooltip title={t('button.Download')}>\n            <Button\n              size=\"middle\"\n              icon={<DownloadIcon />}\n              disabled={isPending || isRefetching}\n              onClick={() => {\n                const blob = new Blob([logs || ''], { type: 'text/plain' });\n                downloadBlob(\n                  blob,\n                  `${session?.name || 'session'}-logs-${selectedKernelId}-${new Date().toISOString()}.txt`,\n                );\n              }}\n            />\n          </Tooltip>\n          <Tooltip title={t('button.Refresh')}>\n            <Button\n              size=\"middle\"\n              loading={isPending || isRefetching}\n              icon={<ReloadOutlined />}\n              onClick={() => refetch()}\n            />\n          </Tooltip>\n        </Flex>\n\n        <div\n          style={{\n            height: 'calc(100% - 50px)',\n            alignSelf: 'stretch',\n\n            border: `1px solid ${token.colorBorder}`,\n            overflow: 'hidden',\n          }}\n        >\n          <ScrollFollow\n            key={dataUpdatedAt} // to scroll to bottom on new data\n            startFollowing={true}\n            render={({ follow, onScroll }) => (\n              <LazyLog\n                caseInsensitive\n                enableSearch\n                enableSearchNavigation\n                selectableLines\n                text={logs || ''}\n                highlight={lastLineNumbers.previous}\n                extraLines={1}\n                // url={signed.uri}\n                // fetchOptions={\n                //   {\n                //     headers: signed.headers\n                //   }\n                // }\n                // stream\n                follow={follow}\n                onScroll={onScroll}\n              />\n            )}\n          />\n        </div>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default ContainerLogModal;\n","import { DependencyList, useEffect, useMemo, useRef, useState } from 'react';\n\nexport const useMemoWithPrevious = <T,>(\n  factory: () => T,\n  deps: DependencyList,\n  { initialPrev }: { initialPrev?: T } | undefined = {},\n) => {\n  const prevRef = useRef(initialPrev);\n  const [prevResetKey, setPrevResetKey] = useState({});\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const current = useMemo(factory, deps);\n  const memoizedPrev = useMemo(() => {\n    return prevRef.current;\n    // Only update when the reset key changes and deps change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, prevResetKey]);\n\n  useEffect(() => {\n    prevRef.current = current;\n    // Only update when deps change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return [\n    {\n      previous: memoizedPrev,\n      current: current,\n    },\n    {\n      resetPrevious: () => {\n        prevRef.current = initialPrev;\n        setPrevResetKey({});\n      },\n    },\n  ] as const;\n};\n","/**\n * @generated SignedSource<<3f8f52376ee43b7f6e40e2c8e635528c>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ConnectedKernelListLegacyQuery$variables = {\n  uuid: string;\n};\nexport type ConnectedKernelListLegacyQuery$data = {\n  readonly session_for_project_id: {\n    readonly group_id: string | null | undefined;\n  } | null | undefined;\n};\nexport type ConnectedKernelListLegacyQuery = {\n  response: ConnectedKernelListLegacyQuery$data;\n  variables: ConnectedKernelListLegacyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"uuid\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"group_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ConnectedKernelListLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ConnectedKernelListLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"b8db3f5005362f059f55439e393c1838\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ConnectedKernelListLegacyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ConnectedKernelListLegacyQuery(\\n  $uuid: UUID!\\n) {\\n  session_for_project_id: compute_session(id: $uuid) {\\n    group_id\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"19ed5dde0fb95d8ff8cfbe9114129348\";\n\nexport default node;\n","/**\n * @generated SignedSource<<676e296fd74bb4228ee0d8fd7224b997>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ConnectedKernelListQuery$variables = {\n  id: any;\n  project_id: string;\n};\nexport type ConnectedKernelListQuery$data = {\n  readonly session: {\n    readonly kernel_nodes: {\n      readonly count: number | null | undefined;\n      readonly edges: ReadonlyArray<{\n        readonly node: {\n          readonly agent_id: string | null | undefined;\n          readonly cluster_role: string | null | undefined;\n          readonly container_id: string | null | undefined;\n          readonly id: string;\n          readonly row_id: string | null | undefined;\n          readonly status: string | null | undefined;\n          readonly status_info: string | null | undefined;\n        } | null | undefined;\n      } | null | undefined>;\n    } | null | undefined;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerLogModalFragment\">;\n  } | null | undefined;\n};\nexport type ConnectedKernelListQuery = {\n  response: ConnectedKernelListQuery$data;\n  variables: ConnectedKernelListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"project_id\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"id\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"project_id\",\n    \"variableName\": \"project_id\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"cluster_role\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status_info\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"agent_id\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"container_id\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"count\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ConnectedKernelListQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"KernelConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"kernel_nodes\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"KernelEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v2/*: any*/),\n                      (v3/*: any*/),\n                      (v4/*: any*/),\n                      (v5/*: any*/),\n                      (v6/*: any*/),\n                      (v7/*: any*/),\n                      (v8/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              },\n              (v9/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ContainerLogModalFragment\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ConnectedKernelListQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"KernelConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"kernel_nodes\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"KernelEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v2/*: any*/),\n                      (v3/*: any*/),\n                      (v4/*: any*/),\n                      (v5/*: any*/),\n                      (v6/*: any*/),\n                      (v7/*: any*/),\n                      (v8/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_idx\",\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              },\n              (v9/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          (v2/*: any*/),\n          (v3/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"name\",\n            \"storageKey\": null\n          },\n          (v5/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"access_key\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"2e6cc39dd042b4d260abf65705f92cb5\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ConnectedKernelListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ConnectedKernelListQuery(\\n  $id: GlobalIDField!\\n  $project_id: UUID!\\n) {\\n  session: compute_session_node(id: $id, project_id: $project_id) {\\n    kernel_nodes {\\n      edges {\\n        node {\\n          id\\n          row_id\\n          cluster_role\\n          status\\n          status_info\\n          agent_id\\n          container_id\\n        }\\n      }\\n      count\\n    }\\n    ...ContainerLogModalFragment\\n    id\\n  }\\n}\\n\\nfragment ContainerLogModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        id\\n        row_id\\n        container_id\\n        cluster_idx\\n        cluster_role\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d7ddfbcf29d38fad8451d13a176ce279\";\n\nexport default node;\n","/**\n * @generated SignedSource<<1a5d592adb2c9a662495cd7456262a7f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerCommitModalFragment$data = {\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly row_id: string;\n  readonly \" $fragmentType\": \"ContainerCommitModalFragment\";\n} | null | undefined;\nexport type ContainerCommitModalFragment$key = {\n  readonly \" $data\"?: ContainerCommitModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerCommitModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerCommitModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"row_id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"8bcd294de1ffd3f00f6ec0ed7177c304\";\n\nexport default node;\n","/**\n * @generated SignedSource<<4ad7686d85570119a8fe237eb7cc0de9>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerLogModalFragment$data = {\n  readonly access_key: string | null | undefined;\n  readonly id: string;\n  readonly kernel_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly cluster_idx: number | null | undefined;\n        readonly cluster_role: string | null | undefined;\n        readonly container_id: string | null | undefined;\n        readonly id: string;\n        readonly row_id: string | null | undefined;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly name: string | null | undefined;\n  readonly row_id: string;\n  readonly status: string | null | undefined;\n  readonly \" $fragmentType\": \"ContainerLogModalFragment\";\n} | null | undefined;\nexport type ContainerLogModalFragment$key = {\n  readonly \" $data\"?: ContainerLogModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerLogModalFragment\">;\n};\n\nconst node: ReaderFragment = (function(){\nvar v0 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerLogModalFragment\",\n  \"selections\": [\n    (v0/*: any*/),\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": (v1/*: any*/),\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"access_key\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"KernelConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"kernel_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"KernelEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"KernelNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                (v0/*: any*/),\n                (v1/*: any*/),\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"container_id\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cluster_idx\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cluster_role\",\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"59dda81185d3d874cd635adcae2ae9d4\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2966b965c5a39abf1f5fe5121ba20420>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type EditableSessionNameFragment$data = {\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly priority: number | null | undefined;\n  readonly row_id: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly user_id: string | null | undefined;\n  readonly \" $fragmentType\": \"EditableSessionNameFragment\";\n};\nexport type EditableSessionNameFragment$key = {\n  readonly \" $data\"?: EditableSessionNameFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"EditableSessionNameFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"EditableSessionNameFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"priority\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"user_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"9c053b92b568a9b132f7615d1869f32b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<7529d9334c324abe9ad47bcccb303aa6>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { Result } from \"relay-runtime\";\nexport type ModifyComputeSessionInput = {\n  clientMutationId?: string | null | undefined;\n  id: any;\n  name?: string | null | undefined;\n  priority?: number | null | undefined;\n};\nexport type EditableSessionNameMutation$variables = {\n  input: ModifyComputeSessionInput;\n};\nexport type EditableSessionNameMutation$data = {\n  readonly modify_compute_session: Result<{\n    readonly item: {\n      readonly id: string;\n      readonly name: string | null | undefined;\n    } | null | undefined;\n  } | null | undefined, ReadonlyArray<unknown>>;\n};\nexport type EditableSessionNameMutation = {\n  response: EditableSessionNameMutation$data;\n  variables: EditableSessionNameMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"input\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": [\n    {\n      \"kind\": \"Variable\",\n      \"name\": \"input\",\n      \"variableName\": \"input\"\n    }\n  ],\n  \"concreteType\": \"ModifyComputeSessionPayload\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"modify_compute_session\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"ComputeSessionNode\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"item\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"id\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"name\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"EditableSessionNameMutation\",\n    \"selections\": [\n      {\n        \"kind\": \"CatchField\",\n        \"field\": (v1/*: any*/),\n        \"to\": \"RESULT\",\n        \"path\": \"modify_compute_session\"\n      }\n    ],\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"EditableSessionNameMutation\",\n    \"selections\": [\n      (v1/*: any*/)\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"bea4b6405958ab3b9796129b5807d0fa\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"EditableSessionNameMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation EditableSessionNameMutation(\\n  $input: ModifyComputeSessionInput!\\n) {\\n  modify_compute_session(input: $input) {\\n    item {\\n      id\\n      name\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"055a00b906a6c6ab62ad29ea3ebc6e46\";\n\nexport default node;\n","/**\n * @generated SignedSource<<ddb7872e2d8f78fb16d89240bc6bb97c>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionActionButtonsFragment$data = {\n  readonly access_key: string | null | undefined;\n  readonly commit_status: string | null | undefined;\n  readonly id: string;\n  readonly row_id: string;\n  readonly service_ports: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly type: string | null | undefined;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerCommitModalFragment\" | \"ContainerLogModalFragment\" | \"TerminateSessionModalFragment\">;\n  readonly \" $fragmentType\": \"SessionActionButtonsFragment\";\n} | null | undefined;\nexport type SessionActionButtonsFragment$key = {\n  readonly \" $data\"?: SessionActionButtonsFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionActionButtonsFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionActionButtonsFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"row_id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"type\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"access_key\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"service_ports\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"commit_status\",\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"TerminateSessionModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"ContainerLogModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"ContainerCommitModalFragment\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"691b7c3c1673640d97620822f4fff09f\";\n\nexport default node;\n","/**\n * @generated SignedSource<<75f0976f768911843722fb483dc8f303>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionIdleChecksFragment$data = {\n  readonly id: string | null | undefined;\n  readonly idle_checks: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionIdleChecksFragment\";\n};\nexport type SessionIdleChecksFragment$key = {\n  readonly \" $data\"?: SessionIdleChecksFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionIdleChecksFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionIdleChecksFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"idle_checks\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSession\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d2bf721ec94f22eba99980925b3f9656\";\n\nexport default node;\n","/**\n * @generated SignedSource<<5a48d3f7c0db79185e24e2b973ff10d6>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionIdleChecksNodeFragment$data = {\n  readonly id: string;\n  readonly idle_checks: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionIdleChecksNodeFragment\";\n};\nexport type SessionIdleChecksNodeFragment$key = {\n  readonly \" $data\"?: SessionIdleChecksNodeFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionIdleChecksNodeFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionIdleChecksNodeFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"idle_checks\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"09a1dd685c8942ebb5c69e6dddaf6da0\";\n\nexport default node;\n","/**\n * @generated SignedSource<<63fa395e8c9335222eada19d6129c0e5>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionTypeTagFragment$data = {\n  readonly type: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionTypeTagFragment\";\n};\nexport type SessionTypeTagFragment$key = {\n  readonly \" $data\"?: SessionTypeTagFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionTypeTagFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionTypeTagFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"type\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"6d4ab2b738125ee81d47483324695349\";\n\nexport default node;\n","import { filterEmptyItem, filterNonNullItems, toGlobalId } from '../../helper';\nimport { useCurrentProjectValue } from '../../hooks/useCurrentProject';\n// import BAIPropertyFilter from '../BAIPropertyFilter';\nimport BAITable from '../BAITable';\nimport DoubleTag from '../DoubleTag';\nimport Flex from '../Flex';\nimport UnmountModalAfterClose from '../UnmountModalAfterClose';\nimport ContainerLogModal from './ContainerLogModal';\nimport { ConnectedKernelListLegacyQuery } from './__generated__/ConnectedKernelListLegacyQuery.graphql';\nimport {\n  ConnectedKernelListQuery,\n  ConnectedKernelListQuery$data,\n} from './__generated__/ConnectedKernelListQuery.graphql';\nimport { Button, Tag, Tooltip, Typography } from 'antd';\nimport { ColumnType } from 'antd/lib/table';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { ScrollTextIcon } from 'lucide-react';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Kernel = NonNullable<\n  NonNullable<\n    NonNullable<\n      NonNullable<ConnectedKernelListQuery$data['session']>['kernel_nodes']\n    >['edges'][number]\n  >['node']\n>;\n\ninterface ConnectedKernelListProps {\n  id: string;\n  fetchKey?: string;\n}\n\nconst kernelStatusTagColor = {\n  // prepare\n  PREPARING: 'blue',\n  BUILDING: 'blue',\n  PULLING: 'blue',\n  PREPARED: 'blue',\n  CREATING: 'blue',\n  // running\n  PENDING: 'green',\n  SCHEDULED: 'green',\n  RUNNING: 'green',\n  RESTARTING: 'green',\n  RESIZING: 'green',\n  SUSPENDED: 'green',\n  // terminated\n  TERMINATING: 'default',\n  TERMINATED: 'default',\n  CANCELLED: 'default',\n  // error\n  ERROR: 'red',\n};\n\nconst ConnectedKernelList: React.FC<ConnectedKernelListProps> = ({\n  id,\n  fetchKey,\n}) => {\n  const { t } = useTranslation();\n  const currentProject = useCurrentProjectValue();\n  const [kernelIdForLogModal, setKernelIdForLogModal] = useState<string>();\n\n  // get the project id of the session for <= v24.12.0.\n  const { session_for_project_id } =\n    useLazyLoadQuery<ConnectedKernelListLegacyQuery>(\n      graphql`\n        query ConnectedKernelListLegacyQuery($uuid: UUID!) {\n          session_for_project_id: compute_session(id: $uuid) {\n            group_id\n          }\n        }\n      `,\n      {\n        uuid: id,\n      },\n      {\n        fetchPolicy: 'network-only',\n      },\n    );\n\n  const { session } = useLazyLoadQuery<ConnectedKernelListQuery>(\n    graphql`\n      query ConnectedKernelListQuery($id: GlobalIDField!, $project_id: UUID!) {\n        session: compute_session_node(id: $id, project_id: $project_id) {\n          kernel_nodes {\n            edges {\n              node {\n                id\n                row_id\n                cluster_role\n                status\n                status_info\n                agent_id\n                container_id\n              }\n            }\n            count\n          }\n          ...ContainerLogModalFragment\n        }\n      }\n    `,\n    {\n      id: toGlobalId('ComputeSessionNode', id),\n      project_id: session_for_project_id?.group_id || currentProject.id,\n    },\n    {\n      fetchPolicy: 'network-only',\n      fetchKey: fetchKey,\n    },\n  );\n  const kernelNodes = session?.kernel_nodes;\n\n  const columns = filterEmptyItem<ColumnType<Kernel>>([\n    {\n      title: '#',\n      fixed: 'left',\n      render: (id, record, index) => {\n        return index + 1;\n      },\n      showSorterTooltip: false,\n      rowScope: 'row',\n    },\n    {\n      title: t('kernel.KernelId'),\n      fixed: 'left',\n      dataIndex: 'row_id',\n      render: (row_id) => (\n        <>\n          <Typography.Text copyable ellipsis>\n            {row_id}\n          </Typography.Text>\n          <Tooltip title={t('session.SeeContainerLogs')}>\n            <Button\n              icon={<ScrollTextIcon />}\n              type=\"link\"\n              onClick={() => {\n                setKernelIdForLogModal(row_id);\n              }}\n            />\n          </Tooltip>\n        </>\n      ),\n    },\n    {\n      title: t('kernel.Role'),\n      dataIndex: 'cluster_role',\n      render: (role) => <Tag>{role}</Tag>,\n    },\n    {\n      title: t('kernel.Status'),\n      dataIndex: 'status',\n      render: (status, record) => {\n        return (\n          <>\n            {record?.status_info !== '' ? (\n              <DoubleTag\n                values={[\n                  { label: status, color: _.get(kernelStatusTagColor, status) },\n                  {\n                    label: record?.status_info,\n                    color: _.get(\n                      kernelStatusTagColor,\n                      record?.status_info ?? '',\n                    ),\n                  },\n                ]}\n              />\n            ) : (\n              <Tag color={_.get(kernelStatusTagColor, status)}>{status}</Tag>\n            )}\n          </>\n        );\n      },\n    },\n    {\n      title: t('kernel.ContainerId'),\n      dataIndex: 'container_id',\n      onCell: () => ({\n        style: { maxWidth: 250 },\n      }),\n      render: (id) => (\n        <Typography.Text copyable ellipsis>\n          {id}\n        </Typography.Text>\n      ),\n    },\n    {\n      title: t('kernel.AgentId'),\n      dataIndex: 'agent_id',\n      render: (id) => <Typography.Text copyable>{id}</Typography.Text>,\n    },\n  ]);\n\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'sm'}>\n      {/* TODO: implement filter when compute_session_node query supports filter */}\n      {/* <BAIPropertyFilter\n        filterProperties={[\n          {\n            key: 'agent_id',\n            propertyLabel: t('kernel.AgentId'),\n            type: 'string',\n          },\n        ]}\n        value={filterString}\n        onChange={(value) => {\n          startFilterTransition(() => {\n            setFilterString(value);\n          });\n        }}\n      /> */}\n      <BAITable\n        bordered\n        // loading={isPendingFilter}\n        rowKey=\"id\"\n        scroll={{ x: 'max-content' }}\n        columns={columns}\n        dataSource={filterNonNullItems(\n          kernelNodes?.edges.map((edge) => edge?.node),\n        )}\n        style={{ width: '100%' }}\n        // TODO: implement pagination when compute_session_node query supports pagination\n        pagination={false}\n      />\n\n      <UnmountModalAfterClose>\n        <ContainerLogModal\n          open={!!kernelIdForLogModal}\n          sessionFrgmt={session || null}\n          defaultKernelId={kernelIdForLogModal}\n          onCancel={() => {\n            setKernelIdForLogModal(undefined);\n          }}\n        />\n      </UnmountModalAfterClose>\n    </Flex>\n  );\n};\n\nexport default ConnectedKernelList;\n","import { useCurrentUserInfo } from '../../hooks/backendai';\nimport { getSessionNameRules } from '../SessionNameFormItem';\nimport { EditableSessionNameFragment$key } from './__generated__/EditableSessionNameFragment.graphql';\nimport { EditableSessionNameMutation } from './__generated__/EditableSessionNameMutation.graphql';\nimport { theme, Form, Input, App } from 'antd';\nimport Text, { TextProps } from 'antd/es/typography/Text';\nimport Title, { TitleProps } from 'antd/es/typography/Title';\nimport graphql from 'babel-plugin-relay/macro';\nimport { CornerDownLeftIcon } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment, useMutation } from 'react-relay';\n\ntype EditableSessionNameProps = {\n  sessionFrgmt: EditableSessionNameFragment$key;\n} & (\n  | ({ component?: typeof Text } & Omit<TextProps, 'children'>)\n  | ({ component: typeof Title } & Omit<TitleProps, 'children'>)\n);\n\nconst EditableSessionName: React.FC<EditableSessionNameProps> = ({\n  component: Component = Text,\n  sessionFrgmt,\n  editable: editableOfProps,\n  style,\n  ...otherProps\n}) => {\n  const session = useFragment(\n    graphql`\n      fragment EditableSessionNameFragment on ComputeSessionNode {\n        id\n        row_id\n        name\n        priority\n        user_id\n        status\n      }\n    `,\n    sessionFrgmt,\n  );\n  const [optimisticName, setOptimisticName] = useState(session.name);\n  const [userInfo] = useCurrentUserInfo();\n  const [commitEditMutation, isPendingEditMutation] =\n    useMutation<EditableSessionNameMutation>(graphql`\n      mutation EditableSessionNameMutation($input: ModifyComputeSessionInput!) {\n        modify_compute_session(input: $input) @catch {\n          item {\n            id\n            name\n          }\n        }\n      }\n    `);\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isEditing, setIsEditing] = useState(false);\n  const { message } = App.useApp();\n\n  const isNotPreparingCategoryStatus = ![\n    'RESTARTING',\n    'PREPARING',\n    'PREPARED',\n    'CREATING',\n    'PULLING',\n  ].includes(session.status || '');\n\n  const isEditingAllowed =\n    editableOfProps &&\n    userInfo.uuid === session.user_id &&\n    isNotPreparingCategoryStatus;\n\n  return (\n    <>\n      {(!isEditing || isPendingEditMutation) && (\n        <Component\n          editable={\n            isEditingAllowed && !isPendingEditMutation\n              ? {\n                  onStart: () => {\n                    setIsEditing(true);\n                  },\n                  triggerType: ['icon', 'text'],\n                }\n              : false\n          }\n          copyable\n          style={{\n            ...style,\n            color: isPendingEditMutation\n              ? token.colorTextTertiary\n              : style?.color,\n          }}\n          {...otherProps}\n        >\n          {isPendingEditMutation ? optimisticName : session.name}\n        </Component>\n      )}\n      {isEditing && !isPendingEditMutation && (\n        <Form\n          onFinish={(values) => {\n            setIsEditing(false);\n            setOptimisticName(values.sessionName);\n            commitEditMutation({\n              variables: {\n                input: {\n                  id: session.id,\n                  name: values.sessionName,\n                },\n              },\n              onCompleted(response, errors) {\n                if (response.modify_compute_session.ok) {\n                  // TODO: remove below dispatchEvent  after session list migration to React\n                  document.dispatchEvent(\n                    new CustomEvent('backend-ai-session-list-refreshed'),\n                  );\n                } else {\n                  // With @catch directive, errors should be in response.modify_compute_session.errors\n                  // However, it's empty, so we use errors from onCompleted instead\n                  const errMessage = errors?.[0]?.message || '';\n                  if (errMessage.includes('Duplicate session name.')) {\n                    message.error(t('session.launcher.SessionAlreadyExists'));\n                  } else {\n                    if (errors?.[0]?.message) {\n                      message.error(t('session.FailToRenameSession'));\n                    }\n                  }\n                }\n              },\n              onError(error) {\n                message.error(t('session.FailToRenameSession'));\n              },\n            });\n          }}\n          initialValues={{\n            sessionName: session.name,\n          }}\n          style={{\n            flex: 1,\n          }}\n        >\n          <Form.Item\n            name=\"sessionName\"\n            rules={getSessionNameRules(t)}\n            style={{\n              margin: 0,\n            }}\n          >\n            <Input\n              size=\"large\"\n              suffix={\n                <CornerDownLeftIcon\n                  style={{\n                    fontSize: '0.8em',\n                    color: token.colorTextTertiary,\n                  }}\n                />\n              }\n              autoFocus\n              onKeyDown={(e) => {\n                // when press escape key, cancel editing\n                if (e.key === 'Escape') {\n                  setIsEditing(false);\n                }\n              }}\n            />\n          </Form.Item>\n        </Form>\n      )}\n    </>\n  );\n};\n\nexport default EditableSessionName;\n","var _path, _path2, _path3, _path4;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgContainerCommit(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8.20078 5.99951H6.19967C6.08939 5.99951 6 6.0889 6 6.19918V17.7998C6 17.9101 6.08939 17.9995 6.19967 17.9995H8.20078C8.31105 17.9995 8.40045 17.9101 8.40045 17.7998V6.19918C8.40045 6.0889 8.31105 5.99951 8.20078 5.99951Z\",\n    fill: \"currentColor\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.0016 5.99951H11.0004C10.8902 5.99951 10.8008 6.0889 10.8008 6.19918V17.7998C10.8008 17.9101 10.8902 17.9995 11.0004 17.9995H13.0016C13.1118 17.9995 13.2012 17.9101 13.2012 17.7998V6.19918C13.2012 6.0889 13.1118 5.99951 13.0016 5.99951Z\",\n    fill: \"currentColor\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.8004 5.99951H15.7993C15.689 5.99951 15.5996 6.0889 15.5996 6.19918V17.7998C15.5996 17.9101 15.689 17.9995 15.7993 17.9995H17.8004C17.9107 17.9995 18.0001 17.9101 18.0001 17.7998V6.19918C18.0001 6.0889 17.9107 5.99951 17.8004 5.99951Z\",\n    fill: \"currentColor\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21.2002 2H2.79978C2.35694 2 2 2.35694 2 2.79978V21.2002C2 21.6431 2.35694 22 2.79978 22H21.2002C21.6431 22 22 21.6419 22 21.2002V2.79978C22 2.35694 21.6419 2 21.2002 2ZM20.2008 20.2008H3.80033V3.80033H20.2008V20.2008Z\",\n    fill: \"currentColor\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgContainerCommit);\nexport default __webpack_public_path__ + \"static/media/ContainerCommit.1780724d4a98ae1d0738d4f98b5e49b5.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactComponent as logo } from './ContainerCommit.svg';\nimport Icon from '@ant-design/icons';\nimport { CustomIconComponentProps } from '@ant-design/icons/lib/components/Icon';\n\ninterface ContainerCommitIconProps\n  extends Omit<CustomIconComponentProps, 'width' | 'height' | 'fill'> {}\n\nconst ContainerCommitIcon: React.FC<ContainerCommitIconProps> = (props) => {\n  return <Icon component={logo} {...props} />;\n};\n\nexport default ContainerCommitIcon;\n","var _g;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgSessionLog(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15 12H10\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15 8H10\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 17V5C19 4.46957 18.7893 3.96086 18.4142 3.58579C18.0391 3.21071 17.5304 3 17 3H4\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 21H20C20.5304 21 21.0391 20.7893 21.4142 20.4142C21.7893 20.0391 22 19.5304 22 19V18C22 17.7348 21.8946 17.4804 21.7071 17.2929C21.5196 17.1054 21.2652 17 21 17H11C10.7348 17 10.4804 17.1054 10.2929 17.2929C10.1054 17.4804 10 17.7348 10 18V19C10 19.5304 9.78929 20.0391 9.41421 20.4142C9.03914 20.7893 8.53043 21 8 21ZM8 21C7.46957 21 6.96086 20.7893 6.58579 20.4142C6.21071 20.0391 6 19.5304 6 19V5C6 4.46957 5.78929 3.96086 5.41421 3.58579C5.03914 3.21071 4.53043 3 4 3C3.46957 3 2.96086 3.21071 2.58579 3.58579C2.21071 3.96086 2 4.46957 2 5V7C2 7.26522 2.10536 7.51957 2.29289 7.70711C2.48043 7.89464 2.73478 8 3 8H6\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSessionLog);\nexport default __webpack_public_path__ + \"static/media/SessionLog.9190bd076088966fb7444616e65188c5.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactComponent as logo } from './SessionLog.svg';\nimport Icon from '@ant-design/icons';\nimport { CustomIconComponentProps } from '@ant-design/icons/lib/components/Icon';\n\ninterface SessionLogIconProps\n  extends Omit<CustomIconComponentProps, 'width' | 'height' | 'fill'> {}\n\nconst SessionLogIcon: React.FC<SessionLogIconProps> = (props) => {\n  return <Icon component={logo} {...props} />;\n};\n\nexport default SessionLogIcon;\n","var _path, _path2;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgTerminalApp(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.7639 16.6396H11.9259C11.7133 16.6396 11.541 16.812 11.541 17.0245V19.0089C11.541 19.2215 11.7133 19.3938 11.9259 19.3938H19.7639C19.9765 19.3938 20.1488 19.2215 20.1488 19.0089V17.0245C20.1488 16.812 19.9765 16.6396 19.7639 16.6396Z\",\n    fill: \"currentColor\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.5231 12.122C11.5231 12.122 11.526 12.1161 11.526 12.1132H11.5187C11.5187 12.0035 11.485 11.8937 11.3928 11.8176C11.3928 11.8176 3.52112 5.23958 3.33088 5.08446C3.1421 4.92934 3.04698 4.81666 2.80844 4.87958C2.57576 4.94105 2.586 5.23812 2.586 5.39471C2.586 5.55129 2.58747 7.88982 2.58747 7.88982C2.58747 7.98933 2.63137 8.08299 2.70747 8.14738L7.44014 12.122L2.70747 16.0966C2.63137 16.161 2.58747 16.2547 2.58747 16.3542C2.58747 16.3542 2.586 18.6927 2.586 18.8493C2.586 19.0059 2.57576 19.303 2.80844 19.3644C3.04698 19.4273 3.1421 19.3147 3.33088 19.1595C3.51966 19.0044 11.3928 12.4264 11.3928 12.4264C11.485 12.3488 11.5187 12.2391 11.5187 12.1308H11.526C11.526 12.1308 11.5231 12.1249 11.5231 12.122Z\",\n    fill: \"currentColor\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTerminalApp);\nexport default __webpack_public_path__ + \"static/media/TerminalApp.1634187e51dae2f890ba3fb3046a6c8c.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactComponent as logo } from './TerminalApp.svg';\nimport Icon from '@ant-design/icons';\nimport { CustomIconComponentProps } from '@ant-design/icons/lib/components/Icon';\n\ninterface TerminalAppIconProps\n  extends Omit<CustomIconComponentProps, 'width' | 'height' | 'fill'> {}\n\nconst TerminalAppIcon: React.FC<TerminalAppIconProps> = (props) => {\n  return <Icon component={logo} {...props} />;\n};\n\nexport default TerminalAppIcon;\n","var _path, _path2;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgTerminate(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21.0504 12.8503C21.0595 9.6413 19.3992 6.81833 16.8899 5.20326C16.7783 5.13238 16.6305 5.21231 16.6305 5.3435V6.82285C16.6305 6.92389 16.6742 7.01889 16.7526 7.08223C16.9321 7.23001 17.104 7.38684 17.2684 7.55423C17.9515 8.24037 18.4913 9.0381 18.8653 9.92631C19.2529 10.8432 19.4504 11.8204 19.4504 12.8277C19.4504 13.835 19.2544 14.8122 18.8653 15.7291C18.4913 16.6173 17.9515 17.415 17.2684 18.1012C16.5852 18.7873 15.7875 19.3242 14.9008 19.6997C13.9839 20.0887 13.0098 20.2848 12.0009 20.2848C10.9921 20.2848 10.0194 20.0872 9.10104 19.6997C8.21584 19.3257 7.41811 18.7858 6.73348 18.1012C6.05036 17.415 5.51049 16.6173 5.13651 15.7291C4.74895 14.8107 4.5499 13.8245 4.5514 12.8277C4.5514 11.8204 4.74895 10.8432 5.13651 9.92631C5.51049 9.03961 6.05337 8.23434 6.73348 7.55423C6.89936 7.38835 7.07278 7.23303 7.24921 7.08223C7.32763 7.01889 7.37136 6.92238 7.37136 6.82285V5.3435C7.37136 5.2108 7.22358 5.12937 7.11199 5.20326C4.61021 6.81531 2.95142 9.62622 2.95142 12.8262C2.95142 17.7966 6.95214 21.832 11.9074 21.8832C16.9426 21.9345 21.0353 17.8916 21.0474 12.8503H21.0504Z\",\n    fill: \"currentColor\",\n    stroke: \"currentColor\",\n    strokeWidth: 0.7,\n    strokeMiterlimit: 10\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.6253 1.88867H11.3797C11.2465 1.88867 11.1384 1.9967 11.1384 2.12995V11.1599C11.1384 11.2931 11.2465 11.4011 11.3797 11.4011H12.6253C12.7586 11.4011 12.8666 11.2931 12.8666 11.1599V2.12995C12.8666 1.9967 12.7586 1.88867 12.6253 1.88867Z\",\n    fill: \"currentColor\",\n    stroke: \"currentColor\",\n    strokeWidth: 0.7,\n    strokeMiterlimit: 10\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTerminate);\nexport default __webpack_public_path__ + \"static/media/Terminate.5b6752a842ac03774f0c82b6677c4baa.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactComponent as logo } from './Terminate.svg';\nimport Icon from '@ant-design/icons';\nimport { CustomIconComponentProps } from '@ant-design/icons/lib/components/Icon';\n\ninterface TerminateIconProps\n  extends Omit<CustomIconComponentProps, 'width' | 'height' | 'fill'> {}\n\nconst TerminateIcon: React.FC<TerminateIconProps> = (props) => {\n  return <Icon component={logo} {...props} />;\n};\n\nexport default TerminateIcon;\n","import { useSuspendedBackendaiClient } from '../../hooks';\nimport { useSetBAINotification } from '../../hooks/useBAINotification';\nimport BAIModal, { BAIModalProps } from '../BAIModal';\nimport Flex from '../Flex';\nimport { ContainerCommitModalFragment$key } from './__generated__/ContainerCommitModalFragment.graphql';\nimport {\n  Descriptions,\n  Divider,\n  Form,\n  FormInstance,\n  Input,\n  Typography,\n} from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface ContainerCommitModalProps extends BAIModalProps {\n  sessionFrgmt: ContainerCommitModalFragment$key | null;\n  onRequestClose: () => void;\n}\n\nconst ContainerCommitModal: React.FC<ContainerCommitModalProps> = ({\n  sessionFrgmt,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const formRef = useRef<FormInstance>(null);\n  const baiClient = useSuspendedBackendaiClient();\n\n  const { upsertNotification } = useSetBAINotification();\n  const [isConfirmLoading, setIsConfirmLoading] = useState<boolean>(false);\n\n  const session = useFragment(\n    graphql`\n      fragment ContainerCommitModalFragment on ComputeSessionNode {\n        id\n        name\n        row_id @required(action: NONE)\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const convertSessionToImage = () => {\n    setIsConfirmLoading(true);\n    formRef?.current\n      ?.validateFields()\n      .then((values: { imageName: string }) => {\n        baiClient.computeSession\n          .convertSessionToImage(session?.name ?? '', values.imageName)\n          .then((res: { task_id: string }) => {\n            onRequestClose();\n            upsertNotification({\n              key: 'commitSession:' + session?.name,\n              backgroundTask: {\n                taskId: res.task_id,\n                status: 'pending',\n                onChange: {\n                  pending: t('session.CommitOnGoing'),\n                  resolved: t('session.CommitFinished'),\n                  rejected: t('session.CommitFailed'),\n                },\n              },\n              duration: 0,\n              message: 'commitSession: ' + session?.name,\n              open: true,\n            });\n          })\n          .catch((err: any) => {\n            if (err?.message) {\n              throw new Error(err.message);\n            } else {\n              throw err;\n            }\n          })\n          .finally(() => {\n            setIsConfirmLoading(false);\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <BAIModal\n      title={t('session.CommitSession')}\n      onOk={() => convertSessionToImage()}\n      okButtonProps={{ loading: isConfirmLoading }}\n      onCancel={onRequestClose}\n      {...modalProps}\n      destroyOnClose\n    >\n      <Flex\n        direction=\"column\"\n        gap={'xs'}\n        align=\"stretch\"\n        style={{ overflow: 'hidden' }}\n      >\n        <Typography.Text>{t('session.DescCommitSession')}</Typography.Text>\n        <Descriptions bordered size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.SessionName')}>\n            {session?.name}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.SessionId')}>\n            {session?.row_id}\n          </Descriptions.Item>\n          {/* FIXME: need to use legacy_session */}\n          {/* <Descriptions.Item label={t('session.launcher.Environments')}>\n          </Descriptions.Item>  */}\n        </Descriptions>\n        <Divider style={{ marginTop: 12, marginBottom: 12 }} />\n        <Form ref={formRef}>\n          <Form.Item\n            label={t('session.CommitImageName')}\n            name=\"imageName\"\n            required\n            rules={[\n              { required: true },\n              {\n                min: 4,\n                max: 32,\n              },\n              {\n                pattern: /^[a-zA-Z0-9-_.]+$/,\n                message: t('session.Validation.EnterValidSessionName'),\n              },\n            ]}\n          >\n            <Input placeholder={t('inputLimit.4to32chars')} />\n          </Form.Item>\n        </Form>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default ContainerCommitModal;\n","import { useSuspendedBackendaiClient } from '../../hooks';\nimport { useBackendAIAppLauncher } from '../../hooks/useBackendAIAppLauncher';\nimport ContainerCommitIcon from '../BAIIcons/ContainerCommitIcon';\nimport SessionLogIcon from '../BAIIcons/SessionLogIcon';\nimport TerminalAppIcon from '../BAIIcons/TerminalAppIcon';\nimport TerminateIcon from '../BAIIcons/TerminateIcon';\nimport ContainerCommitModal from './ContainerCommitModal';\nimport ContainerLogModal from './ContainerLogModal';\nimport TerminateSessionModal from './TerminateSessionModal';\nimport {\n  SessionActionButtonsFragment$data,\n  SessionActionButtonsFragment$key,\n} from './__generated__/SessionActionButtonsFragment.graphql';\nimport { Tooltip, Button, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface SessionActionButtonsProps {\n  sessionFrgmt: SessionActionButtonsFragment$key | null;\n}\n// const isRunning = (session:SessionActionButtonsFragment$data) => {\n//   return [\n//     'batch',\n//     'interactive',\n//     'inference',\n//     'system',\n//     'running',\n//     'others',\n//   ].includes(session);\n// }\n\nconst isActive = (session: SessionActionButtonsFragment$data) => {\n  return !['TERMINATED', 'CANCELLED'].includes(session?.status || '');\n};\n// const isTransitional = (session: SessionActionButtonsFragment$data) => {\n//   return [\n//     'RESTARTING',\n//     'TERMINATING',\n//     'PENDING',\n//     'PREPARING',\n//     'CREATING',\n//     'PULLING',\n//   ].includes(session?.status || '');\n// };\n\nconst SessionActionButtons: React.FC<SessionActionButtonsProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const appLauncher = useBackendAIAppLauncher();\n  const baiClient = useSuspendedBackendaiClient();\n\n  const session = useFragment(\n    graphql`\n      fragment SessionActionButtonsFragment on ComputeSessionNode {\n        id\n        row_id @required(action: NONE)\n        type\n        status\n        access_key\n        service_ports\n        commit_status\n        ...TerminateSessionModalFragment\n        ...ContainerLogModalFragment\n        ...ContainerCommitModalFragment\n      }\n    `,\n    props.sessionFrgmt,\n  );\n  const [openTerminateModal, setOpenTerminateModal] = useState(false);\n  const [openLogModal, setOpenLogModal] = useState(false);\n  const [openContainerCommitModal, setOpenContainerCommitModal] =\n    useState(false);\n\n  // const isDisabledTermination = !['PENDING'].includes(session?.status || '') && session?.commit_status === 'ongoing'\n  // ${(this._isRunning && !this._isPreparing(rowData.item.status)) ||\n  //   this._isError(rowData.item.status)\n  return (\n    session && (\n      <>\n        {/* <Tooltip title={t('session.SeeAppDialog')}>\n        <Button icon={<LayoutGridIcon />} onClick={()=>{\n          appLauncher.showLauncher({\n            \"access-key\": session?.access_key || '',\n            \"service-ports\": session?.service_ports || '',\n          })\n        }} />\n      </Tooltip> */}\n        <Tooltip title={t('session.ExecuteTerminalApp')}>\n          <Button\n            disabled={!isActive(session)}\n            icon={<TerminalAppIcon />}\n            onClick={() => {\n              appLauncher.runTerminal(session?.row_id);\n            }}\n          />\n        </Tooltip>\n        {/* Don't put this modal to end of the return array(<></>). */}\n        <TerminateSessionModal\n          sessionFrgmts={[session]}\n          open={openTerminateModal}\n          onRequestClose={() => {\n            setOpenTerminateModal(false);\n          }}\n        />\n\n        <Tooltip title={t('session.SeeContainerLogs')}>\n          <Button\n            icon={<SessionLogIcon />}\n            onClick={() => {\n              setOpenLogModal(true);\n            }}\n          />\n        </Tooltip>\n        <ContainerLogModal\n          sessionFrgmt={session}\n          open={openLogModal}\n          onCancel={() => {\n            setOpenLogModal(false);\n          }}\n        />\n        <Tooltip title={t('session.RequestContainerCommit')}>\n          <Button\n            disabled={\n              (!baiClient.supports('image-commit') ||\n                !baiClient._config.enableContainerCommit) &&\n              session.type !== 'system'\n            }\n            icon={<ContainerCommitIcon />}\n            onClick={() => {\n              setOpenContainerCommitModal(true);\n            }}\n          />\n        </Tooltip>\n        <ContainerCommitModal\n          sessionFrgmt={session}\n          open={openContainerCommitModal}\n          onRequestClose={() => setOpenContainerCommitModal(false)}\n        />\n        <Tooltip title={t('session.TerminateSession')}>\n          <Button\n            disabled={!isActive(session)}\n            icon={\n              <TerminateIcon\n                style={{\n                  color: isActive(session) ? token.colorError : undefined,\n                }}\n              />\n            }\n            onClick={() => {\n              setOpenTerminateModal(true);\n            }}\n          />\n        </Tooltip>\n      </>\n    )\n  );\n};\n\nexport default SessionActionButtons;\n","export const useBackendAIAppLauncher = () => {\n  // This is not use any React hooks, so it's not a React hook.\n  // But keep it here for the future refactoring.\n\n  // @ts-ignore\n  return {\n    runTerminal: (sessionId: string) => {\n      // @ts-ignore\n      globalThis.appLauncher.runTerminal(sessionId);\n    },\n    showLauncher: (params: {\n      'session-uuid'?: string;\n      'access-key'?: string;\n      'app-services'?: string;\n      mode?: string;\n      'app-services-option'?: string;\n      'service-ports'?: string;\n      runtime?: string;\n      filename?: string;\n      arguments?: string;\n    }) => {},\n  };\n};\n","import {\n  formatDurationAsDays,\n  toFixedFloorWithoutTrailingZeros,\n} from '../../helper';\nimport { useResourceSlotsDetails } from '../../hooks/backendai';\nimport DoubleTag from '../DoubleTag';\nimport Flex from '../Flex';\nimport { SessionIdleChecksFragment$key } from './__generated__/SessionIdleChecksFragment.graphql';\nimport { SessionIdleChecksNodeFragment$key } from './__generated__/SessionIdleChecksNodeFragment.graphql';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { Tooltip, Typography, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ntype BaseExtra = null;\ntype UtilizationExtra = {\n  resources: {\n    cpu_util: number[];\n    mem: number[];\n    cuda_util: number[];\n    cuda_mem: number[];\n    ipu_util: number[];\n    ipu_mem: number[];\n  };\n  thresholds_check_operator: 'and' | 'or';\n};\nexport type IdleCheckItem = {\n  extra: BaseExtra | UtilizationExtra;\n  remaining: number | null;\n  remaining_time_type: 'expire_after' | 'grace_period';\n};\nexport type IdleChecks = {\n  network_timeout?: IdleCheckItem;\n  session_lifetime?: IdleCheckItem;\n  utilization?: IdleCheckItem;\n};\n\ninterface SessionIdleChecksProps {\n  sessionNodeFrgmt?: SessionIdleChecksNodeFragment$key | null;\n  sessionFrgmt?: SessionIdleChecksFragment$key | null;\n  direction?: 'row' | 'column';\n}\n\nexport function getUtilizationCheckerColor(\n  resources: Record<string, number[]> | number[],\n  thresholds_check_operator: 'and' | 'or' | null = null,\n) {\n  // Determine color based on single device utilization.\n  // resources: [number, number]\n  if (!thresholds_check_operator) {\n    const [utilization, threshold] = resources as number[];\n    if (utilization < threshold * 2) {\n      return 'red';\n    } else if (utilization < threshold * 10) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  }\n  // Determine color based on multiple device utilization.\n  // resources: Record<string, [number, number]>\n  let color: string | undefined = undefined;\n  if (thresholds_check_operator === 'and') {\n    _.every(resources, ([utilization, threshold]: number[]) => {\n      if (utilization < Math.min(threshold * 2, threshold + 5)) {\n        color = 'red';\n        return true;\n      } else if (utilization < Math.min(threshold * 10, threshold + 10)) {\n        color = 'orange';\n        return true;\n      } else {\n        color = 'green';\n        return true;\n      }\n    });\n  }\n\n  if (thresholds_check_operator === 'or') {\n    _.some(resources, ([utilization, threshold]: number[]) => {\n      if (utilization < Math.min(threshold * 2, threshold + 5)) {\n        color = 'red';\n        return true;\n      } else if (utilization < Math.min(threshold * 10, threshold + 10)) {\n        color = 'orange';\n        return true;\n      } else {\n        color = 'green';\n        return true;\n      }\n    });\n  }\n\n  return color;\n}\n\nexport function getIdleChecksTagColor(\n  result: IdleCheckItem,\n  criteria: 'remaining' | 'utilization',\n) {\n  // Determine color based on remaining time.\n  if (criteria === 'remaining') {\n    if (!result.remaining || result.remaining < 3600) {\n      return 'red';\n    } else if (result.remaining < 3600 * 4) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  }\n\n  // Determine color based on utilization.\n  if (result.extra && (!result.remaining || result.remaining < 3600 * 4)) {\n    return getUtilizationCheckerColor(\n      result.extra.resources,\n      result.extra.thresholds_check_operator,\n    );\n  }\n\n  return undefined;\n}\n\nconst SessionIdleChecks: React.FC<SessionIdleChecksProps> = ({\n  sessionNodeFrgmt = null,\n  sessionFrgmt = null,\n  direction = 'row',\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n\n  const sessionNode = useFragment(\n    graphql`\n      fragment SessionIdleChecksNodeFragment on ComputeSessionNode {\n        id\n        idle_checks @since(version: \"24.12.0\")\n      }\n    `,\n    sessionNodeFrgmt,\n  );\n  const session = useFragment(\n    graphql`\n      fragment SessionIdleChecksFragment on ComputeSession {\n        id\n        idle_checks @since(version: \"24.09.0\")\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const idleChecks: IdleChecks = JSON.parse(\n    sessionNode?.idle_checks || session?.idle_checks || '{}',\n  );\n\n  const getIdleCheckTitle = (key: keyof IdleChecks) => {\n    if (key === 'network_timeout') return t('session.NetworkIdleTimeout');\n    else if (key === 'session_lifetime') return t('session.MaxSessionLifetime');\n    else return t('session.UtilizationIdleTimeout');\n  };\n\n  const getRemainingTimeTypeLabel = (Type: 'expire_after' | 'grace_period') => {\n    if (Type === 'expire_after') {\n      return t('session.ExpiresAfter');\n    } else {\n      return t('session.GracePeriod');\n    }\n  };\n\n  return (\n    <Flex direction={direction} align=\"stretch\" gap=\"sm\">\n      {_.map(idleChecks, (value: IdleCheckItem, key: keyof IdleChecks) => {\n        if (!value.remaining) return null;\n\n        return (\n          <Flex\n            key={key}\n            style={{ flex: 1 }}\n            direction=\"column\"\n            align=\"stretch\"\n          >\n            <Flex gap={'xxs'}>\n              <Typography.Text>{getIdleCheckTitle(key)}</Typography.Text>\n              {key === 'utilization' && (\n                <Tooltip\n                  title={\n                    <>\n                      {`${t('session.Utilization')} / ${t('session.Threshold')} (%)`}\n                      <br />\n                      {_.map(value.extra?.resources, (resource, key) => {\n                        const deviceName = ['cpu_util', 'mem'].includes(key)\n                          ? _.split(key, '_')[0]\n                          : _.split(key, '_')[0] + '.device';\n                        const [utilization, threshold] = resource;\n                        return (\n                          <Flex key={key} gap={'xs'}>\n                            <Typography.Text\n                              style={{ color: token.colorWhite }}\n                            >{`${mergedResourceSlots?.[deviceName]?.human_readable_name}:`}</Typography.Text>\n                            <Typography.Text\n                              style={{\n                                color: getUtilizationCheckerColor(resource),\n                              }}\n                            >\n                              {`${utilization >= 0 ? toFixedFloorWithoutTrailingZeros(utilization, 1) : '-'} / ${threshold}`}\n                            </Typography.Text>\n                            <br />\n                          </Flex>\n                        );\n                      })}\n                    </>\n                  }\n                >\n                  <QuestionCircleOutlined\n                    style={{\n                      color: token.colorTextSecondary,\n                      cursor: 'pointer',\n                    }}\n                  />\n                </Tooltip>\n              )}\n            </Flex>\n\n            {value.remaining >= 0 ? (\n              // TODO: support real-time update by using useIntervalValue when idle_checks returns remaining time as date\n              <DoubleTag\n                values={[\n                  {\n                    label: getRemainingTimeTypeLabel(value.remaining_time_type),\n                    color: getIdleChecksTagColor(\n                      value,\n                      key === 'utilization' ? 'utilization' : 'remaining',\n                    ),\n                  },\n                  {\n                    label: formatDurationAsDays(\n                      new Date().toISOString(),\n                      new Date(\n                        new Date().getTime() + (value.remaining || 0) * 1000,\n                      ).toISOString(),\n                    ),\n                    color: getIdleChecksTagColor(\n                      value,\n                      key === 'utilization' ? 'utilization' : 'remaining',\n                    ),\n                  },\n                ]}\n              />\n            ) : (\n              <Typography.Text type=\"danger\">\n                {t('session.TimeoutExceeded')}\n              </Typography.Text>\n            )}\n          </Flex>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default SessionIdleChecks;\n","import { SessionTypeTagFragment$key } from './__generated__/SessionTypeTagFragment.graphql';\nimport { Tag } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst typeTagColor = {\n  INTERACTIVE: 'green',\n  BATCH: 'darkgreen',\n  INFERENCE: 'blue',\n};\n\ninterface SessionTypeTagProps {\n  sessionFrgmt: SessionTypeTagFragment$key;\n}\n\nconst SessionTypeTag: React.FC<SessionTypeTagProps> = ({ sessionFrgmt }) => {\n  const session = useFragment(\n    graphql`\n      fragment SessionTypeTagFragment on ComputeSessionNode {\n        type\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  return (\n    <Tag color={_.get(typeTagColor, _.toUpper(session.type || ''))}>\n      {_.toUpper(session.type || '')}\n    </Tag>\n  );\n};\n\nexport default SessionTypeTag;\n","import BAIModal from './BAIModal';\nimport Flex from './Flex';\nimport { ModalProps, Typography, theme } from 'antd';\nimport { useTranslation } from 'react-i18next';\n\ninterface IdleCheckDescriptionModalProps extends ModalProps {}\n\nconst IdleCheckDescriptionModal: React.FC<IdleCheckDescriptionModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  return (\n    <BAIModal\n      title={t('session.IdleChecks')}\n      footer={null}\n      width={700}\n      {...modalProps}\n    >\n      <Typography.Text>{t('session.IdleChecksDesc')}</Typography.Text>\n\n      <Typography.Title level={5}>\n        {t('session.MaxSessionLifetime')}\n      </Typography.Title>\n      <p>{t('session.MaxSessionLifetimeDesc')}</p>\n\n      <Typography.Title level={5}>\n        {t('session.NetworkIdleTimeout')}\n      </Typography.Title>\n      <p>{t('session.NetworkIdleTimeoutDesc')}</p>\n\n      <Typography.Title level={5}>\n        {t('session.UtilizationIdleTimeout')}\n      </Typography.Title>\n      <p>{t('session.UtilizationIdleTimeoutDesc')}</p>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{ marginLeft: token.marginMD }}\n      >\n        <Typography.Title level={5} style={{ margin: 0 }}>\n          {t('session.GracePeriod')}\n        </Typography.Title>\n        <p>{t('session.GracePeriodDesc')}</p>\n        <Typography.Title level={5} style={{ margin: 0 }}>\n          {t('session.UtilizationThreshold')}\n        </Typography.Title>\n        <p>{t('session.UtilizationThresholdDesc')}</p>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default IdleCheckDescriptionModal;\n","import SessionKernelTags from '../components/ImageTags';\nimport { toGlobalId } from '../helper';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { ResourceNumbersOfSession } from '../pages/SessionLauncherPage';\nimport ConnectedKernelList from './ComputeSessionNodeItems/ConnectedKernelList';\nimport EditableSessionName from './ComputeSessionNodeItems/EditableSessionName';\nimport SessionActionButtons from './ComputeSessionNodeItems/SessionActionButtons';\nimport SessionIdleChecks, {\n  IdleChecks,\n} from './ComputeSessionNodeItems/SessionIdleChecks';\nimport SessionReservation from './ComputeSessionNodeItems/SessionReservation';\nimport SessionStatusTag from './ComputeSessionNodeItems/SessionStatusTag';\nimport SessionTypeTag from './ComputeSessionNodeItems/SessionTypeTag';\nimport Flex from './Flex';\nimport { useFolderExplorerOpener } from './FolderExplorerOpener';\nimport IdleCheckDescriptionModal from './IdleCheckDescriptionModal';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport SessionUsageMonitor from './SessionUsageMonitor';\nimport { SessionDetailContentLegacyQuery } from './__generated__/SessionDetailContentLegacyQuery.graphql';\nimport { SessionDetailContentQuery } from './__generated__/SessionDetailContentQuery.graphql';\nimport { FolderOutlined } from '@ant-design/icons';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Descriptions,\n  Grid,\n  Skeleton,\n  Tag,\n  theme,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport Title from 'antd/es/typography/Title';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nconst SessionDetailContent: React.FC<{\n  id: string;\n  fetchKey?: string;\n}> = ({ id, fetchKey }) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { md } = Grid.useBreakpoint();\n  const { open } = useFolderExplorerOpener();\n  const currentProject = useCurrentProjectValue();\n  const userRole = useCurrentUserRole();\n  const baiClient = useSuspendedBackendaiClient();\n  const [openIdleCheckDescriptionModal, setOpenIdleCheckDescriptionModal] =\n    useState<boolean>(false);\n\n  // TODO: remove and refactor this waterfall request after v24.12.0\n  // get the project id of the session for <= v24.12.0.\n  const { session_for_project_id } =\n    useLazyLoadQuery<SessionDetailContentLegacyQuery>(\n      graphql`\n        query SessionDetailContentLegacyQuery($uuid: UUID!) {\n          session_for_project_id: compute_session(id: $uuid) {\n            group_id\n          }\n        }\n      `,\n      {\n        uuid: id,\n      },\n      {\n        fetchPolicy: 'network-only',\n      },\n    );\n  const { session, legacy_session } =\n    useLazyLoadQuery<SessionDetailContentQuery>(\n      //  In compute_session_node, there are missing fields. We need to use `compute_session` to get the missing fields.\n      graphql`\n        query SessionDetailContentQuery(\n          $id: GlobalIDField!\n          $uuid: UUID!\n          $project_id: UUID!\n        ) {\n          session: compute_session_node(id: $id, project_id: $project_id) {\n            id\n            row_id\n            name\n            project_id\n            user_id\n            resource_opts\n            status\n            vfolder_mounts\n            created_at @required(action: NONE)\n            terminated_at\n            scaling_group\n            agent_ids\n            requested_slots\n            idle_checks @since(version: \"24.12.0\")\n\n            ...SessionStatusTagFragment\n            ...SessionActionButtonsFragment\n            ...SessionTypeTagFragment\n            ...EditableSessionNameFragment\n            ...SessionReservationFragment\n            # fix: This fragment is not used in this component, but it is required by the SessionActionButtonsFragment.\n            # It might be a bug in relay\n            ...ContainerLogModalFragment\n            ...SessionUsageMonitorFragment\n            ...ContainerCommitModalFragment\n            ...SessionIdleChecksNodeFragment\n          }\n          legacy_session: compute_session(id: $uuid) {\n            image\n            mounts\n            user_email\n            architecture\n            idle_checks @since(version: \"24.09.0\")\n            ...SessionIdleChecksFragment\n          }\n        }\n      `,\n      {\n        id: toGlobalId('ComputeSessionNode', id),\n        uuid: id,\n        project_id: session_for_project_id?.group_id || currentProject.id,\n      },\n      {\n        fetchPolicy: 'network-only',\n        fetchKey: fetchKey,\n      },\n    );\n\n  const imageFullName =\n    legacy_session?.image &&\n    legacy_session?.architecture &&\n    legacy_session.image + '@' + legacy_session.architecture;\n\n  const idleChecks: IdleChecks = JSON.parse(\n    session?.idle_checks || legacy_session?.idle_checks || '{}',\n  );\n  const imminentExpirationTime = _.min(\n    _.values(idleChecks)\n      .map((check) => check.remaining)\n      .filter(Boolean),\n  );\n  const showKernelList = baiClient._config.showKernelList;\n\n  return session ? (\n    <Flex direction=\"column\" gap={'lg'} align=\"stretch\">\n      {session_for_project_id?.group_id !== currentProject.id && (\n        <Alert message={t('session.NotInProject')} type=\"warning\" showIcon />\n      )}\n      {imminentExpirationTime && imminentExpirationTime < 3600 && (\n        <Alert\n          message={t('session.IdleCheckExpirationWarning')}\n          type=\"warning\"\n          showIcon\n        />\n      )}\n      <Flex direction=\"column\" gap={'sm'} align=\"stretch\">\n        <Flex\n          direction=\"row\"\n          justify=\"between\"\n          align=\"start\"\n          style={{\n            alignSelf: 'stretch',\n          }}\n          gap={'sm'}\n        >\n          <EditableSessionName\n            sessionFrgmt={session}\n            component={Title}\n            level={3}\n            style={{\n              margin: 0,\n              color: ['TERMINATED', 'CANCELLED'].includes(session.status || '')\n                ? token.colorTextTertiary\n                : undefined,\n            }}\n            editable={\n              !['TERMINATED', 'CANCELLED'].includes(session.status || '')\n            }\n          />\n          <Button.Group size=\"large\">\n            <SessionActionButtons sessionFrgmt={session} />\n          </Button.Group>\n        </Flex>\n\n        <Descriptions bordered column={md ? 2 : 1}>\n          <Descriptions.Item label={t('session.SessionId')} span={md ? 2 : 1}>\n            <Typography.Text\n              ellipsis\n              copyable\n              style={{ fontFamily: 'monospace' }}\n            >\n              {session.row_id}\n            </Typography.Text>\n          </Descriptions.Item>\n          {(userRole === 'admin' || userRole === 'superadmin') && (\n            <Descriptions.Item label={t('credential.UserID')} span={md ? 2 : 1}>\n              {legacy_session?.user_email}\n            </Descriptions.Item>\n          )}\n          <Descriptions.Item\n            label={t('session.Status')}\n            contentStyle={{ display: 'flex', gap: token.marginSM }}\n          >\n            <SessionStatusTag sessionFrgmt={session} showInfo />\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.SessionType')}>\n            <SessionTypeTag sessionFrgmt={session} />\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.Environments')}>\n            {imageFullName ? (\n              <Flex gap={['xs', 0]} wrap=\"wrap\">\n                <ImageMetaIcon\n                  image={imageFullName}\n                  style={{ marginRight: token.marginXS }}\n                />\n                <SessionKernelTags image={imageFullName} />\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.MountedFolders')}>\n            {baiClient.supports('vfolder-mounts')\n              ? _.map(\n                  _.zip(legacy_session?.mounts, session?.vfolder_mounts),\n                  (mountInfo) => {\n                    const [name, id] = mountInfo;\n                    return (\n                      <Button\n                        key={id}\n                        type=\"link\"\n                        size=\"small\"\n                        icon={<FolderOutlined />}\n                        onClick={() => {\n                          open(id ?? '');\n                        }}\n                      >\n                        {name}\n                      </Button>\n                    );\n                  },\n                )\n              : legacy_session?.mounts?.join(', ')}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.ResourceAllocation')}>\n            <Flex gap={'sm'} wrap=\"wrap\">\n              <Tooltip title={t('session.ResourceGroup')}>\n                <Tag>{session.scaling_group}</Tag>\n              </Tooltip>\n              <ResourceNumbersOfSession\n                resource={JSON.parse(session.requested_slots || '{}')}\n              />\n            </Flex>\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.Agent')}>\n            {session.agent_ids || '-'}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.Reservation')} span={md ? 2 : 1}>\n            <Flex gap={'xs'} wrap={'wrap'}>\n              <SessionReservation sessionFrgmt={session} />\n            </Flex>\n          </Descriptions.Item>\n          {baiClient.supports('idle-checks-gql') &&\n          session.status === 'RUNNING' &&\n          imminentExpirationTime ? (\n            <Descriptions.Item\n              label={\n                <Flex gap=\"xxs\">\n                  {t('session.IdleChecks')}\n                  <Tooltip title={t('button.ClickForMoreDetails')}>\n                    <InfoCircleOutlined\n                      style={{ cursor: 'pointer' }}\n                      onClick={() => setOpenIdleCheckDescriptionModal(true)}\n                    />\n                  </Tooltip>\n                </Flex>\n              }\n              span={md ? 2 : 1}\n            >\n              <SessionIdleChecks\n                sessionNodeFrgmt={session}\n                sessionFrgmt={legacy_session}\n                direction={md ? 'row' : 'column'}\n              />\n            </Descriptions.Item>\n          ) : null}\n          <Descriptions.Item label={'Resource Usage'} span={md ? 2 : 1}>\n            <SessionUsageMonitor sessionFrgmt={session} />\n          </Descriptions.Item>\n        </Descriptions>\n      </Flex>\n      {showKernelList ? (\n        <Suspense fallback={<Skeleton />}>\n          <Flex direction=\"column\" gap={'sm'} align=\"stretch\">\n            <Typography.Title level={4} style={{ margin: 0 }}>\n              {t('kernel.Kernels')}\n            </Typography.Title>\n            <ConnectedKernelList id={id} fetchKey={fetchKey} />\n          </Flex>\n        </Suspense>\n      ) : null}\n      <IdleCheckDescriptionModal\n        open={openIdleCheckDescriptionModal}\n        onCancel={() => setOpenIdleCheckDescriptionModal(false)}\n      />\n    </Flex>\n  ) : (\n    <Alert\n      showIcon\n      message={t('session.SessionNotFound')}\n      type=\"error\"\n      description={id}\n    ></Alert>\n  );\n};\n\nexport default SessionDetailContent;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useInterval } from '../hooks/useIntervalValue';\nimport SessionDetailContent from './SessionDetailContent';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { Button, Drawer, Skeleton, Tooltip } from 'antd';\nimport { DrawerProps } from 'antd/lib';\nimport React, { Suspense, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\n\n// import { StringParam, useQueryParam } from 'use-query-params';\n\ninterface SessionDetailDrawerProps extends DrawerProps {\n  sessionId?: string;\n}\nconst SessionDetailDrawer: React.FC<SessionDetailDrawerProps> = ({\n  sessionId,\n  ...drawerProps\n}) => {\n  const { t } = useTranslation();\n  // const [sessionId, setSessionId] = useQueryParam('sessionDetail', StringParam);\n  useSuspendedBackendaiClient();\n\n  const [isPendingReload, startReloadTransition] = useTransition();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n\n  useInterval(() => {\n    startReloadTransition(() => {\n      updateFetchKey();\n    });\n  }, 7_000);\n  return (\n    <Drawer\n      title={t('session.SessionInfo')}\n      width={800}\n      keyboard={false}\n      {...drawerProps}\n      open={!!sessionId}\n      onClose={(e) => {\n        drawerProps.onClose?.(e);\n        // setSessionId(null, 'pushIn');\n      }}\n      extra={\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingReload}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startReloadTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n      }\n    >\n      <Suspense fallback={<Skeleton />}>\n        {sessionId && (\n          <SessionDetailContent id={sessionId} fetchKey={fetchKey} />\n        )}\n      </Suspense>\n    </Drawer>\n  );\n};\n\nexport default SessionDetailDrawer;\n","import { BAIModalProps } from './BAIModal';\nimport { ModalProps } from 'antd';\nimport React, { useState, useLayoutEffect } from 'react';\n\ninterface UnmountModalAfterCloseProps {\n  children: React.ReactElement<BAIModalProps> | React.ReactElement<ModalProps>;\n}\n\nconst UnmountModalAfterClose: React.FC<UnmountModalAfterCloseProps> = ({\n  children,\n}) => {\n  // Ensure there is only one child element\n  const modalElement = React.Children.only(children);\n  const isModalOpen = modalElement.props.open;\n\n  // Manage internal rendering state\n  const [isMount, setIsMount] = useState(isModalOpen);\n\n  // Update internal state when the child's open prop becomes true\n  useLayoutEffect(() => {\n    if (isModalOpen) {\n      setIsMount(true);\n    }\n  }, [isModalOpen]);\n\n  // Return null if the modal should not be rendered\n  if (!isMount) {\n    return null;\n  }\n\n  // Preserve the original afterClose callback if it exists\n  const originalAfterClose = modalElement.props.afterClose;\n\n  // New handler to intercept afterClose\n  const handleModalAfterClose: ModalProps['afterClose'] = (...args) => {\n    if (originalAfterClose) {\n      originalAfterClose(...args);\n    }\n    // Set internal state to false after the exit animation completes\n    setIsMount(false);\n  };\n\n  // Clone the child element, keeping the open prop and replacing afterClose with the new handler\n  const clonedChild = React.cloneElement(modalElement, {\n    afterClose: handleModalAfterClose,\n  });\n\n  return clonedChild;\n};\n\nexport default UnmountModalAfterClose;\n","/**\n * @generated SignedSource<<7704b96e01528e85cdc0f1230b0069c0>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionDetailContentLegacyQuery$variables = {\n  uuid: string;\n};\nexport type SessionDetailContentLegacyQuery$data = {\n  readonly session_for_project_id: {\n    readonly group_id: string | null | undefined;\n  } | null | undefined;\n};\nexport type SessionDetailContentLegacyQuery = {\n  response: SessionDetailContentLegacyQuery$data;\n  variables: SessionDetailContentLegacyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"uuid\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"group_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"1c0255a2836eb7e492954c7ab0212c7f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionDetailContentLegacyQuery(\\n  $uuid: UUID!\\n) {\\n  session_for_project_id: compute_session(id: $uuid) {\\n    group_id\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d6a0dfbccdec8393f1a058dab48a0757\";\n\nexport default node;\n","/**\n * @generated SignedSource<<41a285d5f7be0e497210033aeec0affe>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionDetailContentQuery$variables = {\n  id: any;\n  project_id: string;\n  uuid: string;\n};\nexport type SessionDetailContentQuery$data = {\n  readonly legacy_session: {\n    readonly architecture: string | null | undefined;\n    readonly idle_checks: string | null | undefined;\n    readonly image: string | null | undefined;\n    readonly mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly user_email: string | null | undefined;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"SessionIdleChecksFragment\">;\n  } | null | undefined;\n  readonly session: {\n    readonly agent_ids: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly created_at: string;\n    readonly id: string;\n    readonly idle_checks: string | null | undefined;\n    readonly name: string | null | undefined;\n    readonly project_id: string | null | undefined;\n    readonly requested_slots: string | null | undefined;\n    readonly resource_opts: string | null | undefined;\n    readonly row_id: string | null | undefined;\n    readonly scaling_group: string | null | undefined;\n    readonly status: string | null | undefined;\n    readonly terminated_at: string | null | undefined;\n    readonly user_id: string | null | undefined;\n    readonly vfolder_mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerCommitModalFragment\" | \"ContainerLogModalFragment\" | \"EditableSessionNameFragment\" | \"SessionActionButtonsFragment\" | \"SessionIdleChecksNodeFragment\" | \"SessionReservationFragment\" | \"SessionStatusTagFragment\" | \"SessionTypeTagFragment\" | \"SessionUsageMonitorFragment\">;\n  } | null | undefined;\n};\nexport type SessionDetailContentQuery = {\n  response: SessionDetailContentQuery$data;\n  variables: SessionDetailContentQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"id\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"project_id\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"uuid\"\n},\nv3 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"id\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"project_id\",\n    \"variableName\": \"project_id\"\n  }\n],\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"project_id\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"user_id\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"resource_opts\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"vfolder_mounts\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"created_at\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"terminated_at\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"scaling_group\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"agent_ids\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"requested_slots\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"idle_checks\",\n  \"storageKey\": null\n},\nv18 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mounts\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"user_email\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionDetailContentQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          (v5/*: any*/),\n          (v6/*: any*/),\n          (v7/*: any*/),\n          (v8/*: any*/),\n          (v9/*: any*/),\n          (v10/*: any*/),\n          (v11/*: any*/),\n          {\n            \"kind\": \"RequiredField\",\n            \"field\": (v12/*: any*/),\n            \"action\": \"NONE\",\n            \"path\": \"session.created_at\"\n          },\n          (v13/*: any*/),\n          (v14/*: any*/),\n          (v15/*: any*/),\n          (v16/*: any*/),\n          (v17/*: any*/),\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionStatusTagFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionActionButtonsFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionTypeTagFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"EditableSessionNameFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionReservationFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ContainerLogModalFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionUsageMonitorFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ContainerCommitModalFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionIdleChecksNodeFragment\"\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v18/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v19/*: any*/),\n          (v20/*: any*/),\n          (v21/*: any*/),\n          (v22/*: any*/),\n          (v17/*: any*/),\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionIdleChecksFragment\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v2/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"SessionDetailContentQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          (v5/*: any*/),\n          (v6/*: any*/),\n          (v7/*: any*/),\n          (v8/*: any*/),\n          (v9/*: any*/),\n          (v10/*: any*/),\n          (v11/*: any*/),\n          (v12/*: any*/),\n          (v13/*: any*/),\n          (v14/*: any*/),\n          (v15/*: any*/),\n          (v16/*: any*/),\n          (v17/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"status_info\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"type\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"access_key\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"service_ports\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"commit_status\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"KernelConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"kernel_nodes\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"KernelEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"container_id\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"agent_id\",\n                        \"storageKey\": null\n                      },\n                      (v4/*: any*/),\n                      (v5/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_idx\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_role\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"live_stat\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"occupied_slots\",\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"priority\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"starts_at\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v18/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v19/*: any*/),\n          (v20/*: any*/),\n          (v21/*: any*/),\n          (v22/*: any*/),\n          (v17/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"e0308612a16a49c1d3f8af5b039313ca\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionDetailContentQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionDetailContentQuery(\\n  $id: GlobalIDField!\\n  $uuid: UUID!\\n  $project_id: UUID!\\n) {\\n  session: compute_session_node(id: $id, project_id: $project_id) {\\n    id\\n    row_id\\n    name\\n    project_id\\n    user_id\\n    resource_opts\\n    status\\n    vfolder_mounts\\n    created_at\\n    terminated_at\\n    scaling_group\\n    agent_ids\\n    requested_slots\\n    idle_checks @since(version: \\\"24.12.0\\\")\\n    ...SessionStatusTagFragment\\n    ...SessionActionButtonsFragment\\n    ...SessionTypeTagFragment\\n    ...EditableSessionNameFragment\\n    ...SessionReservationFragment\\n    ...ContainerLogModalFragment\\n    ...SessionUsageMonitorFragment\\n    ...ContainerCommitModalFragment\\n    ...SessionIdleChecksNodeFragment\\n  }\\n  legacy_session: compute_session(id: $uuid) {\\n    image\\n    mounts\\n    user_email\\n    architecture\\n    idle_checks @since(version: \\\"24.09.0\\\")\\n    ...SessionIdleChecksFragment\\n    id\\n  }\\n}\\n\\nfragment ContainerCommitModalFragment on ComputeSessionNode {\\n  id\\n  name\\n  row_id\\n}\\n\\nfragment ContainerLogModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        id\\n        row_id\\n        container_id\\n        cluster_idx\\n        cluster_role\\n      }\\n    }\\n  }\\n}\\n\\nfragment EditableSessionNameFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  priority\\n  user_id\\n  status\\n}\\n\\nfragment SessionActionButtonsFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  type\\n  status\\n  access_key\\n  service_ports\\n  commit_status\\n  ...TerminateSessionModalFragment\\n  ...ContainerLogModalFragment\\n  ...ContainerCommitModalFragment\\n}\\n\\nfragment SessionIdleChecksFragment on ComputeSession {\\n  id\\n  idle_checks @since(version: \\\"24.09.0\\\")\\n}\\n\\nfragment SessionIdleChecksNodeFragment on ComputeSessionNode {\\n  id\\n  idle_checks @since(version: \\\"24.12.0\\\")\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  name\\n  status\\n  status_info\\n}\\n\\nfragment SessionTypeTagFragment on ComputeSessionNode {\\n  type\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        occupied_slots\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment TerminateSessionModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  scaling_group\\n  kernel_nodes {\\n    edges {\\n      node {\\n        container_id\\n        agent_id\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"93950b0e90c5428c5cac947b9590f657\";\n\nexport default node;\n","import _ from 'lodash';\n\n/**\n * Escapes a value for CSV formatting.\n *\n * @param value - The value to escape.\n * @returns The escaped value.\n */\nfunction escapeCsvValue(value: any) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  if (typeof value === 'number' || typeof value === 'boolean') {\n    return String(value);\n  }\n\n  // Convert non-string values to string using JSON.stringify\n  value = _.isString(value) ? value : JSON.stringify(value);\n\n  // Replace double quotes within the value with two double quotes\n  return `\"${value.replace(/\"/g, '\"\"')}\"`;\n}\n\n/**\n * Converts an array of JSON objects to a CSV string.\n *\n * @param data - The array of JSON objects to convert.\n * @param format_rules - The formatting rules for each property in the JSON objects.\n * @returns The CSV string representation of the JSON objects.\n */\nexport const JSONToCSVBody = <T>(\n  data: T[],\n  format_rules?: {\n    [key in keyof T]?: (value: any) => any;\n  },\n) => {\n  const displayedData = _.map(data, (row) => {\n    return _.omit(row as object, '__fragments', '__fragmentOwner', '__id');\n  });\n\n  const CSVTitle = _.keys(displayedData[0]);\n  const CSVData = _.map(displayedData, (row) => {\n    return _.map(row, (value, key) => {\n      if (format_rules?.[key as keyof T]) {\n        return format_rules[key as keyof T]?.(value) || value;\n      }\n      return value;\n    });\n  });\n\n  const csvContent = CSVData.map((row) =>\n    row.map(escapeCsvValue).join(','),\n  ).join('\\n');\n  const csvBody = [CSVTitle.map(escapeCsvValue).join(','), csvContent].join(\n    '\\n',\n  );\n\n  return csvBody;\n};\n\n/**\n * Download a file from the given blob.\n * @param {Blob} blob - The file content.\n * @param {string} filename - The name of the file.\n */\n\nexport const downloadBlob = (blob: Blob, filename: string) => {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  URL.revokeObjectURL(url);\n};\n\nexport const exportCSVWithFormattingRules = <T>(\n  data: T[],\n  filename: string,\n  format_rules?: {\n    [key in keyof T]?: (value: any) => any;\n  },\n) => {\n  const bodyStr = JSONToCSVBody(data, format_rules);\n  const blob = new Blob([bodyStr], { type: 'text/csv' });\n  downloadBlob(blob, `${filename}.csv`);\n};\n"],"names":["_ref","_session$kernel_nodes","_session$kernel_nodes2","_$find","_kernelNodes$","_session$row_id$split","_session$kernel_nodes3","sessionFrgmt","defaultKernelId","modalProps","baiClient","useSuspendedBackendaiClient","token","theme","useToken","userRole","useCurrentUserRole","session","useFragment","_ContainerLogModalFragment","require","kernelNodes","kernel_nodes","edges","map","e","node","selectedKernelId","setSelectedKernelId","useState","_","cluster_role","row_id","useEffect","open","undefined","data","logs","refetch","isPending","isRefetching","dataUpdatedAt","useTanQuery","queryKey","access_key","queryFn","async","get_logs","then","req","result","staleTime","lastLineNumbers","resetPrevious","resetPreviousLineNumber","factory","deps","initialPrev","arguments","length","prevRef","useRef","prevResetKey","setPrevResetKey","current","useMemo","memoizedPrev","previous","useMemoWithPrevious","split","md","Grid","useBreakpoint","t","useTranslation","_jsx","BAIModal","title","_jsxs","Flex","style","maxWidth","gap","children","Typography","Title","level","margin","flexShrink","_Fragment","Text","fontWeight","ellipsis","name","fontFamily","copyable","text","tooltips","width","styles","header","body","height","maxHeight","footer","destroyOnClose","direction","align","wrap","BAISelect","value","onChange","autoSelectOption","options","sortBy","_e$node","_e$node2","cluster_idx","_e$node3","_e$node4","_e$node5","_e$node6","_e$node7","label","fontSize","fontSizeSM","type","substring","Divider","Tooltip","Button","size","icon","DownloadIcon","disabled","onClick","blob","Blob","downloadBlob","Date","toISOString","loading","ReloadOutlined","alignSelf","border","colorBorder","overflow","ScrollFollow","startFollowing","render","_ref2","follow","onScroll","LazyLog","caseInsensitive","enableSearch","enableSearchNavigation","selectableLines","highlight","extraLines","v0","v1","v2","hash","v3","v4","v5","v6","v7","v8","v9","kernelStatusTagColor","PREPARING","BUILDING","PULLING","PREPARED","CREATING","PENDING","SCHEDULED","RUNNING","RESTARTING","RESIZING","SUSPENDED","TERMINATING","TERMINATED","CANCELLED","ERROR","id","fetchKey","currentProject","useCurrentProjectValue","kernelIdForLogModal","setKernelIdForLogModal","session_for_project_id","useLazyLoadQuery","_ConnectedKernelListLegacyQuery","uuid","fetchPolicy","_ConnectedKernelListQuery","toGlobalId","project_id","group_id","columns","filterEmptyItem","fixed","record","index","showSorterTooltip","rowScope","dataIndex","ScrollTextIcon","role","Tag","status","_record$status_info","status_info","DoubleTag","values","color","onCell","BAITable","bordered","rowKey","scroll","x","dataSource","filterNonNullItems","edge","pagination","UnmountModalAfterClose","ContainerLogModal","onCancel","component","Component","editable","editableOfProps","otherProps","_EditableSessionNameFragment","optimisticName","setOptimisticName","userInfo","useCurrentUserInfo","commitEditMutation","isPendingEditMutation","useMutation","_EditableSessionNameMutation","isEditing","setIsEditing","message","App","useApp","isNotPreparingCategoryStatus","includes","isEditingAllowed","user_id","onStart","triggerType","colorTextTertiary","Form","onFinish","sessionName","variables","input","onCompleted","response","errors","modify_compute_session","ok","document","dispatchEvent","CustomEvent","_errors$","_errors$2","error","onError","initialValues","flex","Item","rules","getSessionNameRules","Input","suffix","CornerDownLeftIcon","autoFocus","onKeyDown","key","_path","_path2","_path3","_path4","_extends","Object","assign","bind","n","r","hasOwnProperty","call","apply","SvgContainerCommit","svgRef","titleId","props","viewBox","fill","xmlns","ref","d","ForwardRef","Icon","logo","_g","SvgSessionLog","stroke","strokeWidth","strokeLinecap","strokeLinejoin","SvgTerminalApp","SvgTerminate","strokeMiterlimit","onRequestClose","formRef","upsertNotification","useSetBAINotification","isConfirmLoading","setIsConfirmLoading","_ContainerCommitModalFragment","onOk","convertSessionToImage","_formRef$current","validateFields","_session$name","computeSession","imageName","res","backgroundTask","taskId","task_id","pending","resolved","rejected","duration","catch","err","Error","finally","console","log","okButtonProps","Descriptions","column","marginTop","marginBottom","required","min","max","pattern","placeholder","isActive","appLauncher","runTerminal","sessionId","globalThis","showLauncher","params","_SessionActionButtonsFragment","openTerminateModal","setOpenTerminateModal","openLogModal","setOpenLogModal","openContainerCommitModal","setOpenContainerCommitModal","TerminalAppIcon","TerminateSessionModal","sessionFrgmts","SessionLogIcon","supports","_config","enableContainerCommit","ContainerCommitIcon","ContainerCommitModal","TerminateIcon","colorError","getUtilizationCheckerColor","resources","thresholds_check_operator","utilization","threshold","Math","getIdleChecksTagColor","criteria","remaining","extra","_ref3","sessionNodeFrgmt","mergedResourceSlots","useResourceSlotsDetails","sessionNode","_SessionIdleChecksNodeFragment","_SessionIdleChecksFragment","idleChecks","JSON","parse","idle_checks","getIdleCheckTitle","_value$extra","Type","resource","_mergedResourceSlots$","deviceName","colorWhite","human_readable_name","toFixedFloorWithoutTrailingZeros","QuestionCircleOutlined","colorTextSecondary","cursor","remaining_time_type","formatDurationAsDays","getTime","typeTagColor","INTERACTIVE","BATCH","INFERENCE","_SessionTypeTagFragment","marginLeft","marginMD","_legacy_session$mount","useFolderExplorerOpener","openIdleCheckDescriptionModal","setOpenIdleCheckDescriptionModal","_SessionDetailContentLegacyQuery","legacy_session","_SessionDetailContentQuery","imageFullName","image","architecture","imminentExpirationTime","check","filter","Boolean","showKernelList","Alert","showIcon","justify","EditableSessionName","Group","SessionActionButtons","span","user_email","contentStyle","display","marginSM","SessionStatusTag","showInfo","SessionTypeTag","ImageMetaIcon","marginRight","marginXS","SessionKernelTags","mounts","vfolder_mounts","mountInfo","FolderOutlined","join","scaling_group","ResourceNumbersOfSession","requested_slots","agent_ids","SessionReservation","InfoCircleOutlined","SessionIdleChecks","SessionUsageMonitor","Suspense","fallback","Skeleton","ConnectedKernelList","IdleCheckDescriptionModal","description","drawerProps","isPendingReload","startReloadTransition","useTransition","updateFetchKey","useUpdatableState","useInterval","Drawer","keyboard","onClose","_drawerProps$onClose","SessionDetailContent","modalElement","React","only","isModalOpen","isMount","setIsMount","useLayoutEffect","originalAfterClose","afterClose","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","escapeCsvValue","String","stringify","replace","filename","url","URL","createObjectURL","a","createElement","href","download","click","revokeObjectURL","exportCSVWithFormattingRules","format_rules","bodyStr","JSONToCSVBody","displayedData","row","CSVTitle","csvContent","_format_rules"],"sourceRoot":""}