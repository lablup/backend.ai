{"version":3,"file":"static/js/4734.f2e2d914.chunk.js","mappings":"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","sources":["components/BAILink.tsx","components/DoubleTag.tsx","components/DynamicUnitInputNumber.tsx","components/EnvVarFormList.tsx","components/FolderExplorerOpener.tsx","components/ImageEnvironmentSelectFormItems.tsx","components/ImageMetaIcon.tsx","components/ImageTags.tsx","components/InputNumberWithSlider.tsx","hooks/useResourceLimitAndRemaining.tsx","components/AgentSelect.tsx","components/DynamicUnitInputNumberWithSlider.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/ResourceGroupSelect.tsx","components/ResourceNumber.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","components/__generated__/AgentSelectQuery.graphql.ts","components/__generated__/ImageEnvironmentSelectFormItemsQuery.graphql.ts","components/__generated__/ResourcePresetSelectQuery.graphql.ts","components/__generated__/VFolderPermissionTag_VFolder.graphql.ts","components/__generated__/VFolderTableProjectQuery.graphql.ts","helper/const-vars.ts","hooks/__generated__/hooksUsingRelay_KeyPairQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql.ts","hooks/hooksUsingRelay.tsx","hooks/reactPaginationQueryOptions.tsx"],"sourcesContent":["import { createStyles } from 'antd-style';\nimport React from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\n\nconst useStyles = createStyles(({ css, token }) => ({\n  hover: css`\n    text-decoration: none;\n    color: inherit;\n\n    &:hover {\n      color: ${token.colorLinkHover};\n      text-decoration: underline;\n    }\n  `,\n}));\n\ninterface BAILinkProps extends LinkProps {\n  type: 'hover';\n}\nconst BAILink: React.FC<BAILinkProps> = ({ type, ...linkProps }) => {\n  const { styles } = useStyles();\n  return (\n    <Link\n      className={type === 'hover' ? styles.hover : undefined}\n      {...linkProps}\n    />\n  );\n};\n\nexport default BAILink;\n","import Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: string;\n  color?: string;\n};\n\nconst DoubleTag: React.FC<{\n  values?: Array<string> | Array<DoubleTagObjectValue>;\n  highlightKeyword?: string;\n}> = ({ values = [], highlightKeyword }) => {\n  if (values.length === 0) return null;\n  let objectValues: Array<DoubleTagObjectValue>;\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) =>\n        !_.isEmpty(objValue.label) ? (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {!_.isUndefined(highlightKeyword) ? (\n              <TextHighlighter keyword={highlightKeyword}>\n                {objValue.label}\n              </TextHighlighter>\n            ) : (\n              objValue.label\n            )}\n          </Tag>\n        ) : null,\n      )}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","import { convertBinarySizeUnit, parseUnit, SizeUnit } from '../helper';\nimport useControllableState from '../hooks/useControllableState';\nimport { usePrevious } from 'ahooks';\nimport { InputNumber, InputNumberProps, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nexport interface DynamicUnitInputNumberProps\n  extends Omit<\n    InputNumberProps,\n    'step' | 'max' | 'min' | 'value' | 'onChange'\n  > {\n  dynamicSteps?: number[];\n  disableAutoUnit?: boolean;\n  max?: string;\n  min?: string;\n  value?: string | null | undefined;\n  units?: string[];\n  roundStep?: number;\n  onChange?: (value: string) => void;\n}\n\nconst DynamicUnitInputNumber: React.FC<DynamicUnitInputNumberProps> = ({\n  dynamicSteps = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],\n  units = ['m', 'g', 't', 'p'],\n  disableAutoUnit = false,\n  min = '0m',\n  max = '300p',\n  roundStep,\n  ...inputNumberProps\n}) => {\n  const [value, setValue] = useControllableState<string | null | undefined>(\n    inputNumberProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const [numValue, _unitFromValue] =\n    value === null || value === undefined ? [null, null] : parseUnit(value);\n  const previousUnit = usePrevious(_unitFromValue);\n  const unit = _unitFromValue || previousUnit || units[0];\n\n  const [minNumValue, minUnit] = parseUnit(min);\n  const [maxNumValue, maxUnit] = parseUnit(max);\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const onInput = (e: Event) => {\n        // @ts-ignore\n        const value = e?.target?.value;\n        if (/^\\d+(g|m)$/.test(value)) {\n          // const [newNumber, newUnit] = parseUnit(value);\n          // if (newNumber === numValue && newUnit === unit) {\n          //   e.target.value = numValue;\n          // } else {\n          setValue(value);\n          // }\n        }\n      };\n      const target = ref.current;\n      target?.addEventListener('input', onInput);\n      return () => {\n        target?.removeEventListener('input', onInput);\n      };\n    }\n  }, [ref, numValue, _unitFromValue, setValue]);\n\n  return (\n    <InputNumber\n      ref={ref}\n      {...inputNumberProps}\n      onBlur={() => {\n        if (_.isNumber(roundStep) && roundStep > 0) {\n          const decimalCount = roundStep.toString().split('.')[1]?.length || 0;\n          if (\n            isNaN(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n                roundStep,\n            )\n          ) {\n            return;\n          }\n          setValue(\n            `${(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n              roundStep\n            ).toFixed(decimalCount)}${unit}`,\n          );\n        }\n      }}\n      value={numValue}\n      onChange={(newValue) => {\n        if (newValue === null || newValue === undefined) {\n          setValue(newValue);\n        } else {\n          setValue(`${newValue}${unit}`);\n        }\n      }}\n      //TODO: When min and max have different units, they should be calculated and put in.\n      // 입력의 초소단위 확인 0.4g 가 되는지 확인\n      max={\n        maxUnit === unit\n          ? maxNumValue\n          : convertBinarySizeUnit(max, unit as SizeUnit)?.number\n      }\n      min={\n        minUnit === unit\n          ? minNumValue\n          : // @ts-ignore\n            convertBinarySizeUnit(min, unit).number\n      }\n      addonAfter={\n        <Select\n          tabIndex={-1}\n          value={unit}\n          onChange={(newUnit) => {\n            setValue(`${numValue}${newUnit}`);\n          }}\n          onDropdownVisibleChange={(open) => {\n            // A null or undefined value doesn't have a unit info, so we need to set the value before setting the unit.\n            if ((open && value === null) || value === undefined) {\n              setValue(`0${unit}`);\n            }\n          }}\n          options={_.map(units, (unit) => ({\n            value: unit,\n            label: (\n              <Typography.Text\n                style={{\n                  fontFamily:\n                    \"'SFMono-Regular',Consolas,'Liberation Mono',Menlo,Courier,monospace\",\n                }}\n              >\n                {unit.toUpperCase() + 'iB'}\n              </Typography.Text>\n            ),\n          }))}\n          suffixIcon={units.length > 1 ? undefined : null}\n          open={units.length > 1 ? undefined : false}\n          style={{\n            cursor: units.length > 1 ? undefined : 'default',\n          }}\n        />\n      }\n      step={0} // this step applies when onStep doesn't setValue\n      onStep={(afterStepValue, info) => {\n        const numValueNotNull =\n          _.isNull(numValue) || _.isUndefined(numValue) ? 0 : numValue;\n        const index = _.sortedIndex(_.sortBy(dynamicSteps), numValueNotNull);\n        let nextIndex: number;\n        if (info.type === 'up') {\n          if (numValueNotNull === dynamicSteps[index]) {\n            nextIndex = index + 1;\n          } else {\n            nextIndex = index;\n          }\n        } else {\n          nextIndex = index - 1;\n        }\n\n        const currentUnitIndex = units.indexOf(unit);\n        if (!disableAutoUnit && nextIndex < 0) {\n          // WHEN MOVING TO MORE Smaller Unit: change unit and number\n          if (currentUnitIndex === 0) {\n            // if already at min unit, set to 0\n            setValue(`0${unit}`);\n          } else {\n            const nextValue = dynamicSteps[dynamicSteps.length - 1];\n            const nextUnit = units[currentUnitIndex - 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else if (!disableAutoUnit && nextIndex > dynamicSteps.length - 1) {\n          // WHEN MOVING TO MORE Bigger Unit: change unit and number\n          //  if already at max unit, step up/down by 1\n          if (currentUnitIndex === units.length - 1) {\n            setValue(\n              `${numValueNotNull + (info.type === 'up' ? 1 : -1)}${maxUnit}`,\n            );\n          } else {\n            const nextValue = dynamicSteps[0];\n            const nextUnit = units[currentUnitIndex + 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else {\n          // WHEN, DON'T NEED TO CHANGE UNIT\n          if (nextIndex >= 0 && nextIndex < dynamicSteps.length) {\n            let nextNumValue = dynamicSteps[nextIndex];\n            if (minUnit === unit && nextNumValue < minNumValue) {\n              nextNumValue = minNumValue;\n            } else if (maxUnit === unit && nextNumValue > maxNumValue) {\n              nextNumValue = maxNumValue;\n            }\n            setValue(`${nextNumValue}${unit}`);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DynamicUnitInputNumber;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          !_.isEmpty(variableName) &&\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                    onChange={() => {\n                      const fieldNames = fields.map((field, index) => [\n                        props.name,\n                        index,\n                        'variable',\n                      ]);\n                      form.validateFields(fieldNames);\n                    }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\n                        'session.launcher.EnvironmentVariableValueRequired',\n                      ),\n                    },\n                  ]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input\n                    placeholder=\"Value\"\n                    // onChange={() => {\n                    //   const valueFields = fields.map((field, index) => [\n                    //     props.name,\n                    //     index,\n                    //     'value',\n                    //   ]);\n                    //   form.validateFields(valueFields);\n                    // }}\n                  />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                {t('session.launcher.AddEnvironmentVariable')}\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nconst sensitivePatterns = [\n  /AUTH/i,\n  /ACCESS/i,\n  /SECRET/i,\n  /_KEY/i,\n  /PASSWORD/i,\n  /PASSWD/i,\n  /PWD/i,\n  /TOKEN/i,\n  /PRIVATE/i,\n  /CREDENTIAL/i,\n  /JWT/i,\n  /KEYPAIR/i,\n  /CERTIFICATE/i,\n  /SSH/i,\n  /ENCRYPT/i,\n  /SIGNATURE/i,\n  /SALT/i,\n  /PIN/i,\n  /PASSPHRASE/i,\n  /OAUTH/i,\n];\n\nexport function isSensitiveEnv(key: string) {\n  return sensitivePatterns.some((pattern) => pattern.test(key));\n}\n\nexport function sanitizeSensitiveEnv(envs: EnvVarFormListValue[]) {\n  return _.map(envs, (env) => {\n    if (env && isSensitiveEnv(env.variable)) {\n      return { ...env, value: '' };\n    }\n    return env;\n  });\n}\n\nexport default EnvVarFormList;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { StringParam, useQueryParam } from 'use-query-params';\n\nconst LegacyFolderExplorer = React.lazy(() => import('./LegacyFolderExplorer'));\n\nconst FolderExplorerOpener = () => {\n  const [folderId, setFolderId] = useQueryParam('folder', StringParam);\n  const normalizedFolderId = folderId?.replaceAll('-', '');\n\n  return (\n    <LegacyFolderExplorer\n      vfolderID={normalizedFolderId || ''}\n      open={!!normalizedFolderId}\n      onRequestClose={() => {\n        setFolderId(null, 'replaceIn');\n      }}\n      destroyOnClose\n    />\n  );\n};\n\nexport default FolderExplorerOpener;\n\nexport const useFolderExplorerOpener = () => {\n  const [, setFolderId] = useQueryParam('folder', StringParam);\n\n  const location = useLocation();\n  // a function to generate new path with folder id based on current path\n  const generateFolderPath = (id: string) => {\n    // get current path\n    const searchParams = new URLSearchParams(location.search);\n    // set folder id\n    searchParams.set('folder', id);\n    return {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    };\n  };\n\n  return {\n    open: (id: string) => {\n      setFolderId(id);\n    },\n    generateFolderPath,\n  };\n};\n","import { getImageFullName, localeCompare } from '../helper';\nimport { preserveDotStartCase } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\n// @ts-ignore\nimport cssRaw from './ImageEnvironmentSelectFormItems.css?raw';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { ImageTags } from './ImageTags';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  ImageEnvironmentSelectFormItemsQuery,\n  ImageEnvironmentSelectFormItemsQuery$data,\n} from './__generated__/ImageEnvironmentSelectFormItemsQuery.graphql';\nimport {\n  Divider,\n  Form,\n  Input,\n  RefSelectProps,\n  Select,\n  Tag,\n  theme,\n  Typography,\n} from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport type Image = NonNullable<\n  NonNullable<ImageEnvironmentSelectFormItemsQuery$data>['images']\n>[0];\n\ntype ImageGroup = {\n  groupName: string;\n  environmentGroups: {\n    environmentName: string;\n    displayName: string;\n    prefix?: string;\n    images: Image[];\n  }[];\n};\n\nexport type ImageEnvironmentFormInput = {\n  environments: {\n    environment: string;\n    version: string;\n    image: Image | undefined;\n    manual?: string;\n    customizedTag?: string;\n  };\n};\n\ninterface ImageEnvironmentSelectFormItemsProps {\n  filter?: (image: Image) => boolean;\n  showPrivate?: boolean;\n}\n\nfunction compareVersions(version1: string, version2: string): number {\n  const v1 = version1.split('.').map(Number);\n  const v2 = version2.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const num1 = v1[i] || 0;\n    const num2 = v2[i] || 0;\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nconst isPrivateImage = (image: Image) => {\n  return _.some(image?.labels, (label) => {\n    return (\n      label?.key === 'ai.backend.features' &&\n      label?.value?.split(' ').includes('private')\n    );\n  });\n};\n\nconst ImageEnvironmentSelectFormItems: React.FC<\n  ImageEnvironmentSelectFormItemsProps\n> = ({ filter, showPrivate }) => {\n  const form = Form.useFormInstance<ImageEnvironmentFormInput>();\n  const environments = Form.useWatch('environments', { form, preserve: true });\n  const baiClient = useSuspendedBackendaiClient();\n  const supportExtendedImageInfo = baiClient?.supports('extended-image-info');\n\n  const [environmentSearch, setEnvironmentSearch] = useState('');\n  const [versionSearch, setVersionSearch] = useState('');\n  const { t } = useTranslation();\n  const [metadata, { getBaseVersion, getImageMeta, tagAlias }] =\n    useBackendAIImageMetaData();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n\n  const envSelectRef = useRef<RefSelectProps>(null);\n  const versionSelectRef = useRef<RefSelectProps>(null);\n  const imageEnvironmentSelectFormItemsVariables = baiClient?._config\n    ?.showNonInstalledImages\n    ? {}\n    : { installed: true };\n  const { images } = useLazyLoadQuery<ImageEnvironmentSelectFormItemsQuery>(\n    graphql`\n      query ImageEnvironmentSelectFormItemsQuery($installed: Boolean) {\n        images(is_installed: $installed) {\n          id\n          name @deprecatedSince(version: \"24.12.0\")\n          humanized_name\n          tag\n          registry\n          architecture\n          digest\n          installed\n          resource_limits {\n            key\n            min\n            max\n          }\n          labels {\n            key\n            value\n          }\n          namespace @since(version: \"24.12.0\")\n          base_image_name @since(version: \"24.12.0\")\n          tags @since(version: \"24.12.0\") {\n            key\n            value\n          }\n          version @since(version: \"24.12.0\")\n        }\n      }\n    `,\n    imageEnvironmentSelectFormItemsVariables,\n    {\n      fetchPolicy: 'store-and-network',\n    },\n  );\n\n  // If not initial value, select first value\n  // auto select when relative field is changed\n  useEffect(() => {\n    if (!_.isEmpty(environments?.manual)) {\n      // set undefined fields related to environments when manual is set\n      if (environments.environment || environments.version) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n          },\n        });\n      }\n      return;\n    }\n\n    let matchedEnvironmentByVersion:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    let matchedImageByVersion: Image | undefined;\n    let version = form.getFieldValue('environments')?.version;\n    // FIXME: manually add architecture based on amd64\n    if (version && version.indexOf('@') < 0) {\n      version += '@x86_64';\n    }\n    version &&\n      _.find(imageGroups, (group) => {\n        matchedEnvironmentByVersion = _.find(\n          group.environmentGroups,\n          (environment) => {\n            matchedImageByVersion = _.find(\n              environment.images,\n              (image) => getImageFullName(image) === version,\n            );\n            return !!matchedImageByVersion; // break iteration\n          },\n        );\n        return !!matchedEnvironmentByVersion; // break iteration\n      });\n\n    // if matchedEnvironmentByVersion is not existed, select first values\n    let nextEnvironment: ImageGroup['environmentGroups'][0] | undefined;\n    let nextImage: Image | undefined;\n    if (matchedEnvironmentByVersion) {\n      nextEnvironment = matchedEnvironmentByVersion;\n      nextImage = matchedImageByVersion;\n    } else if (form.getFieldValue(['environments', 'environment'])) {\n      _.find(imageGroups, (group) => {\n        nextEnvironment = _.find(group.environmentGroups, (environment) => {\n          return (\n            environment.environmentName ===\n            form.getFieldValue(['environments', 'environment'])\n          );\n        });\n        nextImage = nextEnvironment?.images[0];\n        return !!nextEnvironment;\n      });\n    }\n\n    if (!nextEnvironment || !nextImage) {\n      nextEnvironment = imageGroups[0]?.environmentGroups[0];\n      nextImage = nextEnvironment?.images[0];\n    }\n\n    const customizedImageTag = _.find(\n      nextImage?.labels,\n      (item) =>\n        item !== null && item?.key === 'ai.backend.customized-image.name',\n    )?.value;\n\n    if (nextImage) {\n      if (\n        !matchedEnvironmentByVersion &&\n        baiClient._config.allow_manual_image_name_for_session &&\n        version\n      ) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n            manual: version,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      } else {\n        form.setFieldsValue({\n          environments: {\n            environment: nextEnvironment.environmentName,\n            version: getImageFullName(nextImage),\n            image: nextImage,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      }\n    } else if (baiClient._config.allow_manual_image_name_for_session) {\n      // if no image is available, only set manual if it's allowed\n      form.setFieldValue(['environments', 'manual'], version);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environments?.version, environments?.manual]); // environments?.environment,\n\n  const imageGroups: ImageGroup[] = useMemo(\n    () =>\n      _.chain(images)\n        .filter((image) => {\n          return (\n            (showPrivate ? true : !isPrivateImage(image)) &&\n            (filter ? filter(image) : true)\n          );\n        })\n        .groupBy((image) => {\n          // group by using `group` property of image info\n          return (\n            metadata?.imageInfo[getImageMeta(getImageFullName(image) || '').key]\n              ?.group || 'Custom Environments'\n          );\n        })\n        .map((images, groupName) => {\n          return {\n            groupName,\n            environmentGroups: _.chain(images)\n              // sub group by using (environment) `name` property of image info\n              .groupBy((image) => {\n                return (\n                  // metadata?.imageInfo[\n                  //   getImageMeta(getImageFullName(image) || \"\").key\n                  // ]?.name || image?.name\n                  `${image?.registry}/${\n                    supportExtendedImageInfo ? image?.namespace : image?.name\n                  }`\n                );\n              })\n              .map((images, environmentName) => {\n                const imageKey = environmentName.split('/')?.[2];\n                const displayName =\n                  imageKey && metadata?.imageInfo[imageKey]?.name;\n\n                return {\n                  environmentName,\n                  displayName:\n                    displayName ||\n                    (_.last(environmentName.split('/')) as string),\n                  prefix: _.chain(environmentName)\n                    .split('/')\n                    .drop(1)\n                    .dropRight(1)\n                    .join('/')\n                    .value(),\n                  images: images.sort(\n                    (a, b) =>\n                      compareVersions(\n                        // latest version comes first\n                        b?.tag?.split('-')?.[0] ?? '',\n                        a?.tag?.split('-')?.[0] ?? '',\n                      ) || localeCompare(a?.architecture, b?.architecture),\n                  ),\n                };\n              })\n\n              .sortBy((item) => item.displayName)\n              .value(),\n          };\n        })\n        .sortBy((item) => item.groupName)\n        .value(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [images, metadata, filter, showPrivate],\n  );\n\n  // support search image by full name\n  const { fullNameMatchedImage } = useMemo(() => {\n    let fullNameMatchedImage: Image | undefined;\n    let fullNameMatchedImageGroup:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    if (environmentSearch.length) {\n      _.chain(\n        imageGroups\n          .flatMap((group) => group.environmentGroups)\n          .find((envGroup) => {\n            fullNameMatchedImageGroup = envGroup;\n            fullNameMatchedImage = _.find(envGroup.images, (image) => {\n              return getImageFullName(image) === environmentSearch;\n            });\n            return !!fullNameMatchedImage;\n          }),\n      ).value();\n    }\n    return {\n      fullNameMatchedImage,\n      fullNameMatchedImageGroup,\n    };\n  }, [environmentSearch, imageGroups]);\n\n  return (\n    <>\n      <style>{cssRaw}</style>\n      <Form.Item\n        className=\"image-environment-select-form-item\"\n        name={['environments', 'environment']}\n        label={\n          <Typography.Text\n            copyable={{\n              text: getImageFullName(\n                form.getFieldValue(['environments', 'image']),\n              ),\n            }}\n          >\n            {t('session.launcher.Environments')} /{' '}\n            {t('session.launcher.Version')}\n          </Typography.Text>\n        }\n        rules={[{ required: _.isEmpty(environments?.manual) }]}\n        style={{ marginBottom: 10 }}\n      >\n        <Select\n          ref={envSelectRef}\n          showSearch\n          // open={true}\n          // autoClearSearchValue\n          searchValue={environmentSearch}\n          onSearch={setEnvironmentSearch}\n          defaultActiveFirstOption={true}\n          optionFilterProp=\"filterValue\"\n          onChange={(value) => {\n            if (fullNameMatchedImage) {\n              form.setFieldsValue({\n                environments: {\n                  environment:\n                    (supportExtendedImageInfo\n                      ? fullNameMatchedImage?.namespace\n                      : fullNameMatchedImage?.name) || '',\n                  version: getImageFullName(fullNameMatchedImage),\n                  image: fullNameMatchedImage,\n                },\n              });\n            }\n            // NOTE: when user set environment only then set the version to the first item\n            else {\n              const firstInListImage: Image = imageGroups\n                .flatMap((group) => group.environmentGroups)\n                .filter((envGroup) => envGroup.environmentName === value)[0]\n                .images[0];\n              form.setFieldsValue({\n                environments: {\n                  environment:\n                    (supportExtendedImageInfo\n                      ? firstInListImage?.namespace\n                      : firstInListImage?.name) || '',\n                  version: getImageFullName(firstInListImage),\n                  image: firstInListImage,\n                },\n              });\n            }\n          }}\n          disabled={\n            baiClient._config.allow_manual_image_name_for_session &&\n            !_.isEmpty(environments?.manual)\n          }\n        >\n          {fullNameMatchedImage ? (\n            <Select.Option\n              value={\n                supportExtendedImageInfo\n                  ? fullNameMatchedImage?.namespace\n                  : fullNameMatchedImage?.name\n              }\n              filterValue={getImageFullName(fullNameMatchedImage)}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"center\"\n                gap=\"xs\"\n                style={{ display: 'inline-flex' }}\n              >\n                <ImageMetaIcon\n                  image={getImageFullName(fullNameMatchedImage) || ''}\n                  style={{\n                    width: 15,\n                    height: 15,\n                  }}\n                />\n                {getImageFullName(fullNameMatchedImage)}\n              </Flex>\n            </Select.Option>\n          ) : (\n            _.map(imageGroups, (group) => {\n              return (\n                <Select.OptGroup key={group.groupName} label={group.groupName}>\n                  {_.map(group.environmentGroups, (environmentGroup) => {\n                    const firstImage = environmentGroup.images[0];\n                    const currentMetaImageInfo =\n                      metadata?.imageInfo[\n                        environmentGroup.environmentName.split('/')?.[2]\n                      ];\n\n                    const extraFilterValues: string[] = [];\n                    let environmentPrefixTag = null;\n                    if (\n                      environmentGroup.prefix &&\n                      !['lablup', 'cloud', 'stable'].includes(\n                        environmentGroup.prefix,\n                      )\n                    ) {\n                      extraFilterValues.push(environmentGroup.prefix);\n                      environmentPrefixTag = (\n                        <Tag color=\"purple\">\n                          <TextHighlighter keyword={environmentSearch}>\n                            {environmentGroup.prefix}\n                          </TextHighlighter>\n                        </Tag>\n                      );\n                    }\n\n                    const tagsFromMetaImageInfoLabel = _.map(\n                      currentMetaImageInfo?.label,\n                      (label) => {\n                        if (\n                          _.isUndefined(label.category) &&\n                          label.tag &&\n                          label.color\n                        ) {\n                          extraFilterValues.push(label.tag);\n                          return (\n                            <Tag color={label.color} key={label.tag}>\n                              <TextHighlighter\n                                keyword={environmentSearch}\n                                key={label.tag}\n                              >\n                                {label.tag}\n                              </TextHighlighter>\n                            </Tag>\n                          );\n                        }\n                        return null;\n                      },\n                    );\n                    return (\n                      <Select.Option\n                        key={environmentGroup.environmentName}\n                        value={environmentGroup.environmentName}\n                        filterValue={\n                          environmentGroup.displayName +\n                          '\\t' +\n                          extraFilterValues.join('\\t')\n                        }\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\" align=\"center\" gap=\"xs\">\n                            <ImageMetaIcon\n                              image={getImageFullName(firstImage) || ''}\n                              style={{\n                                width: 15,\n                                height: 15,\n                              }}\n                            />\n                            <TextHighlighter keyword={environmentSearch}>\n                              {environmentGroup.displayName}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            // style={{ flex: 1 }}\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {environmentPrefixTag}\n                            {tagsFromMetaImageInfoLabel}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  })}\n                </Select.OptGroup>\n              );\n            })\n          )}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prev, cur) =>\n          prev.environments?.environment !== cur.environments?.environment\n        }\n      >\n        {({ getFieldValue }) => {\n          let selectedEnvironmentGroup:\n            | ImageGroup['environmentGroups'][0]\n            | undefined;\n          _.find(imageGroups, (group) => {\n            return _.find(group.environmentGroups, (environment) => {\n              if (\n                environment.environmentName ===\n                getFieldValue('environments')?.environment\n              ) {\n                selectedEnvironmentGroup = environment;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          });\n          return (\n            <Form.Item\n              className=\"image-environment-select-form-item\"\n              name={['environments', 'version']}\n              rules={[{ required: _.isEmpty(environments?.manual) }]}\n            >\n              <Select\n                ref={versionSelectRef}\n                onChange={(value) => {\n                  const selectedImage = _.find(images, (image) => {\n                    return getImageFullName(image) === value;\n                  });\n                  form.setFieldValue(['environments', 'image'], selectedImage);\n                }}\n                showSearch\n                searchValue={versionSearch}\n                onSearch={setVersionSearch}\n                // autoClearSearchValue\n                optionFilterProp=\"filterValue\"\n                // optionLabelProp=\"label\"\n                dropdownRender={(menu) => (\n                  <>\n                    <Flex\n                      style={{\n                        fontWeight: token.fontWeightStrong,\n                        paddingLeft: token.paddingSM,\n                      }}\n                    >\n                      {t('session.launcher.Version')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Architecture')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Tags')}\n                    </Flex>\n                    <Divider style={{ margin: '8px 0' }} />\n                    {menu}\n                  </>\n                )}\n                disabled={\n                  baiClient._config.allow_manual_image_name_for_session &&\n                  !_.isEmpty(environments?.manual)\n                }\n              >\n                {_.map(\n                  _.uniqBy(selectedEnvironmentGroup?.images, 'id'),\n\n                  (image) => {\n                    const [version, tag, ...requirements] = image?.tag?.split(\n                      '-',\n                    ) || ['', '', ''];\n\n                    let metadataTagAlias = metadata?.tagAlias[tag];\n                    if (!metadataTagAlias) {\n                      for (const [key, replaceString] of Object.entries(\n                        metadata?.tagReplace || {},\n                      )) {\n                        const pattern = new RegExp(key);\n                        if (pattern.test(tag)) {\n                          metadataTagAlias = tag?.replace(\n                            pattern,\n                            replaceString,\n                          );\n                        }\n                      }\n                      if (!metadataTagAlias) {\n                        metadataTagAlias = tag;\n                      }\n                    }\n\n                    const extraFilterValues: string[] = [];\n                    const requirementTags = _.chain(requirements)\n                      .filter(\n                        (requirement) => !requirement.startsWith('customized_'),\n                      )\n                      .map((requirement, idx) => (\n                        <DoubleTag\n                          key={idx}\n                          values={_.split(\n                            metadata?.tagAlias[requirement] || requirement,\n                            ':',\n                          ).map((str) => {\n                            extraFilterValues.push(str);\n                            return {\n                              label: str,\n                              highlightKeyword: versionSearch,\n                            };\n                          })}\n                        />\n                      ))\n                      .value();\n                    const imageLabels = image?.labels;\n                    if (imageLabels) {\n                      const customizedImageNameLabelIdx = _.findIndex(\n                        imageLabels,\n                        (item) =>\n                          item !== null &&\n                          item?.key === 'ai.backend.customized-image.name',\n                      );\n                      if (\n                        customizedImageNameLabelIdx &&\n                        imageLabels[customizedImageNameLabelIdx]\n                      ) {\n                        const tag =\n                          imageLabels[customizedImageNameLabelIdx]?.value || '';\n                        extraFilterValues.push('Customized');\n                        extraFilterValues.push(tag);\n                        requirementTags.push(\n                          <DoubleTag\n                            key={requirementTags.length + 1}\n                            highlightKeyword={versionSearch}\n                            values={[\n                              {\n                                label: 'Customized',\n                                color: 'cyan',\n                              },\n                              {\n                                label: tag ?? '',\n                                color: 'cyan',\n                              },\n                            ]}\n                          />,\n                        );\n                      }\n                    }\n                    return (\n                      <Select.Option\n                        key={image?.id}\n                        value={getImageFullName(image)}\n                        filterValue={[\n                          version,\n                          metadataTagAlias,\n                          image?.architecture,\n                          ...extraFilterValues,\n                        ].join('\\t')}\n                      >\n                        {supportExtendedImageInfo ? (\n                          <Flex direction=\"row\">\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.version}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.architecture}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <Flex direction=\"row\" align=\"start\">\n                              {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                              {_.map(\n                                image?.tags,\n                                (tag: { key: string; value: string }) => {\n                                  const isCustomized = _.includes(\n                                    tag.key,\n                                    'customized_',\n                                  );\n                                  const tagValue = isCustomized\n                                    ? _.find(image?.labels, {\n                                        key: 'ai.backend.customized-image.name',\n                                      })?.value\n                                    : tag.value;\n                                  const aliasedTag = tagAlias(\n                                    tag.key + tagValue,\n                                  );\n                                  return _.isEqual(\n                                    aliasedTag,\n                                    preserveDotStartCase(tag.key + tagValue),\n                                  ) ? (\n                                    <DoubleTag\n                                      key={tag.key}\n                                      highlightKeyword={versionSearch}\n                                      values={[\n                                        {\n                                          label: tagAlias(tag.key),\n                                          color: isCustomized ? 'cyan' : 'blue',\n                                        },\n                                        {\n                                          label: tagValue ?? '',\n                                          color: isCustomized ? 'cyan' : 'blue',\n                                        },\n                                      ]}\n                                    />\n                                  ) : (\n                                    <Tag\n                                      key={tag.key}\n                                      color={isCustomized ? 'cyan' : 'blue'}\n                                    >\n                                      <TextHighlighter keyword={versionSearch}>\n                                        {aliasedTag}\n                                      </TextHighlighter>\n                                    </Tag>\n                                  );\n                                },\n                              )}\n                            </Flex>\n                          </Flex>\n                        ) : (\n                          <Flex direction=\"row\" justify=\"between\">\n                            <Flex direction=\"row\">\n                              <TextHighlighter keyword={versionSearch}>\n                                {getBaseVersion(getImageFullName(image) || '')}\n                              </TextHighlighter>\n                              <Divider type=\"vertical\" />\n                              <TextHighlighter keyword={versionSearch}>\n                                {image?.architecture}\n                              </TextHighlighter>\n                              <Divider type=\"vertical\" />\n                              <ImageTags\n                                tag={image?.tag || ''}\n                                highlightKeyword={versionSearch}\n                                labels={\n                                  image?.labels as Array<{\n                                    key: string;\n                                    value: string;\n                                  }>\n                                }\n                              />\n                            </Flex>\n                          </Flex>\n                        )}\n                      </Select.Option>\n                    );\n                  },\n                )}\n              </Select>\n            </Form.Item>\n          );\n        }}\n      </Form.Item>\n      <Form.Item\n        label={t('session.launcher.ManualImageName')}\n        name={['environments', 'manual']}\n        style={{\n          display: baiClient._config.allow_manual_image_name_for_session\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Input\n          allowClear\n          onChange={(value) => {\n            if (!_.isEmpty(value)) {\n              form.setFieldsValue({\n                environments: {\n                  environment: undefined,\n                  version: undefined,\n                  image: undefined,\n                },\n              });\n            } else {\n            }\n          }}\n        />\n      </Form.Item>\n      <Form.Item noStyle hidden name={['environments', 'image']}>\n        <Input />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ImageEnvironmentSelectFormItems;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n  alt?: string | null;\n}> = ({ image, style = {} }, bordered, alt = '') => {\n  const [, { getImageIcon }] = useBackendAIImageMetaData();\n\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: '1em',\n        height: '1em',\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","import { preserveDotStartCase } from '../helper';\nimport { useBackendAIImageMetaData } from '../hooks';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag, TagProps } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\ninterface ImageAliasNameAndBaseVersionTagsProps\n  extends Omit<DoubleTagObjectValue, 'label'> {\n  image: string | null;\n}\nexport const ImageAliasNameAndBaseVersionTags: React.FC<\n  ImageAliasNameAndBaseVersionTagsProps\n> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageAliasName, getBaseVersion, tagAlias }] =\n    useBackendAIImageMetaData();\n  return (\n    <DoubleTag\n      values={[\n        {\n          label: tagAlias(getImageAliasName(image)),\n          color: 'blue',\n        },\n        {\n          label: getBaseVersion(image),\n          color: 'green',\n        },\n      ]}\n      {...props}\n    />\n  );\n};\n\ninterface BaseVersionTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseVersionTags: React.FC<BaseVersionTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseVersion, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getBaseVersion(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseVersion(image))}\n    </Tag>\n  );\n};\n\ninterface BaseImageTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseImageTags: React.FC<BaseImageTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseImage, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getBaseImage(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseImage(image))}\n    </Tag>\n  );\n};\n\ninterface ArchitectureTagsProps extends TagProps {\n  image: string | null;\n}\nexport const ArchitectureTags: React.FC<ArchitectureTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getArchitecture, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getArchitecture(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {getArchitecture(image)}\n    </Tag>\n  );\n};\n\ninterface LangTagsProps extends TagProps {\n  image: string | null;\n}\nexport const LangTags: React.FC<LangTagsProps> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageLang, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getImageLang(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getImageLang(image))}\n    </Tag>\n  );\n};\n\ninterface ConstraintTagsProps extends TagProps {\n  tag: string;\n  labels: { key: string; value: string }[];\n  highlightKeyword?: string;\n}\nexport const ConstraintTags: React.FC<ConstraintTagsProps> = ({\n  tag,\n  labels,\n  highlightKeyword,\n  ...props\n}) => {\n  labels = labels || [];\n  const [, { getConstraints }] = useBackendAIImageMetaData();\n  const constraints = getConstraints(tag, labels);\n  return (\n    <Flex direction=\"row\" align=\"start\">\n      {!_.isEmpty(constraints?.[0]) ? (\n        <Tag color=\"blue\" {...props}>\n          <TextHighlighter keyword={highlightKeyword}>\n            {constraints[0]}\n          </TextHighlighter>\n        </Tag>\n      ) : null}\n      {!_.isEmpty(constraints?.[1]) ? (\n        <DoubleTag\n          color=\"cyan\"\n          highlightKeyword={highlightKeyword}\n          values={[\n            {\n              label: 'Customized',\n              color: 'cyan',\n            },\n            {\n              label: constraints[1],\n              color: 'cyan',\n            },\n          ]}\n          {...props}\n        />\n      ) : null}\n    </Flex>\n  );\n};\n\nconst SessionKernelTags: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n}> = ({ image, style = {} }, bordered) => {\n  image = image || '';\n  return (\n    <>\n      <ImageAliasNameAndBaseVersionTags image={image} />\n      <BaseImageTags image={image} />\n      <ArchitectureTags image={image} />\n    </>\n  );\n};\n\nexport default React.memo(SessionKernelTags);\n\ninterface ImageTagsProps extends TagProps {\n  tag: string;\n  labels: Array<{ key: string; value: string }>;\n  highlightKeyword?: string;\n}\nexport const ImageTags: React.FC<ImageTagsProps> = ({\n  tag,\n  labels,\n  highlightKeyword,\n  ...props\n}) => {\n  labels = labels || [];\n  const [, { getTags, tagAlias }] = useBackendAIImageMetaData();\n  const tags = getTags(tag, labels);\n  return (\n    <Flex direction=\"row\" align=\"start\">\n      {_.map(tags, (tag: { key: string; value: string }, index) => {\n        const isCustomized = tag.key === 'Customized';\n        const aliasedTag = tagAlias(tag.key + tag.value);\n        return _.isEqual(\n          aliasedTag,\n          preserveDotStartCase(tag.key + tag.value),\n        ) ? (\n          <DoubleTag\n            key={tag.key}\n            highlightKeyword={highlightKeyword}\n            values={[\n              {\n                label: tagAlias(tag.key),\n                color: isCustomized ? 'cyan' : 'blue',\n              },\n              {\n                label: tag.value,\n                color: isCustomized ? 'cyan' : 'blue',\n              },\n            ]}\n          />\n        ) : (\n          <Tag key={tag.key} color={isCustomized ? 'cyan' : 'blue'}>\n            <TextHighlighter keyword={highlightKeyword} key={index}>\n              {aliasedTag}\n            </TextHighlighter>\n          </Tag>\n        );\n      })}\n    </Flex>\n  );\n};\n","import { useUpdatableState } from '../hooks';\nimport useControllableState from '../hooks/useControllableState';\nimport Flex from './Flex';\nimport { InputNumber, Slider, InputNumberProps, SliderSingleProps } from 'antd';\nimport { SliderRangeProps } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\n\ntype OmitControlledProps<T> = Omit<T, 'value' | 'onChange'>;\n\ninterface InputNumberWithSliderProps {\n  min?: number;\n  max?: number;\n  step?: number | null;\n  disabled?: boolean;\n  value?: number;\n  onChange?: (value: number) => void;\n  inputNumberProps?: OmitControlledProps<InputNumberProps>;\n  sliderProps?:\n    | OmitControlledProps<SliderSingleProps>\n    | OmitControlledProps<SliderRangeProps>;\n}\nconst InputNumberWithSlider: React.FC<InputNumberWithSliderProps> = ({\n  min,\n  max,\n  step,\n  disabled,\n  inputNumberProps,\n  sliderProps,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableState(otherProps);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    // when step is 1, make sure the value is integer\n    if (step === 1 && value % 1 !== 0) {\n      setValue(_.max([Math.round(value), min]));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [step]);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    setTimeout(() => {\n      updateKey(value);\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        align=\"stretch\"\n        direction=\"column\"\n      >\n        <InputNumber\n          key={key}\n          ref={inputRef}\n          max={max}\n          min={min}\n          step={step ?? undefined}\n          disabled={disabled}\n          value={value}\n          onChange={setValue}\n          onBlur={() => {\n            if (_.isNumber(step) && step > 0) {\n              if (\n                _.isNumber(max) &&\n                max < _.toNumber(inputRef.current?.value || '0')\n              ) {\n                return; // do not update value if it is greater than max\n              }\n              const decimalCount = step.toString().split('.')[1]?.length || 0;\n              setValue(\n                _.max([\n                  _.toNumber(\n                    (\n                      Math.round(\n                        _.toNumber(inputRef.current?.value || '0') / step,\n                      ) * step\n                    ).toFixed(decimalCount),\n                  ),\n                  min,\n                ]),\n              );\n            }\n          }}\n          {...inputNumberProps}\n        />\n      </Flex>\n      <Flex direction=\"column\" align=\"stretch\" style={{ flex: 3 }}>\n        <Slider\n          max={max}\n          min={0}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={(value: any) => {\n            if (min !== undefined && value < min) {\n              return;\n            } else {\n              setValue(value);\n            }\n          }}\n          {...sliderProps}\n          // remove marks that are greater than max\n          marks={_.omitBy(sliderProps?.marks, (option, key) => {\n            return _.isNumber(max) ? _.parseInt(key) > max : false;\n          })}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default InputNumberWithSlider;\n","import { useSuspendedBackendaiClient } from '.';\nimport { Image } from '../components/ImageEnvironmentSelectFormItems';\nimport { AUTOMATIC_DEFAULT_SHMEM } from '../components/ResourceAllocationFormItems';\nimport { addNumberWithUnits, convertBinarySizeUnit } from '../helper';\nimport { ResourceSlotName, useResourceSlots } from '../hooks/backendai';\nimport { useSuspenseTanQuery } from './reactQueryAlias';\nimport { useResourceGroupsForCurrentProject } from './useCurrentProject';\nimport _ from 'lodash';\nimport { useMemo } from 'react';\n\nconst maxPerContainerRegex = /^max([A-Za-z0-9]+)PerContainer$/;\n\nexport const isMatchingMaxPerContainer = (configName: string, key: string) => {\n  const match = configName.match(maxPerContainerRegex);\n  if (match) {\n    const configLowerCase = match[1].toLowerCase();\n    const keyLowerCase = key.replaceAll(/[.-]/g, '').toLowerCase();\n    // Because some accelerator names are not the same as the config name, we need to check if the config name is a substring of the accelerator name\n    // cuda.shares => maxCUDASharesPerContainer\n    // cuda.device => maxCUDADevicesPerContainer (Not maxCUDADevicePerContainer)\n    return (\n      configLowerCase === keyLowerCase || configLowerCase === keyLowerCase + 's'\n    );\n  }\n  return false;\n};\nexport interface MergedResourceLimits {\n  accelerators: {\n    [key: string]:\n      | {\n          min?: number;\n          max?: number;\n        }\n      | undefined;\n  };\n  cpu?: {\n    min?: number;\n    max?: number;\n  };\n  mem?: {\n    min?: string;\n    max?: string;\n  };\n  shmem?: {\n    min?: string;\n    max?: string;\n  };\n}\n\ntype ResourceLimits = {\n  [key in ResourceSlotName]?: string | 'Infinity' | 'NaN';\n};\ntype ResourceUsing = ResourceLimits;\ntype ResourceRemaining = ResourceLimits;\ntype ScalingGroup = {\n  using: ResourceUsing;\n  remaining: ResourceRemaining;\n};\n\ntype ResourceSlots = {\n  cpu: string;\n  mem: string;\n  [key: string]: string;\n};\n\ntype RemainingSlots = {\n  cpu: number;\n  mem: number;\n  accelerators: {\n    [key: string]: number;\n  };\n};\n\nexport type ResourcePreset = {\n  name: string;\n  resource_slots: ResourceSlots;\n  shared_memory: string | null;\n  allocatable: boolean;\n};\n\ntype ResourceAllocation = {\n  keypair_limits: ResourceLimits;\n  keypair_using: ResourceUsing;\n  keypair_remaining: ResourceRemaining;\n  scaling_group_remaining: ResourceRemaining;\n  scaling_groups: {\n    [key: string]: ScalingGroup;\n  };\n  presets: ResourcePreset[];\n  group_limits: ResourceLimits;\n  group_using: ResourceUsing;\n  group_remaining: ResourceRemaining;\n};\n\ninterface Props {\n  currentProjectName: string;\n  currentImage?: Image;\n  currentResourceGroup?: string;\n  ignorePerContainerConfig?: boolean;\n}\n\n// determine resource limits and remaining for current resource group and current image in current project\nexport const useResourceLimitAndRemaining = ({\n  currentImage,\n  currentResourceGroup = '',\n  currentProjectName,\n  ignorePerContainerConfig = false,\n}: Props) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n  const { resourceGroups } = useResourceGroupsForCurrentProject();\n\n  const {\n    data: checkPresetInfo,\n    refetch,\n    isRefetching,\n  } = useSuspenseTanQuery<ResourceAllocation | null>({\n    queryKey: ['check-presets', currentProjectName, currentResourceGroup],\n    queryFn: () => {\n      if (\n        currentResourceGroup &&\n        _.some(resourceGroups, (rg) => rg.name === currentResourceGroup)\n      ) {\n        return baiClient.resourcePreset\n          .check({\n            group: currentProjectName,\n            scaling_group: currentResourceGroup,\n          })\n          .catch(() => {});\n      } else {\n        return null;\n      }\n    },\n    staleTime: 1000,\n    // suspense: !_.isEmpty(currentResourceGroup), //prevent flicking\n  });\n\n  const currentImageMinM =\n    _.find(currentImage?.resource_limits, (i) => i?.key === 'mem')?.min || '0g';\n\n  const resourceGroupResourceSize: {\n    cpu?: number;\n    mem?: string;\n    accelerators: {\n      [key: string]: number | undefined;\n    };\n  } = {\n    // scaling group all cpu (using + remaining), string type\n    cpu:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.cpu,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.cpu,\n      )\n        ? _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.cpu,\n          ) +\n          _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n              .cpu,\n          )\n        : undefined,\n    mem:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.mem,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.mem,\n      )\n        ? convertBinarySizeUnit(\n            _.toNumber(\n              checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.mem,\n            ) +\n              _.toNumber(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n                  .mem,\n              ) +\n              'b',\n            'g',\n            2,\n          )?.numberFixed + 'g'\n        : undefined,\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.[key],\n          ) &&\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.[\n              key\n            ],\n          )\n            ? _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.using[\n                  key\n                ],\n              ) +\n              _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]\n                  ?.remaining[key],\n              )\n            : undefined;\n        return result;\n      },\n      {} as {\n        [key: string]: number | undefined;\n      },\n    ),\n  };\n  const perContainerConfigs = useMemo(\n    () =>\n      _.omitBy(baiClient._config, (value, key) => {\n        return !maxPerContainerRegex.test(key);\n      }),\n    [baiClient._config],\n  );\n\n  const resourceLimits: MergedResourceLimits = {\n    cpu:\n      resourceSlots?.cpu === undefined\n        ? undefined\n        : {\n            min: _.max([\n              _.toNumber(\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'cpu')\n                  ?.min || '0',\n              ),\n            ]),\n            max: _.min([\n              ignorePerContainerConfig\n                ? undefined\n                : baiClient._config.maxCPUCoresPerContainer,\n              limitParser(checkPresetInfo?.keypair_limits.cpu),\n              limitParser(checkPresetInfo?.group_limits.cpu),\n              // resourceGroupResourceSize?.cpu,\n            ]),\n          },\n    mem:\n      resourceSlots?.mem === undefined\n        ? undefined\n        : {\n            // M to max of [ image's mem min, AUTOMATIC_DEFAULT_SHMEM]\n            // mem(M+S) should be larger than _.max([ image's mem min, AUTOMATIC_DEFAULT_SHMEM ]) + AUTOMATIC_DEFAULT_SHMEM (rule: S can not be larger than M)\n            min:\n              //handled by 'b' unit\n              addNumberWithUnits(\n                _.max([\n                  convertBinarySizeUnit(currentImageMinM, 'b')?.number,\n                  convertBinarySizeUnit(AUTOMATIC_DEFAULT_SHMEM, 'b')?.number,\n                  0,\n                ]) + 'b',\n                AUTOMATIC_DEFAULT_SHMEM,\n              ),\n            max:\n              //handled by 'g(GiB)' unit\n              _.min([\n                ignorePerContainerConfig\n                  ? undefined\n                  : baiClient._config.maxMemoryPerContainer,\n                limitParser(checkPresetInfo?.keypair_limits.mem) &&\n                  convertBinarySizeUnit(\n                    limitParser(checkPresetInfo?.keypair_limits.mem) + '',\n                    'g',\n                  )?.number,\n                limitParser(checkPresetInfo?.group_limits.mem) &&\n                  convertBinarySizeUnit(\n                    limitParser(checkPresetInfo?.group_limits.mem) + '',\n                    'g',\n                  )?.number,\n                // scaling group all mem (using + remaining), string type\n                // resourceGroupResourceSize?.mem &&\n                //   iSizeToSize(resourceGroupResourceSize?.mem + '', 'g')?.number,\n              ]) + 'g',\n          },\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        const perContainerLimit =\n          _.find(perContainerConfigs, (configValue, configName) => {\n            return isMatchingMaxPerContainer(configName, key);\n          }) ?? baiClient._config['cuda.device']; // FIXME: temporally `cuda.device` config, when undefined\n\n        result[key] = {\n          min: parseInt(\n            _.filter(\n              currentImage?.resource_limits,\n              (supportedAcceleratorInfo) => {\n                return supportedAcceleratorInfo?.key === key;\n              },\n            )?.[0]?.min || '0',\n          ),\n          max: _.min([\n            perContainerLimit || 8,\n            limitParser(\n              checkPresetInfo?.keypair_limits[key as ResourceSlotName],\n            ),\n            limitParser(checkPresetInfo?.group_limits[key as ResourceSlotName]),\n            // scaling group all cpu (using + remaining), string type\n            // resourceGroupResourceSize.accelerators[key],\n          ]),\n        };\n        return result;\n      },\n      {} as MergedResourceLimits['accelerators'],\n    ),\n  };\n  const remaining: RemainingSlots = {\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          _.min([\n            _.toNumber(\n              checkPresetInfo?.keypair_remaining[key as ResourceSlotName],\n            ),\n            _.toNumber(\n              checkPresetInfo?.group_remaining[key as ResourceSlotName],\n            ),\n            _.toNumber(\n              checkPresetInfo?.scaling_group_remaining[key as ResourceSlotName],\n            ),\n          ]) ?? Number.MAX_SAFE_INTEGER;\n        return result;\n      },\n      {} as RemainingSlots['accelerators'],\n    ),\n    cpu:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.cpu),\n        limitParser(checkPresetInfo?.group_remaining.cpu),\n        limitParser(checkPresetInfo?.scaling_group_remaining.cpu),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n    mem:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.mem),\n        limitParser(checkPresetInfo?.group_remaining.mem),\n        limitParser(checkPresetInfo?.scaling_group_remaining.mem),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n  };\n\n  return [\n    {\n      resourceGroupResourceSize,\n      resourceLimits,\n      remaining,\n      currentImageMinM,\n      isRefetching,\n      checkPresetInfo,\n    },\n    {\n      refetch,\n    },\n  ] as const;\n};\n\nconst limitParser = (limit: string | undefined) => {\n  if (limit === undefined) {\n    return undefined;\n  } else if (limit === 'Infinity') {\n    return undefined;\n  } else if (limit === 'NaN') {\n    return undefined;\n  } else {\n    return _.toNumber(limit);\n  }\n};\n","import { useBAIPaginationOptionState } from '../hooks/reactPaginationQueryOptions';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport { AgentSelectQuery } from './__generated__/AgentSelectQuery.graphql';\nimport { useControllableValue } from 'ahooks';\nimport { Select, SelectProps } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ninterface Props extends SelectProps {\n  autoSelectDefault?: boolean;\n  fetchKey?: string;\n  resourceGroup?: string | null;\n}\n\nconst AgentSelect: React.FC<Props> = ({\n  fetchKey,\n  resourceGroup,\n  ...selectProps\n}) => {\n  const { t } = useTranslation();\n  const [value, setValue] = useControllableValue(selectProps);\n\n  const { baiPaginationOption } = useBAIPaginationOptionState({\n    current: 1,\n    pageSize: 20,\n  });\n\n  const { agent_summary_list } = useLazyLoadQuery<AgentSelectQuery>(\n    graphql`\n      query AgentSelectQuery(\n        $limit: Int!\n        $offset: Int!\n        $status: String\n        $filter: String\n        $scaling_group: String\n      ) {\n        agent_summary_list(\n          limit: $limit\n          offset: $offset\n          status: $status\n          filter: $filter\n          scaling_group: $scaling_group\n        ) {\n          items {\n            id\n            status\n            schedulable\n            available_slots\n            occupied_slots\n            architecture\n          }\n          total_count\n        }\n      }\n    `,\n    {\n      limit: baiPaginationOption.limit,\n      offset: baiPaginationOption.offset,\n      status: 'ALIVE',\n      filter: 'schedulable is true', // true, false, null\n      scaling_group: resourceGroup,\n    },\n    {\n      fetchPolicy: 'network-only',\n      fetchKey,\n    },\n  );\n\n  const agentOptions = _.map(agent_summary_list?.items, (agent) => {\n    const availableSlotsInfo: {\n      [key in string]: string;\n    } = JSON.parse(agent?.available_slots ?? '{}');\n    const occupiedSlotsInfo: {\n      [key in string]: string;\n    } = JSON.parse(agent?.occupied_slots ?? '{}');\n    const remainingSlotsInfo: {\n      [key in string]: number;\n    } = _.chain(availableSlotsInfo)\n      .mapValues((value, key) => {\n        if (key.endsWith('.shares')) {\n          return parseFloat(value) - parseFloat(occupiedSlotsInfo[key] ?? 0);\n        } else {\n          return parseInt(value) - parseInt(occupiedSlotsInfo[key] ?? 0);\n        }\n      })\n      .value();\n    return {\n      label: (\n        <Flex direction=\"row\" justify=\"between\">\n          {agent?.id}\n          <Flex direction=\"row\" gap={'xxs'}>\n            {_.map(remainingSlotsInfo, (slot, key) => {\n              return (\n                <ResourceNumber\n                  key={key}\n                  // @ts-ignore\n                  type={key}\n                  value={slot.toString()}\n                  hideTooltip\n                />\n              );\n            })}\n          </Flex>\n        </Flex>\n      ),\n      value: agent?.id,\n    };\n  });\n\n  return (\n    <Select\n      onChange={(value, option) => {\n        setValue(value, option);\n      }}\n      {...selectProps}\n      value={value}\n      options={[\n        { label: t('session.launcher.autoSelect'), value: 'auto' },\n        ...agentOptions,\n      ]}\n    />\n  );\n};\n\nexport default AgentSelect;\n","import { compareNumberWithUnits, convertBinarySizeUnit } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport useControllableState from '../hooks/useControllableState';\nimport DynamicUnitInputNumber, {\n  DynamicUnitInputNumberProps,\n} from './DynamicUnitInputNumber';\nimport Flex from './Flex';\nimport { Slider, theme } from 'antd';\nimport { SliderMarks } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\n\nexport interface DynamicUnitInputNumberWithSliderProps\n  extends DynamicUnitInputNumberProps {\n  extraMarks?: SliderMarks;\n  hideSlider?: boolean;\n  warn?: string;\n  step?: number;\n}\nconst DynamicUnitInputNumberWithSlider: React.FC<\n  DynamicUnitInputNumberWithSliderProps\n> = ({\n  min = '0m',\n  max = '32g',\n  warn,\n  units = ['m', 'g'],\n  extraMarks,\n  hideSlider,\n  step = 0.05,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableState<string | undefined | null>(\n    otherProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const { token } = theme.useToken();\n  const minGiB = useMemo(() => convertBinarySizeUnit(min, 'g', 2), [min]);\n  const maxGiB = useMemo(() => convertBinarySizeUnit(max, 'g', 2), [max]);\n  const valueGiB = useMemo(\n    () => convertBinarySizeUnit(value || '0g', 'g', 2),\n    [value],\n  );\n\n  // const warnPercent = useMemo(() => {\n  //   return warn\n  //     ? ((iSizeToSize(warn, 'g', 2)?.number || 0) / (maxGiB?.number || 1)) * 100\n  //     : undefined;\n  // }, [warn, maxGiB?.number]);\n  // console.log('##marks', marks);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    setTimeout(() => {\n      updateKey(value?.toString());\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isMinOversMaxValue =\n    _.isNumber(minGiB?.number) &&\n    _.isNumber(maxGiB?.number) &&\n    minGiB?.number > maxGiB?.number;\n\n  const filterOutInvalidMarks = (marks: SliderMarks) => {\n    return _.omitBy({ ...marks }, (option, key) => {\n      const markNumber = parseFloat(key);\n      return (\n        minGiB &&\n        maxGiB &&\n        (minGiB?.number > markNumber || maxGiB?.number < markNumber)\n      );\n    });\n  };\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        direction=\"column\"\n        align=\"stretch\"\n      >\n        <DynamicUnitInputNumber\n          {...otherProps}\n          key={key}\n          min={min}\n          max={max}\n          units={units}\n          // set value to 0mib when min value overs max value\n          value={value}\n          onChange={(nextValue) => {\n            setValue(nextValue);\n          }}\n          style={{\n            minWidth: 130,\n          }}\n          roundStep={step}\n          changeOnBlur={!isMinOversMaxValue}\n        />\n      </Flex>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 3,\n          ...(hideSlider && {\n            visibility: 'hidden',\n            height: 0,\n          }),\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {/* {warn && (\n            <Flex\n              direction=\"row\"\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 14.5,\n                width: '100%',\n                height: 4,\n                padding: '0 5px',\n              }}\n              align=\"start\"\n            >\n              <div\n                style={{\n                  width: warnPercent + '%',\n                  height: 4,\n                }}\n              ></div>\n              <div\n                style={{\n                  marginTop: 3,\n                  marginLeft: -3.5,\n                  width: 0,\n                  height: 0,\n\n                  borderTop: '4px solid transparent',\n                  borderLeft: '4px solid transparent',\n                  borderRight: '4px solid transparent',\n                  borderBottom: `7px solid ${token.colorWarning}`,\n                }}\n              ></div>\n            </Flex>\n          )} */}\n          <Slider\n            max={maxGiB?.number}\n            styles={{\n              track:\n                (warn && {\n                  backgroundColor:\n                    compareNumberWithUnits(warn, value || '0b') < 0\n                      ? token.colorWarning\n                      : undefined,\n                }) ||\n                undefined,\n              rail: {\n                // backgroundColor:'red',\n                // fill: 'red',\n              },\n            }}\n            step={step}\n            // min={minGiB.number}  // DO NOT use min, because slider left should be 0\n\n            // For the slider, when min value overs max value, it will not work.\n            // In this case, hide all information and disabled the slider.\n            // Most of case, it's not a good idea to set the different value to the control value,\n            // but in this case, it's okay to hide all information and disabled the slider.\n            value={isMinOversMaxValue ? 0 : valueGiB?.number}\n            disabled={isMinOversMaxValue}\n            tooltip={{\n              formatter: isMinOversMaxValue\n                ? null\n                : (value = 0) => {\n                    return value < 1\n                      ? `${(value * 1024).toFixed(2)} MiB`\n                      : `${value.toFixed(2)} GiB`;\n                  },\n            }}\n            onChange={(newNumValue) => {\n              if (minGiB?.number && minGiB.number > newNumValue) {\n                setValue(min);\n              } else {\n                setValue(\n                  newNumValue < 1\n                    ? `${newNumValue * 1024}m`\n                    : `${newNumValue}g`,\n                );\n              }\n            }}\n            marks={filterOutInvalidMarks({\n              ...(minGiB &&\n                _.isNumber(minGiB?.number) && {\n                  [minGiB.number]: {\n                    style: {\n                      color: token.colorTextSecondary,\n                    },\n                    // if 0, without unit\n                    label:\n                      minGiB.number === 0\n                        ? minGiB.number\n                        : minGiB.number >= 1\n                          ? minGiB.number + 'g'\n                          : minGiB.number * 1024 + 'm',\n                  },\n                }),\n              // extra: remaining mark code should be located before max mark code to prevent overlapping when it is same value\n              ..._.omitBy(extraMarks, (option, key) => {\n                return _.isNumber(maxGiB?.number)\n                  ? _.parseInt(key) > (maxGiB?.number as number)\n                  : false;\n              }),\n              ...(maxGiB?.number && {\n                [maxGiB.number]: {\n                  style: {\n                    color: token.colorTextSecondary,\n                  },\n                  label:\n                    maxGiB.number === 0\n                      ? maxGiB.number\n                      : maxGiB.number >= 1\n                        ? maxGiB.number + 'g'\n                        : maxGiB.number * 1024 + 'm',\n                },\n              }),\n            })}\n          />\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default DynamicUnitInputNumberWithSlider;\n","import { localeCompare } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { ResourceSlotName, useResourceSlots } from '../hooks/backendai';\nimport useControllableState from '../hooks/useControllableState';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport {\n  ResourcePresetSelectQuery,\n  ResourcePresetSelectQuery$data,\n} from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport { useThrottleFn } from 'ahooks';\nimport { Select, Tooltip, theme } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\n\nexport type ResourcePreset = NonNullable<\n  NonNullable<ResourcePresetSelectQuery$data['resource_presets']>[number]\n>;\nexport interface ResourcePresetSelectProps\n  extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n  allocatablePresetNames?: string[];\n  showMinimumRequired?: boolean;\n  showCustom?: boolean;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  allocatablePresetNames,\n  showCustom,\n  showMinimumRequired,\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [resourceSlots] = useResourceSlots();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const [controllableValue, setControllableValue] =\n    useControllableState(selectProps);\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n\n  return (\n    <Select\n      loading={isPendingUpdate}\n      options={[\n        ...(showCustom\n          ? [\n              {\n                value: 'custom',\n                label: (\n                  <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n                    <EditOutlined /> {t('session.launcher.CustomAllocation')}\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.CustomAllocation'),\n              },\n            ]\n          : []),\n        ...(showMinimumRequired\n          ? [\n              {\n                value: 'minimum-required',\n                label: (\n                  <Flex gap={'xs'}>\n                    {t('session.launcher.MiniumAllocation')}\n                    <Tooltip\n                      title={t('session.launcher.MiniumAllocationTooltip')}\n                    >\n                      <InfoCircleOutlined\n                        style={{\n                          color: token.colorTextSecondary,\n                        }}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.MiniumAllocation'),\n              },\n            ]\n          : []),\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset, index) => {\n            const slotsInfo: {\n              [key in ResourceSlotName]: string;\n            } = JSON.parse(preset?.resource_slots || '{}');\n            const disabled = allocatablePresetNames\n              ? !allocatablePresetNames.includes(preset?.name || '')\n              : undefined;\n            return {\n              value: preset?.name,\n              label: (\n                <Flex direction=\"row\" justify=\"between\" gap={'xs'}>\n                  {preset?.name}\n                  <Flex\n                    direction=\"row\"\n                    gap={'xxs'}\n                    style={\n                      {\n                        // color: 'black',\n                        // opacity: isAvailable ? 1 : 0.4,\n                      }\n                    }\n                  >\n                    {_.map(\n                      _.omitBy(slotsInfo, (slot, key) =>\n                        _.isEmpty(resourceSlots[key as ResourceSlotName]),\n                      ),\n                      (slot, key) => {\n                        return (\n                          <ResourceNumber\n                            key={key}\n                            // @ts-ignore\n                            type={key}\n                            value={slot}\n                            hideTooltip\n                          />\n                        );\n                      },\n                    )}\n                  </Flex>\n                </Flex>\n              ),\n              preset,\n              disabled: disabled,\n            };\n          })\n            .sort(\n              (\n                a,\n                b, // by disabled\n              ) => (a.disabled === b.disabled ? 0 : a.disabled ? 1 : -1),\n            )\n            .sort((a, b) => localeCompare(a.value, b.value)), // by name\n        },\n      ]}\n      showSearch\n      // Set props from parent and override it\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValue}\n      optionLabelProp={\n        _.includes(['custom', 'minimum-required'], controllableValue)\n          ? 'selectedLabel'\n          : 'label'\n      }\n      onDropdownVisibleChange={(open) => {\n        selectProps.onDropdownVisibleChange &&\n          selectProps.onDropdownVisibleChange(open);\n        if (open) {\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import {\n  addNumberWithUnits,\n  compareNumberWithUnits,\n  convertBinarySizeUnit,\n} from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport { useCurrentKeyPairResourcePolicyLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport {\n  MergedResourceLimits,\n  ResourcePreset,\n  useResourceLimitAndRemaining,\n} from '../hooks/useResourceLimitAndRemaining';\nimport AgentSelect from './AgentSelect';\nimport BAISelect from './BAISelect';\nimport DynamicUnitInputNumberWithSlider from './DynamicUnitInputNumberWithSlider';\nimport Flex from './Flex';\nimport {\n  Image,\n  ImageEnvironmentFormInput,\n} from './ImageEnvironmentSelectFormItems';\nimport InputNumberWithSlider from './InputNumberWithSlider';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport { CaretDownOutlined, ReloadOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  Col,\n  Divider,\n  Form,\n  Radio,\n  Row,\n  Switch,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { Suspense, useEffect, useMemo, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport const AUTOMATIC_DEFAULT_SHMEM = '64m';\nexport const RESOURCE_ALLOCATION_INITIAL_FORM_VALUES: DeepPartial<ResourceAllocationFormValue> =\n  {\n    resource: {\n      cpu: 0,\n      mem: '0g',\n      shmem: '0g',\n      accelerator: 0,\n    },\n    num_of_sessions: 1,\n    cluster_mode: 'single-node',\n    cluster_size: 1,\n    enabledAutomaticShmem: true,\n    agent: 'auto',\n  };\n\nexport const isMinOversMaxValue = (min: number, max: number) => {\n  return min >= max;\n};\n\nexport interface ResourceAllocationFormValue {\n  resource: {\n    cpu: number;\n    mem: string;\n    shmem: string;\n    accelerator: number;\n    acceleratorType: string;\n  };\n  resourceGroup: string;\n  num_of_sessions?: number;\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  enabledAutomaticShmem: boolean;\n  allocationPreset?: string;\n  agent?: string;\n}\n\ntype MergedResourceAllocationFormValue = ResourceAllocationFormValue &\n  ImageEnvironmentFormInput;\n\ninterface ResourceAllocationFormItemsProps {\n  enableAgentSelect?: boolean;\n  enableNumOfSessions?: boolean;\n  enableResourcePresets?: boolean;\n  showRemainingWarning?: boolean;\n  forceImageMinValues?: boolean;\n}\n\nconst ResourceAllocationFormItems: React.FC<\n  ResourceAllocationFormItemsProps\n> = ({\n  enableAgentSelect = false,\n  enableNumOfSessions,\n  enableResourcePresets,\n  forceImageMinValues = false,\n  showRemainingWarning = false,\n}) => {\n  const form = Form.useFormInstance<MergedResourceAllocationFormValue>();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [{ keypairResourcePolicy, sessionLimitAndRemaining }] =\n    useCurrentKeyPairResourcePolicyLazyLoadQuery();\n\n  const [agentFetchKey, updateAgentFetchKey] = useUpdatableState('first');\n  const [isPendingAgentList, startAgentListTransition] = useTransition();\n\n  const currentProject = useCurrentProjectValue();\n  const currentResourceGroupInForm =\n    Form.useWatch(['resourceGroup'], {\n      form,\n      preserve: true,\n    }) || form.getFieldValue('resourceGroup');\n\n  const currentImage = Form.useWatch(['environments', 'image'], {\n    form,\n    preserve: true,\n  });\n  const currentAllocationPreset = Form.useWatch(['allocationPreset'], {\n    form,\n    preserve: true,\n  });\n  const [{ currentImageMinM, remaining, resourceLimits, checkPresetInfo }] =\n    useResourceLimitAndRemaining({\n      currentProjectName: currentProject.name,\n      currentResourceGroup: currentResourceGroupInForm || undefined, // global currentResourceGroup can be null\n      currentImage: currentImage,\n    });\n\n  const { mergedResourceSlots, resourceSlotsInRG: resourceSlots } =\n    useResourceSlotsDetails(currentResourceGroupInForm || undefined);\n\n  const acceleratorSlots = _.omitBy(resourceSlots, (value, key) => {\n    if (['cpu', 'mem', 'shmem'].includes(key)) return true;\n\n    if (\n      !resourceLimits.accelerators[key]?.max ||\n      resourceLimits.accelerators[key]?.max === 0\n    )\n      return true;\n    return false;\n  });\n\n  const currentImageAcceleratorLimits = useMemo(\n    () =>\n      _.filter(currentImage?.resource_limits, (limit) =>\n        limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n      ),\n    [currentImage?.resource_limits],\n  );\n\n  const sessionSliderLimitAndRemaining = {\n    min: 1,\n    max: sessionLimitAndRemaining.max,\n    remaining: sessionLimitAndRemaining.remaining,\n  };\n\n  const allocatablePresetNames = useMemo(() => {\n    return getAllocatablePresetNames(\n      checkPresetInfo?.presets,\n      resourceLimits,\n      currentImage,\n    );\n  }, [checkPresetInfo?.presets, resourceLimits, currentImage]);\n\n  const ensureValidAcceleratorType = useEventNotStable(() => {\n    const currentAcceleratorType = form.getFieldValue([\n      'resource',\n      'acceleratorType',\n    ]);\n    // If the current accelerator type is not available,\n    // change accelerator type to the first supported accelerator\n    const nextAcceleratorType: string = acceleratorSlots[currentAcceleratorType]\n      ? currentAcceleratorType\n      : _.keys(acceleratorSlots)[0];\n\n    form.setFieldsValue({\n      resource: {\n        acceleratorType: nextAcceleratorType || currentAcceleratorType,\n      },\n    });\n  });\n\n  const updateResourceFieldsBasedOnImage = useEventNotStable(\n    (force?: boolean) => {\n      // when image changed, set value of resources to min value only if it's larger than current value\n      const minimumResources: Partial<ResourceAllocationFormValue['resource']> =\n        {\n          cpu: resourceLimits.cpu?.min,\n          mem:\n            convertBinarySizeUnit(\n              (convertBinarySizeUnit(resourceLimits.shmem?.min, 'm')?.number ||\n                0) +\n                (convertBinarySizeUnit(resourceLimits.mem?.min, 'm')?.number ||\n                  0) +\n                'm',\n              'g',\n            )?.number + 'g', //to prevent loosing precision\n        };\n\n      // NOTE: accelerator value setting is done inside the conditional statement\n      if (currentImageAcceleratorLimits.length > 0) {\n        if (\n          _.find(\n            currentImageAcceleratorLimits,\n            (limit) =>\n              limit?.key ===\n              form.getFieldValue(['resource', 'acceleratorType']),\n          )\n        ) {\n          // if current selected accelerator type is supported in the selected image,\n          minimumResources.acceleratorType = form.getFieldValue([\n            'resource',\n            'acceleratorType',\n          ]);\n          minimumResources.accelerator =\n            resourceLimits.accelerators[\n              form.getFieldValue(['resource', 'acceleratorType'])\n            ]?.min;\n        } else {\n          // if current selected accelerator type is not supported in the selected image,\n          // change accelerator type to the first supported accelerator type.\n          const nextImageSelectorType: string | undefined | null = // NOTE:\n            // filter from resourceSlots since resourceSlots and supported image could be non-identical.\n            // resourceSlots returns \"all resources enable to allocate(including AI accelerator)\"\n            // imageAcceleratorLimit returns \"all resources that is supported in the selected image\"\n            _.filter(currentImageAcceleratorLimits, (acceleratorInfo: any) =>\n              _.keys(resourceSlots).includes(acceleratorInfo?.key),\n            )[0]?.key;\n\n          if (nextImageSelectorType) {\n            minimumResources.accelerator =\n              resourceLimits.accelerators[nextImageSelectorType]?.min;\n            minimumResources.acceleratorType = nextImageSelectorType;\n          }\n        }\n      } else {\n        minimumResources.accelerator = 0;\n      }\n\n      if (!forceImageMinValues && !force) {\n        // delete keys that is not less than current value\n        (['cpu', 'accelerator'] as const).forEach((key) => {\n          const minNum = minimumResources[key];\n          if (\n            _.isNumber(minNum) &&\n            minNum < form.getFieldValue(['resource', key])\n          ) {\n            delete minimumResources[key];\n          }\n        });\n        (['mem', 'shmem'] as const).forEach((key) => {\n          const minNumStr = minimumResources[key];\n          if (\n            _.isString(minNumStr) &&\n            compareNumberWithUnits(\n              minNumStr,\n              form.getFieldValue(['resource', key]),\n            ) < 0\n          ) {\n            delete minimumResources[key];\n          }\n        });\n      }\n\n      form.setFieldsValue({\n        resource: {\n          ...minimumResources,\n        },\n      });\n\n      // set to 0 when currentImage doesn't support any AI accelerator\n      if (currentImage && currentImageAcceleratorLimits.length === 0) {\n        form.setFieldValue(['resource', 'accelerator'], 0);\n      }\n\n      if (form.getFieldValue('enabledAutomaticShmem')) {\n        runShmemAutomationRule(form.getFieldValue(['resource', 'mem']) || '0g');\n      }\n      form\n        .validateFields(['resource'], {\n          recursive: true,\n        })\n        .catch(() => {});\n    },\n  );\n\n  const updateResourceFieldsBasedOnPreset = useEventNotStable(\n    (name: string) => {\n      const preset = _.find(\n        checkPresetInfo?.presets,\n        (preset) => preset.name === name,\n      );\n      const slots = _.pick(preset?.resource_slots, _.keys(resourceSlots));\n      const mem = convertBinarySizeUnit(\n        (slots?.mem || 0) + 'b',\n        'g',\n        2,\n      )?.numberUnit;\n      const acceleratorObj = _.omit(slots, ['cpu', 'mem', 'shmem']);\n\n      // Select the first matched AI accelerator type and value\n      const firstMatchedAcceleratorType = _.find(\n        _.keys(acceleratorSlots),\n        (value) => acceleratorObj[value] !== undefined,\n      );\n\n      let acceleratorSetting: {\n        acceleratorType?: string;\n        accelerator: number;\n      } = {\n        accelerator: 0,\n      };\n      if (firstMatchedAcceleratorType) {\n        acceleratorSetting = {\n          acceleratorType: firstMatchedAcceleratorType,\n          accelerator: Number(acceleratorObj[firstMatchedAcceleratorType] || 0),\n        };\n      }\n      form.setFieldsValue({\n        resource: {\n          // ...slots,\n          ...acceleratorSetting,\n          // transform to GB based on preset values\n          mem,\n          shmem: convertBinarySizeUnit(\n            (preset?.shared_memory || 0) + 'b',\n            'g',\n            2,\n          )?.numberUnit,\n          cpu: parseInt(slots?.cpu || '0') || 0,\n        },\n      });\n      runShmemAutomationRule(mem || '0g');\n\n      form\n        .validateFields(['resource'], {\n          recursive: true,\n        })\n        .catch(() => {});\n    },\n  );\n\n  const runShmemAutomationRule = (M_plus_S: string) => {\n    // if M+S > 4G, S can be 1G regard to current image's minimum mem(M)\n    if (\n      // M+S > 4G\n      compareNumberWithUnits(M_plus_S, '4g') >= 0 &&\n      // M+S > M+1G\n      compareNumberWithUnits(\n        M_plus_S,\n        addNumberWithUnits(currentImageMinM, '1g') || '0b',\n      ) >= 0 &&\n      // if 1G < AUTOMATIC_DEFAULT_SHMEM, no need to apply 1G rule\n      compareNumberWithUnits('1g', AUTOMATIC_DEFAULT_SHMEM) > 0\n    ) {\n      form.setFieldValue(['resource', 'shmem'], '1g');\n    } else {\n      form.setFieldValue(['resource', 'shmem'], AUTOMATIC_DEFAULT_SHMEM);\n    }\n  };\n\n  // This effect is\n  // - for auto selecting the preset right after initialling the form and resourceSlots are loaded\n  // - ensuring accelerator type is valid when related data is changed\n  useEffect(() => {\n    // `auto-select` is the initial value of the form\n    // if resourceSlots is loaded, update the form based on the resourceSlots\n    if (\n      currentAllocationPreset === 'auto-select' &&\n      !_.isUndefined(resourceSlots)\n    ) {\n      if (\n        _.includes(\n          ['custom', 'minimum-required'],\n          form.getFieldValue('allocationPreset'),\n        )\n      ) {\n        // if the current preset is custom or minimum-required, do nothing.\n      } else {\n        if (\n          allocatablePresetNames.includes(\n            form.getFieldValue('allocationPreset'),\n          )\n        ) {\n          // if the current preset is available in the current resource group, do nothing.\n        } else if (enableResourcePresets && allocatablePresetNames[0]) {\n          const autoSelectedPreset = _.sortBy(allocatablePresetNames)[0];\n          form.setFieldsValue({\n            allocationPreset: autoSelectedPreset,\n          });\n          updateResourceFieldsBasedOnPreset(autoSelectedPreset);\n        } else {\n          // if the current preset is not available in the current resource group, set to custom\n          form.setFieldsValue({\n            allocationPreset: 'custom',\n          });\n        }\n      }\n      ensureValidAcceleratorType();\n      form\n        .validateFields(['resource'], {\n          recursive: true,\n        })\n        .catch(() => {});\n    } else {\n      ensureValidAcceleratorType();\n    }\n  }, [\n    currentAllocationPreset,\n    allocatablePresetNames,\n    resourceSlots,\n    form,\n    enableResourcePresets,\n    // below are functions wrapped by useEventNotStable\n    ensureValidAcceleratorType,\n    updateResourceFieldsBasedOnPreset,\n  ]);\n\n  // This effect is for auto updating the resource fields when minimum-required preset is selected\n  useEffect(() => {\n    if (currentAllocationPreset === 'minimum-required') {\n      updateResourceFieldsBasedOnImage(true);\n    }\n  }, [currentImage, currentAllocationPreset, updateResourceFieldsBasedOnImage]);\n\n  return (\n    <>\n      <Form.Item\n        name=\"resourceGroup\"\n        label={t('session.ResourceGroup')}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <ResourceGroupSelect projectName={currentProject.name} showSearch />\n      </Form.Item>\n\n      {enableResourcePresets ? (\n        <Form.Item\n          label={t('resourcePreset.ResourcePresets')}\n          name=\"allocationPreset\"\n          required\n          style={{ marginBottom: token.marginXS }}\n        >\n          <ResourcePresetSelect\n            showCustom={baiClient._config.allowCustomResourceAllocation}\n            showMinimumRequired={\n              baiClient._config.allowCustomResourceAllocation\n            }\n            onChange={(value, options) => {\n              switch (value) {\n                case 'custom':\n                  break;\n                case 'minimum-required':\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  // updating resource fields based on preset is handled in useEffect because it has another dependency(image).\n                  break;\n                default:\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnPreset(value);\n                  break;\n              }\n            }}\n            allocatablePresetNames={allocatablePresetNames}\n          />\n        </Form.Item>\n      ) : null}\n      <Card\n        style={{\n          marginBottom: token.margin,\n          display: baiClient._config.allowCustomResourceAllocation\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlots?.cpu && (\n                  <Form.Item\n                    name={['resource', 'cpu']}\n                    // initialValue={0}\n                    label={\n                      mergedResourceSlots?.cpu?.human_readable_name || 'CPU'\n                    }\n                    tooltip={{\n                      placement: 'right',\n                      title: <Trans i18nKey={'session.launcher.DescCPU'} />,\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        type: 'number',\n                        min: resourceLimits.cpu?.min,\n                        // TODO: set message\n                      },\n                      {\n                        type: 'number',\n                        max: resourceLimits.cpu?.max,\n                      },\n                      {\n                        warningOnly: true,\n                        validator: async (rule, value: number) => {\n                          if (\n                            _.isNumber(resourceLimits.cpu?.min) &&\n                            _.isNumber(resourceLimits.cpu?.max) &&\n                            isMinOversMaxValue(\n                              resourceLimits.cpu?.min,\n                              resourceLimits.cpu?.max,\n                            )\n                          ) {\n                            return Promise.reject(\n                              t(\n                                'session.launcher.InsufficientAllocationOfResourcesWarning',\n                              ),\n                            );\n                          }\n                          if (showRemainingWarning) {\n                            if (\n                              _.isNumber(remaining.cpu) &&\n                              value > remaining.cpu\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.EnqueueComputeSessionWarning',\n                                ),\n                              );\n                            }\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                    ]}\n                  >\n                    <InputNumberWithSlider\n                      inputNumberProps={{\n                        addonAfter:\n                          mergedResourceSlots?.cpu?.display_unit ||\n                          t('session.launcher.Core'),\n                      }}\n                      sliderProps={{\n                        marks: {\n                          // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                          ...(remaining.cpu\n                            ? {\n                                [remaining.cpu]: {\n                                  label: <RemainingMark />,\n                                },\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.min\n                            ? {\n                                [resourceLimits.cpu?.min]:\n                                  resourceLimits.cpu?.min,\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.max\n                            ? {\n                                [resourceLimits.cpu?.max]: {\n                                  style: {\n                                    color: token.colorTextSecondary,\n                                  },\n                                  label: resourceLimits.cpu?.max,\n                                },\n                              }\n                            : {}),\n                        },\n                      }}\n                      min={resourceLimits.cpu?.min}\n                      max={resourceLimits.cpu?.max}\n                      step={1}\n                      onChange={() => {\n                        form.setFieldValue('allocationPreset', 'custom');\n                      }}\n                    />\n                  </Form.Item>\n                )}\n                {resourceSlots?.mem && (\n                  <Form.Item\n                    label={t('session.launcher.Memory')}\n                    tooltip={{\n                      placement: 'right',\n                      props: {\n                        onClick: (e: any) => e.preventDefault(),\n                      },\n                      title: (\n                        <Flex\n                          direction=\"column\"\n                          onClick={(e) => e.preventDefault()}\n                        >\n                          <Trans i18nKey={'session.launcher.DescMemory'} />\n                          {/* <Divider\n                            style={{\n                              margin: 0,\n                              backgroundColor: token.colorBorderSecondary,\n                            }}\n                          />\n                         \n                          <Trans\n                            i18nKey={'session.launcher.DescSharedMemory'}\n                          /> */}\n                        </Flex>\n                      ),\n                    }}\n                    required\n                  >\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.resource.shmem !== next.resource.shmem\n                      }\n                    >\n                      {() => {\n                        return (\n                          <Form.Item\n                            name={['resource', 'mem']}\n                            noStyle\n                            rules={[\n                              {\n                                required: true,\n                              },\n                              {\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    _.isString(value) &&\n                                    resourceLimits.mem?.max &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.max,\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('general.MaxValueNotification', {\n                                        name: t('session.launcher.Memory'),\n                                        max:\n                                          _.toUpper(\n                                            resourceLimits.mem?.max || '0g',\n                                          ) + 'iB',\n                                      }),\n                                      // t('session.launcher.MinMemory', {\n                                      //   size: _.toUpper(\n                                      //     resourceLimits.mem?.min || '0g',\n                                      //   ),\n                                      // }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                // TODO: min of mem should be shmem + image's mem limit??\n                                validator: async (rule, value: string) => {\n                                  // const memMinPlusShmem =\n                                  //   addNumberWithUnits(\n                                  //     resourceLimits.mem?.min,\n                                  //     form.getFieldValue(['resource', 'shmem']),\n                                  //   ) || '0b';\n\n                                  if (\n                                    !_.isElement(value) &&\n                                    resourceLimits.mem?.min &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.min || '0g',\n                                    ) < 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('session.launcher.MinMemory', {\n                                        size: _.toUpper(\n                                          resourceLimits.mem?.min || '0g',\n                                        ),\n                                      }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                warningOnly: true,\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    compareNumberWithUnits(\n                                      resourceLimits.mem?.min as string,\n                                      resourceLimits.mem?.max as string,\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      t(\n                                        'session.launcher.InsufficientAllocationOfResourcesWarning',\n                                      ),\n                                    );\n                                  }\n                                  if (showRemainingWarning) {\n                                    if (\n                                      !_.isElement(value) &&\n                                      resourceLimits.mem &&\n                                      compareNumberWithUnits(\n                                        value,\n                                        remaining.mem + 'b',\n                                      ) > 0\n                                    ) {\n                                      return Promise.reject(\n                                        t(\n                                          'session.launcher.EnqueueComputeSessionWarning',\n                                        ),\n                                      );\n                                    }\n                                  }\n                                  return Promise.resolve();\n                                },\n                              },\n                            ]}\n                          >\n                            <DynamicUnitInputNumberWithSlider\n                              max={resourceLimits.mem?.max}\n                              // min=\"256m\"\n                              // min={'0g'}\n                              // min={addNumberWithUnits(\n                              //   resourceLimits.mem?.min,\n                              //   form.getFieldValue(['resource', 'shmem']) || '0g',\n                              // )}\n                              min={resourceLimits.mem?.min}\n                              // warn={\n                              //   checkPresetInfo?.scaling_group_remaining.mem ===\n                              //   undefined\n                              //     ? undefined\n                              //     : checkPresetInfo?.scaling_group_remaining.mem + 'g'\n                              // }\n                              addonBefore={'MEM'}\n                              extraMarks={{\n                                // ...(checkPresetInfo?.scaling_group_remaining.mem\n                                //   ? {\n                                //       // @ts-ignore\n                                //       [iSizeToSize(\n                                //         checkPresetInfo?.scaling_group_remaining\n                                //           .mem,\n                                //         'g',\n                                //         3,\n                                //       ).numberFixed]: {\n                                //         label: '-',\n                                //       },\n                                //     }\n                                //   : {}),\n                                // ...(form.getFieldValue(['resource', 'shmem'])\n                                //   ? {\n                                //       [iSizeToSize(\n                                //         form.getFieldValue([\n                                //           'resource',\n                                //           'shmem',\n                                //         ]),\n                                //         'g',\n                                //       )?.number || 0]: (\n                                //         <Flex\n                                //           style={{\n                                //             height: 8,\n                                //             width: 8,\n                                //             borderRadius: 4,\n                                //             backgroundColor: token.colorInfo,\n                                //             position: 'absolute',\n                                //             top: -10,\n                                //             transform: 'translateX(-50%)',\n                                //             opacity: 0.5,\n                                //             pointerEvents: 'none',\n                                //           }}\n                                //         ></Flex>\n                                //       ),\n                                //     }\n                                //   : undefined),\n                                ...(remaining.mem\n                                  ? {\n                                      //@ts-ignore\n                                      [convertBinarySizeUnit(\n                                        remaining.mem + 'b',\n                                        'g',\n                                        3,\n                                      )?.numberFixed]: {\n                                        label: <RemainingMark />,\n                                      },\n                                    }\n                                  : {}),\n                              }}\n                              onChange={(M_plus_S) => {\n                                if (\n                                  !M_plus_S ||\n                                  !form.getFieldValue('enabledAutomaticShmem')\n                                )\n                                  return;\n                                runShmemAutomationRule(M_plus_S);\n\n                                form.setFieldValue(\n                                  'allocationPreset',\n                                  'custom',\n                                );\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n\n                    <Flex direction=\"column\" gap={'xxs'} align=\"start\">\n                      <Flex direction=\"row\" gap={'xs'}>\n                        {t('session.launcher.EnableAutomaticMiniumShmem')}{' '}\n                        <Form.Item\n                          noStyle\n                          name={'enabledAutomaticShmem'}\n                          valuePropName=\"checked\"\n                        >\n                          <Switch\n                            size=\"small\"\n                            onChange={(checked) => {\n                              if (checked) {\n                                runShmemAutomationRule(\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                    '0g',\n                                );\n                              }\n                              form.setFieldValue('allocationPreset', 'custom');\n                            }}\n                          />\n                        </Form.Item>\n                      </Flex>\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prev, next) =>\n                          prev.resource.mem !== next.resource.mem ||\n                          prev.enabledAutomaticShmem !==\n                            next.enabledAutomaticShmem\n                        }\n                      >\n                        {() => {\n                          return (\n                            <Form.Item\n                              noStyle\n                              name={['resource', 'shmem']}\n                              // initialValue={'0g'}\n                              // label={t('session.launcher.SharedMemory')}\n                              hidden={form.getFieldValue(\n                                'enabledAutomaticShmem',\n                              )}\n                              tooltip={\n                                <Trans\n                                  i18nKey={'session.launcher.DescSharedMemory'}\n                                />\n                              }\n                              dependencies={[['resource', 'mem']]}\n                              rules={[\n                                {\n                                  required: true,\n                                },\n                                {},\n                                {\n                                  validator: async (rule, value: string) => {\n                                    if (\n                                      _.isEmpty(\n                                        getFieldValue('resource')?.mem,\n                                      ) ||\n                                      _.isEmpty(value) ||\n                                      compareNumberWithUnits(\n                                        getFieldValue('resource')?.mem,\n                                        value,\n                                      ) >= 0\n                                    ) {\n                                      return Promise.resolve();\n                                    } else {\n                                      throw t(\n                                        'resourcePreset.SHMEMShouldBeSmallerThanMemory',\n                                      );\n                                    }\n                                  },\n                                },\n                              ]}\n                            >\n                              <DynamicUnitInputNumberWithSlider\n                                // shmem max is mem max\n                                // min={resourceLimits.shmem?.min}\n                                min={resourceLimits.shmem?.min}\n                                // max={resourceLimits.mem?.max || '0g'}\n                                addonBefore={'SHM'}\n                                max={\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                  '0g'\n                                }\n                                hideSlider\n                                onChange={() => {\n                                  form.setFieldValue(\n                                    'allocationPreset',\n                                    'custom',\n                                  );\n                                }}\n                              />\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                )}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) => {\n                    return (\n                      prev.resource?.acceleratorType !==\n                        next.resource?.acceleratorType ||\n                      // ref: https://github.com/lablup/backend.ai-webui/issues/868\n                      // change gpu step to 1 when cluster_size > 1\n                      prev.cluster_size !== next.cluster_size\n                    );\n                  }}\n                >\n                  {({ getFieldValue }) => {\n                    const currentAcceleratorType = getFieldValue([\n                      'resource',\n                      'acceleratorType',\n                    ]);\n                    const isAcceleratorInputDisabled =\n                      _.isEmpty(acceleratorSlots) ||\n                      (currentImageAcceleratorLimits.length === 0 &&\n                        _.isEmpty(\n                          form.getFieldValue(['environments', 'manual']),\n                        ));\n                    return (\n                      <Form.Item\n                        name={['resource', 'accelerator']}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        tooltip={{\n                          placement: 'right',\n                          title: (\n                            <Trans\n                              i18nKey={'session.launcher.DescAIAccelerator'}\n                            />\n                          ),\n                        }}\n                        rules={[\n                          {\n                            required: currentImageAcceleratorLimits.length > 0,\n                          },\n                          {\n                            type: 'number',\n                            min:\n                              resourceLimits.accelerators[\n                                currentAcceleratorType\n                              ]?.min || 0,\n                            max: resourceLimits.accelerators[\n                              currentAcceleratorType\n                            ]?.max,\n                          },\n                          {\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.endsWith(currentAcceleratorType, 'shares') &&\n                                form.getFieldValue('cluster_size') >= 2 &&\n                                value % 1 !== 0\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.OnlyAllowsDiscreteNumberByClusterSize',\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                          {\n                            warningOnly: true,\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.isNumber(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.min,\n                                ) &&\n                                _.isNumber(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.max,\n                                ) &&\n                                isMinOversMaxValue(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.min,\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.max,\n                                )\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.InsufficientAllocationOfResourcesWarning',\n                                  ),\n                                );\n                              }\n                              if (showRemainingWarning) {\n                                if (\n                                  _.isNumber(\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ],\n                                  ) &&\n                                  value >\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]\n                                ) {\n                                  return Promise.reject(\n                                    t(\n                                      'session.launcher.EnqueueComputeSessionWarning',\n                                    ),\n                                  );\n                                }\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          sliderProps={{\n                            marks: {\n                              0: 0,\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.accelerators[currentAcceleratorType]\n                                ? {\n                                    [remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(\n                                resourceLimits.accelerators[\n                                  currentAcceleratorType\n                                ]?.max,\n                              )\n                                ? {\n                                    // @ts-ignore\n                                    [resourceLimits.accelerators[\n                                      currentAcceleratorType\n                                    ]?.max]:\n                                      resourceLimits.accelerators[\n                                        currentAcceleratorType\n                                      ]?.max,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${mergedResourceSlots?.[currentAcceleratorType]?.display_unit || ''}`;\n                              },\n                              open:\n                                currentImageAcceleratorLimits.length <= 0\n                                  ? false\n                                  : undefined,\n                            },\n                          }}\n                          disabled={isAcceleratorInputDisabled}\n                          min={0}\n                          max={\n                            resourceLimits.accelerators[currentAcceleratorType]\n                              ?.max\n                          }\n                          step={\n                            _.endsWith(currentAcceleratorType, 'shares') &&\n                            form.getFieldValue('cluster_size') < 2\n                              ? 0.1\n                              : 1\n                          }\n                          onChange={() => {\n                            form.setFieldValue('allocationPreset', 'custom');\n                          }}\n                          inputNumberProps={{\n                            addonAfter: (\n                              <Form.Item\n                                noStyle\n                                name={['resource', 'acceleratorType']}\n                                initialValue={_.keys(acceleratorSlots)[0]}\n                                hidden={isAcceleratorInputDisabled}\n                              >\n                                <BAISelect\n                                  autoSelectOption\n                                  tabIndex={-1}\n                                  // Do not delete disabled prop. It is necessary to prevent the user from changing the value.\n                                  suffixIcon={\n                                    _.size(acceleratorSlots) > 1\n                                      ? undefined\n                                      : null\n                                  }\n                                  popupMatchSelectWidth={false}\n                                  options={_.map(\n                                    acceleratorSlots,\n                                    (value, name) => {\n                                      return {\n                                        value: name,\n                                        label:\n                                          mergedResourceSlots?.[name]\n                                            ?.display_unit || 'UNIT',\n                                        disabled:\n                                          currentImageAcceleratorLimits.length >\n                                            0 &&\n                                          !_.find(\n                                            currentImageAcceleratorLimits,\n                                            (limit) => limit?.key === name,\n                                          ),\n                                      };\n                                    },\n                                  )}\n                                />\n                              </Form.Item>\n                            ),\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n      {enableNumOfSessions ? (\n        <Card\n          style={{\n            marginBottom: token.margin,\n          }}\n        >\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.cluster_size !== next.cluster_size\n            }\n          >\n            {() => {\n              return (\n                <Form.Item\n                  name={['num_of_sessions']}\n                  label={t('webui.menu.Sessions')}\n                  tooltip={<Trans i18nKey={'session.launcher.DescSession'} />}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                    },\n                    {\n                      warningOnly: true,\n                      validator: async (rule, value: number) => {\n                        if (showRemainingWarning) {\n                          if (\n                            sessionSliderLimitAndRemaining &&\n                            value > sessionSliderLimitAndRemaining.remaining\n                          ) {\n                            return Promise.reject(\n                              t(\n                                'session.launcher.EnqueueComputeSessionWarning',\n                              ),\n                            );\n                          }\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumberWithSlider\n                    inputNumberProps={{\n                      addonAfter: '#',\n                    }}\n                    disabled={form.getFieldValue('cluster_size') > 1}\n                    sliderProps={{\n                      marks: {\n                        [sessionSliderLimitAndRemaining?.min]:\n                          sessionSliderLimitAndRemaining?.min,\n                        // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                        ...(sessionSliderLimitAndRemaining?.remaining\n                          ? {\n                              [sessionSliderLimitAndRemaining?.remaining]: {\n                                label: <RemainingMark />,\n                              },\n                            }\n                          : {}),\n                        [sessionSliderLimitAndRemaining?.max]:\n                          sessionSliderLimitAndRemaining?.max,\n                      },\n                    }}\n                    min={sessionSliderLimitAndRemaining?.min}\n                    max={sessionSliderLimitAndRemaining?.max}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Form.Item>\n        </Card>\n      ) : null}\n      {/* TODO: Support cluster mode */}\n      {enableAgentSelect && (\n        <Form.Item\n          label={t('session.launcher.SelectAgent')}\n          required\n          tooltip={<Trans i18nKey={'session.launcher.DescSelectAgent'} />}\n        >\n          <Flex gap={'xs'}>\n            <Suspense>\n              <Form.Item required noStyle style={{ flex: 1 }} name=\"agent\">\n                <AgentSelect\n                  resourceGroup={currentResourceGroupInForm}\n                  fetchKey={agentFetchKey}\n                  onChange={(value, option) => {\n                    if (value !== 'auto') {\n                      form.setFieldsValue({\n                        cluster_mode: 'single-node',\n                        cluster_size: 1,\n                      });\n                    }\n                    // TODO: set cluster mode to single node and cluster size to 1 when agent value is not \"auto\"\n                  }}\n                ></AgentSelect>\n              </Form.Item>\n            </Suspense>\n            <Form.Item noStyle>\n              <Button\n                loading={isPendingAgentList}\n                onClick={() => {\n                  startAgentListTransition(() => updateAgentFetchKey());\n                }}\n                icon={<ReloadOutlined />}\n              ></Button>\n            </Form.Item>\n          </Flex>\n        </Form.Item>\n      )}\n      {baiClient.supports('multi-container') && (\n        // {false && (\n        <Form.Item\n          label={t('session.launcher.ClusterMode')}\n          tooltip={\n            <Flex direction=\"column\" align=\"start\">\n              {t('session.launcher.SingleNode')}\n              <Trans i18nKey={'session.launcher.DescSingleNode'} />\n              <Divider style={{ backgroundColor: token.colorBorder }} />\n              {t('session.launcher.MultiNode')}\n              <Trans i18nKey={'session.launcher.DescMultiNode'} />\n            </Flex>\n          }\n          required\n          dependencies={['agent']}\n        >\n          {({ getFieldValue }) => {\n            return (\n              <Card\n                style={{\n                  marginBottom: token.margin,\n                }}\n              >\n                <Row gutter={token.marginMD}>\n                  <Col xs={24}>\n                    {/* <Col xs={24} lg={12}> */}\n                    <Form.Item name={'cluster_mode'} required>\n                      <Radio.Group\n                        onChange={(e) => {\n                          form.validateFields().catch(() => {});\n                        }}\n                        disabled={getFieldValue('agent') !== 'auto'}\n                      >\n                        <Radio.Button value=\"single-node\">\n                          {t('session.launcher.SingleNode')}\n                        </Radio.Button>\n                        <Radio.Button value=\"multi-node\">\n                          {t('session.launcher.MultiNode')}\n                        </Radio.Button>\n                      </Radio.Group>\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24}>\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.cluster_mode !== next.cluster_mode\n                      }\n                    >\n                      {() => {\n                        const derivedClusterSizeMaxLimit = _.min([\n                          resourceLimits.cpu?.max,\n                          keypairResourcePolicy.max_containers_per_session,\n                        ]);\n                        const clusterUnit =\n                          form.getFieldValue('cluster_mode') === 'single-node'\n                            ? t('session.launcher.Container')\n                            : t('session.launcher.Node');\n                        return (\n                          <Form.Item\n                            name={'cluster_size'}\n                            label={t('session.launcher.ClusterSize')}\n                            required\n                            rules={[\n                              {\n                                warningOnly: true,\n                                validator: async (rule, value: number) => {\n                                  if (showRemainingWarning) {\n                                    const minCPU = _.min([\n                                      remaining.cpu,\n                                      keypairResourcePolicy.max_containers_per_session,\n                                    ]);\n                                    if (_.isNumber(minCPU) && value > minCPU) {\n                                      return Promise.reject(\n                                        t(\n                                          'session.launcher.EnqueueComputeSessionWarning',\n                                        ),\n                                      );\n                                    }\n                                  }\n                                  return Promise.resolve();\n                                },\n                              },\n                            ]}\n                          >\n                            <InputNumberWithSlider\n                              min={1}\n                              step={1}\n                              // TODO: max cluster size\n                              max={\n                                _.isNumber(derivedClusterSizeMaxLimit)\n                                  ? derivedClusterSizeMaxLimit\n                                  : undefined\n                              }\n                              disabled={\n                                derivedClusterSizeMaxLimit === 1 ||\n                                getFieldValue('agent') !== 'auto'\n                              }\n                              sliderProps={{\n                                marks: {\n                                  1: '1',\n                                  // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                                  ...(remaining.cpu\n                                    ? {\n                                        [remaining.cpu]: {\n                                          label: <RemainingMark />,\n                                        },\n                                      }\n                                    : {}),\n                                  ...(_.isNumber(derivedClusterSizeMaxLimit)\n                                    ? {\n                                        [derivedClusterSizeMaxLimit]:\n                                          derivedClusterSizeMaxLimit,\n                                      }\n                                    : {}),\n                                },\n                                tooltip: {\n                                  formatter: (value = 0) => {\n                                    return `${value} ${clusterUnit}`;\n                                  },\n                                },\n                              }}\n                              inputNumberProps={{\n                                addonAfter: clusterUnit,\n                              }}\n                              onChange={(value) => {\n                                if (value > 1) {\n                                  form.setFieldValue('num_of_sessions', 1);\n                                }\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            );\n          }}\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nconst RemainingMark: React.FC<{ title?: string }> = () => {\n  const { token } = theme.useToken();\n  return (\n    <Flex\n      style={{\n        position: 'absolute',\n        top: -24,\n        transform: 'translateX(-50%)',\n        color: token.colorSuccess,\n        opacity: 0.5,\n      }}\n    >\n      <CaretDownOutlined />\n    </Flex>\n  );\n};\n\nconst MemoizedResourceAllocationFormItems = React.memo(\n  ResourceAllocationFormItems,\n);\n\nexport default MemoizedResourceAllocationFormItems;\n\nexport const getAllocatablePresetNames = (\n  presets: Array<ResourcePreset> | undefined,\n  resourceLimits: MergedResourceLimits,\n  currentImage: Image,\n) => {\n  const currentImageAcceleratorLimits = _.filter(\n    currentImage?.resource_limits,\n    (limit) =>\n      limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n  );\n\n  const bySliderLimit = _.filter(presets, (preset) => {\n    // After allow pending session, we don't need to check allocatable field.\n    // if (_.has(preset, 'allocatable')) {\n    //   return !!preset.allocatable;\n    // }\n\n    // Check if all resource slots in the preset are less than or equal to resourceLimits\n    // Be careful with the type of values in resourceLimits, they are string or number\n    return _.every(preset.resource_slots, (value, key) => {\n      if (key === 'mem') {\n        // if mem resource limit is not defined, it is UNLIMITED\n        const isNoLimit = typeof resourceLimits[key]?.max !== 'string';\n        return isNoLimit\n          ? true\n          : typeof preset.resource_slots[key] === 'string' &&\n              typeof resourceLimits[key]?.max === 'string' &&\n              compareNumberWithUnits(\n                preset.resource_slots[key],\n                resourceLimits[key]?.max,\n              ) <= 0;\n      } else if (key === 'shmem') {\n        // no need to check shmem\n        return true;\n      } else if (key === 'cpu') {\n        // if cpu resource limit is not defined, it is UNLIMITED\n        const isNoLimit = _.isNaN(_.toNumber(resourceLimits[key]?.max));\n        return isNoLimit\n          ? true\n          : (_.toNumber(preset.resource_slots[key]) || 0) <=\n              _.toNumber(resourceLimits[key]?.max);\n      } else {\n        // if accelerator resource limit is not defined, it is UNLIMITED\n        const isNoLimit = _.isNaN(\n          _.toNumber(resourceLimits.accelerators[key]?.max),\n        );\n        return isNoLimit\n          ? true\n          : (_.toNumber(preset.resource_slots[key]) || 0) <=\n              _.toNumber(resourceLimits.accelerators[key]?.max);\n      }\n    });\n  }).map((preset) => preset.name);\n\n  const byImageAcceleratorLimits = _.filter(presets, (preset) => {\n    const acceleratorResourceOfPreset = _.omitBy(\n      preset.resource_slots,\n      (value, key) => {\n        if (['mem', 'cpu', 'shmem'].includes(key)) return true;\n      },\n    );\n    if (currentImageAcceleratorLimits.length === 0) {\n      // When current image doesn't require any accelerator,\n      // It's available if the preset doesn't have any accelerator\n      if (_.isEmpty(acceleratorResourceOfPreset)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      // When current image requires some accelerator,\n      // It's available if the preset has a required accelerator value that is larger than the current image's minimum value\n      return _.some(currentImageAcceleratorLimits, (limit) => {\n        return (\n          limit?.key &&\n          acceleratorResourceOfPreset[limit?.key] &&\n          _.toNumber(acceleratorResourceOfPreset[limit?.key]) >=\n            _.toNumber(limit?.min)\n        );\n      });\n    }\n  }).map((preset) => preset.name);\n  return currentImageAcceleratorLimits.length === 0\n    ? bySliderLimit\n    : _.intersection(bySliderLimit, byImageAcceleratorLimits);\n};\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport TextHighlighter from './TextHighlighter';\nimport { Select, SelectProps } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useTransition } from 'react';\n\ninterface ResourceGroupSelectProps extends SelectProps {\n  projectName: string;\n  autoSelectDefault?: boolean;\n  filter?: (projectName: string) => boolean;\n}\n\nconst ResourceGroupSelect: React.FC<ResourceGroupSelectProps> = ({\n  projectName,\n  autoSelectDefault,\n  filter,\n  searchValue,\n  onSearch,\n  loading,\n  ...selectProps\n}) => {\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const [fetchKey] = useUpdatableState('first');\n  const [controllableSearchValue, setControllableSearchValue] =\n    useControllableState<string>({\n      value: searchValue,\n      onChange: onSearch,\n    });\n\n  const [controllableValue, setControllableValueDoNotUseWithoutTransition] =\n    useControllableState(selectProps);\n  const [isPendingChangeTransition, startChangeTransition] = useTransition();\n  const setControllableValueWithTransition = React.useCallback(\n    (v: typeof controllableValue, ...args: any[]) => {\n      startChangeTransition(() => {\n        setControllableValueDoNotUseWithoutTransition(v, ...args);\n      });\n    },\n    [startChangeTransition, setControllableValueDoNotUseWithoutTransition],\n  );\n\n  const { data: resourceGroupSelectQueryResult } = useSuspenseTanQuery<\n    [\n      {\n        scaling_groups: {\n          name: string;\n        }[];\n      },\n      {\n        allowed: string[];\n        default: string;\n        volume_info: {\n          [key: string]: {\n            backend: string;\n            capabilities: string[];\n            usage: {\n              percentage: number;\n            };\n            sftp_scaling_groups?: string[];\n          };\n        };\n      },\n    ]\n  >({\n    queryKey: ['ResourceGroupSelectQuery', projectName],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      search.set('group', projectName);\n      return Promise.all([\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/scaling-groups?${search.toString()}`,\n        }),\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/folders/_/hosts`,\n        }),\n      ]);\n    },\n    staleTime: 0,\n    fetchKey: fetchKey,\n  });\n\n  const sftpResourceGroups = _.flatMap(\n    resourceGroupSelectQueryResult?.[1].volume_info,\n    (item) => item?.sftp_scaling_groups ?? [],\n  );\n\n  const resourceGroups = _.filter(\n    resourceGroupSelectQueryResult?.[0].scaling_groups,\n    (item) => {\n      if (_.includes(sftpResourceGroups, item.name)) {\n        return false;\n      }\n      if (filter) {\n        return filter(item.name);\n      }\n      return true;\n    },\n  );\n\n  // If the current selected value is not in the resourceGroups, reset the value to undefined\n  useEffect(() => {\n    if (\n      controllableValue &&\n      !_.some(resourceGroups, (item) => item.name === controllableValue)\n    ) {\n      setControllableValueWithTransition(undefined);\n    }\n  }, [resourceGroups, controllableValue, setControllableValueWithTransition]);\n\n  // Auto select is only executed once\n  const autoSelectedResourceGroup =\n    _.find(resourceGroups, (item) => item.name === 'default') ||\n    resourceGroups[0];\n  const autoSelectedOption = autoSelectedResourceGroup\n    ? {\n        label: autoSelectedResourceGroup.name,\n        value: autoSelectedResourceGroup.name,\n      }\n    : undefined;\n\n  useEffect(() => {\n    if (\n      autoSelectDefault &&\n      autoSelectedOption &&\n      autoSelectedOption.value !== selectProps.value\n    ) {\n      setControllableValueWithTransition(\n        autoSelectedOption.value,\n        autoSelectedOption,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoSelectDefault]);\n\n  const searchProps: Pick<\n    SelectProps,\n    'onSearch' | 'searchValue' | 'showSearch'\n  > = selectProps.showSearch\n    ? {\n        onSearch: setControllableSearchValue,\n        searchValue: controllableSearchValue,\n        showSearch: true,\n      }\n    : {};\n\n  return (\n    <Select\n      defaultActiveFirstOption\n      {...searchProps}\n      defaultValue={autoSelectDefault ? autoSelectedOption : undefined}\n      loading={loading || isPendingChangeTransition}\n      disabled={isPendingChangeTransition}\n      options={_.map(resourceGroups, (resourceGroup) => {\n        return { value: resourceGroup.name, label: resourceGroup.name };\n      })}\n      optionRender={(option) => {\n        return (\n          <TextHighlighter keyword={controllableSearchValue}>\n            {option.data.value?.toString()}\n          </TextHighlighter>\n        );\n      }}\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValueWithTransition}\n    />\n  );\n};\n\nexport default ResourceGroupSelect;\n","import { convertBinarySizeUnit } from '../helper';\nimport {\n  BaseResourceSlotName,\n  KnownAcceleratorResourceSlotName,\n  ResourceSlotName,\n  useResourceSlotsDetails,\n} from '../hooks/backendai';\nimport { useCurrentResourceGroupValue } from '../hooks/useCurrentProject';\nimport Flex from './Flex';\nimport { Tooltip, Typography, theme } from 'antd';\nimport _ from 'lodash';\nimport { MicrochipIcon } from 'lucide-react';\nimport React, { ReactElement } from 'react';\n\nexport type ResourceOpts = {\n  shmem?: number;\n};\ninterface ResourceNumberProps {\n  type: ResourceSlotName | string;\n  extra?: ReactElement;\n  opts?: ResourceOpts;\n  value: string;\n  hideTooltip?: boolean;\n  max?: string;\n}\n\ntype ResourceTypeInfo<V> = {\n  [key in KnownAcceleratorResourceSlotName]: V;\n} & {\n  [key in BaseResourceSlotName]: V;\n};\nconst ResourceNumber: React.FC<ResourceNumberProps> = ({\n  type,\n  value: amount,\n  extra,\n  opts,\n  hideTooltip = false,\n  max,\n}) => {\n  const { token } = theme.useToken();\n  const currentGroup = useCurrentResourceGroupValue();\n  const { mergedResourceSlots } = useResourceSlotsDetails(\n    currentGroup || undefined,\n  );\n\n  const formatAmount = (amount: string) => {\n    return mergedResourceSlots?.[type]?.number_format.binary\n      ? Number(\n          convertBinarySizeUnit(amount, 'g', 3, true)?.numberFixed,\n        ).toString()\n      : (mergedResourceSlots?.[type]?.number_format.round_length || 0) > 0\n        ? parseFloat(amount).toFixed(2)\n        : amount;\n  };\n\n  return (\n    <Flex direction=\"row\" gap=\"xxs\">\n      {mergedResourceSlots?.[type] ? (\n        <ResourceTypeIcon type={type} showTooltip={!hideTooltip} />\n      ) : (\n        type\n      )}\n\n      <Typography.Text>\n        {formatAmount(amount)}\n        {_.isUndefined(max)\n          ? null\n          : max === 'Infinity'\n            ? '~∞'\n            : `~${formatAmount(max)}`}\n      </Typography.Text>\n      <Typography.Text type=\"secondary\">\n        {mergedResourceSlots?.[type]?.display_unit || ''}\n      </Typography.Text>\n      {type === 'mem' && opts?.shmem && opts?.shmem > 0 ? (\n        <Typography.Text\n          type=\"secondary\"\n          style={{ fontSize: token.fontSizeSM }}\n        >\n          (SHM:{' '}\n          {convertBinarySizeUnit(opts.shmem + 'b', 'g', 2, true)?.numberFixed}\n          GiB)\n        </Typography.Text>\n      ) : null}\n      {extra}\n    </Flex>\n  );\n};\n\nconst MWCIconWrap: React.FC<{ size?: number; children: string }> = ({\n  size = 16,\n  children,\n}) => {\n  return (\n    // @ts-ignore\n    <mwc-icon\n      style={{\n        '--mdc-icon-size': `${size + 2}px`,\n        width: size,\n        height: size,\n      }}\n    >\n      {children}\n      {/* @ts-ignore */}\n    </mwc-icon>\n  );\n};\ninterface AccTypeIconProps\n  extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'src'> {\n  type: ResourceSlotName | string;\n  showIcon?: boolean;\n  showUnit?: boolean;\n  showTooltip?: boolean;\n  size?: number;\n}\nexport const ResourceTypeIcon: React.FC<AccTypeIconProps> = ({\n  type,\n  size = 16,\n  showIcon = true,\n  showUnit = true,\n  showTooltip = true,\n  ...props\n}) => {\n  const resourceTypeIconSrcMap: ResourceTypeInfo<ReactElement | string> = {\n    cpu: <MWCIconWrap size={size}>developer_board</MWCIconWrap>,\n    mem: <MWCIconWrap size={size}>memory</MWCIconWrap>,\n    'cuda.device': '/resources/icons/file_type_cuda.svg',\n    'cuda.shares': '/resources/icons/file_type_cuda.svg',\n    'rocm.device': '/resources/icons/rocm.svg',\n    'tpu.device': <MWCIconWrap size={size}>view_module</MWCIconWrap>,\n    'ipu.device': <MWCIconWrap size={size}>view_module</MWCIconWrap>,\n    'atom.device': '/resources/icons/rebel.svg',\n    'atom-plus.device': '/resources/icons/rebel.svg',\n    'gaudi2.device': '/resources/icons/gaudi.svg',\n    'warboy.device': '/resources/icons/furiosa.svg',\n    'rngd.device': '/resources/icons/furiosa.svg',\n    'hyperaccel-lpu.device': '/resources/icons/npu_generic.svg',\n  };\n\n  const targetIcon = resourceTypeIconSrcMap[\n    type as KnownAcceleratorResourceSlotName\n  ] ?? <MicrochipIcon />;\n\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n\n  const content =\n    typeof targetIcon === 'string' ? (\n      <img\n        {...props}\n        style={{\n          height: size,\n          alignSelf: 'center',\n          ...(props.style || {}),\n        }}\n        // @ts-ignore\n        src={resourceTypeIconSrcMap[type] || ''}\n        alt={type}\n      />\n    ) : (\n      <Flex style={{ width: 16, height: 16 }}>{targetIcon || type}</Flex>\n    );\n\n  return showTooltip ? (\n    <Tooltip title={mergedResourceSlots[type]?.description || type}>\n      {content}\n    </Tooltip>\n  ) : (\n    <Flex style={{ pointerEvents: 'none' }}>{content}</Flex>\n  );\n};\n\nexport default React.memo(ResourceNumber);\n","import DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport { VFolderPermissionTag_VFolder$key } from './__generated__/VFolderPermissionTag_VFolder.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useKeyPairLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport BAILink from './BAILink';\nimport { useShadowRoot } from './DefaultProviders';\nimport Flex from './Flex';\nimport FolderCreateModal from './FolderCreateModal';\nimport { useFolderExplorerOpener } from './FolderExplorerOpener';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport { VFolderTableProjectQuery } from './__generated__/VFolderTableProjectQuery.graphql';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Descriptions,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { PlusIcon } from 'lucide-react';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  useTransition,\n} from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\nexport interface VFolderTableProps extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n  onChangeAutoMountedFolders?: (names: Array<string>) => void;\n  showAutoMountedFoldersSection?: boolean;\n}\n\nexport const vFolderAliasNameRegExp = /^[a-zA-Z0-9_/.-]*$/;\nexport const DEFAULT_ALIAS_BASE_PATH = '/home/work/';\nconst VFolderTable: React.FC<VFolderTableProps> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = DEFAULT_ALIAS_BASE_PATH,\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  onChangeAutoMountedFolders,\n  showAutoMountedFoldersSection,\n  ...tableProps\n}) => {\n  const { generateFolderPath } = useFolderExplorerOpener();\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [isOpenCreateModal, setIsOpenCreateModal] = useState(false);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableState<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableState<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useSuspenseTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey, currentProject.id],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      search.set('group_id', currentProject.id);\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?${search.toString()}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 1000,\n  });\n\n  const { domain, group, keypair_resource_policy } =\n    useLazyLoadQuery<VFolderTableProjectQuery>(\n      graphql`\n        query VFolderTableProjectQuery(\n          $domain_name: String!\n          $group_id: UUID!\n          $keypair_resource_policy_name: String!\n        ) {\n          domain(name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          group(id: $group_id, domain_name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          keypair_resource_policy(name: $keypair_resource_policy_name) {\n            allowed_vfolder_hosts\n          }\n        }\n      `,\n      {\n        domain_name: baiClient._config.domainName,\n        group_id: currentProject.id,\n        keypair_resource_policy_name: keypair?.resource_policy || '',\n      },\n      {\n        fetchPolicy: 'store-and-network',\n        fetchKey: fetchKey,\n      },\n    );\n\n  const filteredFolderListByPermission = useMemo(() => {\n    const allowedVFolderHostsByDomain = JSON.parse(\n      domain?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByGroup = JSON.parse(\n      group?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByKeypairResourcePolicy = JSON.parse(\n      keypair_resource_policy?.allowed_vfolder_hosts || '{}',\n    );\n\n    const mergedVFolderPermissions = _.merge(\n      {}, // start with empty object\n      allowedVFolderHostsByDomain,\n      allowedVFolderHostsByGroup,\n      allowedVFolderHostsByKeypairResourcePolicy,\n    );\n    // only allow mount if volume permission has 'mount-in-session'\n    const mountAllowedVolumes = Object.keys(mergedVFolderPermissions).filter(\n      (volume) => mergedVFolderPermissions[volume].includes('mount-in-session'),\n    );\n    // Need to filter allFolderList from allowed vfolder\n    return allFolderList?.filter((folder) =>\n      mountAllowedVolumes.includes(folder.host),\n    );\n  }, [domain, group, keypair_resource_policy, allFolderList]);\n\n  const autoMountedFolderNamesByPermission = useMemo(\n    () =>\n      _.chain(filteredFolderListByPermission)\n        .filter((vf) => vf.status === 'ready' && vf.name?.startsWith('.'))\n        .map((vf) => vf.name)\n        .value(),\n    [filteredFolderListByPermission],\n  );\n\n  useEffect(() => {\n    _.isFunction(onChangeAutoMountedFolders) &&\n      onChangeAutoMountedFolders(autoMountedFolderNamesByPermission);\n    // Do not need to run when `autoMountedFolderNames` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoMountedFolderNamesByPermission]);\n\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.chain(filteredFolderListByPermission)\n    .filter((vf) => (filter ? filter(vf) : true))\n    .filter((vf) => {\n      if (selectedRowKeys.includes(getRowKey(vf))) {\n        return true;\n      }\n      return !searchKey || vf.name.includes(searchKey);\n    })\n    .value();\n\n  /**\n   * Converts the input path to an aliased path based on the provided name and input.\n   * If the input is empty, it appends the name to the alias base path.\n   * If the input starts with '/', it returns the input as is.\n   * Otherwise, it appends the input to the alias base path.\n   *\n   * @param name - The name of the VFolderKey.\n   * @param input - The input path to be converted.\n   * @returns The aliased path based on the name and input.\n   */\n  const inputToAliasPath = useCallback(\n    (name: VFolderKey, input?: string) => {\n      if (input === undefined || input === '') {\n        return `${aliasBasePath}${name}`;\n      } else if (input.startsWith('/')) {\n        return input;\n      } else {\n        return `${aliasBasePath}${input}`;\n      }\n    },\n    [aliasBasePath],\n  );\n\n  const handleAliasUpdate = useEventNotStable(() => {\n    setAliasMap(\n      _.mapValues(\n        _.pickBy(internalForm.getFieldsValue({ strict: false }), (v) => !!v), //remove empty\n        (v, k) => inputToAliasPath(k, v), // add alias base path\n      ),\n    );\n    internalForm.validateFields().catch(() => {});\n  });\n\n  useEffect(() => {\n    handleAliasUpdate();\n    // `selectedRowKeys` can be changed by parents at any time, so we need to check whether `selectedRowKeys` has changed using JSON.stringify\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(selectedRowKeys), handleAliasUpdate]);\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"start\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : {\n                    maxWidth: 200,\n                  }\n            }\n          >\n            <BAILink type=\"hover\" to={generateFolderPath(record.id)}>\n              <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            </BAILink>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || inputToAliasPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: vFolderAliasNameRegExp,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    inputToAliasPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            const aliasPath = inputToAliasPath(\n                              getRowKey(record),\n                              value,\n                            );\n                            if (\n                              value &&\n                              _.map(\n                                autoMountedFolderNamesByPermission,\n                                // `n` is the name of the auto mounted folder. It cannot be empty.\n                                (n) => inputToAliasPath('', n),\n                              ).includes(aliasPath)\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.FolderAliasOverlappingToAutoMount',\n                                ),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={inputToAliasPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        allowClear\n                        onChange={() => {\n                          handleAliasUpdate();\n                        }}\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n      defaultSortOrder: 'descend',\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingRefetch}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startRefetchTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n        <Tooltip title={t('data.CreateANewStorageFolder')}>\n          <Button\n            icon={<PlusIcon />}\n            type=\"primary\"\n            ghost\n            onClick={() => {\n              setIsOpenCreateModal(true);\n            }}\n          />\n        </Tooltip>\n      </Flex>\n      <Form form={internalForm} component={false} preserve={false}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          sortDirections={['ascend', 'descend']}\n          {...tableProps}\n        />\n      </Form>\n      {showAutoMountedFoldersSection &&\n      autoMountedFolderNamesByPermission.length > 0 ? (\n        <>\n          <Descriptions size=\"small\">\n            <Descriptions.Item label={t('data.AutomountFolders')}>\n              {_.map(autoMountedFolderNamesByPermission, (name) => {\n                return <Tag key={name}>{name}</Tag>;\n              })}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ) : null}\n      <FolderCreateModal\n        open={isOpenCreateModal}\n        onRequestClose={(result) => {\n          setIsOpenCreateModal(false);\n          if (result) {\n            startRefetchTransition(() => {\n              updateFetchKey();\n              setSelectedRowKeys((x) => [\n                ...x,\n                // @ts-ignore\n                result[rowKey],\n              ]);\n            });\n          }\n        }}\n      />\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import { VFolder } from './VFolderSelect';\nimport VFolderTable, {\n  AliasMap,\n  DEFAULT_ALIAS_BASE_PATH,\n  VFolderTableProps,\n  vFolderAliasNameRegExp,\n} from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFormItemProps extends Omit<FormItemProps, 'name'> {\n  filter?: VFolderTableProps['filter'];\n  rowKey?: keyof VFolder;\n  tableProps?: Partial<VFolderTableProps>;\n}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n  autoMountedFolderNames?: string[];\n}\n\nconst VFolderTableFormItem: React.FC<VFolderTableFormItemProps> = ({\n  filter,\n  rowKey = 'name',\n  tableProps,\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              if (_.some(arr, (alias) => !vFolderAliasNameRegExp.test(alias))) {\n                return Promise.reject(t('session.launcher.FolderAliasInvalid'));\n              }\n\n              if (\n                _.some(\n                  form.getFieldValue('autoMountedFolderNames'),\n                  (autoName) =>\n                    arr.includes(DEFAULT_ALIAS_BASE_PATH + autoName),\n                )\n              ) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlappingToAutoMount'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item hidden name=\"autoMountedFolderNames\" />\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey={rowKey}\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n          filter={filter}\n          showAutoMountedFoldersSection\n          onChangeAutoMountedFolders={(names) => {\n            form.setFieldValue('autoMountedFolderNames', names);\n          }}\n          {...tableProps}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFormItem;\n","/**\n * @generated SignedSource<<fb92e3350cf8934880a2a423652d33ed>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type AgentSelectQuery$variables = {\n  filter?: string | null | undefined;\n  limit: number;\n  offset: number;\n  scaling_group?: string | null | undefined;\n  status?: string | null | undefined;\n};\nexport type AgentSelectQuery$data = {\n  readonly agent_summary_list: {\n    readonly items: ReadonlyArray<{\n      readonly architecture: string | null | undefined;\n      readonly available_slots: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly occupied_slots: string | null | undefined;\n      readonly schedulable: boolean | null | undefined;\n      readonly status: string | null | undefined;\n    } | null | undefined>;\n    readonly total_count: number;\n  } | null | undefined;\n};\nexport type AgentSelectQuery = {\n  response: AgentSelectQuery$data;\n  variables: AgentSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"scaling_group\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv5 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"filter\",\n        \"variableName\": \"filter\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"limit\",\n        \"variableName\": \"limit\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"offset\",\n        \"variableName\": \"offset\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"scaling_group\",\n        \"variableName\": \"scaling_group\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"status\",\n        \"variableName\": \"status\"\n      }\n    ],\n    \"concreteType\": \"AgentSummaryList\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"agent_summary_list\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"AgentSummary\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"items\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"status\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"schedulable\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"available_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"occupied_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"architecture\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"total_count\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentSelectQuery\",\n    \"selections\": (v5/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v4/*: any*/),\n      (v0/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"AgentSelectQuery\",\n    \"selections\": (v5/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"57b0881c2a4e4ba1bdeceb88d9ec41bd\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AgentSelectQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $status: String\\n  $filter: String\\n  $scaling_group: String\\n) {\\n  agent_summary_list(limit: $limit, offset: $offset, status: $status, filter: $filter, scaling_group: $scaling_group) {\\n    items {\\n      id\\n      status\\n      schedulable\\n      available_slots\\n      occupied_slots\\n      architecture\\n    }\\n    total_count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"a3558359a8ee951a4caa89c783133e85\";\n\nexport default node;\n","/**\n * @generated SignedSource<<069eed3537c1f9d3b16b394a33ab2743>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ImageEnvironmentSelectFormItemsQuery$variables = {\n  installed?: boolean | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery$data = {\n  readonly images: ReadonlyArray<{\n    readonly architecture: string | null | undefined;\n    readonly base_image_name: string | null | undefined;\n    readonly digest: string | null | undefined;\n    readonly humanized_name: string | null | undefined;\n    readonly id: string | null | undefined;\n    readonly installed: boolean | null | undefined;\n    readonly labels: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly name: string | null | undefined;\n    readonly namespace: string | null | undefined;\n    readonly registry: string | null | undefined;\n    readonly resource_limits: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly max: string | null | undefined;\n      readonly min: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly tag: string | null | undefined;\n    readonly tags: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly version: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery = {\n  response: ImageEnvironmentSelectFormItemsQuery$data;\n  variables: ImageEnvironmentSelectFormItemsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"installed\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"key\",\n  \"storageKey\": null\n},\nv2 = [\n  (v1/*: any*/),\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"value\",\n    \"storageKey\": null\n  }\n],\nv3 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"is_installed\",\n        \"variableName\": \"installed\"\n      }\n    ],\n    \"concreteType\": \"Image\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"images\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"humanized_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"tag\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"registry\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"architecture\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"digest\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"installed\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ResourceLimit\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"resource_limits\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"min\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"max\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"labels\",\n        \"plural\": true,\n        \"selections\": (v2/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"namespace\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"base_image_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"tags\",\n        \"plural\": true,\n        \"selections\": (v2/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"version\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v3/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v3/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"9ff1339a66b7da77df70de956e3c7dd8\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageEnvironmentSelectFormItemsQuery(\\n  $installed: Boolean\\n) {\\n  images(is_installed: $installed) {\\n    id\\n    name @deprecatedSince(version: \\\"24.12.0\\\")\\n    humanized_name\\n    tag\\n    registry\\n    architecture\\n    digest\\n    installed\\n    resource_limits {\\n      key\\n      min\\n      max\\n    }\\n    labels {\\n      key\\n      value\\n    }\\n    namespace @since(version: \\\"24.12.0\\\")\\n    base_image_name @since(version: \\\"24.12.0\\\")\\n    tags @since(version: \\\"24.12.0\\\") {\\n      key\\n      value\\n    }\\n    version @since(version: \\\"24.12.0\\\")\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"40b2d995106300fffb0c3a5d66103d38\";\n\nexport default node;\n","/**\n * @generated SignedSource<<d57c0906be259f6cb8e6f9de84e5a76e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = Record<PropertyKey, never>;\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null | undefined;\n    readonly resource_slots: string | null | undefined;\n    readonly shared_memory: any | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","/**\n * @generated SignedSource<<aed62292557ed2085f1400aef2426716>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null | undefined;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","/**\n * @generated SignedSource<<e248ecb3a254452b53cfc67d5cc53bec>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type VFolderTableProjectQuery$variables = {\n  domain_name: string;\n  group_id: string;\n  keypair_resource_policy_name: string;\n};\nexport type VFolderTableProjectQuery$data = {\n  readonly domain: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n  readonly group: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n  readonly keypair_resource_policy: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n};\nexport type VFolderTableProjectQuery = {\n  response: VFolderTableProjectQuery$data;\n  variables: VFolderTableProjectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"domain_name\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"group_id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"keypair_resource_policy_name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"allowed_vfolder_hosts\",\n    \"storageKey\": null\n  }\n],\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"domain_name\"\n      }\n    ],\n    \"concreteType\": \"Domain\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"domain\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"domain_name\",\n        \"variableName\": \"domain_name\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"group_id\"\n      }\n    ],\n    \"concreteType\": \"Group\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"group\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"keypair_resource_policy_name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"2c2ce905afd89e93c6d761f22ed59f3d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"VFolderTableProjectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query VFolderTableProjectQuery(\\n  $domain_name: String!\\n  $group_id: UUID!\\n  $keypair_resource_policy_name: String!\\n) {\\n  domain(name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  group(id: $group_id, domain_name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  keypair_resource_policy(name: $keypair_resource_policy_name) {\\n    allowed_vfolder_hosts\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ccdbaa52a63c2ea005423e7c541eff80\";\n\nexport default node;\n","export const UNLIMITED_MAX_CONTAINERS_PER_SESSIONS = 1000000;\nexport const UNLIMITED_MAX_CONCURRENT_SESSIONS = 1000000;\n","/**\n * @generated SignedSource<<738d3da4b0ca50f89164ba3ccebe320e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairQuery$variables = {\n  accessKey: string;\n};\nexport type hooksUsingRelay_KeyPairQuery$data = {\n  readonly keypair: {\n    readonly concurrency_used: number | null | undefined;\n    readonly id: string | null | undefined;\n    readonly resource_policy: string | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairQuery = {\n  response: hooksUsingRelay_KeyPairQuery$data;\n  variables: hooksUsingRelay_KeyPairQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"accessKey\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"access_key\",\n        \"variableName\": \"accessKey\"\n      }\n    ],\n    \"concreteType\": \"KeyPair\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_policy\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"concurrency_used\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1f8fc324e9907111de581f5cd2dc3640\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairQuery(\\n  $accessKey: String!\\n) {\\n  keypair(access_key: $accessKey) {\\n    id\\n    resource_policy\\n    concurrency_used\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8f5c91f0fc46a3366f57566ab688d81\";\n\nexport default node;\n","/**\n * @generated SignedSource<<77cdd03490e0b80daf3cd368360b2198>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$variables = {\n  name: string;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$data = {\n  readonly keypair_resource_policy: {\n    readonly max_concurrent_sessions: number | null | undefined;\n    readonly max_containers_per_session: number | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery = {\n  response: hooksUsingRelay_KeyPairResourcePolicyQuery$data;\n  variables: hooksUsingRelay_KeyPairResourcePolicyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_containers_per_session\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_concurrent_sessions\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ad7039c1935637fe3f3841f0ea8bf347\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairResourcePolicyQuery(\\n  $name: String!\\n) {\\n  keypair_resource_policy(name: $name) {\\n    max_containers_per_session\\n    max_concurrent_sessions\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f3f7364c63aefe9b03111b584c48c103\";\n\nexport default node;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { UNLIMITED_MAX_CONCURRENT_SESSIONS } from '../helper/const-vars';\nimport { hooksUsingRelay_KeyPairQuery } from './__generated__/hooksUsingRelay_KeyPairQuery.graphql';\nimport { hooksUsingRelay_KeyPairResourcePolicyQuery } from './__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useCallback } from 'react';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ninterface FetchOptions {\n  fetchKey?: string | number;\n  fetchPolicy?: FetchPolicy;\n}\nexport const useKeyPairLazyLoadQuery = (\n  accessKey: string,\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { keypair } = useLazyLoadQuery<hooksUsingRelay_KeyPairQuery>(\n    graphql`\n      query hooksUsingRelay_KeyPairQuery($accessKey: String!) {\n        keypair(access_key: $accessKey) {\n          id\n          resource_policy\n          concurrency_used\n        }\n      }\n    `,\n    {\n      accessKey: accessKey,\n    },\n    {\n      ...options,\n      fetchKey: fetchKey + options.fetchKey,\n    },\n  );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [keypair, { refresh }] as const;\n};\n\nexport const useCurrentKeyPairResourcePolicyLazyLoadQuery = (\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const { keypair_resource_policy } =\n    useLazyLoadQuery<hooksUsingRelay_KeyPairResourcePolicyQuery>(\n      graphql`\n        query hooksUsingRelay_KeyPairResourcePolicyQuery($name: String!) {\n          keypair_resource_policy(name: $name) {\n            max_containers_per_session\n            max_concurrent_sessions\n          }\n        }\n      `,\n      {\n        name: keypair?.resource_policy || '',\n      },\n      {\n        ...options,\n        fetchKey: fetchKey + options.fetchKey,\n      },\n    );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [\n    {\n      keypairResourcePolicy: (keypair_resource_policy || {}) as NonNullable<\n        typeof keypair_resource_policy\n      >,\n      keypair: (keypair || {}) as NonNullable<typeof keypair>,\n      sessionLimitAndRemaining: {\n        max: _.min([\n          (keypair_resource_policy || {}).max_concurrent_sessions ||\n            UNLIMITED_MAX_CONCURRENT_SESSIONS,\n          3, //BackendAiResourceBroker.DEFAULT_CONCURRENT_SESSION_COUNT\n        ]) as number,\n        remaining:\n          ((keypair_resource_policy || {}).max_concurrent_sessions || 3) -\n          ((keypair || {}).concurrency_used || 0),\n      },\n    },\n    { refresh },\n  ] as const;\n};\n","// import { offset_to_cursor } from \"../helper\";\nimport { LazyLoadQueryOptions } from '../helper/types';\nimport { SorterResult } from 'antd/lib/table/interface';\nimport _ from 'lodash';\nimport { useState } from 'react';\nimport {\n  fetchQuery,\n  GraphQLTaggedNode,\n  useRelayEnvironment,\n} from 'react-relay';\nimport {\n  ArrayParam,\n  NumberParam,\n  ObjectParam,\n  StringParam,\n  useQueryParams,\n} from 'use-query-params';\n\nexport type SorterInterface = Pick<SorterResult<any>, 'field' | 'order'>;\n\nexport const antdSorterResultToOrder = (\n  sorter: SorterInterface | SorterInterface[],\n) => {\n  const sorterArray = _.castArray(sorter).filter((s) => s.field);\n\n  return _.filter(\n    _.map(sorterArray, (s) =>\n      _.isNull(s.order)\n        ? undefined\n        : `${_.snakeCase(s.field as string).toUpperCase()}_${\n            s.order === 'ascend' ? 'ASC' : 'DESC'\n          }`,\n    ),\n  );\n};\n\nexport const orderToAntdSorterResult = (order: string[]) => {\n  return _.map(order, (o) => {\n    const names = o.split('_');\n    const orderKey = names.pop();\n    const field = _.camelCase(names.join('_'));\n    return {\n      field,\n      order: (orderKey === 'ASC' ? 'ascend' : 'descend') as\n        | 'ascend'\n        | 'descend'\n        | null,\n    };\n  });\n};\n\nexport const getSortOrderByName = (order: string[], name: string) => {\n  const sorterResult = orderToAntdSorterResult(order);\n  const sorter = _.find(sorterResult, (s) => s.field === name);\n  return sorter?.order;\n};\n\nexport const useRelayPaginationQueryOptions = <\n  // Q, N,\n  O,\n  F,\n>({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      first: pageSize,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n      order: order,\n      filter: filter,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n    // sorter?: SorterResult<N>[];\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n  }) => any;\n}) => {\n  const [isPending, setIsPending] = useState(false);\n\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    order: ArrayParam,\n    filter: ObjectParam,\n  });\n\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  //TODO: not use as\n  const order = (params.order || defaultVariables.order) as O[];\n  const filter = (params.filter || defaultVariables.filter) as F;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    // sorter: SorterResult<N>[],\n    newOrder: O[] = defaultVariables.order,\n    newFilter: F | undefined = defaultVariables.filter,\n    options?: {\n      withoutPendingStatus: boolean;\n    },\n  ) => {\n    if (options?.withoutPendingStatus !== true) {\n      setIsPending(true);\n    }\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setIsPending(false);\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          // eslint-disable-next-line\n          order: newOrder as [], // TODO: not use as []\n          // eslint-disable-next-line\n          filter: newFilter as {}, // TODO: not use as {}\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      isPending,\n      variables,\n      filter,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\nexport const useBAIPaginationQueryOptions = ({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      limit: pageSize,\n      offset: page > 1 ? (page - 1) * pageSize : 0,\n      filter: filter,\n      order: order,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  }) => any;\n}) => {\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    filter: StringParam,\n    order: StringParam,\n  });\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  const order = params.order || defaultVariables.order;\n  const filter = params.filter || defaultVariables.filter;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    newOrder: string | undefined = defaultVariables.order,\n    newFilter: string | undefined = defaultVariables.filter,\n  ) => {\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          order: newOrder,\n          filter: newFilter,\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      variables,\n      filter,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\ninterface BAIPaginationOption {\n  limit: number;\n  offset: number;\n  // filter?: string;\n  // order?: string;\n}\ninterface AntdBasicPaginationOption {\n  pageSize: number;\n  current: number;\n}\n\ninterface InitialPaginationOption\n  extends AntdBasicPaginationOption,\n    Omit<BAIPaginationOption, 'limit' | 'offset'> {}\nexport const useBAIPaginationOptionState = (\n  initialOptions: InitialPaginationOption,\n): {\n  baiPaginationOption: BAIPaginationOption;\n  tablePaginationOption: AntdBasicPaginationOption;\n  setTablePaginationOption: (pagination: AntdBasicPaginationOption) => void;\n} => {\n  const [options, setOptions] =\n    useState<AntdBasicPaginationOption>(initialOptions);\n  return {\n    baiPaginationOption: {\n      limit: options.pageSize,\n      offset:\n        options.current > 1 ? (options.current - 1) * options.pageSize : 0,\n    },\n    tablePaginationOption: {\n      pageSize: options.pageSize,\n      current: options.current,\n    },\n    setTablePaginationOption: (pagination) => {\n      if (!_.isEqual(pagination, options)) {\n        setOptions((current) => ({\n          ...current,\n          ...pagination,\n        }));\n      }\n    },\n  };\n};\n"],"names":["useStyles","createStyles","_ref","css","token","hover","colorLinkHover","_ref2","type","linkProps","styles","_jsx","Link","className","undefined","objectValues","values","highlightKeyword","length","React","map","value","label","color","Flex","direction","children","_","objValue","idx","Tag","style","margin","marginRight","TextHighlighter","keyword","_convertBinarySizeUni","dynamicSteps","units","disableAutoUnit","min","max","roundStep","inputNumberProps","setValue","useControllableState","defaultValue","numValue","_unitFromValue","parseUnit","previousUnit","usePrevious","unit","minNumValue","minUnit","maxNumValue","maxUnit","ref","useRef","useEffect","current","onInput","e","_e$target","target","test","addEventListener","removeEventListener","InputNumber","onBlur","_roundStep$toString$s","_ref$current","_ref$current2","decimalCount","toString","split","isNaN","Math","round","toFixed","onChange","newValue","convertBinarySizeUnit","number","addonAfter","Select","tabIndex","newUnit","onDropdownVisibleChange","open","options","Typography","Text","fontFamily","toUpperCase","suffixIcon","cursor","step","onStep","afterStepValue","info","numValueNotNull","index","nextIndex","currentUnitIndex","indexOf","nextValue","nextUnit","nextNumValue","sensitivePatterns","sanitizeSensitiveEnv","envs","env","key","variable","some","pattern","formItemProps","props","inputRef","t","useTranslation","form","Form","useFormInstance","List","fields","add","remove","_jsxs","gap","align","_ref3","name","restField","Item","marginBottom","flex","rules","required","message","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","Promise","reject","resolve","Input","placeholder","fieldNames","field","validateFields","validateTrigger","MinusCircleOutlined","onClick","noStyle","Button","setTimeout","focus","icon","PlusOutlined","block","LegacyFolderExplorer","FolderExplorerOpener","folderId","setFolderId","useQueryParam","StringParam","normalizedFolderId","replaceAll","vfolderID","onRequestClose","destroyOnClose","useFolderExplorerOpener","location","useLocation","id","generateFolderPath","searchParams","URLSearchParams","search","set","pathname","_baiClient$_config","filter","showPrivate","environments","useWatch","preserve","baiClient","useSuspendedBackendaiClient","supportExtendedImageInfo","supports","environmentSearch","setEnvironmentSearch","useState","versionSearch","setVersionSearch","metadata","getBaseVersion","getImageMeta","tagAlias","useBackendAIImageMetaData","theme","useToken","isDarkMode","useThemeMode","envSelectRef","versionSelectRef","imageEnvironmentSelectFormItemsVariables","_config","showNonInstalledImages","installed","images","useLazyLoadQuery","_ImageEnvironmentSelectFormItemsQuery","require","fetchPolicy","_form$getFieldValue","_$find","_nextImage","manual","environment","version","setFieldsValue","image","matchedEnvironmentByVersion","matchedImageByVersion","nextEnvironment","nextImage","_imageGroups$","_nextEnvironment2","imageGroups","group","environmentGroups","getImageFullName","_nextEnvironment","environmentName","customizedImageTag","labels","item","allow_manual_image_name_for_session","customizedTag","setFieldValue","useMemo","_label$value","includes","isPrivateImage","groupBy","_metadata$imageInfo$g","imageInfo","groupName","registry","namespace","_environmentName$spli","_metadata$imageInfo$i","imageKey","displayName","prefix","drop","dropRight","join","sort","a","b","_b$tag$split$","_b$tag","_b$tag$split","_a$tag$split$","_a$tag","_a$tag$split","version1","version2","v1","Number","v2","num1","num2","compareVersions","tag","localeCompare","architecture","sortBy","fullNameMatchedImage","fullNameMatchedImageGroup","flatMap","find","envGroup","_Fragment","copyable","text","showSearch","searchValue","onSearch","defaultActiveFirstOption","optionFilterProp","firstInListImage","disabled","Option","filterValue","display","ImageMetaIcon","width","height","OptGroup","environmentGroup","_environmentGroup$env","firstImage","currentMetaImageInfo","extraFilterValues","environmentPrefixTag","push","tagsFromMetaImageInfoLabel","category","justify","marginLeft","marginXS","flexShrink","shouldUpdate","prev","cur","_prev$environments","_cur$environments","_selectedEnvironmentG","selectedEnvironmentGroup","_getFieldValue","selectedImage","dropdownRender","menu","fontWeight","fontWeightStrong","paddingLeft","paddingSM","Divider","_image$tag","requirements","metadataTagAlias","replaceString","Object","entries","tagReplace","RegExp","replace","requirementTags","requirement","startsWith","DoubleTag","str","imageLabels","customizedImageNameLabelIdx","_imageLabels$customiz","tags","_$find2","isCustomized","tagValue","aliasedTag","preserveDotStartCase","ImageTags","allowClear","hidden","bordered","alt","arguments","getImageIcon","src","ImageAliasNameAndBaseVersionTags","getImageAliasName","BaseImageTags","getBaseImage","ArchitectureTags","getArchitecture","SessionKernelTags","_ref7","_ref8","getTags","sliderProps","otherProps","updateKey","useUpdatableState","minWidth","_inputRef$current","_step$toString$split$","_inputRef$current2","Slider","marks","option","maxPerContainerRegex","useResourceLimitAndRemaining","_checkPresetInfo$scal","_checkPresetInfo$scal2","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal5","_checkPresetInfo$scal6","_checkPresetInfo$scal7","_checkPresetInfo$scal8","_checkPresetInfo$scal9","_checkPresetInfo$scal10","_checkPresetInfo$scal11","_checkPresetInfo$scal12","_convertBinarySizeUni2","_convertBinarySizeUni3","_convertBinarySizeUni4","_convertBinarySizeUni5","_$min2","_$min3","currentImage","currentResourceGroup","currentProjectName","ignorePerContainerConfig","resourceSlots","useResourceSlots","acceleratorSlots","resourceGroups","useResourceGroupsForCurrentProject","data","checkPresetInfo","refetch","isRefetching","useSuspenseTanQuery","queryKey","queryFn","rg","resourcePreset","check","scaling_group","catch","staleTime","currentImageMinM","resource_limits","resourceGroupResourceSize","cpu","scaling_groups","using","remaining","mem","numberFixed","accelerators","result","_checkPresetInfo$scal13","_checkPresetInfo$scal14","_checkPresetInfo$scal15","_checkPresetInfo$scal16","_checkPresetInfo$scal17","_checkPresetInfo$scal18","perContainerConfigs","resourceLimits","maxCPUCoresPerContainer","limitParser","keypair_limits","group_limits","addNumberWithUnits","AUTOMATIC_DEFAULT_SHMEM","maxMemoryPerContainer","_$find3","_$filter","_$filter$","perContainerLimit","configValue","configName","isMatchingMaxPerContainer","match","configLowerCase","toLowerCase","keyLowerCase","parseInt","supportedAcceleratorInfo","_$min","keypair_remaining","group_remaining","scaling_group_remaining","MAX_SAFE_INTEGER","limit","fetchKey","resourceGroup","selectProps","useControllableValue","baiPaginationOption","useBAIPaginationOptionState","pageSize","agent_summary_list","_AgentSelectQuery","offset","status","agentOptions","items","agent","_agent$available_slot","_agent$occupied_slots","availableSlotsInfo","JSON","parse","available_slots","occupiedSlotsInfo","occupied_slots","remainingSlotsInfo","mapValues","_occupiedSlotsInfo$ke","_occupiedSlotsInfo$ke2","endsWith","parseFloat","slot","ResourceNumber","hideTooltip","warn","extraMarks","hideSlider","minGiB","maxGiB","valueGiB","isMinOversMaxValue","_createElement","DynamicUnitInputNumber","changeOnBlur","visibility","track","backgroundColor","compareNumberWithUnits","colorWarning","rail","tooltip","formatter","newNumValue","colorTextSecondary","markNumber","allocatablePresetNames","showCustom","showMinimumRequired","updateFetchKey","run","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","isPendingUpdate","_startTransition","useTransition","controllableValue","setControllableValue","resource_presets","_ResourcePresetSelectQuery","loading","EditOutlined","selectedLabel","Tooltip","title","InfoCircleOutlined","preset","slotsInfo","resource_slots","optionLabelProp","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","resource","shmem","accelerator","num_of_sessions","cluster_mode","cluster_size","enabledAutomaticShmem","ResourceAllocationFormItems","enableAgentSelect","enableNumOfSessions","enableResourcePresets","forceImageMinValues","showRemainingWarning","keypairResourcePolicy","sessionLimitAndRemaining","useCurrentKeyPairResourcePolicyLazyLoadQuery","agentFetchKey","updateAgentFetchKey","isPendingAgentList","startAgentListTransition","currentProject","useCurrentProjectValue","currentResourceGroupInForm","currentAllocationPreset","mergedResourceSlots","resourceSlotsInRG","useResourceSlotsDetails","_resourceLimits$accel","_resourceLimits$accel2","currentImageAcceleratorLimits","sessionSliderLimitAndRemaining","getAllocatablePresetNames","presets","ensureValidAcceleratorType","useEventNotStable","currentAcceleratorType","nextAcceleratorType","acceleratorType","updateResourceFieldsBasedOnImage","force","_resourceLimits$cpu","_resourceLimits$shmem","_resourceLimits$mem","minimumResources","_resourceLimits$accel3","nextImageSelectorType","acceleratorInfo","_resourceLimits$accel4","forEach","minNum","minNumStr","runShmemAutomationRule","recursive","updateResourceFieldsBasedOnPreset","slots","numberUnit","acceleratorObj","firstMatchedAcceleratorType","acceleratorSetting","shared_memory","M_plus_S","autoSelectedPreset","allocationPreset","ResourceGroupSelect","projectName","ResourcePresetSelect","allowCustomResourceAllocation","Card","_mergedResourceSlots$","_resourceLimits$cpu2","_resourceLimits$cpu3","_mergedResourceSlots$2","_resourceLimits$cpu8","_resourceLimits$cpu9","_resourceLimits$cpu10","_resourceLimits$cpu11","_resourceLimits$cpu12","_resourceLimits$cpu13","_resourceLimits$cpu14","_resourceLimits$cpu15","human_readable_name","placement","Trans","i18nKey","warningOnly","async","_resourceLimits$cpu4","_resourceLimits$cpu5","_resourceLimits$cpu6","_resourceLimits$cpu7","InputNumberWithSlider","display_unit","RemainingMark","preventDefault","next","_resourceLimits$mem10","_resourceLimits$mem11","_convertBinarySizeUni6","_resourceLimits$mem2","_resourceLimits$mem3","_resourceLimits$mem4","_resourceLimits$mem5","_resourceLimits$mem6","_resourceLimits$mem7","size","_resourceLimits$mem8","_resourceLimits$mem9","DynamicUnitInputNumberWithSlider","addonBefore","valuePropName","Switch","checked","_resourceLimits$shmem2","dependencies","_getFieldValue2","_prev$resource","_next$resource","_resourceLimits$accel5","_resourceLimits$accel6","_resourceLimits$accel11","_resourceLimits$accel12","_resourceLimits$accel13","_resourceLimits$accel14","isAcceleratorInputDisabled","_resourceLimits$accel7","_resourceLimits$accel8","_resourceLimits$accel9","_resourceLimits$accel10","_mergedResourceSlots$3","initialValue","BAISelect","autoSelectOption","popupMatchSelectWidth","_mergedResourceSlots$4","Suspense","AgentSelect","ReloadOutlined","colorBorder","Row","gutter","marginMD","Col","xs","Radio","_resourceLimits$cpu16","derivedClusterSizeMaxLimit","max_containers_per_session","clusterUnit","minCPU","position","top","transform","colorSuccess","opacity","CaretDownOutlined","bySliderLimit","_resourceLimits$key","_resourceLimits$key2","_resourceLimits$key3","_resourceLimits$key4","_resourceLimits$key5","_resourceLimits$accel15","_resourceLimits$accel16","byImageAcceleratorLimits","acceleratorResourceOfPreset","autoSelectDefault","baiRequestWithPromise","useBaiSignedRequestWithPromise","controllableSearchValue","setControllableSearchValue","setControllableValueDoNotUseWithoutTransition","isPendingChangeTransition","startChangeTransition","setControllableValueWithTransition","v","_len","args","Array","_key","resourceGroupSelectQueryResult","all","method","url","sftpResourceGroups","volume_info","_item$sftp_scaling_gr","sftp_scaling_groups","autoSelectedResourceGroup","autoSelectedOption","searchProps","optionRender","_option$data$value","amount","extra","opts","currentGroup","useCurrentResourceGroupValue","formatAmount","number_format","binary","round_length","ResourceTypeIcon","showTooltip","fontSize","fontSizeSM","MWCIconWrap","_resourceTypeIconSrcM","showIcon","showUnit","resourceTypeIconSrcMap","targetIcon","MicrochipIcon","content","alignSelf","description","pointerEvents","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","tagValues","r","w","d","perm","hasPermission","compact","vFolderAliasNameRegExp","DEFAULT_ALIAS_BASE_PATH","showAliasInput","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","aliasBasePath","aliasMap","controlledAliasMap","onChangeAliasMap","rowKey","onChangeAutoMountedFolders","showAutoMountedFoldersSection","tableProps","getRowKey","record","isOpenCreateModal","setIsOpenCreateModal","setSelectedRowKeys","setAliasMap","keypair","useKeyPairLazyLoadQuery","accessKey","internalForm","useForm","slice","isPendingRefetch","startRefetchTransition","allFolderList","domain","keypair_resource_policy","_VFolderTableProjectQuery","domain_name","domainName","group_id","keypair_resource_policy_name","resource_policy","filteredFolderListByPermission","allowedVFolderHostsByDomain","allowed_vfolder_hosts","allowedVFolderHostsByGroup","allowedVFolderHostsByKeypairResourcePolicy","mergedVFolderPermissions","mountAllowedVolumes","keys","volume","folder","host","autoMountedFolderNamesByPermission","vf","_vf$name","searchKey","setSearchKey","displayingFolders","inputToAliasPath","useCallback","input","handleAliasUpdate","getFieldsValue","strict","k","stringify","shadowRoot","useShadowRoot","columns","getPopupContainer","QuestionCircleOutlined","dataIndex","sorter","render","isCurrentRowSelected","maxWidth","BAILink","to","allAliasPathMap","reduce","path","aliasPath","n","stopPropagation","usage_mode","UserOutlined","group_name","row","VFolderPermissionTag","created_at","dayjs","format","defaultSortOrder","PlusIcon","ghost","component","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","sortDirections","Descriptions","FolderCreateModal","arr","alias","autoName","trigger","VFolderTable","pagination","names","node","v0","v3","v4","v5","hash","UNLIMITED_MAX_CONTAINERS_PER_SESSIONS","UNLIMITED_MAX_CONCURRENT_SESSIONS","_hooksUsingRelay_KeyPairQuery","refresh","_hooksUsingRelay_KeyPairResourcePolicyQuery","max_concurrent_sessions","concurrency_used","initialOptions","setOptions","tablePaginationOption","setTablePaginationOption"],"sourceRoot":""}