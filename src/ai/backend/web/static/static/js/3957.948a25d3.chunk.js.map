{"version":3,"file":"static/js/3957.948a25d3.chunk.js","mappings":"sQAUA,MAAMA,EAAmBC,EAAAA,MAAW,IAAM,qEACpCC,EAAeD,EAAAA,MACnB,IAAM,8EAKFE,GAAWC,EAAAA,EAAAA,aAAYC,EAAAA,YAAa,YA6D1C,EA3DgDC,IAAmB,OAAbC,GAAOD,EAC3D,MAAM,EAAEE,IAAMC,EAAAA,EAAAA,OACR,MAAEC,GAAUC,EAAAA,EAAMC,YACjBC,EAAWC,IAAgBC,EAAAA,EAAAA,eAAc,MAAOZ,EAAU,CAC/Da,WAAY,YAGRC,GAAUC,EAAAA,EAAAA,IAAgB,CAC9B,CAAEC,IAAK,WAAYC,MAAOZ,EAAE,0BAc5B,CAAEW,IAAK,WAAYC,MAAO,oBAE5B,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,UAAU,SAASC,MAAM,UAAUC,IAAK,KAAKC,UACjDC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHC,aAAchB,EACdiB,YAAcX,IACZL,EAAaK,EAAc,EAE7BF,QAASA,EACTc,OAAQ,CACNC,KAAM,CACJC,QAAS,EACTC,WAAY,EACZC,SAAU,WAEZT,SAAA,CAEa,aAAdb,GACCQ,EAAAA,EAAAA,KAACe,EAAAA,SAAQ,CACPC,UAAUhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAQ,CAACC,QAAM,EAACC,MAAO,CAAEP,QAASvB,EAAM+B,aAAgBf,UAEnEL,EAAAA,EAAAA,KAACrB,EAAgB,MAEjB,KACW,aAAda,GACCQ,EAAAA,EAAAA,KAACe,EAAAA,SAAQ,CACPC,UAAUhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAQ,CAACC,QAAM,EAACC,MAAO,CAAEP,QAASvB,EAAM+B,aAAgBf,UAEnEL,EAAAA,EAAAA,KAACnB,EAAY,MAEb,SAED,C","sources":["pages/ServingPage.tsx"],"sourcesContent":["import Flex from '../components/Flex';\nimport { filterEmptyItem } from '../helper';\nimport { Card, Skeleton, theme } from 'antd';\nimport React, { Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StringParam, useQueryParam, withDefault } from 'use-query-params';\n\n// FIXME: need to apply filtering type of service later\ntype TabKey = 'services' | 'chatting'; //  \"running\" | \"finished\" | \"others\";\n\nconst EndpointListPage = React.lazy(() => import('./EndpointListPage'));\nconst ChattingPage = React.lazy(\n  () => import('../components/lablupTalkativotUI/LLMPlaygroundPage'),\n);\n\ninterface ServingPageProps {}\n\nconst tabParam = withDefault(StringParam, 'services');\n\nconst ServingPage: React.FC<ServingPageProps> = ({ ...props }) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [curTabKey, setCurTabKey] = useQueryParam('tab', tabParam, {\n    updateType: 'replace',\n  });\n\n  const tabList = filterEmptyItem([\n    { key: 'services', label: t('modelService.Services') },\n    // FIXME: need to apply filtering type of service later\n    // {\n    //   key: \"running\",\n    //   label: t(\"session.Running\"),\n    // },\n    // {\n    //   key: \"finished\",\n    //   label: t(\"session.Finished\"),\n    // },\n    // {\n    //   key: \"others\",\n    //   label: t(\"session.Others\"),\n    // },\n    { key: 'chatting', label: 'LLM Playground' },\n  ]);\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'md'}>\n      <Card\n        activeTabKey={curTabKey}\n        onTabChange={(key) => {\n          setCurTabKey(key as TabKey);\n        }}\n        tabList={tabList}\n        styles={{\n          body: {\n            padding: 0,\n            paddingTop: 1,\n            overflow: 'hidden',\n          },\n        }}\n      >\n        {curTabKey === 'services' ? (\n          <Suspense\n            fallback={<Skeleton active style={{ padding: token.paddingMD }} />}\n          >\n            <EndpointListPage />\n          </Suspense>\n        ) : null}\n        {curTabKey === 'chatting' ? (\n          <Suspense\n            fallback={<Skeleton active style={{ padding: token.paddingMD }} />}\n          >\n            <ChattingPage />\n          </Suspense>\n        ) : null}\n      </Card>\n    </Flex>\n  );\n};\n\nexport default ServingPage;\n"],"names":["EndpointListPage","React","ChattingPage","tabParam","withDefault","StringParam","_ref","props","t","useTranslation","token","theme","useToken","curTabKey","setCurTabKey","useQueryParam","updateType","tabList","filterEmptyItem","key","label","_jsx","Flex","direction","align","gap","children","_jsxs","Card","activeTabKey","onTabChange","styles","body","padding","paddingTop","overflow","Suspense","fallback","Skeleton","active","style","paddingMD"],"sourceRoot":""}