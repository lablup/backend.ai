{"version":3,"file":"static/js/7970.cecd3cfb.chunk.js","mappings":"uUAkBA,MAgIA,EA9HIA,IAA2C,IAA1C,eAAEC,KAAmBC,GAAeF,EACvC,MAAM,MAAEG,GAAUC,EAAAA,EAAMC,YAClB,QAAEC,GAAYC,EAAAA,EAAIC,UAClB,EAAEC,IAAMC,EAAAA,EAAAA,OACR,YAAEC,IAAgBC,EAAAA,EAAAA,MAClB,iBAAEC,EAAgB,iBAAEC,IAAqBC,EAAAA,EAAAA,KAEzCC,GADYC,EAAAA,EAAAA,MACgBC,SAAS,4BAGrCC,EAAsBC,EAAAA,SAAc,IAAMT,GAAa,CAACA,IAExDU,GAAuBC,EAAAA,EAAAA,cAC1BC,IACCC,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CAERC,QAAS,EACPH,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLC,KAAK,UACLC,QAASA,IACPjB,EAAiBU,EAAKQ,GAAI,CACxBC,UAAWA,KACK,OAAd/B,QAAc,IAAdA,GAAAA,GAAiB,GACjBK,EAAQ2B,QACNxB,EAAE,kDACH,EAEHyB,QAAUC,IACM,OAAdlC,QAAc,IAAdA,GAAAA,GAAiB,GACK,OAAjB,OAADkC,QAAC,IAADA,OAAC,EAADA,EAAGC,YAIP9B,EAAQ+B,MACNF,EAAE7B,SAAWG,EAAE,6CAJfH,EAAQ+B,MAAM5B,EAAE,4BAKjB,IAGN6B,SAGA7B,EAAE,mBAFC,WAINe,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLW,QAAM,EACNT,QAASA,IACPhB,EAAiBS,EAAKQ,GAAI,CACxBC,UAAWA,KACK,OAAd/B,QAAc,IAAdA,GAAAA,GAAiB,GACjBK,EAAQ2B,QACNxB,EAAE,kDACH,EAEHyB,QAAUC,IACM,OAAdlC,QAAc,IAAdA,GAAAA,GAAiB,GACjBK,EAAQ+B,MACNF,EAAE7B,SAAWG,EAAE,6CAChB,IAGN6B,SAGA7B,EAAE,oBAFC,YAKR+B,MAAO,CACLC,QAAStC,EAAMuC,WACfJ,UAEFd,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAKiB,KAAI,CACbC,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,IAAK,MAAMT,SAAA,EACfd,EAAAA,EAAAA,KAACwB,EAAAA,EAAc,KACfxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAWC,KAAI,CAACC,QAAM,EAAAb,SAAEf,EAAK6B,kBAGlCC,aACE7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAY,CACXC,KAAK,QACLC,OAAQ,EACRC,MAAO,CACL,CACEC,IAAK,OACLC,MAAOlD,EAAE,aACT6B,SAAUtB,EACNO,EAAKqC,mBACLrC,EAAKsC,SAEX,CACEH,IAAK,aACLC,MAAOlD,EAAE,mBACT6B,UAAUd,EAAAA,EAAAA,KAACsC,EAAAA,EAAqB,CAACC,WAAYxC,EAAKyC,cA7EvDzC,EAAKQ,KAqFd,CACElB,EACAC,EACAb,EACAK,EACAG,EACAN,EAAMuC,UACN1B,IAIJ,OACEQ,EAAAA,EAAAA,KAACyC,EAAAA,EAAQ,CACPC,SAAUA,IAAoB,OAAdjE,QAAc,IAAdA,OAAc,EAAdA,GAAiB,GACjC2C,MAAOnC,EAAE,uBACT0D,OAAQ,QACJjE,EAAaoC,UAEjBd,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACH2C,WAAYjD,EACZkD,WAAYhD,KAEL,C","sources":["components/FolderInvitationResponseModal.tsx"],"sourcesContent":["import { useSuspendedBackendaiClient } from '../hooks';\nimport {\n  InvitationItem,\n  useSetVFolderInvitations,\n  useVFolderInvitationsValue,\n} from '../hooks/useVFolderInvitations';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport VFolderPermissionCell from './VFolderPermissionCell';\nimport { FolderOutlined } from '@ant-design/icons';\nimport { List, Button, Typography, theme, Descriptions, App } from 'antd';\nimport React, { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface FolderInvitationResponseModalProps extends BAIModalProps {\n  onRequestClose?: (success: boolean) => void;\n}\n\nconst FolderInvitationResponseModal: React.FC<\n  FolderInvitationResponseModalProps\n> = ({ onRequestClose, ...baiModalProps }) => {\n  const { token } = theme.useToken();\n  const { message } = App.useApp();\n  const { t } = useTranslation();\n  const { invitations } = useVFolderInvitationsValue();\n  const { acceptInvitation, rejectInvitation } = useSetVFolderInvitations();\n  const baiClient = useSuspendedBackendaiClient();\n  const hasInviterEmail = baiClient.supports('invitation-inviter-email');\n\n  // Memoize invitations to prevent unnecessary re-renders\n  const memoizedInvitations = React.useMemo(() => invitations, [invitations]);\n\n  const renderInvitationItem = useCallback(\n    (item: InvitationItem) => (\n      <List.Item\n        key={item.id}\n        actions={[\n          <Button\n            type=\"primary\"\n            onClick={() =>\n              acceptInvitation(item.id, {\n                onSuccess: () => {\n                  onRequestClose?.(true);\n                  message.success(\n                    t('data.invitation.SuccessfullyAcceptedInvitation'),\n                  );\n                },\n                onError: (e: any) => {\n                  onRequestClose?.(false);\n                  if (e?.statusCode === 409) {\n                    message.error(t('data.FolderAlreadyExists'));\n                    return;\n                  }\n                  message.error(\n                    e.message || t('data.invitation.FailedToAcceptInvitation'),\n                  );\n                },\n              })\n            }\n            key=\"accept\"\n          >\n            {t('summary.Accept')}\n          </Button>,\n          <Button\n            danger\n            onClick={() =>\n              rejectInvitation(item.id, {\n                onSuccess: () => {\n                  onRequestClose?.(true);\n                  message.success(\n                    t('data.invitation.SuccessfullyDeclinedInvitation'),\n                  );\n                },\n                onError: (e) => {\n                  onRequestClose?.(false);\n                  message.error(\n                    e.message || t('data.invitation.FailedToDeclineInvitation'),\n                  );\n                },\n              })\n            }\n            key=\"decline\"\n          >\n            {t('summary.Decline')}\n          </Button>,\n        ]}\n        style={{\n          padding: token.paddingSM,\n        }}\n      >\n        <List.Item.Meta\n          title={\n            <Flex gap={'xxs'}>\n              <FolderOutlined />\n              <Typography.Text strong>{item.vfolder_name}</Typography.Text>\n            </Flex>\n          }\n          description={\n            <Descriptions\n              size=\"small\"\n              column={1}\n              items={[\n                {\n                  key: 'from',\n                  label: t('data.From'),\n                  children: hasInviterEmail\n                    ? item.inviter_user_email\n                    : item.inviter,\n                },\n                {\n                  key: 'permission',\n                  label: t('data.Permission'),\n                  children: <VFolderPermissionCell permission={item.perm} />,\n                },\n              ]}\n            />\n          }\n        />\n      </List.Item>\n    ),\n    [\n      acceptInvitation,\n      rejectInvitation,\n      onRequestClose,\n      message,\n      t,\n      token.paddingSM,\n      hasInviterEmail,\n    ],\n  );\n\n  return (\n    <BAIModal\n      onCancel={() => onRequestClose?.(false)}\n      title={t('data.InvitedFolders')}\n      footer={null}\n      {...baiModalProps}\n    >\n      <List\n        dataSource={memoizedInvitations}\n        renderItem={renderInvitationItem}\n      />\n    </BAIModal>\n  );\n};\n\nexport default FolderInvitationResponseModal;\n"],"names":["_ref","onRequestClose","baiModalProps","token","theme","useToken","message","App","useApp","t","useTranslation","invitations","useVFolderInvitationsValue","acceptInvitation","rejectInvitation","useSetVFolderInvitations","hasInviterEmail","useSuspendedBackendaiClient","supports","memoizedInvitations","React","renderInvitationItem","useCallback","item","_jsx","List","Item","actions","Button","type","onClick","id","onSuccess","success","onError","e","statusCode","error","children","danger","style","padding","paddingSM","Meta","title","_jsxs","Flex","gap","FolderOutlined","Typography","Text","strong","vfolder_name","description","Descriptions","size","column","items","key","label","inviter_user_email","inviter","VFolderPermissionCell","permission","perm","BAIModal","onCancel","footer","dataSource","renderItem"],"sourceRoot":""}