{"version":3,"file":"static/js/266.e40affab.chunk.js","mappings":"6PAwFA,IA1EkC,SAAHA,GASxB,IAADC,EAAAD,EARJE,UAAAA,OAAS,IAAAD,EAAG,MAAKA,EAAAE,EAAAH,EACjBI,KAAAA,OAAI,IAAAD,EAAG,SAAQA,EAAAE,EAAAL,EACfM,QAAAA,OAAO,IAAAD,EAAG,aAAYA,EAAAE,EAAAP,EACtBQ,MAAAA,OAAK,IAAAD,EAAG,SAAQA,EAAAE,EAAAT,EAChBU,IAAAA,OAAG,IAAAD,EAAG,EAACA,EACPE,EAAKX,EAALW,MACAC,EAAQZ,EAARY,SACGC,GAASC,EAAAA,EAAAA,GAAAd,EAAAe,GAEJC,EAAUC,EAAAA,EAAAA,WAAVD,MAEFE,EAAgB,CAACZ,EAASE,GAC1BW,EAAkC,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeE,KAAI,SAACC,GAC7C,IAAIC,EACJ,OAAQD,GACN,IAAK,QACHC,EAAU,aACV,MACF,IAAK,MACHA,EAAU,WACV,MACF,IAAK,UACHA,EAAU,gBACV,MACF,IAAK,SACHA,EAAU,eACV,MACF,QACEA,EAAUD,EAId,OAAOC,CACT,IACMC,GAA8BC,EAAAA,EAAAA,GAAA,CAClCC,QAAS,OACTC,cAAexB,EACfyB,SAAUvB,EACVwB,eAAgBT,EAAmB,GACnCU,WAAYV,EAAmB,IAC5BR,GAGL,OACEmB,EAAAA,EAAAA,KAAA,OAAAN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEb,OAAKa,EAAAA,EAAAA,GAAA,CACHK,WAAY,UACZE,gBAAiB,cACjBC,OAAQ,gBACRC,UAAW,aACXR,QAAS,OACTS,UAAW,OACXR,cAAe,SACfS,WAAY,EACZC,UAAW,OACXC,OAAQ,EACRC,UAAW,EACXC,SAAU,EACVC,QAAS,EACTC,SAAU,WACVC,eAAgB,OAChBhC,IAEiB,kBAARA,EAAmBM,EAAM,UAAYN,EAAIiC,eAAiBjC,GAChEa,IAEDV,GAAS,IAAAD,SAEZA,IAGP,C,6ECnFMgC,EAKD,SAAH5C,EAA2B6C,GAAwB,IAA7CC,EAAK9C,EAAL8C,MAAKC,EAAA/C,EAAEW,MAAAA,OAAK,IAAAoC,EAAG,CAAC,EAACA,EAAcC,EAAGC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC3CG,GAA6BC,EAAAA,EAAAA,MAAlBC,GAA6CC,EAAAA,EAAAA,GAAAH,EAAA,GAAjC,GAAZE,aAEX,OACExB,EAAAA,EAAAA,KAAA,OACE0B,IAAKF,EAAaR,GAClBnC,OAAKa,EAAAA,EAAAA,GAAA,CACHiC,MAAO,QACPC,OAAQ,SACL/C,GAELqC,IAAKA,GAGX,EAEA,IAAeW,EAAAA,KAAWf,E,8BCE1B,IAAMgB,EAAuB,CAC3B,oBAAuB,GACvB,KAAQ,WACR,SAAY,KACZ,KAAQ,0BACR,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,SACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,QACR,WAAc,OAGlB,KAAQ,iBACR,YAAe,KAGhBA,KAAoB,oCAErB,W,8BCjCA,IAAMA,EAAyB,WAC/B,IAAIC,EAAK,CACP,aAAgB,KAChB,KAAQ,gBACR,KAAQ,MAEVC,EAAK,CACH,aAAgB,KAChB,KAAQ,gBACR,KAAQ,YAEVC,EAAK,CACH,aAAgB,KAChB,KAAQ,gBACR,KAAQ,SAEVC,EAAK,CACH,aAAgB,KAChB,KAAQ,gBACR,KAAQ,UAEVC,EAAK,CACH,aAAgB,KAChB,KAAQ,gBACR,KAAQ,mBAEVC,EAAK,CACH,aAAgB,KAChB,KAAQ,gBACR,KAAQ,UAEVC,EAAK,CACH,CACE,KAAQ,WACR,KAAQ,aACR,aAAgB,MAElB,CACE,KAAQ,WACR,KAAQ,WACR,aAAgB,YAElB,CACE,KAAQ,WACR,KAAQ,QACR,aAAgB,SAElB,CACE,KAAQ,WACR,KAAQ,SACR,aAAgB,UAElB,CACE,KAAQ,WACR,KAAQ,SACR,aAAgB,WAGpBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,QACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,eACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,gBACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,SACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,cACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,gBACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,SACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,iBACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,YACR,WAAc,MAEhBC,EAAM,CACJ,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,eACR,WAAc,MAEhB,MAAO,CACL,SAAY,CACV,oBAAuB,CACpBtB,EACAC,EACAC,EACAC,EACAC,EACAC,GAEH,KAAQ,WACR,SAAY,KACZ,KAAQ,mBACR,WAAc,CACZ,CACE,MAAS,KACT,KAASC,EACT,aAAgB,qBAChB,KAAQ,cACR,KAAQ,uBACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,iBAChB,KAAQ,cACR,KAAQ,QACR,QAAU,EACV,WAAc,CACXC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACD,CACE,KAAQ,KACR,KAAQ,iBACR,KAAQ,4BAGZ,WAAc,OAGlB,WAAc,OAGlB,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAuB,CACpBpB,EACAC,EACAH,EACAC,EACAI,EACAD,GAEH,KAAQ,YACR,KAAQ,mBACR,WAAc,CACZ,CACE,MAAS,KACT,KAASE,EACT,aAAgB,qBAChB,KAAQ,cACR,KAAQ,uBACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,iBAChB,KAAQ,cACR,KAAQ,QACR,QAAU,EACV,WAAc,CACXC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACD,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,OAGlB,WAAc,OAGlB,WAAc,QAIpB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,mBACR,cAAiB,QACjB,KAAQ,gvBAGZ,CA5S+B,GA8S9BvB,EAAawB,KAAO,mCAErB,W,iNCpUaC,EAAoB,SAACC,GAChC,OAV6B,SAACA,GAC9B,IAAAC,GAA0BC,EAAAA,EAAAA,UAASF,IAAgB,IAAIG,MAAOC,eAAcC,GAAApC,EAAAA,EAAAA,GAAAgC,EAAA,GAArEK,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAKtB,MAAO,CAACC,EAHO,SAACE,GACdD,EAASC,IAAY,IAAIL,MAAOC,cAClC,EAEF,CAGSK,CAAgBT,EACzB,EAEaU,EAAwB,WAEnC,OADkBC,IACDC,QAAQC,UAC3B,EAEaC,EAAyB,WACpC,IAAMC,EAAYJ,IAClBK,GAA+Bd,EAAAA,EAAAA,UAG5B,CACDe,KAAMF,EAAUG,cAChBC,GAAIJ,EAAUK,SAASL,EAAUG,iBACjCG,GAAApD,EAAAA,EAAAA,GAAA+C,EAAA,GANKM,EAAOD,EAAA,GAAEE,EAAWF,EAAA,GAsB3B,OAdAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,SAACC,GAChB,IAAMC,EAAiBD,EAAEE,OACzBL,EAAY,CACVN,KAAMU,EACNR,GAAIJ,EAAUK,SAASO,IAE3B,EAEA,OADAE,SAASC,iBAAiB,2BAA4BL,GAC/C,WACLI,SAASE,oBAAoB,2BAA4BN,EAC3D,CACF,IAEOH,CACT,EAEaU,EAA8B,SAAHtH,GAIjC,IAHLuH,EAAYvH,EAAZuH,aAgBA,OAZeC,EAAAA,EAAAA,UAAQ,WAErB,IAAMC,EAAe,IAAIC,WAAWC,sBAClC,GACA,GACAJ,EACA,WAGF,OAAO,IAAIG,WAAWE,gBAAgBH,EAAc,sBACtD,GAAG,CAACF,GAGN,EAEatB,EAA8B,WA6BzC,OA5ByB4B,EAAAA,EAAAA,UAAc,CACrCC,SAAU,gCACVC,QAAS,kBACP,IAAIC,SAAQ,SAACC,GACX,GAEwC,qBAA/BP,WAAWQ,iBAEa,OAA/BR,WAAWQ,kBAE0B,IAArCR,WAAWQ,gBAAgBC,MAU3B,OAAOF,EAAQP,WAAWQ,iBAH1Bf,SAASC,iBAAiB,wBALT,SAAXL,IAEJkB,EAAQP,WAAWQ,iBACnBf,SAASE,oBAAoB,uBAAwBN,EACvD,GAMJ,GAAE,EACJqB,OAAO,EAEPC,UAAU,IAzBJC,IA6BV,EAeajF,EAA4B,WACvC,IAAckF,GAAaV,EAAAA,EAAAA,UAAS,CAClCC,SAAU,kCACVC,QAAS,WACP,OAAOS,MAAM,iCACVC,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MACC,SAACE,GAWC,OAAOA,CACT,GAEN,EACAN,UAAU,EACVD,OAAO,IAtBDE,KAyBFM,EAAe,SAACC,GAGpB,IAAKA,EACH,MAAO,CACLC,IAAK,GACLC,KAAM,IAGV,IAAMC,EAAQH,EAAUI,MAAM,KAE9BC,GAAoBF,EAAM,IAAMA,EAAM,IAAIC,MAAM,KAAIE,GAAA5F,EAAAA,EAAAA,GAAA2F,EAAA,GAGpD,MAAO,CAAEJ,IAHCK,EAAA,GAGIJ,KAHCI,EAAA,GACEF,MAAM,KAGzB,EAEA,MAAO,CACLV,EACA,CACEa,kBAAmB,SAACP,GAClB,IAAQC,EAAQF,EAAaC,GAArBC,IACR,OAAe,OAARP,QAAQ,IAARA,OAAQ,EAARA,EAAUc,UAAUP,GAAKvC,OAAQuC,CAC1C,EACAxF,aAAc,SAACuF,GAA0D,IAADS,EAAAC,EAA9BC,EAAIvG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,mBAC/C,IAAK4F,EAAW,MAAO,cACvB,IAAQC,EAAQF,EAAaC,GAArBC,IACR,OACEU,QACoCrG,KAA3B,OAARoF,QAAQ,IAARA,GAAwB,QAAhBe,EAARf,EAAUc,UAAUP,UAAI,IAAAQ,OAAhB,EAARA,EAA0BG,MACf,OAARlB,QAAQ,IAARA,GAAwB,QAAhBgB,EAARhB,EAAUc,UAAUP,UAAI,IAAAS,OAAhB,EAARA,EAA0BE,KAC1B,cAER,EACAC,aAAc,SAACb,GACb,EAEFc,eAAgB,SAACd,GAEf,OADiBD,EAAaC,GAAtBE,KACI,EACd,EACAa,aAAc,SAACf,GAEb,OADiBD,EAAaC,GAAtBE,KACI,EACd,EACAH,aAAAA,GAGN,C,2FCzMaiB,EAAchC,EAAAA,SACdiC,EAAiBC,EAAAA,W,wSCAxBC,EAID,SAAHhK,EAA2B6C,GAAc,IAAnCC,EAAK9C,EAAL8C,MAAK9C,EAAEW,MACbmC,EAAQA,GAAS,GACjB,IAAAM,GACEC,EAAAA,EAAAA,MAA2B4G,GAAA1G,EAAAA,EAAAA,GAAAH,EAAA,MADlBgG,EAAiBa,EAAjBb,kBAAmBO,EAAcM,EAAdN,eAAgBC,EAAYK,EAAZL,aAsD9C,OACEM,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvJ,SAAA,EACEkB,EAAAA,EAAAA,KAAA,OAAAlB,SAAMwI,EAAkBtG,MACxBhB,EAAAA,EAAAA,KAAA,OAAAlB,SAAM+I,EAAe7G,MACrBhB,EAAAA,EAAAA,KAAA,OAAAlB,SAAMgJ,EAAa9G,OAiBzB,EAEA,EAAea,EAAAA,KAAWqG,G,SCkE1B,EApHK,SAAHhK,GAAoC,IAA9BoK,EAAYpK,EAAZoK,aAAcC,EAAQrK,EAARqK,SACdhE,GAAYJ,EAAAA,EAAAA,MACVjF,EAAUC,EAAAA,EAAAA,WAAVD,MACFsJ,GAAUC,EAAAA,EAAAA,kBAAW,IAAAC,EAAAA,EAAAA,EAAAC,EAAC,MAW1BL,GAKIM,GAAWZ,EAAAA,EAAAA,GAAe,CAC9Ba,WAAY,SAACC,GACX,IAAMC,EACJxE,EAAUyE,gBAAkB,EAAIR,EAAQ/D,KAAO+D,EAAQS,WACzD,OAAO1E,EAAU2E,OAAOH,EAAWD,EACrC,IAGFK,EAAeC,EAAAA,EAAAA,UAARC,GAAsB5H,EAAAA,EAAAA,GAAA0H,EAAA,GAAlB,GACHG,GAAMC,EAAAA,EAAAA,MAAND,EAERE,GAA8B9F,EAAAA,EAAAA,WAAS,GAAM+F,GAAAhI,EAAAA,EAAAA,GAAA+H,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BhG,GAA4CC,EAAAA,EAAAA,UAAS8E,EAAQ/D,MAAKZ,GAAApC,EAAAA,EAAAA,GAAAgC,EAAA,GAA3DmG,EAAc/F,EAAA,GAAEgG,EAAiBhG,EAAA,GAClCiG,EAnDgB,WACtB,MAAO,CACL,UACA,aACA,cACA,UACA,YACA,YACA,WACAC,SATmC5I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAU1C,CA0CI6I,CAAgBxB,EAAQyB,aAAU5I,KAxClB,WAClB,MAAO,CAAC,aAAc,YAAa,WAAW0I,SADb5I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAEtC,CAuCK+I,CAAY1B,EAAQyB,aAAU5I,IAC/BkD,EAAU4F,QAAU3B,EAAQ4B,WAiBxBC,EAAkBzB,EAAS0B,WAAaV,IAAmBpB,EAAQ/D,KAIzE,OACE2D,EAAAA,EAAAA,MAACmC,EAAAA,EAAI,CAACnM,UAAU,SAAQU,SAAA,EACtBkB,EAAAA,EAAAA,KAACuK,EAAAA,EAAI,CAACnM,UAAU,MAAKU,UACnBkB,EAAAA,EAAAA,KAACoJ,EAAAA,EAAI,CAACC,KAAMA,EAAKvK,SACd4K,GACC1J,EAAAA,EAAAA,KAACoJ,EAAAA,EAAAA,KAAS,CACRvK,MAAO,CAAE0B,OAAQ,GACjBkE,KAAM,OACN+F,MAAO,CACL,CACEC,UAAU,GAEZ,CACEC,IAAK,IAEP,CACEC,QAAS,kDACTC,QAAStB,EACP,4CACAuB,aAEJ/L,UAEFkB,EAAAA,EAAAA,KAAC8K,EAAAA,EAAK,CACJC,WAAS,EACTC,aAAc,WA3C1B3B,EAAK4B,iBAAiBtE,MAAK,SAAAuE,GAAe,IAAZzG,EAAIyG,EAAJzG,KAC5BkF,GAAW,GACXE,EAAkBpF,GAClBmE,EAASuC,OAAO1G,EAAM,CACpB2G,UAAW,SAACC,GACV9C,GAAYA,GACd,EACA+C,QAAS,SAACC,GACR1B,EAAkBrB,EAAQ/D,KAC5B,GAEJ,GAgCsC,EAC1B+G,QAAS,SAACtG,GACM,WAAVA,EAAE8B,KAAkB2C,GAAW,EACrC,OAIJvB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvJ,SAAA,EACEkB,EAAAA,EAAAA,KAACyL,EAAAA,EAAAA,KAAe,CAAC5M,MAAO,CAAE6M,QAASrB,EAAkB,GAAM,GAAIvL,SAC5D8K,IAEFE,IACC9J,EAAAA,EAAAA,KAAC2L,EAAAA,GAAM,CACLC,QAASvB,EACTwB,KAAK,OACLlE,MAAM3H,EAAAA,EAAAA,KAAC8L,EAAAA,EAAY,IACnBjN,MAAO,CAAEkN,MAAO7M,EAAM8M,WACtBC,QAAS,WACP5C,EAAK6C,eAAe,CAClBzH,KAAM+D,EAAQ/D,OAEhBkF,GAAW,EACb,YAOZ3J,EAAAA,EAAAA,KAACc,EAAAA,EAAa,CAACE,MAAOwH,EAAQxH,SAC9BhB,EAAAA,EAAAA,KAACkI,EAAgB,CAAClH,MAAOwH,EAAQxH,UAGvC,E,mFCUA,EA3IgD,SAAH9C,GAStC,IAADiO,EAAAC,EAAAlO,EARJ+L,OAAAA,OAAM,IAAAmC,EAAG,GAAEA,EACDC,GADCnO,EACXoO,MAAUpO,EACVqO,aAAAA,OAAW,IAAAF,EAAG,EAACA,EAAAG,EAAAtO,EACfuO,SAAAA,OAAQ,IAAAD,EAAG,GAAEA,EACbE,EAASxO,EAATwO,UACAC,EAAMzO,EAANyO,OAAMC,EAAA1O,EACN2O,cAAAA,OAAa,IAAAD,EAAG,GAAEA,EACfE,GAAU9N,EAAAA,EAAAA,GAAAd,EAAAe,GAEPsF,GAAYJ,EAAAA,EAAAA,MAElB4I,GAAmCxJ,EAAAA,EAAAA,IAAkB,iBAAgByJ,GAAAvL,EAAAA,EAAAA,GAAAsL,EAAA,GAA9DE,EAAQD,EAAA,GAAEE,EAAcF,EAAA,GACzBG,GAAyBC,EAAAA,EAAAA,kBAAiBH,EAAWJ,GACnDvD,GAAMC,EAAAA,EAAAA,MAAND,GAGL/E,EAAU8I,SAAS,uBACpBpD,EAAOF,SAAS,eAEhBE,EAASA,EAAO0C,QAAO,SAACzH,GAAC,MAAW,cAANA,CAAiB,KAGjD,IAAQoI,GAAyBC,EAAAA,EAAAA,uBAAgB,IAAAC,EAAAA,EAAAA,EAAA7E,EAAA,MAwC/C,CACE2D,MAAOG,EACPgB,QAASlB,EAAc,GAAKE,EAC5BxC,OAAc,QAARkC,EAAElC,SAAM,IAAAkC,OAAA,EAANA,EAAQuB,KAAK,KACrBC,SAAUjB,EAGVkB,iBAAkBrJ,EAAU8I,SAAS,oBAEvC,CACEJ,SAAUE,EACVU,YAAa,iBAnDTP,qBAuDR,OACEtN,EAAAA,EAAAA,KAAAqI,EAAAA,SAAA,CAAAvJ,UACEkB,EAAAA,EAAAA,KAAC8N,EAAAA,GAAKpO,EAAAA,EAAAA,GAAA,CACJqO,OAAQ,CAAEC,GAAG,GACbC,QAAS,CACP,CACEC,MAAO5E,EAAE,uBACT6E,OAAM,SAACrK,EAAOsK,EAAQC,GAEpB,OADAC,QAAQC,IAAIH,IAEVpO,EAAAA,EAAAA,KAACwO,EAAe,CAEdlG,aAAc8F,EACd7F,SAAU,WACR2E,EACEkB,EAAOnF,YAAa,IAAItF,MAAOC,cAEnC,GANKwK,EAAOnF,WASlB,EACAwF,MAAO,QAET,CACEP,MAAO5E,EAAE,kBACToF,UAAW,UAEb,CACER,MAAO5E,EAAE,oBAEX,CACE4E,MAAO5E,EAAE,0BAEX,CACE4E,MAAO5E,EAAE,kBAEX,CACE4E,MAAO5E,EAAE,wBAEX,CACE4E,MAAO5E,EAAE,yBAEX,CACE4E,MAAO5E,EAAE,wBAEX,CACE4E,MAAO5E,EAAE,mBAIbqF,aAAiC,OAApBrB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBsB,QAAS,IAAIjC,OAAOA,IAKnDG,KAIZ,ECtJM+B,EAAW,CACf,UACA,aACA,cACA,UACA,YACA,YACA,WAEIC,EAAiB,CACrBC,QAASF,EACTG,YAAaH,EACbI,MAAOJ,EACPK,UAAWL,EACXM,SAAU,CAAC,aAAc,aACzBC,OAAQ,CAAC,cAAe,SACxBC,QAASR,GAwLX,EA7KqD,SAAH3Q,GAAsB,IAAhBY,EAAQZ,EAARY,SAC9CwK,GAAMC,EAAAA,EAAAA,MAAND,EACF/E,GAAYJ,EAAAA,EAAAA,MACVjF,EAAUC,EAAAA,EAAAA,WAAVD,MACFoQ,GAAahL,EAAAA,EAAAA,MAEnBkF,GAAsC9F,EAAAA,EAAAA,UAAiB,WAAU+F,GAAAhI,EAAAA,EAAAA,GAAA+H,EAAA,GAA1D+F,EAAW9F,EAAA,GAAE+F,EAAc/F,EAAA,GAClChG,GAAoDC,EAAAA,EAAAA,UAElD,QAAOG,GAAApC,EAAAA,EAAAA,GAAAgC,EAAA,GAFFgM,EAAkB5L,EAAA,GAAE6L,EAAqB7L,EAAA,GAKhD,OACEuE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvJ,SAAA,EACEkB,EAAAA,EAAAA,KAAC2P,EAAAA,EAAK,CACJ/E,SACExC,EAAAA,EAAAA,MAACmC,EAAAA,EAAI,CAAC3L,IAAK,KAAKE,SAAA,EACdsJ,EAAAA,EAAAA,MAACqD,EAAAA,EAAAA,KAAe,CAAA3M,SAAA,CAAC,UACP,IACgB,YAAvB2Q,EACG,kBACA,kBAAmB,IAAI,+CAG7BzP,EAAAA,EAAAA,KAAC4P,EAAAA,EAAS,CACRC,QAAS,CACP,CACEC,MAAO,UACPhM,MAAO,WAET,CACEgM,OACE9P,EAAAA,EAAAA,KAACyL,EAAAA,EAAAA,KAAe,CACd5M,MAAO,CACLkN,MACyB,SAAvB0D,EACIvQ,EAAM6Q,kBACN1O,GACNvC,SACH,SAIHgF,MAAO,OACP6D,MAEE3H,EAAAA,EAAAA,KAACgQ,EAAAA,EAAkB,CAACC,aAAc/Q,EAAMgR,iBAI9CpM,MAAO2L,EAEPU,SAAU,SAACnC,GAAC,OAAK0B,EAAsB1B,EAAE,OAI/CnC,KAAK,UACLuE,QAAM,EACNvR,MAAO,CAAEwR,WAAY,GAAIC,YAAa,GAAIC,aAAc,MAElC,SAAvBd,GACCrH,EAAAA,EAAAA,MAACmC,EAAAA,EAAI,CACHnM,UAAU,SACVM,MAAM,UACNG,MAAO,CAAE6B,QAASxB,EAAMwB,QAAS9B,IAAKM,EAAMqB,QAASzB,SAAA,CAEpDA,GAMDsJ,EAAAA,EAAAA,MAACmC,EAAAA,EAAI,CAACnM,UAAU,SAASM,MAAM,UAASI,SAAA,EACtCkB,EAAAA,EAAAA,KAACuK,EAAAA,EAAI,CAAC1L,MAAO,CAAE2R,KAAM,GAAI1R,UACvBkB,EAAAA,EAAAA,KAACyQ,EAAAA,EACC,CACAC,UAAWnB,EACXY,SAAU,SAACnJ,GAAG,OAAKwI,EAAexI,EAAc,EAChD2J,YAAa,CAAEC,aAAc,GAC7B/R,MAAO,CACL8C,MAAO,OACPkP,YAAa3R,EAAM4R,UACnBC,aAAc7R,EAAM4R,UACpBE,oBAAqB9R,EAAM+R,aAC3BC,qBAAsBhS,EAAM+R,cAE9BrC,MAAK,CACH,CACE5H,IAAK,UACL8I,MAAOxG,EAAE,oBAEX,CACEtC,IAAK,cACL8I,MAAOxG,EAAE,wBAEX,CACEtC,IAAK,QACL8I,MAAOxG,EAAE,mBACV6H,QAAAC,EAAAA,EAAAA,GACG7M,EAAU8I,SAAS,sBACnB,CACE,CACErG,IAAK,YACL8I,MAAOxG,EAAE,uBAGb,IAAI,CACR,CACEtC,IAAK,WACL8I,MAAOxG,EAAE,qBAEX,CACEtC,IAAK,SACL8I,MAAOxG,EAAE,qBAGb+H,mBAAoB,CAClBC,OACEtR,EAAAA,EAAAA,KAACuK,EAAAA,EAAI,CAACnM,UAAU,MAAMQ,IAAK,KAAKE,UAK9BkB,EAAAA,EAAAA,KAAA,+BACEuR,SAAS,UACT5M,GAAG,mBACH6M,QAAM,YAkBlBxR,EAAAA,EAAAA,KAACyR,EAAAA,SAAQ,CAACC,UAAU1R,EAAAA,EAAAA,KAAA,OAAAlB,SAAK,cAAgBA,UACvCkB,EAAAA,EAAAA,KAAC2R,EAAW,CACVjF,UAAW4C,EAAW3K,GACtBsF,OACE6E,EAAeS,IAAgBT,EAAwB,QAEzDnC,OAAQ,SAACnE,GAGJ,IAADoJ,EAFF,OACE,CAAC,cAAe,QAAS,aAAa7H,SAASwF,KAEjC,OAAP/G,QAAO,IAAPA,GAAa,QAANoJ,EAAPpJ,EAASqD,YAAI,IAAA+F,OAAN,EAAPA,EAAeC,iBAAkBtC,CAG5C,EACA1C,cAAe0C,aAMvBvP,EAAAA,EAAAA,KAAAqI,EAAAA,SAAA,CAAAvJ,UAEEkB,EAAAA,EAAAA,KAAA,2BAAyB8R,MAAM,OAAOrN,KAAK,MAAM+M,QAAM,QAKjE,C","sources":["components/Flex.tsx","components/ImageMetaIcon.tsx","components/SessionListColums/__generated__/SessionInfoCellFragment.graphql.ts","components/__generated__/SessionListQuery.graphql.ts","hooks/index.ts","hooks/reactQueryAlias.tsx","components/SessionKernelTag.tsx","components/SessionListColums/SessionInfoCell.tsx","components/SessionList.tsx","pages/SessionListPage.tsx"],"sourcesContent":["import { theme } from \"antd\";\nimport React, { PropsWithChildren } from \"react\";\n\nexport interface FlexProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"dir\">,\n    PropsWithChildren {\n  direction?: \"row\" | \"row-reverse\" | \"column\" | \"column-reverse\";\n  wrap?: \"nowrap\" | \"wrap\" | \"wrap-reverse\";\n  justify?: \"start\" | \"end\" | \"center\" | \"between\" | \"around\";\n  // | \"evenly\";\n  align?: \"start\" | \"end\" | \"center\" | \"baseline\" | \"stretch\";\n  gap?: number | \"xxs\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"xxl\";\n}\n\nconst Flex: React.FC<FlexProps> = ({\n  direction = \"row\",\n  wrap = \"nowrap\",\n  justify = \"flex-start\",\n  align = \"center\",\n  gap = 0,\n  style,\n  children,\n  ...restProps\n}) => {\n  const { token } = theme.useToken();\n\n  const transferConst = [justify, align];\n  const transferConstStyle = transferConst?.map((el) => {\n    let tempTxt;\n    switch (el) {\n      case \"start\":\n        tempTxt = \"flex-start\";\n        break;\n      case \"end\":\n        tempTxt = \"flex-end\";\n        break;\n      case \"between\":\n        tempTxt = \"space-between\";\n        break;\n      case \"around\":\n        tempTxt = \"space-around\";\n        break;\n      default:\n        tempTxt = el;\n        break;\n    }\n\n    return tempTxt;\n  });\n  const flexStyle: React.CSSProperties = {\n    display: \"flex\",\n    flexDirection: direction,\n    flexWrap: wrap,\n    justifyContent: transferConstStyle[0],\n    alignItems: transferConstStyle[1],\n    ...style,\n  };\n\n  return (\n    <div\n      style={{\n        alignItems: \"stretch\",\n        backgroundColor: \"transparent\",\n        border: \"0 solid black\",\n        boxSizing: \"border-box\",\n        display: \"flex\",\n        flexBasis: \"auto\",\n        flexDirection: \"column\",\n        flexShrink: 0,\n        listStyle: \"none\",\n        margin: 0,\n        minHeight: 0,\n        minWidth: 0,\n        padding: 0,\n        position: \"relative\",\n        textDecoration: \"none\",\n        gap:\n          // @ts-ignore\n          typeof gap === \"string\" ? token[\"padding\" + gap.toUpperCase()] : gap,\n        ...flexStyle,\n      }}\n      {...restProps}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Flex;\n","import React from \"react\";\nimport { useBackendaiImageMetaData } from \"../hooks\";\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n  alt?: string | null;\n}> = ({ image, style = {} }, bordered, alt = \"\") => {\n  const [, { getImageIcon }] = useBackendaiImageMetaData();\n\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: \"1.5em\",\n        height: \"1.5em\",\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","/**\n * @generated SignedSource<<705ef385310781207a9535f4072f5109>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionInfoCellFragment$data = {\n  readonly id: string | null;\n  readonly image: string | null;\n  readonly name: string | null;\n  readonly session_id: any | null;\n  readonly status: string | null;\n  readonly user_email: string | null;\n  readonly \" $fragmentType\": \"SessionInfoCellFragment\";\n};\nexport type SessionInfoCellFragment$key = {\n  readonly \" $data\"?: SessionInfoCellFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionInfoCellFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionInfoCellFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"session_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"user_email\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"image\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSession\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"93f8cd0d4b47d24ea281955be0ad792b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<e20c7bf2aca0db11dea165540b77fda0>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionListQuery$variables = {\n  ak?: string | null;\n  group_id?: string | null;\n  limit: number;\n  offset: number;\n  skipClusterSize: boolean;\n  status?: string | null;\n};\nexport type SessionListQuery$data = {\n  readonly compute_session_list: {\n    readonly items: ReadonlyArray<{\n      readonly access_key: string | null;\n      readonly architecture: string | null;\n      readonly cluster_size: number | null;\n      readonly created_at: any | null;\n      readonly id: string | null;\n      readonly image: string | null;\n      readonly mounts: ReadonlyArray<string | null> | null;\n      readonly name: string | null;\n      readonly occupied_slots: any | null;\n      readonly service_ports: any | null;\n      readonly session_id: any | null;\n      readonly starts_at: any | null;\n      readonly status: string | null;\n      readonly status_info: string | null;\n      readonly terminated_at: any | null;\n      readonly type: string | null;\n      readonly \" $fragmentSpreads\": FragmentRefs<\"SessionInfoCellFragment\">;\n    } | null>;\n  } | null;\n};\nexport type SessionListQuery = {\n  response: SessionListQuery$data;\n  variables: SessionListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"ak\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"group_id\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"skipClusterSize\"\n},\nv5 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv6 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"access_key\",\n    \"variableName\": \"ak\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"group_id\",\n    \"variableName\": \"group_id\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"limit\",\n    \"variableName\": \"limit\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"offset\",\n    \"variableName\": \"offset\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"status\",\n    \"variableName\": \"status\"\n  }\n],\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"type\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"session_id\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"created_at\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"terminated_at\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status_info\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"service_ports\",\n  \"storageKey\": null\n},\nv18 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mounts\",\n  \"storageKey\": null\n},\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"occupied_slots\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"starts_at\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"cluster_size\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/),\n      (v5/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v6/*: any*/),\n        \"concreteType\": \"ComputeSessionList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSession\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/),\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"SessionInfoCellFragment\"\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v5/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"SessionListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v6/*: any*/),\n        \"concreteType\": \"ComputeSessionList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSession\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"user_email\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"e152f44d42d7fc4a33606a935adc582f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionListQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $ak: String\\n  $group_id: String\\n  $status: String\\n  $skipClusterSize: Boolean!\\n) {\\n  compute_session_list(limit: $limit, offset: $offset, access_key: $ak, group_id: $group_id, status: $status) {\\n    items {\\n      id\\n      type\\n      session_id\\n      name\\n      image\\n      architecture\\n      created_at\\n      terminated_at\\n      status\\n      status_info\\n      service_ports\\n      mounts\\n      occupied_slots\\n      access_key\\n      starts_at\\n      cluster_size @skipOnClient(if: $skipClusterSize)\\n      ...SessionInfoCellFragment\\n    }\\n  }\\n}\\n\\nfragment SessionInfoCellFragment on ComputeSession {\\n  id\\n  session_id\\n  name\\n  status\\n  user_email\\n  image\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"c41131439f810b7c5cd0bd9eb2857a46\";\n\nexport default node;\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nexport const useBackendAIConnectedState = () => {\n  const [time, setTime] = useState<string>();\n\n  useEffect(() => {\n    const listener = () => {\n      setTime(new Date().toISOString());\n    };\n    document.addEventListener(\"backend-ai-connected\", listener);\n    return () => {\n      document.removeEventListener(\"backend-ai-connected\", listener);\n    };\n  }, []);\n\n  return time;\n};\n\nexport const useDateISOState = (initialValue?: string) => {\n  const [value, setValue] = useState(initialValue || new Date().toISOString());\n\n  const update = (newValue?: string) => {\n    setValue(newValue || new Date().toISOString());\n  };\n  return [value, update] as const;\n};\n\nexport const useUpdatableState = (initialValue: string) => {\n  return useDateISOState(initialValue);\n};\n\nexport const useCurrentDomainValue = () => {\n  const baiClient = useSuspendedBackendaiClient();\n  return baiClient._config.domainName;\n};\n\nexport const useCurrentProjectValue = () => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [project, _setProject] = useState<{\n    name: string;\n    id: string;\n  }>({\n    name: baiClient.current_group,\n    id: baiClient.groupIds[baiClient.current_group],\n  });\n\n  useEffect(() => {\n    const listener = (e: any) => {\n      const newProjectName = e.detail;\n      _setProject({\n        name: newProjectName,\n        id: baiClient.groupIds[newProjectName],\n      });\n    };\n    document.addEventListener(\"backend-ai-group-changed\", listener);\n    return () => {\n      document.removeEventListener(\"backend-ai-group-changed\", listener);\n    };\n  });\n\n  return project;\n};\n\nexport const useAnonymousBackendaiClient = ({\n  api_endpoint,\n}: {\n  api_endpoint: string;\n}) => {\n  const client = useMemo(() => {\n    //@ts-ignore\n    const clientConfig = new globalThis.BackendAIClientConfig(\n      \"\",\n      \"\",\n      api_endpoint,\n      \"SESSION\"\n    );\n    //@ts-ignore\n    return new globalThis.BackendAIClient(clientConfig, \"Backend.AI Console.\");\n  }, [api_endpoint]);\n\n  return client;\n};\n\nexport const useSuspendedBackendaiClient = () => {\n  const { data: client } = useQuery<any>({\n    queryKey: \"backendai-client-for-suspense\",\n    queryFn: () =>\n      new Promise((resolve) => {\n        if (\n          //@ts-ignore\n          typeof globalThis.backendaiclient === \"undefined\" ||\n          //@ts-ignore\n          globalThis.backendaiclient === null ||\n          //@ts-ignore\n          globalThis.backendaiclient.ready === false\n        ) {\n          const listener = () => {\n            // @ts-ignore\n            resolve(globalThis.backendaiclient);\n            document.removeEventListener(\"backend-ai-connected\", listener);\n          };\n          document.addEventListener(\"backend-ai-connected\", listener);\n        } else {\n          //@ts-ignore\n          return resolve(globalThis.backendaiclient);\n        }\n      }),\n    retry: false,\n    // enabled: false,\n    suspense: true,\n  });\n\n  return client;\n};\n\ninterface ImageMetadata {\n  name: string;\n  description: string;\n  group: string;\n  tags: string[];\n  icon: string;\n  label: {\n    category: string;\n    tag: string;\n    color: string;\n  }[];\n}\n\nexport const useBackendaiImageMetaData = () => {\n  const { data: metadata } = useQuery({\n    queryKey: \"backendai-metadata-for-suspense\",\n    queryFn: () => {\n      return fetch(\"resources/image_metadata.json\")\n        .then((response) => response.json())\n        .then(\n          (json: {\n            imageInfo: {\n              [key: string]: ImageMetadata;\n            };\n            tagAlias: {\n              [key: string]: string;\n            };\n            tagReplace: {\n              [key: string]: string;\n            };\n          }) => {\n            return json;\n          }\n        );\n    },\n    suspense: true,\n    retry: false,\n  });\n\n  const getImageMeta = (imageName: string) => {\n    // cr.backend.ai/multiarch/python:3.9-ubuntu20.04\n    // key = python, tags = [3.9, ubuntu20.04]\n    if (!imageName) {\n      return {\n        key: \"\",\n        tags: [],\n      };\n    }\n    const specs = imageName.split(\"/\");\n\n    const [key, tag] = (specs[2] || specs[1]).split(\":\");\n    const tags = tag.split(\"-\");\n\n    return { key, tags };\n  };\n\n  return [\n    metadata,\n    {\n      getImageAliasName: (imageName: string) => {\n        const { key } = getImageMeta(imageName);\n        return metadata?.imageInfo[key].name || key;\n      },\n      getImageIcon: (imageName?: string | null, path = \"resources/icons/\") => {\n        if (!imageName) return \"default.png\";\n        const { key } = getImageMeta(imageName);\n        return (\n          path +\n          (metadata?.imageInfo[key]?.icon !== undefined\n            ? metadata?.imageInfo[key]?.icon\n            : \"default.png\")\n        );\n      },\n      getImageTags: (imageName: string) => {\n        // const { key, tags } = getImageMeta(imageName);\n      },\n      getBaseVersion: (imageName: string) => {\n        const { tags } = getImageMeta(imageName);\n        return tags[0];\n      },\n      getBaseImage: (imageName: string) => {\n        const { tags } = getImageMeta(imageName);\n        return tags[1];\n      },\n      getImageMeta,\n    },\n  ] as const;\n};\n","import { useQuery, useMutation } from \"react-query\";\n\nexport const useTanQuery = useQuery;\nexport const useTanMutation = useMutation;\n","import React from \"react\";\nimport { useBackendaiImageMetaData } from \"../hooks\";\n\nconst SessionKernelTag: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n}> = ({ image, style = {} }, bordered) => {\n  image = image || \"\";\n  const [, { getImageAliasName, getBaseVersion, getBaseImage }] =\n    useBackendaiImageMetaData();\n\n  // const sessionTags = useMemo(() => {\n  //   const tags = [];\n  //   if (meta && image) {\n  //     const specs = image.split(\"/\");\n  //     const name = (specs[2] || specs[1]).split(\":\")[0];\n  //     if (name in meta.kernel_labels) {\n  //       tags.push(meta.kernel_labels[name]);\n  //     } else {\n  //       const imageParts = image.split(\"/\");\n  //       // const registry = imageParts[0]; // hide registry (ip of docker registry is exposed)\n  //       let namespace;\n  //       let langName;\n  //       if (imageParts.length === 3) {\n  //         namespace = imageParts[1];\n  //         langName = imageParts[2];\n  //       } else if (imageParts.length > 3) {\n  //         namespace = imageParts.slice(2, imageParts.length - 1).join(\"/\");\n  //         langName = imageParts[imageParts.length - 1];\n  //       } else {\n  //         namespace = \"\";\n  //         langName = imageParts[1];\n  //       }\n  //       langName = langName.split(\":\")[0];\n  //       langName = namespace ? namespace + \"/\" + langName : langName;\n  //       tags.push([\n  //         { category: \"Env\", tag: `${langName}`, color: \"lightgrey\" },\n  //       ]);\n  //     }\n  //   }\n  //   return tags;\n  // }, [image, meta?.kernel_labels, image]);\n\n  // const specs = image.split(\"/\");\n  // console.log(image, sessionTags);\n  // const _tag = specs[specs.length - 1].split(':')[1];\n  // const _tags = tag.split('-');\n  // const baseversion = _tags[0];\n  // const baseimage = _tags[1];\n\n  // if (_tags[1] !== undefined) {\n  //   sessions[objectKey].baseversion = tags[0];\n  //   sessions[objectKey].baseimage = tags[1];\n  //   sessions[objectKey].additional_reqs = tags.slice(1, tags.length).map((tag) => tag.toUpperCase());\n  // } else if (sessions[objectKey].tag !== undefined) {\n  //   sessions[objectKey].baseversion = sessions[objectKey].tag;\n  // } else {\n  //   sessions[objectKey].baseversion = tag;\n  // }\n\n  // const tag\n\n  return (\n    <>\n      <div>{getImageAliasName(image)}</div>\n      <div>{getBaseVersion(image)}</div>\n      <div>{getBaseImage(image)}</div>\n    </>\n    // <>\n    //   {_.map(sessionTags, (tag, i) =>\n    //     _.map(tag, ({ category, color, tag }) => {\n    //       if (category === \"Env\") {\n    //         category = tag;\n    //       }\n    //       // if (category && rowData.item.baseversion) {\n    //       //   item.tag = rowData.item.baseversion;\n    //       // }\n    //       return category;\n    //     })\n    //   )}\n    //   {/* {JSON.stringify(meta?.kernel_labels)} */}\n    // </>\n  );\n};\n\nexport default React.memo(SessionKernelTag);\n","import React, { useState } from \"react\";\nimport { useFragment } from \"react-relay\";\nimport graphql from \"babel-plugin-relay/macro\";\nimport { SessionInfoCellFragment$key } from \"./__generated__/SessionInfoCellFragment.graphql\";\n\nimport { Button, Form, Input, Typography, theme } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport Flex from \"../Flex\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  // useBackendaiImageMetaData,\n  useSuspendedBackendaiClient,\n} from \"../../hooks\";\nimport ImageMetaIcon from \"../ImageMetaIcon\";\nimport SessionKernelTag from \"../SessionKernelTag\";\nimport { useTanMutation } from \"../../hooks/reactQueryAlias\";\n\nconst isRunningStatus = (status: string = \"\") => {\n  return [\n    \"RUNNING\",\n    \"RESTARTING\",\n    \"TERMINATING\",\n    \"PENDING\",\n    \"SCHEDULED\",\n    \"PREPARING\",\n    \"PULLING\",\n  ].includes(status);\n};\n\nconst isPreparing = (status: string = \"\") => {\n  return [\"RESTARTING\", \"PREPARING\", \"PULLING\"].includes(status);\n};\n\nconst SessionInfoCell: React.FC<{\n  sessionFrgmt: SessionInfoCellFragment$key;\n  onRename?: () => void;\n}> = ({ sessionFrgmt, onRename }) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const session = useFragment(\n    graphql`\n      fragment SessionInfoCellFragment on ComputeSession {\n        id\n        session_id\n        name\n        status\n        user_email\n        image\n      }\n    `,\n    sessionFrgmt\n  );\n\n  // const metadata = useBackendaiImageMetaData();\n\n  const mutation = useTanMutation({\n    mutationFn: (newName: string) => {\n      const sessionId =\n        baiClient.APIMajorVersion < 5 ? session.name : session.session_id;\n      return baiClient.rename(sessionId, newName);\n    },\n  });\n\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n\n  const [editing, setEditing] = useState(false);\n  const [optimisticName, setOptimisticName] = useState(session.name);\n  const editable =\n    isRunningStatus(session.status || undefined) &&\n    !isPreparing(session.status || undefined) &&\n    baiClient.email === session.user_email;\n\n  const save = () => {\n    form.validateFields().then(({ name }) => {\n      setEditing(false);\n      setOptimisticName(name);\n      mutation.mutate(name, {\n        onSuccess: (result) => {\n          onRename && onRename();\n        },\n        onError: (error) => {\n          setOptimisticName(session.name);\n        },\n      });\n    });\n  };\n\n  const isPendingRename = mutation.isLoading || optimisticName !== session.name;\n\n  // sessions[objectKey].icon = this._getKernelIcon(session.image);\n  //         sessions[objectKey].sessionTags = this._getKernelInfo(session.image);\n  return (\n    <Flex direction=\"column\">\n      <Flex direction=\"row\">\n        <Form form={form}>\n          {editing ? (\n            <Form.Item\n              style={{ margin: 0 }}\n              name={\"name\"}\n              rules={[\n                {\n                  required: true,\n                },\n                {\n                  max: 64,\n                },\n                {\n                  pattern: /^(?:[a-zA-Z0-9][a-zA-Z0-9._-]{2,}[a-zA-Z0-9])?$/,\n                  message: t(\n                    \"session.Validation.EnterValidSessionName\"\n                  ).toString(),\n                },\n              ]}\n            >\n              <Input\n                autoFocus\n                onPressEnter={() => save()}\n                onKeyUp={(e) => {\n                  if (e.key === \"Escape\") setEditing(false);\n                }}\n              />\n            </Form.Item>\n          ) : (\n            <>\n              <Typography.Text style={{ opacity: isPendingRename ? 0.5 : 1 }}>\n                {optimisticName}\n              </Typography.Text>\n              {editable && (\n                <Button\n                  loading={isPendingRename}\n                  type=\"text\"\n                  icon={<EditOutlined />}\n                  style={{ color: token.colorLink }}\n                  onClick={() => {\n                    form.setFieldsValue({\n                      name: session.name,\n                    });\n                    setEditing(true);\n                  }}\n                ></Button>\n              )}\n            </>\n          )}\n        </Form>\n      </Flex>\n      <ImageMetaIcon image={session.image} />\n      <SessionKernelTag image={session.image} />\n    </Flex>\n  );\n};\n\nexport default SessionInfoCell;\n","import { Table, TableProps } from \"antd\";\nimport React, { useDeferredValue } from \"react\";\nimport { useLazyLoadQuery } from \"react-relay\";\nimport graphql from \"babel-plugin-relay/macro\";\nimport { SessionListQuery } from \"./__generated__/SessionListQuery.graphql\";\nimport { useTranslation } from \"react-i18next\";\nimport SessionInfoCell from \"./SessionListColums/SessionInfoCell\";\nimport { useSuspendedBackendaiClient, useUpdatableState } from \"../hooks\";\n\ntype Session = NonNullable<\n  SessionListQuery[\"response\"][\"compute_session_list\"]\n>[\"items\"][0];\ninterface SessionListProps extends Omit<TableProps<any>, \"dataSource\"> {\n  status?: string[];\n  limit?: number;\n  currentPage?: number;\n  pageSize?: number;\n  projectId?: string;\n  filter: (item: Session) => boolean;\n  extraFetchKey?: string;\n}\nconst SessionList: React.FC<SessionListProps> = ({\n  status = [],\n  limit = 50,\n  currentPage = 1,\n  pageSize = 50,\n  projectId,\n  filter,\n  extraFetchKey = \"\",\n  ...tableProps\n}) => {\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState(\"initial-fetch\");\n  const deferredMergedFetchKey = useDeferredValue(fetchKey + extraFetchKey);\n  const { t } = useTranslation();\n\n  if (\n    !baiClient.supports(\"avoid-hol-blocking\") &&\n    status.includes(\"SCHEDULED\")\n  ) {\n    status = status.filter((e) => e !== \"SCHEDULED\");\n  }\n\n  const { compute_session_list } = useLazyLoadQuery<SessionListQuery>(\n    graphql`\n      query SessionListQuery(\n        $limit: Int!\n        $offset: Int!\n        $ak: String\n        $group_id: String\n        $status: String\n        $skipClusterSize: Boolean!\n      ) {\n        compute_session_list(\n          limit: $limit\n          offset: $offset\n          access_key: $ak\n          group_id: $group_id\n          status: $status\n        ) {\n          items {\n            id\n            type\n            session_id\n            name\n            image\n            architecture\n            created_at\n            terminated_at\n            status\n            status_info\n            service_ports\n            mounts\n            occupied_slots\n            access_key\n            starts_at\n\n            cluster_size @skipOnClient(if: $skipClusterSize)\n            ...SessionInfoCellFragment\n          }\n        }\n      }\n    `,\n    {\n      limit: pageSize,\n      offset: (currentPage - 1) * pageSize,\n      status: status?.join(\",\"),\n      group_id: projectId,\n\n      // skipOnClients\n      skipClusterSize: !baiClient.supports(\"multi-container\"),\n    },\n    {\n      fetchKey: deferredMergedFetchKey,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  return (\n    <>\n      <Table\n        scroll={{ x: true }}\n        columns={[\n          {\n            title: t(\"session.SessionInfo\"),\n            render(value, record, index) {\n              console.log(record);\n              return (\n                <SessionInfoCell\n                  key={record.session_id}\n                  sessionFrgmt={record}\n                  onRename={() => {\n                    updateFetchKey(\n                      record.session_id + new Date().toISOString()\n                    );\n                  }}\n                />\n              );\n            },\n            fixed: \"left\",\n          },\n          {\n            title: t(\"session.Status\"),\n            dataIndex: \"status\",\n          },\n          {\n            title: t(\"general.Control\"),\n          },\n          {\n            title: t(\"session.Configuration\"),\n          },\n          {\n            title: t(\"session.Usage\"),\n          },\n          {\n            title: t(\"session.Reservation\"),\n          },\n          {\n            title: t(\"session.Architecture\"),\n          },\n          {\n            title: t(\"session.SessionType\"),\n          },\n          {\n            title: t(\"session.Agent\"),\n          },\n        ]}\n        // @ts-ignore\n        dataSource={(compute_session_list?.items || []).filter(filter)}\n        // dataSource={_.filter(compute_session_list?.items || [], () => {})}\n        // pagination={{\n\n        // }}\n        {...tableProps}\n      />\n    </>\n  );\n};\n\nexport default SessionList;\n","import { Alert, Segmented, Tabs, Typography, theme } from \"antd\";\nimport React, { PropsWithChildren, Suspense, useState } from \"react\";\nimport Flex from \"../components/Flex\";\nimport { useTranslation } from \"react-i18next\";\nimport { ThunderboltTwoTone } from \"@ant-design/icons\";\nimport SessionList from \"../components/SessionList\";\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from \"../hooks\";\n\nconst RUNNINGS = [\n  \"RUNNING\",\n  \"RESTARTING\",\n  \"TERMINATING\",\n  \"PENDING\",\n  \"SCHEDULED\",\n  \"PREPARING\",\n  \"PULLING\",\n];\nconst TAB_STATUS_MAP = {\n  running: RUNNINGS,\n  interactive: RUNNINGS,\n  batch: RUNNINGS,\n  inference: RUNNINGS,\n  finished: [\"TERMINATED\", \"CANCELLED\"],\n  others: [\"TERMINATING\", \"ERROR\"],\n  default: RUNNINGS,\n};\n\ntype TabKey =\n  | \"running\"\n  | \"interactive\"\n  | \"batch\"\n  | \"inference\"\n  | \"finished\"\n  | \"others\"\n  | \"default\";\nconst SessionListPage: React.FC<PropsWithChildren> = ({ children }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const curProject = useCurrentProjectValue();\n\n  const [selectedTab, setSelectedTab] = useState<TabKey>(\"running\");\n  const [selectedGeneration, setSelectedGeneration] = useState<\n    \"current\" | \"next\"\n  >(\"next\");\n\n  // console.log(compute_session_list?.items[0].);\n  return (\n    <>\n      <Alert\n        message={\n          <Flex gap={\"md\"}>\n            <Typography.Text>\n              This is{\" \"}\n              {selectedGeneration === \"current\"\n                ? \"current version\"\n                : \"NEXT generation\"}{\" \"}\n              of session list. you can switch anytime.\n            </Typography.Text>\n            <Segmented\n              options={[\n                {\n                  label: \"Current\",\n                  value: \"current\",\n                },\n                {\n                  label: (\n                    <Typography.Text\n                      style={{\n                        color:\n                          selectedGeneration === \"next\"\n                            ? token.colorPrimary\n                            : undefined,\n                      }}\n                    >\n                      Next\n                    </Typography.Text>\n                  ),\n                  value: \"next\",\n                  icon: (\n                    // <ThunderboltFilled style={{ color: token.colorPrimary }} />\n                    <ThunderboltTwoTone twoToneColor={token.colorWarning} />\n                  ),\n                },\n              ]}\n              value={selectedGeneration}\n              // @ts-ignore\n              onChange={(x) => setSelectedGeneration(x)}\n            />\n          </Flex>\n        }\n        type=\"warning\"\n        banner\n        style={{ marginTop: -14, marginLeft: -14, marginRight: -14 }}\n      />\n      {selectedGeneration === \"next\" ? (\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ padding: token.padding, gap: token.margin }}\n        >\n          {children}\n          {/* <Card bordered title={t(\"summary.ResourceStatistics\")}>\n            <p>SessionList</p>\n          </Card> */}\n\n          {/* <Card bodyStyle={{ paddingTop: 0 }}> */}\n          <Flex direction=\"column\" align=\"stretch\">\n            <Flex style={{ flex: 1 }}>\n              <Tabs\n                // type=\"card\"\n                activeKey={selectedTab}\n                onChange={(key) => setSelectedTab(key as TabKey)}\n                tabBarStyle={{ marginBottom: 0 }}\n                style={{\n                  width: \"100%\",\n                  paddingLeft: token.paddingMD,\n                  paddingRight: token.paddingMD,\n                  borderTopLeftRadius: token.borderRadius,\n                  borderTopRightRadius: token.borderRadius,\n                }}\n                items={[\n                  {\n                    key: \"running\",\n                    label: t(\"session.Running\"),\n                  },\n                  {\n                    key: \"interactive\",\n                    label: t(\"session.Interactive\"),\n                  },\n                  {\n                    key: \"batch\",\n                    label: t(\"session.Batch\"),\n                  },\n                  ...(baiClient.supports(\"inference-workload\")\n                    ? [\n                        {\n                          key: \"inference\",\n                          label: t(\"session.Inference\"),\n                        },\n                      ]\n                    : []),\n                  {\n                    key: \"finished\",\n                    label: t(\"session.Finished\"),\n                  },\n                  {\n                    key: \"others\",\n                    label: t(\"session.Others\"),\n                  },\n                ]}\n                tabBarExtraContent={{\n                  right: (\n                    <Flex direction=\"row\" gap={\"sm\"}>\n                      {/* <Tooltip title={t(\"session.exportCSV\")}>\n                        <Button icon={<DownloadOutlined />} type=\"text\" />\n                      </Tooltip> */}\n                      {/* @ts-ignore */}\n                      <backend-ai-session-launcher\n                        location=\"session\"\n                        id=\"session-launcher\"\n                        active\n                      />\n                    </Flex>\n                  ),\n                }}\n              />\n              {/* <Button type=\"text\" icon={<MoreOutlined />} /> */}\n            </Flex>\n            {/* <Button type=\"primary\" icon={<PoweroffOutlined />}>\n            시작\n          </Button> */}\n\n            {/* @ts-ignore */}\n            {/* <backend-ai-session-launcher\n          location=\"session\"\n          id=\"session-launcher\"\n          active\n        /> */}\n            <Suspense fallback={<div>loading..</div>}>\n              <SessionList\n                projectId={curProject.id}\n                status={\n                  TAB_STATUS_MAP[selectedTab] || TAB_STATUS_MAP[\"default\"]\n                }\n                filter={(session) => {\n                  if (\n                    [\"interactive\", \"batch\", \"inference\"].includes(selectedTab)\n                  ) {\n                    return session?.type?.toLowerCase() === selectedTab;\n                  }\n                  return true;\n                }}\n                extraFetchKey={selectedTab}\n              />\n            </Suspense>\n          </Flex>\n        </Flex>\n      ) : (\n        <>\n          {/* @ts-ignore */}\n          <backend-ai-session-view class=\"page\" name=\"job\" active />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default SessionListPage;\n"],"names":["_ref","_ref$direction","direction","_ref$wrap","wrap","_ref$justify","justify","_ref$align","align","_ref$gap","gap","style","children","restProps","_objectWithoutProperties","_excluded","token","theme","transferConst","transferConstStyle","map","el","tempTxt","flexStyle","_objectSpread","display","flexDirection","flexWrap","justifyContent","alignItems","_jsx","backgroundColor","border","boxSizing","flexBasis","flexShrink","listStyle","margin","minHeight","minWidth","padding","position","textDecoration","toUpperCase","ImageMetaIcon","bordered","image","_ref$style","alt","arguments","length","undefined","_useBackendaiImageMet","useBackendaiImageMetaData","getImageIcon","_slicedToArray","src","width","height","React","node","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","hash","useUpdatableState","initialValue","_useState3","useState","Date","toISOString","_useState4","value","setValue","newValue","useDateISOState","useCurrentDomainValue","useSuspendedBackendaiClient","_config","domainName","useCurrentProjectValue","baiClient","_useState5","name","current_group","id","groupIds","_useState6","project","_setProject","useEffect","listener","e","newProjectName","detail","document","addEventListener","removeEventListener","useAnonymousBackendaiClient","api_endpoint","useMemo","clientConfig","globalThis","BackendAIClientConfig","BackendAIClient","useQuery","queryKey","queryFn","Promise","resolve","backendaiclient","ready","retry","suspense","data","metadata","fetch","then","response","json","getImageMeta","imageName","key","tags","specs","split","_split","_split2","getImageAliasName","imageInfo","_metadata$imageInfo$k","_metadata$imageInfo$k2","path","icon","getImageTags","getBaseVersion","getBaseImage","useTanQuery","useTanMutation","useMutation","SessionKernelTag","_useBackendaiImageMet3","_jsxs","_Fragment","sessionFrgmt","onRename","session","useFragment","_SessionInfoCellFragment","require","mutation","mutationFn","newName","sessionId","APIMajorVersion","session_id","rename","_Form$useForm","Form","form","t","useTranslation","_useState","_useState2","editing","setEditing","optimisticName","setOptimisticName","editable","includes","isRunningStatus","status","isPreparing","email","user_email","isPendingRename","isLoading","Flex","rules","required","max","pattern","message","toString","Input","autoFocus","onPressEnter","validateFields","_ref2","mutate","onSuccess","result","onError","error","onKeyUp","Typography","opacity","Button","loading","type","EditOutlined","color","colorLink","onClick","setFieldsValue","_status","_ref$status","_ref$currentPage","limit","currentPage","_ref$pageSize","pageSize","projectId","filter","_ref$extraFetchKey","extraFetchKey","tableProps","_useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","deferredMergedFetchKey","useDeferredValue","supports","compute_session_list","useLazyLoadQuery","_SessionListQuery","offset","join","group_id","skipClusterSize","fetchPolicy","Table","scroll","x","columns","title","render","record","index","console","log","SessionInfoCell","fixed","dataIndex","dataSource","items","RUNNINGS","TAB_STATUS_MAP","running","interactive","batch","inference","finished","others","default","curProject","selectedTab","setSelectedTab","selectedGeneration","setSelectedGeneration","Alert","Segmented","options","label","colorPrimary","ThunderboltTwoTone","twoToneColor","colorWarning","onChange","banner","marginTop","marginLeft","marginRight","flex","Tabs","activeKey","tabBarStyle","marginBottom","paddingLeft","paddingMD","paddingRight","borderTopLeftRadius","borderRadius","borderTopRightRadius","concat","_toConsumableArray","tabBarExtraContent","right","location","active","Suspense","fallback","SessionList","_session$type","toLowerCase","class"],"sourceRoot":""}