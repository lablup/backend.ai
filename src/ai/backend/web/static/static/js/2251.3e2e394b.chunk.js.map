{"version":3,"file":"static/js/2251.3e2e394b.chunk.js","mappings":"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","sources":["__generated__/ContainerLogModalFragment.graphql.ts","components/ComputeSessionNodeItems/ContainerLogModal.tsx","hooks/useMemoWithPrevious.tsx","__generated__/SessionDetailDrawerFragment.graphql.ts","__generated__/SessionDetailContentFragment.graphql.ts","__generated__/SessionDetailContentQuery.graphql.ts","__generated__/SessionDetailContentLegacyQuery.graphql.ts","__generated__/ConnectedKernelListFragment.graphql.ts","components/ComputeSessionNodeItems/ConnectedKernelList.tsx","__generated__/EditableSessionNameRefetchQuery.graphql.ts","__generated__/EditableSessionNameFragment.graphql.ts","components/ComputeSessionNodeItems/EditableSessionName.tsx","__generated__/SessionActionButtonsFragment.graphql.ts","__generated__/AppLauncherModalFragment.graphql.ts","components/ComputeSessionNodeItems/AppLauncherModal.tsx","hooks/useSuspendedFilteredAppTemplate.ts","__generated__/ContainerCommitModalFragment.graphql.ts","components/ComputeSessionNodeItems/ContainerCommitModal.tsx","components/ComputeSessionNodeItems/SessionActionButtons.tsx","hooks/useBackendAIAppLauncher.tsx","__generated__/SessionIdleChecksQuery.graphql.ts","__generated__/SessionIdleChecksNodeFragment.graphql.ts","components/ComputeSessionNodeItems/SessionIdleChecks.tsx","components/IdleCheckDescriptionModal.tsx","__generated__/MountedVFolderLinksQuery.graphql.ts","__generated__/MountedVFolderLinksLegacyLazyFolderLinkFragment.graphql.ts","__generated__/MountedVFolderLinksFragment.graphql.ts","__generated__/FolderLink_vfolderNode.graphql.ts","components/FolderLink.tsx","components/MountedVFolderLinks.tsx","components/SessionDetailContent.tsx","components/SessionDetailDrawer.tsx","helper/csv-util.ts"],"sourcesContent":["/**\n * @generated SignedSource<<66a61c644fe59873f6f6aadc24084384>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerLogModalFragment$data = {\n  readonly access_key: string | null | undefined;\n  readonly id: string;\n  readonly kernel_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly cluster_hostname: string | null | undefined;\n        readonly cluster_idx: number | null | undefined;\n        readonly cluster_role: string | null | undefined;\n        readonly container_id: string | null | undefined;\n        readonly id: string;\n        readonly row_id: string | null | undefined;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly name: string | null | undefined;\n  readonly row_id: string;\n  readonly status: string | null | undefined;\n  readonly \" $fragmentType\": \"ContainerLogModalFragment\";\n} | null | undefined;\nexport type ContainerLogModalFragment$key = {\n  readonly \" $data\"?: ContainerLogModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerLogModalFragment\">;\n};\n\nconst node: ReaderFragment = (function(){\nvar v0 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerLogModalFragment\",\n  \"selections\": [\n    (v0/*: any*/),\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": (v1/*: any*/),\n      \"action\": \"NONE\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"access_key\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"KernelConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"kernel_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"KernelEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"KernelNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                (v0/*: any*/),\n                (v1/*: any*/),\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"container_id\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cluster_idx\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cluster_role\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cluster_hostname\",\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"d40a1bc5857025c2f0e25dbf1a3c8cea\";\n\nexport default node;\n","import { ContainerLogModalFragment$key } from '../../__generated__/ContainerLogModalFragment.graphql';\nimport { downloadBlob } from '../../helper/csv-util';\nimport { useSuspendedBackendaiClient } from '../../hooks';\nimport { useTanQuery } from '../../hooks/reactQueryAlias';\nimport { useMemoWithPrevious } from '../../hooks/useMemoWithPrevious';\nimport BAIModal, { BAIModalProps } from '../BAIModal';\nimport BAISelect from '../BAISelect';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { LazyLog, ScrollFollow } from '@melloware/react-logviewer';\nimport { Button, Divider, Grid, theme, Tooltip, Typography } from 'antd';\nimport { BAIFlex } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { DownloadIcon } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useFragment } from 'react-relay';\n\ninterface ContainerLogModalProps extends BAIModalProps {\n  sessionFrgmt: ContainerLogModalFragment$key | null;\n  defaultKernelId?: string;\n}\n\nconst ContainerLogModal: React.FC<ContainerLogModalProps> = ({\n  sessionFrgmt,\n  defaultKernelId,\n  ...modalProps\n}) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n\n  const session = useFragment(\n    graphql`\n      fragment ContainerLogModalFragment on ComputeSessionNode {\n        id\n        row_id @required(action: NONE)\n        name\n        status\n        access_key\n        kernel_nodes {\n          edges {\n            node {\n              id\n              row_id\n              container_id\n              cluster_idx\n              cluster_role\n              cluster_hostname\n            }\n          }\n        }\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const kernelNodes = session?.kernel_nodes?.edges?.map((e) => e?.node) || [];\n  const [selectedKernelId, setSelectedKernelId] = useState(\n    defaultKernelId ||\n      _.find(kernelNodes, (e) => e?.cluster_role === 'main')?.row_id ||\n      kernelNodes[0]?.row_id,\n  );\n\n  const {\n    data: logs,\n    refetch,\n    isPending,\n    isRefetching,\n    dataUpdatedAt,\n  } = useTanQuery<string>({\n    queryKey: [\n      'containerLog',\n      session?.row_id,\n      session?.access_key,\n      selectedKernelId,\n      modalProps.open,\n    ],\n    queryFn: async () => {\n      if (\n        !modalProps.open ||\n        !session?.row_id ||\n        !session?.access_key ||\n        !selectedKernelId\n      ) {\n        return '';\n      }\n      return await baiClient\n        .get_logs(session?.row_id, session?.access_key, selectedKernelId, 15000)\n        .then((req: any) => req.result.logs);\n    },\n    staleTime: 5000,\n  });\n\n  const [lastLineNumbers, { resetPrevious: resetPreviousLineNumber }] =\n    useMemoWithPrevious(() => logs?.split('\\n').length || 0, [logs]);\n\n  const { md } = Grid.useBreakpoint();\n  const { t } = useTranslation();\n\n  return (\n    <BAIModal\n      title={\n        <BAIFlex style={{ maxWidth: '100%' }} gap={'sm'}>\n          <Typography.Title level={4} style={{ margin: 0, flexShrink: 0 }}>\n            {t('kernel.ContainerLogs')}\n          </Typography.Title>\n          {session ? (\n            <>\n              <Typography.Text style={{ fontWeight: 'normal' }} ellipsis>\n                {session?.name}\n              </Typography.Text>\n              <Typography.Text\n                style={{ fontWeight: 'normal', fontFamily: 'monospace' }}\n                copyable={{\n                  text: session?.row_id,\n                  tooltips: t('button.CopySomething', {\n                    name: t('session.SessionId'),\n                  }),\n                }}\n              >\n                ({md ? session?.row_id : session?.row_id.split('-')?.[0]})\n              </Typography.Text>\n            </>\n          ) : null}\n        </BAIFlex>\n      }\n      width={'100%'}\n      styles={{\n        header: {\n          width: '100%',\n        },\n        body: {\n          height: 'calc(100vh - 100px)',\n          maxHeight: 'calc(100vh - 100px)',\n        },\n      }}\n      {...modalProps}\n      footer={null}\n      destroyOnClose\n    >\n      <BAIFlex\n        direction=\"column\"\n        align=\"start\"\n        style={{ height: '100%' }}\n        gap={'sm'}\n      >\n        <BAIFlex gap=\"sm\" wrap=\"wrap\">\n          <BAISelect\n            value={selectedKernelId}\n            onChange={(value) => {\n              setSelectedKernelId(value);\n              resetPreviousLineNumber();\n            }}\n            autoSelectOption\n            options={_.chain(session?.kernel_nodes?.edges)\n              .sortBy((e) => `${e?.node?.cluster_role} ${e?.node?.cluster_idx}`)\n              .map((e) => {\n                return {\n                  label: (\n                    <>\n                      {e?.node?.cluster_hostname}\n                      <Typography.Text\n                        style={{\n                          fontFamily: 'monospace',\n                          fontSize: token.fontSizeSM,\n                        }}\n                        type=\"secondary\"\n                      >\n                        ({(e?.node?.row_id || '').substring(0, 5)})\n                      </Typography.Text>\n                    </>\n                  ),\n                  value: e?.node?.row_id,\n                };\n              })\n              .value()}\n          />\n          <Divider type=\"vertical\" />\n          {/* Request logs\n          <Select\n            value={logSize}\n            options={[\n              {\n                label: 'last 100 lines',\n                value: 100,\n              },\n              {\n                label: 'Full logs',\n                value: 'full',\n              },\n            ]}\n            onChange={(value) => { \n              setLogSize(value);\n              if(value!=='full'){\n                resetPreviousLineNumber();\n              }\n              refetch();\n            }}\n          ></Select> */}\n          <Tooltip title={t('button.Download')}>\n            <Button\n              size=\"middle\"\n              icon={<DownloadIcon />}\n              disabled={isPending || isRefetching}\n              onClick={() => {\n                const blob = new Blob([logs || ''], { type: 'text/plain' });\n                downloadBlob(\n                  blob,\n                  `${session?.name || 'session'}-logs-${selectedKernelId}-${new Date().toISOString()}.txt`,\n                );\n              }}\n            />\n          </Tooltip>\n          <Tooltip title={t('button.Refresh')}>\n            <Button\n              size=\"middle\"\n              loading={isPending || isRefetching}\n              icon={<ReloadOutlined />}\n              onClick={() => refetch()}\n            />\n          </Tooltip>\n        </BAIFlex>\n\n        <div\n          style={{\n            height: 'calc(100% - 50px)',\n            alignSelf: 'stretch',\n\n            border: `1px solid ${token.colorBorder}`,\n            overflow: 'hidden',\n          }}\n        >\n          <ScrollFollow\n            key={dataUpdatedAt} // to scroll to bottom on new data\n            startFollowing={true}\n            render={({ follow, onScroll }) => (\n              <LazyLog\n                caseInsensitive\n                enableSearch\n                enableSearchNavigation\n                selectableLines\n                text={logs || ''}\n                highlight={lastLineNumbers.previous}\n                extraLines={1}\n                // url={signed.uri}\n                // fetchOptions={\n                //   {\n                //     headers: signed.headers\n                //   }\n                // }\n                // stream\n                follow={follow}\n                onScroll={onScroll}\n              />\n            )}\n          />\n        </div>\n      </BAIFlex>\n    </BAIModal>\n  );\n};\n\nexport default ContainerLogModal;\n","import { DependencyList, useEffect, useMemo, useRef, useState } from 'react';\n\nexport const useMemoWithPrevious = <T,>(\n  factory: () => T,\n  deps: DependencyList,\n  { initialPrev }: { initialPrev?: T } | undefined = {},\n) => {\n  const prevRef = useRef(initialPrev);\n  const [prevResetKey, setPrevResetKey] = useState({});\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const current = useMemo(factory, deps);\n  const memoizedPrev = useMemo(() => {\n    return prevRef.current;\n    // Only update when the reset key changes and deps change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, prevResetKey]);\n\n  useEffect(() => {\n    prevRef.current = current;\n    // Only update when deps change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return [\n    {\n      previous: memoizedPrev,\n      current: current,\n    },\n    {\n      resetPrevious: () => {\n        prevRef.current = initialPrev;\n        setPrevResetKey({});\n      },\n    },\n  ] as const;\n};\n","/**\n * @generated SignedSource<<4837a722a58b7a0e4acb050e329067ce>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionDetailDrawerFragment$data = {\n  readonly id: string;\n  readonly project_id: string | null | undefined;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionDetailContentFragment\">;\n  readonly \" $fragmentType\": \"SessionDetailDrawerFragment\";\n};\nexport type SessionDetailDrawerFragment$key = {\n  readonly \" $data\"?: SessionDetailDrawerFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionDetailDrawerFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionDetailDrawerFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"project_id\",\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionDetailContentFragment\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"eb57207016a6a8cf6abbf348456840de\";\n\nexport default node;\n","/**\n * @generated SignedSource<<5f1364f0e57d312305acef65efeabc55>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionDetailContentFragment$data = {\n  readonly agent_ids: ReadonlyArray<string | null | undefined> | null | undefined;\n  readonly created_at: string;\n  readonly id: string;\n  readonly idle_checks: string | null | undefined;\n  readonly kernel_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly image: {\n          readonly \" $fragmentSpreads\": FragmentRefs<\"ImageNodeSimpleTagFragment\">;\n        } | null | undefined;\n        readonly \" $fragmentSpreads\": FragmentRefs<\"ConnectedKernelListFragment\">;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly name: string | null | undefined;\n  readonly owner: {\n    readonly email: string | null | undefined;\n  } | null | undefined;\n  readonly project_id: string | null | undefined;\n  readonly requested_slots: string | null | undefined;\n  readonly resource_opts: string | null | undefined;\n  readonly row_id: string | null | undefined;\n  readonly scaling_group: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly status_data: string | null | undefined;\n  readonly terminated_at: string | null | undefined;\n  readonly user_id: string | null | undefined;\n  readonly vfolder_mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n  readonly vfolder_nodes: {\n    readonly count: number | null | undefined;\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly \" $fragmentSpreads\": FragmentRefs<\"FolderLink_vfolderNode\">;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AppLauncherModalFragment\" | \"BAISessionAgentIdsFragment\" | \"BAISessionTypeTagFragment\" | \"ContainerCommitModalFragment\" | \"ContainerLogModalFragment\" | \"EditableSessionNameFragment\" | \"MountedVFolderLinksFragment\" | \"SessionActionButtonsFragment\" | \"SessionIdleChecksNodeFragment\" | \"SessionReservationFragment\" | \"SessionStatusDetailModalFragment\" | \"SessionStatusTagFragment\" | \"SessionUsageMonitorFragment\">;\n  readonly \" $fragmentType\": \"SessionDetailContentFragment\";\n} | null | undefined;\nexport type SessionDetailContentFragment$key = {\n  readonly \" $data\"?: SessionDetailContentFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionDetailContentFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionDetailContentFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"project_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"user_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"UserNode\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"owner\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"email\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"resource_opts\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status_data\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"vfolder_mounts\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"VirtualFolderConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"vfolder_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"VirtualFolderEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"VirtualFolderNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"args\": null,\n                  \"kind\": \"FragmentSpread\",\n                  \"name\": \"FolderLink_vfolderNode\"\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"count\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"created_at\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"terminated_at\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"scaling_group\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"agent_ids\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"requested_slots\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"idle_checks\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"KernelConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"kernel_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"KernelEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"KernelNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"concreteType\": \"ImageNode\",\n                  \"kind\": \"LinkedField\",\n                  \"name\": \"image\",\n                  \"plural\": false,\n                  \"selections\": [\n                    {\n                      \"args\": null,\n                      \"kind\": \"FragmentSpread\",\n                      \"name\": \"ImageNodeSimpleTagFragment\"\n                    }\n                  ],\n                  \"storageKey\": null\n                },\n                {\n                  \"args\": null,\n                  \"kind\": \"FragmentSpread\",\n                  \"name\": \"ConnectedKernelListFragment\"\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionStatusTagFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionActionButtonsFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"BAISessionTypeTagFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"EditableSessionNameFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionReservationFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"ContainerLogModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionUsageMonitorFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"ContainerCommitModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionIdleChecksNodeFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionStatusDetailModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"AppLauncherModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"MountedVFolderLinksFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"BAISessionAgentIdsFragment\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"7e566a807d4b6feea0a2c74e59b649d1\";\n\nexport default node;\n","/**\n * @generated SignedSource<<db36c550a3ba84cd00c3e29663048910>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionDetailContentQuery$variables = {\n  id: any;\n  project_id: string;\n};\nexport type SessionDetailContentQuery$data = {\n  readonly internalLoadedSession: {\n    readonly \" $fragmentSpreads\": FragmentRefs<\"SessionDetailContentFragment\">;\n  } | null | undefined;\n};\nexport type SessionDetailContentQuery = {\n  response: SessionDetailContentQuery$data;\n  variables: SessionDetailContentQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"project_id\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"id\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"project_id\",\n    \"variableName\": \"project_id\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv6 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"key\",\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"value\",\n    \"storageKey\": null\n  }\n],\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status_info\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionDetailContentQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"internalLoadedSession\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionDetailContentFragment\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionDetailContentQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"internalLoadedSession\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          (v4/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"project_id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"user_id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"UserNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"owner\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"email\",\n                \"storageKey\": null\n              },\n              (v2/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"resource_opts\",\n            \"storageKey\": null\n          },\n          (v5/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"status_data\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"vfolder_mounts\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"VirtualFolderConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"vfolder_nodes\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"VirtualFolderEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"VirtualFolderNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v3/*: any*/),\n                      (v4/*: any*/),\n                      (v2/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"count\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"created_at\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"terminated_at\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"scaling_group\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"agent_ids\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"requested_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"idle_checks\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"KernelConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"kernel_nodes\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"KernelEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"ImageNode\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"image\",\n                        \"plural\": false,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"base_image_name\",\n                            \"storageKey\": null\n                          },\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"version\",\n                            \"storageKey\": null\n                          },\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"architecture\",\n                            \"storageKey\": null\n                          },\n                          (v4/*: any*/),\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KVPair\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"tags\",\n                            \"plural\": true,\n                            \"selections\": (v6/*: any*/),\n                            \"storageKey\": null\n                          },\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KVPair\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"labels\",\n                            \"plural\": true,\n                            \"selections\": (v6/*: any*/),\n                            \"storageKey\": null\n                          },\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"registry\",\n                            \"storageKey\": null\n                          },\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"namespace\",\n                            \"storageKey\": null\n                          },\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"tag\",\n                            \"storageKey\": null\n                          },\n                          (v2/*: any*/)\n                        ],\n                        \"storageKey\": null\n                      },\n                      (v2/*: any*/),\n                      (v3/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_hostname\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_idx\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_role\",\n                        \"storageKey\": null\n                      },\n                      (v5/*: any*/),\n                      (v7/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"agent_id\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"container_id\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"live_stat\",\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v7/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"queue_position\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"type\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"access_key\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"service_ports\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"commit_status\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"priority\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"starts_at\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"occupied_slots\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"513945d2ba1145963bb6bf747ee73d76\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionDetailContentQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionDetailContentQuery(\\n  $id: GlobalIDField!\\n  $project_id: UUID!\\n) {\\n  internalLoadedSession: compute_session_node(id: $id, project_id: $project_id) {\\n    ...SessionDetailContentFragment\\n    id\\n  }\\n}\\n\\nfragment AppLauncherModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  service_ports\\n  access_key\\n}\\n\\nfragment BAISessionAgentIdsFragment on ComputeSessionNode {\\n  agent_ids\\n}\\n\\nfragment BAISessionTypeTagFragment on ComputeSessionNode {\\n  type\\n}\\n\\nfragment ConnectedKernelListFragment on KernelNode {\\n  id\\n  row_id\\n  cluster_hostname\\n  cluster_idx\\n  cluster_role\\n  status\\n  status_info\\n  agent_id\\n  container_id\\n}\\n\\nfragment ContainerCommitModalFragment on ComputeSessionNode {\\n  id\\n  name\\n  row_id\\n}\\n\\nfragment ContainerLogModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        id\\n        row_id\\n        container_id\\n        cluster_idx\\n        cluster_role\\n        cluster_hostname\\n      }\\n    }\\n  }\\n}\\n\\nfragment EditableSessionNameFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  priority\\n  user_id\\n  status\\n}\\n\\nfragment FolderLink_vfolderNode on VirtualFolderNode {\\n  row_id\\n  name\\n}\\n\\nfragment ImageNodeSimpleTagFragment on ImageNode {\\n  base_image_name @since(version: \\\"24.12.0\\\")\\n  version @since(version: \\\"24.12.0\\\")\\n  architecture\\n  name\\n  tags @since(version: \\\"24.12.0\\\") {\\n    key\\n    value\\n  }\\n  labels {\\n    key\\n    value\\n  }\\n  registry\\n  namespace @since(version: \\\"24.12.0\\\")\\n  tag\\n}\\n\\nfragment MountedVFolderLinksFragment on ComputeSessionNode {\\n  row_id\\n  vfolder_nodes @since(version: \\\"25.4.0\\\") {\\n    edges {\\n      node {\\n        ...FolderLink_vfolderNode\\n        id\\n      }\\n    }\\n  }\\n  ...MountedVFolderLinksLegacyLazyFolderLinkFragment\\n}\\n\\nfragment MountedVFolderLinksLegacyLazyFolderLinkFragment on ComputeSessionNode {\\n  row_id\\n  vfolder_mounts\\n}\\n\\nfragment SessionActionButtonsFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  type\\n  status\\n  access_key\\n  service_ports\\n  commit_status\\n  user_id\\n  ...TerminateSessionModalFragment\\n  ...ContainerLogModalFragment\\n  ...ContainerCommitModalFragment\\n  ...AppLauncherModalFragment\\n}\\n\\nfragment SessionDetailContentFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  project_id\\n  user_id\\n  owner @since(version: \\\"25.13.0\\\") {\\n    email\\n    id\\n  }\\n  resource_opts\\n  status\\n  status_data\\n  vfolder_mounts\\n  vfolder_nodes @since(version: \\\"25.4.0\\\") {\\n    edges {\\n      node {\\n        ...FolderLink_vfolderNode\\n        id\\n      }\\n    }\\n    count\\n  }\\n  created_at\\n  terminated_at\\n  scaling_group\\n  agent_ids\\n  requested_slots\\n  idle_checks @since(version: \\\"24.12.0\\\")\\n  kernel_nodes {\\n    edges {\\n      node {\\n        image {\\n          ...ImageNodeSimpleTagFragment\\n          id\\n        }\\n        ...ConnectedKernelListFragment\\n        id\\n      }\\n    }\\n  }\\n  ...SessionStatusTagFragment\\n  ...SessionActionButtonsFragment\\n  ...BAISessionTypeTagFragment\\n  ...EditableSessionNameFragment\\n  ...SessionReservationFragment\\n  ...ContainerLogModalFragment\\n  ...SessionUsageMonitorFragment\\n  ...ContainerCommitModalFragment\\n  ...SessionIdleChecksNodeFragment\\n  ...SessionStatusDetailModalFragment\\n  ...AppLauncherModalFragment\\n  ...MountedVFolderLinksFragment\\n  ...BAISessionAgentIdsFragment\\n}\\n\\nfragment SessionIdleChecksNodeFragment on ComputeSessionNode {\\n  id\\n  idle_checks @since(version: \\\"24.12.0\\\")\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionStatusDetailModalFragment on ComputeSessionNode {\\n  id\\n  name\\n  status\\n  status_info\\n  status_data\\n  starts_at\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  status\\n  status_info\\n  status_data\\n  queue_position @since(version: \\\"25.13.0\\\")\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  occupied_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment TerminateSessionModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  scaling_group\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        container_id\\n        agent_id\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment useSessionNodeLiveStatSessionFragment on ComputeSessionNode {\\n  id\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        cluster_role\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"752a64ec8ea79d4eaa6876f526ddc326\";\n\nexport default node;\n","/**\n * @generated SignedSource<<b578c487797c6dbc64cc146e21ebc701>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionDetailContentLegacyQuery$variables = {\n  uuid: string;\n};\nexport type SessionDetailContentLegacyQuery$data = {\n  readonly legacy_session: {\n    readonly group_id: string | null | undefined;\n  } | null | undefined;\n};\nexport type SessionDetailContentLegacyQuery = {\n  response: SessionDetailContentLegacyQuery$data;\n  variables: SessionDetailContentLegacyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"uuid\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"group_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"780428975b2d9c6608ca3db2d90b013e\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionDetailContentLegacyQuery(\\n  $uuid: UUID!\\n) {\\n  legacy_session: compute_session(id: $uuid) {\\n    group_id\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"407c9aac95a1b3572cd4f83828c8a0aa\";\n\nexport default node;\n","/**\n * @generated SignedSource<<c2b9e9640b4234caa238b90c16371674>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ConnectedKernelListFragment$data = ReadonlyArray<{\n  readonly agent_id: string | null | undefined;\n  readonly cluster_hostname: string | null | undefined;\n  readonly cluster_idx: number | null | undefined;\n  readonly cluster_role: string | null | undefined;\n  readonly container_id: string | null | undefined;\n  readonly id: string;\n  readonly row_id: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly status_info: string | null | undefined;\n  readonly \" $fragmentType\": \"ConnectedKernelListFragment\";\n}>;\nexport type ConnectedKernelListFragment$key = ReadonlyArray<{\n  readonly \" $data\"?: ConnectedKernelListFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ConnectedKernelListFragment\">;\n}>;\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"plural\": true\n  },\n  \"name\": \"ConnectedKernelListFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"cluster_hostname\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"cluster_idx\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"cluster_role\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status_info\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"agent_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"container_id\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"KernelNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"b07dcbdb178c221c667bd2f86f43cbd5\";\n\nexport default node;\n","import {\n  ConnectedKernelListFragment$data,\n  ConnectedKernelListFragment$key,\n} from '../../__generated__/ConnectedKernelListFragment.graphql';\nimport { ContainerLogModalFragment$key } from '../../__generated__/ContainerLogModalFragment.graphql';\n// import BAIPropertyFilter from '../BAIPropertyFilter';\nimport DoubleTag from '../DoubleTag';\nimport ContainerLogModal from './ContainerLogModal';\nimport { Button, Tag, theme, Tooltip, Typography } from 'antd';\nimport { ColumnType } from 'antd/lib/table';\nimport {\n  filterOutEmpty,\n  filterOutNullAndUndefined,\n  BAITable,\n  BAIUnmountAfterClose,\n} from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { ScrollTextIcon } from 'lucide-react';\nimport { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useFragment } from 'react-relay';\n\ntype Kernel = NonNullable<ConnectedKernelListFragment$data[number]>;\n\ninterface ConnectedKernelListProps {\n  kernelsFrgmt: ConnectedKernelListFragment$key;\n  sessionFrgmtForLogModal: ContainerLogModalFragment$key;\n  // fetchKey?: string;\n  // get the project id of the session for <= v24.12.0.\n  // projectId?: string | null;\n}\n\nconst kernelStatusTagColor = {\n  // prepare\n  PREPARING: 'blue',\n  BUILDING: 'blue',\n  PULLING: 'blue',\n  PREPARED: 'blue',\n  CREATING: 'blue',\n  // running\n  PENDING: 'green',\n  SCHEDULED: 'green',\n  RUNNING: 'green',\n  RESTARTING: 'green',\n  RESIZING: 'green',\n  SUSPENDED: 'green',\n  // terminated\n  TERMINATING: 'default',\n  TERMINATED: 'default',\n  CANCELLED: 'default',\n  // error\n  ERROR: 'red',\n};\n\nconst ConnectedKernelList: React.FC<ConnectedKernelListProps> = ({\n  kernelsFrgmt,\n  sessionFrgmtForLogModal,\n}) => {\n  const { t } = useTranslation();\n  const [kernelIdForLogModal, setKernelIdForLogModal] = useState<string>();\n  const { token } = theme.useToken();\n\n  const kernelNodes = useFragment(\n    graphql`\n      fragment ConnectedKernelListFragment on KernelNode @relay(plural: true) {\n        id\n        row_id\n        cluster_hostname\n        cluster_idx\n        cluster_role\n        status\n        status_info\n        agent_id\n        container_id\n      }\n    `,\n    kernelsFrgmt,\n  );\n\n  const columns = filterOutEmpty<ColumnType<Kernel>>([\n    {\n      title: t('kernel.Hostname'),\n      dataIndex: 'cluster_hostname',\n      render: (hostname, record) => {\n        return (\n          <>\n            <Typography.Text>{hostname}</Typography.Text>\n            <Tooltip title={t('session.SeeContainerLogs')}>\n              <Button\n                icon={<ScrollTextIcon />}\n                type=\"link\"\n                onClick={() => {\n                  record.row_id && setKernelIdForLogModal(record.row_id);\n                }}\n                style={{\n                  width: 'auto',\n                  height: 'auto',\n                  marginInlineStart: token.marginXXS,\n                  border: 'none',\n                }}\n              />\n            </Tooltip>\n          </>\n        );\n      },\n    },\n    {\n      title: t('kernel.Status'),\n      dataIndex: 'status',\n      render: (status, record) => {\n        return (\n          <>\n            {record?.status_info !== '' ? (\n              <DoubleTag\n                values={[\n                  { label: status, color: _.get(kernelStatusTagColor, status) },\n                  {\n                    label: record?.status_info,\n                    color: _.get(\n                      kernelStatusTagColor,\n                      record?.status_info ?? '',\n                    ),\n                  },\n                ]}\n              />\n            ) : (\n              <Tag color={_.get(kernelStatusTagColor, status)}>{status}</Tag>\n            )}\n          </>\n        );\n      },\n    },\n    {\n      title: t('kernel.AgentId'),\n      dataIndex: 'agent_id',\n      render: (id) =>\n        _.isEmpty(id) ? '-' : <Typography.Text copyable>{id}</Typography.Text>,\n    },\n    {\n      title: t('kernel.KernelId'),\n      fixed: 'left',\n      dataIndex: 'row_id',\n      render: (row_id) => (\n        <>\n          <Typography.Text copyable ellipsis>\n            {row_id}\n          </Typography.Text>\n        </>\n      ),\n    },\n    {\n      title: t('kernel.ContainerId'),\n      dataIndex: 'container_id',\n      onCell: () => ({\n        style: { maxWidth: 250 },\n      }),\n      render: (id) =>\n        _.isEmpty(id) ? (\n          '-'\n        ) : (\n          <Typography.Text copyable ellipsis>\n            {id}\n          </Typography.Text>\n        ),\n    },\n  ]);\n\n  const sortedKernels = useMemo(() => {\n    return _.orderBy(filterOutNullAndUndefined(kernelNodes), [\n      'cluster_role',\n      'cluster_idx',\n    ] as Array<keyof Kernel>);\n  }, [kernelNodes]);\n  return (\n    <>\n      {/* TODO: implement filter when compute_session_node query supports filter */}\n      {/* <BAIPropertyFilter\n        filterProperties={[\n          {\n            key: 'agent_id',\n            propertyLabel: t('kernel.AgentId'),\n            type: 'string',\n          },\n        ]}\n        value={filterString}\n        onChange={(value) => {\n          startFilterTransition(() => {\n            setFilterString(value);\n          });\n        }}\n      /> */}\n      <BAITable\n        bordered\n        // loading={isPendingFilter}\n        rowKey=\"id\"\n        scroll={{ x: 'max-content' }}\n        columns={columns}\n        dataSource={sortedKernels} // TODO: implement pagination when compute_session_node query supports pagination\n      />\n\n      <BAIUnmountAfterClose>\n        <ContainerLogModal\n          open={!!kernelIdForLogModal}\n          sessionFrgmt={sessionFrgmtForLogModal || null}\n          defaultKernelId={kernelIdForLogModal}\n          onCancel={() => {\n            setKernelIdForLogModal(undefined);\n          }}\n        />\n      </BAIUnmountAfterClose>\n    </>\n  );\n};\n\nexport default ConnectedKernelList;\n","/**\n * @generated SignedSource<<99e73abfe2c81d798ab51cbb7cbf6abc>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type EditableSessionNameRefetchQuery$variables = {\n  project_id: string;\n  sessionId: any;\n};\nexport type EditableSessionNameRefetchQuery$data = {\n  readonly compute_session_node: {\n    readonly id: string;\n    readonly name: string | null | undefined;\n  } | null | undefined;\n};\nexport type EditableSessionNameRefetchQuery = {\n  response: EditableSessionNameRefetchQuery$data;\n  variables: EditableSessionNameRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"project_id\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"sessionId\"\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"sessionId\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"project_id\",\n        \"variableName\": \"project_id\"\n      }\n    ],\n    \"concreteType\": \"ComputeSessionNode\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"compute_session_node\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"EditableSessionNameRefetchQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v0/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"EditableSessionNameRefetchQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"8b69af7860896e4611f1af57de4220c8\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"EditableSessionNameRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query EditableSessionNameRefetchQuery(\\n  $sessionId: GlobalIDField!\\n  $project_id: UUID!\\n) {\\n  compute_session_node(id: $sessionId, project_id: $project_id) {\\n    id\\n    name\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"8c0f641cc3f0f3d44322877d137c6fcf\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2966b965c5a39abf1f5fe5121ba20420>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type EditableSessionNameFragment$data = {\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly priority: number | null | undefined;\n  readonly row_id: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly user_id: string | null | undefined;\n  readonly \" $fragmentType\": \"EditableSessionNameFragment\";\n};\nexport type EditableSessionNameFragment$key = {\n  readonly \" $data\"?: EditableSessionNameFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"EditableSessionNameFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"EditableSessionNameFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"priority\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"user_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"9c053b92b568a9b132f7615d1869f32b\";\n\nexport default node;\n","import { EditableSessionNameFragment$key } from '../../__generated__/EditableSessionNameFragment.graphql';\nimport { EditableSessionNameRefetchQuery } from '../../__generated__/EditableSessionNameRefetchQuery.graphql';\nimport { useBaiSignedRequestWithPromise } from '../../helper';\nimport { useCurrentUserInfo } from '../../hooks/backendai';\nimport { useTanMutation } from '../../hooks/reactQueryAlias';\nimport { useCurrentProjectValue } from '../../hooks/useCurrentProject';\nimport { useValidateSessionName } from '../../hooks/useValidateSessionName';\nimport { theme, Form, Input, App } from 'antd';\nimport Text, { TextProps } from 'antd/es/typography/Text';\nimport Title, { TitleProps } from 'antd/es/typography/Title';\nimport { CornerDownLeftIcon } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  graphql,\n  fetchQuery,\n  useFragment,\n  useRelayEnvironment,\n} from 'react-relay';\n\ntype EditableSessionNameProps = {\n  sessionFrgmt: EditableSessionNameFragment$key;\n} & (\n  | ({ component?: typeof Text } & Omit<TextProps, 'children'>)\n  | ({ component: typeof Title } & Omit<TitleProps, 'children'>)\n);\n\nconst EditableSessionName: React.FC<EditableSessionNameProps> = ({\n  component: Component = Text,\n  sessionFrgmt,\n  editable: editableOfProps,\n  style,\n  ...otherProps\n}) => {\n  const relayEvn = useRelayEnvironment();\n  const currentProject = useCurrentProjectValue();\n  const session = useFragment(\n    graphql`\n      fragment EditableSessionNameFragment on ComputeSessionNode {\n        id\n        row_id\n        name\n        priority\n        user_id\n        status\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const [optimisticName, setOptimisticName] = useState(session.name);\n  const validationRules = useValidateSessionName(optimisticName);\n  const [userInfo] = useCurrentUserInfo();\n\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const renameSessionMutation = useTanMutation({\n    mutationFn: (newName: string) => {\n      return baiRequestWithPromise({\n        method: 'POST',\n        url: `/session/${session.name}/rename`,\n        body: {\n          name: newName,\n        },\n      });\n    },\n  });\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { message } = App.useApp();\n  const [isEditing, setIsEditing] = useState(false);\n\n  const isNotPreparingCategoryStatus = ![\n    'RESTARTING',\n    'PREPARING',\n    'PREPARED',\n    'CREATING',\n    'PULLING',\n  ].includes(session.status || '');\n\n  const isEditingAllowed =\n    editableOfProps &&\n    userInfo.uuid === session.user_id &&\n    isNotPreparingCategoryStatus;\n\n  const isPendingRenamingAndRefreshing =\n    renameSessionMutation.isPending || optimisticName !== session.name;\n  return (\n    <>\n      {(!isEditing || isPendingRenamingAndRefreshing) && (\n        <Component\n          editable={\n            isEditingAllowed && !isPendingRenamingAndRefreshing\n              ? {\n                  onStart: () => {\n                    setIsEditing(true);\n                  },\n                  triggerType: ['icon', 'text'],\n                }\n              : false\n          }\n          copyable\n          style={{\n            ...style,\n            color: isPendingRenamingAndRefreshing\n              ? token.colorTextTertiary\n              : style?.color,\n          }}\n          {...otherProps}\n        >\n          {renameSessionMutation.isPending || optimisticName !== session.name\n            ? optimisticName\n            : session.name}\n        </Component>\n      )}\n      {isEditing && !isPendingRenamingAndRefreshing && (\n        <Form\n          onFinish={(values) => {\n            setIsEditing(false);\n            setOptimisticName(values.sessionName);\n            // FIXME: This API does not return any response on success or error.\n            renameSessionMutation.mutate(values.sessionName, {\n              onSuccess: () => {\n                // refetch the updated session name\n                fetchQuery<EditableSessionNameRefetchQuery>(\n                  relayEvn,\n                  graphql`\n                    query EditableSessionNameRefetchQuery(\n                      $sessionId: GlobalIDField!\n                      $project_id: UUID!\n                    ) {\n                      compute_session_node(\n                        id: $sessionId\n                        project_id: $project_id\n                      ) {\n                        id\n                        name\n                      }\n                    }\n                  `,\n                  {\n                    sessionId: session.id,\n                    project_id: currentProject.id,\n                  },\n                )\n                  .toPromise()\n                  // ignore the error\n                  .catch();\n                // ignore the error\n                document.dispatchEvent(\n                  new CustomEvent('backend-ai-session-list-refreshed'),\n                );\n              },\n              onError: (err) => {\n                // if the session name is not changed, do not show error\n                if (session.name !== values.sessionName) {\n                  message.error(t('session.FailToRenameSession'));\n                }\n              },\n            });\n          }}\n          initialValues={{\n            sessionName: session.name,\n          }}\n          style={{\n            flex: 1,\n          }}\n        >\n          <Form.Item\n            name=\"sessionName\"\n            rules={validationRules}\n            validateDebounce={200}\n          >\n            <Input\n              size=\"large\"\n              value={optimisticName || ''}\n              suffix={\n                <CornerDownLeftIcon\n                  style={{\n                    fontSize: '0.8em',\n                    color: token.colorTextTertiary,\n                  }}\n                />\n              }\n              autoFocus\n              onKeyDown={(e) => {\n                // when press escape key, cancel editing\n                if (e.key === 'Escape') {\n                  setIsEditing(false);\n                }\n              }}\n            />\n          </Form.Item>\n        </Form>\n      )}\n    </>\n  );\n};\n\nexport default EditableSessionName;\n","/**\n * @generated SignedSource<<ed8d22e5faf96f259b3a4c2cfee5a5ae>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionActionButtonsFragment$data = {\n  readonly access_key: string | null | undefined;\n  readonly commit_status: string | null | undefined;\n  readonly id: string;\n  readonly row_id: string;\n  readonly service_ports: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly type: string | null | undefined;\n  readonly user_id: string | null | undefined;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AppLauncherModalFragment\" | \"ContainerCommitModalFragment\" | \"ContainerLogModalFragment\" | \"TerminateSessionModalFragment\">;\n  readonly \" $fragmentType\": \"SessionActionButtonsFragment\";\n} | null | undefined;\nexport type SessionActionButtonsFragment$key = {\n  readonly \" $data\"?: SessionActionButtonsFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionActionButtonsFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionActionButtonsFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"row_id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"type\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"access_key\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"service_ports\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"commit_status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"user_id\",\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"TerminateSessionModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"ContainerLogModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"ContainerCommitModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"AppLauncherModalFragment\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"103a9b6ca717c568c1cdfc2dcde10f1a\";\n\nexport default node;\n","/**\n * @generated SignedSource<<f4736197da96ddc6dd289197f03fe537>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AppLauncherModalFragment$data = {\n  readonly access_key: string | null | undefined;\n  readonly id: string;\n  readonly row_id: string | null | undefined;\n  readonly service_ports: string | null | undefined;\n  readonly \" $fragmentType\": \"AppLauncherModalFragment\";\n};\nexport type AppLauncherModalFragment$key = {\n  readonly \" $data\"?: AppLauncherModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AppLauncherModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"AppLauncherModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"service_ports\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"access_key\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"5851a2f65c24221db8a7dddee2487e40\";\n\nexport default node;\n","import { AppLauncherModalFragment$key } from '../../__generated__/AppLauncherModalFragment.graphql';\nimport { useSuspendedBackendaiClient } from '../../hooks';\nimport {\n  ServicePort,\n  TemplateItem,\n  useSuspendedFilteredAppTemplate,\n} from '../../hooks/useSuspendedFilteredAppTemplate';\nimport BAIModal from '../BAIModal';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Checkbox,\n  Col,\n  Form,\n  FormInstance,\n  Image,\n  Input,\n  InputNumber,\n  ModalProps,\n  Row,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { BAIFlex } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { useRef, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { graphql, useFragment } from 'react-relay';\n\ninterface AppLauncherModalProps extends ModalProps {\n  onRequestClose: () => void;\n  sessionFrgmt: AppLauncherModalFragment$key | null;\n}\n\nconst AppLauncherModal: React.FC<AppLauncherModalProps> = ({\n  onRequestClose,\n  sessionFrgmt,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const formRef = useRef<FormInstance>(null);\n  const [openToPublic, setOpenToPublic] = useState<boolean>(false);\n  const [tryPreferredPort, setTryPreferredPort] = useState<boolean>(false);\n  const [forceUseV1Proxy, setForceUseV1Proxy] = useState<boolean>(false);\n  const [forceUseV2Proxy, setForceUseV2Proxy] = useState<boolean>(false);\n  const [useSubDomain, setUseSubDomain] = useState<boolean>(false);\n\n  const session = useFragment(\n    graphql`\n      fragment AppLauncherModalFragment on ComputeSessionNode {\n        id\n        row_id\n        service_ports\n        access_key\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const servicePorts: ServicePort[] = JSON.parse(\n    session?.service_ports ?? '{}',\n  );\n\n  const { preOpenAppTemplate, baseAppTemplate } =\n    useSuspendedFilteredAppTemplate(servicePorts);\n\n  // TODO: This should be merged into `useBackendAIAppLauncher` hook\n  const handleAppLaunch = async (app: Partial<TemplateItem> | null) => {\n    if (!app?.name) return;\n\n    await formRef.current?.validateFields().then((values) => {\n      if (openToPublic) {\n        // @ts-ignore\n        globalThis.appLauncher.clientIps = values.clientIps;\n      }\n      if (tryPreferredPort) {\n        // @ts-ignore\n        globalThis.appLauncher.userPort = values.preferredPort ?? 10250;\n      }\n      if (useSubDomain) {\n        // @ts-ignore\n        globalThis.appLauncher.subDomain = values.subDomain;\n      }\n      if (forceUseV1Proxy) {\n        // @ts-ignore\n        globalThis.appLauncher.forceUseV1Proxy = true;\n      }\n      if (forceUseV2Proxy) {\n        // @ts-ignore\n        globalThis.appLauncher.forceUseV2Proxy = true;\n      }\n    });\n\n    const appController = {\n      'app-name': app?.name ?? '',\n      'session-uuid': session?.row_id ?? '',\n      'url-postfix': app?.redirect ?? '',\n    };\n\n    if (['nniboard', 'mlflow-ui'].includes(app?.name ?? '')) {\n      // @ts-ignore\n      globalThis.appLauncher._openAppLaunchConfirmationDialog(appController);\n      return;\n    }\n    if (app?.name === 'tensorboard') {\n      // @ts-ignore\n      globalThis.appLauncher._openTensorboardDialog();\n      onRequestClose();\n      return;\n    }\n    // @ts-ignore\n    globalThis.appLauncher._runApp(appController).then(() => {});\n    setOpenToPublic(false);\n    setTryPreferredPort(false);\n    onRequestClose();\n  };\n\n  return (\n    <BAIModal\n      title={t('session.appLauncher.App')}\n      width={450}\n      onCancel={onRequestClose}\n      footer={null}\n      destroyOnClose\n      {...modalProps}\n    >\n      <BAIFlex direction=\"column\" gap={'md'} align=\"stretch\">\n        {_.map(baseAppTemplate, (apps, category) => {\n          return (\n            <div key={category}>\n              <Typography.Title level={5} style={{ marginTop: 0 }}>\n                {category.split('.')[1]}\n              </Typography.Title>\n              <Row gutter={[24, 24]}>\n                {_.map(apps, (app) => {\n                  return (\n                    <Col\n                      key={app?.name}\n                      span={6}\n                      style={{ alignContent: 'center' }}\n                    >\n                      <BAIFlex\n                        direction=\"column\"\n                        gap={'xs'}\n                        style={{ height: '100%' }}\n                      >\n                        <Button\n                          icon={\n                            <Image\n                              src={app?.src}\n                              alt={app?.name}\n                              preview={false}\n                              style={{ height: 36, width: 36 }}\n                            />\n                          }\n                          onClick={() => {\n                            handleAppLaunch(app);\n                          }}\n                          style={{ height: 72, width: 72 }}\n                        />\n                        <Typography.Text style={{ textAlign: 'center' }}>\n                          {app?.title}\n                        </Typography.Text>\n                      </BAIFlex>\n                    </Col>\n                  );\n                })}\n              </Row>\n            </div>\n          );\n        })}\n        {preOpenAppTemplate.length > 0 ? (\n          <>\n            <Typography.Title level={5} style={{ marginTop: 0 }}>\n              {t('session.launcher.PreOpenPortTitle')}\n            </Typography.Title>\n            <Row gutter={[12, 12]}>\n              {_.map(preOpenAppTemplate, (app) => {\n                return (\n                  <Col\n                    key={app?.name}\n                    span={6}\n                    style={{ alignContent: 'center' }}\n                  >\n                    <BAIFlex\n                      direction=\"column\"\n                      gap={'xs'}\n                      style={{ height: '100%' }}\n                    >\n                      <Button\n                        icon={\n                          <Image\n                            src={app?.src}\n                            alt={app?.name}\n                            preview={false}\n                            style={{ height: 36, width: 36 }}\n                          />\n                        }\n                        onClick={() => {\n                          handleAppLaunch(app);\n                        }}\n                        style={{ height: 72, width: 72 }}\n                      />\n                      <Typography.Text style={{ textAlign: 'center' }}>\n                        {app?.title}\n                      </Typography.Text>\n                    </BAIFlex>\n                  </Col>\n                );\n              })}\n            </Row>\n          </>\n        ) : null}\n        <Form ref={formRef} layout=\"vertical\">\n          <Row gutter={16}>\n            {/* @ts-ignore */}\n            {!globalThis.isElectron && baiClient._config.openPortToPublic ? (\n              <Col span={12}>\n                <Form.Item\n                  name={'clientIps'}\n                  label={\n                    <BAIFlex gap={'xs'}>\n                      <Checkbox\n                        value={openToPublic}\n                        onChange={(value) =>\n                          setOpenToPublic(value.target.checked)\n                        }\n                      />\n                      {t('session.OpenToPublic')}\n                      <Tooltip\n                        title={<Trans i18nKey=\"session.OpenToPublicDesc\" />}\n                      >\n                        <QuestionCircleOutlined style={{ cursor: 'pointer' }} />\n                      </Tooltip>\n                    </BAIFlex>\n                  }\n                >\n                  <Input\n                    disabled={!openToPublic}\n                    placeholder={t('session.AllowedClientIps')}\n                  />\n                </Form.Item>\n              </Col>\n            ) : null}\n            {baiClient._config.allowPreferredPort ? (\n              <Col span={12}>\n                <Form.Item\n                  name={'preferredPort'}\n                  label={\n                    <BAIFlex gap={'xs'}>\n                      <Checkbox\n                        value={tryPreferredPort}\n                        onChange={(value) =>\n                          setTryPreferredPort(value.target.checked)\n                        }\n                      />\n                      {t('session.TryPreferredPort')}\n                    </BAIFlex>\n                  }\n                  rules={[\n                    {\n                      type: 'number',\n                      min: 1025,\n                    },\n                    {\n                      type: 'number',\n                      max: 65534,\n                    },\n                  ]}\n                >\n                  <InputNumber\n                    placeholder=\"10250\"\n                    disabled={!tryPreferredPort}\n                    style={{ width: '100%' }}\n                  />\n                </Form.Item>\n              </Col>\n            ) : null}\n            {/* TODO: add debug value into baiClient._config */}\n            {/* @ts-ignore */}\n            {globalThis?.backendaiwebui?.debug ? (\n              <>\n                <Col span={12}>\n                  <Form.Item\n                    name=\"subDomain\"\n                    label={\n                      <BAIFlex gap={'xs'}>\n                        <Checkbox\n                          value={useSubDomain}\n                          onChange={(value) =>\n                            setUseSubDomain(value.target.checked)\n                          }\n                        />\n                        {t('session.UseSubdomain')}\n                      </BAIFlex>\n                    }\n                  >\n                    <Input disabled={!useSubDomain} />\n                  </Form.Item>\n                </Col>\n                <Col></Col>\n                <Col span={12}>\n                  <Form.Item name={'forceUseV1Proxy'}>\n                    <Checkbox\n                      disabled={forceUseV2Proxy}\n                      onChange={(value) =>\n                        setForceUseV1Proxy(value.target.checked)\n                      }\n                    >\n                      {t('session.ForceUseV1Proxy')}\n                    </Checkbox>\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name={'forceUseV2Proxy'}>\n                    <Checkbox\n                      disabled={forceUseV1Proxy}\n                      onChange={(value) =>\n                        setForceUseV2Proxy(value.target.checked)\n                      }\n                    >\n                      {t('session.ForceUseV2Proxy')}\n                    </Checkbox>\n                  </Form.Item>\n                </Col>\n              </>\n            ) : null}\n          </Row>\n        </Form>\n      </BAIFlex>\n    </BAIModal>\n  );\n};\n\nexport default AppLauncherModal;\n","import { useSuspendedBackendaiClient } from '.';\nimport { useSuspenseTanQuery } from './reactQueryAlias';\nimport _ from 'lodash';\n\nexport type TemplateItem = {\n  category: string;\n  name: string;\n  redirect: string;\n  src: string;\n  title: string;\n};\n\nexport type AppTemplate = {\n  [key: string]: TemplateItem[];\n};\n\nexport type ServicePort = {\n  container_ports: number[];\n  host_ports: number[];\n  is_inference: boolean;\n  name: string;\n  protocol: string;\n};\n\nexport const useSuspendedFilteredAppTemplate = (\n  servicePorts?: ServicePort[] | null,\n) => {\n  const { data: appTemplate = {} } = useSuspenseTanQuery<AppTemplate>({\n    queryKey: ['backendai-app-template'],\n    queryFn: () => {\n      return fetch('resources/app_template.json')\n        .then((res) => res.json())\n        .then((res) => res.appTemplate);\n    },\n    staleTime: 1000 * 60 * 60 * 24,\n  });\n\n  const baiClient = useSuspendedBackendaiClient();\n  const allowTCPApps =\n    // @ts-ignore\n    globalThis.isElectron || baiClient._config.allowNonAuthTCP;\n\n  const preOpenAppList = _.filter(\n    servicePorts,\n    (app) => app.protocol === 'preopen' && app.is_inference === false,\n  );\n  const preOpenAppTemplate = _.map(preOpenAppList, (app) => {\n    return {\n      name: app.name,\n      title: app.name,\n      // TODO: change image according to the connected app.\n      src: '/resources/icons/default_app.svg',\n    };\n  });\n\n  const inferenceAppList = _.filter(servicePorts, (app) => app.is_inference);\n  const inferenceAppTemplate = _.map(inferenceAppList, (app) => {\n    return {\n      name: app.name,\n      title: app.name,\n      src: '/resources/icons/default_app.svg',\n    };\n  });\n\n  const baseAppList = _.filter(\n    servicePorts,\n    (app) =>\n      !_.includes(preOpenAppList, app) && !_.includes(inferenceAppList, app),\n  );\n  let baseAppTemplate = _.chain(baseAppList)\n    .map((app) => {\n      const template = _.find(\n        _.flatten(Object.values(appTemplate)),\n        (item) => item.name === app.name,\n      );\n\n      if (!_.includes(preOpenAppList, app) && !app.is_inference) {\n        if (app.name === 'sshd' && !allowTCPApps) {\n          return null;\n        }\n        // They are custom apps from Backend.AI agent.\n        return {\n          name: app.name,\n          title: template?.title || app.name,\n          category: template?.category || '99.Custom',\n          redirect: template?.redirect || '',\n          src: template?.src || './resources/icons/default_app.svg',\n        };\n      }\n      return null;\n    })\n    .filter(Boolean)\n    .value();\n\n  if (!_.some(baseAppList, { name: 'ttyd' })) {\n    baseAppTemplate.push({\n      name: appTemplate['ttyd'][0].name,\n      title: appTemplate['ttyd'][0].title,\n      category: '99.Custom',\n      redirect: appTemplate['ttyd'][0].redirect,\n      src: appTemplate['ttyd'][0].src,\n    });\n  }\n\n  if (allowTCPApps) {\n    baseAppTemplate.push({\n      name: 'vscode-desktop',\n      title: 'Visual Studio Code (Desktop)',\n      category: '2.Development',\n      redirect: '',\n      src: './resources/icons/vscode.svg',\n    });\n  }\n  const groupedBaseAppTemplate = _.chain(baseAppTemplate)\n    .sortBy('category')\n    .groupBy('category')\n    .value();\n\n  return {\n    appTemplate,\n    preOpenAppTemplate,\n    inferenceAppTemplate,\n    baseAppTemplate: groupedBaseAppTemplate,\n  };\n};\n","/**\n * @generated SignedSource<<721760bfe80bc9847bfc13852c1b5a15>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerCommitModalFragment$data = {\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly row_id: string;\n  readonly \" $fragmentType\": \"ContainerCommitModalFragment\";\n} | null | undefined;\nexport type ContainerCommitModalFragment$key = {\n  readonly \" $data\"?: ContainerCommitModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerCommitModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerCommitModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"row_id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"8bcd294de1ffd3f00f6ec0ed7177c304\";\n\nexport default node;\n","import { ContainerCommitModalFragment$key } from '../../__generated__/ContainerCommitModalFragment.graphql';\nimport { useSuspendedBackendaiClient } from '../../hooks';\nimport { useSetBAINotification } from '../../hooks/useBAINotification';\nimport BAIModal, { BAIModalProps } from '../BAIModal';\nimport {\n  Descriptions,\n  Divider,\n  Form,\n  FormInstance,\n  Input,\n  Typography,\n} from 'antd';\nimport { BAIFlex } from 'backend.ai-ui';\nimport { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useFragment } from 'react-relay';\n\ninterface ContainerCommitModalProps extends BAIModalProps {\n  sessionFrgmt: ContainerCommitModalFragment$key | null;\n  onRequestClose: () => void;\n}\n\nconst ContainerCommitModal: React.FC<ContainerCommitModalProps> = ({\n  sessionFrgmt,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { upsertNotification } = useSetBAINotification();\n  const [isConfirmLoading, setIsConfirmLoading] = useState<boolean>(false);\n  const formRef = useRef<FormInstance>(null);\n  const baiClient = useSuspendedBackendaiClient();\n\n  const session = useFragment(\n    graphql`\n      fragment ContainerCommitModalFragment on ComputeSessionNode {\n        id\n        name\n        row_id @required(action: NONE)\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const convertSessionToImage = () => {\n    setIsConfirmLoading(true);\n    formRef?.current\n      ?.validateFields()\n      .then((values: { imageName: string }) => {\n        upsertNotification({\n          message: 'commitSession: ' + session?.name,\n          open: true,\n          backgroundTask: {\n            status: 'pending',\n            promise: baiClient.computeSession.convertSessionToImage(\n              session?.name ?? '',\n              values.imageName,\n            ),\n            onChange: {\n              pending: t('session.CommitOnGoing'),\n              resolved: (data) => {\n                const task_id = (data as { task_id: string }).task_id;\n                onRequestClose();\n                return {\n                  backgroundTask: {\n                    status: 'pending',\n                    taskId: task_id,\n                    promise: null,\n                    percent: 0,\n                    onChange: {\n                      pending: t('session.CommitOnGoing'),\n                      resolved: t('session.CommitFinished'),\n                      rejected: t('session.CommitFailed'),\n                    },\n                  },\n                };\n              },\n              rejected: (err: any) => {\n                return {\n                  open: true,\n                  type: 'error',\n                  message: 'commitSession: ' + session?.name,\n                  description: err?.message,\n                  toText: t('button.SeeErrorLogs'),\n                  to: `/usersettings?tab=logs`,\n                };\n              },\n            },\n          },\n        });\n      })\n      .catch(() => {})\n      .finally(() => {\n        setIsConfirmLoading(false);\n      });\n  };\n\n  return (\n    <BAIModal\n      title={t('session.CommitSession')}\n      onOk={() => convertSessionToImage()}\n      okButtonProps={{ loading: isConfirmLoading }}\n      onCancel={onRequestClose}\n      {...modalProps}\n      destroyOnClose\n    >\n      <BAIFlex\n        direction=\"column\"\n        gap={'xs'}\n        align=\"stretch\"\n        style={{ overflow: 'hidden' }}\n      >\n        <Typography.Text>{t('session.DescCommitSession')}</Typography.Text>\n        <Descriptions bordered size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.SessionName')}>\n            {session?.name}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.SessionId')}>\n            {session?.row_id}\n          </Descriptions.Item>\n          {/* FIXME: need to use legacy_session */}\n          {/* <Descriptions.Item label={t('session.launcher.Environments')}>\n          </Descriptions.Item>  */}\n        </Descriptions>\n        <Divider style={{ marginTop: 12, marginBottom: 12 }} />\n        <Form ref={formRef}>\n          <Form.Item\n            label={t('session.CommitImageName')}\n            name=\"imageName\"\n            required\n            rules={[\n              { required: true },\n              {\n                min: 4,\n                max: 32,\n              },\n              {\n                pattern: /^[a-zA-Z0-9-_.]+$/,\n                message: t('session.validation.EnterValidSessionName'),\n              },\n            ]}\n          >\n            <Input placeholder={t('inputLimit.4to32chars')} />\n          </Form.Item>\n        </Form>\n      </BAIFlex>\n    </BAIModal>\n  );\n};\n\nexport default ContainerCommitModal;\n","import {\n  SessionActionButtonsFragment$data,\n  SessionActionButtonsFragment$key,\n} from '../../__generated__/SessionActionButtonsFragment.graphql';\nimport { useSuspendedBackendaiClient } from '../../hooks';\nimport { useCurrentUserInfo } from '../../hooks/backendai';\nimport { useBackendAIAppLauncher } from '../../hooks/useBackendAIAppLauncher';\nimport AppLauncherModal from './AppLauncherModal';\nimport ContainerCommitModal from './ContainerCommitModal';\nimport ContainerLogModal from './ContainerLogModal';\nimport TerminateSessionModal from './TerminateSessionModal';\nimport { Tooltip, Button, theme } from 'antd';\nimport {\n  BAIAppIcon,\n  BAIContainerCommitIcon,\n  BAISessionLogIcon,\n  BAITerminalAppIcon,\n  BAITerminateIcon,\n  BAIUnmountAfterClose,\n} from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useFragment } from 'react-relay';\n\ninterface SessionActionButtonsProps {\n  sessionFrgmt: SessionActionButtonsFragment$key | null;\n}\n\nconst isActive = (session: SessionActionButtonsFragment$data) => {\n  return !['TERMINATED', 'CANCELLED', 'TERMINATING'].includes(\n    session?.status || '',\n  );\n};\nconst isAppSupported = (session: SessionActionButtonsFragment$data) => {\n  return (\n    ['batch', 'interactive', 'inference', 'system', 'running'].includes(\n      session?.type || '',\n    ) && !_.isEmpty(JSON.parse(session?.service_ports ?? '{}'))\n  );\n};\n\nconst SessionActionButtons: React.FC<SessionActionButtonsProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const appLauncher = useBackendAIAppLauncher();\n  const baiClient = useSuspendedBackendaiClient();\n\n  const session = useFragment(\n    graphql`\n      fragment SessionActionButtonsFragment on ComputeSessionNode {\n        id\n        row_id @required(action: NONE)\n        type\n        status\n        access_key\n        service_ports\n        commit_status\n        user_id\n        ...TerminateSessionModalFragment\n        ...ContainerLogModalFragment\n        ...ContainerCommitModalFragment\n        ...AppLauncherModalFragment\n      }\n    `,\n    props.sessionFrgmt,\n  );\n\n  const [openAppLauncherModal, setOpenAppLauncherModal] = useState(false);\n  const [openTerminateModal, setOpenTerminateModal] = useState(false);\n  const [openLogModal, setOpenLogModal] = useState(false);\n  const [openContainerCommitModal, setOpenContainerCommitModal] =\n    useState(false);\n\n  const userInfo = useCurrentUserInfo();\n  const isOwner = userInfo[0]?.uuid === session?.user_id;\n\n  return (\n    session && (\n      <>\n        <Tooltip title={t('session.SeeAppDialog')}>\n          <Button\n            disabled={\n              !isAppSupported(session) || !isActive(session) || !isOwner\n            }\n            icon={<BAIAppIcon />}\n            onClick={() => {\n              setOpenAppLauncherModal(true);\n            }}\n          />\n        </Tooltip>\n        <Suspense fallback={null}>\n          <AppLauncherModal\n            sessionFrgmt={session}\n            open={openAppLauncherModal}\n            onRequestClose={() => {\n              setOpenAppLauncherModal(false);\n            }}\n          />\n        </Suspense>\n        <Tooltip title={t('session.ExecuteTerminalApp')}>\n          <Button\n            disabled={\n              !isAppSupported(session) || !isActive(session) || !isOwner\n            }\n            icon={<BAITerminalAppIcon />}\n            onClick={() => {\n              appLauncher.runTerminal(session?.row_id);\n            }}\n          />\n        </Tooltip>\n        {/* Don't put this modal to end of the return array(<></>). */}\n        <TerminateSessionModal\n          sessionFrgmts={[session]}\n          open={openTerminateModal}\n          onRequestClose={() => {\n            setOpenTerminateModal(false);\n          }}\n        />\n\n        <Tooltip title={t('session.SeeContainerLogs')}>\n          <Button\n            icon={<BAISessionLogIcon />}\n            onClick={() => {\n              setOpenLogModal(true);\n            }}\n          />\n        </Tooltip>\n        <BAIUnmountAfterClose>\n          <ContainerLogModal\n            sessionFrgmt={session}\n            open={openLogModal}\n            onCancel={() => {\n              setOpenLogModal(false);\n            }}\n          />\n        </BAIUnmountAfterClose>\n        <Tooltip title={t('session.RequestContainerCommit')}>\n          <Button\n            disabled={\n              !baiClient._config.enableContainerCommit ||\n              session.type === 'system' ||\n              !isActive(session) ||\n              !isOwner\n            }\n            icon={<BAIContainerCommitIcon />}\n            onClick={() => {\n              setOpenContainerCommitModal(true);\n            }}\n          />\n        </Tooltip>\n        <ContainerCommitModal\n          sessionFrgmt={session}\n          open={openContainerCommitModal}\n          onRequestClose={() => setOpenContainerCommitModal(false)}\n        />\n        <Tooltip title={t('session.TerminateSession')}>\n          <Button\n            disabled={!isActive(session)}\n            icon={\n              <BAITerminateIcon\n                style={{\n                  color: isActive(session) ? token.colorError : undefined,\n                }}\n              />\n            }\n            onClick={() => {\n              setOpenTerminateModal(true);\n            }}\n          />\n        </Tooltip>\n      </>\n    )\n  );\n};\n\nexport default SessionActionButtons;\n","export const useBackendAIAppLauncher = () => {\n  // This is not use any React hooks, so it's not a React hook.\n  // But keep it here for the future refactoring.\n\n  // @ts-ignore\n  return {\n    runTerminal: (sessionId: string) => {\n      // @ts-ignore\n      globalThis.appLauncher.runTerminal(sessionId);\n    },\n    showLauncher: (params: {\n      'session-uuid'?: string;\n      'access-key'?: string;\n      'app-services'?: string;\n      mode?: string;\n      'app-services-option'?: string;\n      'service-ports'?: string;\n      runtime?: string;\n      filename?: string;\n      arguments?: string;\n    }) => {},\n  };\n};\n","/**\n * @generated SignedSource<<64a924cf01047f27de8b975b74cb8413>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionIdleChecksQuery$variables = {\n  sessionID: string;\n};\nexport type SessionIdleChecksQuery$data = {\n  readonly session: {\n    readonly id: string | null | undefined;\n    readonly idle_checks: string | null | undefined;\n  } | null | undefined;\n};\nexport type SessionIdleChecksQuery = {\n  response: SessionIdleChecksQuery$data;\n  variables: SessionIdleChecksQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"sessionID\"\n  }\n],\nv1 = [\n  {\n    \"alias\": \"session\",\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"sessionID\"\n      }\n    ],\n    \"concreteType\": \"ComputeSession\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"compute_session\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"idle_checks\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionIdleChecksQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionIdleChecksQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"6cdc796358ac64699fe0cf2492423e18\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionIdleChecksQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionIdleChecksQuery(\\n  $sessionID: UUID!\\n) {\\n  session: compute_session(id: $sessionID) {\\n    id\\n    idle_checks @since(version: \\\"24.09.0\\\")\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d46ba0743f1bd14d265cddaa3fbeb6c1\";\n\nexport default node;\n","/**\n * @generated SignedSource<<5a48d3f7c0db79185e24e2b973ff10d6>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionIdleChecksNodeFragment$data = {\n  readonly id: string;\n  readonly idle_checks: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionIdleChecksNodeFragment\";\n};\nexport type SessionIdleChecksNodeFragment$key = {\n  readonly \" $data\"?: SessionIdleChecksNodeFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionIdleChecksNodeFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionIdleChecksNodeFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"idle_checks\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"09a1dd685c8942ebb5c69e6dddaf6da0\";\n\nexport default node;\n","import { SessionIdleChecksNodeFragment$key } from '../../__generated__/SessionIdleChecksNodeFragment.graphql';\nimport { SessionIdleChecksQuery } from '../../__generated__/SessionIdleChecksQuery.graphql';\nimport {\n  formatDurationAsDays,\n  toFixedFloorWithoutTrailingZeros,\n} from '../../helper';\nimport { useResourceSlotsDetails } from '../../hooks/backendai';\nimport DoubleTag from '../DoubleTag';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport { Tooltip, Typography, theme } from 'antd';\nimport { useMemoizedJSONParse, BAIFlex } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useFragment, useLazyLoadQuery } from 'react-relay';\n\ntype BaseExtra = null;\ntype UtilizationExtra = {\n  resources: {\n    cpu_util: number[];\n    mem: number[];\n    cuda_util: number[];\n    cuda_mem: number[];\n    ipu_util: number[];\n    ipu_mem: number[];\n  };\n  thresholds_check_operator: 'and' | 'or';\n};\nexport type IdleCheckItem = {\n  extra: BaseExtra | UtilizationExtra;\n  remaining: number | null;\n  remaining_time_type: 'expire_after' | 'grace_period';\n};\nexport type IdleChecks = {\n  network_timeout?: IdleCheckItem;\n  session_lifetime?: IdleCheckItem;\n  utilization?: IdleCheckItem;\n};\n\ninterface SessionIdleChecksProps {\n  sessionNodeFrgmt: SessionIdleChecksNodeFragment$key | null;\n  direction?: 'row' | 'column';\n  fetchKeyForLegacyLoadQuery?: string;\n}\n\nexport function getUtilizationCheckerColor(\n  resources: Record<string, number[]> | number[],\n  thresholds_check_operator: 'and' | 'or' | null = null,\n) {\n  // Determine color based on single device utilization.\n  // resources: [number, number]\n  if (!thresholds_check_operator) {\n    const [utilization, threshold] = resources as number[];\n    if (utilization < threshold * 2) {\n      return 'red';\n    } else if (utilization < threshold * 10) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  }\n  // Determine color based on multiple device utilization.\n  // resources: Record<string, [number, number]>\n  let color: string | undefined = undefined;\n  if (thresholds_check_operator === 'and') {\n    _.every(resources, ([utilization, threshold]: number[]) => {\n      if (utilization < Math.min(threshold * 2, threshold + 5)) {\n        color = 'red';\n        return true;\n      } else if (utilization < Math.min(threshold * 10, threshold + 10)) {\n        color = 'orange';\n        return true;\n      } else {\n        color = 'green';\n        return true;\n      }\n    });\n  }\n\n  if (thresholds_check_operator === 'or') {\n    _.some(resources, ([utilization, threshold]: number[]) => {\n      if (utilization < Math.min(threshold * 2, threshold + 5)) {\n        color = 'red';\n        return true;\n      } else if (utilization < Math.min(threshold * 10, threshold + 10)) {\n        color = 'orange';\n        return true;\n      } else {\n        color = 'green';\n        return true;\n      }\n    });\n  }\n\n  return color;\n}\n\nexport function getIdleChecksTagColor(\n  result: IdleCheckItem,\n  criteria: 'remaining' | 'utilization',\n) {\n  // Determine color based on remaining time.\n  if (criteria === 'remaining') {\n    if (!result.remaining || result.remaining < 3600) {\n      return 'red';\n    } else if (result.remaining < 3600 * 4) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  }\n\n  // Determine color based on utilization.\n  if (result.extra && (!result.remaining || result.remaining < 3600 * 4)) {\n    return getUtilizationCheckerColor(\n      result.extra.resources,\n      result.extra.thresholds_check_operator,\n    );\n  }\n\n  return undefined;\n}\n\nconst SessionIdleChecks: React.FC<SessionIdleChecksProps> = ({\n  sessionNodeFrgmt = null,\n  direction = 'row',\n  fetchKeyForLegacyLoadQuery,\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n\n  const sessionNode = useFragment(\n    graphql`\n      fragment SessionIdleChecksNodeFragment on ComputeSessionNode {\n        id\n        idle_checks @since(version: \"24.12.0\")\n      }\n    `,\n    sessionNodeFrgmt,\n  );\n\n  const { session } = useLazyLoadQuery<SessionIdleChecksQuery>(\n    graphql`\n      query SessionIdleChecksQuery($sessionID: UUID!) {\n        session: compute_session(id: $sessionID) {\n          id\n          idle_checks @since(version: \"24.09.0\")\n        }\n      }\n    `,\n    {\n      sessionID: sessionNode?.id || '',\n    },\n    {\n      fetchKey: fetchKeyForLegacyLoadQuery,\n      fetchPolicy: sessionNode?.idle_checks ? 'store-only' : 'network-only',\n    },\n  );\n\n  const idleChecks: IdleChecks = useMemoizedJSONParse(\n    sessionNode?.idle_checks || session?.idle_checks,\n    {\n      fallbackValue: {},\n    },\n  );\n\n  const getIdleCheckTitle = (key: keyof IdleChecks) => {\n    if (key === 'network_timeout') return t('session.NetworkIdleTimeout');\n    else if (key === 'session_lifetime') return t('session.MaxSessionLifetime');\n    else return t('session.UtilizationIdleTimeout');\n  };\n\n  const getRemainingTimeTypeLabel = (Type: 'expire_after' | 'grace_period') => {\n    if (Type === 'expire_after') {\n      return t('session.ExpiresAfter');\n    } else {\n      return t('session.GracePeriod');\n    }\n  };\n\n  return (\n    <BAIFlex direction={direction} align=\"stretch\" gap=\"sm\">\n      {_.map(idleChecks, (value: IdleCheckItem, key: keyof IdleChecks) => {\n        if (!value.remaining) return null;\n\n        return (\n          <BAIFlex\n            key={key}\n            style={{ flex: 1 }}\n            direction=\"column\"\n            align=\"stretch\"\n          >\n            <BAIFlex gap={'xxs'}>\n              <Typography.Text>{getIdleCheckTitle(key)}</Typography.Text>\n              {key === 'utilization' && (\n                <Tooltip\n                  title={\n                    <>\n                      {`${t('session.Utilization')} / ${t('session.Threshold')} (%)`}\n                      <br />\n                      {_.map(value.extra?.resources, (resource, key) => {\n                        const deviceName = ['cpu_util', 'mem'].includes(key)\n                          ? _.split(key, '_')[0]\n                          : _.split(key, '_')[0] + '.device';\n                        const [utilization, threshold] = resource;\n                        return (\n                          <BAIFlex key={key} gap={'xs'}>\n                            <Typography.Text\n                              style={{ color: token.colorWhite }}\n                            >{`${mergedResourceSlots?.[deviceName]?.human_readable_name}:`}</Typography.Text>\n                            <Typography.Text\n                              style={{\n                                color: getUtilizationCheckerColor(resource),\n                              }}\n                            >\n                              {`${utilization >= 0 ? toFixedFloorWithoutTrailingZeros(utilization, 1) : '-'} / ${threshold}`}\n                            </Typography.Text>\n                            <br />\n                          </BAIFlex>\n                        );\n                      })}\n                    </>\n                  }\n                >\n                  <InfoCircleOutlined\n                    style={{\n                      color: token.colorTextSecondary,\n                      cursor: 'pointer',\n                    }}\n                  />\n                </Tooltip>\n              )}\n            </BAIFlex>\n\n            {value.remaining >= 0 ? (\n              // TODO: support real-time update by using useIntervalValue when idle_checks returns remaining time as date\n              <DoubleTag\n                values={[\n                  {\n                    label: getRemainingTimeTypeLabel(value.remaining_time_type),\n                    color: getIdleChecksTagColor(\n                      value,\n                      key === 'utilization' ? 'utilization' : 'remaining',\n                    ),\n                  },\n                  {\n                    label: formatDurationAsDays(\n                      new Date().toISOString(),\n                      new Date(\n                        new Date().getTime() + (value.remaining || 0) * 1000,\n                      ).toISOString(),\n                    ),\n                    color: getIdleChecksTagColor(\n                      value,\n                      key === 'utilization' ? 'utilization' : 'remaining',\n                    ),\n                  },\n                ]}\n              />\n            ) : (\n              <Typography.Text type=\"danger\">\n                {t('session.TimeoutExceeded')}\n              </Typography.Text>\n            )}\n          </BAIFlex>\n        );\n      })}\n    </BAIFlex>\n  );\n};\n\nexport default SessionIdleChecks;\n","import BAIModal from './BAIModal';\nimport { ModalProps, Typography, theme } from 'antd';\nimport { BAIFlex } from 'backend.ai-ui';\nimport { useTranslation } from 'react-i18next';\n\ninterface IdleCheckDescriptionModalProps extends ModalProps {}\n\nconst IdleCheckDescriptionModal: React.FC<IdleCheckDescriptionModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  return (\n    <BAIModal\n      title={t('session.IdleChecks')}\n      footer={null}\n      width={700}\n      {...modalProps}\n    >\n      <Typography.Text>{t('session.IdleChecksDesc')}</Typography.Text>\n\n      <Typography.Title level={5}>\n        {t('session.MaxSessionLifetime')}\n      </Typography.Title>\n      <p>{t('session.MaxSessionLifetimeDesc')}</p>\n\n      <Typography.Title level={5}>\n        {t('session.NetworkIdleTimeout')}\n      </Typography.Title>\n      <p>{t('session.NetworkIdleTimeoutDesc')}</p>\n\n      <Typography.Title level={5}>\n        {t('session.UtilizationIdleTimeout')}\n      </Typography.Title>\n      <p>{t('session.UtilizationIdleTimeoutDesc')}</p>\n      <BAIFlex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{ marginLeft: token.marginMD }}\n      >\n        <Typography.Title level={5} style={{ margin: 0 }}>\n          {t('session.GracePeriod')}\n        </Typography.Title>\n        <p>{t('session.GracePeriodDesc')}</p>\n        <Typography.Title level={5} style={{ margin: 0 }}>\n          {t('session.UtilizationThreshold')}\n        </Typography.Title>\n        <p>{t('session.UtilizationThresholdDesc')}</p>\n      </BAIFlex>\n    </BAIModal>\n  );\n};\n\nexport default IdleCheckDescriptionModal;\n","/**\n * @generated SignedSource<<4321ed67c422fd7a7fe927ec71ad333c>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type MountedVFolderLinksQuery$variables = {\n  uuid: string;\n};\nexport type MountedVFolderLinksQuery$data = {\n  readonly legacy_session: {\n    readonly mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type MountedVFolderLinksQuery = {\n  response: MountedVFolderLinksQuery$data;\n  variables: MountedVFolderLinksQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"uuid\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mounts\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"MountedVFolderLinksQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"MountedVFolderLinksQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"9025af1e54e75a0d3041d0e12150939c\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"MountedVFolderLinksQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query MountedVFolderLinksQuery(\\n  $uuid: UUID!\\n) {\\n  legacy_session: compute_session(id: $uuid) {\\n    mounts\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f1e2ef43ac11c6b980313ddac8cd1ec9\";\n\nexport default node;\n","/**\n * @generated SignedSource<<047e171b462f4f1fbc82aab6804526dd>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type MountedVFolderLinksLegacyLazyFolderLinkFragment$data = {\n  readonly row_id: string | null | undefined;\n  readonly vfolder_mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n  readonly \" $fragmentType\": \"MountedVFolderLinksLegacyLazyFolderLinkFragment\";\n};\nexport type MountedVFolderLinksLegacyLazyFolderLinkFragment$key = {\n  readonly \" $data\"?: MountedVFolderLinksLegacyLazyFolderLinkFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"MountedVFolderLinksLegacyLazyFolderLinkFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"MountedVFolderLinksLegacyLazyFolderLinkFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"vfolder_mounts\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"72fda7ec47bcaa5e7fc83cbaabc822c6\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2e4644da7040cc3d805e4b08da776015>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type MountedVFolderLinksFragment$data = {\n  readonly row_id: string | null | undefined;\n  readonly vfolder_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly \" $fragmentSpreads\": FragmentRefs<\"FolderLink_vfolderNode\">;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"MountedVFolderLinksLegacyLazyFolderLinkFragment\">;\n  readonly \" $fragmentType\": \"MountedVFolderLinksFragment\";\n};\nexport type MountedVFolderLinksFragment$key = {\n  readonly \" $data\"?: MountedVFolderLinksFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"MountedVFolderLinksFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"MountedVFolderLinksFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"VirtualFolderConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"vfolder_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"VirtualFolderEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"VirtualFolderNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"args\": null,\n                  \"kind\": \"FragmentSpread\",\n                  \"name\": \"FolderLink_vfolderNode\"\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"MountedVFolderLinksLegacyLazyFolderLinkFragment\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"f26bc04640693f4094c9a072011821b0\";\n\nexport default node;\n","/**\n * @generated SignedSource<<3bc8cc0e76dc6b081b2f06c4c88d3051>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type FolderLink_vfolderNode$data = {\n  readonly name: string | null | undefined;\n  readonly row_id: string | null | undefined;\n  readonly \" $fragmentType\": \"FolderLink_vfolderNode\";\n};\nexport type FolderLink_vfolderNode$key = {\n  readonly \" $data\"?: FolderLink_vfolderNode$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"FolderLink_vfolderNode\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"FolderLink_vfolderNode\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolderNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"a8ea258e8c3e20439b53af93ec37be13\";\n\nexport default node;\n","import { FolderLink_vfolderNode$key } from '../__generated__/FolderLink_vfolderNode.graphql';\nimport BAILink, { BAILinkProps } from './BAILink';\nimport { useFolderExplorerOpener } from './FolderExplorerOpener';\nimport { FolderOutlined } from '@ant-design/icons';\nimport { graphql, useFragment } from 'react-relay';\n\ninterface FolderLinkBase extends BAILinkProps {\n  showIcon?: boolean;\n}\n\ninterface FolderLinkWithFragment extends FolderLinkBase {\n  vfolderNodeFragment: FolderLink_vfolderNode$key;\n  folderId?: never;\n  folderName?: never;\n}\n\ninterface FolderLinkWithIdAndName extends FolderLinkBase {\n  vfolderNodeFragment?: never;\n  folderId: string;\n  folderName: string;\n}\n\ntype FolderLinkProps = FolderLinkWithFragment | FolderLinkWithIdAndName;\n\nconst FolderLink = ({\n  vfolderNodeFragment,\n  folderId,\n  folderName,\n  showIcon,\n  ...baiLinkProps\n}: FolderLinkProps) => {\n  const { generateFolderPath } = useFolderExplorerOpener();\n  const vfolderNode = useFragment(\n    graphql`\n      fragment FolderLink_vfolderNode on VirtualFolderNode {\n        row_id\n        name\n      }\n    `,\n    vfolderNodeFragment,\n  );\n\n  return (\n    <BAILink\n      to={generateFolderPath(folderId ?? vfolderNode?.row_id ?? '')}\n      style={{ wordBreak: 'break-all' }}\n      {...baiLinkProps}\n    >\n      {showIcon && (\n        <>\n          <FolderOutlined /> &nbsp;\n        </>\n      )}\n      {folderName ?? vfolderNode?.name ?? ''}\n    </BAILink>\n  );\n};\n\nexport default FolderLink;\n","import { MountedVFolderLinksFragment$key } from '../__generated__/MountedVFolderLinksFragment.graphql';\nimport { MountedVFolderLinksLegacyLazyFolderLinkFragment$key } from '../__generated__/MountedVFolderLinksLegacyLazyFolderLinkFragment.graphql';\nimport { MountedVFolderLinksQuery } from '../__generated__/MountedVFolderLinksQuery.graphql';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport FolderLink from './FolderLink';\nimport { Skeleton } from 'antd';\nimport _ from 'lodash';\nimport React, { Suspense } from 'react';\nimport { graphql, useFragment, useLazyLoadQuery } from 'react-relay';\n\ninterface MountedVFolderLinksProps {\n  sessionFrgmt: MountedVFolderLinksFragment$key; // Replace with actual type if available\n}\n\nconst MountedVFolderLinks: React.FC<MountedVFolderLinksProps> = ({\n  sessionFrgmt,\n}) => {\n  const baiClient = useSuspendedBackendaiClient();\n\n  const session = useFragment(\n    graphql`\n      fragment MountedVFolderLinksFragment on ComputeSessionNode {\n        row_id\n        vfolder_nodes @since(version: \"25.4.0\") {\n          edges {\n            node {\n              ...FolderLink_vfolderNode\n            }\n          }\n        }\n        ...MountedVFolderLinksLegacyLazyFolderLinkFragment\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  return baiClient.supports('vfolder_nodes_in_session_node') ? (\n    _.map(session.vfolder_nodes?.edges, (vfolder, idx) => {\n      return (\n        vfolder?.node && (\n          <FolderLink\n            key={`mounted-vfolder-${idx}`}\n            showIcon\n            vfolderNodeFragment={vfolder.node}\n            // TODO: For now, disable state using VirtualFolderNode permissions in FolderLink component.\n            // Currently shows Alert.error in Folder Explorer instead due to related bugs\n          />\n        )\n      );\n    })\n  ) : session.row_id ? (\n    // TODO: This part can be removed once compatibility with v25.4.0 is no longer needed.\n    <Suspense fallback={<Skeleton.Input size=\"small\" active block />}>\n      <LegacyLazyMountedVFolderLinks sessionFrgmt={session} />\n    </Suspense>\n  ) : null;\n};\n\nexport default MountedVFolderLinks;\n\nconst LegacyLazyMountedVFolderLinks: React.FC<{\n  sessionFrgmt: MountedVFolderLinksLegacyLazyFolderLinkFragment$key;\n}> = ({ sessionFrgmt }) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const session = useFragment(\n    graphql`\n      fragment MountedVFolderLinksLegacyLazyFolderLinkFragment on ComputeSessionNode {\n        row_id\n        vfolder_mounts\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const { legacy_session } = useLazyLoadQuery<MountedVFolderLinksQuery>(\n    graphql`\n      query MountedVFolderLinksQuery($uuid: UUID!) {\n        legacy_session: compute_session(id: $uuid) {\n          mounts\n        }\n      }\n    `,\n    {\n      uuid: session.row_id || '',\n    },\n    {\n      fetchPolicy: session.row_id ? 'store-and-network' : 'store-only',\n    },\n  );\n\n  return baiClient.supports('vfolder-mounts')\n    ? _.map(\n        // compute_session_node query's vfolder_mounts is not include name.\n        // To provide vfolder name in compute_session_node, schema must be changed.\n        // legacy_session.mounts (name) and session.vfolder_mounts (id) give vfolder information in same order.\n        _.zip(legacy_session?.mounts, session?.vfolder_mounts),\n        (mountInfo) => {\n          const [name, id] = mountInfo;\n          return (\n            <FolderLink\n              key={id}\n              folderId={id ?? ''}\n              folderName={name ?? ''}\n              showIcon\n            />\n          );\n        },\n      )\n    : legacy_session?.mounts?.join(', ');\n};\n","import { SessionDetailContentFragment$key } from '../__generated__/SessionDetailContentFragment.graphql';\nimport { SessionDetailContentLegacyQuery } from '../__generated__/SessionDetailContentLegacyQuery.graphql';\nimport { SessionDetailContentQuery } from '../__generated__/SessionDetailContentQuery.graphql';\nimport { INITIAL_FETCH_KEY, useSuspendedBackendaiClient } from '../hooks';\nimport { useCurrentUserInfo, useCurrentUserRole } from '../hooks/backendai';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { ResourceNumbersOfSession } from '../pages/SessionLauncherPage';\nimport ConnectedKernelList from './ComputeSessionNodeItems/ConnectedKernelList';\nimport EditableSessionName from './ComputeSessionNodeItems/EditableSessionName';\nimport SessionActionButtons from './ComputeSessionNodeItems/SessionActionButtons';\nimport SessionIdleChecks, {\n  IdleChecks,\n} from './ComputeSessionNodeItems/SessionIdleChecks';\nimport SessionReservation from './ComputeSessionNodeItems/SessionReservation';\nimport SessionStatusDetailModal from './ComputeSessionNodeItems/SessionStatusDetailModal';\nimport SessionStatusTag from './ComputeSessionNodeItems/SessionStatusTag';\nimport IdleCheckDescriptionModal from './IdleCheckDescriptionModal';\nimport ImageNodeSimpleTag from './ImageNodeSimpleTag';\nimport { UNSAFELazySessionImageTag } from './ImageTags';\nimport MountedVFolderLinks from './MountedVFolderLinks';\nimport SessionUsageMonitor from './SessionUsageMonitor';\nimport { InfoCircleOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Descriptions,\n  Grid,\n  Select,\n  Skeleton,\n  Tag,\n  theme,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport Title from 'antd/es/typography/Title';\nimport {\n  filterOutNullAndUndefined,\n  BAISessionTypeTag,\n  toGlobalId,\n  UNSAFELazyUserEmailView,\n  useMemoizedJSONParse,\n  BAIFlex,\n  BAISessionAgentIds,\n} from 'backend.ai-ui';\n// import { graphql } from 'react-relay';\nimport _ from 'lodash';\nimport { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useFragment, useLazyLoadQuery } from 'react-relay';\n\nconst SessionDetailContent: React.FC<{\n  id: string;\n  sessionFrgmt?: SessionDetailContentFragment$key | null;\n  fetchKey?: string;\n  /**\n   * @deprecated This property is unnecessary since sessionFrgmt contains the project id field.\n   * Kept for backward compatibility with versions <= v24.12.0.\n   */\n  deprecatedProjectId?: string | null;\n}> = ({ id, fetchKey, sessionFrgmt, deprecatedProjectId }) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { md } = Grid.useBreakpoint();\n  const currentProject = useCurrentProjectValue();\n  const [currentUser] = useCurrentUserInfo();\n  const userRole = useCurrentUserRole();\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [openIdleCheckDescriptionModal, setOpenIdleCheckDescriptionModal] =\n    useState<boolean>(false);\n  const [openStatusDetailModal, setOpenStatusDetailModal] =\n    useState<boolean>(false);\n  const [usageMonitorDisplayTarget, setUsageMonitorDisplayTarget] = useState<\n    'max' | 'avg' | 'current'\n  >('current');\n\n  // TODO: remove and refactor this waterfall request after v24.12.0\n  // get the project id of the session for <= v24.12.0.\n  const { legacy_session } = useLazyLoadQuery<SessionDetailContentLegacyQuery>(\n    graphql`\n      query SessionDetailContentLegacyQuery($uuid: UUID!) {\n        legacy_session: compute_session(id: $uuid) {\n          group_id\n        }\n      }\n    `,\n    {\n      uuid: id,\n    },\n    {\n      fetchPolicy: deprecatedProjectId ? 'store-only' : 'store-or-network',\n    },\n  );\n\n  // TODO: Remove useLazyLoadQuery and use useRefetchableFragment instead of useFragment to fetch session data when deprecatedProjectId is removed.\n  const { internalLoadedSession } = useLazyLoadQuery<SessionDetailContentQuery>(\n    graphql`\n      query SessionDetailContentQuery($id: GlobalIDField!, $project_id: UUID!) {\n        internalLoadedSession: compute_session_node(\n          id: $id\n          project_id: $project_id\n        ) {\n          ...SessionDetailContentFragment\n        }\n      }\n    `,\n    {\n      id: toGlobalId('ComputeSessionNode', id),\n      // uuid: id,\n      project_id:\n        legacy_session?.group_id || deprecatedProjectId || currentProject.id,\n    },\n    {\n      fetchPolicy:\n        // Only use network when sessionFrgmt is not provided on initial fetch\n        fetchKey === INITIAL_FETCH_KEY\n          ? sessionFrgmt\n            ? 'store-only'\n            : 'store-and-network' // initial fetch\n          : 'network-only',\n      fetchKey: fetchKey,\n    },\n  );\n\n  const session = useFragment(\n    graphql`\n      fragment SessionDetailContentFragment on ComputeSessionNode {\n        id\n        row_id\n        name\n        project_id\n        user_id\n        owner @since(version: \"25.13.0\") {\n          email\n        }\n        resource_opts\n        status\n        status_data\n        vfolder_mounts\n        vfolder_nodes @since(version: \"25.4.0\") {\n          edges {\n            node {\n              ...FolderLink_vfolderNode\n            }\n          }\n          count\n        }\n        created_at @required(action: NONE)\n        terminated_at\n        scaling_group\n        agent_ids\n        requested_slots\n        idle_checks @since(version: \"24.12.0\")\n\n        kernel_nodes {\n          edges {\n            node {\n              image {\n                ...ImageNodeSimpleTagFragment\n              }\n              ...ConnectedKernelListFragment\n            }\n          }\n        }\n\n        ...SessionStatusTagFragment\n        ...SessionActionButtonsFragment\n        ...BAISessionTypeTagFragment\n        ...EditableSessionNameFragment\n        ...SessionReservationFragment\n        ...ContainerLogModalFragment\n        ...SessionUsageMonitorFragment\n        ...ContainerCommitModalFragment\n        ...SessionIdleChecksNodeFragment\n        ...SessionStatusDetailModalFragment\n        ...AppLauncherModalFragment\n        ...MountedVFolderLinksFragment\n        ...BAISessionAgentIdsFragment\n      }\n    `,\n    (internalLoadedSession as SessionDetailContentFragment$key) || sessionFrgmt,\n  );\n\n  // The feature to display imminent expiration time as a separate Alert is supported from version 24.12.\n  let imminentExpirationTime = _.min(\n    _.values(\n      useMemoizedJSONParse<IdleChecks>(session?.idle_checks, {\n        fallbackValue: {},\n      }),\n    )\n      .map((check) => check.remaining)\n      .filter(Boolean),\n  );\n\n  const resolvedProjectIdOfSession =\n    session?.project_id || legacy_session?.group_id;\n\n  return session ? (\n    <BAIFlex direction=\"column\" gap={'lg'} align=\"stretch\">\n      {resolvedProjectIdOfSession !== currentProject.id && (\n        <Alert message={t('session.NotInProject')} type=\"warning\" showIcon />\n      )}\n      {currentUser.uuid !== session?.user_id && (\n        <Alert\n          message={t('session.AnotherUserSession')}\n          type=\"warning\"\n          showIcon\n        />\n      )}\n      {imminentExpirationTime && imminentExpirationTime < 3600 && (\n        <Alert\n          message={t('session.IdleCheckExpirationWarning')}\n          type=\"warning\"\n          showIcon\n        />\n      )}\n      <BAIFlex direction=\"column\" gap={'sm'} align=\"stretch\">\n        <BAIFlex\n          direction=\"row\"\n          justify=\"between\"\n          align=\"start\"\n          style={{\n            alignSelf: 'stretch',\n          }}\n          gap={'sm'}\n        >\n          <EditableSessionName\n            sessionFrgmt={session}\n            component={Title}\n            level={3}\n            style={{\n              margin: 0,\n              color: ['TERMINATED', 'CANCELLED'].includes(session.status || '')\n                ? token.colorTextTertiary\n                : undefined,\n            }}\n            editable={\n              !['TERMINATED', 'CANCELLED'].includes(session.status || '')\n            }\n          />\n          <Button.Group size=\"large\">\n            <SessionActionButtons sessionFrgmt={session} />\n          </Button.Group>\n        </BAIFlex>\n\n        <Descriptions\n          bordered\n          column={md ? 2 : 1}\n          labelStyle={{\n            wordBreak: 'keep-all',\n          }}\n        >\n          <Descriptions.Item label={t('session.SessionId')} span={md ? 2 : 1}>\n            <Typography.Text\n              ellipsis\n              copyable\n              style={{ fontFamily: 'monospace' }}\n            >\n              {session.row_id}\n            </Typography.Text>\n          </Descriptions.Item>\n          {(userRole === 'admin' || userRole === 'superadmin') && (\n            <Descriptions.Item label={t('credential.UserID')} span={md ? 2 : 1}>\n              {session.owner?.email ? (\n                session.owner.email\n              ) : session.user_id ? (\n                <Suspense fallback={<Skeleton.Input size=\"small\" active />}>\n                  <UNSAFELazyUserEmailView uuid={session.user_id} />\n                </Suspense>\n              ) : (\n                '-'\n              )}\n            </Descriptions.Item>\n          )}\n          <Descriptions.Item label={t('session.Status')}>\n            <BAIFlex>\n              <SessionStatusTag sessionFrgmt={session} showInfo />\n              {session?.status_data && session?.status_data !== '{}' ? (\n                <Tooltip title={t('button.ClickForMoreDetails')}>\n                  <Button\n                    type=\"link\"\n                    icon={<InfoCircleOutlined />}\n                    onClick={() => {\n                      setOpenStatusDetailModal(true);\n                    }}\n                  />\n                </Tooltip>\n              ) : null}\n            </BAIFlex>\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.SessionType')}>\n            <BAISessionTypeTag sessionFrgmt={session} />\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.Environments')}>\n            {session.kernel_nodes?.edges[0]?.node?.image ? (\n              <ImageNodeSimpleTag\n                imageFrgmt={session.kernel_nodes?.edges[0]?.node?.image || null}\n              />\n            ) : session.row_id ? (\n              <Suspense fallback={<Skeleton.Input size=\"small\" active />}>\n                <UNSAFELazySessionImageTag sessionId={session.row_id} />\n              </Suspense>\n            ) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.MountedFolders')}>\n            <BAIFlex gap=\"xs\" wrap=\"wrap\">\n              <MountedVFolderLinks sessionFrgmt={session} />\n            </BAIFlex>\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.ResourceAllocation')}>\n            <BAIFlex gap={'sm'} wrap=\"wrap\">\n              <Tooltip title={t('session.ResourceGroup')}>\n                <Tag>{session.scaling_group}</Tag>\n              </Tooltip>\n              <ResourceNumbersOfSession\n                resource={JSON.parse(session.requested_slots || '{}')}\n              />\n            </BAIFlex>\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.Agent')}>\n            <BAISessionAgentIds sessionFrgmt={session} />\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.Reservation')} span={md ? 2 : 1}>\n            <BAIFlex gap={'xs'} wrap={'wrap'}>\n              <SessionReservation sessionFrgmt={session} />\n            </BAIFlex>\n          </Descriptions.Item>\n          {baiClient.supports('idle-checks-gql') &&\n          session.status === 'RUNNING' &&\n          imminentExpirationTime ? (\n            <Descriptions.Item\n              label={\n                <BAIFlex gap=\"xxs\">\n                  {t('session.IdleChecks')}\n                  <Tooltip title={t('button.ClickForMoreDetails')}>\n                    <QuestionCircleOutlined\n                      style={{ cursor: 'pointer' }}\n                      onClick={() => setOpenIdleCheckDescriptionModal(true)}\n                    />\n                  </Tooltip>\n                </BAIFlex>\n              }\n              span={md ? 2 : 1}\n            >\n              <Suspense fallback={<Skeleton.Input active size=\"small\" />}>\n                <SessionIdleChecks\n                  sessionNodeFrgmt={session}\n                  direction={md ? 'row' : 'column'}\n                  fetchKeyForLegacyLoadQuery={fetchKey}\n                />\n              </Suspense>\n            </Descriptions.Item>\n          ) : null}\n          <Descriptions.Item\n            label={\n              <BAIFlex direction=\"column\" align=\"start\" gap={token.marginSM}>\n                <Typography.Text\n                  style={{\n                    color: token.colorTextSecondary,\n                    wordBreak: 'keep-all',\n                  }}\n                >\n                  {t('session.ResourceUsage')}\n                </Typography.Text>\n                <Select\n                  size=\"small\"\n                  popupMatchSelectWidth={false}\n                  style={{ width: '100%', display: 'none' }}\n                  variant=\"filled\"\n                  defaultValue={'current'}\n                  options={[\n                    {\n                      label: t('session.CurrentUsage'),\n                      value: 'current',\n                    },\n                    {\n                      label: t('session.MaxUsage'),\n                      value: 'max',\n                    },\n                    {\n                      label: t('session.AverageUsage'),\n                      value: 'avg',\n                    },\n                  ]}\n                  onChange={(value: 'current' | 'max' | 'avg') => {\n                    setUsageMonitorDisplayTarget(value);\n                  }}\n                />\n              </BAIFlex>\n            }\n            span={md ? 2 : 1}\n          >\n            <SessionUsageMonitor\n              sessionFrgmt={session}\n              displayTarget={usageMonitorDisplayTarget}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </BAIFlex>\n      <Suspense fallback={<Skeleton active />}>\n        <BAIFlex direction=\"column\" gap={'sm'} align=\"stretch\">\n          <Typography.Title level={4} style={{ margin: 0 }}>\n            {t('kernel.Kernels')}\n          </Typography.Title>\n          <ConnectedKernelList\n            kernelsFrgmt={filterOutNullAndUndefined(\n              session.kernel_nodes?.edges.map((e) => e?.node),\n            )}\n            sessionFrgmtForLogModal={session}\n          />\n        </BAIFlex>\n      </Suspense>\n      <IdleCheckDescriptionModal\n        open={openIdleCheckDescriptionModal}\n        onCancel={() => setOpenIdleCheckDescriptionModal(false)}\n      />\n      <SessionStatusDetailModal\n        sessionFrgmt={session}\n        open={openStatusDetailModal}\n        onCancel={() => setOpenStatusDetailModal(false)}\n      />\n    </BAIFlex>\n  ) : (\n    <Alert\n      showIcon\n      message={t('session.SessionNotFound')}\n      type=\"error\"\n      description={id}\n    ></Alert>\n  );\n};\n\nexport default SessionDetailContent;\n","import { SessionDetailDrawerFragment$key } from '../__generated__/SessionDetailDrawerFragment.graphql';\nimport { useFetchKey, useSuspendedBackendaiClient } from '../hooks';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport SessionDetailContent from './SessionDetailContent';\nimport { Drawer, Skeleton, Tooltip } from 'antd';\nimport { DrawerProps } from 'antd/lib';\nimport dayjs from 'dayjs';\nimport React, { Suspense, useMemo, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useFragment } from 'react-relay';\nimport { useLocation } from 'react-router-dom';\n\n// import { StringParam, useQueryParam } from 'use-query-params';\n\ninterface SessionDetailDrawerProps extends DrawerProps {\n  sessionId?: string;\n}\nconst SessionDetailDrawer: React.FC<SessionDetailDrawerProps> = ({\n  sessionId,\n  ...drawerProps\n}) => {\n  const { t } = useTranslation();\n  useSuspendedBackendaiClient();\n\n  const [isPendingReload, startReloadTransition] = useTransition();\n\n  const [fetchKey, updateFetchKey] = useFetchKey();\n\n  const location = useLocation();\n  const {\n    sessionDetailDrawerFrgmt: sessionFrgmtFromLocation,\n    createdAt,\n  }: {\n    sessionDetailDrawerFrgmt?: SessionDetailDrawerFragment$key;\n    createdAt?: string;\n  } = location.state || {};\n\n  const session = useFragment(\n    graphql`\n      fragment SessionDetailDrawerFragment on ComputeSessionNode {\n        id\n        project_id\n        ...SessionDetailContentFragment\n      }\n    `,\n    sessionFrgmtFromLocation,\n  );\n\n  const cachedSessionFrgmt = useMemo(() => {\n    // If createdAt is within 1 minute, use sessionDetailDrawerFrgmt; otherwise return null to fetch fresh data in SessionDetailContent.\n    if (createdAt && dayjs().diff(dayjs(createdAt), 'second') < 60) {\n      return session;\n    }\n    return null;\n    // only for the first render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Drawer\n      title={t('session.SessionInfo')}\n      width={800}\n      extra={\n        <Tooltip title={t('button.Refresh')}>\n          <BAIFetchKeyButton\n            loading={isPendingReload}\n            autoUpdateDelay={7_000}\n            value={fetchKey}\n            onChange={(newFetchKey) => {\n              startReloadTransition(() => {\n                updateFetchKey(newFetchKey);\n              });\n            }}\n          />\n        </Tooltip>\n      }\n      {...drawerProps}\n    >\n      <Suspense fallback={<Skeleton active />}>\n        {sessionId && (\n          <SessionDetailContent\n            id={sessionId}\n            fetchKey={fetchKey}\n            sessionFrgmt={cachedSessionFrgmt}\n            deprecatedProjectId={session?.project_id}\n          />\n        )}\n      </Suspense>\n    </Drawer>\n  );\n};\n\nexport default SessionDetailDrawer;\n","import _ from 'lodash';\n\n/**\n * Escapes a value for CSV formatting.\n *\n * @param value - The value to escape.\n * @returns The escaped value.\n */\nfunction escapeCsvValue(value: any) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  if (typeof value === 'number' || typeof value === 'boolean') {\n    return String(value);\n  }\n\n  // Convert non-string values to string using JSON.stringify\n  value = _.isString(value) ? value : JSON.stringify(value);\n\n  // Replace double quotes within the value with two double quotes\n  return `\"${value.replace(/\"/g, '\"\"')}\"`;\n}\n\n/**\n * Converts an array of JSON objects to a CSV string.\n *\n * @param data - The array of JSON objects to convert.\n * @param format_rules - The formatting rules for each property in the JSON objects.\n * @returns The CSV string representation of the JSON objects.\n */\nexport const JSONToCSVBody = <T>(\n  data: T[],\n  format_rules?: {\n    [key in keyof T]?: (value: any) => any;\n  },\n) => {\n  const displayedData = _.map(data, (row) => {\n    return _.omit(row as object, '__fragments', '__fragmentOwner', '__id');\n  });\n\n  const CSVTitle = _.keys(displayedData[0]);\n  const CSVData = _.map(displayedData, (row) => {\n    return _.map(row, (value, key) => {\n      if (format_rules?.[key as keyof T]) {\n        return format_rules[key as keyof T]?.(value) || value;\n      }\n      return value;\n    });\n  });\n\n  const csvContent = CSVData.map((row) =>\n    row.map(escapeCsvValue).join(','),\n  ).join('\\n');\n  const csvBody = [CSVTitle.map(escapeCsvValue).join(','), csvContent].join(\n    '\\n',\n  );\n\n  return csvBody;\n};\n\n/**\n * Download a file from the given blob.\n * @param {Blob} blob - The file content.\n * @param {string} filename - The name of the file.\n */\n\nexport const downloadBlob = (blob: Blob, filename: string) => {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  URL.revokeObjectURL(url);\n};\n\nexport const exportCSVWithFormattingRules = <T>(\n  data: T[],\n  filename: string,\n  format_rules?: {\n    [key in keyof T]?: (value: any) => any;\n  },\n) => {\n  const bodyStr = JSONToCSVBody(data, format_rules);\n  const blob = new Blob([bodyStr], { type: 'text/csv' });\n  downloadBlob(blob, `${filename}.csv`);\n};\n"],"names":["node","v0","v1","hash","_ref","_session$kernel_nodes","_session$kernel_nodes2","_$find","_kernelNodes$","_session$row_id$split","_session$kernel_nodes3","sessionFrgmt","defaultKernelId","modalProps","baiClient","useSuspendedBackendaiClient","token","theme","useToken","session","useFragment","_ContainerLogModalFragment","kernelNodes","kernel_nodes","edges","map","e","selectedKernelId","setSelectedKernelId","useState","_","cluster_role","row_id","data","logs","refetch","isPending","isRefetching","dataUpdatedAt","useTanQuery","queryKey","access_key","open","queryFn","async","get_logs","then","req","result","staleTime","lastLineNumbers","resetPrevious","resetPreviousLineNumber","factory","deps","initialPrev","arguments","length","undefined","prevRef","useRef","prevResetKey","setPrevResetKey","current","useMemo","memoizedPrev","useEffect","previous","useMemoWithPrevious","split","md","Grid","useBreakpoint","t","useTranslation","_jsx","BAIModal","title","_jsxs","BAIFlex","style","maxWidth","gap","children","Typography","Title","level","margin","flexShrink","_Fragment","Text","fontWeight","ellipsis","name","fontFamily","copyable","text","tooltips","width","styles","header","body","height","maxHeight","footer","destroyOnClose","direction","align","wrap","BAISelect","value","onChange","autoSelectOption","options","sortBy","_e$node","_e$node2","cluster_idx","_e$node3","_e$node4","_e$node5","label","cluster_hostname","fontSize","fontSizeSM","type","substring","Divider","Tooltip","Button","size","icon","DownloadIcon","disabled","onClick","blob","Blob","downloadBlob","Date","toISOString","loading","ReloadOutlined","alignSelf","border","colorBorder","overflow","ScrollFollow","startFollowing","render","_ref2","follow","onScroll","LazyLog","caseInsensitive","enableSearch","enableSearchNavigation","selectableLines","highlight","extraLines","v2","v3","v4","v5","v6","v7","kernelStatusTagColor","PREPARING","BUILDING","PULLING","PREPARED","CREATING","PENDING","SCHEDULED","RUNNING","RESTARTING","RESIZING","SUSPENDED","TERMINATING","TERMINATED","CANCELLED","ERROR","kernelsFrgmt","sessionFrgmtForLogModal","kernelIdForLogModal","setKernelIdForLogModal","_ConnectedKernelListFragment","columns","filterOutEmpty","dataIndex","hostname","record","ScrollTextIcon","marginInlineStart","marginXXS","status","_record$status_info","status_info","DoubleTag","values","color","Tag","id","fixed","onCell","sortedKernels","filterOutNullAndUndefined","BAITable","bordered","rowKey","scroll","x","dataSource","BAIUnmountAfterClose","ContainerLogModal","onCancel","component","Component","editable","editableOfProps","otherProps","relayEvn","useRelayEnvironment","currentProject","useCurrentProjectValue","_EditableSessionNameFragment","optimisticName","setOptimisticName","validationRules","useValidateSessionName","userInfo","useCurrentUserInfo","baiRequestWithPromise","useBaiSignedRequestWithPromise","renameSessionMutation","useTanMutation","mutationFn","newName","method","url","message","App","useApp","isEditing","setIsEditing","isNotPreparingCategoryStatus","includes","isEditingAllowed","uuid","user_id","isPendingRenamingAndRefreshing","onStart","triggerType","colorTextTertiary","Form","onFinish","sessionName","mutate","onSuccess","fetchQuery","_EditableSessionNameRefetchQuery","sessionId","project_id","toPromise","catch","document","dispatchEvent","CustomEvent","onError","err","error","initialValues","flex","Item","rules","validateDebounce","Input","suffix","CornerDownLeftIcon","autoFocus","onKeyDown","key","_session$service_port","_globalThis$backendai","onRequestClose","formRef","openToPublic","setOpenToPublic","tryPreferredPort","setTryPreferredPort","forceUseV1Proxy","setForceUseV1Proxy","forceUseV2Proxy","setForceUseV2Proxy","useSubDomain","setUseSubDomain","_AppLauncherModalFragment","servicePorts","JSON","parse","service_ports","preOpenAppTemplate","baseAppTemplate","appTemplate","useSuspenseTanQuery","fetch","res","json","allowTCPApps","globalThis","isElectron","_config","allowNonAuthTCP","preOpenAppList","app","protocol","is_inference","src","inferenceAppList","inferenceAppTemplate","baseAppList","template","Object","item","category","redirect","filter","Boolean","push","groupedBaseAppTemplate","groupBy","useSuspendedFilteredAppTemplate","handleAppLaunch","_formRef$current","_app$name","_session$row_id","_app$redirect","_app$name2","validateFields","_values$preferredPort","appLauncher","clientIps","userPort","preferredPort","subDomain","appController","_openAppLaunchConfirmationDialog","_openTensorboardDialog","_runApp","apps","marginTop","Row","gutter","Col","span","alignContent","Image","alt","preview","textAlign","ref","layout","openPortToPublic","Checkbox","target","checked","Trans","i18nKey","QuestionCircleOutlined","cursor","placeholder","allowPreferredPort","min","max","InputNumber","backendaiwebui","debug","upsertNotification","useSetBAINotification","isConfirmLoading","setIsConfirmLoading","_ContainerCommitModalFragment","onOk","convertSessionToImage","_session$name","backgroundTask","promise","computeSession","imageName","pending","resolved","task_id","taskId","percent","rejected","description","toText","to","finally","okButtonProps","Descriptions","column","marginBottom","required","pattern","isActive","isAppSupported","props","_userInfo$","runTerminal","showLauncher","params","_SessionActionButtonsFragment","openAppLauncherModal","setOpenAppLauncherModal","openTerminateModal","setOpenTerminateModal","openLogModal","setOpenLogModal","openContainerCommitModal","setOpenContainerCommitModal","isOwner","BAIAppIcon","Suspense","fallback","AppLauncherModal","BAITerminalAppIcon","TerminateSessionModal","sessionFrgmts","BAISessionLogIcon","enableContainerCommit","BAIContainerCommitIcon","ContainerCommitModal","BAITerminateIcon","colorError","getUtilizationCheckerColor","resources","thresholds_check_operator","utilization","threshold","Math","getIdleChecksTagColor","criteria","remaining","extra","_ref3","sessionNodeFrgmt","fetchKeyForLegacyLoadQuery","mergedResourceSlots","useResourceSlotsDetails","sessionNode","_SessionIdleChecksNodeFragment","useLazyLoadQuery","_SessionIdleChecksQuery","sessionID","fetchKey","fetchPolicy","idle_checks","idleChecks","useMemoizedJSONParse","fallbackValue","getIdleCheckTitle","_value$extra","Type","resource","_mergedResourceSlots$","deviceName","colorWhite","human_readable_name","toFixedFloorWithoutTrailingZeros","InfoCircleOutlined","colorTextSecondary","remaining_time_type","formatDurationAsDays","getTime","marginLeft","marginMD","vfolderNodeFragment","folderId","folderName","showIcon","baiLinkProps","generateFolderPath","useFolderExplorerOpener","vfolderNode","_FolderLink_vfolderNode","BAILink","wordBreak","FolderOutlined","_session$vfolder_node","_MountedVFolderLinksFragment","supports","vfolder_nodes","vfolder","idx","FolderLink","Skeleton","active","block","LegacyLazyMountedVFolderLinks","_legacy_session$mount","_MountedVFolderLinksLegacyLazyFolderLinkFragment","legacy_session","_MountedVFolderLinksQuery","mounts","vfolder_mounts","mountInfo","join","_session$owner","_session$kernel_nodes4","_session$kernel_nodes5","_session$kernel_nodes6","_session$kernel_nodes7","deprecatedProjectId","currentUser","userRole","useCurrentUserRole","openIdleCheckDescriptionModal","setOpenIdleCheckDescriptionModal","openStatusDetailModal","setOpenStatusDetailModal","usageMonitorDisplayTarget","setUsageMonitorDisplayTarget","_SessionDetailContentLegacyQuery","internalLoadedSession","_SessionDetailContentQuery","toGlobalId","group_id","INITIAL_FETCH_KEY","_SessionDetailContentFragment","imminentExpirationTime","check","resolvedProjectIdOfSession","Alert","justify","EditableSessionName","Group","SessionActionButtons","labelStyle","owner","email","UNSAFELazyUserEmailView","SessionStatusTag","showInfo","status_data","BAISessionTypeTag","image","ImageNodeSimpleTag","imageFrgmt","UNSAFELazySessionImageTag","MountedVFolderLinks","scaling_group","ResourceNumbersOfSession","requested_slots","BAISessionAgentIds","SessionReservation","SessionIdleChecks","marginSM","Select","popupMatchSelectWidth","display","variant","defaultValue","SessionUsageMonitor","displayTarget","ConnectedKernelList","IdleCheckDescriptionModal","SessionStatusDetailModal","drawerProps","isPendingReload","startReloadTransition","useTransition","updateFetchKey","useFetchKey","location","useLocation","sessionDetailDrawerFrgmt","sessionFrgmtFromLocation","createdAt","state","_SessionDetailDrawerFragment","cachedSessionFrgmt","dayjs","diff","Drawer","BAIFetchKeyButton","autoUpdateDelay","newFetchKey","SessionDetailContent","escapeCsvValue","String","stringify","replace","filename","URL","createObjectURL","a","createElement","href","download","click","revokeObjectURL","exportCSVWithFormattingRules","format_rules","bodyStr","JSONToCSVBody","displayedData","row","CSVTitle","csvContent","_format_rules","call"],"sourceRoot":""}