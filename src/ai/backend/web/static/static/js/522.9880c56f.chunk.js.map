{"version":3,"file":"static/js/522.9880c56f.chunk.js","mappings":"8NAqBA,EAb0C,SAAHA,GAA2B,IAADC,EAAjBC,EAAUC,OAAAC,OAAA,KAAAC,EAAAA,EAAAA,GAAAL,GAAAA,IACxD,OACEM,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,S,01BACAC,EAAAA,EAAAA,KAACC,EAAAA,GAAKC,EAAAA,EAAAA,GAAA,CACJC,SAA6B,QAArBX,EAAEC,EAAWU,gBAAQ,IAAAX,GAAAA,EAC7BY,UAAU,aACNX,MAIZ,C,uJCjBMY,EAEF,CACF,qCAAsC,wBACtC,6DACE,gCAEF,yCAA0C,oBAC1C,4BAA6B,oBAC7B,+DACE,6BACF,iCAAkC,6BAElC,oGACE,kCACF,0EACE,kCACF,kHACE,kCACF,+EACE,+BACF,oHACE,+BACF,kHACE,wCACF,wFACE,0CACF,wEACE,wCACF,0DACE,wCAEF,4FACE,6BAEF,4CAA6C,wBAEzCC,EAEF,CACF,6CAA8C,2BAC9C,+BAAgC,iCAChC,2DACE,iCACF,sJACE,mCACF,oJACE,iCACF,wJACE,6BACF,qJACE,4BACF,+EACE,sCACF,kFACE,0C,6MCuUJ,EA7WI,SAAHf,GAKM,IAADgB,EAJJC,EAAiBjB,EAAjBiB,kBAAiBC,EAAAlB,EACjBmB,uBAAAA,OAAsB,IAAAD,EAAG,KAAIA,EAC7BE,EAAIpB,EAAJoB,KACGlB,GAAUmB,EAAAA,EAAAA,GAAArB,EAAAsB,GAELC,GAAMC,EAAAA,EAAAA,MAAND,EACRE,EAAeC,EAAAA,EAAKC,UAAbC,GAAsBC,EAAAA,EAAAA,GAAAJ,EAAA,GAAlB,GAEXK,EAAoCC,EAAAA,GAAQC,aAAYC,GAAAJ,EAAAA,EAAAA,GAAAC,EAAA,GAAjDI,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAAoC1B,EAAAA,EAAM2B,WAAUC,GAAAT,EAAAA,EAAAA,GAAAO,EAAA,GAA7CG,EAAKD,EAAA,GAAEE,EAAkBF,EAAA,GAE1BG,GAAoBC,EAAAA,EAAAA,kBAAW,IAAAC,EAAAA,EAAAA,EAAAC,EAAC,OAcpCzB,GAEF0B,GACEC,EAAAA,EAAAA,kBAAW,IAAAC,EAAAA,EAAAA,EAAAH,EAAA,QAmBTI,GAAAnB,EAAAA,EAAAA,GAAAgB,EAAA,GApBGI,EAAoBD,EAAA,GAAEE,EAAwBF,EAAA,GAsBrDG,GACEL,EAAAA,EAAAA,kBAAW,IAAAM,EAAAA,EAAAA,EAAAR,EAAA,QAmBTS,GAAAxB,EAAAA,EAAAA,GAAAsB,EAAA,GApBGG,EAAoBD,EAAA,GAAEE,EAAwBF,EAAA,GAsB/CG,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACVtC,EACJuC,iBACAC,MAAK,SAACC,GACL,IAAMC,EAAoB,CACxBC,SAAUF,EAAOE,SACjBC,MAAO,CACLC,IAAKJ,EAAOK,OAAOD,IACnBE,KAAMN,EAAOK,OAAOC,KACpBC,QAC4B,WAA1BP,EAAOK,OAAOE,aACVC,EACAR,EAAOK,OAAOE,QACpBE,SAAUC,IAAAA,QAAUV,EAAOK,OAAOI,UAC9B,KACAT,EAAOK,OAAOI,SAClBE,SAAUD,IAAAA,QAAUV,EAAOK,OAAOM,UAC9B,KACAX,EAAOK,OAAOM,WAGlBvC,GACG4B,EAAOY,0BACHX,EAAkBE,MAAMQ,SAEjC1B,EAAqB,CACnB4B,UAAWZ,EACXa,YAAa,SAACC,EAAKC,GACbA,EACFnD,EAAWmD,MAAM9D,EAAE,yBAEnBH,GAAQA,EAAK,SAEjB,EACAkE,QAAS,SAACD,GACRnD,EAAWmD,MAAM9D,EAAE,wBACrB,KAGF0B,EAAqB,CACnBiC,UAAWZ,EACXa,YAAa,SAACC,EAAKC,GACbA,EACFnD,EAAWmD,MAAM9D,EAAE,yBAEnBH,GAAQA,EAAK,SAEjB,EACAkE,QAAO,SAACD,GACNnD,EAAWmD,MAAM9D,EAAE,wBACrB,GAGN,IACCgE,OAAM,SAACF,GAAW,KAAE,wBAAAtB,EAAAyB,OAAA,GAAA3B,EAAA,KACxB,kBAvDe,OAAAJ,EAAAgC,MAAA,KAAAC,UAAA,KAwDhB,OACEpF,EAAAA,EAAAA,MAACqF,EAAAA,GAAQhF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACPiF,MAEMrE,EADJkB,EACM,0BACA,wBAERoD,OAA4BtE,EAApBkB,EAAsB,cAAmB,cACjDqD,eAAgB5C,GAA4BK,EAC5CnC,KAAM,WACJQ,EACGuC,iBACAC,MAAK,SAACC,GAAY,IAAD0B,EACZhB,IAAAA,SAAwB,QAAdgB,EAAC1B,EAAOK,cAAM,IAAAqB,OAAA,EAAbA,EAAepB,KAAM,UAClCpC,EAAMyD,QAAQ,CACZJ,MAAOrE,EAAE,kBACT0E,QAAS1E,EAAE,8BACXH,KAAM,WACJoC,GACF,IAGFA,GAEJ,IACC+B,OAAM,WAAO,GAClB,GACIrF,GAAU,IACdgG,gBAAc,EAAA1F,SAAA,CAEb2B,EACAK,GACDlC,EAAAA,EAAAA,MAACoB,EAAAA,EAAI,CACHE,KAAMA,EACNuE,OAAO,WACPC,aAAa,WACbC,cACE5D,GAAiB9B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAER8B,GAAiB,IACpBiC,QAAM/D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACD8B,EAAkBiC,QAAM,IAC3BE,SAAiC,QAAxB5D,EAAAyB,EAAkBiC,cAAM,IAAA1D,OAAA,EAAxBA,EAA0B4D,eAAWC,MAGlD,CACEH,OAAQ,CACNC,KAAM,WAIhB2B,UAAU,EAAM9F,SAAA,EAEhBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CACRC,MAAOjF,EAAE,qBACTkF,KAAK,WACLC,UAAQ,EACRC,MAAO,CACL,CACED,UAAU,EACV3E,QAASR,EAAE,gCACXqF,QAAS,IAAIC,OAAO,SAEtB,CACEC,UAAW,SAAC/B,EAAGgC,GACb,OAAKtE,GAAsC,OAAjBxB,QAAiB,IAAjBA,GAAAA,EAAmB+F,SAASD,GAC7CE,QAAQC,OACb3F,EAAE,2CAGC0F,QAAQE,SACjB,IAEF3G,UAEFC,EAAAA,EAAAA,KAAC2G,EAAAA,EAAK,CACJC,WAAY5E,EAEZsE,OAAwB,OAAjBtE,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB8B,gBAAYM,OAG1CpE,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CACRE,KAAM,CAAC,SAAU,OACjBD,MAAOjF,EAAE,wBACTmF,UAAQ,EACRC,MAAO,CACL,CACED,UAAU,GAEZ,CACE/B,KAAM,OAER,CACEmC,UAAW,SAAC/B,EAAGgC,GACb,OACEA,GACCA,EAAMO,WAAW,YACjBP,EAAMO,WAAW,YAIbL,QAAQE,UAFNF,QAAQC,OAAO3F,EAAE,+BAG5B,IAEFf,UAEFC,EAAAA,EAAAA,KAAC2G,EAAAA,EAAK,OAGR3G,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CACRgB,SAAO,EACPC,aAAc,SAACxD,EAAMC,GAAI,IAAAwD,EAAAC,EAAA,OACvB3C,IAAAA,QAAqB,QAAZ0C,EAACzD,EAAKU,cAAM,IAAA+C,OAAA,EAAXA,EAAazC,YACvBD,IAAAA,QAAqB,QAAZ2C,EAACzD,EAAKS,cAAM,IAAAgD,OAAA,EAAXA,EAAa1C,SAAS,EACjCxE,SAEA,WAEC,OADAoB,EAAKuC,eAAe,CAAC,CAAC,SAAU,eAE9B1D,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CACRE,KAAM,CAAC,SAAU,YACjBD,MAAOjF,EAAE,qBACToF,MAAO,CACL,CACED,UAAW3B,IAAAA,QACTnD,EAAK+F,cAAc,CAAC,SAAU,gBAGlCnH,UAEFC,EAAAA,EAAAA,KAAC2G,EAAAA,EAAK,KAGZ,KAGF9G,EAAAA,EAAAA,MAACoB,EAAAA,EAAK6E,KAAI,CAACC,MAAOjF,EAAE,qBAAqBf,SAAA,EACvCC,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CACRgB,SAAO,EACPC,aAAc,SAACxD,EAAMC,GAAI,OACvBD,EAAKiB,oBAAsBhB,EAAKgB,iBAAiB,EAClDzE,SAEA,kBACCC,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CAACgB,SAAO,EAACd,KAAM,CAAC,SAAU,YAAYjG,UAC9CC,EAAAA,EAAAA,KAAC2G,EAAAA,EAAMQ,SAAQ,CACbP,UACGtC,IAAAA,QAAUtC,KACVb,EAAK+F,cAAc,wBAGd,KAGd5C,IAAAA,QAAUtC,KACVhC,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CAACgB,SAAO,EAACd,KAAK,oBAAoBoB,cAAc,UAASrH,UACjEC,EAAAA,EAAAA,KAACqH,EAAAA,EAAQ,CACPC,SAAU,SAACC,GACJA,EAAEC,OAAOC,SACZtG,EAAKuG,cAAc,CAAC,SAAU,YAAa,GAE/C,EAAE3H,SAEDe,EAAE,qCAKXd,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CACRE,KAAM,CAAC,SAAU,QACjBD,MAAOjF,EAAE,yBACTmF,UAAQ,EACRC,MAAO,CACL,CACED,UAAU,EACV3E,QAASR,EAAE,iCAEbf,UAEFC,EAAAA,EAAAA,KAAC2H,EAAAA,EAAM,CACLC,QAAS,CACP,CACEtB,MAAO,UAET,CACEA,MAAO,UAET,CACEA,MAAO,YAGXgB,SAAU,WACR,OAINtH,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CACRiB,aAAc,SAACxD,EAAMC,GAAI,IAAAqE,EAAAC,EAAA,OACnB,OAAJvE,QAAI,IAAJA,GAAY,QAARsE,EAAJtE,EAAMU,cAAM,IAAA4D,OAAR,EAAJA,EAAc3D,SAAa,OAAJV,QAAI,IAAJA,GAAY,QAARsE,EAAJtE,EAAMS,cAAM,IAAA6D,OAAR,EAAJA,EAAc5D,KAAI,EAE3C4C,SAAO,EAAA/G,SAEN,WACC,MAC6C,WAA3CoB,EAAK+F,cAAc,CAAC,SAAU,WAC5BlH,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CACRE,KAAM,CAAC,SAAU,WACjBD,MAAOjF,EAAE,wBACTmF,UAAQ,EACRC,MAAO,CACL,CACED,UAAU,EACV3E,QAASR,EAAE,oCAEbf,UAOFC,EAAAA,EAAAA,KAAC2H,EAAAA,EAAM,CACLI,KAAK,OACLC,MAAM,EACNC,gBAAiB,CAAC,IAAK,KACvBC,WAAY,QAKtB,UAKV,E,wJCwHA,EA1c8B,WAC5B,IAAMC,GAAYC,EAAAA,EAAAA,MAClBC,GAAmCC,EAAAA,EAAAA,IAAkB,iBAAgBC,GAAAnH,EAAAA,EAAAA,GAAAiH,EAAA,GAA9DG,EAAQD,EAAA,GAAEE,EAAcF,EAAA,GAC/BG,GAAiDC,EAAAA,EAAAA,iBAAeC,GAAAxH,EAAAA,EAAAA,GAAAsH,EAAA,GAAzDG,EAAeD,EAAA,GAAEE,EAAqBF,EAAA,GACvCG,EFYqB,WAC3B,IAAQjI,GAAMC,EAAAA,EAAAA,MAAND,EA6BR,MAAO,CAAEkI,QA5BO,SAACC,GACf,GAAmB,qBAARA,EACT,YAEiC7E,IAA/B8E,WAAWC,iBAEoB,OAA/BD,WAAWC,gBAEJ,gBAEA,oBAIX,IAAwC,IAApCD,WAAWE,eAAeC,MAC5B,OAAOJ,EAET,GAAI,CAAC,EAAEK,eAAeC,KAAKlJ,EAAmB4I,GAC5C,OAAOnI,EAAET,EAAkB4I,IAE3B,QAAAO,EAAA,EAAAC,EAAoB/J,OAAOgK,KAAKpJ,GAAWkJ,EAAAC,EAAAE,OAAAH,IAAE,CAAxC,IAAMI,EAAKH,EAAAD,GACd,GAAIpD,OAAOwD,GAAOC,KAAKZ,GACrB,OAAOnI,EAAER,EAAWsJ,GAExB,CACA,OAAOX,CAEX,EAEF,CE3CqBa,GACnBzI,EAAoCC,EAAAA,GAAQC,aAAYC,GAAAJ,EAAAA,EAAAA,GAAAC,EAAA,GAAjDI,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCuI,GACEC,EAAAA,EAAAA,uBAAgB,IAAAC,EAAAA,EAAAA,EAAA9H,EAAA,OAqBd,CACE+H,OAAQ/B,EAAUgC,QAAQC,YAE5B,CACEC,YAAa,eACb7B,SAAAA,IA3BE8B,EAAoBP,EAApBO,qBAAsBJ,EAAMH,EAANG,OA+B9B9H,GACEC,EAAAA,EAAAA,kBAAW,IAAAkI,EAAAA,EAAAA,EAAApI,EAAA,QAQTI,GAAAnB,EAAAA,EAAAA,GAAAgB,EAAA,GATGoI,GAAoBjI,EAAA,GAAEkI,GAAwBlI,EAAA,GAWrDG,IACEL,EAAAA,EAAAA,kBAAW,IAAAqI,EAAAA,EAAAA,EAAAvI,EAAA,QAiBTS,IAAAxB,EAAAA,EAAAA,GAAAsB,GAAA,GAlBGiI,GAAoB/H,GAAA,GAAEgI,GAA0BhI,GAAA,GAoB/C9B,IAAMC,EAAAA,EAAAA,MAAND,EACA+J,GAAUC,EAAAA,EAAMC,WAAhBF,MACRG,IACEC,EAAAA,EAAAA,UAA4B,MAAKC,IAAA9J,EAAAA,EAAAA,GAAA4J,GAAA,GAD5BG,GAAeD,GAAA,GAAEE,GAAkBF,GAAA,GAE1CG,IACEJ,EAAAA,EAAAA,UAA4B,MAAKK,IAAAlK,EAAAA,EAAAA,GAAAiK,GAAA,GAD5BE,GAAgBD,GAAA,GAAEE,GAAmBF,GAAA,GAE5CG,IAAsDR,EAAAA,EAAAA,UAAS,IAAGS,IAAAtK,EAAAA,EAAAA,GAAAqK,GAAA,GAA3DE,GAAmBD,GAAA,GAAEE,GAAsBF,GAAA,GAClDG,IAA4CZ,EAAAA,EAAAA,WAAS,GAAMa,IAAA1K,EAAAA,EAAAA,GAAAyK,GAAA,GAApDE,GAAcD,GAAA,GAAEE,GAAiBF,GAAA,GAExCG,IAAgDhB,EAAAA,EAAAA,YAAkBiB,IAAA9K,EAAAA,EAAAA,GAAA6K,GAAA,GAA3DE,GAAgBD,GAAA,GAAEE,GAAmBF,GAAA,GAItCG,GAAW,eAAA9M,GAAA0D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOU,GAAgB,IAAAwI,EAAAC,EAAA,OAAArJ,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAGjC0F,WAAWsD,gBAAgBC,MAAM,iBAAiB,KAAD,EAFnDH,EAAchJ,EAAAoJ,KAGdH,EAAoB,SAACI,GACzBC,QAAQC,IAAIF,GACZL,EAAUQ,IAAI,GAAIhM,GAAE,0BACpBwL,EAAUS,IAAI,KACVJ,GAAOA,EAAIrL,UAEb4H,WAAW8D,mBAAmBC,KAAOlE,EAAWC,QAAQ2D,EAAIxH,OAE5D+D,WAAW8D,mBAAmBE,OAASP,EAAIrL,QAE3C4H,WAAW8D,mBAAmBG,MAAK,EAAMR,GAE7C,EACAL,EAAUQ,IAAI,GAAIhM,GAAE,kCACpBqH,EAAUiF,YACPC,cAAcvJ,GACdH,MAAK,SAAAX,GAA6B,IAA1BqK,EAAarK,EAAbqK,cACP,GAAIA,EAAcC,GAAI,CACpBhB,EAAUQ,IAAI,EAAGhM,GAAE,0BACnB,IAAMyM,EAAmBpF,EAAUiF,YAAYI,uBAC7CH,EAAcI,SAEhBF,EAAIG,iBAAiB,kBAAkB,SAACnG,GACtC,IAAMoG,EAAOC,KAAKC,MAAMtG,EAAQ,MAC1BuG,EAAQH,EAAKI,iBAAmBJ,EAAKK,eAC3C1B,EAAUQ,IAAI,IAAMgB,EAAOhN,GAAE,yBAC/B,IACAyM,EAAIG,iBAAiB,eAAe,WAClC,IAAMO,EAAQ,IAAIC,YAAY,mBAC9BC,SAASC,cAAcH,GACvB3B,EAAUQ,IAAI,IAAKhM,GAAE,oCACrByM,EAAIc,OACN,IACAd,EAAIG,iBAAiB,iBAAiB,SAACnG,GACrCqF,QAAQC,IAAI,gBAAiBtF,EAAQ,MACrCgG,EAAIc,QACJ9B,EACE,IAAI+B,MAAM,6CAEd,IACAf,EAAIG,iBAAiB,oBAAoB,WACvCH,EAAIc,QACJ9B,EACE,IAAI+B,MAAM,qDAEd,GACF,MACEhC,EAAUQ,IAAI,GAAIhM,GAAE,kCACpBwL,EAAUS,IAAI,KAId7D,WAAW8D,mBAAmBC,KAAOlE,EAAWC,QAC9CqE,EAAcpE,KAGhBC,WAAW8D,mBAAmBE,OAASG,EAAcpE,IAErDC,WAAW8D,mBAAmBG,MAElC,IACCrI,MAAMyH,GAAmB,wBAAAjJ,EAAAyB,OAAA,GAAA3B,EAAA,KAC7B,gBAlEgBmL,GAAA,OAAAhP,EAAAyF,MAAA,KAAAC,UAAA,KAoEjB,OACEpF,EAAAA,EAAAA,MAAC2O,EAAAA,EAAI,CACHC,UAAU,SACVC,MAAM,UACNC,MAAO,CACLC,KAAM,GAEN7O,SAAA,CAED2B,GACD7B,EAAAA,EAAAA,MAAC2O,EAAAA,EAAI,CACHC,UAAU,MACVI,QAAQ,MACRC,IAAK,KACLH,MAAO,CAAEI,QAASlE,GAAMmE,WAAYjP,SAAA,EAEpCC,EAAAA,EAAAA,KAACiP,EAAAA,GAAM,CACL/K,KAAK,UACLgL,MAAMlP,EAAAA,EAAAA,KAACmP,EAAAA,EAAY,IACnBC,QAAS,WACPpD,IAAkB,EACpB,EAAEjM,SAEDe,GAAE,2BAELd,EAAAA,EAAAA,KAACqP,EAAAA,EAAO,CAAClK,MAAOrE,GAAE,kBAAkBf,UAClCC,EAAAA,EAAAA,KAACiP,EAAAA,GAAM,CACLK,QAASzG,EACTqG,MAAMlP,EAAAA,EAAAA,KAACuP,EAAAA,EAAc,IACrBH,QAAS,WACPtG,GAAsB,WACpBL,GACF,GACF,UAINzI,EAAAA,EAAAA,KAACwP,EAAAA,EAAK,CACJC,OAAQ,CAAEC,EAAG,eACbC,YAAY,EACZC,QAAS,CAKP,CACEzK,MAAOrE,GAAE,qBACT+O,UAAW,YAGb,CACE1K,MAAOrE,GAAE,wBACT+O,UAAW,CAAC,SAAU,QAExB,CACE1K,MAAOrE,GAAE,iBACT+O,UAAW,CAAC,SAAU,SAExB,CACE1K,MAAOrE,GAAE,0BACTgP,OAAQ,SAACxJ,EAAOyJ,GAAY,IAADC,EACzB,OAAO1L,IAAAA,IAAmB,QAAd0L,EAACD,EAAO9L,cAAM,IAAA+L,OAAA,EAAbA,EAAe7L,SAAS,SAAC8L,GACpC,OAAOjQ,EAAAA,EAAAA,KAACkQ,EAAAA,EAAG,CAAAnQ,SAAgBkQ,GAAW,IAArBA,EACnB,GACF,GAEF,CACE9K,MAAOrE,GAAE,qBACT+O,UAAW,CAAC,SAAU,aAKxB,CACE1K,MAAOrE,GAAE,mBACTgP,OAAQ,SAACxJ,EAAOyJ,GACd,IAAMI,EAAY7L,IAAAA,SACV,OAAN4F,QAAM,IAANA,OAAM,EAANA,EAAQkG,0BACRL,EAAOjM,UAET,OACE9D,EAAAA,EAAAA,KAACqQ,EAAAA,EAAM,CACL5I,QACE0E,KAAqB4D,EAAOjM,SAAW0E,GAClC2H,EACDA,EAENvJ,SAAUiC,GAAmB+B,GAC7B0E,QAASnD,KAAqB4D,EAAOjM,SAAW0E,EAChDlB,SAAU,SAACgJ,GACT,GAAKhM,IAAAA,SAAWyL,EAAOjM,UAAvB,CACA,IAAIyM,EAA6BjM,IAAAA,OACzB,OAAN4F,QAAM,IAANA,OAAM,EAANA,EAAQkG,4BAA6B,IAEnCE,EACFC,EAA2BC,KAAKT,EAAOjM,UAEvCyM,EAA6BjM,IAAAA,QAC3BiM,EACAR,EAAOjM,UAIXsI,GAAoB2D,EAAOjM,SAAW0E,GACtCmC,GAAqB,CACnBlG,UAAW,CACTyF,OAAQ/B,EAAUgC,QAAQC,WAC1BgG,0BAA2BG,GAE7B7L,YAAa,SAACiJ,GACZ7E,GAAsB,WACpBL,GACF,IAEAhH,EAAWgP,KAAK,CACdC,IAAK,mBACLlL,QACI1E,GADKwP,EACH,4BACA,+BAEV,GA9BsC,CAgC1C,GAMN,GAEF,CACEnL,MAAOrE,GAAE,mBACT6P,MAAO,QACPb,OAAM,SAACxJ,EAAOyJ,EAAQa,GACpB,OACE/Q,EAAAA,EAAAA,MAAC2O,EAAAA,EAAI,CAAAzO,SAAA,EACHC,EAAAA,EAAAA,KAACqP,EAAAA,EAAO,CAAClK,MAAOrE,GAAE,eAAef,UAC/BC,EAAAA,EAAAA,KAACiP,EAAAA,GAAM,CACL4B,KAAK,QACLlC,MAAO,CACLmC,MAAOjG,GAAMkG,WAEf7M,KAAK,OACLgL,MAAMlP,EAAAA,EAAAA,KAACgR,EAAAA,EAAe,IACtB5B,QAAS,WACPhE,GAAmB2E,EACrB,OAGJ/P,EAAAA,EAAAA,KAACqP,EAAAA,EAAO,CAAClK,MAAOrE,GAAE,iBAAiBf,UACjCC,EAAAA,EAAAA,KAACiP,EAAAA,GAAM,CACL4B,KAAK,QACLI,QAAM,EACN/M,KAAK,OACLgL,MAAMlP,EAAAA,EAAAA,KAACkR,EAAAA,EAAc,IACrB9B,QAAS,WACP5D,GAAoBuE,EACtB,OAGJ/P,EAAAA,EAAAA,KAACqP,EAAAA,EAAO,CAAClK,MAAOrE,GAAE,4BAA4Bf,UAC5CC,EAAAA,EAAAA,KAACiP,EAAAA,GAAM,CACL4B,KAAK,QACL3M,KAAK,OACLgL,MACElP,EAAAA,EAAAA,KAACmR,EAAAA,EAAY,CACX/B,QAAS,WACPW,EAAOjM,UAAYuI,GAAY0D,EAAOjM,SACxC,UAOd,IAGJsN,YAAYC,EAAAA,EAAAA,IAAmB/G,MAEjCtK,EAAAA,EAAAA,KAACsR,EAA4B,CAC3B5Q,uBAAwByK,GACxB3K,kBAAmB8D,IAAAA,IACjBgG,GACA,SAACiH,GAAC,OAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAGzN,WAAY,EAAE,IAE1BkE,OAAQmD,IAAmBY,GAC3BpL,KAAM,SAACuD,GACQ,WAATA,GACFuE,IACAhH,EAAWgP,KAAK3P,GAAE,wCACA,WAAToD,GACTzC,EAAWgP,KAAK3P,GAAE,0CAEpBsK,GAAmB,MACnBY,IAAkB,EACpB,EACAwF,SAAU,WACRpG,GAAmB,MACnBY,IAAkB,EACpB,EACA7L,UAAU,KAEZH,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CACPC,OACEtF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACyR,EAAAA,EAAyB,CACxB9C,MAAO,CACLmC,MAAOjG,GAAM6G,gBAEd,IACF5Q,GAAE,oCAGPsE,OAAQtE,GAAE,iBACV6Q,cAAe,CACbV,QAAQ,EACRrK,SAAU+E,MAAwC,OAAhBJ,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBzH,WAEtDnD,KAAM,WACA4K,GACFf,GAAqB,CACnB/F,UAAW,CACTX,SAAUyH,GAAiBzH,UAAY,IAEzCY,YAAa,SAACkN,EAAUhN,GAClBA,GACF4G,GAAoB,MACpB/J,EAAWmD,MAAM,CACf8L,IAAK,2BACLlL,QAAS1E,GAAE,4BAGbgI,GAAsB,WACpBL,GACF,IACAhH,EAAWgP,KAAK,CACdC,IAAK,mBACLlL,QAAS1E,GAAE,0CAEb0K,GAAoB,MAExB,EACA3G,QAAS,SAACD,GACRnD,EAAWmD,MAAM,CACf8L,IAAK,2BACLlL,QAAS1E,GAAE,yBAEf,IAGF0K,GAAoB,KAExB,EACAnG,eAAgBoF,GAChB+G,SAAU,WACRhG,GAAoB,KACtB,EACA/F,gBAAc,EACduC,OAAQuD,GAAiBxL,UAEzBF,EAAAA,EAAAA,MAAC2O,EAAAA,EAAI,CACHC,UAAU,SACVC,MAAM,UACNI,IAAI,KACJH,MAAO,CACLkD,UAAWhH,GAAMiH,UACjB/R,SAAA,EAEFF,EAAAA,EAAAA,MAACkS,EAAAA,EAAWC,KAAI,CAAAjS,SAAA,EACdC,EAAAA,EAAAA,KAAC+R,EAAAA,EAAWC,KAAI,CAACC,MAAI,EAAAlS,SAAkB,OAAhBwL,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBzH,WAA4B,IACpEhD,GAAE,yCAELd,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAAAlB,UACHC,EAAAA,EAAAA,KAACiB,EAAAA,EAAK6E,KAAI,CACRE,KAAM,cAQNE,MAAO,CACL,CACED,UAAU,EACV3E,QAASR,GAAE,iCACXuF,UAAU,WAAD,IAAA6L,GAAAjP,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAgP,IAAA,OAAAjP,EAAAA,EAAAA,KAAAG,MAAA,SAAA+O,GAAA,cAAAA,EAAA7O,KAAA6O,EAAA5O,MAAA,UACLmI,MAAwC,OAAhBJ,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBzH,UAAQ,CAAAsO,EAAA5O,KAAA,eAAA4O,EAAA3O,OAAA,SAC7C+C,QAAQE,WAAS,cAAA0L,EAAA3O,OAAA,SAEnB+C,QAAQC,UAAQ,wBAAA2L,EAAArN,OAAA,GAAAoN,EAAA,KACxB,yBAAAD,EAAAlN,MAAA,KAAAC,UAAA,EALS,KAOZlF,UAEFC,EAAAA,EAAAA,KAAC2G,EAAAA,EAAK,CACJ0L,aAAa,MACb/L,MAAOqF,GACPrE,SAAU,SAACC,GAAC,OAAKqE,GAAuBrE,EAAEC,OAAOlB,MAAM,eAQvE,C,+BCzcA,IAAMgM,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,YAEV,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,UAGZC,EAAK,CACH,CACE,MAAS,KACT,KAAQ,CACN,CACE,KAAQ,WACR,KAAQ,WACR,aAAgB,YAElB,CACE,KAAQ,WACR,KAAQ,QACR,aAAgB,UAGpB,aAAgB,0BAChB,KAAQ,cACR,KAAQ,4BACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,oBAChB,KAAQ,cACR,KAAQ,qBACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,WACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,0BAChB,KAAQ,cACR,KAAQ,SACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,MACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,UACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,WACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,OAGlB,WAAc,OAGlB,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAwBD,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,6CACR,WAAeC,EACf,KAAQ,YACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBD,EACxB,KAAQ,YACR,KAAQ,6CACR,WAAeC,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,6CACR,cAAiB,WACjB,KAAQ,+WAGZ,CAtI+B,GAwI9BF,EAAaG,KAAO,mCAErB,W,+BCxJA,IAAMH,EAAuB,CAC3B,oBAAuB,GACvB,KAAQ,WACR,SAAY,KACZ,KAAQ,uCACR,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,WACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,0BAChB,KAAQ,cACR,KAAQ,SACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,MACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,UACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,WACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,OAGlB,WAAc,OAGlB,KAAQ,oBACR,YAAe,KAGhBA,KAAoB,oCAErB,W,+BC3DA,IAAMA,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,YAEV,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,UAGZC,EAAK,CACH,CACE,MAAS,KACT,KAAQ,CACN,CACE,KAAQ,WACR,KAAQ,WACR,aAAgB,YAElB,CACE,KAAQ,WACR,KAAQ,QACR,aAAgB,UAGpB,aAAgB,0BAChB,KAAQ,cACR,KAAQ,4BACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,oBAChB,KAAQ,cACR,KAAQ,qBACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,WACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,0BAChB,KAAQ,cACR,KAAQ,SACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,MACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,UACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,WACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,OAGlB,WAAc,OAGlB,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAwBD,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,6CACR,WAAeC,EACf,KAAQ,YACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBD,EACxB,KAAQ,YACR,KAAQ,6CACR,WAAeC,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,6CACR,cAAiB,WACjB,KAAQ,+WAGZ,CAtI+B,GAwI9BF,EAAaG,KAAO,mCAErB,W,+BC3JA,IAAMH,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,aAGZC,EAAK,CACH,CACE,MAAS,KACT,KAAQ,CACN,CACE,KAAQ,WACR,KAAQ,WACR,aAAgB,aAGpB,aAAgB,0BAChB,KAAQ,cACR,KAAQ,4BACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,oBAChB,KAAQ,cACR,KAAQ,qBACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,OAGlB,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAwBD,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,sCACR,WAAeC,EACf,KAAQ,YACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBD,EACxB,KAAQ,YACR,KAAQ,sCACR,WAAeC,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,sCACR,cAAiB,WACjB,KAAQ,qLAGZ,CAvE+B,GAyE9BF,EAAaG,KAAO,mCAErB,W,+BC5EA,IAAMH,EAAyB,WAC/B,IAAIC,EAAK,CACP,aAAgB,KAChB,KAAQ,gBACR,KAAQ,6BAEVC,EAAK,CACH,aAAgB,KAChB,KAAQ,gBACR,KAAQ,UAEVE,EAAK,CACH,CACE,MAAS,KACT,KAAQ,CACN,CACE,KAAQ,WACR,KAAQ,OACR,aAAgB,UAElB,CACE,OAAU,CACR,CACE,KAAQ,WACR,KAAQ,4BACR,aAAgB,8BAGpB,KAAQ,cACR,KAAQ,UAGZ,aAAgB,eAChB,KAAQ,cACR,KAAQ,gBACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAuB,CACpBH,EACAC,GAEH,KAAQ,WACR,SAAY,KACZ,KAAQ,sCACR,WAAeE,EACf,KAAQ,YACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAuB,CACpBF,EACAD,GAEH,KAAQ,YACR,KAAQ,sCACR,WAAeG,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,sCACR,cAAiB,WACjB,KAAQ,uOAGZ,CAhF+B,GAkF9BJ,EAAaG,KAAO,mCAErB,W,+BCvEA,IAAMH,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,WAGZC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhBE,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,WACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,aAAgB,0BAChB,KAAQ,cACR,KAAQ,SACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,MACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,UACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,WACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,OAGlB,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,CACN,CACE,KAAQ,WACR,KAAQ,OACR,aAAgB,WAGpB,aAAgB,SAChB,KAAQ,cACR,KAAQ,SACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,4BACR,WAAc,OAGlB,WAAc,MAEhB,MAAO,CACL,SAAY,CACV,oBAAwBL,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,6BACR,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,oBAChB,KAAQ,cACR,KAAQ,uBACR,QAAU,EACV,WAAc,CACZ,CACE,KAAQ,KACR,KAAQ,iBACR,KAAQ,wCAETC,EACAE,EACAC,GAEH,WAAc,MAEfC,GAEH,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBL,EACxB,KAAQ,YACR,KAAQ,6BACR,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,oBAChB,KAAQ,cACR,KAAQ,uBACR,QAAU,EACV,WAAc,CACXC,EACAE,EACAC,GAEH,WAAc,MAEfC,IAGL,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,6BACR,cAAiB,QACjB,KAAQ,ufAGZ,CAlK+B,GAoK9BN,EAAaG,KAAO,mCAErB,W","sources":["components/BAIModal.tsx","hooks/usePainKiller.tsx","components/ContainerRegistryEditorModal.tsx","components/ContainerRegistryList.tsx","components/__generated__/ContainerRegistryEditorModalCreateMutation.graphql.ts","components/__generated__/ContainerRegistryEditorModalFragment.graphql.ts","components/__generated__/ContainerRegistryEditorModalModifyMutation.graphql.ts","components/__generated__/ContainerRegistryListDeleteMutation.graphql.ts","components/__generated__/ContainerRegistryListDomainMutation.graphql.ts","components/__generated__/ContainerRegistryListQuery.graphql.ts"],"sourcesContent":["// @ts-ignore\nimport rawBAIModalCss from './BAIModal.css?raw';\nimport { Modal, ModalProps } from 'antd';\nimport React from 'react';\n\nexport interface BAIModalProps extends ModalProps {\n  okText?: string; // customize text of ok button with adequate content\n}\nconst BAIModal: React.FC<BAIModalProps> = ({ ...modalProps }) => {\n  return (\n    <>\n      <style>{rawBAIModalCss}</style>\n      <Modal\n        centered={modalProps.centered ?? true}\n        className=\"bai-modal\"\n        {...modalProps}\n      />\n    </>\n  );\n};\n\nexport default BAIModal;\n","import { useTranslation } from 'react-i18next';\n\nconst errorMessageTable: {\n  [key: string]: string;\n} = {\n  \"Cannot read property 'map' of null\": 'error.APINotSupported',\n  'TypeError: NetworkError when attempting to fetch resource.':\n    'error.NetworkConnectionFailed', //_t('error.NetworkConnectionFailed')\n  // Login\n  'Login failed. Check login information.': 'error.LoginFailed', //_t('error.LoginFailed')\n  'User credential mismatch.': 'error.LoginFailed', //_t('error.LoginFailed')\n  'Authentication failed. Check information and manager status.':\n    'error.AuthenticationFailed', //_t('error.AuthenticationFailed')\n  'Too many failed login attempts': 'error.TooManyLoginFailures', //_t('error.TooManyLoginFailures')\n  // virtual folders\n  'server responded failure: 400 Bad Request - The virtual folder already exists with the same name.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  '400 Bad Request - The virtual folder already exists with the same name.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  'server responded failure: 400 Bad Request - One of your accessible vfolders already has the name you requested.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  'server responded failure: 400 Bad Request - You cannot create more vfolders.':\n    'error.MaximumVfolderCreation', //_t('error.MaximumVfolderCreation')\n  'server responded failure: 400 Bad Request - Missing or invalid API parameters. (You cannot create more vfolders.)':\n    'error.MaximumVfolderCreation', //_t('error.MaximumVfolderCreation')\n  'server responded failure: 400 Bad Request - Cannot change the options of a vfolder that is not owned by myself.':\n    'error.CannotChangeVirtualFolderOption', //_t('error.CannotChangeVirtualFolderOption')\n  'server responded failure: 403 Forbidden - Cannot share private dot-prefixed vfolders.':\n    'error.CannotSharePrivateAutomountFolder', //_t('error.CannotSharePrivateAutomountFolder')\n  'server responded failure: 404 Not Found - No such vfolder invitation.':\n    'error.FolderSharingNotAvailableToUser', //_t('error.FolderSharingNotAvailableToUser')\n  'server responded failure: 404 Not Found - No such user.':\n    'error.FolderSharingNotAvailableToUser', //_t('error.FolderSharingNotAvailableToUser')\n  // Resource\n  'server responded failure: 412 Precondition Failed - You have reached your resource limit.':\n    'error.ReachedResourceLimit', //_t('error.ReachedResourceLimit')\n  // User\n  \"Cannot read property 'split' of undefined\": 'error.UserHasNoGroup', //_t('error.UserHasNoGroup')\n};\nconst regexTable: {\n  [key: string]: string;\n} = {\n  '\\\\w*not found matched token with email\\\\w*': 'error.InvalidSignupToken', //_t('error.InvalidSignupToken')\n  '\\\\w*Access key not found\\\\w*': 'error.LoginInformationMismatch', //_t('error.LoginInformationMismatch')\n  '\\\\w*401 Unauthorized - Credential/signature mismatch\\\\w*':\n    'error.LoginInformationMismatch', //_t('error.LoginInformationMismatch')\n  'integrity error: duplicate key value violates unique constraint \"pk_resource_presets\"[\\\\n]DETAIL:  Key \\\\(name\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.ResourcePolicyAlreadyExist', //_t('error.ResourcePolicyAlreadyExist')\n  'integrity error: duplicate key value violates unique constraint \"pk_scaling_groups\"[\\\\n]DETAIL:  Key \\\\(name\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.ScalingGroupAlreadyExist', //_t('error.ScalingGroupAlreadyExist')\n  'integrity error: duplicate key value violates unique constraint \"uq_users_username\"[\\\\n]DETAIL:  Key \\\\(username\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.UserNameAlreadyExist', //_t('error.UserNameAlreadyExist')\n  'server responded failure: 400 Bad Request - Missing or invalid API parameters. (Your resource quota is exceeded. (cpu=24 mem=512g cuda.shares=80))':\n    'error.ResourceLimitExceed', //_t('error.ResourceLimitExceed')\n  '\\\\w*Key \\\\(name\\\\)=\\\\(.+\\\\) is still referenced from table \"keypairs\"\\\\.\\\\w*':\n    'error.ResourcePolicyStillReferenced', //_t('error.ResourcePolicyStillReferenced')\n  'Your resource request is smaller than the minimum required by the image. (\\\\w*)':\n    'error.SmallerResourceThenImageRequires', //_t('error.SmallerResourceThenImageRequires')\n};\n\nexport const usePainKiller = () => {\n  const { t } = useTranslation();\n  const relieve = (msg: string) => {\n    if (typeof msg === 'undefined') {\n      if (\n        // @ts-ignore\n        globalThis.backendaiclient === undefined ||\n        // @ts-ignore\n        globalThis.backendaiclient === null\n      ) {\n        return '_DISCONNECTED';\n      } else {\n        return 'Problem occurred.';\n      }\n    }\n    // @ts-ignore\n    if (globalThis.backendaiwebui.debug === true) {\n      return msg;\n    }\n    if ({}.hasOwnProperty.call(errorMessageTable, msg)) {\n      return t(errorMessageTable[msg]);\n    } else {\n      for (const regex of Object.keys(regexTable)) {\n        if (RegExp(regex).test(msg)) {\n          return t(regexTable[regex]);\n        }\n      }\n      return msg; // Bypass message. It will log on log panel\n    }\n  };\n  return { relieve };\n};\n","import BAIModal, { BAIModalProps } from './BAIModal';\nimport { ContainerRegistryEditorModalCreateMutation } from './__generated__/ContainerRegistryEditorModalCreateMutation.graphql';\nimport { ContainerRegistryEditorModalFragment$key } from './__generated__/ContainerRegistryEditorModalFragment.graphql';\nimport { ContainerRegistryEditorModalModifyMutation } from './__generated__/ContainerRegistryEditorModalModifyMutation.graphql';\nimport { message, Form, Input, Select, Modal, Checkbox } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment, useMutation } from 'react-relay';\n\ninterface ContainerRegistryEditorModalProps\n  extends Omit<BAIModalProps, 'onOk'> {\n  existingHostnames?: string[];\n  onOk: (type: 'create' | 'modify') => void;\n  containerRegistryFrgmt?: ContainerRegistryEditorModalFragment$key | null;\n}\nconst ContainerRegistryEditorModal: React.FC<\n  ContainerRegistryEditorModalProps\n> = ({\n  existingHostnames,\n  containerRegistryFrgmt = null,\n  onOk,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n\n  const [messageAPI, contextHolder] = message.useMessage();\n  const [modal, modalContextHolder] = Modal.useModal();\n\n  const containerRegistry = useFragment(\n    graphql`\n      fragment ContainerRegistryEditorModalFragment on ContainerRegistry {\n        id\n        hostname\n        config {\n          url\n          type\n          project\n          username\n          ssl_verify\n        }\n      }\n    `,\n    containerRegistryFrgmt,\n  );\n  const [commitCreateRegistry, isInflightCreateRegistry] =\n    useMutation<ContainerRegistryEditorModalCreateMutation>(graphql`\n      mutation ContainerRegistryEditorModalCreateMutation(\n        $hostname: String!\n        $props: CreateContainerRegistryInput!\n      ) {\n        create_container_registry(hostname: $hostname, props: $props) {\n          container_registry {\n            id\n            hostname\n            config {\n              url\n              type\n              project\n              username\n              ssl_verify\n            }\n          }\n        }\n      }\n    `);\n\n  const [commitModifyRegistry, isInflightModifyRegistry] =\n    useMutation<ContainerRegistryEditorModalModifyMutation>(graphql`\n      mutation ContainerRegistryEditorModalModifyMutation(\n        $hostname: String!\n        $props: ModifyContainerRegistryInput!\n      ) {\n        modify_container_registry(hostname: $hostname, props: $props) {\n          container_registry {\n            id\n            hostname\n            config {\n              url\n              type\n              project\n              username\n              ssl_verify\n            }\n          }\n        }\n      }\n    `);\n\n  const handleSave = async () => {\n    return form\n      .validateFields()\n      .then((values) => {\n        const mutationVariables = {\n          hostname: values.hostname,\n          props: {\n            url: values.config.url,\n            type: values.config.type,\n            project:\n              values.config.project === 'docker'\n                ? undefined\n                : values.config.project,\n            username: _.isEmpty(values.config.username)\n              ? null\n              : values.config.username,\n            password: _.isEmpty(values.config.password)\n              ? null\n              : values.config.password,\n          },\n        };\n        if (containerRegistry) {\n          if (!values.isChangedPassword) {\n            delete mutationVariables.props.password;\n          }\n          commitModifyRegistry({\n            variables: mutationVariables,\n            onCompleted: (res, error) => {\n              if (error) {\n                messageAPI.error(t('dialog.ErrorOccurred'));\n              } else {\n                onOk && onOk('modify');\n              }\n            },\n            onError: (error) => {\n              messageAPI.error(t('dialog.ErrorOccurred'));\n            },\n          });\n        } else {\n          commitCreateRegistry({\n            variables: mutationVariables,\n            onCompleted: (res, error) => {\n              if (error) {\n                messageAPI.error(t('dialog.ErrorOccurred'));\n              } else {\n                onOk && onOk('create');\n              }\n            },\n            onError(error) {\n              messageAPI.error(t('dialog.ErrorOccurred'));\n            },\n          });\n        }\n      })\n      .catch((error) => {});\n  };\n  return (\n    <BAIModal\n      title={\n        containerRegistry\n          ? t('registry.ModifyRegistry')\n          : t('registry.AddRegistry')\n      }\n      okText={containerRegistry ? t('button.Save') : t('button.Add')}\n      confirmLoading={isInflightCreateRegistry || isInflightModifyRegistry}\n      onOk={() => {\n        form\n          .validateFields()\n          .then((values) => {\n            if (_.includes(values.config?.type, 'harbor')) {\n              modal.confirm({\n                title: t('button.Confirm'),\n                content: t('registry.ConfirmNoUserName'),\n                onOk: () => {\n                  handleSave();\n                },\n              });\n            } else {\n              handleSave();\n            }\n          })\n          .catch(() => {});\n      }}\n      {...modalProps}\n      destroyOnClose\n    >\n      {contextHolder}\n      {modalContextHolder}\n      <Form\n        form={form}\n        layout=\"vertical\"\n        requiredMark=\"optional\"\n        initialValues={\n          containerRegistry\n            ? {\n                ...containerRegistry,\n                config: {\n                  ...containerRegistry.config,\n                  project: containerRegistry.config?.project || undefined,\n                },\n              }\n            : {\n                config: {\n                  type: 'docker',\n                },\n              }\n        }\n        preserve={false}\n      >\n        <Form.Item\n          label={t('registry.Hostname')}\n          name=\"hostname\"\n          required\n          rules={[\n            {\n              required: true,\n              message: t('registry.DescHostnameIsEmpty'),\n              pattern: new RegExp('^.+$'),\n            },\n            {\n              validator: (_, value) => {\n                if (!containerRegistry && existingHostnames?.includes(value)) {\n                  return Promise.reject(\n                    t('registry.RegistryHostnameAlreadyExists'),\n                  );\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input\n            disabled={!!containerRegistry}\n            // placeholder={t('registry.Hostname')}\n            value={containerRegistry?.hostname || undefined}\n          />\n        </Form.Item>\n        <Form.Item\n          name={['config', 'url']}\n          label={t('registry.RegistryURL')}\n          required\n          rules={[\n            {\n              required: true,\n            },\n            {\n              type: 'url',\n            },\n            {\n              validator: (_, value) => {\n                if (\n                  value &&\n                  !value.startsWith('http://') &&\n                  !value.startsWith('https://')\n                ) {\n                  return Promise.reject(t('registry.DescURLStartString'));\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          noStyle\n          shouldUpdate={(prev, next) =>\n            _.isEmpty(prev.config?.password) !==\n            _.isEmpty(next.config?.password)\n          }\n        >\n          {() => {\n            form.validateFields([['config', 'username']]);\n            return (\n              <Form.Item\n                name={['config', 'username']}\n                label={t('registry.Username')}\n                rules={[\n                  {\n                    required: !_.isEmpty(\n                      form.getFieldValue(['config', 'password']),\n                    ),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            );\n          }}\n        </Form.Item>\n\n        <Form.Item label={t('registry.Password')}>\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.isChangedPassword !== next.isChangedPassword\n            }\n          >\n            {() => (\n              <Form.Item noStyle name={['config', 'password']}>\n                <Input.Password\n                  disabled={\n                    !_.isEmpty(containerRegistry) &&\n                    !form.getFieldValue('isChangedPassword')\n                  }\n                />\n              </Form.Item>\n            )}\n          </Form.Item>\n          {!_.isEmpty(containerRegistry) && (\n            <Form.Item noStyle name=\"isChangedPassword\" valuePropName=\"checked\">\n              <Checkbox\n                onChange={(e) => {\n                  if (!e.target.checked) {\n                    form.setFieldValue(['config', 'password'], '');\n                  }\n                }}\n              >\n                {t('webui.menu.ChangePassword')}\n              </Checkbox>\n            </Form.Item>\n          )}\n        </Form.Item>\n        <Form.Item\n          name={['config', 'type']}\n          label={t('registry.RegistryType')}\n          required\n          rules={[\n            {\n              required: true,\n              message: t('registry.PleaseSelectOption'),\n            },\n          ]}\n        >\n          <Select\n            options={[\n              {\n                value: 'docker',\n              },\n              {\n                value: 'harbor',\n              },\n              {\n                value: 'harbor2',\n              },\n            ]}\n            onChange={() => {\n              // form.validateFields();\n            }}\n          ></Select>\n        </Form.Item>\n        <Form.Item\n          shouldUpdate={(prev, next) =>\n            prev?.config?.type !== next?.config?.type\n          }\n          noStyle\n        >\n          {() => {\n            return (\n              form.getFieldValue(['config', 'type']) !== 'docker' && (\n                <Form.Item\n                  name={['config', 'project']}\n                  label={t('registry.ProjectName')}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                      message: t('registry.ProjectNameIsRequired'),\n                    },\n                  ]}\n                >\n                  {/* <Input\n                  // disabled={\n                  //   form.getFieldValue(['config', 'type']) === 'docker'\n                  // }\n                  /> */}\n                  <Select\n                    mode=\"tags\"\n                    open={false}\n                    tokenSeparators={[',', ' ']}\n                    suffixIcon={null}\n                  />\n                </Form.Item>\n              )\n            );\n          }}\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default ContainerRegistryEditorModal;\n","import { filterNonNullItems } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { usePainKiller } from '../hooks/usePainKiller';\nimport BAIModal from './BAIModal';\nimport ContainerRegistryEditorModal from './ContainerRegistryEditorModal';\nimport Flex from './Flex';\nimport { ContainerRegistryListDeleteMutation } from './__generated__/ContainerRegistryListDeleteMutation.graphql';\nimport { ContainerRegistryListDomainMutation } from './__generated__/ContainerRegistryListDomainMutation.graphql';\nimport {\n  ContainerRegistryListQuery,\n  ContainerRegistryListQuery$data,\n} from './__generated__/ContainerRegistryListQuery.graphql';\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  PlusOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n  SyncOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Form,\n  Input,\n  Switch,\n  Table,\n  Tag,\n  Tooltip,\n  Typography,\n  theme,\n  message,\n} from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useState, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery, useMutation } from 'react-relay';\n\nexport type ContainerRegistry = NonNullable<\n  NonNullable<\n    NonNullable<ContainerRegistryListQuery$data>['container_registries']\n  >\n>[0];\n\nconst ContainerRegistryList = () => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [fetchKey, updateFetchKey] = useUpdatableState('initial-fetch');\n  const [isPendingReload, startReloadTransition] = useTransition();\n  const painKiller = usePainKiller();\n  const [messageAPI, contextHolder] = message.useMessage();\n  const { container_registries, domain } =\n    useLazyLoadQuery<ContainerRegistryListQuery>(\n      graphql`\n        query ContainerRegistryListQuery($domain: String!) {\n          container_registries {\n            ...ContainerRegistryEditorModalFragment\n            id\n            hostname\n            config {\n              url\n              type\n              project\n              username\n              ssl_verify\n            }\n          }\n          domain(name: $domain) {\n            name\n            allowed_docker_registries\n          }\n        }\n      `,\n      {\n        domain: baiClient._config.domainName,\n      },\n      {\n        fetchPolicy: 'network-only',\n        fetchKey,\n      },\n    );\n\n  const [commitDeleteMutation, isInFlightDeleteMutation] =\n    useMutation<ContainerRegistryListDeleteMutation>(graphql`\n      mutation ContainerRegistryListDeleteMutation($hostname: String!) {\n        delete_container_registry(hostname: $hostname) {\n          container_registry {\n            id\n          }\n        }\n      }\n    `);\n\n  const [commitDomainMutation, isInFlightDomationMutation] =\n    useMutation<ContainerRegistryListDomainMutation>(graphql`\n      mutation ContainerRegistryListDomainMutation(\n        $domain: String!\n        $allowed_docker_registries: [String]!\n      ) {\n        modify_domain(\n          name: $domain\n          props: { allowed_docker_registries: $allowed_docker_registries }\n        ) {\n          ok\n          # TODO: update domain when it supports relay global id\n          # domain {\n          #   name\n          #   allowed_vfolder_hosts\n          # }\n        }\n      }\n    `);\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [editingRegistry, setEditingRegistry] =\n    useState<ContainerRegistry>(null);\n  const [deletingRegistry, setDeletingRegistry] =\n    useState<ContainerRegistry>(null);\n  const [deletingConfirmText, setDeletingConfirmText] = useState('');\n  const [isNewModalOpen, setIsNewModalOpen] = useState(false);\n\n  const [inFlightHostName, setInFlightHostName] = useState<string>();\n\n  // const deferredInFlightDomainName = useDeferredValue(inFlightDomainName);\n\n  const rescanImage = async (hostname: string) => {\n    const indicator: any =\n      // @ts-ignore\n      await globalThis.lablupIndicator.start('indeterminate');\n    const handleReScanError = (err: any) => {\n      console.log(err);\n      indicator.set(50, t('registry.RescanFailed'));\n      indicator.end(1000);\n      if (err && err.message) {\n        // @ts-ignore\n        globalThis.lablupNotification.text = painKiller.relieve(err.title);\n        // @ts-ignore\n        globalThis.lablupNotification.detail = err.message;\n        // @ts-ignore\n        globalThis.lablupNotification.show(true, err);\n      }\n    };\n    indicator.set(10, t('registry.UpdatingRegistryInfo'));\n    baiClient.maintenance\n      .rescan_images(hostname)\n      .then(({ rescan_images }: any) => {\n        if (rescan_images.ok) {\n          indicator.set(0, t('registry.RescanImages'));\n          const sse: EventSource = baiClient.maintenance.attach_background_task(\n            rescan_images.task_id,\n          );\n          sse.addEventListener('bgtask_updated', (e) => {\n            const data = JSON.parse(e['data']);\n            const ratio = data.current_progress / data.total_progress;\n            indicator.set(100 * ratio, t('registry.RescanImages'));\n          });\n          sse.addEventListener('bgtask_done', () => {\n            const event = new CustomEvent('image-rescanned');\n            document.dispatchEvent(event);\n            indicator.set(100, t('registry.RegistryUpdateFinished'));\n            sse.close();\n          });\n          sse.addEventListener('bgtask_failed', (e) => {\n            console.log('bgtask_failed', e['data']);\n            sse.close();\n            handleReScanError(\n              new Error('Background Image scanning task has failed'),\n            );\n          });\n          sse.addEventListener('bgtask_cancelled', () => {\n            sse.close();\n            handleReScanError(\n              new Error('Background Image scanning task has been cancelled'),\n            );\n          });\n        } else {\n          indicator.set(50, t('registry.RegistryUpdateFailed'));\n          indicator.end(1000);\n\n          // TODO: handle notification in react side\n          // @ts-ignore\n          globalThis.lablupNotification.text = painKiller.relieve(\n            rescan_images.msg,\n          );\n          // @ts-ignore\n          globalThis.lablupNotification.detail = rescan_images.msg;\n          // @ts-ignore\n          globalThis.lablupNotification.show();\n        }\n      })\n      .catch(handleReScanError);\n  };\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        flex: 1,\n        // height: 'calc(100vh - 183px)',\n      }}\n    >\n      {contextHolder}\n      <Flex\n        direction=\"row\"\n        justify=\"end\"\n        gap={'sm'}\n        style={{ padding: token.paddingSM }}\n      >\n        <Button\n          type=\"primary\"\n          icon={<PlusOutlined />}\n          onClick={() => {\n            setIsNewModalOpen(true);\n          }}\n        >\n          {t('registry.AddRegistry')}\n        </Button>\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingReload}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startReloadTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n      </Flex>\n      <Table\n        scroll={{ x: 'max-content' }}\n        pagination={false}\n        columns={[\n          // {\n          //   title: '#',\n          //   dataIndex: 'id',\n          // },\n          {\n            title: t('registry.Hostname'),\n            dataIndex: 'hostname',\n            // fixed: 'left',\n          },\n          {\n            title: t('registry.RegistryURL'),\n            dataIndex: ['config', 'url'],\n          },\n          {\n            title: t('registry.Type'),\n            dataIndex: ['config', 'type'],\n          },\n          {\n            title: t('registry.HarborProject'),\n            render: (value, record) => {\n              return _.map(record.config?.project, (prjName) => {\n                return <Tag key={prjName}>{prjName || ''}</Tag>;\n              });\n            },\n          },\n          {\n            title: t('registry.Username'),\n            dataIndex: ['config', 'username'],\n          },\n          // {\n          // title: t('registry.Password')\n          // },\n          {\n            title: t('general.Enabled'),\n            render: (value, record) => {\n              const isEnabled = _.includes(\n                domain?.allowed_docker_registries,\n                record.hostname,\n              );\n              return (\n                <Switch\n                  checked={\n                    inFlightHostName === record.hostname + fetchKey\n                      ? !isEnabled\n                      : isEnabled\n                  }\n                  disabled={isPendingReload || isInFlightDomationMutation}\n                  loading={inFlightHostName === record.hostname + fetchKey}\n                  onChange={(isOn) => {\n                    if (!_.isString(record.hostname)) return;\n                    let newAllowedDockerRegistries = _.clone(\n                      domain?.allowed_docker_registries || [],\n                    ) as string[];\n                    if (isOn) {\n                      newAllowedDockerRegistries.push(record.hostname);\n                    } else {\n                      newAllowedDockerRegistries = _.without(\n                        newAllowedDockerRegistries,\n                        record.hostname,\n                      );\n                    }\n\n                    setInFlightHostName(record.hostname + fetchKey);\n                    commitDomainMutation({\n                      variables: {\n                        domain: baiClient._config.domainName,\n                        allowed_docker_registries: newAllowedDockerRegistries,\n                      },\n                      onCompleted: (data) => {\n                        startReloadTransition(() => {\n                          updateFetchKey();\n                        });\n\n                        messageAPI.info({\n                          key: 'registry-enabled',\n                          content: isOn\n                            ? t('registry.RegistryTurnedOn')\n                            : t('registry.RegistryTurnedOff'),\n                        });\n                      },\n                    });\n                  }}\n                />\n                // <Button type=\"primary\">\n                //   {record?.config?.ssl_verify ? 'Yes' : 'No'}\n                // </Button>\n              );\n            },\n          },\n          {\n            title: t('general.Control'),\n            fixed: 'right',\n            render(value, record, index) {\n              return (\n                <Flex>\n                  <Tooltip title={t('button.Edit')}>\n                    <Button\n                      size=\"large\"\n                      style={{\n                        color: token.colorInfo,\n                      }}\n                      type=\"text\"\n                      icon={<SettingOutlined />}\n                      onClick={() => {\n                        setEditingRegistry(record);\n                      }}\n                    />\n                  </Tooltip>\n                  <Tooltip title={t('button.Delete')}>\n                    <Button\n                      size=\"large\"\n                      danger\n                      type=\"text\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => {\n                        setDeletingRegistry(record);\n                      }}\n                    />\n                  </Tooltip>\n                  <Tooltip title={t('maintenance.RescanImages')}>\n                    <Button\n                      size=\"large\"\n                      type=\"text\"\n                      icon={\n                        <SyncOutlined\n                          onClick={() => {\n                            record.hostname && rescanImage(record.hostname);\n                          }}\n                        />\n                      }\n                    />\n                  </Tooltip>\n                </Flex>\n              );\n            },\n          },\n        ]}\n        dataSource={filterNonNullItems(container_registries)}\n      />\n      <ContainerRegistryEditorModal\n        containerRegistryFrgmt={editingRegistry}\n        existingHostnames={_.map(\n          container_registries,\n          (r) => r?.hostname || '',\n        )}\n        open={!!editingRegistry || isNewModalOpen}\n        onOk={(type) => {\n          if (type === 'create') {\n            updateFetchKey();\n            messageAPI.info(t('registry.RegistrySuccessfullyAdded'));\n          } else if (type === 'modify') {\n            messageAPI.info(t('registry.RegistrySuccessfullyModified'));\n          }\n          setEditingRegistry(null);\n          setIsNewModalOpen(false);\n        }}\n        onCancel={() => {\n          setEditingRegistry(null);\n          setIsNewModalOpen(false);\n        }}\n        centered={false}\n      />\n      <BAIModal\n        title={\n          <>\n            <ExclamationCircleOutlined\n              style={{\n                color: token.colorWarning,\n              }}\n            />{' '}\n            {t('dialog.warning.CannotBeUndone')}\n          </>\n        }\n        okText={t('button.Delete')}\n        okButtonProps={{\n          danger: true,\n          disabled: deletingConfirmText !== deletingRegistry?.hostname,\n        }}\n        onOk={() => {\n          if (deletingRegistry) {\n            commitDeleteMutation({\n              variables: {\n                hostname: deletingRegistry.hostname || '',\n              },\n              onCompleted: (response, error) => {\n                if (error) {\n                  setDeletingRegistry(null);\n                  messageAPI.error({\n                    key: 'registry-deletion-failed',\n                    content: t('dialog.ErrorOccurred'),\n                  });\n                } else {\n                  startReloadTransition(() => {\n                    updateFetchKey();\n                  });\n                  messageAPI.info({\n                    key: 'registry-deleted',\n                    content: t('registry.RegistrySuccessfullyDeleted'),\n                  });\n                  setDeletingRegistry(null);\n                }\n              },\n              onError: (error) => {\n                messageAPI.error({\n                  key: 'registry-deletion-failed',\n                  content: t('dialog.ErrorOccurred'),\n                });\n              },\n            });\n          } else {\n            setDeletingRegistry(null);\n          }\n        }}\n        confirmLoading={isInFlightDeleteMutation}\n        onCancel={() => {\n          setDeletingRegistry(null);\n        }}\n        destroyOnClose\n        open={!!deletingRegistry}\n      >\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          gap=\"sm\"\n          style={{\n            marginTop: token.marginMD,\n          }}\n        >\n          <Typography.Text>\n            <Typography.Text code>{deletingRegistry?.hostname}</Typography.Text>{' '}\n            {t('registry.TypeRegistryNameToDelete')}\n          </Typography.Text>\n          <Form>\n            <Form.Item\n              name={'confirmText'}\n              // help=\"asdf\"\n              // validateStatus={\n              //   deletingConfirmText &&\n              //   deletingConfirmText !== deletingRegistry?.hostname\n              //     ? 'error'\n              //     : undefined\n              // }\n              rules={[\n                {\n                  required: true,\n                  message: t('registry.HostnameDoesNotMatch'),\n                  validator: async () => {\n                    if (deletingConfirmText === deletingRegistry?.hostname) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject();\n                  },\n                },\n              ]}\n            >\n              <Input\n                autoComplete=\"off\"\n                value={deletingConfirmText}\n                onChange={(e) => setDeletingConfirmText(e.target.value)}\n              />\n            </Form.Item>\n          </Form>\n        </Flex>\n      </BAIModal>\n    </Flex>\n  );\n};\n\nexport default ContainerRegistryList;\n","/**\n * @generated SignedSource<<3cba55aeb025952aae206fabc73fa061>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type CreateContainerRegistryInput = {\n  password?: string | null;\n  project?: ReadonlyArray<string | null> | null;\n  ssl_verify?: boolean | null;\n  type: string;\n  url: string;\n  username?: string | null;\n};\nexport type ContainerRegistryEditorModalCreateMutation$variables = {\n  hostname: string;\n  props: CreateContainerRegistryInput;\n};\nexport type ContainerRegistryEditorModalCreateMutation$data = {\n  readonly create_container_registry: {\n    readonly container_registry: {\n      readonly config: {\n        readonly project: ReadonlyArray<string | null> | null;\n        readonly ssl_verify: boolean | null;\n        readonly type: string;\n        readonly url: string;\n        readonly username: string | null;\n      } | null;\n      readonly hostname: string | null;\n      readonly id: string;\n    } | null;\n  } | null;\n};\nexport type ContainerRegistryEditorModalCreateMutation = {\n  response: ContainerRegistryEditorModalCreateMutation$data;\n  variables: ContainerRegistryEditorModalCreateMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"hostname\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"props\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"hostname\",\n        \"variableName\": \"hostname\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"props\"\n      }\n    ],\n    \"concreteType\": \"CreateContainerRegistry\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"create_container_registry\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registry\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"hostname\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"url\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"type\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"project\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"username\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"ssl_verify\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryEditorModalCreateMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryEditorModalCreateMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"71eb4f6d2ce48050a7d19abf3bb9f9da\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryEditorModalCreateMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryEditorModalCreateMutation(\\n  $hostname: String!\\n  $props: CreateContainerRegistryInput!\\n) {\\n  create_container_registry(hostname: $hostname, props: $props) {\\n    container_registry {\\n      id\\n      hostname\\n      config {\\n        url\\n        type\\n        project\\n        username\\n        ssl_verify\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"0a6794341c4deff5983ce6efb35baf2a\";\n\nexport default node;\n","/**\n * @generated SignedSource<<da5f88cb0510adba64bff3a06549f145>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerRegistryEditorModalFragment$data = {\n  readonly config: {\n    readonly project: ReadonlyArray<string | null> | null;\n    readonly ssl_verify: boolean | null;\n    readonly type: string;\n    readonly url: string;\n    readonly username: string | null;\n  } | null;\n  readonly hostname: string | null;\n  readonly id: string;\n  readonly \" $fragmentType\": \"ContainerRegistryEditorModalFragment\";\n};\nexport type ContainerRegistryEditorModalFragment$key = {\n  readonly \" $data\"?: ContainerRegistryEditorModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerRegistryEditorModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerRegistryEditorModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"hostname\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"ContainerRegistryConfig\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"config\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"url\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"type\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"project\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"username\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"ssl_verify\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ContainerRegistry\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"57f748e00ec698f8b3e133570e377c71\";\n\nexport default node;\n","/**\n * @generated SignedSource<<32d8b5361cacbcea0258f29eab7706d3>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ModifyContainerRegistryInput = {\n  password?: string | null;\n  project?: ReadonlyArray<string | null> | null;\n  ssl_verify?: boolean | null;\n  type: string;\n  url: string;\n  username?: string | null;\n};\nexport type ContainerRegistryEditorModalModifyMutation$variables = {\n  hostname: string;\n  props: ModifyContainerRegistryInput;\n};\nexport type ContainerRegistryEditorModalModifyMutation$data = {\n  readonly modify_container_registry: {\n    readonly container_registry: {\n      readonly config: {\n        readonly project: ReadonlyArray<string | null> | null;\n        readonly ssl_verify: boolean | null;\n        readonly type: string;\n        readonly url: string;\n        readonly username: string | null;\n      } | null;\n      readonly hostname: string | null;\n      readonly id: string;\n    } | null;\n  } | null;\n};\nexport type ContainerRegistryEditorModalModifyMutation = {\n  response: ContainerRegistryEditorModalModifyMutation$data;\n  variables: ContainerRegistryEditorModalModifyMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"hostname\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"props\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"hostname\",\n        \"variableName\": \"hostname\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"props\"\n      }\n    ],\n    \"concreteType\": \"ModifyContainerRegistry\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_container_registry\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registry\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"hostname\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"url\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"type\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"project\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"username\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"ssl_verify\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryEditorModalModifyMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryEditorModalModifyMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"e1f68a7804271a8010e4c259aaab60da\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryEditorModalModifyMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryEditorModalModifyMutation(\\n  $hostname: String!\\n  $props: ModifyContainerRegistryInput!\\n) {\\n  modify_container_registry(hostname: $hostname, props: $props) {\\n    container_registry {\\n      id\\n      hostname\\n      config {\\n        url\\n        type\\n        project\\n        username\\n        ssl_verify\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d5fc2f9f64b4f514e35372dd822a3984\";\n\nexport default node;\n","/**\n * @generated SignedSource<<55d0f768ece6af02582233662ba64396>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ContainerRegistryListDeleteMutation$variables = {\n  hostname: string;\n};\nexport type ContainerRegistryListDeleteMutation$data = {\n  readonly delete_container_registry: {\n    readonly container_registry: {\n      readonly id: string;\n    } | null;\n  } | null;\n};\nexport type ContainerRegistryListDeleteMutation = {\n  response: ContainerRegistryListDeleteMutation$data;\n  variables: ContainerRegistryListDeleteMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"hostname\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"hostname\",\n        \"variableName\": \"hostname\"\n      }\n    ],\n    \"concreteType\": \"DeleteContainerRegistry\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"delete_container_registry\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registry\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryListDeleteMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryListDeleteMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"4482108b7e256e27225f91b432f0a856\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryListDeleteMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryListDeleteMutation(\\n  $hostname: String!\\n) {\\n  delete_container_registry(hostname: $hostname) {\\n    container_registry {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"131801c7f9561f645743bbbe4b464676\";\n\nexport default node;\n","/**\n * @generated SignedSource<<92bcd8c8585065616500e3e90ed713d0>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ContainerRegistryListDomainMutation$variables = {\n  allowed_docker_registries: ReadonlyArray<string | null>;\n  domain: string;\n};\nexport type ContainerRegistryListDomainMutation$data = {\n  readonly modify_domain: {\n    readonly ok: boolean | null;\n  } | null;\n};\nexport type ContainerRegistryListDomainMutation = {\n  response: ContainerRegistryListDomainMutation$data;\n  variables: ContainerRegistryListDomainMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"allowed_docker_registries\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"domain\"\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"domain\"\n      },\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"allowed_docker_registries\",\n            \"variableName\": \"allowed_docker_registries\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"props\"\n      }\n    ],\n    \"concreteType\": \"ModifyDomain\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_domain\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"ok\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryListDomainMutation\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v0/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryListDomainMutation\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"569e278934331792cc007f79e8e4c44c\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryListDomainMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryListDomainMutation(\\n  $domain: String!\\n  $allowed_docker_registries: [String]!\\n) {\\n  modify_domain(name: $domain, props: {allowed_docker_registries: $allowed_docker_registries}) {\\n    ok\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8730f4ae61e895ec64fb03e53998b97\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2d30d2674ab0c40e5d8592e53fbcc2c7>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerRegistryListQuery$variables = {\n  domain: string;\n};\nexport type ContainerRegistryListQuery$data = {\n  readonly container_registries: ReadonlyArray<{\n    readonly config: {\n      readonly project: ReadonlyArray<string | null> | null;\n      readonly ssl_verify: boolean | null;\n      readonly type: string;\n      readonly url: string;\n      readonly username: string | null;\n    } | null;\n    readonly hostname: string | null;\n    readonly id: string;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerRegistryEditorModalFragment\">;\n  } | null> | null;\n  readonly domain: {\n    readonly allowed_docker_registries: ReadonlyArray<string | null> | null;\n    readonly name: string | null;\n  } | null;\n};\nexport type ContainerRegistryListQuery = {\n  response: ContainerRegistryListQuery$data;\n  variables: ContainerRegistryListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"domain\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"hostname\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"ContainerRegistryConfig\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"config\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"url\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"type\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"project\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"username\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"ssl_verify\",\n      \"storageKey\": null\n    }\n  ],\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": [\n    {\n      \"kind\": \"Variable\",\n      \"name\": \"name\",\n      \"variableName\": \"domain\"\n    }\n  ],\n  \"concreteType\": \"Domain\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"domain\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"allowed_docker_registries\",\n      \"storageKey\": null\n    }\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registries\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ContainerRegistryEditorModalFragment\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      (v4/*: any*/)\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registries\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      (v4/*: any*/)\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"390ac234b9972d0b182a22f8c4a566dc\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ContainerRegistryListQuery(\\n  $domain: String!\\n) {\\n  container_registries {\\n    ...ContainerRegistryEditorModalFragment\\n    id\\n    hostname\\n    config {\\n      url\\n      type\\n      project\\n      username\\n      ssl_verify\\n    }\\n  }\\n  domain(name: $domain) {\\n    name\\n    allowed_docker_registries\\n  }\\n}\\n\\nfragment ContainerRegistryEditorModalFragment on ContainerRegistry {\\n  id\\n  hostname\\n  config {\\n    url\\n    type\\n    project\\n    username\\n    ssl_verify\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9ccf11a92ee6cbf1e6ff82c3ebb3520f\";\n\nexport default node;\n"],"names":["_ref","_modalProps$centered","modalProps","Object","assign","_objectDestructuringEmpty","_jsxs","_Fragment","children","_jsx","Modal","_objectSpread","centered","className","errorMessageTable","regexTable","_containerRegistry$co","existingHostnames","_ref$containerRegistr","containerRegistryFrgmt","onOk","_objectWithoutProperties","_excluded","t","useTranslation","_Form$useForm","Form","useForm","form","_slicedToArray","_message$useMessage","message","useMessage","_message$useMessage2","messageAPI","contextHolder","_Modal$useModal","useModal","_Modal$useModal2","modal","modalContextHolder","containerRegistry","useFragment","_ContainerRegistryEditorModalFragment","require","_useMutation","useMutation","_ContainerRegistryEditorModalCreateMutation","_useMutation2","commitCreateRegistry","isInflightCreateRegistry","_useMutation3","_ContainerRegistryEditorModalModifyMutation","_useMutation4","commitModifyRegistry","isInflightModifyRegistry","handleSave","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","validateFields","then","values","mutationVariables","hostname","props","url","config","type","project","undefined","username","_","password","isChangedPassword","variables","onCompleted","res","error","onError","catch","stop","apply","arguments","BAIModal","title","okText","confirmLoading","_values$config","confirm","content","destroyOnClose","layout","requiredMark","initialValues","preserve","Item","label","name","required","rules","pattern","RegExp","validator","value","includes","Promise","reject","resolve","Input","disabled","startsWith","noStyle","shouldUpdate","_prev$config","_next$config","getFieldValue","Password","valuePropName","Checkbox","onChange","e","target","checked","setFieldValue","Select","options","_prev$config2","_next$config2","mode","open","tokenSeparators","suffixIcon","baiClient","useSuspendedBackendaiClient","_useUpdatableState","useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","_useTransition","useTransition","_useTransition2","isPendingReload","startReloadTransition","painKiller","relieve","msg","globalThis","backendaiclient","backendaiwebui","debug","hasOwnProperty","call","_i","_Object$keys","keys","length","regex","test","usePainKiller","_useLazyLoadQuery","useLazyLoadQuery","_ContainerRegistryListQuery","domain","_config","domainName","fetchPolicy","container_registries","_ContainerRegistryListDeleteMutation","commitDeleteMutation","isInFlightDeleteMutation","_ContainerRegistryListDomainMutation","commitDomainMutation","isInFlightDomationMutation","token","theme","useToken","_useState","useState","_useState2","editingRegistry","setEditingRegistry","_useState3","_useState4","deletingRegistry","setDeletingRegistry","_useState5","_useState6","deletingConfirmText","setDeletingConfirmText","_useState7","_useState8","isNewModalOpen","setIsNewModalOpen","_useState9","_useState10","inFlightHostName","setInFlightHostName","rescanImage","indicator","handleReScanError","lablupIndicator","start","sent","err","console","log","set","end","lablupNotification","text","detail","show","maintenance","rescan_images","ok","sse","attach_background_task","task_id","addEventListener","data","JSON","parse","ratio","current_progress","total_progress","event","CustomEvent","document","dispatchEvent","close","Error","_x","Flex","direction","align","style","flex","justify","gap","padding","paddingSM","Button","icon","PlusOutlined","onClick","Tooltip","loading","ReloadOutlined","Table","scroll","x","pagination","columns","dataIndex","render","record","_record$config","prjName","Tag","isEnabled","allowed_docker_registries","Switch","isOn","newAllowedDockerRegistries","push","info","key","fixed","index","size","color","colorInfo","SettingOutlined","danger","DeleteOutlined","SyncOutlined","dataSource","filterNonNullItems","ContainerRegistryEditorModal","r","onCancel","ExclamationCircleOutlined","colorWarning","okButtonProps","response","marginTop","marginMD","Typography","Text","code","_validator","_callee2","_context2","autoComplete","node","v0","v1","hash","v2","v3","v4"],"sourceRoot":""}