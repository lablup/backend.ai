{"version":3,"file":"static/js/7190.e3c9ca80.chunk.js","mappings":"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","sources":["components/__generated__/SessionMetricGraphQuery.graphql.ts","components/__generated__/UserSessionsMetricsQuery.graphql.ts","hooks/useUserUsageStats.ts","components/AllocationHistoryStatistics.tsx","components/AllocationHistory.tsx","components/SessionMetricGraph.tsx","components/UserSessionsMetrics.tsx","pages/StatisticsPage.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<537fb30f18c93429dd05854dd8dfc71e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type UserUtilizationMetricQueryInput = {\n  end: string;\n  metric_name: string;\n  start: string;\n  step: string;\n  value_type?: string | null | undefined;\n};\nexport type SessionMetricGraphQuery$variables = {\n  capacityProps: UserUtilizationMetricQueryInput;\n  currentProps: UserUtilizationMetricQueryInput;\n  user_id: string;\n};\nexport type SessionMetricGraphQuery$data = {\n  readonly capacity_metric: {\n    readonly metrics: ReadonlyArray<{\n      readonly avg_value: string | null | undefined;\n      readonly max_value: string | null | undefined;\n      readonly metric_name: string | null | undefined;\n      readonly value_type: string | null | undefined;\n      readonly values: ReadonlyArray<{\n        readonly timestamp: number | null | undefined;\n        readonly value: string | null | undefined;\n      } | null | undefined> | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly user_id: string | null | undefined;\n  } | null | undefined;\n  readonly current_metric: {\n    readonly metrics: ReadonlyArray<{\n      readonly avg_value: string | null | undefined;\n      readonly max_value: string | null | undefined;\n      readonly metric_name: string | null | undefined;\n      readonly value_type: string | null | undefined;\n      readonly values: ReadonlyArray<{\n        readonly timestamp: number | null | undefined;\n        readonly value: string | null | undefined;\n      } | null | undefined> | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly user_id: string | null | undefined;\n  } | null | undefined;\n};\nexport type SessionMetricGraphQuery = {\n  response: SessionMetricGraphQuery$data;\n  variables: SessionMetricGraphQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"capacityProps\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"currentProps\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"user_id\"\n},\nv3 = {\n  \"kind\": \"Variable\",\n  \"name\": \"user_id\",\n  \"variableName\": \"user_id\"\n},\nv4 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"user_id\",\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ContainerUtilizationMetric\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"metrics\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"metric_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"value_type\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"MetircResultValue\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"values\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"timestamp\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"value\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_value\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"avg_value\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n],\nv5 = [\n  {\n    \"alias\": \"capacity_metric\",\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"capacityProps\"\n      },\n      (v3/*: any*/)\n    ],\n    \"concreteType\": \"UserUtilizationMetric\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"user_utilization_metric\",\n    \"plural\": false,\n    \"selections\": (v4/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": \"current_metric\",\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"currentProps\"\n      },\n      (v3/*: any*/)\n    ],\n    \"concreteType\": \"UserUtilizationMetric\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"user_utilization_metric\",\n    \"plural\": false,\n    \"selections\": (v4/*: any*/),\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionMetricGraphQuery\",\n    \"selections\": (v5/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v2/*: any*/),\n      (v0/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"SessionMetricGraphQuery\",\n    \"selections\": (v5/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"aa2a1000ef4410eaa2da853eabbdf0d6\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionMetricGraphQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionMetricGraphQuery(\\n  $user_id: UUID!\\n  $capacityProps: UserUtilizationMetricQueryInput!\\n  $currentProps: UserUtilizationMetricQueryInput!\\n) {\\n  capacity_metric: user_utilization_metric(user_id: $user_id, props: $capacityProps) {\\n    user_id\\n    metrics {\\n      metric_name\\n      value_type\\n      values {\\n        timestamp\\n        value\\n      }\\n      max_value\\n      avg_value\\n    }\\n  }\\n  current_metric: user_utilization_metric(user_id: $user_id, props: $currentProps) {\\n    user_id\\n    metrics {\\n      metric_name\\n      value_type\\n      values {\\n        timestamp\\n        value\\n      }\\n      max_value\\n      avg_value\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"88c8725f744a307e05f63cff149489f0\";\n\nexport default node;\n","/**\n * @generated SignedSource<<536f7efa26b5f1901dc2dee81e14eba8>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type UserSessionsMetricsQuery$variables = Record<PropertyKey, never>;\nexport type UserSessionsMetricsQuery$data = {\n  readonly container_utilization_metric_metadata: {\n    readonly metric_names: ReadonlyArray<string | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type UserSessionsMetricsQuery = {\n  response: UserSessionsMetricsQuery$data;\n  variables: UserSessionsMetricsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ContainerUtilizationMetricMetadata\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"container_utilization_metric_metadata\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"metric_names\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"UserSessionsMetricsQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"UserSessionsMetricsQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"21560ceabb06c90e8704f9796db735f7\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"UserSessionsMetricsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query UserSessionsMetricsQuery {\\n  container_utilization_metric_metadata {\\n    metric_names\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9d7023ac80a345ed8f9823d881a345a4\";\n\nexport default node;\n","import { UserStatsData, useSuspendedBackendaiClient } from '.';\nimport { useSuspenseTanQuery } from './reactQueryAlias';\n\ntype Options = {\n  fetchKey?: string;\n};\n\nconst useUserUsageStats = (options?: Options) => {\n  const baiClient = useSuspendedBackendaiClient();\n\n  return useSuspenseTanQuery<UserStatsData[]>({\n    queryKey: ['UsageHistory', baiClient._config._userId, options?.fetchKey],\n    queryFn: () => {\n      return baiClient.resources.user_stats();\n    },\n  });\n};\n\nexport default useUserUsageStats;\n","import {\n  convertBinarySizeUnit,\n  convertDecimalSizeUnit,\n  SizeUnit,\n} from '../helper';\nimport {\n  UserStatsData,\n  UserStatsDataKey,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport useUserUsageStats from '../hooks/useUserUsageStats';\nimport { Period } from './AllocationHistory';\nimport Flex from './Flex';\nimport QuestionIconWithTooltip from './QuestionIconWithTooltip';\nimport { Column, ColumnConfig } from '@ant-design/charts';\nimport { Card } from 'antd';\nimport { createStyles } from 'antd-style';\nimport dayjs from 'dayjs';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyles = createStyles(({ css, token }) => ({\n  graphCard: css`\n    .g2-tooltip {\n      background-color: ${token.colorBgSpotlight} !important;\n      border: none !important;\n    }\n    .g2-tooltip-title {\n      color: ${token.colorTextLightSolid} !important;\n    }\n    .g2-tooltip-list-item-name {\n      color: ${token.colorTextLightSolid} !important;\n    }\n    .g2-tooltip-list-item-value {\n      color: ${token.colorTextLightSolid} !important;\n    }\n  `,\n}));\n\ntype ByteUnit = 'B' | 'KiB' | 'MiB' | 'GiB' | 'TiB' | 'PiB' | 'EiB';\ntype DecimalUnit = 'B' | 'KB' | 'MB' | 'GB' | 'TB' | 'PB' | 'EB';\n\nconst DAY_LENGTH = 4 * 24;\nconst WEEK_LENGTH = DAY_LENGTH * 7;\n\ninterface GraphCardProps {\n  title: string;\n  tooltipText?: string;\n  children: React.ReactNode;\n}\nexport const GraphCard = ({ title, tooltipText, children }: GraphCardProps) => (\n  <Card\n    type=\"inner\"\n    title={\n      <Flex gap={'xxs'}>\n        {title}\n        {tooltipText ? <QuestionIconWithTooltip title={tooltipText} /> : null}\n      </Flex>\n    }\n    style={{ width: '100%' }}\n  >\n    {children}\n  </Card>\n);\n\ninterface getColumnConfigParams {\n  data: UserStatsData[];\n  key: UserStatsDataKey;\n  period: Period;\n  targetUnit: SizeUnit | 'count';\n  displayUnit: ByteUnit | DecimalUnit | 'count';\n  unitType: 'byte' | 'decimal' | 'count';\n  isDarkMode: boolean;\n}\n\nconst getColumnConfig = ({\n  data,\n  key,\n  period,\n  targetUnit,\n  displayUnit,\n  unitType,\n  isDarkMode,\n}: getColumnConfigParams): ColumnConfig => {\n  const formatValue = (value: number) => {\n    if (unitType === 'count') {\n      return value;\n    }\n    if (unitType === 'byte') {\n      return (\n        convertBinarySizeUnit(value.toString() + 'B', targetUnit as SizeUnit)\n          ?.number ?? 0\n      );\n    }\n    if (unitType === 'decimal') {\n      return (\n        convertDecimalSizeUnit(value.toString() + 'B', targetUnit as SizeUnit)\n          ?.number ?? 0\n      );\n    }\n    return value;\n  };\n\n  return {\n    data: data\n      .filter(\n        (_, i) =>\n          data.length - (period === '1D' ? DAY_LENGTH : WEEK_LENGTH) <= i,\n      )\n      .map((d) => ({\n        date: dayjs(d.date * 1000).format('MMM DD HH:mm'),\n        value: formatValue(d[key].value),\n      })),\n    xField: 'date',\n    yField: 'value',\n    axis: {\n      x: {\n        labelAutoHide: true,\n        tickFilter: (_: any, index: any) =>\n          index % (period === '1D' ? 12 : 48) === 0,\n      },\n      y: {\n        title: displayUnit,\n      },\n    },\n    animate: { enter: { type: 'growInY' } },\n    theme: isDarkMode ? 'dark' : 'light',\n  };\n};\n\ninterface AllocationHistoryStatisticsProps {\n  period: Period;\n  fetchKey?: string;\n}\n\nconst AllocationHistoryStatistics: React.FC<\n  AllocationHistoryStatisticsProps\n> = ({ period, fetchKey }) => {\n  const { t } = useTranslation();\n  const { data } = useUserUsageStats({\n    fetchKey,\n  });\n  const { isDarkMode } = useThemeMode();\n  const { styles } = useStyles();\n  const baiClient = useSuspendedBackendaiClient();\n\n  return (\n    <Flex\n      className={styles.graphCard}\n      direction=\"column\"\n      align=\"start\"\n      gap=\"md\"\n    >\n      <GraphCard title=\"Sessions\" tooltipText={t('statistics.SessionsDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'num_sessions',\n            period,\n            targetUnit: 'count',\n            displayUnit: 'count',\n            unitType: 'count',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n      <GraphCard title=\"CPU\" tooltipText={t('statistics.CPUDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'cpu_allocated',\n            period,\n            targetUnit: 'count',\n            displayUnit: 'count',\n            unitType: 'count',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n      <GraphCard title=\"Memory\" tooltipText={t('statistics.MemoryDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'mem_allocated',\n            period,\n            targetUnit: 'G',\n            displayUnit: 'GiB',\n            unitType: 'byte',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n      <GraphCard title=\"GPU\" tooltipText={t('statistics.GPUDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'gpu_allocated',\n            period,\n            targetUnit: 'count',\n            displayUnit: 'count',\n            unitType: 'count',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n      {!baiClient?.supports('user-metrics') ? (\n        <>\n          <GraphCard title=\"IO-Read\" tooltipText={t('statistics.IOReadDesc')}>\n            <Column\n              height={200}\n              {...getColumnConfig({\n                data,\n                key: 'io_read_bytes',\n                period,\n                targetUnit: 'M',\n                displayUnit: 'MiB',\n                unitType: 'decimal',\n                isDarkMode,\n              })}\n            />\n          </GraphCard>\n          <GraphCard title=\"IO-Write\" tooltipText={t('statistics.IOWriteDesc')}>\n            <Column\n              height={200}\n              {...getColumnConfig({\n                data,\n                key: 'io_write_bytes',\n                period,\n                targetUnit: 'M',\n                displayUnit: 'MiB',\n                unitType: 'decimal',\n                isDarkMode,\n              })}\n            />\n          </GraphCard>\n        </>\n      ) : null}\n    </Flex>\n  );\n};\n\nexport default AllocationHistoryStatistics;\n","import { useUpdatableState } from '../hooks';\nimport AllocationHistoryStatistics from './AllocationHistoryStatistics';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport Flex from './Flex';\nimport { Alert, Form, Select, Skeleton, theme } from 'antd';\nimport { Suspense, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { createEnumParam, useQueryParam, withDefault } from 'use-query-params';\n\nexport type Period = '1D' | '1W';\nconst periodParam = withDefault(createEnumParam<Period>(['1D', '1W']), '1D');\n\nconst AllocationHistory: React.FC = () => {\n  const [selectedPeriod, setSelectedPeriod] = useQueryParam(\n    'period',\n    periodParam,\n  );\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const [usageFetchKey, updateUsageFetchKey] = useUpdatableState('first');\n  const [isPendingUsageTransition, startUsageTransition] = useTransition();\n  let periodOptions: Array<{\n    label: string;\n    value: Period;\n  }> = [\n    {\n      label: t('statistics.1Day'),\n      value: '1D',\n    },\n    {\n      label: t('statistics.1Week'),\n      value: '1W',\n    },\n  ];\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      gap={'md'}\n      style={{ padding: token.paddingMD }}\n    >\n      <Alert showIcon message={t('statistics.UsageHistoryNote')} type=\"info\" />\n      <Flex gap={'sm'} justify=\"between\">\n        <Form.Item\n          label={t('statistics.SelectPeriod')}\n          style={{ marginBottom: 0 }}\n        >\n          <Select\n            popupMatchSelectWidth={false}\n            options={periodOptions}\n            value={selectedPeriod}\n            onChange={(value) => setSelectedPeriod(value)}\n          />\n        </Form.Item>\n        <BAIFetchKeyButton\n          loading={isPendingUsageTransition}\n          value={usageFetchKey}\n          onChange={() => {\n            startUsageTransition(() => {\n              updateUsageFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Suspense fallback={<Skeleton active />}>\n        <AllocationHistoryStatistics\n          period={selectedPeriod || '1D'}\n          fetchKey={usageFetchKey}\n        />\n      </Suspense>\n    </Flex>\n  );\n};\n\nexport default AllocationHistory;\n","import {\n  convertBinarySizeUnit,\n  toFixedFloorWithoutTrailingZeros,\n} from '../helper';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport BAICard from './BAICard';\nimport {\n  SessionMetricGraphQuery,\n  SessionMetricGraphQuery$data,\n} from './__generated__/SessionMetricGraphQuery.graphql';\nimport { Empty, theme } from 'antd';\nimport { createStyles } from 'antd-style';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { useLazyLoadQuery } from 'react-relay';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from 'recharts';\n\nconst useStyle = createStyles(({ css, token }) => ({\n  recharts: css`\n    .recharts-label {\n      fill: ${token.colorTextDescription};\n    }\n    .recharts-cartesian-axis-line {\n      stroke: ${token.colorBorder};\n    }\n    .recharts-cartesian-axis-tick-line {\n      stroke: ${token.colorBorder};\n    }\n    .recharts-cartesian-axis-tick-value {\n      fill: ${token.colorTextDescription};\n    }\n    .recharts-default-tooltip {\n      background-color: ${token.colorBgSpotlight} !important;\n      border: none !important;\n      color: ${token.colorTextLightSolid} !important;\n    }\n  `,\n}));\n\ntype MetricData = NonNullable<\n  NonNullable<SessionMetricGraphQuery$data['current_metric']>['metrics']\n>;\n\ninterface PrometheusMetricGraphProps {\n  queryProps: {\n    startDate: string;\n    endDate: string;\n    metricName: string;\n    userId: string;\n    dayDiff: number;\n  };\n  fetchKey: string;\n}\n\nconst SessionMetricGraph: React.FC<PrometheusMetricGraphProps> = ({\n  queryProps: { startDate, endDate, metricName, userId, dayDiff },\n  fetchKey,\n}) => {\n  const { token } = theme.useToken();\n  const { styles } = useStyle();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n\n  const { capacity_metric, current_metric } =\n    useLazyLoadQuery<SessionMetricGraphQuery>(\n      graphql`\n        query SessionMetricGraphQuery(\n          $user_id: UUID!\n          $capacityProps: UserUtilizationMetricQueryInput!\n          $currentProps: UserUtilizationMetricQueryInput!\n        ) {\n          capacity_metric: user_utilization_metric(\n            user_id: $user_id\n            props: $capacityProps\n          ) {\n            user_id\n            metrics {\n              metric_name\n              value_type\n              values {\n                timestamp\n                value\n              }\n              max_value\n              avg_value\n            }\n          }\n          current_metric: user_utilization_metric(\n            user_id: $user_id\n            props: $currentProps\n          ) {\n            user_id\n            metrics {\n              metric_name\n              value_type\n              values {\n                timestamp\n                value\n              }\n              max_value\n              avg_value\n            }\n          }\n        }\n      `,\n      {\n        user_id: userId,\n        capacityProps: {\n          metric_name: metricName,\n          start: startDate,\n          end: endDate,\n          step: dayDiff < 7 ? '5m' : dayDiff < 30 ? '1h' : '1d',\n          value_type: 'capacity',\n        },\n        currentProps: {\n          metric_name: metricName,\n          start: startDate,\n          end: endDate,\n          step: dayDiff < 7 ? '5m' : dayDiff < 30 ? '1h' : '1d',\n          value_type: 'current',\n        },\n      },\n      {\n        fetchPolicy: 'store-and-network',\n        fetchKey,\n      },\n    );\n\n  const metricData = getMetricData(\n    capacity_metric?.metrics ?? [],\n    current_metric?.metrics ?? [],\n    startDate,\n    endDate,\n    dayDiff < 7 ? '5m' : dayDiff < 30 ? '1h' : '1d',\n  );\n\n  const getMetricTitle = () => {\n    const [key, ...rest] = _.split(metricName, '_');\n    const restLabel = _.startCase(rest.join(' '));\n\n    if (_.has(mergedResourceSlots, key)) {\n      return `${mergedResourceSlots[key]?.human_readable_name} ${restLabel}`;\n    }\n    if (_.includes(metricName, 'io')) {\n      return `${_.upperCase(key)} ${restLabel}`;\n    }\n    return `${_.startCase(metricName.replaceAll('_', ' '))}`;\n  };\n\n  return (\n    <BAICard\n      title={getMetricTitle()}\n      type=\"inner\"\n      styles={{\n        body: {\n          padding: `${token.marginMD}px ${token.marginMD}px ${token.marginXS}px ${token.marginMD}px`,\n        },\n      }}\n    >\n      {_.isEmpty(capacity_metric?.metrics) &&\n      _.isEmpty(current_metric?.metrics) ? (\n        <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      ) : (\n        <ResponsiveContainer width=\"100%\" height={350}>\n          <LineChart data={metricData} className={styles.recharts}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"timestamp\" minTickGap={token.marginMD} />\n            <YAxis domain={[0, 'dataMax']} />\n            <Tooltip\n              formatter={(value) => {\n                return `${value}${convertMetricUnit(undefined, metricName).numberUnit}`;\n              }}\n            />\n            <Legend />\n            <ReferenceLine\n              y={\n                convertMetricUnit(\n                  current_metric?.metrics?.[0]?.avg_value,\n                  current_metric?.metrics?.[0]?.metric_name,\n                ).number\n              }\n              label=\"Avg Used\"\n              stroke={token.red}\n              strokeWidth={0.6}\n              strokeDasharray=\"6 6\"\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"capacity\"\n              stroke={token.colorSuccess}\n              dot={{ r: 0 }}\n              strokeWidth={2}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"used\"\n              stroke={token.colorPrimary}\n              strokeWidth={2}\n              dot={{ r: 0 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      )}\n    </BAICard>\n  );\n};\n\nexport default SessionMetricGraph;\n\nconst getMetricData = (\n  capacityMetric: MetricData,\n  currentMetric: MetricData,\n  start: string,\n  end: string,\n  step: string,\n) => {\n  // orders by capacity, current\n  const transformedData = _.zip(\n    capacityMetric[0]?.values ||\n      Array(currentMetric[0]?.values?.length).fill(0),\n    currentMetric[0]?.values,\n  ).map(([capacity, current]) => {\n    return {\n      timestamp: current?.timestamp,\n      capacity: capacity?.value,\n      used: current?.value,\n    };\n  });\n\n  const timeUnits = { s: 1, m: 60, h: 3600, d: 86400 };\n  const stepUnit = step.slice(-1) as keyof typeof timeUnits;\n  const stepValue = parseInt(step.slice(0, -1));\n  const stepSeconds = stepValue * timeUnits[stepUnit];\n\n  const filledData = [];\n  for (let i = Number(start); i < Number(end); i += stepSeconds) {\n    const timestamp = i;\n    const existData = _.find(\n      transformedData,\n      (data) => data.timestamp === timestamp,\n    );\n    filledData.push({\n      timestamp: dayjs(timestamp * 1000).format('lll'),\n      capacity: convertMetricUnit(\n        existData?.capacity,\n        currentMetric[0]?.metric_name,\n      ).number,\n      used: convertMetricUnit(existData?.used, currentMetric[0]?.metric_name)\n        .number,\n    });\n  }\n\n  return filledData;\n};\n\nconst convertMetricUnit = (\n  value: string | undefined | null,\n  metricName: string | undefined | null,\n) => {\n  let number: number | undefined = undefined;\n  let numberUnit: string | undefined = undefined;\n\n  if (!metricName)\n    return {\n      number,\n      numberUnit,\n    };\n\n  if (metricName.includes('util')) {\n    number = Number(toFixedFloorWithoutTrailingZeros(value ?? 0, 1));\n    numberUnit = '%';\n  } else if (metricName.includes('used')) {\n    number = Number((Number(value) / 1000).toFixed(1));\n    numberUnit = 's';\n  } else {\n    number = Number(convertBinarySizeUnit(value ?? '0', 'g')?.numberFixed);\n    numberUnit = 'GiB';\n  }\n\n  if (metricName.includes('net')) {\n    numberUnit = 'GiB/s';\n  }\n  number = value ? number : undefined;\n\n  return {\n    number,\n    numberUnit,\n  };\n};\n","import { useUpdatableState } from '../hooks';\nimport { useCurrentUserInfo } from '../hooks/backendai';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport Flex from './Flex';\nimport SessionMetricGraph from './SessionMetricGraph';\nimport { UserSessionsMetricsQuery } from './__generated__/UserSessionsMetricsQuery.graphql';\nimport { Alert, DatePicker, Empty, Skeleton, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { Suspense, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\nimport { StringParam, useQueryParam, withDefault } from 'use-query-params';\n\ninterface PrometheusMetricProps {}\n\nconst UserSessionsMetrics: React.FC<PrometheusMetricProps> = () => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { RangePicker } = DatePicker;\n\n  const [usageFetchKey, updateUsageFetchKey] = useUpdatableState('first');\n  const [isPendingUsageTransition, startUsageTransition] = useTransition();\n  const [startDate, setStartDate] = useQueryParam(\n    'startDate',\n    withDefault(StringParam, dayjs().format('YYYY-MM-DD 00:00:00')),\n  );\n  const [endDate, setEndDate] = useQueryParam(\n    'endDate',\n    withDefault(StringParam, dayjs().format('YYYY-MM-DD 23:59:59')),\n  );\n  const userInfo = useCurrentUserInfo();\n  const dayDiff = dayjs(endDate).diff(dayjs(startDate), 'day');\n\n  const { container_utilization_metric_metadata } =\n    useLazyLoadQuery<UserSessionsMetricsQuery>(\n      graphql`\n        query UserSessionsMetricsQuery {\n          container_utilization_metric_metadata {\n            metric_names\n          }\n        }\n      `,\n      {},\n      {\n        fetchKey: usageFetchKey,\n        fetchPolicy: 'store-and-network',\n      },\n    );\n  const sortedMetricMetadata = [\n    ..._.filter(\n      container_utilization_metric_metadata?.metric_names,\n      (metric) => metric && _.startsWith(metric, 'cpu'),\n    ),\n    ..._.filter(\n      container_utilization_metric_metadata?.metric_names,\n      (metric) => metric && _.startsWith(metric, 'mem'),\n    ),\n    ..._.filter(\n      container_utilization_metric_metadata?.metric_names,\n      (metric) =>\n        metric && !_.startsWith(metric, 'cpu') && !_.startsWith(metric, 'mem'),\n    ),\n  ];\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      gap=\"md\"\n      style={{ padding: token.paddingMD }}\n    >\n      <Flex align=\"stretch\" justify=\"between\">\n        <RangePicker\n          allowClear={false}\n          showTime={{ format: 'HH:mm' }}\n          maxDate={dayjs()}\n          onChange={(_, [startDate, endDate]) => {\n            setStartDate(startDate);\n            setEndDate(endDate);\n          }}\n          defaultValue={[dayjs(startDate), dayjs(endDate)]}\n          presets={[\n            {\n              label: t('statistics.timeRange.Today'),\n              value: [dayjs().startOf('day'), dayjs().endOf('day')],\n            },\n            {\n              label: t('statistics.timeRange.LastHour'),\n              value: [\n                dayjs().subtract(1, 'hour'),\n                dayjs().subtract(1, 'second'),\n              ],\n            },\n            {\n              label: t('statistics.timeRange.Last3Hours'),\n              value: [\n                dayjs().subtract(3, 'hours'),\n                dayjs().subtract(1, 'second'),\n              ],\n            },\n            {\n              label: t('statistics.timeRange.Last12Hours'),\n              value: [\n                dayjs().subtract(12, 'hours'),\n                dayjs().subtract(1, 'second'),\n              ],\n            },\n            {\n              label: t('statistics.timeRange.LastDay'),\n              value: [\n                dayjs().subtract(1, 'day'),\n                dayjs().subtract(1, 'second'),\n              ],\n            },\n            {\n              label: t('statistics.timeRange.Last7Days'),\n              value: [\n                dayjs().subtract(7, 'days'),\n                dayjs().subtract(1, 'second'),\n              ],\n            },\n          ]}\n        />\n        <BAIFetchKeyButton\n          loading={isPendingUsageTransition}\n          value={usageFetchKey}\n          onChange={() => {\n            startUsageTransition(() => {\n              updateUsageFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      {dayDiff > 30 && (\n        <Alert\n          showIcon\n          message={t('statistics.prometheus.DataMissingInLowUsageDesc')}\n        />\n      )}\n      <Suspense fallback={<Skeleton active />}>\n        {_.isEmpty(container_utilization_metric_metadata?.metric_names) ? (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description={t('statistics.prometheus.NoMetricsToDisplay')}\n          />\n        ) : (\n          _.map(_.omit(sortedMetricMetadata), (metric: string) => {\n            return metric ? (\n              <SessionMetricGraph\n                queryProps={{\n                  startDate: dayjs(startDate).unix().toString(),\n                  endDate: dayjs(endDate).unix().toString(),\n                  metricName: metric,\n                  userId: userInfo[0]?.uuid ?? '',\n                  dayDiff: dayDiff,\n                }}\n                fetchKey={usageFetchKey}\n              />\n            ) : null;\n          })\n        )}\n      </Suspense>\n    </Flex>\n  );\n};\n\nexport default UserSessionsMetrics;\n","import AllocationHistory from '../components/AllocationHistory';\nimport BAICard from '../components/BAICard';\nimport UserSessionsMetrics from '../components/UserSessionsMetrics';\nimport { filterEmptyItem } from '../helper';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { Skeleton, theme } from 'antd';\nimport React, { Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StringParam, useQueryParam, withDefault } from 'use-query-params';\n\ninterface ResourcesPageProps {}\n\nconst tabParam = withDefault(StringParam, 'allocation-history');\n\nconst ResourcesPage: React.FC<ResourcesPageProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [curTabKey, setCurTabKey] = useQueryParam('tab', tabParam, {\n    updateType: 'replace',\n  });\n\n  return (\n    <BAICard\n      activeTabKey={curTabKey}\n      onTabChange={(key) => setCurTabKey(key)}\n      tabList={filterEmptyItem([\n        {\n          key: 'allocation-history',\n          tab: t('webui.menu.UsageHistory'),\n        },\n        baiClient?.supports('user-metrics') && {\n          key: 'user-session-history',\n          tab: t('webui.menu.UserSessionHistory'),\n        },\n      ])}\n      styles={{\n        body: {\n          padding: 0,\n          paddingTop: 1,\n          overflow: 'hidden',\n        },\n      }}\n    >\n      {curTabKey === 'allocation-history' ? (\n        <Suspense\n          fallback={\n            <Skeleton\n              active\n              style={{ padding: token.paddingContentVerticalLG }}\n            />\n          }\n        >\n          <AllocationHistory />\n        </Suspense>\n      ) : null}\n      {curTabKey === 'user-session-history' ? (\n        <Suspense\n          fallback={\n            <Skeleton\n              active\n              style={{ padding: token.paddingContentVerticalLG }}\n            />\n          }\n        >\n          <UserSessionsMetrics />\n        </Suspense>\n      ) : null}\n    </BAICard>\n  );\n};\n\nexport default ResourcesPage;\n"],"names":["node","v0","v1","v2","v3","v4","v5","hash","options","baiClient","useSuspendedBackendaiClient","useSuspenseTanQuery","queryKey","_config","_userId","fetchKey","queryFn","resources","user_stats","useStyles","createStyles","_ref","css","token","graphCard","colorBgSpotlight","colorTextLightSolid","GraphCard","_ref2","title","tooltipText","children","_jsx","Card","type","_jsxs","Flex","gap","QuestionIconWithTooltip","style","width","getColumnConfig","_ref3","data","key","period","targetUnit","displayUnit","unitType","isDarkMode","formatValue","value","_convertBinarySizeUni","_convertBinarySizeUni2","convertBinarySizeUnit","toString","number","_convertDecimalSizeUn","_convertDecimalSizeUn2","convertDecimalSizeUnit","filter","_","i","length","DAY_LENGTH","map","d","date","dayjs","format","xField","yField","axis","x","labelAutoHide","tickFilter","index","y","animate","enter","theme","_ref4","t","useTranslation","useUserUsageStats","useThemeMode","styles","className","direction","align","Column","height","supports","_Fragment","periodParam","withDefault","createEnumParam","AllocationHistory","selectedPeriod","setSelectedPeriod","useQueryParam","useToken","usageFetchKey","updateUsageFetchKey","useUpdatableState","isPendingUsageTransition","startUsageTransition","useTransition","periodOptions","label","padding","paddingMD","Alert","showIcon","message","justify","Form","Item","marginBottom","Select","popupMatchSelectWidth","onChange","BAIFetchKeyButton","loading","Suspense","fallback","Skeleton","active","AllocationHistoryStatistics","useStyle","recharts","colorTextDescription","colorBorder","_capacity_metric$metr","_current_metric$metri","_current_metric$metri2","_current_metric$metri3","_current_metric$metri4","_current_metric$metri5","queryProps","startDate","endDate","metricName","userId","dayDiff","mergedResourceSlots","useResourceSlotsDetails","capacity_metric","current_metric","useLazyLoadQuery","_SessionMetricGraphQuery","require","user_id","capacityProps","metric_name","start","end","step","value_type","currentProps","fetchPolicy","metricData","getMetricData","metrics","BAICard","getMetricTitle","rest","restLabel","join","_mergedResourceSlots$","human_readable_name","replaceAll","body","marginMD","marginXS","Empty","image","PRESENTED_IMAGE_SIMPLE","ResponsiveContainer","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","minTickGap","YAxis","domain","Tooltip","formatter","convertMetricUnit","undefined","numberUnit","Legend","ReferenceLine","avg_value","stroke","red","strokeWidth","Line","colorSuccess","dot","r","colorPrimary","capacityMetric","currentMetric","_capacityMetric$","_currentMetric$","_currentMetric$$value","_currentMetric$2","transformedData","values","Array","fill","capacity","current","timestamp","used","stepUnit","slice","stepSeconds","parseInt","s","m","h","filledData","Number","_currentMetric$3","_currentMetric$4","existData","push","includes","toFixedFloorWithoutTrailingZeros","toFixed","numberFixed","UserSessionsMetrics","RangePicker","DatePicker","setStartDate","StringParam","setEndDate","userInfo","useCurrentUserInfo","diff","container_utilization_metric_metadata","_UserSessionsMetricsQuery","sortedMetricMetadata","metric_names","metric","allowClear","showTime","maxDate","defaultValue","presets","startOf","endOf","subtract","description","_userInfo$0$uuid","_userInfo$","SessionMetricGraph","unix","uuid","tabParam","props","curTabKey","setCurTabKey","updateType","activeTabKey","onTabChange","tabList","filterEmptyItem","tab","paddingTop","overflow","paddingContentVerticalLG"],"sourceRoot":""}