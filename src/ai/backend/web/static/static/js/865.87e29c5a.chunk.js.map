{"version":3,"file":"static/js/865.87e29c5a.chunk.js","mappings":"oNAWA,MAyCA,EAvCKA,IAAsB,IAErBC,GAFA,OAAEC,EAAS,IAAIF,EACnB,OAAsB,IAAlBE,EAAOC,OAAqB,MAM9BF,EAHAC,EAAO,KACe,kBAAdA,EAAO,IAAmBE,EAAAA,eAAqBF,EAAO,KAE/CA,EAAOG,KACnBC,IAAK,CAEFC,MAAOD,EACPE,MAAO,WAIEN,GAIfO,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,UAAU,MAAKC,SAClBC,IAAAA,IAAMZ,GAAc,CAACa,EAAUC,KAE5BN,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAEFC,MACEJ,IAAAA,KAAOZ,KAAkBa,OACrBI,EACA,CAAEC,OAAQ,EAAGC,aAAc,GAEjCZ,MAAOM,EAASN,MAAMI,SAErBE,EAASP,OARLQ,OAYN,C,wEC7CX,MAAMM,EAKD,SAAArB,EAAwBsB,GAAwB,IAA/C,MAAEC,EAAK,MAAEN,EAAQ,CAAC,GAAGjB,EAAYwB,EAAGC,UAAAtB,OAAA,QAAAe,IAAAO,UAAA,GAAAA,UAAA,GAAG,GAC3C,MAAO,EAAE,aAAEC,KAAkBC,EAAAA,EAAAA,MAE7B,OACElB,EAAAA,EAAAA,KAAA,OACEmB,IAAKF,EAAaH,GAClBN,MAAO,CACLY,MAAO,MACPC,OAAQ,SACLb,GAELO,IAAKA,GAGX,EAEA,EAAepB,EAAAA,KAAWiB,E,6HCH1B,MA8EA,EA9EoErB,IAQ7D,IAR8D,IACnE+B,EAAG,IACHC,EAAG,KACHC,EAAI,SACJC,EAAQ,iBACRC,EAAgB,YAChBC,KACGC,GACJrC,EACC,MAAOM,EAAOgC,IAAYC,EAAAA,EAAAA,GAAqBF,GACzCG,EAAWpC,EAAAA,OAA+B,MAQhD,OAPAqC,EAAAA,EAAAA,YAAU,KAEK,IAATR,GAAc3B,EAAQ,IAAM,GAC9BgC,EAASzB,IAAAA,IAAM,CAAC6B,KAAKC,MAAMrC,GAAQyB,IACrC,GAEC,CAACE,KAEFW,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAACC,UAAU,MAAMkC,IAAK,KAAKjC,SAAA,EAC9BH,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHO,MAAO,CAAE6B,KAAM,EAAGC,SAAU,KAC5BC,MAAM,UACNrC,UAAU,SAAQC,UAElBH,EAAAA,EAAAA,KAACwC,EAAAA,EAAW,CACVC,IAAKV,EACLR,IAAKA,EACLD,IAAKA,EACLE,KAAMA,EACNC,SAAUA,EACV5B,MAAOA,EACP6C,SAAUb,EACVc,OAAQA,KACN,GAAIvC,IAAAA,SAAWoB,IAASA,EAAO,EAAG,CAAC,IAADoB,EAAAC,EAChC,MAAMC,GAA4C,QAA7BF,EAAApB,EAAKuB,WAAWC,MAAM,KAAK,UAAE,IAAAJ,OAAA,EAA7BA,EAA+BlD,SAAU,EAC9DmC,EACEzB,IAAAA,IAAM,CACJA,IAAAA,UAEI6B,KAAKC,MACH9B,IAAAA,UAA2B,QAAhByC,EAAAd,EAASkB,eAAO,IAAAJ,OAAA,EAAhBA,EAAkBhD,QAAS,KAAO2B,GAC3CA,GACJ0B,QAAQJ,IAEZxB,IAGN,MAEEI,OAGR1B,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,UAAU,SAASqC,MAAM,UAAU/B,MAAO,CAAE6B,KAAM,GAAIlC,UAC1DH,EAAAA,EAAAA,KAACmD,EAAAA,EAAM,CACL5B,IAAKA,EACLD,IAAK,EACLE,KAAMA,EACNC,SAAUA,EACV5B,MAAOA,EACP6C,SAAW7C,SACGY,IAARa,GAAqBzB,EAAQyB,GAG/BO,EAAShC,EACX,KAEE8B,EAEJyB,MAAOhD,IAAAA,OAAoB,OAAXuB,QAAW,IAAXA,OAAW,EAAXA,EAAayB,OAAO,CAACC,EAAQC,MACpClD,IAAAA,SAAWmB,IAAOnB,IAAAA,SAAWkD,GAAO/B,UAI5C,C,6NC1EX,MAgLA,EAhLsEhC,IAQ/D,IARgE,aACrEgE,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAAI,MACtDC,EAAQ,CAAC,IAAK,IAAK,IAAK,KAAI,gBAC5BC,GAAkB,EAAK,IACvBnC,EAAM,KAAI,IACVC,EAAM,OAAM,UACZmC,KACGhC,GACJnC,EACC,MAAOM,EAAOgC,IAAYC,EAAAA,EAAAA,GACxBJ,EACA,CACEiC,aAAc,QAGXC,EAAUC,GACL,OAAVhE,QAA4BY,IAAVZ,EAAsB,CAAC,KAAM,OAAQiE,EAAAA,EAAAA,IAAUjE,GAC7DkE,GAAeC,EAAAA,EAAAA,GAAYH,GAC3BI,EAAOJ,GAAkBE,GAAgBP,EAAM,IAE9CU,EAAaC,IAAWL,EAAAA,EAAAA,IAAUxC,IAClC8C,EAAaC,IAAWP,EAAAA,EAAAA,IAAUvC,GAEnCkB,GAAM6B,EAAAA,EAAAA,QAAyB,MAuBrC,OAtBAtC,EAAAA,EAAAA,YAAU,KACR,GAAIS,EAAIQ,QAAS,CACf,MAAMsB,EAAWC,IAAc,IAADC,EAE5B,MAAM5E,EAAS,OAAD2E,QAAC,IAADA,GAAS,QAARC,EAADD,EAAGE,cAAM,IAAAD,OAAR,EAADA,EAAW5E,MACrB,aAAa8E,KAAK9E,IAKpBgC,EAAShC,EAEX,EAEI6E,EAASjC,EAAIQ,QAEnB,OADM,OAANyB,QAAM,IAANA,GAAAA,EAAQE,iBAAiB,QAASL,GAC3B,KACC,OAANG,QAAM,IAANA,GAAAA,EAAQG,oBAAoB,QAASN,EAAQ,CAEjD,IACC,CAAC9B,EAAKmB,EAAUC,EAAgBhC,KAGjC7B,EAAAA,EAAAA,KAACwC,EAAAA,EAAW,CACVC,IAAKA,KACDf,EACJiB,OAAQA,KACN,GAAIvC,IAAAA,SAAWsD,IAAcA,EAAY,EAAG,CAAC,IAADoB,EAAAC,EAAAC,EAC1C,MAAMlC,GAAiD,QAAlCgC,EAAApB,EAAUX,WAAWC,MAAM,KAAK,UAAE,IAAA8B,OAAA,EAAlCA,EAAoCpF,SAAU,EACnE,GACEuF,MACEhD,KAAKC,MAAM9B,IAAAA,UAAsB,QAAX2E,EAAAtC,EAAIQ,eAAO,IAAA8B,OAAA,EAAXA,EAAalF,QAAS,KAAO6D,GACjDA,GAGJ,OAEF7B,EAAS,GAADqD,QAEJjD,KAAKC,MAAM9B,IAAAA,UAAsB,QAAX4E,EAAAvC,EAAIQ,eAAO,IAAA+B,OAAA,EAAXA,EAAanF,QAAS,KAAO6D,GACnDA,GACAR,QAAQJ,IAAaoC,OAAGjB,GAE9B,GAEFpE,MAAO+D,EACPlB,SAAWyC,IAEPtD,EADe,OAAbsD,QAAkC1E,IAAb0E,EACdA,EAEA,GAADD,OAAIC,GAAQD,OAAGjB,GACzB,EAKF1C,IAAK8C,IAAYJ,EAAOG,GAAcgB,EAAAA,EAAAA,IAAY7D,EAAK0C,GAAMoB,OAC7D/D,IACE6C,IAAYF,EACRC,GAEAkB,EAAAA,EAAAA,IAAY9D,EAAK2C,GAAMoB,OAE7BC,YACEtF,EAAAA,EAAAA,KAACuF,EAAAA,EAAM,CACLC,UAAW,EACX3F,MAAOoE,EACPvB,SAAW+C,IACT5D,EAAS,GAADqD,OAAItB,GAAQsB,OAAGO,GAAU,EAEnCC,wBAA0BC,KAEnBA,GAAkB,OAAV9F,QAA6BY,IAAVZ,IAC9BgC,EAAS,IAADqD,OAAKjB,GACf,EAEF2B,QAASxF,IAAAA,IAAMoD,GAAQS,IAAI,CACzBpE,MAAOoE,EACPnE,OACEE,EAAAA,EAAAA,KAAC6F,EAAAA,EAAWC,KAAI,CACdtF,MAAO,CACLuF,WACE,uEACF5F,SAED8D,EAAK+B,cAAgB,WAI5BC,WAAYzC,EAAM9D,OAAS,OAAIe,EAAY,KAC3CkF,KAAMnC,EAAM9D,OAAS,QAAIe,EACzBD,MAAO,CACL0F,OAAQ1C,EAAM9D,OAAS,OAAIe,EAAY,aAI7Ce,KAAM,EACN2E,OAAQA,CAACC,EAAgBC,KACvB,MAAMC,EACJlG,IAAAA,OAASwD,IAAaxD,IAAAA,YAAcwD,GAAY,EAAIA,EAChD2C,EAAQnG,IAAAA,YAAcA,IAAAA,OAASmD,GAAe+C,GACpD,IAAIE,EAGAA,EAFc,OAAdH,EAAKI,KACHH,IAAoB/C,EAAagD,GACvBA,EAAQ,EAERA,EAGFA,EAAQ,EAGtB,MAAMG,EAAmBlD,EAAMmD,QAAQ1C,GACvC,IAAKR,GAAmB+C,EAAY,EAElC,GAAyB,IAArBE,EAEF7E,EAAS,IAADqD,OAAKjB,QACR,CACL,MAAM2C,EAAYrD,EAAaA,EAAa7D,OAAS,GAC/CmH,EAAWrD,EAAMkD,EAAmB,GAC1C7E,EAAS,GAADqD,OAAI0B,GAAS1B,OAAG2B,GAC1B,MACK,IAAKpD,GAAmB+C,EAAYjD,EAAa7D,OAAS,EAG/D,GAAIgH,IAAqBlD,EAAM9D,OAAS,EACtCmC,EAAS,GAADqD,OACHoB,GAAiC,OAAdD,EAAKI,KAAgB,GAAK,IAAEvB,OAAGb,QAElD,CACL,MAAMuC,EAAYrD,EAAa,GACzBsD,EAAWrD,EAAMkD,EAAmB,GAC1C7E,EAAS,GAADqD,OAAI0B,GAAS1B,OAAG2B,GAC1B,MAGA,GAAIL,GAAa,GAAKA,EAAYjD,EAAa7D,OAAQ,CACrD,IAAIoH,EAAevD,EAAaiD,GAC5BrC,IAAYF,GAAQ6C,EAAe5C,EACrC4C,EAAe5C,EACNG,IAAYJ,GAAQ6C,EAAe1C,IAC5C0C,EAAe1C,GAEjBvC,EAAS,GAADqD,OAAI4B,GAAY5B,OAAGjB,GAC7B,CACF,GAEF,E,qCC/KN,MAuLA,EArLI1E,IASG,IATF,IACH+B,EAAM,KAAI,IACVC,EAAM,MAAK,KACXwF,EAAI,MACJvD,EAAQ,CAAC,IAAK,KAAI,WAClBwD,EAAU,WACVC,EAAU,KACVzF,EAAO,OACJI,GACJrC,EACC,MAAOM,EAAOgC,IAAYC,EAAAA,EAAAA,GACxBF,EACA,CACE+B,aAAc,QAGZ,MAAEuD,GAAUC,EAAAA,EAAMC,WAClBC,GAASC,EAAAA,EAAAA,UAAQ,KAAMlC,EAAAA,EAAAA,IAAY9D,EAAK,IAAK,IAAI,CAACA,IAClDiG,GAASD,EAAAA,EAAAA,UAAQ,KAAMlC,EAAAA,EAAAA,IAAY7D,EAAK,IAAK,IAAI,CAACA,IAClDiG,GAAWF,EAAAA,EAAAA,UAAQ,KAAMlC,EAAAA,EAAAA,IAAYvF,GAAS,KAAM,IAAK,IAAI,CAACA,IAQpE,OACEsC,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAACC,UAAU,MAAMkC,IAAK,KAAKjC,SAAA,EAC9BH,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHO,MAAO,CAAE6B,KAAM,EAAGC,SAAU,KAC5BpC,UAAU,SACVqC,MAAM,UAASpC,UAEfH,EAAAA,EAAAA,KAACyH,EAAsB,IACjB7F,EACJN,IAAKA,EACLC,IAAKA,EACLiC,MAAOA,EACP3D,MAAOA,EACP6C,SAAWkE,IACT/E,EAAS+E,EAAU,EAErBpG,MAAO,CACL8B,SAAU,KAEZoB,UAAWlC,OAGfxB,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,UAAU,SACVqC,MAAM,UACN/B,MAAO,CACL6B,KAAM,KACF4E,GAAc,CAChBS,WAAY,SACZrG,OAAQ,IAEVlB,UAEFH,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,UAAU,SAASqC,MAAM,UAASpC,UAmCtCH,EAAAA,EAAAA,KAACmD,EAAAA,EAAM,CACL5B,IAAW,OAANgG,QAAM,IAANA,OAAM,EAANA,EAAQlC,OACbsC,OAAQ,CACNC,MACGb,GAAQ,CACPc,iBACEC,EAAAA,EAAAA,IAAuBf,EAAMlH,GAAS,MAAQ,EAC1CqH,EAAMa,kBACNtH,SAERA,EACFuH,KAAM,CAEJ,GAGJxG,KAAMA,EAEN3B,MAAe,OAAR2H,QAAQ,IAARA,OAAQ,EAARA,EAAUnC,OACjB4C,QAAS,CACPC,UAAW,WAAgB,IAAfrI,EAAKmB,UAAAtB,OAAA,QAAAe,IAAAO,UAAA,GAAAA,UAAA,GAAG,EAClB,OAAOnB,EAAQ,EAAC,GAAAqF,QACA,KAARrF,GAAcqD,QAAQ,GAAE,WAAAgC,OACzBrF,EAAMqD,QAAQ,GAAE,OACzB,GAEFR,SAAWyF,IACC,OAANd,QAAM,IAANA,GAAAA,EAAQhC,QAAUgC,EAAOhC,OAAS8C,EACpCtG,EAASP,GAETO,EACEsG,EAAc,EAAC,GAAAjD,OACM,KAAdiD,EAAkB,QAAAjD,OAClBiD,EAAW,KAEtB,EAEF/E,MAAO,IAODiE,GACFjH,IAAAA,SAAiB,OAANiH,QAAM,IAANA,OAAM,EAANA,EAAQhC,SAAW,CAC5B,CAACgC,EAAOhC,QAAS,CACf7E,MAAO,CACLT,MAAOmH,EAAMkB,oBAGftI,MACoB,IAAlBuH,EAAOhC,OACHgC,EAAOhC,OACPgC,EAAOhC,QAAU,EACfgC,EAAOhC,OAAS,IACA,KAAhBgC,EAAOhC,OAAgB,SAIlCjF,IAAAA,OAAS4G,GAAY,CAAC3D,EAAQC,MACxBlD,IAAAA,SAAiB,OAANmH,QAAM,IAANA,OAAM,EAANA,EAAQlC,SACtBjF,IAAAA,SAAWkD,IAAc,OAANiE,QAAM,IAANA,OAAM,EAANA,EAAQlC,cAGvB,OAANkC,QAAM,IAANA,OAAM,EAANA,EAAQlC,SAAU,CACpB,CAACkC,EAAOlC,QAAS,CACf7E,MAAO,CACLT,MAAOmH,EAAMkB,oBAEftI,MACoB,IAAlByH,EAAOlC,OACHkC,EAAOlC,OACPkC,EAAOlC,QAAU,EACfkC,EAAOlC,OAAS,IACA,KAAhBkC,EAAOlC,OAAgB,eAOtC,E,sGC/JX,MA2JA,EA3JkE9F,IAK3D,IAL4D,uBACjE8I,EAAsB,WACtBC,EAAU,oBACVC,KACGC,GACJjJ,EACC,MAAOkJ,EAAUC,IAAkBC,EAAAA,EAAAA,IAAkB,UAC7CC,IAAKC,IAA4BC,EAAAA,EAAAA,GAAcJ,EAAgB,CACrEK,KAAM,IACNC,UAAU,EACVC,SAAS,KAEJC,IAAiBC,EAAAA,EAAAA,OAClB,EAAEC,IAAMC,EAAAA,EAAAA,OACR,MAAEnC,GAAUC,EAAAA,EAAMC,YACjBkC,EAAiBC,IAAoBC,EAAAA,EAAAA,kBACrCC,EAAmBC,IACxB5H,EAAAA,EAAAA,GAAqB0G,IAMjB,iBAAEmB,IAAqBC,EAAAA,EAAAA,uBAAgB,IAAAC,EAAAA,EAAAA,EAAAC,EAAA,OAU3C,CAAC,EACD,CACErB,SAAUA,EACVsB,YAA0B,UAAbtB,EAAuB,oBAAsB,iBAI9D,OACEzI,EAAAA,EAAAA,KAACuF,EAAAA,EAAM,CACLyE,QAASV,EACT1D,QAAS,IACH0C,EACA,CACE,CACEzI,MAAO,SACPC,OACEqC,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAACmC,IAAK,KAAM5B,MAAO,CAAEyJ,QAAS,eAAgB9J,SAAA,EACjDH,EAAAA,EAAAA,KAACkK,EAAAA,EAAY,IAAG,IAAEd,EAAE,wCAGxBe,cAAef,EAAE,uCAGrB,MACAb,EACA,CACE,CACE1I,MAAO,mBACPC,OACEqC,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAACmC,IAAK,KAAKjC,SAAA,CACbiJ,EAAE,sCACHpJ,EAAAA,EAAAA,KAACoK,EAAAA,EAAO,CACNC,MAAOjB,EAAE,4CAA4CjJ,UAErDH,EAAAA,EAAAA,KAACsK,EAAAA,EAAkB,CACjB9J,MAAO,CACLT,MAAOmH,EAAMkB,2BAMvB+B,cAAef,EAAE,uCAGrB,GACJ,CAEEtJ,MAAO,SAEP8F,QAASxF,IAAAA,IAAMuJ,GAAkB,CAACY,EAAQhE,KACxC,MAAMiE,EAEFC,KAAKC,MAAY,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQI,gBACjBlJ,EAAW4G,GACZA,EAAuBuC,UAAe,OAANL,QAAM,IAANA,OAAM,EAANA,EAAQM,OAAQ,SACjDpK,EACJ,MAAO,CACLZ,MAAa,OAAN0K,QAAM,IAANA,OAAM,EAANA,EAAQM,KACf/K,OACEqC,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAACC,UAAU,MAAM4K,QAAQ,UAAU1I,IAAK,KAAKjC,SAAA,CACzC,OAANoK,QAAM,IAANA,OAAM,EAANA,EAAQM,MACT7K,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,UAAU,MACVkC,IAAK,MACL5B,MACE,CAEE,EAEHL,SAEAC,IAAAA,IACCA,IAAAA,OAASoK,GAAW,CAACO,EAAMzH,IAEzBlD,IAAAA,QAAU8I,EAAc5F,OAE1B,CAACyH,EAAMzH,KAEHtD,EAAAA,EAAAA,KAACgL,EAAAA,GAAc,CAGbvE,KAAMnD,EACNzD,MAAOkL,EACPE,aAAW,GAJN3H,UAYnBiH,SACA9I,SAAUA,EACX,IAEAyJ,MAAK,CAACC,EAAGC,IACVD,EAAE1J,WAAa2J,EAAE3J,SAAW,EAAI0J,EAAE1J,SAAW,GAAK,MAIxD4J,YAAU,KAEN7C,EACJ3I,MAAO4J,EACP/G,SAAUgH,EACV4B,gBACElL,IAAAA,SAAW,CAAC,SAAU,oBAAqBqJ,GACvC,gBACA,QAEN/D,wBAA0BC,IACxB6C,EAAY9C,yBACV8C,EAAY9C,wBAAwBC,GAClCA,GAhIR4D,GAAiB,KACfV,GAAyB,GAiIvB,GAEM,E,0FC5JP,MAAM0C,EAA0B,MAC1BC,EAA0C,CACrDC,SAAU,CACRC,IAAK,EACLC,IAAK,KACLC,MAAO,KACPC,YAAa,GAEfC,gBAAiB,EACjBC,aAAc,cACdC,aAAc,EACdC,uBAAuB,GA4BnBC,EAEF3M,IAIG,IAAD4M,EAAAC,EAAAC,EAAA,IAJD,oBACHC,EAAmB,sBACnBC,EAAqB,oBACrBC,GAAsB,GACvBjN,EACC,MAAMkN,EAAOC,EAAAA,EAAKC,mBACZ,EAAEvD,IAAMC,EAAAA,EAAAA,OACR,MAAEnC,GAAUC,EAAAA,EAAMC,WAElBwF,GAAYC,EAAAA,EAAAA,OACX3D,IAAiBC,EAAAA,EAAAA,QAEjB,sBAAE2D,EAAqB,yBAAEC,KAC9BC,EAAAA,EAAAA,KAEIC,GAAiBC,EAAAA,EAAAA,OAEhBC,EAAsBC,IAA6B5D,EAAAA,EAAAA,iBACpD6D,EAAeX,EAAAA,EAAKY,SAAS,CAAC,eAAgB,SAAU,CAC5Db,OACAc,UAAU,IAENC,EAAuBd,EAAAA,EAAKY,SAAS,gBAAiB,CAC1Db,OACAc,UAAU,MAEL,iBAAEE,EAAgB,UAAEC,EAAS,eAAEC,EAAc,gBAAEC,KACpDC,EAAAA,EAAAA,GAA6B,CAC3BC,mBAAoBb,EAAepC,KACnC2C,qBAAsBA,EACtBH,aAAcA,IAGZU,EAAmB3N,IAAAA,OAAS8I,GAAe,CAACrJ,EAAOyD,KAAS,IAAD0K,EAAAC,EAC/D,QAAI,CAAC,MAAO,MAAO,SAASrD,SAAStH,KAGF,QAAjC0K,EAACL,EAAeO,aAAa5K,UAAI,IAAA0K,IAAhCA,EAAkCzM,KACO,KAAV,QAAhC0M,EAAAN,EAAeO,aAAa5K,UAAI,IAAA2K,OAAA,EAAhCA,EAAkC1M,KAGxB,IAGR4M,EAAgC/N,IAAAA,OACxB,OAAZiN,QAAY,IAAZA,OAAY,EAAZA,EAAce,iBACbC,KACCA,IAASjO,IAAAA,SAAW,CAAC,MAAO,MAAO,SAAUiO,EAAM/K,OAGjDgL,EAAiC,CACrChN,IAAK,EACLC,IAAKwL,EAAyBxL,IAC9BmM,UAAWX,EAAyBW,WAGhCrF,GAAyBf,EAAAA,EAAAA,UAAQ,KAAO,IAADiH,EAAAC,EAC3C,MAAMC,EAAerO,IAAAA,OAAwB,OAAfwN,QAAe,IAAfA,OAAe,EAAfA,EAAiBc,SAAUnE,GAChDA,EAAOoE,cACb/O,KAAK2K,GAAWA,EAAOM,OAEpB+D,EAAgBxO,IAAAA,OAAwB,OAAfwN,QAAe,IAAfA,OAAe,EAAfA,EAAiBc,SAAUnE,IAAY,IAADsE,EAAAC,EAAAC,EAAAC,EACnE,GACuC,kBAA9BzE,EAAOI,eAAegB,KACM,kBAAV,QAAzBkD,EAAOlB,EAAehC,WAAG,IAAAkD,OAAA,EAAlBA,EAAoBtN,OAC3BuG,EAAAA,EAAAA,IACEyC,EAAOI,eAAegB,IACJ,QADOmD,EACzBnB,EAAehC,WAAG,IAAAmD,OAAA,EAAlBA,EAAoBvN,KAClB,EAEJ,OAAO,EAET,GACuC,kBAA9BgJ,EAAOI,eAAee,KACM,kBAAV,QAAzBqD,EAAOpB,EAAejC,WAAG,IAAAqD,OAAA,EAAlBA,EAAoBxN,MAC3BgJ,EAAOI,eAAee,KAAwB,QAArBsD,EAAGrB,EAAejC,WAAG,IAAAsD,OAAA,EAAlBA,EAAoBzN,KAEhD,OAAO,EAET,MAAM0N,EAAkB7O,IAAAA,KACtBA,IAAAA,KAAOmK,EAAOI,eAAgB,CAAC,MAAO,MAAO,WAc/C,OAZoBvK,IAAAA,MAAQ6O,GAAkB3L,IAAS,IAAD4L,EAAAC,EACpD,QACE7L,GACsC,kBAA/BiH,EAAOI,eAAerH,IACoB,kBAAV,QAAvC4L,EAAOvB,EAAeO,aAAa5K,UAAI,IAAA4L,OAAA,EAAhCA,EAAkC3N,MACzCnB,IAAAA,SAAWmK,EAAOI,eAAerH,IAC/BlD,IAAAA,SAA2C,QAAjC+O,EAACxB,EAAeO,aAAa5K,UAAI,IAAA6L,OAAA,EAAhCA,EAAkC5N,KAItC,GAEK,IACjB3B,KAAK2K,GAAWA,EAAOM,OAEpBuE,EAA2BhP,IAAAA,OAChB,OAAfwN,QAAe,IAAfA,OAAe,EAAfA,EAAiBc,SAChBnE,IACC,MAAM8E,EAA8BjP,IAAAA,OAClCmK,EAAOI,gBACP,CAAC9K,EAAOyD,KACN,GAAI,CAAC,MAAO,MAAO,SAASsH,SAAStH,IAAkB,MAAVzD,EAC3C,OAAO,CAAI,IAGjB,OAA6C,IAAzCsO,EAA8BzO,SAC5BU,IAAAA,QAAUiP,GAOTjP,IAAAA,KAAO+N,GAAgCE,GACrCjO,IAAAA,KAAOiP,GAA6B,CAACxP,EAAOyD,KAE1C,OAAL+K,QAAK,IAALA,OAAK,EAALA,EAAO/K,OAAQA,GAAOlD,IAAAA,SAAWP,IAAUO,IAAAA,SAAgB,OAALiO,QAAK,IAALA,OAAK,EAALA,EAAO/M,QAGjE,IAEJ1B,KAAK2K,GAAWA,EAAOM,OAEzB,OAAOsD,EAA8BzO,OAAS,EACzB,QAAjB6O,EAAA3B,EAAU0C,eAAO,IAAAf,GAAjBA,EAAmBgB,+BACjBX,EACAH,EACFrO,IAAAA,aACmB,QAAjBoO,EAAA5B,EAAU0C,eAAO,IAAAd,GAAjBA,EAAmBe,+BACfX,EACAH,EACJW,EACD,GACJ,CACgB,QADhBjD,EACDS,EAAU0C,eAAO,IAAAnD,OAAA,EAAjBA,EAAmBoD,+BACJ,OAAf3B,QAAe,IAAfA,OAAe,EAAfA,EAAiBc,QACjBf,EAAeO,aACG,QADS9B,EAC3BuB,EAAejC,WAAG,IAAAU,OAAA,EAAlBA,EAAoB7K,IACF,QADK8K,EACvBsB,EAAehC,WAAG,IAAAU,OAAA,EAAlBA,EAAoB9K,IACpB4M,IAGIqB,IAA6CC,EAAAA,EAAAA,IAAkB,KACnE,GACErP,IAAAA,SACE,CAAC,SAAU,oBACXqM,EAAKiD,cAAc,2BAIrB,GACErH,EAAuBuC,SAAS6B,EAAKiD,cAAc,2BAG9C,GAAIrH,EAAuB,GAAI,CACpC,MAAMsH,EAAqBvP,IAAAA,OAASiI,EAAwB,QAAQ,GACpEoE,EAAKmD,eAAe,CAClBC,iBAAkBF,IAEpBG,GAAkCH,EACpC,MACElD,EAAKmD,eAAe,CAClBC,iBAAkB,WAKxBE,YAAW,KACTtD,EAAKuD,iBAAiBC,OAAM,QAAS,GACpC,IAAI,KAITjO,EAAAA,EAAAA,YAAU,KACRwL,GAAwBgC,IAA4C,GACnE,CACDhC,EACAgC,GACAnC,IAGF,MAAM6C,GAAoCC,IAAqB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAE5D,MAAMC,EAAqE,CACzEhF,IAAuB,QAApB0E,EAAEzC,EAAejC,WAAG,IAAA0E,OAAA,EAAlBA,EAAoB9O,IACzBqK,KAMG,QALD0E,GAAAjL,EAAAA,EAAAA,MAC8C,QAA3CkL,GAAAlL,EAAAA,EAAAA,IAAgC,QAArBmL,EAAC5C,EAAe/B,aAAK,IAAA2E,OAAA,EAApBA,EAAsBjP,IAAK,YAAI,IAAAgP,OAAA,EAA3CA,EAA6CjL,SAAU,KACZ,QAAzCmL,GAAApL,EAAAA,EAAAA,IAA8B,QAAnBqL,EAAC9C,EAAehC,WAAG,IAAA8E,OAAA,EAAlBA,EAAoBnP,IAAK,YAAI,IAAAkP,OAAA,EAAzCA,EAA2CnL,SAAU,GACtD,IACF,YACD,IAAAgL,OAAA,EALDA,EAKGhL,QAAS,KAIhB,GAAI8I,EAA8BzO,OAAS,EACzC,GACEU,IAAAA,KACE+N,GACCE,IACM,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO/K,OAAQmJ,EAAKiD,cAAc,CAAC,WAAY,sBAEnD,CAAC,IAADiB,EAEAD,EAAiBE,gBAAkBnE,EAAKiD,cAAc,CACpD,WACA,oBAEFgB,EAAiB7E,YAGd,QAHyB8E,EAC1BhD,EAAeO,aACbzB,EAAKiD,cAAc,CAAC,WAAY,4BACjC,IAAAiB,OAAA,EAFDA,EAEGrP,GACP,KAAO,CAAC,IAADuP,EAGL,MAAMC,EAMA,QAHJD,EACAzQ,IAAAA,OAAS+N,GAAgC4C,GACvC3Q,IAAAA,KAAO8I,GAAe0B,SAAwB,OAAfmG,QAAe,IAAfA,OAAe,EAAfA,EAAiBzN,OAChD,UAAE,IAAAuN,OAAA,EAFJA,EAEMvN,IAEoB,IAAD0N,EAA3B,GAAIF,EACFJ,EAAiB7E,YACmC,QADxBmF,EAC1BrD,EAAeO,aAAa4C,UAAsB,IAAAE,OAAA,EAAlDA,EAAoD1P,IACtDoP,EAAiBE,gBAAkBE,CAEvC,MAEAJ,EAAiB7E,YAAc,EAG5BW,GAAwB2D,IAE1B,CAAC,MAAO,eAAyBc,SAAS3N,IACzC,MAAM4N,EAASR,EAAiBpN,GAE9BlD,IAAAA,SAAW8Q,IACXA,EAASzE,EAAKiD,cAAc,CAAC,WAAYpM,YAElCoN,EAAiBpN,EAC1B,IAED,CAAC,MAAO,SAAmB2N,SAAS3N,IACnC,MAAM6N,EAAYT,EAAiBpN,GAEjClD,IAAAA,SAAW+Q,KACXrJ,EAAAA,EAAAA,IACEqJ,EACA1E,EAAKiD,cAAc,CAAC,WAAYpM,KAC9B,UAEGoN,EAAiBpN,EAC1B,KAIJmJ,EAAKmD,eAAe,CAClBnE,SAAU,IACLiF,KAKHrD,GAAyD,IAAzCc,EAA8BzO,QAChD+M,EAAK2E,cAAc,CAAC,WAAY,eAAgB,GAG9C3E,EAAKiD,cAAc,0BACrB2B,GAAuB5E,EAAKiD,cAAc,CAAC,WAAY,SAAW,MAEpEjD,EAAKuD,eAAe,CAAC,aAAaC,OAAM,QAAS,GAGnDjO,EAAAA,EAAAA,YAAU,KACRkO,IAAkC,GAIjC,CAAC7C,IAEJ,MAAMyC,GAAqCjF,IAAkB,IAADyG,EAAAC,EAC1D,MAAMhH,EAASnK,IAAAA,KACE,OAAfwN,QAAe,IAAfA,OAAe,EAAfA,EAAiBc,SAChBnE,GAAWA,EAAOM,OAASA,IAExB2G,EAAQpR,IAAAA,KAAa,OAANmK,QAAM,IAANA,OAAM,EAANA,EAAQI,eAAgBvK,IAAAA,KAAO8I,IAC9CyC,EAAkD,QAA/C2F,GAAGlM,EAAAA,EAAAA,MAAkB,OAALoM,QAAK,IAALA,OAAK,EAALA,EAAO7F,MAAO,GAAK,IAAK,IAAK,UAAE,IAAA2F,OAAA,EAA5CA,EAA8CG,WACpDC,EAAiBtR,IAAAA,KAAOoR,EAAO,CAAC,MAAO,MAAO,UAG9CG,EAA8BvR,IAAAA,KAClCA,IAAAA,KAAO2N,IACNlO,QAAoCY,IAA1BiR,EAAe7R,KAG5B,IAAI+R,EAGA,CACF/F,YAAa,GAEX8F,IACFC,EAAqB,CACnBhB,gBAAiBe,EACjB9F,YAAagG,OAAOH,EAAeC,IAAgC,KAGvElF,EAAKmD,eAAe,CAClBnE,SAAU,IAELmG,EAEHjG,MACAC,MAA8D,QAAzD2F,GAAEnM,EAAAA,EAAAA,MAAmB,OAANmF,QAAM,IAANA,OAAM,EAANA,EAAQuH,gBAAiB,GAAK,IAAK,IAAK,UAAE,IAAAP,OAAA,EAAvDA,EACHE,WACJ/F,IAAKqG,UAAc,OAALP,QAAK,IAALA,OAAK,EAALA,EAAO9F,MAAO,MAAQ,KAGxC2F,GAAuB1F,GAAO,KAAK,EAG/B0F,GAA0BW,KAI5BlK,EAAAA,EAAAA,IAAuBkK,EAAU,OAAS,IAE1ClK,EAAAA,EAAAA,IACEkK,GACAC,EAAAA,EAAAA,IAAmBxE,EAAkB,OAAS,OAC3C,IAEL3F,EAAAA,EAAAA,IAAuB,KAAMyD,GAA2B,EAExDkB,EAAK2E,cAAc,CAAC,WAAY,SAAU,MAE1C3E,EAAK2E,cAAc,CAAC,WAAY,SAAU7F,EAC5C,EAGF,OACEpJ,EAAAA,EAAAA,MAAA+P,EAAAA,SAAA,CAAA/R,SAAA,EACEH,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRtH,KAAK,gBACL/K,MAAOsJ,EAAE,yBACTgJ,MAAO,CACL,CACEC,UAAU,IAIdC,QAAS,WAAWnS,UAEpBH,EAAAA,EAAAA,KAACuS,EAAAA,EAAmB,CAClBlH,YAAU,EACVrB,QAASmD,EACTzK,SAAW8P,IACTpF,GAA0B,KAExBX,EAAK2E,cAAc,gBAAiBoB,GACpC/F,EAAKuD,eAAe,CAAC,kBAAkBC,OAAM,QAAS,GACtD,MAKP1D,GACCvM,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRrS,MAAOsJ,EAAE,kCACTyB,KAAK,mBACLwH,UAAQ,EACR7R,MAAO,CAAEiS,aAAcvL,EAAMwL,UAAWvS,UAExCH,EAAAA,EAAAA,KAAC2S,EAAoB,CACnBrK,YAAU,EACVC,qBAAmB,EACnB7F,SAAUA,CAAC7C,EAAO+F,KAChB,OAAQ/F,GACN,IAAK,SACH,MACF,IAAK,mBACH4M,EAAK2E,cAAc,yBAAyB,GAC5ClB,IAAiC,GACjC,MACF,QACEzD,EAAK2E,cAAc,yBAAyB,GAC5CtB,GAAkCjQ,GAEtC,EAEFwI,uBAAwBA,MAG1B,MACJrI,EAAAA,EAAAA,KAAC4S,EAAAA,EAAI,CACHpS,MAAO,CACLiS,aAAcvL,EAAMxG,QACpBP,UAEFH,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRU,aAAcA,CAACC,EAAMC,IACnBD,EAAKjD,mBAAqBkD,EAAIlD,iBAEhCmD,SAAO,EAAA7S,SAEN8S,IAAwB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAtB,cAAEjE,GAAeuD,EACjB,OAEE9Q,EAAAA,EAAAA,MAAA+P,EAAAA,SAAA,CAAA/R,SAAA,EACgB,OAAb+I,QAAa,IAAbA,OAAa,EAAbA,EAAewC,OACd1L,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRtH,KAAM,CAAC,WAAY,OAEnB/K,MAAOsJ,EAAE,wBACTnB,QAAS,CACP2L,UAAW,QACXvJ,OAAOrK,EAAAA,EAAAA,KAAC6T,EAAAA,GAAK,CAACC,QAAS,8BAEzBzB,UAAQ,EACRD,MAAO,CACL,CACEC,UAAU,GAEZ,CACE5L,KAAM,SACNnF,IAAuB,QAApB4R,EAAEvF,EAAejC,WAAG,IAAAwH,OAAA,EAAlBA,EAAoB5R,KAG3B,CACEyS,YACmB,QADRZ,EACTvG,EAAU0C,eAAO,IAAA6D,OAAA,EAAjBA,EAAmB5D,+BACrByE,UAAWC,MAAOC,EAAMrU,KAInB,IAADsU,EAHF,OACE/T,IAAAA,SAAWsN,EAAUhC,MACrB7L,EAAQ6N,EAAUhC,IAEX0I,QAAQC,OACI,QAAjBF,EAAAvH,EAAU0C,eAAO,IAAA6E,GAAjBA,EAAmB5E,+BACfnG,EACE,gDACA,CACEkL,OAAQ5G,EAAUhC,MAGtBtC,EACE,8CACA,CACEkL,OAAQ5G,EAAUhC,OAKrB0I,QAAQG,SACjB,IAGJpU,UAEFH,EAAAA,EAAAA,KAACwU,EAAAA,EAAqB,CACpB9S,iBAAkB,CAChB4D,WAAY8D,EAAE,0BAEhBzH,YAAa,CACXyB,MAAO,IAEDsK,EAAUhC,IACV,CACE,CAACgC,EAAUhC,KAAM,CACf5L,OAAOE,EAAAA,EAAAA,KAACyU,EAAa,MAGzB,CAAC,KACiB,QAAlBrB,EAAAzF,EAAejC,WAAG,IAAA0H,GAAlBA,EAAoB9R,IACpB,CACE,CAAmB,QAAnB+R,EAAC1F,EAAejC,WAAG,IAAA2H,OAAA,EAAlBA,EAAoB/R,KACD,QADIgS,EACtB3F,EAAejC,WAAG,IAAA4H,OAAA,EAAlBA,EAAoBhS,KAExB,CAAC,KACiB,QAAlBiS,EAAA5F,EAAejC,WAAG,IAAA6H,GAAlBA,EAAoBhS,IACpB,CACE,CAAmB,QAAnBiS,EAAC7F,EAAejC,WAAG,IAAA8H,OAAA,EAAlBA,EAAoBjS,KAAM,CACzBf,MAAO,CACLT,MAAOmH,EAAMkB,oBAEftI,MAAyB,QAApB2T,EAAE9F,EAAejC,WAAG,IAAA+H,OAAA,EAAlBA,EAAoBlS,MAG/B,CAAC,IAGTD,IAAuB,QAApBoS,EAAE/F,EAAejC,WAAG,IAAAgI,OAAA,EAAlBA,EAAoBpS,IACzBC,IAAuB,QAApBoS,EAAEhG,EAAejC,WAAG,IAAAiI,OAAA,EAAlBA,EAAoBpS,IACzBC,KAAM,EACNkB,SAAUA,KACR+J,EAAK2E,cAAc,mBAAoB,SAAS,OAK1C,OAAblI,QAAa,IAAbA,OAAa,EAAbA,EAAeyC,OACdxJ,EAAAA,EAAAA,MAACuK,EAAAA,EAAKyF,KAAI,CACRrS,MAAOsJ,EAAE,2BACTnB,QAAS,CACP2L,UAAW,QACXc,MAAO,CACLC,QAAUnQ,GAAWA,EAAEoQ,kBAEzBvK,OACErK,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,UAAU,SACVyU,QAAUnQ,GAAMA,EAAEoQ,iBAAiBzU,UAEnCH,EAAAA,EAAAA,KAAC6T,EAAAA,GAAK,CAACC,QAAS,mCActBzB,UAAQ,EAAAlS,SAAA,EAERH,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRa,SAAO,EACPH,aAAcA,CAACC,EAAM+B,IACnB/B,EAAKrH,SAASG,QAAUiJ,EAAKpJ,SAASG,MACvCzL,SAEAA,KAAO,IAAD2U,EAAAC,EAAAC,EAAAC,EACL,OACEjV,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRtH,KAAM,CAAC,WAAY,OACnBmI,SAAO,EACPZ,MAAO,CACL,CACEC,UAAU,GAEZ,CAEE2B,UAAWC,MAAOC,EAAMrU,KAAmB,IAADqV,EAAAC,EActCC,EAPF,OACGhV,IAAAA,UAAYP,IACK,QADCqV,EACnBvH,EAAehC,WAAG,IAAAuJ,GAAlBA,EAAoB5T,MACpBwG,EAAAA,EAAAA,IACEjI,GACkB,QAAlBsV,EAAAxH,EAAehC,WAAG,IAAAwJ,OAAA,EAAlBA,EAAoB7T,MAAO,MACzB,EAEG8S,QAAQC,OACbjL,EAAE,6BAA8B,CAC9BiM,KAAMjV,IAAAA,SACc,QAAlBgV,EAAAzH,EAAehC,WAAG,IAAAyJ,OAAA,EAAlBA,EAAoB9T,MAAO,SAK1B8S,QAAQG,SACjB,GAGJ,CACER,YACmB,QADRe,EACTlI,EAAU0C,eAAO,IAAAwF,OAAA,EAAjBA,EACIvF,+BACNyE,UAAWC,MAAOC,EAAMrU,KAQnB,IAADyV,EAAAC,EAAAC,EAPF,OACGpV,IAAAA,UAAYP,IACb8N,EAAehC,MACf7D,EAAAA,EAAAA,IACEjI,EACA6N,EAAU/B,IAAM,KACd,EAEGyI,QAAQC,OACI,QAAjBiB,EAAA1I,EAAU0C,eAAO,IAAAgG,GAAjBA,EACI/F,+BACAnG,EACE,gDACA,CACEkL,QAKG,QAJDiB,GAAAnQ,EAAAA,EAAAA,IACEsI,EAAU/B,IAAM,IAChB,IACA,UACD,IAAA4J,OAAA,EAJDA,EAIG9D,YAAa,OAGtBrI,EACE,8CACA,CACEkL,QAKG,QAJDkB,GAAApQ,EAAAA,EAAAA,IACEsI,EAAU/B,IAAM,IAChB,IACA,UACD,IAAA6J,OAAA,EAJDA,EAIG/D,YAAa,QAKrB2C,QAAQG,SACjB,IAGJpU,UAEFH,EAAAA,EAAAA,KAACyV,EAAgC,CAC/BlU,IAAuB,QAApBwT,EAAEpH,EAAehC,WAAG,IAAAoJ,OAAA,EAAlBA,EAAoBxT,IAOzBD,IAAuB,QAApB0T,EAAErH,EAAehC,WAAG,IAAAqJ,OAAA,EAAlBA,EAAoB1T,IAOzBoU,YAAa,MACb1O,WAAY,IAuCN0G,EAAU/B,IACV,CAEE,CAAyC,QAAzCsJ,GAAC7P,EAAAA,EAAAA,IAAYsI,EAAU/B,IAAM,IAAK,IAAK,UAAE,IAAAsJ,OAAA,EAAxCA,EACGU,aAAc,CAChB7V,OAAOE,EAAAA,EAAAA,KAACyU,EAAa,MAGzB,CAAC,GAEP/R,SAAWsP,IAENA,GACAvF,EAAKiD,cAAc,2BAGtB2B,GAAuBW,GAEvBvF,EAAK2E,cACH,mBACA,UACD,KAGK,KAKlBjP,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAACC,UAAU,SAASkC,IAAK,MAAOG,MAAM,QAAOpC,SAAA,EAChDgC,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAACC,UAAU,MAAMkC,IAAK,KAAKjC,SAAA,CAC7BiJ,EAAE,+CAAgD,KACnDpJ,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRa,SAAO,EACPnI,KAAM,wBACN+K,cAAc,UAASzV,UAEvBH,EAAAA,EAAAA,KAAC6V,EAAAA,EAAM,CACLR,KAAK,QACL3S,SAAWoT,IACLA,GACFzE,GACE5E,EAAKiD,cAAc,CAAC,WAAY,SAC9B,MAGNjD,EAAK2E,cAAc,mBAAoB,SAAS,UAKxDpR,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRa,SAAO,EACPH,aAAcA,CAACC,EAAM+B,IACnB/B,EAAKrH,SAASE,MAAQkJ,EAAKpJ,SAASE,KACpCmH,EAAK7G,wBACH4I,EAAK5I,sBACR9L,SAEAA,KAAO,IAAD4V,EACL,OACE/V,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRa,SAAO,EACPnI,KAAM,CAAC,WAAY,SAGnBmL,OAAQvJ,EAAKiD,cACX,yBAEFzH,SACEjI,EAAAA,EAAAA,KAAC6T,EAAAA,GAAK,CACJC,QAAS,sCAGbmC,aAAc,CAAC,CAAC,WAAY,QAC5B7D,MAAO,CACL,CACEC,UAAU,GAEZ,CAAC,EACD,CACE2B,UAAWC,MAAOC,EAAMrU,KAAmB,IAADqW,EAAAC,EACxC,GACE/V,IAAAA,QAC2B,QADlB8V,EACPxG,EAAc,mBAAW,IAAAwG,OAAA,EAAzBA,EAA2BvK,MAE7BvL,IAAAA,QAAUP,KACViI,EAAAA,EAAAA,IAC2B,QADLqO,EACpBzG,EAAc,mBAAW,IAAAyG,OAAA,EAAzBA,EAA2BxK,IAC3B9L,IACG,EAEL,OAAOuU,QAAQG,UAEf,MAAMnL,EACJ,gDAEJ,IAGJjJ,UAEFH,EAAAA,EAAAA,KAACyV,EAEC,CACAnU,IAAyB,QAAtByU,EAAEpI,EAAe/B,aAAK,IAAAmK,OAAA,EAApBA,EAAsBzU,IAE3BoU,YAAa,MACbnU,IACEkL,EAAKiD,cAAc,CAAC,WAAY,SAChC,KAEFzI,YAAU,EACVvE,SAAUA,KACR+J,EAAK2E,cACH,mBACA,SACD,KAGK,WAOxBpR,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRa,SAAO,EACPH,aAAcA,CAACC,EAAM+B,KAAU,IAADuB,EAAAC,EAC5B,OACe,QAAbD,EAAAtD,EAAKrH,gBAAQ,IAAA2K,OAAA,EAAbA,EAAexF,oBACA,QADeyF,EAC5BxB,EAAKpJ,gBAAQ,IAAA4K,OAAA,EAAbA,EAAezF,kBAGjBkC,EAAK9G,eAAiB6I,EAAK7I,YAAY,EAEzC7L,SAEDmW,IAAwB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAtB,cAAEnH,GAAe4G,EACjB,MAAMQ,EAAyBpH,EAAc,CAC3C,WACA,oBAEF,OACE1P,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRtH,KAAM,CAAC,WAAY,eACnB/K,MAAOsJ,EAAE,kCACTnB,QAAS,CACP2L,UAAW,QACXvJ,OACErK,EAAAA,EAAAA,KAAC6T,EAAAA,GAAK,CACJC,QAAS,wCAIf1B,MAAO,CACL,CACEC,SAAUlE,EAA8BzO,OAAS,GAEnD,CACE+G,KAAM,SACNnF,KAGG,QAFDiV,EAAA5I,EAAeO,aACb4I,UACD,IAAAP,OAAA,EAFDA,EAEGjV,MAAO,EACZC,IAEC,QAFEiV,EAAE7I,EAAeO,aAClB4I,UACD,IAAAN,OAAA,EAFIA,EAEFjV,KAEL,CACEyS,UAAWC,MAAOC,EAAWrU,IAEzBO,IAAAA,SAAW0W,EAAwB,WACnCrK,EAAKiD,cAAc,iBAAmB,GACtC7P,EAAQ,IAAM,EAEPuU,QAAQC,OACbjL,EACE,2DAIGgL,QAAQG,WAIrB,CACER,YACmB,QADR0C,EACT7J,EAAU0C,eAAO,IAAAmH,OAAA,EAAjBA,EAAmBlH,+BACrByE,UAAWC,MAAOC,EAAWrU,KASxB,IAADkX,EARF,OACE3W,IAAAA,SACEsN,EAAUQ,aACR4I,KAGJjX,EACE6N,EAAUQ,aAAa4I,GAElB1C,QAAQC,OACI,QAAjB0C,EAAAnK,EAAU0C,eAAO,IAAAyH,GAAjBA,EACIxH,+BACAnG,EACE,gDACA,CACEkL,OACE5G,EAAUQ,aACR4I,KAIR1N,EACE,8CACA,CACEkL,OACE5G,EAAUQ,aACR4I,MAMP1C,QAAQG,SACjB,IAGJpU,UAEFH,EAAAA,EAAAA,KAACwU,EAAAA,EAAqB,CACpB7S,YAAa,CACXyB,MAAO,CACL,EAAG,KAECsK,EAAUQ,aAAa4I,GACvB,CACE,CAACpJ,EAAUQ,aACT4I,IACE,CACFhX,OAAOE,EAAAA,EAAAA,KAACyU,EAAa,MAGzB,CAAC,KACDrU,IAAAA,SAGD,QAHWsW,EACZ/I,EAAeO,aACb4I,UACD,IAAAJ,OAAA,EAFDA,EAEGnV,KAED,CAEE,CAEC,QAFDoV,EAAChJ,EAAeO,aACd4I,UACD,IAAAH,OAAA,EAFAA,EAEEpV,KAGA,QAHGqV,EACJjJ,EAAeO,aACb4I,UACD,IAAAF,OAAA,EAFDA,EAEGrV,KAEP,CAAC,GAEP0G,QAAS,CACPC,UAAW,WACT,MAAM,GAANhD,OADelE,UAAAtB,OAAA,QAAAe,IAAAO,UAAA,GAAAA,UAAA,GAAG,EACH,KAAAkE,OAAI8R,EAAAA,GAAqBF,GAC1C,EACAnR,OACEwI,EAA8BzO,QAAU,SAEpCe,IAGVgB,SAC2C,IAAzC0M,EAA8BzO,QAC9BU,IAAAA,QACEqM,EAAKiD,cAAc,CAAC,eAAgB,YAGxCpO,IAAK,EACLC,IACqD,QADlDsV,EACDlJ,EAAeO,aAAa4I,UAAuB,IAAAD,OAAA,EAAnDA,EACItV,IAENC,KACEpB,IAAAA,SAAW0W,EAAwB,WACnCrK,EAAKiD,cAAc,gBAAkB,EACjC,GACA,EAENhN,SAAUA,KACR+J,EAAK2E,cAAc,mBAAoB,SAAS,EAElD1P,iBAAkB,CAChB4D,YACEtF,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRa,SAAO,EACPnI,KAAM,CAAC,WAAY,mBACnBoM,aAAc7W,IAAAA,KAAO2N,GAAkB,GAAG5N,UAE1CH,EAAAA,EAAAA,KAACuF,EAAAA,EAAM,CACLC,UAAW,EACX/D,SAEI,IADF0M,EAA8BzO,QAE9BU,IAAAA,QACEqM,EAAKiD,cAAc,CACjB,eACA,YAINzJ,WACE7F,IAAAA,KAAO2N,GAAoB,OACvBtN,EACA,KAONyW,uBAAuB,EACvBtR,QAASxF,IAAAA,IACP2N,GACA,CAAClO,EAAOgL,KACC,CACLhL,MAAOgL,EACP/K,MACEkX,EAAAA,GAAqBnM,IAAS,OAChCpJ,SACE0M,EAA8BzO,OAC5B,IACDU,IAAAA,KACC+N,GACCE,IAAe,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO/K,OAAQuH,gBAUpC,MAIjB,MAKVyB,GACCtM,EAAAA,EAAAA,KAAC4S,EAAAA,EAAI,CACHpS,MAAO,CACLiS,aAAcvL,EAAMxG,QACpBP,UAEFH,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRa,SAAO,EACPH,aAAcA,CAACC,EAAM+B,IACnB/B,EAAK9G,eAAiB6I,EAAK7I,aAC5B7L,SAEAA,KAEGH,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRtH,KAAM,CAAC,mBACP/K,MAAOsJ,EAAE,uBACTnB,SAASjI,EAAAA,EAAAA,KAAC6T,EAAAA,GAAK,CAACC,QAAS,iCACzBzB,UAAQ,EACRD,MAAO,CACL,CACEC,UAAU,GAEZ,CACE0B,aAAa,EACbC,UAAWC,MAAOC,EAAMrU,IAEpByO,GACAzO,EAAQyO,EAA+BZ,UAEhC0G,QAAQC,OACbjL,EAAE,gDAAiD,CACjDkL,OAAQhG,EAA+BZ,aAIpC0G,QAAQG,YAIrBpU,UAEFH,EAAAA,EAAAA,KAACwU,EAAAA,EAAqB,CACpB9S,iBAAkB,CAChB4D,WAAY,KAEd7D,SAAUgL,EAAKiD,cAAc,gBAAkB,EAC/C/N,YAAa,CACXyB,MAAO,CACL,CAA+B,OAA9BkL,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgChN,KACD,OAA9BgN,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgChN,OAEA,OAA9BgN,QAA8B,IAA9BA,GAAAA,EAAgCZ,UAChC,CACE,CAA+B,OAA9BY,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgCZ,WAAY,CAC3C5N,OAAOE,EAAAA,EAAAA,KAACyU,EAAa,MAGzB,CAAC,EACL,CAA+B,OAA9BnG,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgC/M,KACD,OAA9B+M,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgC/M,MAGtCD,IAAmC,OAA9BgN,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgChN,IACrCC,IAAmC,OAA9B+M,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgC/M,YAO/C,KAEHqL,EAAUuK,SAAS,qBAElBnX,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRrS,MAAOsJ,EAAE,gCACTnB,SACE9F,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAACC,UAAU,SAASqC,MAAM,QAAOpC,SAAA,CACnCiJ,EAAE,gCACHpJ,EAAAA,EAAAA,KAAC6T,EAAAA,GAAK,CAACC,QAAS,qCAChB9T,EAAAA,EAAAA,KAACoX,EAAAA,EAAO,CAAC5W,MAAO,CAAEqH,gBAAiBX,EAAMmQ,eACxCjO,EAAE,+BACHpJ,EAAAA,EAAAA,KAAC6T,EAAAA,GAAK,CAACC,QAAS,sCAGpBzB,UAAQ,EAAAlS,UAERH,EAAAA,EAAAA,KAAC4S,EAAAA,EAAI,CACHpS,MAAO,CACLiS,aAAcvL,EAAMxG,QACpBP,UAEFgC,EAAAA,EAAAA,MAACmV,EAAAA,EAAG,CAACC,OAAQrQ,EAAMsQ,SAASrX,SAAA,EAC1BH,EAAAA,EAAAA,KAACyX,EAAAA,EAAG,CAACC,GAAI,GAAGvX,UAEVH,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CAACtH,KAAM,eAAgBwH,UAAQ,EAAAlS,UACvCgC,EAAAA,EAAAA,MAACwV,EAAAA,GAAAA,MAAW,CACVjV,SAAW8B,IACTiI,EAAKuD,iBAAiBC,OAAM,QAAS,EACrC9P,SAAA,EAEFH,EAAAA,EAAAA,KAAC2X,EAAAA,GAAAA,OAAY,CAAC9X,MAAM,cAAaM,SAC9BiJ,EAAE,kCAELpJ,EAAAA,EAAAA,KAAC2X,EAAAA,GAAAA,OAAY,CAAC9X,MAAM,aAAYM,SAC7BiJ,EAAE,wCAKXpJ,EAAAA,EAAAA,KAACyX,EAAAA,EAAG,CAACC,GAAI,GAAGvX,UACVH,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRa,SAAO,EACPH,aAAcA,CAACC,EAAM+B,IACnB/B,EAAK/G,eAAiB8I,EAAK9I,aAC5B5L,SAEAA,KAAO,IAADyX,EAAAC,EACL,MAAMC,EAA6B1X,IAAAA,IAAM,CACrB,QADqBwX,EACvCjK,EAAejC,WAAG,IAAAkM,OAAA,EAAlBA,EAAoBrW,IACpBuL,EAAsBiL,6BAElBC,EACmC,gBAAvCvL,EAAKiD,cAAc,gBACftG,EAAE,8BACFA,EAAE,yBACR,OACEpJ,EAAAA,EAAAA,KAAC0M,EAAAA,EAAKyF,KAAI,CACRtH,KAAM,eACN/K,MAAOsJ,EAAE,gCACTiJ,UAAQ,EACRD,MAAO,CACL,CACE2B,YACmB,QADR8D,EACTjL,EAAU0C,eAAO,IAAAuI,OAAA,EAAjBA,EAAmBtI,+BACrByE,UAAWC,MAAOC,EAAMrU,KACtB,MAAMoY,EAAS7X,IAAAA,IAAM,CACnBsN,EAAUhC,IACVoB,EAAsBiL,6BAExB,OAAI3X,IAAAA,SAAW6X,IAAWpY,EAAQoY,EACzB7D,QAAQC,OACbjL,EACE,gDACA,CACEkL,OAAQ2D,KAKP7D,QAAQG,SACjB,IAGJpU,UAEFH,EAAAA,EAAAA,KAACwU,EAAAA,EAAqB,CACpBlT,IAAK,EACLE,KAAM,EAEND,IACEnB,IAAAA,SAAW0X,GACPA,OACArX,EAENgB,SAAyC,IAA/BqW,EACVnW,YAAa,CACXyB,MAAO,CACL,EAAG,OAECsK,EAAUhC,IACV,CACE,CAACgC,EAAUhC,KAAM,CACf5L,OAAOE,EAAAA,EAAAA,KAACyU,EAAa,MAGzB,CAAC,KACDrU,IAAAA,SAAW0X,GACX,CACE,CAACA,GACCA,GAEJ,CAAC,GAEP7P,QAAS,CACPC,UAAW,WACT,MAAM,GAANhD,OADelE,UAAAtB,OAAA,QAAAe,IAAAO,UAAA,GAAAA,UAAA,GAAG,EACH,KAAAkE,OAAI8S,EACrB,IAGJtW,iBAAkB,CAChB4D,WAAY0S,GAEdtV,SAAW7C,IACLA,EAAQ,GACV4M,EAAK2E,cAAc,kBAAmB,EACxC,KAGM,eAS3B,EAIDqD,EAA8CA,KAClD,MAAM,MAAEvN,GAAUC,EAAAA,EAAMC,WACxB,OACEpH,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHO,MAAO,CACL0X,SAAU,WACVC,KAAM,GACNC,UAAW,mBACXrY,MAAOmH,EAAMmR,aACbC,QAAS,IACTnY,UAEFH,EAAAA,EAAAA,KAACuY,EAAAA,EAAiB,KACb,EAQX,EAJ4C5Y,EAAAA,KAC1CuM,E,gDC5xCF,MAAMsM,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,iBAChB,KAAQ,cACR,KAAQ,mBACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,iBACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,gBACR,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAuB,GACvB,KAAQ,WACR,SAAY,KACZ,KAAQ,4BACR,WAAeA,EACf,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAuB,GACvB,KAAQ,YACR,KAAQ,4BACR,WAAeA,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,4BACR,cAAiB,QACjB,KAAQ,sHAGZ,CA7D+B,GA+D9BD,EAAaE,KAAO,mCAErB,S,gDC/DA,MAAMF,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,cAGZE,EAAK,CACH,CACE,MAAS,KACT,KAAQ,CACN,CACE,KAAQ,WACR,KAAQ,aACR,aAAgB,cAGpB,aAAgB,UAChB,KAAQ,cACR,KAAQ,UACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,kBACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,mBACR,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAwBF,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,+BACR,WAAeE,EACf,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBF,EACxB,KAAQ,YACR,KAAQ,+BACR,WAAeE,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,+BACR,cAAiB,QACjB,KAAQ,qKAGZ,CA1E+B,GA4E9BH,EAAaE,KAAO,mCAErB,S,gDC/EA,MAAMF,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,SAGZE,EAAK,CACH,CACE,MAAS,KACT,KAAQ,CACN,CACE,KAAQ,WACR,KAAQ,OACR,aAAgB,SAGpB,aAAgB,wBAChB,KAAQ,cACR,KAAQ,0BACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,6BACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,0BACR,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAwBF,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,6CACR,WAAeE,EACf,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBF,EACxB,KAAQ,YACR,KAAQ,6CACR,WAAeE,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,6CACR,cAAiB,QACjB,KAAQ,6LAGZ,CAnE+B,GAqE9BH,EAAaE,KAAO,mCAErB,S,uGCpFO,MAAME,EAA0B,SACrCC,GAII,IAHJjT,EAAqB5E,UAAAtB,OAAA,QAAAe,IAAAO,UAAA,GAAAA,UAAA,GAAG,CACtB+I,YAAa,qBAGf,MAAOtB,EAAUC,IAAkBC,EAAAA,EAAAA,IAAkB,UAC/C,QAAEmQ,IAAYlP,EAAAA,EAAAA,uBAAgB,IAAAmP,EAAAA,EAAAA,EAAAjP,EAAA,OAUlC,CACE+O,UAAWA,GAEb,IACKjT,EACH6C,SAAUA,EAAW7C,EAAQ6C,WAQjC,MAAO,CAACqQ,EAAS,CAAEE,SAJHC,EAAAA,EAAAA,cAAY,KAC1BvQ,GAAgB,GACf,CAACA,KAGN,EAEasE,EAA+C,WAItD,IAHJpH,EAAqB5E,UAAAtB,OAAA,QAAAe,IAAAO,UAAA,GAAAA,UAAA,GAAG,CACtB+I,YAAa,qBAGf,MAAOtB,EAAUC,IAAkBC,EAAAA,EAAAA,IAAkB,SAC/CiE,GAAYC,EAAAA,EAAAA,OACXiM,GAAWF,EAAiC,OAAThM,QAAS,IAATA,OAAS,EAATA,EAAW0C,QAAQuJ,YAEvD,wBAAEK,IACNtP,EAAAA,EAAAA,uBAAgB,IAAAuP,EAAAA,EAAAA,EAAArP,EAAA,OASd,CACEe,MAAa,OAAPiO,QAAO,IAAPA,OAAO,EAAPA,EAASM,kBAAmB,IAEpC,IACKxT,EACH6C,SAAUA,EAAW7C,EAAQ6C,WAI7BuQ,GAAUC,EAAAA,EAAAA,cAAY,KAC1BvQ,GAAgB,GACf,CAACA,IAEJ,MAAO,CACL,CACEoE,sBAAwBoM,GAA2B,CAAC,EAGpDJ,QAAUA,GAAW,CAAC,EACtB/L,yBAA0B,CACxBxL,IAAKnB,IAAAA,IAAM,EACR8Y,GAA2B,CAAC,GAAGG,wBAChC,IAEF3L,YACIwL,GAA2B,CAAC,GAAGG,yBAA2B,KAC1DP,GAAW,CAAC,GAAGQ,kBAAoB,KAG3C,CAAEN,WAEN,C,kHCTO,MAAMnL,EAA+BtO,IAI9B,IAADga,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5J,EAAA6J,EAAAC,EAAAC,EAAA9J,EAAAE,EAAAc,EAAAC,EAAAgE,EAAA8E,EAAAC,EAAA,IAJgC,aAC3CjN,EAAY,qBACZG,EAAoB,mBACpBM,GACMvO,EACN,MAAMqN,GAAYC,EAAAA,EAAAA,OACX3D,IAAiBC,EAAAA,EAAAA,MAClB4E,EAAmB3N,IAAAA,KAAO8I,EAAe,CAAC,MAAO,MAAO,WAG5DqR,KAAM3M,EAAe,QACrB4M,EAAO,aACPC,IACEC,EAAAA,EAAAA,GAAgC,CAClCC,SAAU,CAAC,gBAAiB7M,EAAoBN,GAChDoN,QAASA,IACHpN,EACKZ,EAAUiO,eACdC,MAAM,CACLC,MAAOjN,EACPkN,cAAexN,IAEhByC,OAAM,cAET,EAGJgL,UAAW,EACXC,UAAU,IAINzN,GAC0D,QAA9D8L,EAAAnZ,IAAAA,KAAmB,OAAZiN,QAAY,IAAZA,OAAY,EAAZA,EAAce,iBAAkB+M,GAAiB,SAAV,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG7X,cAAc,IAAAiW,OAAA,EAA9DA,EAAgEjY,MAAO,KAEnE8Z,EAMF,CAEF1P,IACGtL,IAAAA,QACgB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtC4L,EAAf5L,EAAiByN,eAAe7N,UAAqB,IAAAgM,GAAO,QAAPC,EAArDD,EAAuD8B,aAAK,IAAA7B,OAA7C,EAAfA,EAA8D/N,MAE/DtL,IAAAA,QACgB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtC8L,EAAf9L,EAAiByN,eAAe7N,UAAqB,IAAAkM,GAAW,QAAXC,EAArDD,EAAuDhM,iBAAS,IAAAiM,OAAjD,EAAfA,EAAkEjO,UAShEjL,EAPAL,IAAAA,SACiB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtCgM,EAAfhM,EAAiByN,eAAe7N,UAAqB,IAAAoM,OAAtC,EAAfA,EAAuD0B,MAAM5P,KAE/DtL,IAAAA,SACiB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtCiM,EAAfjM,EAAiByN,eAAe7N,UAAqB,IAAAqM,OAAtC,EAAfA,EAAuDnM,UACpDhC,KAGXC,IACGvL,IAAAA,QACgB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtCkM,EAAflM,EAAiByN,eAAe7N,UAAqB,IAAAsM,GAAO,QAAPC,EAArDD,EAAuDwB,aAAK,IAAAvB,OAA7C,EAAfA,EAA8DpO,MAE/DvL,IAAAA,QACgB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtCoM,EAAfpM,EAAiByN,eAAe7N,UAAqB,IAAAwM,GAAW,QAAXC,EAArDD,EAAuDtM,iBAAS,IAAAuM,OAAjD,EAAfA,EAAkEtO,UAchElL,GADC,QAXD4P,GAAAjL,EAAAA,EAAAA,IACEhF,IAAAA,SACiB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtCsM,EAAftM,EAAiByN,eAAe7N,UAAqB,IAAA0M,OAAtC,EAAfA,EAAuDoB,MAAM3P,KAE7DvL,IAAAA,SACiB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtCuM,EAAfvM,EAAiByN,eAAe7N,UAAqB,IAAA2M,OAAtC,EAAfA,EAAuDzM,UACpD/B,KAEL,IACF,IACA,UACD,IAAA0E,OAAA,EAXDA,EAWGsF,aAAc,IAEvBzH,aAAc9N,IAAAA,OACZ2N,GACA,CAACwN,EAAQ1b,EAAOyD,KAAS,IAADkY,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAwBtB,OAvBAN,EAAOjY,GACJlD,IAAAA,QAEgB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtC4N,EAAf5N,EAAiByN,eAAe7N,UAAqB,IAAAgO,GAAO,QAAPC,EAArDD,EAAuDF,aAAK,IAAAG,OAA7C,EAAfA,EAA+DnY,KAEhElD,IAAAA,QAEgB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtC8N,EAAf9N,EAAiByN,eAAe7N,UAAqB,IAAAkO,GAAW,QAAXC,EAArDD,EAAuDhO,iBAAS,IAAAiO,OAAjD,EAAfA,EACErY,SAcA7C,EAXAL,IAAAA,SAEiB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtCgO,EAAfhO,EAAiByN,eAAe7N,UAAqB,IAAAoO,OAAtC,EAAfA,EAAuDN,MACrDhY,IAGJlD,IAAAA,SAEiB,OAAfwN,QAAe,IAAfA,GAAqD,QAAtCiO,EAAfjO,EAAiByN,eAAe7N,UAAqB,IAAAqO,OAAtC,EAAfA,EACInO,UAAUpK,IAGfiY,CAAM,GAEf,CAAC,IAKC5N,EAAuC,CAC3CjC,SACyBjL,KAAV,OAAbyI,QAAa,IAAbA,OAAa,EAAbA,EAAewC,UACXjL,EACA,CACEa,IAAKlB,IAAAA,IAAM,CACTA,IAAAA,UACgE,QAA9Dga,EAAAha,IAAAA,KAAmB,OAAZiN,QAAY,IAAZA,OAAY,EAAZA,EAAce,iBAAkB+M,GAAiB,SAAV,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG7X,cAAc,IAAA8W,OAAA,EAA9DA,EACI9Y,MAAO,OAGfC,IAAKnB,IAAAA,IAAM,CACTwM,EAAU0C,QAAQwM,wBAClBC,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiBoO,eAAetQ,KAC5CqQ,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiBqO,aAAavQ,KACjB,OAAzB0P,QAAyB,IAAzBA,OAAyB,EAAzBA,EAA2B1P,OAGrCC,SACyBlL,KAAV,OAAbyI,QAAa,IAAbA,OAAa,EAAbA,EAAeyC,UACXlL,EACA,CAGEa,KAEE2Q,EAAAA,EAAAA,IACE7R,IAAAA,IAAM,CAC8B,QAD9BkQ,GACJlL,EAAAA,EAAAA,IAAYqI,EAAkB,YAAI,IAAA6C,OAAA,EAAlCA,EAAoCjL,OACK,QADCmL,GAC1CpL,EAAAA,EAAAA,IAAYmG,EAAAA,GAAyB,YAAI,IAAAiF,OAAA,EAAzCA,EAA2CnL,OAC3C,IACG,IACLkG,EAAAA,IAEJhK,IAEEnB,IAAAA,IAAM,CACJwM,EAAU0C,QAAQ4M,sBAClBH,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiBoO,eAAerQ,OAIzC,QAJ6C2F,GAC9ClM,EAAAA,EAAAA,IACE2W,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiBoO,eAAerQ,KAAO,GACnD,YACD,IAAA2F,OAAA,EAHDA,EAGGjM,QACL0W,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiBqO,aAAatQ,OAIvC,QAJ2C4F,GAC5CnM,EAAAA,EAAAA,IACE2W,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiBqO,aAAatQ,KAAO,GACjD,YACD,IAAA4F,OAAA,EAHDA,EAGGlM,SAEoB,OAAzB+V,QAAyB,IAAzBA,OAAyB,EAAzBA,EAA2BzP,OAC4B,QADzB4J,GAC5BnQ,EAAAA,EAAAA,KAAqC,OAAzBgW,QAAyB,IAAzBA,OAAyB,EAAzBA,EAA2BzP,KAAM,GAAI,YAAI,IAAA4J,OAAA,EAArDA,EAAuDlQ,UACtD,KAYf6I,aAAc9N,IAAAA,OACZ2N,GACA,CAACwN,EAAQ1b,EAAOyD,KAAS,IAAD6Y,EAAAtL,EACtB,MAAMuL,EACJ,CACE,cAAe,6BACf,cAAe,4BACf,cAAe,6BACf,aAAc,4BACd,aAAc,4BACd,cAAe,6BACf,gBAAiB,+BACjB,wBAAyB,uCACzB9Y,IAAQ,cAgBZ,OAfAiY,EAAOjY,GAAO,CACZhC,IAAKyQ,UAMF,QALDoK,EAAA/b,IAAAA,OACc,OAAZiN,QAAY,IAAZA,OAAY,EAAZA,EAAce,iBACbiO,IACgC,OAAxBA,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0B/Y,OAAQA,WAE5C,IAAA6Y,GAAK,QAALtL,EALDsL,EAKI,UAAE,IAAAtL,OAAL,EALDA,EAKQvP,MAAO,KAEjBC,IAAKnB,IAAAA,IAAM,CACTwM,EAAU0C,QAAQ8M,IAAe,EAEjChB,EAA0BlN,aAAa5K,MAGpCiY,CAAM,GAEf,CAAC,IAGC7N,EAA4B,CAChCQ,aAAc9N,IAAAA,OACZ2N,GACA,CAACwN,EAAQ1b,EAAOyD,KAAS,IAADgZ,EAUtB,OATAf,EAAOjY,GAQH,QAROgZ,EACTlc,IAAAA,IAAM,CAEJA,IAAAA,SAA0B,OAAfwN,QAAe,IAAfA,OAAe,EAAfA,EAAiB2O,kBAAkBjZ,IAE9ClD,IAAAA,SAA0B,OAAfwN,QAAe,IAAfA,OAAe,EAAfA,EAAiB4O,gBAAgBlZ,IAE5ClD,IAAAA,SAA0B,OAAfwN,QAAe,IAAfA,OAAe,EAAfA,EAAiB6O,wBAAwBnZ,aACpD,IAAAgZ,EAAAA,EAAIzK,OAAO6K,iBACRnB,CAAM,GAEf,CAAC,GAEH7P,IAKI,QALD2O,EACDja,IAAAA,IAAM,CACJ2b,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiB2O,kBAAkB7Q,KAC/CqQ,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiB4O,gBAAgB9Q,KAC7CqQ,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiB6O,wBAAwB/Q,cACrD,IAAA2O,EAAAA,EAAIxI,OAAO6K,iBACf/Q,IAKI,QALD2O,EACDla,IAAAA,IAAM,CACJ2b,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiB2O,kBAAkB5Q,KAC/CoQ,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiB4O,gBAAgB7Q,KAC7CoQ,EAA2B,OAAfnO,QAAe,IAAfA,OAAe,EAAfA,EAAiB6O,wBAAwB9Q,cACrD,IAAA2O,EAAAA,EAAIzI,OAAO6K,kBAGjB,MAAO,CACL,CACEtB,4BACAzN,iBACAD,YACAD,mBACAgN,eACA7M,mBAEF,CACE4M,WAEH,EAGGuB,EAAe1N,QACL5N,IAAV4N,GAEiB,aAAVA,GAEU,QAAVA,OAHT,EAMOjO,IAAAA,SAAWiO,E","sources":["components/DoubleTag.tsx","components/ImageMetaIcon.tsx","components/InputNumberWithSlider.tsx","components/DynamicUnitInputNumber.tsx","components/DynamicUnitInputNumberWithSlider.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/__generated__/ResourcePresetSelectQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql.ts","hooks/hooksUsingRelay.tsx","hooks/useResourceLimitAndRemaining.tsx"],"sourcesContent":["import Flex from './Flex';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: ValueType;\n  color?: string;\n};\n\ntype ValueType = string | React.ReactNode;\nconst DoubleTag: React.FC<{\n  values?: ValueType[] | DoubleTagObjectValue[];\n}> = ({ values = [] }) => {\n  if (values.length === 0) return null;\n  let objectValues: DoubleTagObjectValue[];\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) => {\n        return (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {objValue.label}\n          </Tag>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n  alt?: string | null;\n}> = ({ image, style = {} }, bordered, alt = '') => {\n  const [, { getImageIcon }] = useBackendAIImageMetaData();\n\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: '1em',\n        height: '1em',\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","import Flex from './Flex';\nimport { useControllableValue } from 'ahooks';\nimport { InputNumber, Slider, InputNumberProps, SliderSingleProps } from 'antd';\nimport { SliderRangeProps } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\n\ntype OmitControlledProps<T> = Omit<T, 'value' | 'onChange'>;\n\ninterface InputNumberWithSliderProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  disabled?: boolean;\n  value?: number;\n  onChange?: (value: number) => void;\n  inputNumberProps?: OmitControlledProps<InputNumberProps>;\n  sliderProps?:\n    | OmitControlledProps<SliderSingleProps>\n    | OmitControlledProps<SliderRangeProps>;\n}\nconst InputNumberWithSlider: React.FC<InputNumberWithSliderProps> = ({\n  min,\n  max,\n  step,\n  disabled,\n  inputNumberProps,\n  sliderProps,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableValue(otherProps);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    // when step is 1, make sure the value is integer\n    if (step === 1 && value % 1 !== 0) {\n      setValue(_.max([Math.round(value), min]));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [step]);\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        align=\"stretch\"\n        direction=\"column\"\n      >\n        <InputNumber\n          ref={inputRef}\n          max={max}\n          min={min}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={setValue}\n          onBlur={() => {\n            if (_.isNumber(step) && step > 0) {\n              const decimalCount = step.toString().split('.')[1]?.length || 0;\n              setValue(\n                _.max([\n                  _.toNumber(\n                    (\n                      Math.round(\n                        _.toNumber(inputRef.current?.value || '0') / step,\n                      ) * step\n                    ).toFixed(decimalCount),\n                  ),\n                  min,\n                ]),\n              );\n            }\n          }}\n          {...inputNumberProps}\n        />\n      </Flex>\n      <Flex direction=\"column\" align=\"stretch\" style={{ flex: 3 }}>\n        <Slider\n          max={max}\n          min={0}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={(value: any) => {\n            if (min !== undefined && value < min) {\n              return;\n            } else {\n              setValue(value);\n            }\n          }}\n          {...sliderProps}\n          // remove marks that are greater than max\n          marks={_.omitBy(sliderProps?.marks, (option, key) => {\n            return _.isNumber(max) ? _.parseInt(key) > max : false;\n          })}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default InputNumberWithSlider;\n","import { iSizeToSize, parseUnit } from '../helper';\nimport { useControllableValue, usePrevious } from 'ahooks';\nimport { InputNumber, InputNumberProps, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nexport interface DynamicUnitInputNumberProps\n  extends Omit<\n    InputNumberProps,\n    'step' | 'max' | 'min' | 'value' | 'onChange'\n  > {\n  dynamicSteps?: number[];\n  disableAutoUnit?: boolean;\n  max?: string;\n  min?: string;\n  value?: string | null | undefined;\n  units?: string[];\n  roundStep?: number;\n  onChange?: (value: string) => void;\n}\n\nconst DynamicUnitInputNumber: React.FC<DynamicUnitInputNumberProps> = ({\n  dynamicSteps = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],\n  units = ['m', 'g', 't', 'p'],\n  disableAutoUnit = false,\n  min = '0m',\n  max = '300p',\n  roundStep,\n  ...inputNumberProps\n}) => {\n  const [value, setValue] = useControllableValue<string | null | undefined>(\n    inputNumberProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const [numValue, _unitFromValue] =\n    value === null || value === undefined ? [null, null] : parseUnit(value);\n  const previousUnit = usePrevious(_unitFromValue);\n  const unit = _unitFromValue || previousUnit || units[0];\n\n  const [minNumValue, minUnit] = parseUnit(min);\n  const [maxNumValue, maxUnit] = parseUnit(max);\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const onInput = (e: Event) => {\n        // @ts-ignore\n        const value = e?.target?.value;\n        if (/^\\d+(g|m)$/.test(value)) {\n          // const [newNumber, newUnit] = parseUnit(value);\n          // if (newNumber === numValue && newUnit === unit) {\n          //   e.target.value = numValue;\n          // } else {\n          setValue(value);\n          // }\n        }\n      };\n      const target = ref.current;\n      target?.addEventListener('input', onInput);\n      return () => {\n        target?.removeEventListener('input', onInput);\n      };\n    }\n  }, [ref, numValue, _unitFromValue, setValue]);\n\n  return (\n    <InputNumber\n      ref={ref}\n      {...inputNumberProps}\n      onBlur={() => {\n        if (_.isNumber(roundStep) && roundStep > 0) {\n          const decimalCount = roundStep.toString().split('.')[1]?.length || 0;\n          if (\n            isNaN(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n                roundStep,\n            )\n          ) {\n            return;\n          }\n          setValue(\n            `${(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n              roundStep\n            ).toFixed(decimalCount)}${unit}`,\n          );\n        }\n      }}\n      value={numValue}\n      onChange={(newValue) => {\n        if (newValue === null || newValue === undefined) {\n          setValue(newValue);\n        } else {\n          setValue(`${newValue}${unit}`);\n        }\n      }}\n      //TODO: When min and max have different units, they should be calculated and put in.\n      // 입력의 초소단위 확인 0.4g 가 되는지 확인\n      // @ts-ignore\n      max={maxUnit === unit ? maxNumValue : iSizeToSize(max, unit).number}\n      min={\n        minUnit === unit\n          ? minNumValue\n          : // @ts-ignore\n            iSizeToSize(min, unit).number\n      }\n      addonAfter={\n        <Select\n          tabIndex={-1}\n          value={unit}\n          onChange={(newUnit) => {\n            setValue(`${numValue}${newUnit}`);\n          }}\n          onDropdownVisibleChange={(open) => {\n            // A null or undefined value doesn't have a unit info, so we need to set the value before setting the unit.\n            if ((open && value === null) || value === undefined) {\n              setValue(`0${unit}`);\n            }\n          }}\n          options={_.map(units, (unit) => ({\n            value: unit,\n            label: (\n              <Typography.Text\n                style={{\n                  fontFamily:\n                    \"'SFMono-Regular',Consolas,'Liberation Mono',Menlo,Courier,monospace\",\n                }}\n              >\n                {unit.toUpperCase() + 'iB'}\n              </Typography.Text>\n            ),\n          }))}\n          suffixIcon={units.length > 1 ? undefined : null}\n          open={units.length > 1 ? undefined : false}\n          style={{\n            cursor: units.length > 1 ? undefined : 'default',\n          }}\n        />\n      }\n      step={0} // this step applies when onStep doesn't setValue\n      onStep={(afterStepValue, info) => {\n        const numValueNotNull =\n          _.isNull(numValue) || _.isUndefined(numValue) ? 0 : numValue;\n        const index = _.sortedIndex(_.sortBy(dynamicSteps), numValueNotNull);\n        let nextIndex: number;\n        if (info.type === 'up') {\n          if (numValueNotNull === dynamicSteps[index]) {\n            nextIndex = index + 1;\n          } else {\n            nextIndex = index;\n          }\n        } else {\n          nextIndex = index - 1;\n        }\n\n        const currentUnitIndex = units.indexOf(unit);\n        if (!disableAutoUnit && nextIndex < 0) {\n          // WHEN MOVING TO MORE Smaller Unit: change unit and number\n          if (currentUnitIndex === 0) {\n            // if already at min unit, set to 0\n            setValue(`0${unit}`);\n          } else {\n            const nextValue = dynamicSteps[dynamicSteps.length - 1];\n            const nextUnit = units[currentUnitIndex - 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else if (!disableAutoUnit && nextIndex > dynamicSteps.length - 1) {\n          // WHEN MOVING TO MORE Bigger Unit: change unit and number\n          //  if already at max unit, step up/down by 1\n          if (currentUnitIndex === units.length - 1) {\n            setValue(\n              `${numValueNotNull + (info.type === 'up' ? 1 : -1)}${maxUnit}`,\n            );\n          } else {\n            const nextValue = dynamicSteps[0];\n            const nextUnit = units[currentUnitIndex + 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else {\n          // WHEN, DON'T NEED TO CHANGE UNIT\n          if (nextIndex >= 0 && nextIndex < dynamicSteps.length) {\n            let nextNumValue = dynamicSteps[nextIndex];\n            if (minUnit === unit && nextNumValue < minNumValue) {\n              nextNumValue = minNumValue;\n            } else if (maxUnit === unit && nextNumValue > maxNumValue) {\n              nextNumValue = maxNumValue;\n            }\n            setValue(`${nextNumValue}${unit}`);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DynamicUnitInputNumber;\n","import { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport DynamicUnitInputNumber, {\n  DynamicUnitInputNumberProps,\n} from './DynamicUnitInputNumber';\nimport Flex from './Flex';\nimport { useControllableValue } from 'ahooks';\nimport { Slider, theme } from 'antd';\nimport { SliderMarks } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useMemo } from 'react';\n\nexport interface DynamicUnitInputNumberWithSliderProps\n  extends DynamicUnitInputNumberProps {\n  extraMarks?: SliderMarks;\n  hideSlider?: boolean;\n  warn?: string;\n  step?: number;\n}\nconst DynamicUnitInputNumberWithSlider: React.FC<\n  DynamicUnitInputNumberWithSliderProps\n> = ({\n  min = '0m',\n  max = '32g',\n  warn,\n  units = ['m', 'g'],\n  extraMarks,\n  hideSlider,\n  step = 0.05,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableValue<string | undefined | null>(\n    otherProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const { token } = theme.useToken();\n  const minGiB = useMemo(() => iSizeToSize(min, 'g', 2), [min]);\n  const maxGiB = useMemo(() => iSizeToSize(max, 'g', 2), [max]);\n  const valueGiB = useMemo(() => iSizeToSize(value || '0g', 'g', 2), [value]);\n\n  // const warnPercent = useMemo(() => {\n  //   return warn\n  //     ? ((iSizeToSize(warn, 'g', 2)?.number || 0) / (maxGiB?.number || 1)) * 100\n  //     : undefined;\n  // }, [warn, maxGiB?.number]);\n  // console.log('##marks', marks);\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        direction=\"column\"\n        align=\"stretch\"\n      >\n        <DynamicUnitInputNumber\n          {...otherProps}\n          min={min}\n          max={max}\n          units={units}\n          value={value}\n          onChange={(nextValue) => {\n            setValue(nextValue);\n          }}\n          style={{\n            minWidth: 130,\n          }}\n          roundStep={step}\n        />\n      </Flex>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 3,\n          ...(hideSlider && {\n            visibility: 'hidden',\n            height: 0,\n          }),\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {/* {warn && (\n            <Flex\n              direction=\"row\"\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 14.5,\n                width: '100%',\n                height: 4,\n                padding: '0 5px',\n              }}\n              align=\"start\"\n            >\n              <div\n                style={{\n                  width: warnPercent + '%',\n                  height: 4,\n                }}\n              ></div>\n              <div\n                style={{\n                  marginTop: 3,\n                  marginLeft: -3.5,\n                  width: 0,\n                  height: 0,\n\n                  borderTop: '4px solid transparent',\n                  borderLeft: '4px solid transparent',\n                  borderRight: '4px solid transparent',\n                  borderBottom: `7px solid ${token.colorWarning}`,\n                }}\n              ></div>\n            </Flex>\n          )} */}\n          <Slider\n            max={maxGiB?.number}\n            styles={{\n              track:\n                (warn && {\n                  backgroundColor:\n                    compareNumberWithUnits(warn, value || '0b') < 0\n                      ? token.colorWarning\n                      : undefined,\n                }) ||\n                undefined,\n              rail: {\n                // backgroundColor:'red',\n                // fill: 'red',\n              },\n            }}\n            step={step}\n            // min={minGiB.number}  // DO NOT use min, because slider left should be 0\n            value={valueGiB?.number}\n            tooltip={{\n              formatter: (value = 0) => {\n                return value < 1\n                  ? `${(value * 1024).toFixed(2)} MiB`\n                  : `${value.toFixed(2)} GiB`;\n              },\n            }}\n            onChange={(newNumValue) => {\n              if (minGiB?.number && minGiB.number > newNumValue) {\n                setValue(min);\n              } else {\n                setValue(\n                  newNumValue < 1\n                    ? `${newNumValue * 1024}m`\n                    : `${newNumValue}g`,\n                );\n              }\n            }}\n            marks={{\n              // 0: {\n              //   style: {\n              //     color: token.colorTextSecondary,\n              //   },\n              //   label: 0,\n              // },\n              ...(minGiB &&\n                _.isNumber(minGiB?.number) && {\n                  [minGiB.number]: {\n                    style: {\n                      color: token.colorTextSecondary,\n                    },\n                    // if 0, without unit\n                    label:\n                      minGiB.number === 0\n                        ? minGiB.number\n                        : minGiB.number >= 1\n                          ? minGiB.number + 'g'\n                          : minGiB.number * 1024 + 'm',\n                  },\n                }),\n              // extra: remaining mark code should be located before max mark code to prevent overlapping when it is same value\n              ..._.omitBy(extraMarks, (option, key) => {\n                return _.isNumber(maxGiB?.number)\n                  ? _.parseInt(key) > (maxGiB?.number as number)\n                  : false;\n              }),\n              ...(maxGiB?.number && {\n                [maxGiB.number]: {\n                  style: {\n                    color: token.colorTextSecondary,\n                  },\n                  label:\n                    maxGiB.number === 0\n                      ? maxGiB.number\n                      : maxGiB.number >= 1\n                        ? maxGiB.number + 'g'\n                        : maxGiB.number * 1024 + 'm',\n                },\n              }),\n            }}\n          />\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default DynamicUnitInputNumberWithSlider;\n","import { useUpdatableState } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport {\n  ResourcePresetSelectQuery,\n  ResourcePresetSelectQuery$data,\n} from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport { useControllableValue, useThrottleFn } from 'ahooks';\nimport { Select, Tooltip, theme } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\n\nexport type ResourcePreset = NonNullable<\n  NonNullable<ResourcePresetSelectQuery$data['resource_presets']>[number]\n>;\nexport interface ResourcePresetSelectProps\n  extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n  allocatablePresetNames?: string[];\n  showMinimumRequired?: boolean;\n  showCustom?: boolean;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  allocatablePresetNames,\n  showCustom,\n  showMinimumRequired,\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [resourceSlots] = useResourceSlots();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const [controllableValue, setControllableValue] =\n    useControllableValue(selectProps);\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n\n  return (\n    <Select\n      loading={isPendingUpdate}\n      options={[\n        ...(showCustom\n          ? [\n              {\n                value: 'custom',\n                label: (\n                  <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n                    <EditOutlined /> {t('session.launcher.CustomAllocation')}\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.CustomAllocation'),\n              },\n            ]\n          : []),\n        ...(showMinimumRequired\n          ? [\n              {\n                value: 'minimum-required',\n                label: (\n                  <Flex gap={'xs'}>\n                    {t('session.launcher.MiniumAllocation')}\n                    <Tooltip\n                      title={t('session.launcher.MiniumAllocationTooltip')}\n                    >\n                      <InfoCircleOutlined\n                        style={{\n                          color: token.colorTextSecondary,\n                        }}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.MiniumAllocation'),\n              },\n            ]\n          : []),\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset, index) => {\n            const slotsInfo: {\n              [key in string]: string;\n            } = JSON.parse(preset?.resource_slots);\n            const disabled = allocatablePresetNames\n              ? !allocatablePresetNames.includes(preset?.name || '')\n              : undefined;\n            return {\n              value: preset?.name,\n              label: (\n                <Flex direction=\"row\" justify=\"between\" gap={'xs'}>\n                  {preset?.name}\n                  <Flex\n                    direction=\"row\"\n                    gap={'xxs'}\n                    style={\n                      {\n                        // color: 'black',\n                        // opacity: isAvailable ? 1 : 0.4,\n                      }\n                    }\n                  >\n                    {_.map(\n                      _.omitBy(slotsInfo, (slot, key) =>\n                        // @ts-ignore\n                        _.isEmpty(resourceSlots[key]),\n                      ),\n                      (slot, key) => {\n                        return (\n                          <ResourceNumber\n                            key={key}\n                            // @ts-ignore\n                            type={key}\n                            value={slot}\n                            hideTooltip\n                          />\n                        );\n                      },\n                    )}\n                  </Flex>\n                </Flex>\n              ),\n              preset,\n              disabled: disabled,\n            };\n            // sort by disabled\n          }).sort((a, b) =>\n            a.disabled === b.disabled ? 0 : a.disabled ? 1 : -1,\n          ),\n        },\n      ]}\n      showSearch\n      // Set props from parent and override it\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValue}\n      optionLabelProp={\n        _.includes(['custom', 'minimum-required'], controllableValue)\n          ? 'selectedLabel'\n          : 'label'\n      }\n      onDropdownVisibleChange={(open) => {\n        selectProps.onDropdownVisibleChange &&\n          selectProps.onDropdownVisibleChange(open);\n        if (open) {\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import {\n  addNumberWithUnits,\n  compareNumberWithUnits,\n  iSizeToSize,\n} from '../helper';\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { useCurrentKeyPairResourcePolicyLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport { useResourceLimitAndRemaining } from '../hooks/useResourceLimitAndRemaining';\nimport DynamicUnitInputNumberWithSlider from './DynamicUnitInputNumberWithSlider';\nimport Flex from './Flex';\nimport { ImageEnvironmentFormInput } from './ImageEnvironmentSelectFormItems';\nimport InputNumberWithSlider from './InputNumberWithSlider';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { ACCELERATOR_UNIT_MAP } from './ResourceNumber';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport {\n  Card,\n  Col,\n  Divider,\n  Form,\n  Radio,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport const AUTOMATIC_DEFAULT_SHMEM = '64m';\nexport const RESOURCE_ALLOCATION_INITIAL_FORM_VALUES = {\n  resource: {\n    cpu: 0,\n    mem: '0g',\n    shmem: '0g',\n    accelerator: 0,\n  },\n  num_of_sessions: 1,\n  cluster_mode: 'single-node',\n  cluster_size: 1,\n  enabledAutomaticShmem: true,\n};\n\nexport interface ResourceAllocationFormValue {\n  resource: {\n    cpu: number;\n    mem: string;\n    shmem: string;\n    accelerator: number;\n    acceleratorType: string;\n  };\n  resourceGroup: string;\n  num_of_sessions?: number;\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  enabledAutomaticShmem: boolean;\n  allocationPreset?: string;\n}\n\ntype MergedResourceAllocationFormValue = ResourceAllocationFormValue &\n  ImageEnvironmentFormInput;\n\ninterface ResourceAllocationFormItemsProps {\n  enableNumOfSessions?: boolean;\n  enableResourcePresets?: boolean;\n  forceImageMinValues?: boolean;\n}\n\nconst ResourceAllocationFormItems: React.FC<\n  ResourceAllocationFormItemsProps\n> = ({\n  enableNumOfSessions,\n  enableResourcePresets,\n  forceImageMinValues = false,\n}) => {\n  const form = Form.useFormInstance<MergedResourceAllocationFormValue>();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n\n  const [{ keypairResourcePolicy, sessionLimitAndRemaining }] =\n    useCurrentKeyPairResourcePolicyLazyLoadQuery();\n\n  const currentProject = useCurrentProjectValue();\n\n  const [isPendingCheckResets, startCheckRestsTransition] = useTransition();\n  const currentImage = Form.useWatch(['environments', 'image'], {\n    form,\n    preserve: true,\n  });\n  const currentResourceGroup = Form.useWatch('resourceGroup', {\n    form,\n    preserve: true,\n  });\n  const [{ currentImageMinM, remaining, resourceLimits, checkPresetInfo }] =\n    useResourceLimitAndRemaining({\n      currentProjectName: currentProject.name,\n      currentResourceGroup: currentResourceGroup,\n      currentImage: currentImage,\n    });\n\n  const acceleratorSlots = _.omitBy(resourceSlots, (value, key) => {\n    if (['cpu', 'mem', 'shmem'].includes(key)) return true;\n\n    if (\n      !resourceLimits.accelerators[key]?.max ||\n      resourceLimits.accelerators[key]?.max === 0\n    )\n      return true;\n    return false;\n  });\n\n  const currentImageAcceleratorLimits = _.filter(\n    currentImage?.resource_limits,\n    (limit) =>\n      limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n  );\n\n  const sessionSliderLimitAndRemaining = {\n    min: 1,\n    max: sessionLimitAndRemaining.max,\n    remaining: sessionLimitAndRemaining.remaining,\n  };\n\n  const allocatablePresetNames = useMemo(() => {\n    const byPresetInfo = _.filter(checkPresetInfo?.presets, (preset) => {\n      return preset.allocatable;\n    }).map((preset) => preset.name);\n\n    const bySliderLimit = _.filter(checkPresetInfo?.presets, (preset) => {\n      if (\n        typeof preset.resource_slots.mem === 'string' &&\n        typeof resourceLimits.mem?.max === 'string' &&\n        compareNumberWithUnits(\n          preset.resource_slots.mem,\n          resourceLimits.mem?.max,\n        ) > 0\n      ) {\n        return false;\n      }\n      if (\n        typeof preset.resource_slots.cpu === 'number' &&\n        typeof resourceLimits.cpu?.max === 'number' &&\n        preset.resource_slots.cpu > resourceLimits.cpu?.max\n      ) {\n        return false;\n      }\n      const acceleratorKeys = _.keys(\n        _.omit(preset.resource_slots, ['mem', 'cpu', 'shmem']),\n      );\n      const isAvailable = _.every(acceleratorKeys, (key) => {\n        if (\n          key &&\n          typeof preset.resource_slots[key] === 'string' &&\n          typeof resourceLimits.accelerators[key]?.max === 'number' &&\n          _.toNumber(preset.resource_slots[key]) >\n            _.toNumber(resourceLimits.accelerators[key]?.max)\n        ) {\n          return false;\n        }\n        return true;\n      });\n      return isAvailable;\n    }).map((preset) => preset.name);\n\n    const byImageAcceleratorLimits = _.filter(\n      checkPresetInfo?.presets,\n      (preset) => {\n        const acceleratorResourceOfPreset = _.omitBy(\n          preset.resource_slots,\n          (value, key) => {\n            if (['mem', 'cpu', 'shmem'].includes(key) || value === '0')\n              return true;\n          },\n        );\n        if (currentImageAcceleratorLimits.length === 0) {\n          if (_.isEmpty(acceleratorResourceOfPreset)) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        return _.some(currentImageAcceleratorLimits, (limit) => {\n          return _.some(acceleratorResourceOfPreset, (value, key) => {\n            return (\n              limit?.key === key && _.toNumber(value) >= _.toNumber(limit?.min)\n            );\n          });\n        });\n      },\n    ).map((preset) => preset.name);\n\n    return currentImageAcceleratorLimits.length > 0\n      ? baiClient._config?.always_enqueue_compute_session\n        ? bySliderLimit\n        : byPresetInfo\n      : _.intersection(\n          baiClient._config?.always_enqueue_compute_session\n            ? bySliderLimit\n            : byPresetInfo,\n          byImageAcceleratorLimits,\n        );\n  }, [\n    baiClient._config?.always_enqueue_compute_session,\n    checkPresetInfo?.presets,\n    resourceLimits.accelerators,\n    resourceLimits.cpu?.max,\n    resourceLimits.mem?.max,\n    currentImageAcceleratorLimits,\n  ]);\n\n  const updateAllocationPresetBasedOnResourceGroup = useEventNotStable(() => {\n    if (\n      _.includes(\n        ['custom', 'minimum-required'],\n        form.getFieldValue('allocationPreset'),\n      )\n    ) {\n    } else {\n      if (\n        allocatablePresetNames.includes(form.getFieldValue('allocationPreset'))\n      ) {\n        // if the current preset is available in the current resource group, do nothing.\n      } else if (allocatablePresetNames[0]) {\n        const autoSelectedPreset = _.sortBy(allocatablePresetNames, 'name')[0];\n        form.setFieldsValue({\n          allocationPreset: autoSelectedPreset,\n        });\n        updateResourceFieldsBasedOnPreset(autoSelectedPreset);\n      } else {\n        form.setFieldsValue({\n          allocationPreset: 'custom',\n        });\n      }\n    }\n    // monkey patch for the issue that the validation result is not updated when the resource group is changed.\n    setTimeout(() => {\n      form.validateFields().catch(() => {});\n    }, 200);\n  });\n\n  // update allocation preset based on resource group and current image\n  useEffect(() => {\n    currentResourceGroup && updateAllocationPresetBasedOnResourceGroup();\n  }, [\n    currentResourceGroup,\n    updateAllocationPresetBasedOnResourceGroup,\n    currentImage,\n  ]);\n\n  const updateResourceFieldsBasedOnImage = (force?: boolean) => {\n    // when image changed, set value of resources to min value only if it's larger than current value\n    const minimumResources: Partial<ResourceAllocationFormValue['resource']> = {\n      cpu: resourceLimits.cpu?.min,\n      mem:\n        iSizeToSize(\n          (iSizeToSize(resourceLimits.shmem?.min, 'm')?.number || 0) +\n            (iSizeToSize(resourceLimits.mem?.min, 'm')?.number || 0) +\n            'm',\n          'g',\n        )?.number + 'g', //to prevent loosing precision\n    };\n\n    // NOTE: accelerator value setting is done inside the conditional statement\n    if (currentImageAcceleratorLimits.length > 0) {\n      if (\n        _.find(\n          currentImageAcceleratorLimits,\n          (limit) =>\n            limit?.key === form.getFieldValue(['resource', 'acceleratorType']),\n        )\n      ) {\n        // if current selected accelerator type is supported in the selected image,\n        minimumResources.acceleratorType = form.getFieldValue([\n          'resource',\n          'acceleratorType',\n        ]);\n        minimumResources.accelerator =\n          resourceLimits.accelerators[\n            form.getFieldValue(['resource', 'acceleratorType'])\n          ]?.min;\n      } else {\n        // if current selected accelerator type is not supported in the selected image,\n        // change accelerator type to the first supported accelerator type.\n        const nextImageSelectorType: string | undefined | null = // NOTE:\n          // filter from resourceSlots since resourceSlots and supported image could be non-identical.\n          // resourceSlots returns \"all resources enable to allocate(including AI accelerator)\"\n          // imageAcceleratorLimit returns \"all resources that is supported in the selected image\"\n          _.filter(currentImageAcceleratorLimits, (acceleratorInfo: any) =>\n            _.keys(resourceSlots).includes(acceleratorInfo?.key),\n          )[0]?.key;\n\n        if (nextImageSelectorType) {\n          minimumResources.accelerator =\n            resourceLimits.accelerators[nextImageSelectorType]?.min;\n          minimumResources.acceleratorType = nextImageSelectorType;\n        }\n      }\n    } else {\n      minimumResources.accelerator = 0;\n    }\n\n    if (!forceImageMinValues && !force) {\n      // delete keys that is not less than current value\n      (['cpu', 'accelerator'] as const).forEach((key) => {\n        const minNum = minimumResources[key];\n        if (\n          _.isNumber(minNum) &&\n          minNum < form.getFieldValue(['resource', key])\n        ) {\n          delete minimumResources[key];\n        }\n      });\n      (['mem', 'shmem'] as const).forEach((key) => {\n        const minNumStr = minimumResources[key];\n        if (\n          _.isString(minNumStr) &&\n          compareNumberWithUnits(\n            minNumStr,\n            form.getFieldValue(['resource', key]),\n          ) < 0\n        ) {\n          delete minimumResources[key];\n        }\n      });\n    }\n\n    form.setFieldsValue({\n      resource: {\n        ...minimumResources,\n      },\n    });\n\n    // set to 0 when currentImage doesn't support any AI accelerator\n    if (currentImage && currentImageAcceleratorLimits.length === 0) {\n      form.setFieldValue(['resource', 'accelerator'], 0);\n    }\n\n    if (form.getFieldValue('enabledAutomaticShmem')) {\n      runShmemAutomationRule(form.getFieldValue(['resource', 'mem']) || '0g');\n    }\n    form.validateFields(['resource']).catch(() => {});\n  };\n\n  useEffect(() => {\n    updateResourceFieldsBasedOnImage();\n    // When the currentImage is changed, execute the latest updateResourceFieldsBasedOnImage function.\n    // So we don't need to add `updateResourceFieldsBasedOnImage` to the dependencies.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentImage]);\n\n  const updateResourceFieldsBasedOnPreset = (name: string) => {\n    const preset = _.find(\n      checkPresetInfo?.presets,\n      (preset) => preset.name === name,\n    );\n    const slots = _.pick(preset?.resource_slots, _.keys(resourceSlots));\n    const mem = iSizeToSize((slots?.mem || 0) + 'b', 'g', 2)?.numberUnit;\n    const acceleratorObj = _.omit(slots, ['cpu', 'mem', 'shmem']);\n\n    // Select the first matched AI accelerator type and value\n    const firstMatchedAcceleratorType = _.find(\n      _.keys(acceleratorSlots),\n      (value) => acceleratorObj[value] !== undefined,\n    );\n\n    let acceleratorSetting: {\n      acceleratorType?: string;\n      accelerator: number;\n    } = {\n      accelerator: 0,\n    };\n    if (firstMatchedAcceleratorType) {\n      acceleratorSetting = {\n        acceleratorType: firstMatchedAcceleratorType,\n        accelerator: Number(acceleratorObj[firstMatchedAcceleratorType] || 0),\n      };\n    }\n    form.setFieldsValue({\n      resource: {\n        // ...slots,\n        ...acceleratorSetting,\n        // transform to GB based on preset values\n        mem,\n        shmem: iSizeToSize((preset?.shared_memory || 0) + 'b', 'g', 2)\n          ?.numberUnit,\n        cpu: parseInt(slots?.cpu || '0') || 0,\n      },\n    });\n    runShmemAutomationRule(mem || '0g');\n  };\n\n  const runShmemAutomationRule = (M_plus_S: string) => {\n    // if M+S > 4G, S can be 1G regard to current image's minimum mem(M)\n    if (\n      // M+S > 4G\n      compareNumberWithUnits(M_plus_S, '4g') >= 0 &&\n      // M+S > M+1G\n      compareNumberWithUnits(\n        M_plus_S,\n        addNumberWithUnits(currentImageMinM, '1g') || '0b',\n      ) >= 0 &&\n      // if 1G < AUTOMATIC_DEFAULT_SHMEM, no need to apply 1G rule\n      compareNumberWithUnits('1g', AUTOMATIC_DEFAULT_SHMEM) > 0\n    ) {\n      form.setFieldValue(['resource', 'shmem'], '1g');\n    } else {\n      form.setFieldValue(['resource', 'shmem'], AUTOMATIC_DEFAULT_SHMEM);\n    }\n  };\n\n  return (\n    <>\n      <Form.Item\n        name=\"resourceGroup\"\n        label={t('session.ResourceGroup')}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n        // Set the trigger to something not used event to manually handle updates for the granular pending status management.\n        trigger={'onSubmit'}\n      >\n        <ResourceGroupSelect\n          showSearch\n          loading={isPendingCheckResets}\n          onChange={(v) => {\n            startCheckRestsTransition(() => {\n              // update manually to handle granular pending status management\n              form.setFieldValue('resourceGroup', v);\n              form.validateFields(['resourceGroup']).catch(() => {});\n            });\n          }}\n        />\n      </Form.Item>\n\n      {enableResourcePresets ? (\n        <Form.Item\n          label={t('resourcePreset.ResourcePresets')}\n          name=\"allocationPreset\"\n          required\n          style={{ marginBottom: token.marginXS }}\n        >\n          <ResourcePresetSelect\n            showCustom\n            showMinimumRequired\n            onChange={(value, options) => {\n              switch (value) {\n                case 'custom':\n                  break;\n                case 'minimum-required':\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnImage(true);\n                  break;\n                default:\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnPreset(value);\n                  break;\n              }\n            }}\n            allocatablePresetNames={allocatablePresetNames}\n          />\n        </Form.Item>\n      ) : null}\n      <Card\n        style={{\n          marginBottom: token.margin,\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlots?.cpu && (\n                  <Form.Item\n                    name={['resource', 'cpu']}\n                    // initialValue={0}\n                    label={t('session.launcher.CPU')}\n                    tooltip={{\n                      placement: 'right',\n                      title: <Trans i18nKey={'session.launcher.DescCPU'} />,\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        type: 'number',\n                        min: resourceLimits.cpu?.min,\n                        // TODO: set message\n                      },\n                      {\n                        warningOnly:\n                          baiClient._config?.always_enqueue_compute_session,\n                        validator: async (rule, value: number) => {\n                          if (\n                            _.isNumber(remaining.cpu) &&\n                            value > remaining.cpu\n                          ) {\n                            return Promise.reject(\n                              baiClient._config?.always_enqueue_compute_session\n                                ? t(\n                                    'session.launcher.EnqueueComputeSessionWarning',\n                                    {\n                                      amount: remaining.cpu,\n                                    },\n                                  )\n                                : t(\n                                    'session.launcher.ErrorCanNotExceedRemaining',\n                                    {\n                                      amount: remaining.cpu,\n                                    },\n                                  ),\n                            );\n                          } else {\n                            return Promise.resolve();\n                          }\n                        },\n                      },\n                    ]}\n                  >\n                    <InputNumberWithSlider\n                      inputNumberProps={{\n                        addonAfter: t('session.launcher.Core'),\n                      }}\n                      sliderProps={{\n                        marks: {\n                          // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                          ...(remaining.cpu\n                            ? {\n                                [remaining.cpu]: {\n                                  label: <RemainingMark />,\n                                },\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.min\n                            ? {\n                                [resourceLimits.cpu?.min]:\n                                  resourceLimits.cpu?.min,\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.max\n                            ? {\n                                [resourceLimits.cpu?.max]: {\n                                  style: {\n                                    color: token.colorTextSecondary,\n                                  },\n                                  label: resourceLimits.cpu?.max,\n                                },\n                              }\n                            : {}),\n                        },\n                      }}\n                      min={resourceLimits.cpu?.min}\n                      max={resourceLimits.cpu?.max}\n                      step={1}\n                      onChange={() => {\n                        form.setFieldValue('allocationPreset', 'custom');\n                      }}\n                    />\n                  </Form.Item>\n                )}\n                {resourceSlots?.mem && (\n                  <Form.Item\n                    label={t('session.launcher.Memory')}\n                    tooltip={{\n                      placement: 'right',\n                      props: {\n                        onClick: (e: any) => e.preventDefault(),\n                      },\n                      title: (\n                        <Flex\n                          direction=\"column\"\n                          onClick={(e) => e.preventDefault()}\n                        >\n                          <Trans i18nKey={'session.launcher.DescMemory'} />\n                          {/* <Divider\n                            style={{\n                              margin: 0,\n                              backgroundColor: token.colorBorderSecondary,\n                            }}\n                          />\n                         \n                          <Trans\n                            i18nKey={'session.launcher.DescSharedMemory'}\n                          /> */}\n                        </Flex>\n                      ),\n                    }}\n                    required\n                  >\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.resource.shmem !== next.resource.shmem\n                      }\n                    >\n                      {() => {\n                        return (\n                          <Form.Item\n                            name={['resource', 'mem']}\n                            noStyle\n                            rules={[\n                              {\n                                required: true,\n                              },\n                              {\n                                // TODO: min of mem should be shmem + image's mem limit??\n                                validator: async (rule, value: string) => {\n                                  // const memMinPlusShmem =\n                                  //   addNumberWithUnits(\n                                  //     resourceLimits.mem?.min,\n                                  //     form.getFieldValue(['resource', 'shmem']),\n                                  //   ) || '0b';\n\n                                  if (\n                                    !_.isElement(value) &&\n                                    resourceLimits.mem?.min &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.min || '0g',\n                                    ) < 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('session.launcher.MinMemory', {\n                                        size: _.toUpper(\n                                          resourceLimits.mem?.min || '0g',\n                                        ),\n                                      }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                warningOnly:\n                                  baiClient._config\n                                    ?.always_enqueue_compute_session,\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    !_.isElement(value) &&\n                                    resourceLimits.mem &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      remaining.mem + 'b',\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      baiClient._config\n                                        ?.always_enqueue_compute_session\n                                        ? t(\n                                            'session.launcher.EnqueueComputeSessionWarning',\n                                            {\n                                              amount:\n                                                iSizeToSize(\n                                                  remaining.mem + 'b',\n                                                  'g',\n                                                  3,\n                                                )?.numberUnit + 'iB',\n                                            },\n                                          )\n                                        : t(\n                                            'session.launcher.ErrorCanNotExceedRemaining',\n                                            {\n                                              amount:\n                                                iSizeToSize(\n                                                  remaining.mem + 'b',\n                                                  'g',\n                                                  3,\n                                                )?.numberUnit + 'iB',\n                                            },\n                                          ),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                            ]}\n                          >\n                            <DynamicUnitInputNumberWithSlider\n                              max={resourceLimits.mem?.max}\n                              // min=\"256m\"\n                              // min={'0g'}\n                              // min={addNumberWithUnits(\n                              //   resourceLimits.mem?.min,\n                              //   form.getFieldValue(['resource', 'shmem']) || '0g',\n                              // )}\n                              min={resourceLimits.mem?.min}\n                              // warn={\n                              //   checkPresetInfo?.scaling_group_remaining.mem ===\n                              //   undefined\n                              //     ? undefined\n                              //     : checkPresetInfo?.scaling_group_remaining.mem + 'g'\n                              // }\n                              addonBefore={'MEM'}\n                              extraMarks={{\n                                // ...(checkPresetInfo?.scaling_group_remaining.mem\n                                //   ? {\n                                //       // @ts-ignore\n                                //       [iSizeToSize(\n                                //         checkPresetInfo?.scaling_group_remaining\n                                //           .mem,\n                                //         'g',\n                                //         3,\n                                //       ).numberFixed]: {\n                                //         label: '-',\n                                //       },\n                                //     }\n                                //   : {}),\n                                // ...(form.getFieldValue(['resource', 'shmem'])\n                                //   ? {\n                                //       [iSizeToSize(\n                                //         form.getFieldValue([\n                                //           'resource',\n                                //           'shmem',\n                                //         ]),\n                                //         'g',\n                                //       )?.number || 0]: (\n                                //         <Flex\n                                //           style={{\n                                //             height: 8,\n                                //             width: 8,\n                                //             borderRadius: 4,\n                                //             backgroundColor: token.colorInfo,\n                                //             position: 'absolute',\n                                //             top: -10,\n                                //             transform: 'translateX(-50%)',\n                                //             opacity: 0.5,\n                                //             pointerEvents: 'none',\n                                //           }}\n                                //         ></Flex>\n                                //       ),\n                                //     }\n                                //   : undefined),\n                                ...(remaining.mem\n                                  ? {\n                                      //@ts-ignore\n                                      [iSizeToSize(remaining.mem + 'b', 'g', 3)\n                                        ?.numberFixed]: {\n                                        label: <RemainingMark />,\n                                      },\n                                    }\n                                  : {}),\n                              }}\n                              onChange={(M_plus_S) => {\n                                if (\n                                  !M_plus_S ||\n                                  !form.getFieldValue('enabledAutomaticShmem')\n                                )\n                                  return;\n                                runShmemAutomationRule(M_plus_S);\n\n                                form.setFieldValue(\n                                  'allocationPreset',\n                                  'custom',\n                                );\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n\n                    <Flex direction=\"column\" gap={'xxs'} align=\"start\">\n                      <Flex direction=\"row\" gap={'xs'}>\n                        {t('session.launcher.EnableAutomaticMiniumShmem')}{' '}\n                        <Form.Item\n                          noStyle\n                          name={'enabledAutomaticShmem'}\n                          valuePropName=\"checked\"\n                        >\n                          <Switch\n                            size=\"small\"\n                            onChange={(checked) => {\n                              if (checked) {\n                                runShmemAutomationRule(\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                    '0g',\n                                );\n                              }\n                              form.setFieldValue('allocationPreset', 'custom');\n                            }}\n                          />\n                        </Form.Item>\n                      </Flex>\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prev, next) =>\n                          prev.resource.mem !== next.resource.mem ||\n                          prev.enabledAutomaticShmem !==\n                            next.enabledAutomaticShmem\n                        }\n                      >\n                        {() => {\n                          return (\n                            <Form.Item\n                              noStyle\n                              name={['resource', 'shmem']}\n                              // initialValue={'0g'}\n                              // label={t('session.launcher.SharedMemory')}\n                              hidden={form.getFieldValue(\n                                'enabledAutomaticShmem',\n                              )}\n                              tooltip={\n                                <Trans\n                                  i18nKey={'session.launcher.DescSharedMemory'}\n                                />\n                              }\n                              dependencies={[['resource', 'mem']]}\n                              rules={[\n                                {\n                                  required: true,\n                                },\n                                {},\n                                {\n                                  validator: async (rule, value: string) => {\n                                    if (\n                                      _.isEmpty(\n                                        getFieldValue('resource')?.mem,\n                                      ) ||\n                                      _.isEmpty(value) ||\n                                      compareNumberWithUnits(\n                                        getFieldValue('resource')?.mem,\n                                        value,\n                                      ) >= 0\n                                    ) {\n                                      return Promise.resolve();\n                                    } else {\n                                      throw t(\n                                        'resourcePreset.SHMEMShouldBeSmallerThanMemory',\n                                      );\n                                    }\n                                  },\n                                },\n                              ]}\n                            >\n                              <DynamicUnitInputNumberWithSlider\n                                // shmem max is mem max\n                                // min={resourceLimits.shmem?.min}\n                                min={resourceLimits.shmem?.min}\n                                // max={resourceLimits.mem?.max || '0g'}\n                                addonBefore={'SHM'}\n                                max={\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                  '0g'\n                                }\n                                hideSlider\n                                onChange={() => {\n                                  form.setFieldValue(\n                                    'allocationPreset',\n                                    'custom',\n                                  );\n                                }}\n                              />\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                )}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) => {\n                    return (\n                      prev.resource?.acceleratorType !==\n                        next.resource?.acceleratorType ||\n                      // ref: https://github.com/lablup/backend.ai-webui/issues/868\n                      // change gpu step to 1 when cluster_size > 1\n                      prev.cluster_size !== next.cluster_size\n                    );\n                  }}\n                >\n                  {({ getFieldValue }) => {\n                    const currentAcceleratorType = getFieldValue([\n                      'resource',\n                      'acceleratorType',\n                    ]);\n                    return (\n                      <Form.Item\n                        name={['resource', 'accelerator']}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        tooltip={{\n                          placement: 'right',\n                          title: (\n                            <Trans\n                              i18nKey={'session.launcher.DescAIAccelerator'}\n                            />\n                          ),\n                        }}\n                        rules={[\n                          {\n                            required: currentImageAcceleratorLimits.length > 0,\n                          },\n                          {\n                            type: 'number',\n                            min:\n                              resourceLimits.accelerators[\n                                currentAcceleratorType\n                              ]?.min || 0,\n                            max: resourceLimits.accelerators[\n                              currentAcceleratorType\n                            ]?.max,\n                          },\n                          {\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.endsWith(currentAcceleratorType, 'shares') &&\n                                form.getFieldValue('cluster_size') >= 2 &&\n                                value % 1 !== 0\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.OnlyAllowsDiscreteNumberByClusterSize',\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                          {\n                            warningOnly:\n                              baiClient._config?.always_enqueue_compute_session,\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.isNumber(\n                                  remaining.accelerators[\n                                    currentAcceleratorType\n                                  ],\n                                ) &&\n                                value >\n                                  remaining.accelerators[currentAcceleratorType]\n                              ) {\n                                return Promise.reject(\n                                  baiClient._config\n                                    ?.always_enqueue_compute_session\n                                    ? t(\n                                        'session.launcher.EnqueueComputeSessionWarning',\n                                        {\n                                          amount:\n                                            remaining.accelerators[\n                                              currentAcceleratorType\n                                            ],\n                                        },\n                                      )\n                                    : t(\n                                        'session.launcher.ErrorCanNotExceedRemaining',\n                                        {\n                                          amount:\n                                            remaining.accelerators[\n                                              currentAcceleratorType\n                                            ],\n                                        },\n                                      ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          sliderProps={{\n                            marks: {\n                              0: 0,\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.accelerators[currentAcceleratorType]\n                                ? {\n                                    [remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(\n                                resourceLimits.accelerators[\n                                  currentAcceleratorType\n                                ]?.max,\n                              )\n                                ? {\n                                    // @ts-ignore\n                                    [resourceLimits.accelerators[\n                                      currentAcceleratorType\n                                    ]?.max]:\n                                      resourceLimits.accelerators[\n                                        currentAcceleratorType\n                                      ]?.max,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${ACCELERATOR_UNIT_MAP[currentAcceleratorType]}`;\n                              },\n                              open:\n                                currentImageAcceleratorLimits.length <= 0\n                                  ? false\n                                  : undefined,\n                            },\n                          }}\n                          disabled={\n                            currentImageAcceleratorLimits.length === 0 &&\n                            _.isEmpty(\n                              form.getFieldValue(['environments', 'manual']),\n                            )\n                          }\n                          min={0}\n                          max={\n                            resourceLimits.accelerators[currentAcceleratorType]\n                              ?.max\n                          }\n                          step={\n                            _.endsWith(currentAcceleratorType, 'shares') &&\n                            form.getFieldValue('cluster_size') < 2\n                              ? 0.1\n                              : 1\n                          }\n                          onChange={() => {\n                            form.setFieldValue('allocationPreset', 'custom');\n                          }}\n                          inputNumberProps={{\n                            addonAfter: (\n                              <Form.Item\n                                noStyle\n                                name={['resource', 'acceleratorType']}\n                                initialValue={_.keys(acceleratorSlots)[0]}\n                              >\n                                <Select\n                                  tabIndex={-1}\n                                  disabled={\n                                    currentImageAcceleratorLimits.length ===\n                                      0 &&\n                                    _.isEmpty(\n                                      form.getFieldValue([\n                                        'environments',\n                                        'manual',\n                                      ]),\n                                    )\n                                  }\n                                  suffixIcon={\n                                    _.size(acceleratorSlots) > 1\n                                      ? undefined\n                                      : null\n                                  }\n                                  // open={\n                                  //   _.size(acceleratorSlots) > 1\n                                  //     ? undefined\n                                  //     : false\n                                  // }\n                                  popupMatchSelectWidth={false}\n                                  options={_.map(\n                                    acceleratorSlots,\n                                    (value, name) => {\n                                      return {\n                                        value: name,\n                                        label:\n                                          ACCELERATOR_UNIT_MAP[name] || 'UNIT',\n                                        disabled:\n                                          currentImageAcceleratorLimits.length >\n                                            0 &&\n                                          !_.find(\n                                            currentImageAcceleratorLimits,\n                                            (limit) => limit?.key === name,\n                                          ),\n                                      };\n                                    },\n                                  )}\n                                />\n                              </Form.Item>\n                            ),\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n      {enableNumOfSessions ? (\n        <Card\n          style={{\n            marginBottom: token.margin,\n          }}\n        >\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.cluster_size !== next.cluster_size\n            }\n          >\n            {() => {\n              return (\n                <Form.Item\n                  name={['num_of_sessions']}\n                  label={t('webui.menu.Sessions')}\n                  tooltip={<Trans i18nKey={'session.launcher.DescSession'} />}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                    },\n                    {\n                      warningOnly: true,\n                      validator: async (rule, value: number) => {\n                        if (\n                          sessionSliderLimitAndRemaining &&\n                          value > sessionSliderLimitAndRemaining.remaining\n                        ) {\n                          return Promise.reject(\n                            t('session.launcher.EnqueueComputeSessionWarning', {\n                              amount: sessionSliderLimitAndRemaining.remaining,\n                            }),\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumberWithSlider\n                    inputNumberProps={{\n                      addonAfter: '#',\n                    }}\n                    disabled={form.getFieldValue('cluster_size') > 1}\n                    sliderProps={{\n                      marks: {\n                        [sessionSliderLimitAndRemaining?.min]:\n                          sessionSliderLimitAndRemaining?.min,\n                        // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                        ...(sessionSliderLimitAndRemaining?.remaining\n                          ? {\n                              [sessionSliderLimitAndRemaining?.remaining]: {\n                                label: <RemainingMark />,\n                              },\n                            }\n                          : {}),\n                        [sessionSliderLimitAndRemaining?.max]:\n                          sessionSliderLimitAndRemaining?.max,\n                      },\n                    }}\n                    min={sessionSliderLimitAndRemaining?.min}\n                    max={sessionSliderLimitAndRemaining?.max}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Form.Item>\n        </Card>\n      ) : null}\n      {/* TODO: Support cluster mode */}\n      {baiClient.supports('multi-container') && (\n        // {false && (\n        <Form.Item\n          label={t('session.launcher.ClusterMode')}\n          tooltip={\n            <Flex direction=\"column\" align=\"start\">\n              {t('session.launcher.SingleNode')}\n              <Trans i18nKey={'session.launcher.DescSingleNode'} />\n              <Divider style={{ backgroundColor: token.colorBorder }} />\n              {t('session.launcher.MultiNode')}\n              <Trans i18nKey={'session.launcher.DescMultiNode'} />\n            </Flex>\n          }\n          required\n        >\n          <Card\n            style={{\n              marginBottom: token.margin,\n            }}\n          >\n            <Row gutter={token.marginMD}>\n              <Col xs={24}>\n                {/* <Col xs={24} lg={12}> */}\n                <Form.Item name={'cluster_mode'} required>\n                  <Radio.Group\n                    onChange={(e) => {\n                      form.validateFields().catch(() => {});\n                    }}\n                  >\n                    <Radio.Button value=\"single-node\">\n                      {t('session.launcher.SingleNode')}\n                    </Radio.Button>\n                    <Radio.Button value=\"multi-node\">\n                      {t('session.launcher.MultiNode')}\n                    </Radio.Button>\n                  </Radio.Group>\n                </Form.Item>\n              </Col>\n              <Col xs={24}>\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) =>\n                    prev.cluster_mode !== next.cluster_mode\n                  }\n                >\n                  {() => {\n                    const derivedClusterSizeMaxLimit = _.min([\n                      resourceLimits.cpu?.max,\n                      keypairResourcePolicy.max_containers_per_session,\n                    ]);\n                    const clusterUnit =\n                      form.getFieldValue('cluster_mode') === 'single-node'\n                        ? t('session.launcher.Container')\n                        : t('session.launcher.Node');\n                    return (\n                      <Form.Item\n                        name={'cluster_size'}\n                        label={t('session.launcher.ClusterSize')}\n                        required\n                        rules={[\n                          {\n                            warningOnly:\n                              baiClient._config?.always_enqueue_compute_session,\n                            validator: async (rule, value: number) => {\n                              const minCPU = _.min([\n                                remaining.cpu,\n                                keypairResourcePolicy.max_containers_per_session,\n                              ]);\n                              if (_.isNumber(minCPU) && value > minCPU) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.EnqueueComputeSessionWarning',\n                                    {\n                                      amount: minCPU,\n                                    },\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          min={1}\n                          step={1}\n                          // TODO: max cluster size\n                          max={\n                            _.isNumber(derivedClusterSizeMaxLimit)\n                              ? derivedClusterSizeMaxLimit\n                              : undefined\n                          }\n                          disabled={derivedClusterSizeMaxLimit === 1}\n                          sliderProps={{\n                            marks: {\n                              1: '1',\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.cpu\n                                ? {\n                                    [remaining.cpu]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(derivedClusterSizeMaxLimit)\n                                ? {\n                                    [derivedClusterSizeMaxLimit]:\n                                      derivedClusterSizeMaxLimit,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${clusterUnit}`;\n                              },\n                            },\n                          }}\n                          inputNumberProps={{\n                            addonAfter: clusterUnit,\n                          }}\n                          onChange={(value) => {\n                            if (value > 1) {\n                              form.setFieldValue('num_of_sessions', 1);\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </Col>\n            </Row>\n          </Card>\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nconst RemainingMark: React.FC<{ title?: string }> = () => {\n  const { token } = theme.useToken();\n  return (\n    <Flex\n      style={{\n        position: 'absolute',\n        top: -24,\n        transform: 'translateX(-50%)',\n        color: token.colorSuccess,\n        opacity: 0.5,\n      }}\n    >\n      <CaretDownOutlined />\n    </Flex>\n  );\n};\n\nconst MemoizedResourceAllocationFormItems = React.memo(\n  ResourceAllocationFormItems,\n);\n\nexport default MemoizedResourceAllocationFormItems;\n","/**\n * @generated SignedSource<<7893010249a8558bb6de4f479d99f12f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = Record<PropertyKey, never>;\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null | undefined;\n    readonly resource_slots: any | null | undefined;\n    readonly shared_memory: any | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","/**\n * @generated SignedSource<<8778f761ce6a09e82f9dd28167c11901>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairQuery$variables = {\n  accessKey: string;\n};\nexport type hooksUsingRelay_KeyPairQuery$data = {\n  readonly keypair: {\n    readonly concurrency_used: number | null | undefined;\n    readonly id: string | null | undefined;\n    readonly resource_policy: string | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairQuery = {\n  response: hooksUsingRelay_KeyPairQuery$data;\n  variables: hooksUsingRelay_KeyPairQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"accessKey\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"access_key\",\n        \"variableName\": \"accessKey\"\n      }\n    ],\n    \"concreteType\": \"KeyPair\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_policy\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"concurrency_used\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1f8fc324e9907111de581f5cd2dc3640\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairQuery(\\n  $accessKey: String!\\n) {\\n  keypair(access_key: $accessKey) {\\n    id\\n    resource_policy\\n    concurrency_used\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8f5c91f0fc46a3366f57566ab688d81\";\n\nexport default node;\n","/**\n * @generated SignedSource<<3381af962875475b393ccdb463fe5531>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$variables = {\n  name: string;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$data = {\n  readonly keypair_resource_policy: {\n    readonly max_concurrent_sessions: number | null | undefined;\n    readonly max_containers_per_session: number | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery = {\n  response: hooksUsingRelay_KeyPairResourcePolicyQuery$data;\n  variables: hooksUsingRelay_KeyPairResourcePolicyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_containers_per_session\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_concurrent_sessions\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ad7039c1935637fe3f3841f0ea8bf347\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairResourcePolicyQuery(\\n  $name: String!\\n) {\\n  keypair_resource_policy(name: $name) {\\n    max_containers_per_session\\n    max_concurrent_sessions\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f3f7364c63aefe9b03111b584c48c103\";\n\nexport default node;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { hooksUsingRelay_KeyPairQuery } from './__generated__/hooksUsingRelay_KeyPairQuery.graphql';\nimport { hooksUsingRelay_KeyPairResourcePolicyQuery } from './__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useCallback } from 'react';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ninterface FetchOptions {\n  fetchKey?: string | number;\n  fetchPolicy?: FetchPolicy;\n}\nexport const useKeyPairLazyLoadQuery = (\n  accessKey: string,\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { keypair } = useLazyLoadQuery<hooksUsingRelay_KeyPairQuery>(\n    graphql`\n      query hooksUsingRelay_KeyPairQuery($accessKey: String!) {\n        keypair(access_key: $accessKey) {\n          id\n          resource_policy\n          concurrency_used\n        }\n      }\n    `,\n    {\n      accessKey: accessKey,\n    },\n    {\n      ...options,\n      fetchKey: fetchKey + options.fetchKey,\n    },\n  );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [keypair, { refresh }] as const;\n};\n\nexport const useCurrentKeyPairResourcePolicyLazyLoadQuery = (\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const { keypair_resource_policy } =\n    useLazyLoadQuery<hooksUsingRelay_KeyPairResourcePolicyQuery>(\n      graphql`\n        query hooksUsingRelay_KeyPairResourcePolicyQuery($name: String!) {\n          keypair_resource_policy(name: $name) {\n            max_containers_per_session\n            max_concurrent_sessions\n          }\n        }\n      `,\n      {\n        name: keypair?.resource_policy || '',\n      },\n      {\n        ...options,\n        fetchKey: fetchKey + options.fetchKey,\n      },\n    );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [\n    {\n      keypairResourcePolicy: (keypair_resource_policy || {}) as NonNullable<\n        typeof keypair_resource_policy\n      >,\n      keypair: (keypair || {}) as NonNullable<typeof keypair>,\n      sessionLimitAndRemaining: {\n        max: _.min([\n          (keypair_resource_policy || {}).max_concurrent_sessions,\n          3, //BackendAiResourceBroker.DEFAULT_CONCURRENT_SESSION_COUNT\n        ]) as number,\n        remaining:\n          ((keypair_resource_policy || {}).max_concurrent_sessions || 3) -\n          ((keypair || {}).concurrency_used || 0),\n      },\n    },\n    { refresh },\n  ] as const;\n};\n","import { useSuspendedBackendaiClient } from '.';\nimport { Image } from '../components/ImageEnvironmentSelectFormItems';\nimport { AUTOMATIC_DEFAULT_SHMEM } from '../components/ResourceAllocationFormItems';\nimport { addNumberWithUnits, iSizeToSize } from '../helper';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { useTanQuery } from './reactQueryAlias';\nimport _ from 'lodash';\n\ninterface MergedResourceLimits {\n  accelerators: {\n    [key: string]:\n      | {\n          min?: number;\n          max?: number;\n        }\n      | undefined;\n  };\n  cpu?: {\n    min?: number;\n    max?: number;\n  };\n  mem?: {\n    min?: string;\n    max?: string;\n  };\n  shmem?: {\n    min?: string;\n    max?: string;\n  };\n}\n\ntype ResourceLimits = {\n  cpu: string | 'Infinity' | 'NaN';\n  mem: string | 'Infinity' | 'NaN';\n  'cuda.device': string | 'Infinity' | 'NaN';\n};\ntype ResourceUsing = ResourceLimits;\ntype ResourceRemaining = ResourceLimits;\ntype ScalingGroup = {\n  using: ResourceUsing;\n  remaining: ResourceRemaining;\n};\n\ntype ResourceSlots = {\n  cpu: string;\n  mem: string;\n  'cuda.device': string;\n  [key: string]: string;\n};\n\ntype RemainingSlots = {\n  cpu: number;\n  mem: number;\n  accelerators: {\n    [key: string]: number;\n  };\n};\n\nexport type ResourcePreset = {\n  name: string;\n  resource_slots: ResourceSlots;\n  shared_memory: string | null;\n  allocatable: boolean;\n};\n\ntype ResourceAllocation = {\n  keypair_limits: ResourceLimits;\n  keypair_using: ResourceUsing;\n  keypair_remaining: ResourceRemaining;\n  scaling_group_remaining: ResourceRemaining;\n  scaling_groups: {\n    [key: string]: ScalingGroup;\n  };\n  presets: ResourcePreset[];\n  group_limits: ResourceLimits;\n  group_using: ResourceUsing;\n  group_remaining: ResourceRemaining;\n};\n\ninterface Props {\n  currentProjectName: string;\n  currentImage?: Image;\n  currentResourceGroup: string;\n}\n\n// determine resource limits and remaining for current resource group and current image in current project\nexport const useResourceLimitAndRemaining = ({\n  currentImage,\n  currentResourceGroup,\n  currentProjectName,\n}: Props) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n\n  const {\n    data: checkPresetInfo,\n    refetch,\n    isRefetching,\n  } = useTanQuery<ResourceAllocation>({\n    queryKey: ['check-presets', currentProjectName, currentResourceGroup],\n    queryFn: () => {\n      if (currentResourceGroup) {\n        return baiClient.resourcePreset\n          .check({\n            group: currentProjectName,\n            scaling_group: currentResourceGroup,\n          })\n          .catch(() => {});\n      } else {\n        return;\n      }\n    },\n    staleTime: 0,\n    suspense: true,\n    // suspense: !_.isEmpty(currentResourceGroup), //prevent flicking\n  });\n\n  const currentImageMinM =\n    _.find(currentImage?.resource_limits, (i) => i?.key === 'mem')?.min || '0g';\n\n  const resourceGroupResourceSize: {\n    cpu?: number;\n    mem?: string;\n    accelerators: {\n      [key: string]: number | undefined;\n    };\n  } = {\n    // scaling group all cpu (using + remaining), string type\n    cpu:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.cpu,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.cpu,\n      )\n        ? _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.cpu,\n          ) +\n          _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n              .cpu,\n          )\n        : undefined,\n    mem:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.mem,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.mem,\n      )\n        ? iSizeToSize(\n            _.toNumber(\n              checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.mem,\n            ) +\n              _.toNumber(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n                  .mem,\n              ) +\n              'b',\n            'g',\n            2,\n          )?.numberFixed + 'g'\n        : undefined,\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.[key],\n          ) &&\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.[\n              key\n            ],\n          )\n            ? _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.using[\n                  key\n                ],\n              ) +\n              _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]\n                  ?.remaining[key],\n              )\n            : undefined;\n        return result;\n      },\n      {} as {\n        [key: string]: number | undefined;\n      },\n    ),\n  };\n  const resourceLimits: MergedResourceLimits = {\n    cpu:\n      resourceSlots?.cpu === undefined\n        ? undefined\n        : {\n            min: _.max([\n              _.toNumber(\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'cpu')\n                  ?.min || '0',\n              ),\n            ]),\n            max: _.min([\n              baiClient._config.maxCPUCoresPerContainer,\n              limitParser(checkPresetInfo?.keypair_limits.cpu),\n              limitParser(checkPresetInfo?.group_limits.cpu),\n              resourceGroupResourceSize?.cpu,\n            ]),\n          },\n    mem:\n      resourceSlots?.mem === undefined\n        ? undefined\n        : {\n            // M to max of [ image's mem min, AUTOMATIC_DEFAULT_SHMEM]\n            // mem(M+S) should be larger than _.max([ image's mem min, AUTOMATIC_DEFAULT_SHMEM ]) + AUTOMATIC_DEFAULT_SHMEM (rule: S can not be larger than M)\n            min:\n              //handled by 'b' unit\n              addNumberWithUnits(\n                _.max([\n                  iSizeToSize(currentImageMinM, 'b')?.number,\n                  iSizeToSize(AUTOMATIC_DEFAULT_SHMEM, 'b')?.number,\n                  0,\n                ]) + 'b',\n                AUTOMATIC_DEFAULT_SHMEM,\n              ),\n            max:\n              //handled by 'g(GiB)' unit\n              _.min([\n                baiClient._config.maxMemoryPerContainer,\n                limitParser(checkPresetInfo?.keypair_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.keypair_limits.mem) + '',\n                    'g',\n                  )?.number,\n                limitParser(checkPresetInfo?.group_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.group_limits.mem) + '',\n                    'g',\n                  )?.number,\n                // scaling group all mem (using + remaining), string type\n                resourceGroupResourceSize?.mem &&\n                  iSizeToSize(resourceGroupResourceSize?.mem + '', 'g')?.number,\n              ]) + 'g',\n          },\n    // shmem:\n    //   resourceSlots?.mem === undefined\n    //     ? undefined\n    //     : {\n    //         min: _.max([\n    //           _.find(currentImage?.resource_limits, (i) => i?.key === 'shmem')\n    //             ?.min,\n    //           '64m',\n    //         ]),\n    //       },\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        const configName =\n          {\n            'cuda.device': 'maxCUDADevicesPerContainer',\n            'cuda.shares': 'maxCUDASharesPerContainer',\n            'rocm.device': 'maxROCMDevicesPerContainer',\n            'tpu.device': 'maxTPUDevicesPerContainer',\n            'ipu.device': 'maxIPUDevicesPerContainer',\n            'atom.device': 'maxATOMDevicesPerContainer',\n            'warboy.device': 'maxWarboyDevicesPerContainer',\n            'hyperaccel-lpu.device': 'maxHyperaccelLPUDevicesPerContainer', // FIXME: add maxLPUDevicesPerContainer to config\n          }[key] || 'cuda.device'; // FIXME: temporally `cuda.device` config, when undefined\n        result[key] = {\n          min: parseInt(\n            _.filter(\n              currentImage?.resource_limits,\n              (supportedAcceleratorInfo) => {\n                return supportedAcceleratorInfo?.key === key;\n              },\n            )?.[0]?.min || '0',\n          ),\n          max: _.min([\n            baiClient._config[configName] || 8,\n            // scaling group all cpu (using + remaining), string type\n            resourceGroupResourceSize.accelerators[key],\n          ]),\n        };\n        return result;\n      },\n      {} as MergedResourceLimits['accelerators'],\n    ),\n  };\n  const remaining: RemainingSlots = {\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          _.min([\n            // @ts-ignore\n            _.toNumber(checkPresetInfo?.keypair_remaining[key]),\n            // @ts-ignore\n            _.toNumber(checkPresetInfo?.group_remaining[key]),\n            // @ts-ignore\n            _.toNumber(checkPresetInfo?.scaling_group_remaining[key]),\n          ]) ?? Number.MAX_SAFE_INTEGER;\n        return result;\n      },\n      {} as RemainingSlots['accelerators'],\n    ),\n    cpu:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.cpu),\n        limitParser(checkPresetInfo?.group_remaining.cpu),\n        limitParser(checkPresetInfo?.scaling_group_remaining.cpu),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n    mem:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.mem),\n        limitParser(checkPresetInfo?.group_remaining.mem),\n        limitParser(checkPresetInfo?.scaling_group_remaining.mem),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n  };\n\n  return [\n    {\n      resourceGroupResourceSize,\n      resourceLimits,\n      remaining,\n      currentImageMinM,\n      isRefetching,\n      checkPresetInfo,\n    },\n    {\n      refetch,\n    },\n  ] as const;\n};\n\nconst limitParser = (limit: string | undefined) => {\n  if (limit === undefined) {\n    return undefined;\n  } else if (limit === 'Infinity') {\n    return undefined;\n  } else if (limit === 'NaN') {\n    return undefined;\n  } else {\n    return _.toNumber(limit);\n  }\n};\n"],"names":["_ref","objectValues","values","length","React","map","value","label","color","_jsx","Flex","direction","children","_","objValue","idx","Tag","style","undefined","margin","marginRight","ImageMetaIcon","bordered","image","alt","arguments","getImageIcon","useBackendAIImageMetaData","src","width","height","min","max","step","disabled","inputNumberProps","sliderProps","otherProps","setValue","useControllableValue","inputRef","useEffect","Math","round","_jsxs","gap","flex","minWidth","align","InputNumber","ref","onChange","onBlur","_step$toString$split$","_inputRef$current","decimalCount","toString","split","current","toFixed","Slider","marks","option","key","dynamicSteps","units","disableAutoUnit","roundStep","defaultValue","numValue","_unitFromValue","parseUnit","previousUnit","usePrevious","unit","minNumValue","minUnit","maxNumValue","maxUnit","useRef","onInput","e","_e$target","target","test","addEventListener","removeEventListener","_roundStep$toString$s","_ref$current","_ref$current2","isNaN","concat","newValue","iSizeToSize","number","addonAfter","Select","tabIndex","newUnit","onDropdownVisibleChange","open","options","Typography","Text","fontFamily","toUpperCase","suffixIcon","cursor","onStep","afterStepValue","info","numValueNotNull","index","nextIndex","type","currentUnitIndex","indexOf","nextValue","nextUnit","nextNumValue","warn","extraMarks","hideSlider","token","theme","useToken","minGiB","useMemo","maxGiB","valueGiB","DynamicUnitInputNumber","visibility","styles","track","backgroundColor","compareNumberWithUnits","colorWarning","rail","tooltip","formatter","newNumValue","colorTextSecondary","allocatablePresetNames","showCustom","showMinimumRequired","selectProps","fetchKey","updateFetchKey","useUpdatableState","run","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","resourceSlots","useResourceSlots","t","useTranslation","isPendingUpdate","_startTransition","useTransition","controllableValue","setControllableValue","resource_presets","useLazyLoadQuery","_ResourcePresetSelectQuery","require","fetchPolicy","loading","display","EditOutlined","selectedLabel","Tooltip","title","InfoCircleOutlined","preset","slotsInfo","JSON","parse","resource_slots","includes","name","justify","slot","ResourceNumber","hideTooltip","sort","a","b","showSearch","optionLabelProp","AUTOMATIC_DEFAULT_SHMEM","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","resource","cpu","mem","shmem","accelerator","num_of_sessions","cluster_mode","cluster_size","enabledAutomaticShmem","ResourceAllocationFormItems","_baiClient$_config3","_resourceLimits$cpu3","_resourceLimits$mem3","enableNumOfSessions","enableResourcePresets","forceImageMinValues","form","Form","useFormInstance","baiClient","useSuspendedBackendaiClient","keypairResourcePolicy","sessionLimitAndRemaining","useCurrentKeyPairResourcePolicyLazyLoadQuery","currentProject","useCurrentProjectValue","isPendingCheckResets","startCheckRestsTransition","currentImage","useWatch","preserve","currentResourceGroup","currentImageMinM","remaining","resourceLimits","checkPresetInfo","useResourceLimitAndRemaining","currentProjectName","acceleratorSlots","_resourceLimits$accel","_resourceLimits$accel2","accelerators","currentImageAcceleratorLimits","resource_limits","limit","sessionSliderLimitAndRemaining","_baiClient$_config","_baiClient$_config2","byPresetInfo","presets","allocatable","bySliderLimit","_resourceLimits$mem","_resourceLimits$mem2","_resourceLimits$cpu","_resourceLimits$cpu2","acceleratorKeys","_resourceLimits$accel3","_resourceLimits$accel4","byImageAcceleratorLimits","acceleratorResourceOfPreset","_config","always_enqueue_compute_session","updateAllocationPresetBasedOnResourceGroup","useEventNotStable","getFieldValue","autoSelectedPreset","setFieldsValue","allocationPreset","updateResourceFieldsBasedOnPreset","setTimeout","validateFields","catch","updateResourceFieldsBasedOnImage","force","_resourceLimits$cpu4","_iSizeToSize","_iSizeToSize2","_resourceLimits$shmem","_iSizeToSize3","_resourceLimits$mem4","minimumResources","_resourceLimits$accel5","acceleratorType","_$filter$","nextImageSelectorType","acceleratorInfo","_resourceLimits$accel6","forEach","minNum","minNumStr","setFieldValue","runShmemAutomationRule","_iSizeToSize4","_iSizeToSize5","slots","numberUnit","acceleratorObj","firstMatchedAcceleratorType","acceleratorSetting","Number","shared_memory","parseInt","M_plus_S","addNumberWithUnits","_Fragment","Item","rules","required","trigger","ResourceGroupSelect","v","marginBottom","marginXS","ResourcePresetSelect","Card","shouldUpdate","prev","cur","noStyle","_ref2","_resourceLimits$cpu5","_baiClient$_config4","_resourceLimits$cpu6","_resourceLimits$cpu7","_resourceLimits$cpu8","_resourceLimits$cpu9","_resourceLimits$cpu10","_resourceLimits$cpu11","_resourceLimits$cpu12","_resourceLimits$cpu13","placement","Trans","i18nKey","warningOnly","validator","async","rule","_baiClient$_config5","Promise","reject","amount","resolve","InputNumberWithSlider","RemainingMark","props","onClick","preventDefault","next","_baiClient$_config6","_resourceLimits$mem8","_resourceLimits$mem9","_iSizeToSize8","_resourceLimits$mem5","_resourceLimits$mem6","_resourceLimits$mem7","size","_baiClient$_config7","_iSizeToSize6","_iSizeToSize7","DynamicUnitInputNumberWithSlider","addonBefore","numberFixed","valuePropName","Switch","checked","_resourceLimits$shmem2","hidden","dependencies","_getFieldValue","_getFieldValue2","_prev$resource","_next$resource","_ref3","_resourceLimits$accel7","_resourceLimits$accel8","_baiClient$_config8","_resourceLimits$accel9","_resourceLimits$accel10","_resourceLimits$accel11","_resourceLimits$accel12","currentAcceleratorType","_baiClient$_config9","ACCELERATOR_UNIT_MAP","initialValue","popupMatchSelectWidth","supports","Divider","colorBorder","Row","gutter","marginMD","Col","xs","Radio","_resourceLimits$cpu14","_baiClient$_config10","derivedClusterSizeMaxLimit","max_containers_per_session","clusterUnit","minCPU","position","top","transform","colorSuccess","opacity","CaretDownOutlined","node","v0","hash","v1","useKeyPairLazyLoadQuery","accessKey","keypair","_hooksUsingRelay_KeyPairQuery","refresh","useCallback","keypair_resource_policy","_hooksUsingRelay_KeyPairResourcePolicyQuery","resource_policy","max_concurrent_sessions","concurrency_used","_$find","_checkPresetInfo$scal","_checkPresetInfo$scal2","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal5","_checkPresetInfo$scal6","_checkPresetInfo$scal7","_checkPresetInfo$scal8","_checkPresetInfo$scal9","_checkPresetInfo$scal10","_checkPresetInfo$scal11","_checkPresetInfo$scal12","_$find2","_$min2","_$min3","data","refetch","isRefetching","useTanQuery","queryKey","queryFn","resourcePreset","check","group","scaling_group","staleTime","suspense","i","resourceGroupResourceSize","scaling_groups","using","result","_checkPresetInfo$scal13","_checkPresetInfo$scal14","_checkPresetInfo$scal15","_checkPresetInfo$scal16","_checkPresetInfo$scal17","_checkPresetInfo$scal18","maxCPUCoresPerContainer","limitParser","keypair_limits","group_limits","maxMemoryPerContainer","_$filter","configName","supportedAcceleratorInfo","_$min","keypair_remaining","group_remaining","scaling_group_remaining","MAX_SAFE_INTEGER"],"sourceRoot":""}