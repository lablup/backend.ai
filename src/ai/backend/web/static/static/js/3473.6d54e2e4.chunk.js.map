{"version":3,"file":"static/js/3473.6d54e2e4.chunk.js","mappings":"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","sources":["components/AgentSummaryList.tsx","components/__generated__/AgentSummaryListQuery.graphql.ts","pages/AgentSummaryPage.tsx"],"sourcesContent":["import {\n  baiSignedRequestWithPromise,\n  convertBinarySizeUnit,\n  filterNonNullItems,\n  toFixedFloorWithoutTrailingZeros,\n  transformSorterToOrderString,\n} from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { ResourceSlotName, useResourceSlotsDetails } from '../hooks/backendai';\nimport { useBAIPaginationOptionState } from '../hooks/reactPaginationQueryOptions';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport { useHiddenColumnKeysSetting } from '../hooks/useHiddenColumnKeysSetting';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport BAIPropertyFilter from './BAIPropertyFilter';\nimport Flex from './Flex';\nimport { ResourceTypeIcon } from './ResourceNumber';\nimport TableColumnsSettingModal from './TableColumnsSettingModal';\nimport {\n  AgentSummaryListQuery,\n  AgentSummaryListQuery$data,\n} from './__generated__/AgentSummaryListQuery.graphql';\nimport {\n  CheckCircleOutlined,\n  LoadingOutlined,\n  MinusCircleOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport { useToggle } from 'ahooks';\nimport {\n  Button,\n  Segmented,\n  Table,\n  TableProps,\n  theme,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { AnyObject } from 'antd/es/_util/type';\nimport { ColumnsType, ColumnType } from 'antd/es/table';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useState, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ntype AgentSummary = NonNullable<\n  AgentSummaryListQuery$data['agent_summary_list']\n>['items'][number];\n\ninterface AgentSummaryListProps {\n  containerStyle?: React.CSSProperties;\n  tableProps?: Omit<TableProps, 'dataSource'>;\n}\n\nconst AgentSummaryList: React.FC<AgentSummaryListProps> = ({\n  containerStyle,\n  tableProps,\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n  const [visibleColumnSettingModal, { toggle: toggleColumnSettingModal }] =\n    useToggle();\n  const [isPendingStatusFetch, startStatusFetchTransition] = useTransition();\n  const [isPendingRefresh, startRefreshTransition] = useTransition();\n  const [isPendingPageChange, startPageChangeTransition] = useTransition();\n  const [selectedStatus, setSelectedStatus] = useState('ALIVE');\n  const [optimisticSelectedStatus, setOptimisticSelectedStatus] =\n    useState(selectedStatus);\n  const [isPendingFilter, startFilterTransition] = useTransition();\n\n  const [filterString, setFilterString] = useState<string>();\n\n  const {\n    baiPaginationOption,\n    tablePaginationOption,\n    setTablePaginationOption,\n  } = useBAIPaginationOptionState({\n    current: 1,\n    pageSize: 20,\n  });\n  const [order, setOrder] = useState<string>();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [fetchPolicy] = useState<FetchPolicy>('network-only');\n  const updateFetchKeyInTransition = () =>\n    startRefreshTransition(() => {\n      updateFetchKey();\n    });\n  const baiClient = useSuspendedBackendaiClient();\n\n  const { agent_summary_list } = useLazyLoadQuery<AgentSummaryListQuery>(\n    graphql`\n      query AgentSummaryListQuery(\n        $limit: Int!\n        $offset: Int!\n        $filter: String\n        $status: String\n        $order: String\n      ) {\n        agent_summary_list(\n          limit: $limit\n          offset: $offset\n          filter: $filter\n          status: $status\n          order: $order\n        ) {\n          items {\n            id\n            status\n            architecture\n            available_slots\n            occupied_slots\n            scaling_group\n            schedulable\n          }\n          total_count\n        }\n      }\n    `,\n    {\n      limit: baiPaginationOption.limit,\n      offset: baiPaginationOption.offset,\n      filter: filterString,\n      order,\n      status: selectedStatus,\n    },\n    {\n      fetchKey,\n      fetchPolicy,\n    },\n  );\n\n  const { data } = useSuspenseTanQuery({\n    queryKey: ['baiClient.setting.list'],\n    queryFn: () =>\n      baiSignedRequestWithPromise({\n        method: 'POST',\n        url: '/config/get',\n        body: {\n          key: `volumes/proxies`,\n          prefix: true,\n        },\n        client: baiClient,\n      }),\n  });\n\n  const sftpScalingGroups = _.flatMap(data?.result, (value) =>\n    _.get(value, 'sftp_scaling_groups', null),\n  ).filter(Boolean);\n\n  // Hide sFTP upload agents\n  const filteredAgentSummaryList = _.filter(\n    agent_summary_list?.items,\n    (item) => !_.includes(sftpScalingGroups, item?.scaling_group),\n  );\n\n  const columns: ColumnsType<AgentSummary> = [\n    {\n      title: '#',\n      fixed: 'left',\n      render: (id, record, index) => {\n        return (\n          index +\n          1 +\n          (tablePaginationOption.current - 1) * tablePaginationOption.pageSize\n        );\n      },\n      showSorterTooltip: false,\n      rowScope: 'row',\n    },\n    {\n      title: <>ID</>,\n      key: 'id',\n      dataIndex: 'id',\n      fixed: 'left',\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\" align=\"start\">\n            <Typography.Text>{value}</Typography.Text>\n          </Flex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('agent.Architecture'),\n      key: 'architecture',\n      dataIndex: 'architecture',\n    },\n    {\n      title: t('agent.Allocation'),\n      key: 'allocation',\n      render: (value, record) => {\n        const parsedOccupiedSlots: {\n          [key in ResourceSlotName]: string | undefined;\n        } = JSON.parse(record?.occupied_slots || '{}');\n        const parsedAvailableSlots: {\n          [key in ResourceSlotName]: string | undefined;\n        } = JSON.parse(record?.available_slots || '{}');\n        return (\n          <Flex direction=\"column\" gap=\"xxs\">\n            {_.map(\n              parsedAvailableSlots,\n              (value: string | number, key: ResourceSlotName) => {\n                if (key === 'cpu') {\n                  const cpuPercent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots.cpu) /\n                      _.toNumber(parsedAvailableSlots.cpu)) *\n                      100,\n                  );\n                  return (\n                    <Flex key={key} justify=\"between\" style={{ minWidth: 220 }}>\n                      <Flex gap=\"xxs\">\n                        <ResourceTypeIcon key={key} type={key} />\n                        <Typography.Text>\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedOccupiedSlots.cpu || 0,\n                            0,\n                          )}\n                          /\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedAvailableSlots.cpu || 0,\n                            0,\n                          )}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          {mergedResourceSlots?.cpu?.display_unit}\n                        </Typography.Text>\n                      </Flex>\n                      <BAIProgressWithLabel\n                        percent={cpuPercent}\n                        strokeColor={\n                          cpuPercent > 80\n                            ? token.colorError\n                            : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(cpuPercent, 1) + ' %'\n                        }\n                      />\n                    </Flex>\n                  );\n                } else if (key === 'mem') {\n                  const memPercent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots.mem) /\n                      _.toNumber(parsedAvailableSlots.mem)) *\n                      100,\n                  );\n                  return (\n                    <Flex\n                      key={'mem'}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                    >\n                      <Flex gap=\"xxs\">\n                        <ResourceTypeIcon type={'mem'} />\n                        <Typography.Text>\n                          {convertBinarySizeUnit(\n                            parsedOccupiedSlots.mem,\n                            'g',\n                            0,\n                          )?.numberFixed ?? 0}\n                          /\n                          {convertBinarySizeUnit(\n                            parsedAvailableSlots.mem,\n                            'g',\n                            0,\n                          )?.numberFixed ?? 0}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          GiB\n                        </Typography.Text>\n                      </Flex>\n                      <BAIProgressWithLabel\n                        percent={memPercent}\n                        strokeColor={\n                          memPercent > 80\n                            ? token.colorError\n                            : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(memPercent, 1) + ' %'\n                        }\n                      />\n                    </Flex>\n                  );\n                } else if (parsedAvailableSlots[key]) {\n                  const percent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots[key]) /\n                      _.toNumber(parsedAvailableSlots[key])) *\n                      100,\n                  );\n                  return (\n                    <Flex\n                      key={key}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                      gap=\"xxs\"\n                    >\n                      <Flex gap=\"xxs\">\n                        <ResourceTypeIcon key={key} type={key} />\n                        <Typography.Text>\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedOccupiedSlots[key] || 0,\n                            2,\n                          )}\n                          /\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedAvailableSlots[key],\n                            2,\n                          )}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          {mergedResourceSlots?.[key]?.display_unit}\n                        </Typography.Text>\n                      </Flex>\n                      <BAIProgressWithLabel\n                        percent={percent}\n                        strokeColor={\n                          percent > 80 ? token.colorError : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(percent, 1) + ' %'\n                        }\n                      />\n                    </Flex>\n                  );\n                }\n              },\n            )}\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('agent.Schedulable'),\n      key: 'schedulable',\n      dataIndex: 'schedulable',\n      render: (value) => {\n        return (\n          <Flex justify=\"center\">\n            {value === true ? (\n              <CheckCircleOutlined\n                style={{\n                  color: token.colorSuccess,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            ) : (\n              <MinusCircleOutlined\n                style={{\n                  color: token.colorTextDisabled,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            )}\n          </Flex>\n        );\n      },\n      sorter: true,\n    },\n  ];\n  const [hiddenColumnKeys, setHiddenColumnKeys] =\n    useHiddenColumnKeysSetting('AgentSummaryList');\n\n  return (\n    <Flex direction=\"column\" align=\"stretch\" style={containerStyle}>\n      <Flex\n        justify=\"between\"\n        align=\"start\"\n        gap=\"xs\"\n        style={{ padding: token.paddingXS }}\n        wrap=\"wrap\"\n      >\n        <Flex\n          direction=\"row\"\n          gap={'sm'}\n          align=\"start\"\n          style={{ flex: 1 }}\n          wrap=\"wrap\"\n        >\n          <Segmented\n            options={[\n              {\n                label: t('agent.Connected'),\n                value: 'ALIVE',\n              },\n              {\n                label: t('agent.Terminated'),\n                value: 'TERMINATED',\n              },\n            ]}\n            value={\n              isPendingStatusFetch ? optimisticSelectedStatus : selectedStatus\n            }\n            onChange={(value) => {\n              setOptimisticSelectedStatus(value);\n              startStatusFetchTransition(() => {\n                setSelectedStatus(value);\n              });\n            }}\n          />\n\n          <BAIPropertyFilter\n            filterProperties={[\n              {\n                key: 'id',\n                propertyLabel: 'ID',\n                type: 'string',\n              },\n              {\n                key: 'schedulable',\n                propertyLabel: t('agent.Schedulable'),\n                type: 'boolean',\n                options: [\n                  {\n                    label: t('general.Enabled'),\n                    value: 'true',\n                  },\n                  {\n                    label: t('general.Disabled'),\n                    value: 'false',\n                  },\n                ],\n              },\n            ]}\n            value={filterString}\n            // loading={isPendingFilter}\n            onChange={(value) => {\n              startFilterTransition(() => {\n                setFilterString(value);\n              });\n            }}\n          />\n        </Flex>\n        <Flex gap=\"xs\">\n          <Tooltip title={t('button.Refresh')}>\n            <Button\n              loading={isPendingRefresh}\n              onClick={() => updateFetchKeyInTransition()}\n              icon={<ReloadOutlined />}\n            ></Button>\n          </Tooltip>\n        </Flex>\n      </Flex>\n      <Table\n        bordered\n        scroll={{ x: 'max-content' }}\n        rowKey={'id'}\n        dataSource={filterNonNullItems(filteredAgentSummaryList)}\n        showSorterTooltip={false}\n        columns={\n          _.filter(\n            columns,\n            (column) => !_.includes(hiddenColumnKeys, _.toString(column?.key)),\n          ) as ColumnType<AnyObject>[]\n        }\n        pagination={{\n          pageSize: tablePaginationOption.pageSize,\n          showSizeChanger: true,\n          total: agent_summary_list?.total_count,\n          current: tablePaginationOption.current,\n          showTotal(total, range) {\n            return `${range[0]}-${range[1]} of ${total} items`;\n          },\n          pageSizeOptions: ['10', '20', '50'],\n          style: { marginRight: token.marginXS },\n        }}\n        onChange={({ pageSize, current }, filters, sorter) => {\n          startPageChangeTransition(() => {\n            if (_.isNumber(current) && _.isNumber(pageSize)) {\n              setTablePaginationOption({\n                current,\n                pageSize,\n              });\n            }\n            setOrder(transformSorterToOrderString(sorter));\n          });\n        }}\n        loading={{\n          spinning:\n            isPendingPageChange || isPendingStatusFetch || isPendingFilter,\n          indicator: <LoadingOutlined />,\n        }}\n        {...tableProps}\n      />\n      <Flex\n        justify=\"end\"\n        style={{\n          padding: token.paddingXXS,\n        }}\n      >\n        <Button\n          type=\"text\"\n          icon={<SettingOutlined />}\n          onClick={() => {\n            toggleColumnSettingModal();\n          }}\n        />\n      </Flex>\n      <TableColumnsSettingModal\n        open={visibleColumnSettingModal}\n        onRequestClose={(values) => {\n          values?.selectedColumnKeys &&\n            setHiddenColumnKeys(\n              _.difference(\n                columns.map((column) => _.toString(column.key)),\n                values?.selectedColumnKeys,\n              ),\n            );\n          toggleColumnSettingModal();\n        }}\n        columns={columns}\n        hiddenColumnKeys={hiddenColumnKeys}\n      />\n    </Flex>\n  );\n};\n\nexport default AgentSummaryList;\n","/**\n * @generated SignedSource<<e64bf95a42f8eb7ee68bcdf26aa87ef3>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type AgentSummaryListQuery$variables = {\n  filter?: string | null | undefined;\n  limit: number;\n  offset: number;\n  order?: string | null | undefined;\n  status?: string | null | undefined;\n};\nexport type AgentSummaryListQuery$data = {\n  readonly agent_summary_list: {\n    readonly items: ReadonlyArray<{\n      readonly architecture: string | null | undefined;\n      readonly available_slots: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly occupied_slots: string | null | undefined;\n      readonly scaling_group: string | null | undefined;\n      readonly schedulable: boolean | null | undefined;\n      readonly status: string | null | undefined;\n    } | null | undefined>;\n    readonly total_count: number;\n  } | null | undefined;\n};\nexport type AgentSummaryListQuery = {\n  response: AgentSummaryListQuery$data;\n  variables: AgentSummaryListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"order\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv5 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"filter\",\n        \"variableName\": \"filter\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"limit\",\n        \"variableName\": \"limit\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"offset\",\n        \"variableName\": \"offset\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"order\",\n        \"variableName\": \"order\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"status\",\n        \"variableName\": \"status\"\n      }\n    ],\n    \"concreteType\": \"AgentSummaryList\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"agent_summary_list\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"AgentSummary\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"items\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"status\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"architecture\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"available_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"occupied_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"scaling_group\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"schedulable\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"total_count\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentSummaryListQuery\",\n    \"selections\": (v5/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v0/*: any*/),\n      (v4/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"AgentSummaryListQuery\",\n    \"selections\": (v5/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"caaf8909248bac69bce5c748e6d28032\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentSummaryListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AgentSummaryListQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $filter: String\\n  $status: String\\n  $order: String\\n) {\\n  agent_summary_list(limit: $limit, offset: $offset, filter: $filter, status: $status, order: $order) {\\n    items {\\n      id\\n      status\\n      architecture\\n      available_slots\\n      occupied_slots\\n      scaling_group\\n      schedulable\\n    }\\n    total_count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"dab7ef4f1205af54a6f80ce0d28098c7\";\n\nexport default node;\n","import AgentSummaryList from '../components/AgentSummaryList';\nimport { Card, Skeleton, theme } from 'antd';\nimport React, { Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StringParam, useQueryParam, withDefault } from 'use-query-params';\n\ntype TabKey = 'agent-summary';\n\ninterface ResourcesPageProps {}\n\nconst tabParam = withDefault(StringParam, 'agent-summary');\n\nconst ResourcesPage: React.FC<ResourcesPageProps> = (props) => {\n  const { t } = useTranslation();\n  const [curTabKey, setCurTabKey] = useQueryParam('tab', tabParam, {\n    updateType: 'replace',\n  });\n\n  const { token } = theme.useToken();\n\n  return (\n    <Card\n      activeTabKey={curTabKey}\n      onTabChange={(key) => setCurTabKey(key as TabKey)}\n      tabList={[\n        {\n          key: 'agent-summary',\n          tab: t('webui.menu.AgentSummary'),\n        },\n      ]}\n      styles={{\n        body: {\n          padding: 0,\n          paddingTop: 1,\n          overflow: 'hidden',\n        },\n      }}\n    >\n      {curTabKey === 'agent-summary' ? (\n        // To remove duplicated border in the bordered table, we need to remove margin of the container.\n        <Suspense\n          fallback={\n            <Skeleton\n              active\n              style={{ padding: token.paddingContentVerticalLG }}\n            />\n          }\n        >\n          <AgentSummaryList\n            containerStyle={{ marginLeft: -1, marginRight: -1 }}\n          />\n        </Suspense>\n      ) : null}\n    </Card>\n  );\n};\n\nexport default ResourcesPage;\n"],"names":["_ref","containerStyle","tableProps","t","useTranslation","token","theme","useToken","mergedResourceSlots","useResourceSlotsDetails","visibleColumnSettingModal","toggle","toggleColumnSettingModal","useToggle","isPendingStatusFetch","startStatusFetchTransition","useTransition","isPendingRefresh","startRefreshTransition","isPendingPageChange","startPageChangeTransition","selectedStatus","setSelectedStatus","useState","optimisticSelectedStatus","setOptimisticSelectedStatus","isPendingFilter","startFilterTransition","filterString","setFilterString","baiPaginationOption","tablePaginationOption","setTablePaginationOption","useBAIPaginationOptionState","current","pageSize","order","setOrder","fetchKey","updateFetchKey","useUpdatableState","fetchPolicy","baiClient","useSuspendedBackendaiClient","agent_summary_list","useLazyLoadQuery","_AgentSummaryListQuery","require","limit","offset","filter","status","data","useSuspenseTanQuery","queryKey","queryFn","baiSignedRequestWithPromise","method","url","body","key","prefix","client","sftpScalingGroups","_","result","value","Boolean","filteredAgentSummaryList","items","item","scaling_group","columns","title","fixed","render","id","record","index","showSorterTooltip","rowScope","_jsx","_Fragment","children","dataIndex","Flex","direction","align","Typography","Text","sorter","parsedOccupiedSlots","JSON","parse","occupied_slots","parsedAvailableSlots","available_slots","gap","_mergedResourceSlots$","cpuPercent","cpu","_jsxs","justify","style","minWidth","ResourceTypeIcon","type","toFixedFloorWithoutTrailingZeros","fontSize","sizeXS","display_unit","BAIProgressWithLabel","percent","strokeColor","colorError","colorSuccess","width","valueLabel","_convertBinarySizeUni","_convertBinarySizeUni2","_convertBinarySizeUni3","_convertBinarySizeUni4","memPercent","mem","convertBinarySizeUnit","numberFixed","_mergedResourceSlots$2","CheckCircleOutlined","color","fontSizeXL","MinusCircleOutlined","colorTextDisabled","hiddenColumnKeys","setHiddenColumnKeys","useHiddenColumnKeysSetting","padding","paddingXS","wrap","flex","Segmented","options","label","onChange","BAIPropertyFilter","filterProperties","propertyLabel","Tooltip","Button","loading","onClick","icon","ReloadOutlined","Table","bordered","scroll","x","rowKey","dataSource","filterNonNullItems","column","pagination","showSizeChanger","total","total_count","showTotal","range","pageSizeOptions","marginRight","marginXS","_ref2","filters","transformSorterToOrderString","spinning","indicator","LoadingOutlined","paddingXXS","SettingOutlined","TableColumnsSettingModal","open","onRequestClose","values","selectedColumnKeys","map","node","v0","v1","v2","v3","v4","v5","hash","tabParam","withDefault","StringParam","props","curTabKey","setCurTabKey","useQueryParam","updateType","Card","activeTabKey","onTabChange","tabList","tab","styles","paddingTop","overflow","Suspense","fallback","Skeleton","active","paddingContentVerticalLG","AgentSummaryList","marginLeft"],"sourceRoot":""}