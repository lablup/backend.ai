{"version":3,"file":"static/js/230.eaf4e10d.chunk.js","mappings":"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","sources":["components/BAIModal.tsx","components/TOTPActivateModal.tsx","components/UserProfileSettingModal.tsx","components/__generated__/TOTPActivateModalFragment.graphql.ts","components/__generated__/UserProfileSettingModalQuery.graphql.ts","hooks/backendai.tsx"],"sourcesContent":["// @ts-ignore\nimport rawBAIModalCss from './BAIModal.css?raw';\nimport { Modal, ModalProps } from 'antd';\nimport React from 'react';\n\nexport interface BAIModalProps extends ModalProps {\n  okText?: string; // customize text of ok button with adequate content\n}\nconst BAIModal: React.FC<BAIModalProps> = ({ ...modalProps }) => {\n  return (\n    <>\n      <style>{rawBAIModalCss}</style>\n      <Modal\n        centered={modalProps.centered ?? true}\n        className=\"bai-modal\"\n        {...modalProps}\n      />\n    </>\n  );\n};\n\nexport default BAIModal;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport { TOTPActivateModalFragment$key } from './__generated__/TOTPActivateModalFragment.graphql';\nimport { QRCode, Typography, Input, theme, Form, message, Spin } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useQuery } from 'react-query';\nimport { useFragment } from 'react-relay';\n\ntype TOTPActivateFormInput = {\n  otp: number;\n};\n\ninterface Props extends BAIModalProps {\n  userFrgmt?: TOTPActivateModalFragment$key | null;\n  onRequestClose: (success?: boolean) => void;\n}\n\nconst TOTPActivateModal: React.FC<Props> = ({\n  userFrgmt = null,\n  onRequestClose,\n  ...baiModalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [form] = Form.useForm<TOTPActivateFormInput>();\n\n  const user = useFragment(\n    graphql`\n      fragment TOTPActivateModalFragment on User {\n        email\n        totp_activated @skipOnClient(if: $isNotSupportTotp)\n      }\n    `,\n    userFrgmt,\n  );\n\n  const baiClient = useSuspendedBackendaiClient();\n  let initializedTotp = useQuery<{\n    totp_key: string;\n    totp_uri: string;\n  }>({\n    queryKey: ['initialize_totp', baiClient?.email, baiModalProps.open],\n    queryFn: () => {\n      return user?.email === baiClient?.email &&\n        !user?.totp_activated &&\n        baiModalProps.open\n        ? baiClient.initialize_totp()\n        : null;\n    },\n    suspense: false,\n    staleTime: 0,\n    cacheTime: 0,\n  });\n\n  const mutationToActivateTotp = useTanMutation({\n    mutationFn: (values: TOTPActivateFormInput) => {\n      return baiClient.activate_totp(values.otp);\n    },\n  });\n\n  const _onOk = () => {\n    form.validateFields().then((values) => {\n      mutationToActivateTotp.mutate(values, {\n        onSuccess: () => {\n          message.success(t('totp.TotpSetupCompleted'));\n          onRequestClose(true);\n        },\n        onError: () => {\n          message.error(t('totp.InvalidTotpCode'));\n        },\n      });\n      new Promise((resolve, reject) => {}).then(() => {\n        onRequestClose(true);\n      });\n    });\n  };\n\n  return (\n    <BAIModal\n      title={t('webui.menu.SetupTotp')}\n      maskClosable={false}\n      confirmLoading={mutationToActivateTotp.isLoading}\n      onOk={_onOk}\n      onCancel={() => {\n        onRequestClose();\n      }}\n      style={{ zIndex: 1 }}\n      {...baiModalProps}\n    >\n      {initializedTotp.isLoading ? (\n        <Flex justify=\"center\" direction=\"row\">\n          <Spin />\n        </Flex>\n      ) : !initializedTotp.data ? (\n        <Flex justify=\"center\" direction=\"row\">\n          {t('totp.TotpSetupNotAvailable')}\n        </Flex>\n      ) : (\n        <Form\n          preserve={false}\n          form={form}\n          validateTrigger={['onChange', 'onBlur']}\n        >\n          {t('totp.TypeInAuthKey')}\n          <Flex\n            justify=\"center\"\n            style={{ margin: token.marginSM, gap: token.margin }}\n          >\n            <QRCode value={initializedTotp.data.totp_uri} />\n          </Flex>\n          {t('totp.ScanQRToEnable')}\n          <Flex\n            justify=\"center\"\n            style={{ margin: token.marginSM, gap: token.margin }}\n          >\n            <Typography.Text copyable code>\n              {initializedTotp.data.totp_key}\n            </Typography.Text>\n          </Flex>\n          {t('totp.TypeInAuthKey')}\n          <Flex\n            justify=\"center\"\n            style={{ margin: token.marginSM, gap: token.margin }}\n          >\n            <Form.Item required name=\"otp\">\n              <Input\n                maxLength={6}\n                allowClear\n                placeholder=\"000000\"\n                style={{ maxWidth: 120 }}\n              />\n            </Form.Item>\n          </Flex>\n        </Form>\n      )}\n    </BAIModal>\n  );\n};\n\nexport default TOTPActivateModal;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useCurrentUserInfo } from '../hooks/backendai';\nimport { useTanQuery, useTanMutation } from '../hooks/reactQueryAlias';\nimport BAIModal from './BAIModal';\nimport { passwordPattern } from './ResetPasswordRequired';\nimport TOTPActivateModal from './TOTPActivateModal';\n// @ts-ignore\nimport customCSS from './UserProfileSettingModal.css?raw';\nimport { UserProfileSettingModalQuery } from './__generated__/UserProfileSettingModalQuery.graphql';\nimport { ExclamationCircleFilled } from '@ant-design/icons';\nimport { useToggle } from 'ahooks';\nimport { Modal, ModalProps, Input, Form, Select, message, Switch } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useDeferredValue } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ninterface Props extends ModalProps {\n  onRequestClose: (success?: boolean) => void;\n}\n\ntype UserProfileFormValues = {\n  full_name: string;\n  originalPassword?: string;\n  newPasswordConfirm?: string;\n  newPassword?: string;\n  access_key?: string;\n  secret_key?: string;\n  totp_activated: boolean;\n};\n\nconst UserProfileSettingModal: React.FC<Props> = ({\n  onRequestClose,\n  ...baiModalProps\n}) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm<UserProfileFormValues>();\n  const [messageApi, contextHolder] = message.useMessage();\n  const [modal, modalContextHolder] = Modal.useModal();\n  const [isOpenTOTPActivateModal, { toggle: toggleTOTPActivateModal }] =\n    useToggle(false);\n  const baiClient = useSuspendedBackendaiClient();\n\n  const { data: isManagerSupportingTOTP } = useTanQuery(\n    'isManagerSupportingTOTP',\n    () => {\n      return baiClient.isManagerSupportingTOTP();\n    },\n    {\n      suspense: true,\n    },\n  );\n  const totpSupported = baiClient.supports('2FA') && isManagerSupportingTOTP;\n\n  const [userInfo, userMutations] = useCurrentUserInfo();\n  const [fetchKey, updateFetchKey] = useUpdatableState('initial-fetch');\n  const deferredMergedFetchKey = useDeferredValue(fetchKey);\n\n  const { user } = useLazyLoadQuery<UserProfileSettingModalQuery>(\n    graphql`\n      query UserProfileSettingModalQuery(\n        $email: String!\n        $isNotSupportTotp: Boolean!\n      ) {\n        user(email: $email) {\n          id\n          totp_activated @skipOnClient(if: $isNotSupportTotp)\n          ...TOTPActivateModalFragment\n        }\n      }\n    `,\n    {\n      email: userInfo.email,\n      isNotSupportTotp: !totpSupported,\n    },\n    {\n      fetchPolicy: 'network-only',\n      fetchKey: deferredMergedFetchKey,\n    },\n  );\n\n  const { data: keyPairs } = useTanQuery<\n    {\n      secret_key: string;\n      access_key: string;\n    }[]\n  >(\n    'baiClient.keypair.list',\n    () => {\n      return baiClient.keypair\n        .list(userInfo.email, ['access_key', 'secret_key'], true)\n        .then((res: any) => res.keypairs);\n    },\n    {\n      suspense: true,\n    },\n  );\n\n  const mutationToRemoveTotp = useTanMutation({\n    mutationFn: () => {\n      return baiClient.remove_totp();\n    },\n  });\n\n  const onSubmit = () => {\n    form.validateFields().then((values) => {\n      userMutations.updateFullName(values.full_name, {\n        onSuccess: (newFullName) => {\n          if (newFullName !== userInfo.full_name) {\n            messageApi.open({\n              type: 'success',\n              content: t('webui.menu.FullnameUpdated'),\n            });\n          }\n\n          if (\n            values.newPassword &&\n            values.newPasswordConfirm &&\n            values.originalPassword\n          ) {\n            userMutations.updatePassword(\n              {\n                new_password: values.newPassword,\n                new_password2: values.newPasswordConfirm,\n                old_password: values.originalPassword,\n              },\n              {\n                onSuccess: () => {\n                  messageApi.open({\n                    type: 'success',\n                    content: t('webui.menu.PasswordUpdated'),\n                  });\n                  onRequestClose(true);\n                },\n                onError: (e) => {\n                  messageApi.open({\n                    type: 'error',\n                    content: e.message,\n                  });\n                },\n              },\n            );\n          } else {\n            onRequestClose(true);\n          }\n        },\n        onError: (e) => {\n          messageApi.open({\n            type: 'error',\n            content: e.message,\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <>\n      <style>{customCSS}</style>\n      <BAIModal\n        {...baiModalProps}\n        okText={t('webui.menu.Update')}\n        cancelText={t('webui.menu.Cancel')}\n        onCancel={() => {\n          onRequestClose();\n        }}\n        confirmLoading={userInfo.isPendingMutation}\n        onOk={() => onSubmit()}\n        centered\n        destroyOnClose\n        title={t('webui.menu.MyAccountInformation')}\n      >\n        <Form\n          layout=\"horizontal\"\n          labelCol={{ span: 8 }}\n          form={form}\n          initialValues={{\n            full_name: userInfo.full_name,\n            totp_activated: user?.totp_activated || false,\n            access_key: keyPairs?.[0].access_key,\n          }}\n          preserve={false}\n        >\n          <Form.Item\n            name=\"full_name\"\n            label={t('webui.menu.FullName')}\n            rules={[\n              () => ({\n                validator(_, value) {\n                  if (value && value.length < 65) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    new Error(t('webui.menu.FullNameInvalid')),\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item name=\"access_key\" label={t('general.AccessKey')}>\n            <Select\n              options={_.map(keyPairs, (keyPair) => ({\n                value: keyPair.access_key,\n              }))}\n              // onSelect={onSelectAccessKey}\n            ></Select>\n          </Form.Item>\n          <Form.Item\n            label={t('general.SecretKey')}\n            shouldUpdate={(prev, next) => prev.access_key !== next.access_key}\n          >\n            {({ getFieldValue }) => (\n              <Input.Password\n                value={\n                  _.find(keyPairs, ['access_key', getFieldValue('access_key')])\n                    ?.secret_key\n                }\n                className=\"disabled_style_readonly\"\n                readOnly\n              />\n            )}\n          </Form.Item>\n          <Form.Item\n            name=\"originalPassword\"\n            label={t('webui.menu.OriginalPassword')}\n            rules={[\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (\n                    !value &&\n                    (getFieldValue('newPassword') ||\n                      getFieldValue('newPasswordConfirm'))\n                  ) {\n                    return Promise.reject(\n                      new Error(t('webui.menu.InputOriginalPassword')),\n                    );\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n            dependencies={['newPassword', 'newPasswordConfirm']}\n          >\n            <Input.Password />\n          </Form.Item>\n          <Form.Item\n            name=\"newPassword\"\n            label={t('webui.menu.NewPassword')}\n            rules={[\n              {\n                pattern: passwordPattern,\n                message: t('webui.menu.InvalidPasswordMessage'),\n              },\n            ]}\n          >\n            <Input.Password />\n          </Form.Item>\n          <Form.Item\n            name=\"newPasswordConfirm\"\n            label={t('webui.menu.NewPasswordAgain')}\n            dependencies={['newPassword']}\n            rules={[\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('newPassword') === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    new Error(t('webui.menu.NewPasswordMismatch')),\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input.Password />\n          </Form.Item>\n          {!!totpSupported && (\n            <Form.Item\n              name=\"totp_activated\"\n              label={t('webui.menu.TotpActivated')}\n              valuePropName=\"checked\"\n            >\n              <Switch\n                onChange={(checked: boolean) => {\n                  if (checked) {\n                    toggleTOTPActivateModal();\n                  } else {\n                    if (user?.totp_activated) {\n                      form.setFieldValue('totp_activated', true);\n                      modal.confirm({\n                        title: t('totp.TurnOffTotp'),\n                        icon: <ExclamationCircleFilled />,\n                        content: t('totp.ConfirmTotpRemovalBody'),\n                        okText: t('button.Yes'),\n                        okType: 'danger',\n                        cancelText: t('button.No'),\n                        onOk() {\n                          mutationToRemoveTotp.mutate(undefined, {\n                            onSuccess: () => {\n                              message.success(\n                                t('totp.RemoveTotpSetupCompleted'),\n                              );\n                              updateFetchKey();\n                              form.setFieldValue('totp_activated', false);\n                            },\n                            onError: (error: any) => {\n                              message.error(error.message);\n                            },\n                          });\n                        },\n                        onCancel() {\n                          form.setFieldValue('totp_activated', true);\n                        },\n                      });\n                    }\n                  }\n                }}\n              />\n            </Form.Item>\n          )}\n        </Form>\n        {!!totpSupported && (\n          <TOTPActivateModal\n            userFrgmt={user}\n            open={isOpenTOTPActivateModal}\n            onRequestClose={(success) => {\n              if (success) {\n                updateFetchKey();\n              } else {\n                form.setFieldValue('totp_activated', false);\n              }\n              toggleTOTPActivateModal();\n            }}\n          />\n        )}\n      </BAIModal>\n      {contextHolder}\n      {modalContextHolder}\n    </>\n  );\n};\n\nexport default UserProfileSettingModal;\n","/**\n * @generated SignedSource<<84ef114f996ea8a63ee4526fc5d27953>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type TOTPActivateModalFragment$data = {\n  readonly email: string | null;\n  readonly totp_activated: boolean | null;\n  readonly \" $fragmentType\": \"TOTPActivateModalFragment\";\n};\nexport type TOTPActivateModalFragment$key = {\n  readonly \" $data\"?: TOTPActivateModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"TOTPActivateModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [\n    {\n      \"kind\": \"RootArgument\",\n      \"name\": \"isNotSupportTotp\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"TOTPActivateModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"email\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"totp_activated\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"User\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"f5da6b3094f7d70bef9373d9c907955c\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2c0e08c01e860fb4e78a264e42a1eeb1>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type UserProfileSettingModalQuery$variables = {\n  email: string;\n  isNotSupportTotp: boolean;\n};\nexport type UserProfileSettingModalQuery$data = {\n  readonly user: {\n    readonly id: string | null;\n    readonly totp_activated: boolean | null;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"TOTPActivateModalFragment\">;\n  } | null;\n};\nexport type UserProfileSettingModalQuery = {\n  response: UserProfileSettingModalQuery$data;\n  variables: UserProfileSettingModalQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"isNotSupportTotp\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"totp_activated\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"UserProfileSettingModalQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"TOTPActivateModalFragment\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"UserProfileSettingModalQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"email\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"b0c9773ff4a3e759f0f9822463daa757\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"UserProfileSettingModalQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query UserProfileSettingModalQuery(\\n  $email: String!\\n  $isNotSupportTotp: Boolean!\\n) {\\n  user(email: $email) {\\n    id\\n    totp_activated @skipOnClient(if: $isNotSupportTotp)\\n    ...TOTPActivateModalFragment\\n  }\\n}\\n\\nfragment TOTPActivateModalFragment on User {\\n  email\\n  totp_activated @skipOnClient(if: $isNotSupportTotp)\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"c87e74dfaa01d51a1697e67df81e101b\";\n\nexport default node;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { maskString } from '../helper';\nimport { useTanMutation, useTanQuery } from './reactQueryAlias';\nimport _ from 'lodash';\nimport { useEffect, useState } from 'react';\n\nexport interface QuotaScope {\n  id: string;\n  quota_scope_id: string;\n  storage_host_name: string;\n  details: {\n    hard_limit_bytes: number | null;\n    usage_bytes: number | null;\n    usage_count: number | null;\n  };\n}\n\nexport const useResourceSlots = () => {\n  const [key, checkUpdate] = useUpdatableState('first');\n  // const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const baiClient = useSuspendedBackendaiClient();\n  const { data: resourceSlots } = useTanQuery<{\n    cpu?: string;\n    mem?: string;\n    'cuda.shares'?: string;\n    'cuda.device'?: string;\n  }>({\n    queryKey: ['useResourceSlots', key],\n    queryFn: () => {\n      return baiClient.get_resource_slots();\n    },\n    staleTime: 0,\n  });\n  return [\n    resourceSlots,\n    {\n      refresh: () => checkUpdate(),\n    },\n  ] as const;\n};\n\ninterface UserInfo {\n  full_name: string;\n  email: string;\n}\n\ntype mutationOptions<T> = {\n  onSuccess?: (value: T) => void;\n  onError?: (error: any) => void;\n};\n\nexport const useCurrentUserInfo = () => {\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [userInfo, _setUserInfo] = useState<UserInfo>({\n    full_name: baiClient.full_name,\n    email: baiClient.email,\n  });\n\n  const getUsername = () => {\n    let name: string =\n      _.trim(userInfo.full_name).length > 0\n        ? userInfo.full_name\n        : userInfo.email;\n    // mask username only when the configuration is enabled\n    if (baiClient._config.maskUserInfo) {\n      const maskStartIdx = 2;\n      const emailPattern =\n        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n      const isEmail: boolean = emailPattern.test(name);\n      const maskLength = isEmail\n        ? name.split('@')[0].length - maskStartIdx\n        : name.length - maskStartIdx;\n      name = maskString(name, '*', maskStartIdx, maskLength);\n    }\n    return name;\n  };\n\n  useEffect(() => {\n    const handler = (e: any) => {\n      if (baiClient.supports('change-user-name')) {\n        const input = e.detail;\n        _setUserInfo((v) => ({\n          ...v,\n          full_name: input,\n        }));\n      }\n    };\n    document.addEventListener('current-user-info-changed', handler);\n    return () => {\n      document.removeEventListener('current-user-info-changed', handler);\n    };\n  }, [baiClient]);\n\n  const mutationToUpdateUserFullName = useTanMutation({\n    mutationFn: (values: { email: string; full_name: string }) => {\n      return baiClient.update_full_name(values.email, values.full_name);\n    },\n  });\n  const mutationToUpdateUserPassword = useTanMutation({\n    mutationFn: (values: {\n      old_password: string;\n      new_password: string;\n      new_password2: string;\n    }) => {\n      return baiClient.update_password(\n        values.old_password,\n        values.new_password,\n        values.new_password2,\n      );\n    },\n  });\n\n  return [\n    {\n      ...userInfo,\n      username: getUsername(),\n      isPendingMutation:\n        mutationToUpdateUserFullName.isLoading ||\n        mutationToUpdateUserPassword.isLoading,\n    },\n    {\n      updateFullName: (\n        newFullName: string,\n        options?: mutationOptions<string>,\n      ) => {\n        mutationToUpdateUserFullName.mutate(\n          {\n            full_name: newFullName,\n            email: baiClient.email,\n          },\n          {\n            onSuccess: () => {\n              options?.onSuccess && options.onSuccess(newFullName);\n              document.dispatchEvent(\n                new CustomEvent('current-user-info-changed', {\n                  detail: newFullName,\n                }),\n              );\n              _setUserInfo((v) => ({\n                ...v,\n                full_name: newFullName,\n              }));\n            },\n            onError: (error: any) => {\n              options?.onError && options.onError(error);\n            },\n          },\n        );\n      },\n      updatePassword: (\n        params: {\n          old_password: string;\n          new_password: string;\n          new_password2: string;\n        },\n        options?: mutationOptions<undefined>,\n      ) => {\n        mutationToUpdateUserPassword.mutate(params, {\n          onSuccess: () => {\n            options?.onSuccess && options.onSuccess(undefined);\n          },\n          onError: (error: any) => {\n            options?.onError && options.onError(error);\n          },\n        });\n      },\n    },\n  ] as const;\n};\n"],"names":["_ref","_modalProps$centered","modalProps","Object","assign","_objectDestructuringEmpty","_jsxs","_Fragment","children","_jsx","Modal","_objectSpread","centered","className","_ref$userFrgmt","userFrgmt","onRequestClose","baiModalProps","_objectWithoutProperties","_excluded","t","useTranslation","token","theme","useToken","_Form$useForm","Form","useForm","form","_slicedToArray","user","useFragment","_TOTPActivateModalFragment","require","baiClient","useSuspendedBackendaiClient","initializedTotp","useQuery","queryKey","email","open","queryFn","totp_activated","initialize_totp","suspense","staleTime","cacheTime","mutationToActivateTotp","useTanMutation","mutationFn","values","activate_totp","otp","BAIModal","title","maskClosable","confirmLoading","isLoading","onOk","validateFields","then","mutate","onSuccess","message","success","onError","error","Promise","resolve","reject","onCancel","style","zIndex","Flex","justify","direction","Spin","data","preserve","validateTrigger","margin","marginSM","gap","QRCode","value","totp_uri","Typography","Text","copyable","code","totp_key","Item","required","name","Input","maxLength","allowClear","placeholder","maxWidth","_message$useMessage","useMessage","_message$useMessage2","messageApi","contextHolder","_Modal$useModal","useModal","_Modal$useModal2","modal","modalContextHolder","_useToggle","useToggle","_useToggle2","isOpenTOTPActivateModal","toggleTOTPActivateModal","toggle","isManagerSupportingTOTP","useTanQuery","totpSupported","supports","_useCurrentUserInfo","useCurrentUserInfo","_useCurrentUserInfo2","userInfo","userMutations","_useUpdatableState","useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","deferredMergedFetchKey","useDeferredValue","useLazyLoadQuery","_UserProfileSettingModalQuery","isNotSupportTotp","fetchPolicy","keyPairs","keypair","list","res","keypairs","mutationToRemoveTotp","remove_totp","okText","cancelText","isPendingMutation","updateFullName","full_name","newFullName","type","content","newPassword","newPasswordConfirm","originalPassword","updatePassword","new_password","new_password2","old_password","e","destroyOnClose","layout","labelCol","span","initialValues","access_key","label","rules","validator","_","length","Error","Select","options","keyPair","shouldUpdate","prev","next","_ref2","_$find","getFieldValue","Password","secret_key","readOnly","_ref3","dependencies","pattern","passwordPattern","_ref4","valuePropName","Switch","onChange","checked","setFieldValue","confirm","icon","ExclamationCircleFilled","okType","undefined","TOTPActivateModal","node","v0","v1","v2","v3","hash","useResourceSlots","key","checkUpdate","get_resource_slots","refresh","_useState","useState","_useState2","_setUserInfo","useEffect","handler","input","detail","v","document","addEventListener","removeEventListener","mutationToUpdateUserFullName","update_full_name","mutationToUpdateUserPassword","update_password","username","_config","maskUserInfo","maskLength","test","split","maskString","getUsername","dispatchEvent","CustomEvent","params"],"sourceRoot":""}