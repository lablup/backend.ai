{"version":3,"file":"static/js/7569.ec17f12c.chunk.js","mappings":"0LAwBA,MAAMA,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,oBAGZC,EAAK,CACH,CACE,KAAQ,WACR,KAAQ,KACR,aAAgB,oBAGpBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,MAAO,CACL,SAAY,CACV,oBAAwBF,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,yBACR,WAAc,CACZ,CACE,MAAS,KACT,KAASC,EACT,aAAgB,oBAChB,KAAQ,cACR,KAAQ,eACR,QAAU,EACV,WAAc,CACZ,CACE,KAAQ,gBACR,MAAUC,EACV,OAAU,UAGd,WAAc,OAGlB,KAAQ,QACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBF,EACxB,KAAQ,YACR,KAAQ,yBACR,WAAc,CACZ,CACE,MAAS,KACT,KAASC,EACT,aAAgB,oBAChB,KAAQ,cACR,KAAQ,eACR,QAAU,EACV,WAAc,CACXC,EACD,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,OAGlB,WAAc,QAIpB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,yBACR,cAAiB,QACjB,KAAQ,uIAGZ,CArF+B,GAuF9BH,EAAaI,KAAO,mCAErB,U,+MCjEA,MAAMC,GAAoBC,EAAAA,EAAAA,IAA2B,IAC/CC,GAAmBD,EAAAA,EAAAA,IAAsB,CAAC,GAC1CE,GAAyBC,EAAAA,EAAAA,KAAYC,IAClCJ,EAAAA,EAAAA,KACJK,GAAQA,EAAIJ,GAAkBG,KAC/B,CAACC,EAAKC,EAAKC,KACT,MAAMC,EAAOH,EAAIJ,GACjBK,EAAIL,EAAkB,IACjBO,EACH,CAACJ,GAAYG,GACb,MAyRR,EA9QoCE,KAGlC,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,OACR,MAAEC,GAAUC,EAAAA,EAAMC,WAClBC,GAAYC,EAAAA,EAAAA,OACZ,mBAAEC,EAAkB,oBAAEC,IAAwBC,EAAAA,EAAAA,OAC9C,mBAAEC,IAAuBC,EAAAA,EAAAA,4BACxBC,EAAgBC,IAAqBC,EAAAA,EAAAA,IAAQzB,IAC7C0B,EAAcC,IAAmBF,EAAAA,EAAAA,IAAQvB,IACzC0B,IAAwBC,EAAAA,EAAAA,GAC7B,0BAEIC,EAAQ,IAAIC,EAAAA,EAAO,CAAEC,YAAaJ,GAAwB,IAE1DK,GAAuBC,EAAAA,EAAAA,QAA+B,CAAC,GACvDC,EAA0BC,IAAAA,UAC9B,CAAC/B,EAAmBgC,KAClB,MAAMC,EAAmBL,EAAqBM,QAAQlC,IAAc,EACpE4B,EAAqBM,QAAQlC,GAAa,EAE1CsB,GAAiBlB,IAAU,IAAD+B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACxB,MAAMC,GAAoC,QAAfV,EAAA/B,EAAKJ,UAAU,IAAAmC,GAAgB,QAAhBC,EAAfD,EAAiBW,sBAAc,IAAAV,OAAhB,EAAfA,EAAiCW,SAAU,EAChEC,IACY,QAAfX,EAAAjC,EAAKJ,UAAU,IAAAqC,GAAgB,QAAhBC,EAAfD,EAAiBS,sBAAc,IAAAR,OAAhB,EAAfA,EAAiCS,SAAU,KAC5B,QAAfR,EAAAnC,EAAKJ,UAAU,IAAAuC,GAAa,QAAbC,EAAfD,EAAiBU,mBAAW,IAAAT,OAAb,EAAfA,EAA8BO,SAAU,KACzB,QAAfN,EAAArC,EAAKJ,UAAU,IAAAyC,GAAc,QAAdC,EAAfD,EAAiBS,oBAAY,IAAAR,OAAd,EAAfA,EAA+BK,SAAU,GAEtCI,GAAmC,QAAfR,EAAAvC,EAAKJ,UAAU,IAAA2C,OAAA,EAAfA,EAAiBQ,oBAAqB,EAC1DC,IACY,QAAfR,EAAAxC,EAAKJ,UAAU,IAAA4C,OAAA,EAAfA,EAAiBS,iBAAkB,GAAKpB,EAmC3C,OAjCApB,EAAmB,CACjByC,IAAK,UAAYtD,EACjBuD,eAAgB,CACdC,OAAQ,UACRC,QACEN,EAAoB,EACfC,EAAwBD,EAAqB,IAC9C,EACNO,SAAU,CACRC,QAAS,CACPC,aACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,UAAU,SAASC,MAAM,QAAOC,SAAA,EACvCJ,EAAAA,EAAAA,MAACK,EAAAA,EAAWC,KAAI,CAAAF,SAAA,CACb3D,EAAE,2BAA2B,MAAIuC,EAAmB,KAAG,IACvDG,EAAwB,SAE3BoB,EAAAA,EAAAA,KAACF,EAAAA,EAAWC,KAAI,CACdE,UAAQ,EACRC,KAAK,YACLC,MAAO,CACLC,SAAUhE,EAAMiE,WAChBC,SAAU,SACVT,SAEDjC,YASR,IACF5B,EACH,CAACJ,GAAY,IACRI,EAAKJ,GACRqD,eAAgBD,GAEnB,GACD,GAEJ,IACA,CAAEuB,SAAS,EAAMC,UAAU,IAgM7B,OA7LAC,EAAAA,EAAAA,YAAU,KACsB,IAA1B3D,EAAe6B,QAAiBpC,IAEpCO,EAAe4D,SAASC,IACtB,MAAM,UAAE/E,EAAS,YAAEgF,EAAW,eAAEC,GAAmBF,EAC7CG,EAAsBnD,IAAAA,MAC1BkD,GACCE,GAASA,EAAKC,KAAKC,OAGtB/D,GAAiBlB,IAAU,IAADkF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACxB,MAAMC,GAAiBxF,EAAKJ,GACtB6F,IACY,QAAfP,EAAAlF,EAAKJ,UAAU,IAAAsF,OAAA,EAAfA,EAAiBnC,oBAAqB,GAAK+B,EACxCY,EAAUF,EACZ,IACiB,QAAfL,EAAAnF,EAAKJ,UAAU,IAAAuF,OAAA,EAAfA,EAAiBlC,iBAAkB,GAAKwC,EAC1C,IA6BJ,OA3BAhF,EAAmB,CACjByC,IAAK,UAAYtD,EACjB+F,MAAM,EACNC,SACEnC,EAAAA,EAAAA,MAAA,QAAAI,SAAA,CACG3D,EAAE,oBAAoB,SACvB8D,EAAAA,EAAAA,KAAC6B,EAAAA,GAAO,CACN1B,MAAO,CACL2B,WAAY,UAEdC,GAAInF,EAAmBhB,GACvBoG,QAASA,KACPtF,EAAoB,UAAYd,EAAU,EAC1CiE,SACF,GAAGe,SAGTzB,eAAgB,CACdC,OAAQ,UACRC,QAASqC,EACTpC,SAAU,CACRC,QAASrD,EAAE,+BAGf+F,SAAU,IAGL,IACFjG,EACH,CAACJ,GAAY,CACXgF,cACA9B,aAAc,KACO,QAAfsC,EAAApF,EAAKJ,UAAU,IAAAwF,OAAA,EAAfA,EAAiBtC,eAAgB,MAClC+B,EAAeqB,KACfnB,GAASA,EAAKC,KAAKmB,oBAAsBpB,EAAKC,KAAKoB,QAGxD1D,gBAA+B,QAAf2C,EAAArF,EAAKJ,UAAU,IAAAyF,OAAA,EAAfA,EAAiB3C,iBAAkB,GACnDG,aAA4B,QAAfyC,EAAAtF,EAAKJ,UAAU,IAAA0F,OAAA,EAAfA,EAAiBzC,cAAe,GAC7CI,gBAA+B,QAAfsC,EAAAvF,EAAKJ,UAAU,IAAA2F,OAAA,EAAfA,EAAiBtC,iBAAkB,EACnDF,kBAAmB0C,GAEtB,IAGHZ,EAAeH,SAAQ2B,IAA8B,IAA7B,KAAErB,EAAI,cAAEsB,GAAeD,EAC7ChF,EAAMkF,KAAIC,UAER,MAAM5E,EAAWoD,EAAKmB,oBAAsBnB,EAAKoB,KACjD,IAAIK,EAAwB,EAE5B,UACQH,EAAc,CAClBI,WAAYA,CAACC,EAAeC,EAAahF,KAEvC,MAAMiF,EAAaF,EAAgBF,EACnCA,EAAwBE,EACxBnF,EAAqBM,QAAQlC,IAC1B4B,EAAqBM,QAAQlC,IAAc,GAAKiH,EAEnDnF,EAAwB9B,EAAWgC,EAAS,IAKhDF,EAAwBoF,eACjBtF,EAAqBM,QAAQlC,GAEpCsB,GAAiBlB,IAAI,IAAA+G,EAAA,MAAM,IACtB/G,EACH,CAACJ,GAAY,IACRI,EAAKJ,GACRkD,aAAc9C,EAAKJ,GAAWkD,aAAakE,QACxCC,GAAcA,IAAMrF,IAEvBc,eAAgB,KACK,QAAfqE,EAAA/G,EAAKJ,UAAU,IAAAmH,OAAA,EAAfA,EAAiBrE,iBAAkB,GACvCd,IAGL,GACH,CAAE,MAAOsF,GAEPxF,EAAwBoF,eACjBtF,EAAqBM,QAAQlC,GAEpCsB,GAAiBlB,IAAI,IAAAmH,EAAA,MAAM,IACtBnH,EACH,CAACJ,GAAY,IACRI,EAAKJ,GACRkD,aAAc9C,EAAKJ,GAAWkD,aAAakE,QACxCC,GAAcA,IAAMrF,IAEvBiB,YAAa,KACQ,QAAfsE,EAAAnH,EAAKJ,UAAU,IAAAuH,OAAA,EAAfA,EAAiBtE,cAAe,GACpCjB,IAGL,GACH,IACA,GACF,IAEJb,EAAkB,IAAG,GAEpB,CAACD,KAEJ2D,EAAAA,EAAAA,YAAU,KACR2C,OAAOC,QAAQpG,GAAcyD,SAAQ4C,IAA0B,IAAxB1H,EAAWwD,GAAOkE,EAClD3F,IAAAA,QAAgB,OAANyB,QAAM,IAANA,OAAM,EAANA,EAAQN,gBAElBnB,IAAAA,QAAgB,OAANyB,QAAM,IAANA,OAAM,EAANA,EAAQP,aAkBXlB,IAAAA,QAAgB,OAANyB,QAAM,IAANA,OAAM,EAANA,EAAQV,kBAC5BjC,EAAmB,CACjByC,IAAK,UAAYtD,EACjB+F,MAAM,EACNC,SACEnC,EAAAA,EAAAA,MAAA,QAAAI,SAAA,CACG3D,EAAE,oBAAoB,SACvB8D,EAAAA,EAAAA,KAAC6B,EAAAA,GAAO,CACN1B,MAAO,CACL2B,WAAY,UAEdC,GAAInF,EAAmBhB,GACvBoG,QAASA,KACPtF,EAAoB,UAAYd,EAAU,EAC1CiE,SACF,GAAS,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQwB,mBAGjBzB,eAAgB,CACdC,OAAQ,WACRC,QAAS,IACTC,SAAU,CACRiE,SAAUrH,EAAE,2CAGhB+F,SAAU,IAEZ/E,GAAiBlB,IAAI,IAChBA,EACH,CAACJ,GAAY,IACRI,EAAKJ,GACR8C,eAAgB,GAChBO,eAAgB,EAChBF,kBAAmB,QAlDvBtC,EAAmB,CACjByC,IAAK,UAAYtD,EACjB+F,MAAM,EACNC,QAAS1F,EAAE,wBAAyB,CAClCsH,WAAkB,OAANpE,QAAM,IAANA,OAAM,EAANA,EAAQwB,cAEtBzB,eAAgB,CACdC,OAAQ,WACRC,QAAS,EACTC,SAAU,CACRmE,SAAUvH,EAAE,4BAA6B,CACvCsH,WAAkB,OAANpE,QAAM,IAANA,OAAM,EAANA,EAAQwB,gBAI1B8C,iBAAkB/F,IAAAA,KAAa,OAANyB,QAAM,IAANA,OAAM,EAANA,EAAQP,YAAa,QAsClD,GACA,GAED,CAAC5B,IAEG,IAAI,EAKA0G,EAAuB/H,IAAA,MAAAgI,GAAAC,EAAAA,EAAAA,GAAC,IAGnCtH,GAAkBuH,EAAAA,EAAAA,OACb,EAAL5H,IAAcC,EAAAA,EAAAA,OACT,mBAALM,IAA+BE,EAAAA,EAAAA,OAC/BM,EAAAC,GA3RAtB,KAEOoB,EAAAA,EAAAA,IAAQtB,EAAuBE,IAyREmI,CAA0BnI,GAClEmB,GAA0BiH,EAAAA,EAAAA,IAAWzI,GAAmB,IAAA0I,EASrDC,EAE4DC,EAXPP,EAAA,KAAAQ,OAAAC,IAAA,8BAGtDJ,EAAAK,EAMCV,EAAA,GAAAK,GAAAA,EAAAL,EAAA,GAAAA,EAAA,KAAAhI,GAEkBsI,GAAAK,EAAAA,EAAAA,IAAW,oBAAqB3I,GAAUgI,EAAA,GAAAhI,EAAAgI,EAAA,GAAAM,GAAAA,EAAAN,EAAA,GAAAA,EAAA,KAAAM,GAD7DC,EAAA,CAAAK,gBACmBN,GAClBN,EAAA,GAAAM,EAAAN,EAAA,GAAAO,GAAAA,EAAAP,EAAA,GAEc,MAAAa,EAAA7I,EAAA,4BAAyC,IAAA8I,EAAAd,EAAA,KAAAa,GADxDC,EAAA,CAAAC,YACeF,GACdb,EAAA,GAAAa,EAAAb,EAAA,GAAAc,GAAAA,EAAAd,EAAA,GAbH,MAAK,aAALgB,IAAyBC,EAAAA,EAAAA,kBACvBZ,EAOAE,EAGAO,GAGA,IAAAI,EAAAlB,EAAA,KAAArH,GAAAqH,EAAA,KAAA1H,GAAA0H,EAAA,KAAAnH,GAAAmH,EAAA,cAAAgB,QAAA,IAAAA,OAAA,EAAAA,EAAAxC,OAE4B0C,EAAAA,CAAAC,EAAAC,KAI5B,MAAAC,EAA4B1I,EAAS2I,QAAQC,kBAC7CC,EAA2BzH,IAAAA,IACzBoH,EACAM,GACDC,OAAQC,EAAoC,GAE0B,IAAAC,EAAvE,QAAIP,EAAsB,GAAKG,EAAqBH,KAClDxI,EAAmB,CAAAkF,MACX,EAAIzC,IACL,UAAY8F,EAASpD,QACjB1F,EAAE,wBAAyB,CAAAsH,WACE,QADFgC,EACV,OAAZZ,QAAY,IAAZA,OAAY,EAAZA,EAAYxC,YAAY,IAAAoD,EAAAA,EAAxB,KACZhG,YACWtD,EAAE,qCAAoC+F,SACzC,EAACwD,OACHvJ,EAAE,4BAA2B6F,GACjC,CAAA2D,OACM,IAAIC,gBAAgB,CAAAC,OAClBZ,IACRa,eAGC,EAEE,EACZjC,EAAA,GAAArH,EAAAqH,EAAA,GAAA1H,EAAA0H,EAAA,GAAAnH,EAAAmH,EAAA,WAAAgB,QAAA,IAAAA,OAAA,EAAAA,EAAAxC,KAAAwB,EAAA,IAAAkB,GAAAA,EAAAlB,EAAA,IA7BD,MAAAkC,EAA8BhB,EA6B5B,IAAAiB,EAAAnC,EAAA,MAAArH,GAAAqH,EAAA,MAAA7G,GAAA6G,EAAA,MAAAkC,GAAAlC,EAAA,cAAAgB,QAAA,IAAAA,OAAA,EAAAA,EAAAxC,OAEkB2D,EAAAvD,MAAAwD,EAAAC,EAAAC,KAAA,IAAAC,EAKlB,IAAKL,EAAsBE,EAAOhB,GAAU,OAE5C,MAAAoB,EAAoC,GACpCC,EAA+B1I,IAAAA,IAAMqI,GAAOM,IAC1CF,EAAYG,KAAMvF,GACXwB,UAOL,MAAA5E,EAAiBoD,EAAImB,oBAAuBnB,EAAIoB,KAEhD,IACE,MAAAoE,EAAmB,CAACN,EAAatI,GAASoF,OAAQyD,SAAQC,KAAM,KAEhEC,QACQpK,EAASqK,QAAQC,sBACrBL,EACAxF,EACAgE,GACA,aAES,IAAI8B,SACf,CAAAC,EAAAC,KACE,IACiB,IAAIC,EAAAA,GAAWjG,EAAM,CAAAkG,SACxBP,EAASA,YAAAQ,YAEN,CAAC,EAAG,IAAM,IAAM,IAAO,KAAMC,UAC/BC,EAAoBrG,EAAIC,MAAMqG,6BACZ,EAAKC,SACxB,CAAAC,SACExG,EAAIoB,KAAKqF,SACTzG,EAAId,MACfwC,WACWA,CAAAC,EAAA+E,KAAA,IAAAC,EACD,OAATC,QAAS,IAATA,GAIC,QAJQD,EAATC,EAASlF,kBAIR,IAAAiF,GAJDA,EAAAE,KAAAD,EACEjF,EACA+E,EACA9J,EACD,EACFkK,UACUA,KACTf,EAAQ,CAAA3E,KACAxE,EAAQmK,MACP/G,EAAIC,MACX,EACH+G,QACQC,IAEPjB,EAAO,IAAIkB,MAAM,qBAAqBtK,KAAY,IAGhDuK,OAAS,CAAD,MAAAC,GAGdpB,EACE,IAAIkB,MAAM,mCAAmCtK,KAC7C,IAGN,CAAD,MAAAyK,GAID,MAAM,IAAIH,MAAM,gCAAgCtK,IAAY,MAKlE0K,EAAyC,CAAA1M,UAC5BoJ,EAASpE,YACiB,QADjBuF,EACK,OAAZvB,QAAY,IAAZA,OAAY,EAAZA,EAAYxC,YAAY,IAAA+D,EAAAA,EAAxB,GAAwBtF,eACrBlD,IAAAA,QACdyI,EACAC,EACAkC,IAMJxL,GAAkBf,GAAU,IAAIA,EAAMsM,IAAmB,EAC1D1E,EAAA,IAAArH,EAAAqH,EAAA,IAAA7G,EAAA6G,EAAA,IAAAkC,EAAAlC,EAAA,WAAAgB,QAAA,IAAAA,OAAA,EAAAA,EAAAxC,KAAAwB,EAAA,IAAAmC,GAAAA,EAAAnC,EAAA,IA1FD,MAAA4E,EAAoBzC,EA0FlB,IAAAsC,EAMD,OANCzE,EAAA,MAAA1G,GAAA0G,EAAA,MAAA4E,GAAA5E,EAAA,MAAA3G,GAEKoL,EAAA,CAAApL,eAAAC,kBAAAsL,eAIN5E,EAAA,IAAA1G,EAAA0G,EAAA,IAAA4E,EAAA5E,EAAA,IAAA3G,EAAA2G,EAAA,IAAAyE,GAAAA,EAAAzE,EAAA,IAJMyE,CAIN,EAGGhB,EAAuBoB,IAC3B,MAAMC,EAAK,QAEX,OAAID,GAAY,KAAWC,EAClB,IAAMA,EACJD,GAAY,KAAWC,EACzB,IAAMA,EACJD,GAAY,IAAMC,EACpB,GAAKA,EAEL,GAAKA,CACd,EAtKkC,SAAArD,EAAArE,GAAA,OAgCpBA,EAAIC,IAAK,CAhCW,SAAAsE,EAAAoD,EAAA1H,GAAA,OAiCR2H,KAAID,IAAKA,EAAK1H,EAAK,CAjCX,SAAAsH,EAAAM,EAAAvG,GAAA,MA2IF,CAAAtB,KACxBA,EAAIsB,gBAEL,C","sources":["__generated__/FileUploadManagerQuery.graphql.ts","components/FileUploadManager.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<4fd862927d80e3a68ed0b64141ce3ac5>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type FileUploadManagerQuery$variables = {\n  vfolderGlobalId: string;\n};\nexport type FileUploadManagerQuery$data = {\n  readonly vfolder_node: {\n    readonly name: string;\n  } | null | undefined;\n};\nexport type FileUploadManagerQuery = {\n  response: FileUploadManagerQuery$data;\n  variables: FileUploadManagerQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"vfolderGlobalId\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"vfolderGlobalId\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"FileUploadManagerQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"VirtualFolderNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"vfolder_node\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"RequiredField\",\n            \"field\": (v2/*: any*/),\n            \"action\": \"THROW\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"FileUploadManagerQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"VirtualFolderNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"vfolder_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"da162cec4ce77cdb6fcdd31a87d2f135\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"FileUploadManagerQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query FileUploadManagerQuery(\\n  $vfolderGlobalId: String!\\n) {\\n  vfolder_node(id: $vfolderGlobalId) {\\n    name\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"1f3a6bd97dae542b3c85605ab9a61d03\";\n\nexport default node;\n","import { useSetBAINotification } from '../hooks/useBAINotification';\nimport { useFolderExplorerOpener } from './FolderExplorerOpener';\nimport { theme, Typography } from 'antd';\nimport { RcFile } from 'antd/es/upload';\nimport {\n  BAIFlex,\n  BAILink,\n  toGlobalId,\n  useConnectedBAIClient,\n} from 'backend.ai-ui';\nimport { atom, useAtom, useSetAtom } from 'jotai';\nimport { atomFamily } from 'jotai/utils';\nimport _ from 'lodash';\nimport PQueue from 'p-queue';\nimport { useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\nimport { FileUploadManagerQuery } from 'src/__generated__/FileUploadManagerQuery.graphql';\nimport { useSuspendedBackendaiClient } from 'src/hooks';\nimport { useBAISettingUserState } from 'src/hooks/useBAISetting';\nimport * as tus from 'tus-js-client';\n\ntype uploadStartFunction = (callbacks?: {\n  onProgress?: (\n    bytesUploaded: number,\n    bytesTotal: number,\n    fileName: string,\n  ) => void;\n}) => Promise<{ name: string; bytes: number }>;\n\ntype UploadRequest = {\n  vFolderId: string;\n  vFolderName: string;\n  uploadFileInfo: Array<{ file: RcFile; startFunction: uploadStartFunction }>;\n};\n\ntype UploadStatusInfo = {\n  vFolderName: string;\n  pendingFiles: Array<string>;\n  completedFiles: Array<string>;\n  failedFiles: Array<string>;\n  completedBytes: number;\n  totalExpectedSize: number;\n};\ntype UploadStatusMap = {\n  [vFolderId: string]: UploadStatusInfo;\n};\n\nconst uploadRequestAtom = atom<Array<UploadRequest>>([]);\nconst uploadStatusAtom = atom<UploadStatusMap>({});\nconst uploadStatusAtomFamily = atomFamily((vFolderId: string) => {\n  return atom(\n    (get) => get(uploadStatusAtom)[vFolderId],\n    (get, set, newStatus: UploadStatusInfo) => {\n      const prev = get(uploadStatusAtom);\n      set(uploadStatusAtom, {\n        ...prev,\n        [vFolderId]: newStatus,\n      });\n    },\n  );\n});\n\nconst useUploadStatusAtomStatus = (\n  vFolderId: string,\n): [UploadStatusInfo, (newStatus: UploadStatusInfo) => void] => {\n  return useAtom(uploadStatusAtomFamily(vFolderId));\n};\n\nconst FileUploadManager: React.FC = () => {\n  'use memo';\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  const { upsertNotification, destroyNotification } = useSetBAINotification();\n  const { generateFolderPath } = useFolderExplorerOpener();\n  const [uploadRequests, setUploadRequests] = useAtom(uploadRequestAtom);\n  const [uploadStatus, setUploadStatus] = useAtom(uploadStatusAtom);\n  const [maxConcurrentUploads] = useBAISettingUserState(\n    'max_concurrent_uploads',\n  );\n  const queue = new PQueue({ concurrency: maxConcurrentUploads || 2 });\n\n  const pendingDeltaBytesRef = useRef<Record<string, number>>({});\n  const throttledUploadRequests = _.throttle(\n    (vFolderId: string, fileName: string) => {\n      const accumulatedDelta = pendingDeltaBytesRef.current[vFolderId] || 0;\n      pendingDeltaBytesRef.current[vFolderId] = 0;\n\n      setUploadStatus((prev) => {\n        const uploadedFilesCount = prev[vFolderId]?.completedFiles?.length || 0;\n        const totalUploadedFilesCount =\n          (prev[vFolderId]?.completedFiles?.length || 0) +\n          (prev[vFolderId]?.failedFiles?.length || 0) +\n          (prev[vFolderId]?.pendingFiles?.length || 0);\n\n        const totalExpectedSize = prev[vFolderId]?.totalExpectedSize || 0;\n        const currentCompletedBytes =\n          (prev[vFolderId]?.completedBytes || 0) + accumulatedDelta;\n\n        upsertNotification({\n          key: 'upload:' + vFolderId,\n          backgroundTask: {\n            status: 'pending',\n            percent:\n              totalExpectedSize > 0\n                ? (currentCompletedBytes / totalExpectedSize) * 100\n                : 0,\n            onChange: {\n              pending: {\n                description: (\n                  <BAIFlex direction=\"column\" align=\"start\">\n                    <Typography.Text>\n                      {t('explorer.UploadingFiles')} ( {uploadedFilesCount} /{' '}\n                      {totalUploadedFilesCount} )\n                    </Typography.Text>\n                    <Typography.Text\n                      ellipsis\n                      type=\"secondary\"\n                      style={{\n                        fontSize: token.fontSizeSM,\n                        maxWidth: '300px',\n                      }}\n                    >\n                      {fileName}\n                    </Typography.Text>\n                  </BAIFlex>\n                ),\n              },\n            },\n          },\n        });\n\n        return {\n          ...prev,\n          [vFolderId]: {\n            ...prev[vFolderId],\n            completedBytes: currentCompletedBytes,\n          },\n        };\n      });\n    },\n    200,\n    { leading: true, trailing: true },\n  );\n\n  useEffect(() => {\n    if (uploadRequests.length === 0 || !baiClient) return;\n\n    uploadRequests.forEach((uploadRequest) => {\n      const { vFolderId, vFolderName, uploadFileInfo } = uploadRequest;\n      const currUploadTotalSize = _.sumBy(\n        uploadFileInfo,\n        (info) => info.file.size,\n      );\n\n      setUploadStatus((prev) => {\n        const isFirstUpload = !prev[vFolderId];\n        const newTotalExpectedSize =\n          (prev[vFolderId]?.totalExpectedSize || 0) + currUploadTotalSize;\n        const currPct = isFirstUpload\n          ? 0\n          : ((prev[vFolderId]?.completedBytes || 0) / newTotalExpectedSize) *\n            100;\n\n        upsertNotification({\n          key: 'upload:' + vFolderId,\n          open: true,\n          message: (\n            <span>\n              {t('explorer.VFolder')}:&nbsp;\n              <BAILink\n                style={{\n                  fontWeight: 'normal',\n                }}\n                to={generateFolderPath(vFolderId)}\n                onClick={() => {\n                  destroyNotification('upload:' + vFolderId);\n                }}\n              >{`${vFolderName}`}</BAILink>\n            </span>\n          ),\n          backgroundTask: {\n            status: 'pending',\n            percent: currPct,\n            onChange: {\n              pending: t('explorer.ProcessingUpload'),\n            },\n          },\n          duration: 0,\n        });\n\n        return {\n          ...prev,\n          [vFolderId]: {\n            vFolderName,\n            pendingFiles: [\n              ...(prev[vFolderId]?.pendingFiles || []),\n              ...uploadFileInfo.map(\n                (info) => info.file.webkitRelativePath || info.file.name,\n              ),\n            ],\n            completedFiles: prev[vFolderId]?.completedFiles || [],\n            failedFiles: prev[vFolderId]?.failedFiles || [],\n            completedBytes: prev[vFolderId]?.completedBytes || 0,\n            totalExpectedSize: newTotalExpectedSize,\n          },\n        };\n      });\n\n      uploadFileInfo.forEach(({ file, startFunction }) => {\n        queue.add(async () => {\n          // Capture fileName before any async operations\n          const fileName = file.webkitRelativePath || file.name;\n          let previousBytesUploaded = 0;\n\n          try {\n            await startFunction({\n              onProgress: (bytesUploaded, _bytesTotal, fileName) => {\n                // Since bytesUploaded is cumulative, calculate delta from previous value\n                const deltaBytes = bytesUploaded - previousBytesUploaded;\n                previousBytesUploaded = bytesUploaded;\n                pendingDeltaBytesRef.current[vFolderId] =\n                  (pendingDeltaBytesRef.current[vFolderId] || 0) + deltaBytes;\n\n                throttledUploadRequests(vFolderId, fileName);\n              },\n            });\n\n            // Success case\n            throttledUploadRequests.flush();\n            delete pendingDeltaBytesRef.current[vFolderId];\n\n            setUploadStatus((prev) => ({\n              ...prev,\n              [vFolderId]: {\n                ...prev[vFolderId],\n                pendingFiles: prev[vFolderId].pendingFiles.filter(\n                  (f: string) => f !== fileName,\n                ),\n                completedFiles: [\n                  ...(prev[vFolderId]?.completedFiles || []),\n                  fileName,\n                ],\n              },\n            }));\n          } catch (error) {\n            // Error case - use the captured fileName regardless of error structure\n            throttledUploadRequests.flush();\n            delete pendingDeltaBytesRef.current[vFolderId];\n\n            setUploadStatus((prev) => ({\n              ...prev,\n              [vFolderId]: {\n                ...prev[vFolderId],\n                pendingFiles: prev[vFolderId].pendingFiles.filter(\n                  (f: string) => f !== fileName,\n                ),\n                failedFiles: [\n                  ...(prev[vFolderId]?.failedFiles || []),\n                  fileName,\n                ],\n              },\n            }));\n          }\n        });\n      });\n    });\n    setUploadRequests([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [uploadRequests]);\n\n  useEffect(() => {\n    Object.entries(uploadStatus).forEach(([vFolderId, status]) => {\n      if (!_.isEmpty(status?.pendingFiles)) return;\n\n      if (!_.isEmpty(status?.failedFiles)) {\n        upsertNotification({\n          key: 'upload:' + vFolderId,\n          open: true,\n          message: t('explorer.UploadFailed', {\n            folderName: status?.vFolderName,\n          }),\n          backgroundTask: {\n            status: 'rejected',\n            percent: 0,\n            onChange: {\n              rejected: t('explorer.FileUploadFailed', {\n                folderName: status?.vFolderName,\n              }),\n            },\n          },\n          extraDescription: _.join(status?.failedFiles, ', '),\n        });\n      } else if (!_.isEmpty(status?.completedFiles)) {\n        upsertNotification({\n          key: 'upload:' + vFolderId,\n          open: true,\n          message: (\n            <span>\n              {t('explorer.VFolder')}:&nbsp;\n              <BAILink\n                style={{\n                  fontWeight: 'normal',\n                }}\n                to={generateFolderPath(vFolderId)}\n                onClick={() => {\n                  destroyNotification('upload:' + vFolderId);\n                }}\n              >{`${status?.vFolderName}`}</BAILink>\n            </span>\n          ),\n          backgroundTask: {\n            status: 'resolved',\n            percent: 100,\n            onChange: {\n              resolved: t('explorer.SuccessfullyUploadedToFolder'),\n            },\n          },\n          duration: 3,\n        });\n        setUploadStatus((prev) => ({\n          ...prev,\n          [vFolderId]: {\n            ...prev[vFolderId],\n            completedFiles: [],\n            completedBytes: 0,\n            totalExpectedSize: 0,\n          },\n        }));\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [uploadStatus]);\n\n  return null;\n};\n\nexport default FileUploadManager;\n\nexport const useFileUploadManager = (vFolderId: string) => {\n  'use memo';\n\n  const baiClient = useConnectedBAIClient();\n  const { t } = useTranslation();\n  const { upsertNotification } = useSetBAINotification();\n  const [uploadStatus, setUploadStatus] = useUploadStatusAtomStatus(vFolderId);\n  const setUploadRequests = useSetAtom(uploadRequestAtom);\n\n  const { vfolder_node } = useLazyLoadQuery<FileUploadManagerQuery>(\n    graphql`\n      query FileUploadManagerQuery($vfolderGlobalId: String!) {\n        vfolder_node(id: $vfolderGlobalId) {\n          name @required(action: THROW)\n        }\n      }\n    `,\n    {\n      vfolderGlobalId: toGlobalId('VirtualFolderNode', vFolderId),\n    },\n    {\n      fetchPolicy: vFolderId ? 'network-only' : 'store-only',\n    },\n  );\n\n  const validateUploadRequest = (\n    requestedFiles: Array<RcFile>,\n    vfolderId: string,\n  ) => {\n    const maxPossibleFileSize = baiClient._config.maxFileUploadSize;\n    const maxRequestFileSize = _.map(\n      requestedFiles,\n      (file) => file.size,\n    ).reduce((max, size) => Math.max(max, size), 0);\n\n    if (maxPossibleFileSize > 0 && maxRequestFileSize > maxPossibleFileSize) {\n      upsertNotification({\n        open: true,\n        key: 'upload:' + vfolderId,\n        message: t('explorer.UploadFailed', {\n          folderName: vfolder_node?.name ?? '',\n        }),\n        description: t('data.explorer.FileUploadSizeLimit'),\n        duration: 3,\n        toText: t('data.folders.OpenAFolder'),\n        to: {\n          search: new URLSearchParams({\n            folder: vfolderId,\n          }).toString(),\n        },\n      });\n      return false;\n    }\n    return true;\n  };\n\n  const uploadFiles = async (\n    files: RcFile[],\n    vfolderId: string,\n    currentPath: string,\n  ) => {\n    if (!validateUploadRequest(files, vfolderId)) return;\n\n    const fileToUpload: Array<RcFile> = [];\n    const startUploadFunctionMap = _.map(files, (file) => {\n      fileToUpload.push(file);\n      return async (callbacks?: {\n        onProgress?: (\n          bytesUploaded: number,\n          bytesTotal: number,\n          fileName: string,\n        ) => void;\n      }) => {\n        const fileName = file.webkitRelativePath || file.name;\n\n        try {\n          const uploadPath = [currentPath, fileName].filter(Boolean).join('/');\n\n          const uploadUrl: string =\n            await baiClient.vfolder.create_upload_session(\n              uploadPath,\n              file,\n              vfolderId,\n            );\n\n          return await new Promise<{ name: string; bytes: number }>(\n            (resolve, reject) => {\n              try {\n                const upload = new tus.Upload(file, {\n                  endpoint: uploadUrl,\n                  uploadUrl: uploadUrl,\n                  retryDelays: [0, 3000, 5000, 10000, 20000],\n                  chunkSize: getOptimalChunkSize(file.size),\n                  storeFingerprintForResuming: false, // Disable localStorage storage\n                  metadata: {\n                    filename: file.name,\n                    filetype: file.type,\n                  },\n                  onProgress: (bytesUploaded, bytesTotal) => {\n                    callbacks?.onProgress?.(\n                      bytesUploaded,\n                      bytesTotal,\n                      fileName,\n                    );\n                  },\n                  onSuccess: () => {\n                    resolve({\n                      name: fileName,\n                      bytes: file.size,\n                    });\n                  },\n                  onError: (_error) => {\n                    // Always reject with consistent structure\n                    reject(new Error(`Upload failed for ${fileName}`));\n                  },\n                });\n                upload.start();\n              } catch (error) {\n                // Handle synchronous errors from tus.Upload constructor or start()\n                reject(\n                  new Error(`Failed to initialize upload for ${fileName}`),\n                );\n              }\n            },\n          );\n        } catch (error) {\n          // Handle API errors or any other errors\n          // Always throw with a consistent error message\n          throw new Error(`Failed to prepare upload for ${fileName}`);\n        }\n      };\n    });\n\n    const uploadRequestInfo: UploadRequest = {\n      vFolderId: vfolderId,\n      vFolderName: vfolder_node?.name ?? '',\n      uploadFileInfo: _.zipWith(\n        fileToUpload,\n        startUploadFunctionMap,\n        (file, startFunction) => ({\n          file,\n          startFunction,\n        }),\n      ),\n    };\n    setUploadRequests((prev) => [...prev, uploadRequestInfo]);\n  };\n\n  return {\n    uploadStatus,\n    setUploadStatus,\n    uploadFiles,\n  };\n};\n\nconst getOptimalChunkSize = (fileSize: number): number => {\n  const MB = 1024 * 1024;\n\n  if (fileSize >= 5 * 1024 * MB) {\n    return 200 * MB;\n  } else if (fileSize >= 1 * 1024 * MB) {\n    return 100 * MB;\n  } else if (fileSize >= 100 * MB) {\n    return 50 * MB;\n  } else {\n    return 15 * MB;\n  }\n};\n"],"names":["node","v0","v1","v2","hash","uploadRequestAtom","atom","uploadStatusAtom","uploadStatusAtomFamily","atomFamily","vFolderId","get","set","newStatus","prev","FileUploadManager","t","useTranslation","token","theme","useToken","baiClient","useSuspendedBackendaiClient","upsertNotification","destroyNotification","useSetBAINotification","generateFolderPath","useFolderExplorerOpener","uploadRequests","setUploadRequests","useAtom","uploadStatus","setUploadStatus","maxConcurrentUploads","useBAISettingUserState","queue","PQueue","concurrency","pendingDeltaBytesRef","useRef","throttledUploadRequests","_","fileName","accumulatedDelta","current","_prev$vFolderId","_prev$vFolderId$compl","_prev$vFolderId2","_prev$vFolderId2$comp","_prev$vFolderId3","_prev$vFolderId3$fail","_prev$vFolderId4","_prev$vFolderId4$pend","_prev$vFolderId5","_prev$vFolderId6","uploadedFilesCount","completedFiles","length","totalUploadedFilesCount","failedFiles","pendingFiles","totalExpectedSize","currentCompletedBytes","completedBytes","key","backgroundTask","status","percent","onChange","pending","description","_jsxs","BAIFlex","direction","align","children","Typography","Text","_jsx","ellipsis","type","style","fontSize","fontSizeSM","maxWidth","leading","trailing","useEffect","forEach","uploadRequest","vFolderName","uploadFileInfo","currUploadTotalSize","info","file","size","_prev$vFolderId7","_prev$vFolderId8","_prev$vFolderId9","_prev$vFolderId0","_prev$vFolderId1","_prev$vFolderId10","isFirstUpload","newTotalExpectedSize","currPct","open","message","BAILink","fontWeight","to","onClick","duration","map","webkitRelativePath","name","_ref","startFunction","add","async","previousBytesUploaded","onProgress","bytesUploaded","_bytesTotal","deltaBytes","flush","_prev$vFolderId11","filter","f","error","_prev$vFolderId12","Object","entries","_ref2","resolved","folderName","rejected","extraDescription","useFileUploadManager","$","_c","useConnectedBAIClient","useUploadStatusAtomStatus","useSetAtom","t0","t1","t2","Symbol","for","_FileUploadManagerQuery","toGlobalId","vfolderGlobalId","t3","t4","fetchPolicy","vfolder_node","useLazyLoadQuery","t5","requestedFiles","vfolderId","maxPossibleFileSize","_config","maxFileUploadSize","maxRequestFileSize","_temp","reduce","_temp2","_vfolder_node$name","toText","search","URLSearchParams","folder","toString","validateUploadRequest","t6","files","vfolderId_0","currentPath","_vfolder_node$name2","fileToUpload","startUploadFunctionMap","file_0","push","uploadPath","Boolean","join","uploadUrl","vfolder","create_upload_session","Promise","resolve","reject","tus","endpoint","retryDelays","chunkSize","getOptimalChunkSize","storeFingerprintForResuming","metadata","filename","filetype","bytesTotal","_callbacks$onProgress","callbacks","call","onSuccess","bytes","onError","_error","Error","start","t8","t7","uploadRequestInfo","_temp3","uploadFiles","fileSize","MB","max","Math","file_1"],"sourceRoot":""}