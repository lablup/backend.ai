{"version":3,"file":"static/js/676.62e0b671.chunk.js","mappings":"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","sources":["components/ImageEnvironmentSelectFormItems.tsx","components/__generated__/ImageEnvironmentSelectFormItemsQuery.graphql.ts"],"sourcesContent":["import { getImageFullName } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\n// @ts-ignore\nimport cssRaw from './ImageEnvironmentSelectFormItems.css?raw';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  ImageEnvironmentSelectFormItemsQuery,\n  ImageEnvironmentSelectFormItemsQuery$data,\n} from './__generated__/ImageEnvironmentSelectFormItemsQuery.graphql';\nimport { Divider, Form, Input, RefSelectProps, Select, Tag, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport type Image = NonNullable<\n  NonNullable<ImageEnvironmentSelectFormItemsQuery$data>['images']\n>[0];\n\ntype ImageGroup = {\n  groupName: string;\n  environmentGroups: {\n    environmentName: string;\n    displayName: string;\n    prefix?: string;\n    images: Image[];\n  }[];\n};\n\nexport type ImageEnvironmentFormInput = {\n  environments: {\n    environment: string;\n    version: string;\n    image: Image | undefined;\n    manual?: string;\n    customizedTag?: string;\n  };\n};\n\ninterface ImageEnvironmentSelectFormItemsProps {\n  filter?: (image: Image) => boolean;\n  showPrivate?: boolean;\n}\n\nfunction compareVersions(version1: string, version2: string): number {\n  const v1 = version1.split('.').map(Number);\n  const v2 = version2.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const num1 = v1[i] || 0;\n    const num2 = v2[i] || 0;\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nconst isPrivateImage = (image: Image) => {\n  return _.some(image?.labels, (label) => {\n    return (\n      label?.key === 'ai.backend.features' &&\n      label?.value?.split(' ').includes('private')\n    );\n  });\n};\n\nconst ImageEnvironmentSelectFormItems: React.FC<\n  ImageEnvironmentSelectFormItemsProps\n> = ({ filter, showPrivate }) => {\n  const form = Form.useFormInstance<ImageEnvironmentFormInput>();\n  const environments = Form.useWatch('environments', { form, preserve: true });\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [environmentSearch, setEnvironmentSearch] = useState('');\n  const [versionSearch, setVersionSearch] = useState('');\n  const { t } = useTranslation();\n  const [metadata, { getImageMeta }] = useBackendAIImageMetaData();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n\n  const envSelectRef = useRef<RefSelectProps>(null);\n  const versionSelectRef = useRef<RefSelectProps>(null);\n\n  const { images } = useLazyLoadQuery<ImageEnvironmentSelectFormItemsQuery>(\n    graphql`\n      query ImageEnvironmentSelectFormItemsQuery($installed: Boolean) {\n        images(is_installed: $installed) {\n          name\n          humanized_name\n          tag\n          registry\n          architecture\n          digest\n          installed\n          resource_limits {\n            key\n            min\n            max\n          }\n          labels {\n            key\n            value\n          }\n        }\n      }\n    `,\n    {\n      installed: true,\n    },\n    {\n      fetchPolicy: 'store-and-network',\n    },\n  );\n\n  // If not initial value, select first value\n  // auto select when relative field is changed\n  useEffect(() => {\n    if (!_.isEmpty(environments?.manual)) {\n      // set undefined fields related to environments when manual is set\n      if (environments.environment || environments.version) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n          },\n        });\n      }\n      return;\n    }\n\n    let matchedEnvironmentByVersion:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    let matchedImageByVersion: Image | undefined;\n    let version = form.getFieldValue('environments')?.version;\n    // FIXME: manually add architecture based on amd64\n    if (version && version.indexOf('@') < 0) {\n      version += '@x86_64';\n    }\n    version &&\n      _.find(imageGroups, (group) => {\n        matchedEnvironmentByVersion = _.find(\n          group.environmentGroups,\n          (environment) => {\n            matchedImageByVersion = _.find(\n              environment.images,\n              (image) => getImageFullName(image) === version,\n            );\n            return !!matchedImageByVersion; // break iteration\n          },\n        );\n        return !!matchedEnvironmentByVersion; // break iteration\n      });\n\n    // if matchedEnvironmentByVersion is not existed, select first values\n    let nextEnvironment: ImageGroup['environmentGroups'][0] | undefined;\n    let nextImage: Image | undefined;\n    if (matchedEnvironmentByVersion) {\n      nextEnvironment = matchedEnvironmentByVersion;\n      nextImage = matchedImageByVersion;\n    } else if (form.getFieldValue(['environments', 'environment'])) {\n      _.find(imageGroups, (group) => {\n        nextEnvironment = _.find(group.environmentGroups, (environment) => {\n          return (\n            environment.environmentName ===\n            form.getFieldValue(['environments', 'environment'])\n          );\n        });\n        nextImage = nextEnvironment?.images[0];\n        return !!nextEnvironment;\n      });\n    }\n\n    if (!nextEnvironment || !nextImage) {\n      nextEnvironment = imageGroups[0]?.environmentGroups[0];\n      nextImage = nextEnvironment?.images[0];\n    }\n\n    const customizedImageTag = _.find(\n      nextImage?.labels,\n      (item) =>\n        item !== null && item?.key === 'ai.backend.customized-image.name',\n    )?.value;\n\n    if (nextImage) {\n      if (\n        !matchedEnvironmentByVersion &&\n        baiClient._config.allow_manual_image_name_for_session &&\n        version\n      ) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n            manual: version,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      } else {\n        form.setFieldsValue({\n          environments: {\n            environment: nextEnvironment.environmentName,\n            version: getImageFullName(nextImage),\n            image: nextImage,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      }\n    } else if (baiClient._config.allow_manual_image_name_for_session) {\n      // if no image is available, only set manual if it's allowed\n      form.setFieldValue(['environments', 'manual'], version);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environments?.version, environments?.manual]); // environments?.environment,\n\n  const imageGroups: ImageGroup[] = useMemo(\n    () =>\n      _.chain(images)\n        .filter((image) => {\n          return (\n            (showPrivate ? true : !isPrivateImage(image)) &&\n            (filter ? filter(image) : true)\n          );\n        })\n        .groupBy((image) => {\n          // group by using `group` property of image info\n          return (\n            metadata?.imageInfo[getImageMeta(getImageFullName(image) || '').key]\n              ?.group || 'Custom Environments'\n          );\n        })\n        .map((images, groupName) => {\n          return {\n            groupName,\n            environmentGroups: _.chain(images)\n              // sub group by using (environment) `name` property of image info\n              .groupBy((image) => {\n                return (\n                  // metadata?.imageInfo[\n                  //   getImageMeta(getImageFullName(image) || \"\").key\n                  // ]?.name || image?.name\n                  image?.registry + '/' + image?.name\n                );\n              })\n              .map((images, environmentName) => {\n                const imageKey = environmentName.split('/')?.[2];\n                const displayName =\n                  imageKey && metadata?.imageInfo[imageKey]?.name;\n\n                return {\n                  environmentName,\n                  displayName:\n                    displayName ||\n                    (_.last(environmentName.split('/')) as string),\n                  prefix: _.chain(environmentName)\n                    .split('/')\n                    .drop(1)\n                    .dropRight(1)\n                    .join('/')\n                    .value(),\n                  images: images.sort((a, b) =>\n                    compareVersions(\n                      // latest version comes first\n                      b?.tag?.split('-')?.[0] ?? '',\n                      a?.tag?.split('-')?.[0] ?? '',\n                    ),\n                  ),\n                };\n              })\n\n              .sortBy((item) => item.displayName)\n              .value(),\n          };\n        })\n        .sortBy((item) => item.groupName)\n        .value(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [images, metadata, filter, showPrivate],\n  );\n\n  // support search image by full name\n  const { fullNameMatchedImage } = useMemo(() => {\n    let fullNameMatchedImage: Image | undefined;\n    let fullNameMatchedImageGroup:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    if (environmentSearch.length) {\n      _.chain(\n        imageGroups\n          .flatMap((group) => group.environmentGroups)\n          .find((envGroup) => {\n            fullNameMatchedImageGroup = envGroup;\n            fullNameMatchedImage = _.find(envGroup.images, (image) => {\n              return getImageFullName(image) === environmentSearch;\n            });\n            return !!fullNameMatchedImage;\n          }),\n      ).value();\n    }\n    return {\n      fullNameMatchedImage,\n      fullNameMatchedImageGroup,\n    };\n  }, [environmentSearch, imageGroups]);\n\n  return (\n    <>\n      <style>{cssRaw}</style>\n      <Form.Item\n        className=\"image-environment-select-form-item\"\n        name={['environments', 'environment']}\n        label={`${t('session.launcher.Environments')} / ${t(\n          'session.launcher.Version',\n        )}`}\n        rules={[{ required: _.isEmpty(environments?.manual) }]}\n        style={{ marginBottom: 10 }}\n      >\n        <Select\n          ref={envSelectRef}\n          showSearch\n          className=\"image-environment-select\"\n          // open={true}\n          // autoClearSearchValue\n          searchValue={environmentSearch}\n          onSearch={setEnvironmentSearch}\n          defaultActiveFirstOption={true}\n          optionFilterProp=\"filterValue\"\n          onChange={(value) => {\n            if (fullNameMatchedImage) {\n              form.setFieldsValue({\n                environments: {\n                  environment: fullNameMatchedImage?.name || '',\n                  version: getImageFullName(fullNameMatchedImage),\n                  image: fullNameMatchedImage,\n                },\n              });\n            }\n            // NOTE: when user set environment only then set the version to the first item\n            else {\n              const firstInListImage: Image = imageGroups\n                .flatMap((group) => group.environmentGroups)\n                .filter((envGroup) => envGroup.environmentName === value)[0]\n                .images[0];\n              form.setFieldsValue({\n                environments: {\n                  environment: firstInListImage?.name || '',\n                  version: getImageFullName(firstInListImage),\n                  image: firstInListImage,\n                },\n              });\n            }\n          }}\n          disabled={\n            baiClient._config.allow_manual_image_name_for_session &&\n            !_.isEmpty(environments?.manual)\n          }\n        >\n          {fullNameMatchedImage ? (\n            <Select.Option\n              value={fullNameMatchedImage?.name}\n              filterValue={getImageFullName(fullNameMatchedImage)}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"center\"\n                gap=\"xs\"\n                style={{ display: 'inline-flex' }}\n              >\n                <ImageMetaIcon\n                  image={getImageFullName(fullNameMatchedImage) || ''}\n                  style={{\n                    width: 15,\n                    height: 15,\n                  }}\n                />\n                {getImageFullName(fullNameMatchedImage)}\n              </Flex>\n            </Select.Option>\n          ) : (\n            _.map(imageGroups, (group) => {\n              return (\n                <Select.OptGroup key={group.groupName} label={group.groupName}>\n                  {_.map(group.environmentGroups, (environmentGroup) => {\n                    const firstImage = environmentGroup.images[0];\n                    const currentMetaImageInfo =\n                      metadata?.imageInfo[\n                        environmentGroup.environmentName.split('/')?.[2]\n                      ];\n\n                    const extraFilterValues: string[] = [];\n                    let environmentPrefixTag = null;\n                    if (\n                      environmentGroup.prefix &&\n                      !['lablup', 'cloud', 'stable'].includes(\n                        environmentGroup.prefix,\n                      )\n                    ) {\n                      extraFilterValues.push(environmentGroup.prefix);\n                      environmentPrefixTag = (\n                        <Tag color=\"purple\">\n                          <TextHighlighter keyword={environmentSearch}>\n                            {environmentGroup.prefix}\n                          </TextHighlighter>\n                        </Tag>\n                      );\n                    }\n\n                    const tagsFromMetaImageInfoLabel = _.map(\n                      currentMetaImageInfo?.label,\n                      (label) => {\n                        if (\n                          _.isUndefined(label.category) &&\n                          label.tag &&\n                          label.color\n                        ) {\n                          extraFilterValues.push(label.tag);\n                          return (\n                            <Tag color={label.color} key={label.tag}>\n                              <TextHighlighter\n                                keyword={environmentSearch}\n                                key={label.tag}\n                              >\n                                {label.tag}\n                              </TextHighlighter>\n                            </Tag>\n                          );\n                        }\n                        return null;\n                      },\n                    );\n                    return (\n                      <Select.Option\n                        key={environmentGroup.environmentName}\n                        value={environmentGroup.environmentName}\n                        filterValue={\n                          environmentGroup.displayName +\n                          '\\t' +\n                          extraFilterValues.join('\\t')\n                        }\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\" align=\"center\" gap=\"xs\">\n                            <ImageMetaIcon\n                              image={getImageFullName(firstImage) || ''}\n                              style={{\n                                width: 15,\n                                height: 15,\n                              }}\n                            />\n                            <TextHighlighter keyword={environmentSearch}>\n                              {environmentGroup.displayName}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            // style={{ flex: 1 }}\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {environmentPrefixTag}\n                            {tagsFromMetaImageInfoLabel}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  })}\n                </Select.OptGroup>\n              );\n            })\n          )}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prev, cur) =>\n          prev.environments?.environment !== cur.environments?.environment\n        }\n      >\n        {({ getFieldValue }) => {\n          let selectedEnvironmentGroup:\n            | ImageGroup['environmentGroups'][0]\n            | undefined;\n          _.find(imageGroups, (group) => {\n            return _.find(group.environmentGroups, (environment) => {\n              if (\n                environment.environmentName ===\n                getFieldValue('environments')?.environment\n              ) {\n                selectedEnvironmentGroup = environment;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          });\n          return (\n            <Form.Item\n              className=\"image-environment-select-form-item\"\n              name={['environments', 'version']}\n              rules={[{ required: _.isEmpty(environments?.manual) }]}\n            >\n              <Select\n                ref={versionSelectRef}\n                onChange={(value) => {\n                  const selectedImage = _.find(images, (image) => {\n                    return getImageFullName(image) === value;\n                  });\n                  form.setFieldValue(['environments', 'image'], selectedImage);\n                }}\n                showSearch\n                searchValue={versionSearch}\n                onSearch={setVersionSearch}\n                // autoClearSearchValue\n                optionFilterProp=\"filterValue\"\n                // optionLabelProp=\"label\"\n                dropdownRender={(menu) => (\n                  <>\n                    <Flex\n                      style={{\n                        fontWeight: token.fontWeightStrong,\n                        paddingLeft: token.paddingSM,\n                      }}\n                    >\n                      {t('session.launcher.Version')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Base')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Architecture')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Requirements')}\n                    </Flex>\n                    <Divider style={{ margin: '8px 0' }} />\n                    {menu}\n                  </>\n                )}\n                disabled={\n                  baiClient._config.allow_manual_image_name_for_session &&\n                  !_.isEmpty(environments?.manual)\n                }\n              >\n                {_.map(\n                  _.uniqBy(selectedEnvironmentGroup?.images, 'digest'),\n\n                  (image) => {\n                    const [version, tag, ...requirements] = image?.tag?.split(\n                      '-',\n                    ) || ['', '', ''];\n\n                    let tagAlias = metadata?.tagAlias[tag];\n                    if (!tagAlias) {\n                      for (const [key, replaceString] of Object.entries(\n                        metadata?.tagReplace || {},\n                      )) {\n                        const pattern = new RegExp(key);\n                        if (pattern.test(tag)) {\n                          tagAlias = tag?.replace(pattern, replaceString);\n                        }\n                      }\n                      if (!tagAlias) {\n                        tagAlias = tag;\n                      }\n                    }\n\n                    const extraFilterValues: string[] = [];\n                    const requirementTags = _.chain(requirements)\n                      .filter(\n                        (requirement) => !requirement.startsWith('customized_'),\n                      )\n                      .map((requirement, idx) => (\n                        <DoubleTag\n                          key={idx}\n                          values={_.split(\n                            metadata?.tagAlias[requirement] || requirement,\n                            ':',\n                          ).map((str) => {\n                            extraFilterValues.push(str);\n                            return (\n                              <TextHighlighter\n                                keyword={versionSearch}\n                                key={str}\n                              >\n                                {str}\n                              </TextHighlighter>\n                            );\n                          })}\n                        />\n                      ))\n                      .value();\n                    const imageLabels = image?.labels;\n                    if (imageLabels) {\n                      const customizedImageNameLabelIdx = _.findIndex(\n                        imageLabels,\n                        (item) =>\n                          item !== null &&\n                          item?.key === 'ai.backend.customized-image.name',\n                      );\n                      if (\n                        customizedImageNameLabelIdx &&\n                        imageLabels[customizedImageNameLabelIdx]\n                      ) {\n                        const tag =\n                          imageLabels[customizedImageNameLabelIdx]?.value || '';\n                        extraFilterValues.push('Customized');\n                        extraFilterValues.push(tag);\n                        requirementTags.push(\n                          <DoubleTag\n                            key={requirementTags.length + 1}\n                            values={[\n                              {\n                                label: (\n                                  <TextHighlighter\n                                    keyword={versionSearch}\n                                    key=\"Customized\"\n                                  >\n                                    Customized\n                                  </TextHighlighter>\n                                ),\n                                color: 'cyan',\n                              },\n                              {\n                                label: (\n                                  <TextHighlighter\n                                    keyword={versionSearch}\n                                    key={tag}\n                                  >\n                                    {tag}\n                                  </TextHighlighter>\n                                ),\n                                color: 'cyan',\n                              },\n                            ]}\n                          />,\n                        );\n                      }\n                    }\n                    return (\n                      <Select.Option\n                        key={image?.digest}\n                        value={getImageFullName(image)}\n                        filterValue={[\n                          version,\n                          tagAlias,\n                          image?.architecture,\n                          ...extraFilterValues,\n                        ].join('\\t')}\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\">\n                            <TextHighlighter keyword={versionSearch}>\n                              {version}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {tagAlias}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.architecture}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {requirementTags || '-'}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  },\n                )}\n              </Select>\n            </Form.Item>\n          );\n        }}\n      </Form.Item>\n      <Form.Item\n        label={t('session.launcher.ManualImageName')}\n        name={['environments', 'manual']}\n        style={{\n          display: baiClient._config.allow_manual_image_name_for_session\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Input\n          allowClear\n          onChange={(value) => {\n            if (!_.isEmpty(value)) {\n              form.setFieldsValue({\n                environments: {\n                  environment: undefined,\n                  version: undefined,\n                  image: undefined,\n                },\n              });\n            } else {\n            }\n          }}\n        />\n      </Form.Item>\n      <Form.Item noStyle hidden name={['environments', 'image']}>\n        <Input />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ImageEnvironmentSelectFormItems;\n","/**\n * @generated SignedSource<<eb85d3c5b8be4b647315f0e92797a0ce>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ImageEnvironmentSelectFormItemsQuery$variables = {\n  installed?: boolean | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery$data = {\n  readonly images: ReadonlyArray<{\n    readonly architecture: string | null | undefined;\n    readonly digest: string | null | undefined;\n    readonly humanized_name: string | null | undefined;\n    readonly installed: boolean | null | undefined;\n    readonly labels: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly name: string | null | undefined;\n    readonly registry: string | null | undefined;\n    readonly resource_limits: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly max: string | null | undefined;\n      readonly min: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly tag: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery = {\n  response: ImageEnvironmentSelectFormItemsQuery$data;\n  variables: ImageEnvironmentSelectFormItemsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"installed\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"key\",\n  \"storageKey\": null\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"is_installed\",\n        \"variableName\": \"installed\"\n      }\n    ],\n    \"concreteType\": \"Image\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"images\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"humanized_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"tag\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"registry\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"architecture\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"digest\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"installed\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ResourceLimit\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"resource_limits\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"min\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"max\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"labels\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"value\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ea71f4a3948d4742dd6bb11ef80a8300\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageEnvironmentSelectFormItemsQuery(\\n  $installed: Boolean\\n) {\\n  images(is_installed: $installed) {\\n    name\\n    humanized_name\\n    tag\\n    registry\\n    architecture\\n    digest\\n    installed\\n    resource_limits {\\n      key\\n      min\\n      max\\n    }\\n    labels {\\n      key\\n      value\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"33367bd6e1532b42b61629ef9d3dc46b\";\n\nexport default node;\n"],"names":["_ref","filter","showPrivate","form","Form","useFormInstance","environments","useWatch","preserve","baiClient","useSuspendedBackendaiClient","environmentSearch","setEnvironmentSearch","useState","versionSearch","setVersionSearch","t","useTranslation","metadata","getImageMeta","useBackendAIImageMetaData","token","theme","useToken","isDarkMode","useThemeMode","envSelectRef","useRef","versionSelectRef","images","useLazyLoadQuery","_ImageEnvironmentSelectFormItemsQuery","require","installed","fetchPolicy","useEffect","_form$getFieldValue","_$find","_nextImage","_","manual","environment","version","setFieldsValue","undefined","image","matchedEnvironmentByVersion","matchedImageByVersion","nextEnvironment","nextImage","getFieldValue","_imageGroups$","_nextEnvironment2","indexOf","imageGroups","group","environmentGroups","getImageFullName","_nextEnvironment","environmentName","customizedImageTag","labels","item","key","value","_config","allow_manual_image_name_for_session","customizedTag","setFieldValue","useMemo","label","_label$value","split","includes","isPrivateImage","groupBy","_metadata$imageInfo$g","imageInfo","map","groupName","registry","name","_environmentName$spli","_metadata$imageInfo$i","imageKey","displayName","prefix","drop","dropRight","join","sort","a","b","_b$tag$split$","_b$tag","_b$tag$split","_a$tag$split$","_a$tag","_a$tag$split","version1","version2","v1","Number","v2","i","Math","max","length","num1","num2","compareVersions","tag","sortBy","fullNameMatchedImage","fullNameMatchedImageGroup","flatMap","find","envGroup","_jsxs","_Fragment","children","_jsx","Item","className","concat","rules","required","style","marginBottom","Select","ref","showSearch","searchValue","onSearch","defaultActiveFirstOption","optionFilterProp","onChange","firstInListImage","disabled","Option","filterValue","Flex","direction","align","gap","display","ImageMetaIcon","width","height","OptGroup","environmentGroup","_environmentGroup$env","firstImage","currentMetaImageInfo","extraFilterValues","environmentPrefixTag","push","Tag","color","TextHighlighter","keyword","tagsFromMetaImageInfoLabel","category","justify","marginLeft","marginXS","flexShrink","noStyle","shouldUpdate","prev","cur","_prev$environments","_cur$environments","_ref2","_selectedEnvironmentG","selectedEnvironmentGroup","_getFieldValue","selectedImage","dropdownRender","menu","fontWeight","fontWeightStrong","paddingLeft","paddingSM","Divider","type","margin","_image$tag","requirements","tagAlias","replaceString","Object","entries","tagReplace","pattern","RegExp","test","replace","requirementTags","requirement","startsWith","idx","DoubleTag","values","str","imageLabels","customizedImageNameLabelIdx","_imageLabels$customiz","architecture","digest","Input","allowClear","hidden","node","v0","hash"],"sourceRoot":""}