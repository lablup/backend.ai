{"version":3,"file":"static/js/4943.75fd2c20.chunk.js","mappings":"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","sources":["BAICard.tsx","components/DatePickerISO.tsx","components/ImageTags.tsx","components/PortSelectFormItem.tsx","components/SessionLauncherErrorTourProps.tsx","components/SessionNameFormItem.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\ninterface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n  ref?: React.LegacyRef<HTMLDivElement> | undefined;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      className={status === 'error' ? 'bai-card-error' : ''}\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n              ? token.colorWarning\n              : status === 'success'\n                ? token.colorSuccess\n                : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO: React.FC<DatePickerISOProps> = ({\n  value,\n  onChange,\n  localFormat,\n  ...pickerProps\n}) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n};\n\nexport default DatePickerISO;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport Flex from './Flex';\nimport { Tag, TagProps } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\ninterface ImageAliasNameAndBaseVersionTagsProps\n  extends Omit<DoubleTagObjectValue, 'label'> {\n  image: string | null;\n}\nexport const ImageAliasNameAndBaseVersionTags: React.FC<\n  ImageAliasNameAndBaseVersionTagsProps\n> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageAliasName, getBaseVersion, tagAlias }] =\n    useBackendAIImageMetaData();\n  return (\n    <DoubleTag\n      values={[\n        {\n          label: tagAlias(getImageAliasName(image)),\n          color: 'blue',\n        },\n        {\n          label: getBaseVersion(image),\n          color: 'green',\n        },\n      ]}\n      {...props}\n    />\n  );\n};\n\ninterface BaseVersionTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseVersionTags: React.FC<BaseVersionTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseVersion, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseVersion(image))}\n    </Tag>\n  );\n};\n\ninterface BaseImageTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseImageTags: React.FC<BaseImageTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseImage, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseImage(image))}\n    </Tag>\n  );\n};\n\ninterface ArchitectureTagsProps extends TagProps {\n  image: string | null;\n}\nexport const ArchitectureTags: React.FC<ArchitectureTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getArchitecture, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getArchitecture(image))}\n    </Tag>\n  );\n};\n\ninterface LangTagsProps extends TagProps {\n  image: string | null;\n}\nexport const LangTags: React.FC<LangTagsProps> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageLang, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getImageLang(image))}\n    </Tag>\n  );\n};\n\ninterface ConstraintTagsProps extends TagProps {\n  image: string | null;\n  labels: { key: string; value: string }[];\n}\nexport const ConstraintTags: React.FC<ConstraintTagsProps> = ({\n  image,\n  labels,\n  ...props\n}) => {\n  image = image || '';\n  labels = labels || [];\n  const [, { getFilteredRequirementsTags, getCustomTag, tagAlias }] =\n    useBackendAIImageMetaData();\n  return (\n    <Flex>\n      {_.map(getFilteredRequirementsTags(image), (tag, index) => (\n        <Tag key={index} color=\"blue\" {...props}>\n          {tagAlias(tag || '')}\n        </Tag>\n      ))}\n      <DoubleTag\n        color=\"cyan\"\n        values={[\n          {\n            label: 'Customized',\n            color: 'cyan',\n          },\n          {\n            label: getCustomTag(labels),\n            color: 'cyan',\n          },\n        ]}\n        {...props}\n      />\n    </Flex>\n  );\n};\n\nconst SessionKernelTags: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n}> = ({ image, style = {} }, bordered) => {\n  image = image || '';\n  return (\n    <>\n      <ImageAliasNameAndBaseVersionTags image={image} />\n      <BaseImageTags image={image} />\n      <ArchitectureTags image={image} />\n    </>\n  );\n};\n\nexport default React.memo(SessionKernelTags);\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({\n  name = 'ports',\n  ...formItemProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const form = Form.useFormInstance();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name={name}\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        () => ({\n          validator(rule, values) {\n            if (\n              transformPortValuesToNumbers(values).length <=\n              baiClient._config.maxCountForPreopenPorts\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(\n                  t('session.launcher.PreOpenPortMaxCountLimit', {\n                    count: baiClient._config.maxCountForPreopenPorts,\n                  }),\n                ),\n              );\n            }\n          },\n        }),\n        () => ({\n          // To check if the port range is not start <= end\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                return parseInt(v).toString() === v || isPortRangeStr(v);\n              })\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(t('session.launcher.InvalidPortFormat')),\n              );\n            }\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            const allPorts = transformPortValuesToNumbers(values);\n            if (\n              _.every(allPorts, (port) => {\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            // To check if the port is duplicated\n            const allPorts = transformPortValuesToNumbers(values);\n            if (_.uniq(allPorts).length === allPorts.length) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.DuplicatedPort')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          const hasDuplicated =\n            _.filter(\n              transformPortValuesToNumbers(form.getFieldValue(name)),\n              (v) => v === parseInt(props.value),\n            ).length > 1;\n          return (\n            <PortTag\n              inValid={hasDuplicated}\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n  inValid?: boolean;\n}\n\nexport const PortTag: React.FC<PortTagProps> = ({\n  inValid,\n  value,\n  ...tagProps\n}) => {\n  return (\n    <Tag\n      color={!inValid && isValidPortStr(value) ? undefined : 'red'}\n      {...tagProps}\n    />\n  );\n};\n\nexport const isValidPortStr = (portStr: string) => {\n  // consider range as valid\n  if (isPortRangeStr(portStr)) {\n    const splitPortRange = portStr.split(':');\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start >= MIN_PORT && end <= MAX_PORT;\n  } else if (\n    portStr === parseInt(portStr).toString() &&\n    parseInt(portStr) >= MIN_PORT &&\n    parseInt(portStr) <= MAX_PORT\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const isPortRangeStr = (portRange: string) => {\n  const splitPortRange = portRange.split(':');\n  if (splitPortRange.length === 2) {\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start <= end;\n  }\n  return false;\n};\n\nexport const parsePortRangeToNumbers = (portRange: string) => {\n  const [start, end] = portRange.split(':').map((v) => parseInt(v));\n  return _.range(start, end + 1);\n};\n\nexport const transformPortValuesToNumbers = (\n  values: PortSelectFormValues['ports'],\n) => {\n  return _.flatten(\n    _.map(values, (v) =>\n      isPortRangeStr(v) ? parsePortRangeToNumbers(v) : parseInt(v),\n    ),\n  );\n};\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useBAISettingUserState } from '../hooks/useBAISetting';\nimport { Tour, TourProps } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionLauncherValidationTourProps extends Omit<TourProps, 'steps'> {}\nconst SessionLauncherValidationTour: React.FC<\n  SessionLauncherValidationTourProps\n> = ({ open, onClose, ...otherProps }) => {\n  const { t } = useTranslation();\n  const [hasOpenedValidationTour, setHasOpenedValidationTour] =\n    useBAISettingUserState('has_opened_tour_neo_session_validation');\n\n  const steps = [\n    {\n      title: t('tourguide.NeoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourguide.NeoSessionLauncher.ValidationErrorText'),\n      target: () =>\n        document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement,\n    },\n    {\n      title: t('tourguide.NeoSessionLauncher.ValidationErrorTitle'),\n      description: t(\n        'tourguide.NeoSessionLauncher.FixErrorFieldbyModifyButton',\n      ),\n      target: () =>\n        (\n          document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement\n        ).querySelector('.ant-card-extra') as HTMLElement,\n    },\n    {\n      title: t('tourguide.NeoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourguide.NeoSessionLauncher.FixErrorAndTryAgainText'),\n      target: () =>\n        document.querySelector(\n          '[data-test-id=\"neo-session-launcher-tour-step-navigation\"]',\n        ) as HTMLElement,\n    },\n  ];\n  return (\n    <Tour\n      steps={steps}\n      onClose={(e) => {\n        onClose?.(e);\n        setHasOpenedValidationTour(true);\n      }}\n      open={!hasOpenedValidationTour && open}\n      {...otherProps}\n    />\n  );\n};\n\nexport default SessionLauncherValidationTour;\n","import { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={[\n        {\n          min: 4,\n          message: t('session.Validation.SessionNameTooShort'),\n        },\n        {\n          max: 64,\n          message: t('session.Validation.SessionNameTooLong64'),\n        },\n        {\n          validator(f, value) {\n            if (_.isEmpty(value)) {\n              return Promise.resolve();\n            }\n            if (!/^\\w/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldStartWith'),\n              );\n            }\n\n            if (!/^[\\w.-]*$/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameInvalidCharacter'),\n              );\n            }\n\n            if (!/\\w$/.test(value) && value.length >= 4) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldEndWith'),\n              );\n            }\n            return Promise.resolve();\n          },\n        },\n      ]}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import BAICard from '../BAICard';\nimport BAIIntervalText from '../components/BAIIntervalText';\nimport DatePickerISO from '../components/DatePickerISO';\nimport DoubleTag from '../components/DoubleTag';\nimport EnvVarFormList, {\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport SessionKernelTags from '../components/ImageTags';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  PortTag,\n  transformPortValuesToNumbers,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionLauncherValidationTour from '../components/SessionLauncherErrorTourProps';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport SourceCodeViewer from '../components/SourceCodeViewer';\nimport VFolderTableFormItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport {\n  compareNumberWithUnits,\n  generateRandomString,\n  iSizeToSize,\n} from '../helper';\nimport {\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n  useWebUINavigate,\n} from '../hooks';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useThemeMode } from '../hooks/useThemeMode';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn } from 'ahooks';\nimport {\n  Alert,\n  App,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Descriptions,\n  Form,\n  FormInstance,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Table,\n  Tag,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n  bootstrap_script?: string;\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n  bootstrap_script?: string;\n}\n\nexport type SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\n\nexport type AppOption = {\n  'session-name'?: string;\n  'session-uuid'?: string;\n  'access-key'?: string;\n  mode?: SessionMode;\n  'app-services'?: Array<string>;\n  runtime?: string;\n  filename?: string;\n  // [key in string]: any;\n};\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n  let sessionMode: SessionMode = 'normal';\n\n  const mainContentDivRef = useAtomValue(mainContentDivRefState);\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const INITIAL_FORM_VALUES: SessionLauncherValue = useMemo(\n    () => ({\n      sessionType: 'interactive',\n      // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n      allocationPreset: 'auto-preset',\n      hpcOptimization: {\n        autoEnabled: true,\n        OMP_NUM_THREADS: '1',\n        OPENBLAS_NUM_THREADS: '1',\n      },\n      batch: {\n        enabled: false,\n        command: undefined,\n        scheduleDate: undefined,\n      },\n      envvars: [],\n      // set default_session_environment only if set\n      ...(baiClient._config?.default_session_environment && {\n        environments: {\n          environment: baiClient._config?.default_session_environment,\n        },\n      }),\n      ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n    }),\n    [baiClient._config?.default_session_environment],\n  );\n  const StepParam = withDefault(NumberParam, 0);\n  const FormValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n  const AppOptionParam = withDefault(JsonParam, {});\n  const [\n    {\n      step: currentStep,\n      formValues: formValuesFromQueryParams,\n      redirectTo,\n      appOption: appOptionFromQueryParams,\n    },\n    setQuery,\n  ] = useQueryParams({\n    step: StepParam,\n    formValues: FormValuesParam,\n    redirectTo: StringParam,\n    appOption: AppOptionParam,\n  });\n\n  const { isDarkMode } = useThemeMode();\n  const navigate = useNavigate();\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const currentProject = useCurrentProjectValue();\n\n  const { upsertNotification } = useSetBAINotification();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.omit(\n            form.getFieldsValue(),\n            ['environments.image'],\n            ['environments.customizedTag'],\n            ['autoMountedFolderNames'],\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  useEffect(() => {\n    if (!_.isEmpty(formValuesFromQueryParams)) {\n      form.validateFields().catch((e) => {});\n    }\n    // Run this memo only for the first time\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const mergedInitialValues = useMemo(() => {\n    return _.merge(INITIAL_FORM_VALUES, formValuesFromQueryParams);\n  }, [INITIAL_FORM_VALUES, formValuesFromQueryParams]);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: <PlayCircleFilled />,\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  const [finalStepLastValidateTime, setFinalStepLastValidateTime] =\n    useUpdatableState('first'); // Force re-render after validation in final step.\n\n  useEffect(() => {\n    if (currentStep === steps.length - 1) {\n      form\n        .validateFields()\n        .catch((error) => {})\n        .finally(() => setFinalStepLastValidateTime());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep, form, setFinalStepLastValidateTime, steps.length]);\n\n  useEffect(() => {\n    if (finalStepLastValidateTime !== 'first') {\n      if (hasError) {\n        setValidationTourOpen(true);\n      } else {\n        setValidationTourOpen(false);\n      }\n    }\n  }, [finalStepLastValidateTime, hasError]);\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n    setIsStartingSession(true);\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mounts) || values.mounts.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          kernelName,\n          architecture,\n          sessionName: sessionName,\n          config: {\n            type: values.sessionType,\n            ...(_.isEmpty(values.bootstrap_script)\n              ? {}\n              : {\n                  bootstrap_script: values.bootstrap_script,\n                }),\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            group_name: currentProject.name,\n            domain: baiClient._config.domainName,\n            scaling_group: values.resourceGroup,\n            ///////////////////////////\n\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: transformPortValuesToNumbers(values.ports),\n          },\n        };\n\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                20000,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean; status: string }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                if (res?.status === 'CANCELLED') {\n                  // Case about failed to start new session kind of \"docker image not found\" or etc.\n                  throw new Error(\n                    t('session.launcher.FailedToStartNewSession'),\n                  );\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                if (err?.message?.includes('The session already exists')) {\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                } else {\n                  throw err;\n                }\n              });\n          },\n        );\n        // console.log('##', values.mounts);\n        // console.log(sessionInfo);\n        const backupTo = window.location.pathname + window.location.search;\n        webuiNavigate(redirectTo || '/job');\n        upsertNotification({\n          key: 'session-launcher:' + sessionName,\n          backgroundTask: {\n            promise: Promise.all(sessionPromises),\n            status: 'pending',\n            statusDescriptions: {\n              pending: t('session.PreparingSession'),\n              resolved: t('eduapi.ComputeSessionPrepared'),\n            },\n          },\n          duration: 0,\n          message: t('general.Session') + ': ' + sessionName,\n          open: true,\n        });\n        await Promise.all(sessionPromises)\n          .then(([firstSession]) => {\n            // console.log('##sessionPromises', firstSession);\n            if (\n              values.num_of_sessions === 1 &&\n              values.sessionType !== 'batch'\n            ) {\n              const res = firstSession;\n              let appOptions: AppOption = _.cloneDeep(appOptionFromQueryParams);\n              if ('kernelId' in res) {\n                // API v4\n                appOptions = _.extend(appOptions, {\n                  'session-name': res.kernelId,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                });\n              } else {\n                // API >= v5\n                appOptions = _.extend(appOptions, {\n                  'session-uuid': res.sessionId,\n                  'session-name': res.sessionName,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                });\n              }\n              const service_info = res.servicePorts;\n              if (Array.isArray(service_info) === true) {\n                appOptions['app-services'] = service_info.map(\n                  (a: { name: string }) => a.name,\n                );\n              } else {\n                appOptions['app-services'] = [];\n              }\n              // TODO: support import and inference\n              // if (sessionMode === 'import') {\n              //   appOptions['runtime'] = 'jupyter';\n              //   appOptions['filename'] = this.importFilename;\n              // }\n              // if (sessionMode === 'inference') {\n              //   appOptions['runtime'] = appOptions['app-services'].find(\n              //     (element: any) => !['ttyd', 'sshd'].includes(element),\n              //   );\n              // }\n\n              // only launch app when it has valid service ports\n              if (service_info.length > 0) {\n                // @ts-ignore\n                globalThis.appLauncher.showLauncher(appOptions);\n              }\n            }\n          })\n          .catch(() => {\n            upsertNotification({\n              key: 'session-launcher:' + sessionName,\n              to: backupTo,\n              toText: '수정',\n            });\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n\n  const [validationTourOpen, setValidationTourOpen] = useState(false);\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          {/* <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={3} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                icon={<BlockOutlined />}\n                disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n              >\n                {t('session.launcher.TemplateAndHistory')}\n              </Button>\n            </Flex>\n          </Flex> */}\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={mergedInitialValues}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                  <Form.Item\n                    name=\"bootstrap_script\"\n                    label=\"Bootstrap Script\"\n                    hidden\n                  >\n                    <Input />\n                  </Form.Item>\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      label={t('session.launcher.SessionStartTime')}\n                      extra={\n                        <Form.Item\n                          noStyle\n                          shouldUpdate={(prev, next) =>\n                            prev.batch.scheduleDate !== next.batch.scheduleDate\n                          }\n                        >\n                          {() => {\n                            const scheduleDate = form.getFieldValue([\n                              'batch',\n                              'scheduleDate',\n                            ]);\n                            return (\n                              <BAIIntervalText\n                                delay={1000}\n                                callback={() => {\n                                  const scheduleDate = form.getFieldValue([\n                                    'batch',\n                                    'scheduleDate',\n                                  ]);\n                                  if (scheduleDate) {\n                                    if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                      if (\n                                        form.getFieldError([\n                                          'batch',\n                                          'scheduleDate',\n                                        ]).length === 0\n                                      ) {\n                                        form.validateFields([\n                                          ['batch', 'scheduleDate'],\n                                        ]);\n                                      }\n                                      return undefined;\n                                    } else {\n                                      return dayjs(scheduleDate).fromNow();\n                                    }\n                                  } else {\n                                    return undefined;\n                                  }\n                                }}\n                                triggerKey={\n                                  scheduleDate ? scheduleDate : 'none'\n                                }\n                              />\n                            );\n                          }}\n                        </Form.Item>\n                      }\n                    >\n                      <Flex direction=\"row\" gap={'xs'}>\n                        <Form.Item\n                          noStyle\n                          name={['batch', 'enabled']}\n                          valuePropName=\"checked\"\n                        >\n                          <Checkbox\n                            onChange={(e) => {\n                              if (\n                                e.target.checked &&\n                                _.isEmpty(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                )\n                              ) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  dayjs().add(2, 'minutes').toISOString(),\n                                );\n                              } else if (e.target.checked === false) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  undefined,\n                                );\n                              }\n                              form.validateFields([['batch', 'scheduleDate']]);\n                            }}\n                          >\n                            {t('session.launcher.Enable')}\n                          </Checkbox>\n                        </Form.Item>\n                        <Form.Item\n                          noStyle\n                          // dependencies={[['batch', 'enabled']]}\n                          shouldUpdate={(prev, next) => {\n                            return (\n                              // @ts-ignore\n                              prev.batch?.enabled !== next.batch?.enabled\n                            );\n                          }}\n                        >\n                          {() => {\n                            const disabled =\n                              form.getFieldValue('batch')?.enabled !== true;\n                            return (\n                              <>\n                                <Form.Item\n                                  name={['batch', 'scheduleDate']}\n                                  noStyle\n                                  rules={[\n                                    {\n                                      // required: true,\n                                      validator: async (rule, value) => {\n                                        if (\n                                          value &&\n                                          dayjs(value).isBefore(dayjs())\n                                        ) {\n                                          return Promise.reject(\n                                            t(\n                                              'session.launcher.StartTimeMustBeInTheFuture',\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <DatePickerISO\n                                    disabled={disabled}\n                                    showTime\n                                    localFormat\n                                    disabledDate={(value) => {\n                                      return value.isBefore(\n                                        dayjs().startOf('day'),\n                                      );\n                                    }}\n                                  />\n                                </Form.Item>\n                                {/* <Form.Item\n                                      noStyle\n                                      name={['batch', 'scheduleTime']}\n                                    >\n                                      <TimePicker disabled={disabled} />\n                                    </Form.Item> */}\n                              </>\n                            );\n                          }}\n                        </Form.Item>\n                      </Flex>\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableNumOfSessions\n                    enableResourcePresets\n                    showRemainingWarning\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFormItem\n                    filter={(vfolder) => {\n                      return (\n                        vfolder.status === 'ready' &&\n                        !vfolder.name?.startsWith('.')\n                      );\n                    }}\n                  />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('sessionName').length > 0 ||\n                        form.getFieldError(['batch', 'command']).length > 0 ||\n                        form.getFieldError(['batch', 'scheduleDate']).length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\" column={1}>\n                        <Descriptions.Item label={t('session.SessionType')}>\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        {!_.isEmpty(form.getFieldValue('sessionName')) && (\n                          <Descriptions.Item\n                            label={t('session.launcher.SessionName')}\n                          >\n                            {form.getFieldValue('sessionName')}\n                          </Descriptions.Item>\n                        )}\n                        {sessionType === 'batch' && (\n                          <>\n                            <Descriptions.Item\n                              label={t('session.launcher.StartUpCommand')}\n                              labelStyle={{ whiteSpace: 'nowrap' }}\n                              contentStyle={{\n                                overflow: 'auto',\n                              }}\n                            >\n                              {form.getFieldValue(['batch', 'command']) ? (\n                                <SourceCodeViewer language=\"shell\">\n                                  {form.getFieldValue(['batch', 'command'])}\n                                </SourceCodeViewer>\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                            <Descriptions.Item\n                              label={t('session.launcher.ScheduleTimeSimple')}\n                            >\n                              {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                                dayjs(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                ).format('LLL (Z)')\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                          </>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(form.getFieldValue('envvars'), (v, idx) => {\n                          return (\n                            form.getFieldError(['envvars', idx, 'variable'])\n                              .length > 0 ||\n                            form.getFieldError(['envvars', idx, 'value'])\n                              .length > 0\n                          );\n                        })\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" column={1}>\n                        <Descriptions.Item\n                          label={t('session.launcher.Project')}\n                        >\n                          {currentProject.name}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.Image')}>\n                          <Row\n                            style={{ flexFlow: 'nowrap', gap: token.sizeXS }}\n                          >\n                            <Col>\n                              <ImageMetaIcon\n                                image={\n                                  form.getFieldValue('environments')?.version ||\n                                  form.getFieldValue('environments')?.manual\n                                }\n                              />\n                            </Col>\n                            <Col>\n                              {/* {form.getFieldValue('environments').image} */}\n                              <Flex direction=\"row\">\n                                {form.getFieldValue('environments')?.manual ? (\n                                  <Typography.Text\n                                    code\n                                    style={{ wordBreak: 'break-all' }}\n                                    copyable={{\n                                      text: form.getFieldValue('environments')\n                                        ?.manual,\n                                    }}\n                                  >\n                                    {form.getFieldValue('environments')?.manual}\n                                  </Typography.Text>\n                                ) : (\n                                  <>\n                                    <SessionKernelTags\n                                      image={\n                                        form.getFieldValue('environments')\n                                          ?.version\n                                      }\n                                    />\n                                    {form.getFieldValue('environments')\n                                      ?.customizedTag ? (\n                                      <DoubleTag\n                                        values={[\n                                          {\n                                            label: 'Customized',\n                                            color: 'cyan',\n                                          },\n                                          {\n                                            label:\n                                              form.getFieldValue('environments')\n                                                ?.customizedTag,\n                                            color: 'cyan',\n                                          },\n                                        ]}\n                                      />\n                                    ) : null}\n                                    <Typography.Text\n                                      copyable={{\n                                        text: form.getFieldValue('environments')\n                                          ?.version,\n                                      }}\n                                    />\n                                  </>\n                                )}\n                              </Flex>\n                            </Col>\n                          </Row>\n                        </Descriptions.Item>\n                        {form.getFieldValue('envvars')?.length > 0 && (\n                          <Descriptions.Item\n                            label={t('session.launcher.EnvironmentVariable')}\n                          >\n                            {form.getFieldValue('envvars')?.length ? (\n                              <SyntaxHighlighter\n                                style={isDarkMode ? dark : undefined}\n                                codeTagProps={{\n                                  style: {\n                                    // fontFamily: 'monospace',\n                                  },\n                                }}\n                                // showLineNumbers\n                                customStyle={{\n                                  margin: 0,\n                                  width: '100%',\n                                }}\n                              >\n                                {_.map(\n                                  form.getFieldValue('envvars'),\n                                  (v: { variable: string; value: string }) =>\n                                    `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                                ).join('\\n')}\n                              </SyntaxHighlighter>\n                            ) : (\n                              <Typography.Text type=\"secondary\">\n                                -\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.ResourceAllocation')}\n                      status={\n                        _.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldError(['resource', key]).length > 0\n                          );\n                        }) ||\n                        form.getFieldError(['num_of_sessions']).length > 0 ||\n                        form.getFieldError('resourceGroup').length > 0\n                          ? 'error'\n                          : // : _.some(form.getFieldValue('resource'), (v, key) => {\n                            //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n                            //     // console.log(form.getFieldValue(['resource']));\n                            //     return (\n                            //       form.getFieldWarning(['resource', key]).length >\n                            //       0\n                            //     );\n                            //   })\n                            // ? 'warning'\n                            undefined\n                      }\n                      size=\"small\"\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Flex direction=\"column\" align=\"stretch\">\n                        {_.some(\n                          form.getFieldValue('resource')?.resource,\n                          (v, key) => {\n                            return (\n                              form.getFieldWarning(['resource', key]).length > 0\n                            );\n                          },\n                        ) && (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t(\n                              'session.launcher.EnqueueComputeSessionWarning',\n                            )}\n                          />\n                        )}\n\n                        <Descriptions column={2}>\n                          <Descriptions.Item\n                            label={t('general.ResourceGroup')}\n                            span={2}\n                          >\n                            {form.getFieldValue('resourceGroup') || (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t(\n                              'session.launcher.ResourceAllocationPerContainer',\n                            )}\n                            span={2}\n                          >\n                            <Flex\n                              direction=\"row\"\n                              align=\"start\"\n                              gap={'sm'}\n                              wrap=\"wrap\"\n                              style={{ flex: 1 }}\n                            >\n                              {form.getFieldValue('allocationPreset') ===\n                              'custom' ? (\n                                // t('session.launcher.CustomAllocation')\n                                ''\n                              ) : (\n                                <Tag>\n                                  {form.getFieldValue('allocationPreset')}\n                                </Tag>\n                              )}\n\n                              <FormResourceNumbers form={form} />\n                              {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                            </Flex>\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.NumberOfContainer')}\n                          >\n                            {form.getFieldValue('cluster_size') === 1\n                              ? form.getFieldValue('num_of_sessions')\n                              : form.getFieldValue('cluster_size')}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.ClusterMode')}\n                          >\n                            {form.getFieldValue('cluster_mode') ===\n                            'single-node'\n                              ? t('session.launcher.SingleNode')\n                              : t('session.launcher.MultiNode')}\n                          </Descriptions.Item>\n                        </Descriptions>\n                        <Card\n                          size=\"small\"\n                          type=\"inner\"\n                          title={t('session.launcher.TotalAllocation')}\n                        >\n                          <Flex direction=\"row\" gap=\"xxs\">\n                            <FormResourceNumbers\n                              form={form}\n                              containerCount={\n                                form.getFieldValue('cluster_size') === 1\n                                  ? form.getFieldValue('num_of_sessions')\n                                  : form.getFieldValue('cluster_size')\n                              }\n                            />\n                          </Flex>\n                        </Card>\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {/* {console.log(_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames')]))} */}\n                      {/* {_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames').length]) > 0 ? ( */}\n                      <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n                        {form.getFieldValue('mounts')?.length > 0 ? (\n                          <Table\n                            rowKey=\"name\"\n                            size=\"small\"\n                            pagination={false}\n                            columns={[\n                              {\n                                dataIndex: 'name',\n                                title: t('data.folders.Name'),\n                              },\n                              {\n                                dataIndex: 'alias',\n                                title: t('session.launcher.FolderAlias'),\n                                render: (value, record) => {\n                                  return _.isEmpty(value) ? (\n                                    <Typography.Text\n                                      type=\"secondary\"\n                                      style={{\n                                        opacity: 0.7,\n                                      }}\n                                    >\n                                      {`/home/work/${record.name}`}\n                                    </Typography.Text>\n                                  ) : (\n                                    value\n                                  );\n                                },\n                              },\n                            ]}\n                            dataSource={_.map(\n                              form.getFieldValue('mounts'),\n                              (v) => {\n                                return {\n                                  name: v,\n                                  alias:\n                                    form.getFieldValue('vfoldersAliasMap')?.[v],\n                                };\n                              },\n                            )}\n                          ></Table>\n                        ) : (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t('session.launcher.NoFolderMounted')}\n                          />\n                        )}\n                        {form.getFieldValue('autoMountedFolderNames')?.length >\n                        0 ? (\n                          <Descriptions size=\"small\">\n                            <Descriptions.Item\n                              label={t('data.AutomountFolders')}\n                            >\n                              {_.map(\n                                form.getFieldValue('autoMountedFolderNames'),\n                                (name) => {\n                                  return <Tag>{name}</Tag>;\n                                },\n                              )}\n                            </Descriptions.Item>\n                          </Descriptions>\n                        ) : null}\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n\n                            {!_.isArray(form.getFieldValue('ports')) ||\n                            form.getFieldValue('ports')?.length === 0 ? (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            ) : null}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        form.resetFields();\n\n                        navigate('/session/start');\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </Flex>\n                  <Flex\n                    data-test-id=\"neo-session-launcher-tour-step-navigation\"\n                    direction=\"row\"\n                    gap=\"sm\"\n                  >\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Flex\n            data-test-id=\"neo-session-launcher-tour-step\"\n            style={{ position: 'sticky', top: 80 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Flex>\n        )}\n      </Flex>\n      {/* <FolderExplorer\n        folderName={selectedFolderName}\n        open={!!selectedFolderName}\n        onRequestClose={() => {\n          setSelectedFolderName(undefined);\n        }}\n      /> */}\n      {currentStep === steps.length - 1 ? (\n        <SessionLauncherValidationTour\n          open={validationTourOpen}\n          onClose={() => {\n            setValidationTourOpen(false);\n          }}\n          scrollIntoViewOptions\n        />\n      ) : undefined}\n    </Flex>\n  );\n};\n\nconst FormResourceNumbers: React.FC<{\n  form: FormInstance;\n  containerCount?: number;\n}> = ({ form, containerCount = 1 }) => {\n  return (\n    <>\n      {_.map(\n        _.omit(\n          form.getFieldsValue().resource,\n          'shmem',\n          'accelerator',\n          'acceleratorType',\n        ),\n        (value, type) => {\n          return (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (iSizeToSize(value, 'b')?.number || 0) * containerCount + ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: form.getFieldValue('resource').shmem\n                  ? (iSizeToSize(form.getFieldValue('resource').shmem, 'b')\n                      ?.number || 0) * containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {_.isNumber(form.getFieldValue(['resource', 'accelerator'])) &&\n        form.getFieldValue(['resource', 'acceleratorType']) && (\n          <ResourceNumber\n            // @ts-ignore\n            type={form.getFieldValue(['resource', 'acceleratorType'])}\n            value={_.toString(\n              form.getFieldValue(['resource', 'accelerator']) * containerCount,\n            )}\n          />\n        )}\n    </>\n  );\n};\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nexport default SessionLauncherPage;\n"],"names":["_ref","status","extraButtonTitle","onClickExtraButton","extra","style","cardProps","token","theme","useToken","_extra","_jsx","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","undefined","onClick","children","Card","className","_","borderColor","colorSuccess","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","DatePicker","dayjs","_value","_value2","_value2$tz","newValue","format","tz","toISOString","ImageAliasNameAndBaseVersionTags","image","props","getImageAliasName","getBaseVersion","tagAlias","useBackendAIImageMetaData","DoubleTag","values","label","color","BaseVersionTags","_ref2","Tag","BaseImageTags","_ref3","getBaseImage","ArchitectureTags","_ref4","getArchitecture","LangTags","_ref5","getImageLang","ConstraintTags","_ref6","labels","getFilteredRequirementsTags","getCustomTag","_jsxs","Flex","tag","index","SessionKernelTags","_ref7","bordered","_Fragment","React","MIN_PORT","MAX_PORT","PortTag","inValid","tagProps","isValidPortStr","portStr","isPortRangeStr","splitPortRange","split","start","end","map","v","parseInt","toString","portRange","length","transformPortValuesToNumbers","parsePortRangeToNumbers","name","formItemProps","t","useTranslation","baiClient","useSuspendedBackendaiClient","form","Form","useFormInstance","Item","tooltip","Trans","i18nKey","rules","validator","rule","_config","maxCountForPreopenPorts","Promise","resolve","reject","Error","count","allPorts","port","Select","mode","tagRender","hasDuplicated","getFieldValue","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","otherProps","hasOpenedValidationTour","setHasOpenedValidationTour","useBAISettingUserState","steps","title","description","target","_document$getElements","document","getElementsByClassName","_document$getElements2","querySelector","Tour","min","message","max","f","test","Input","allowClear","autoComplete","FormResourceNumbers","containerCount","getFieldsValue","resource","_iSizeToSize","_iSizeToSize2","ResourceNumber","iSizeToSize","number","opts","shmem","generateSessionId","text","possible","i","charAt","Math","floor","random","SessionLauncherPage","_baiClient$_config3","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue7","_form$getFieldValue8","_form$getFieldValue9","_form$getFieldValue10","_form$getFieldValue11","_form$getFieldValue12","_form$getFieldValue13","_form$getFieldValue14","_form$getFieldValue16","_form$getFieldValue17","app","App","useApp","sessionMode","mainContentDivRef","useAtomValue","mainContentDivRefState","isStartingSession","setIsStartingSession","useState","INITIAL_FORM_VALUES","useMemo","_baiClient$_config","_baiClient$_config2","sessionType","allocationPreset","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","enabled","command","scheduleDate","envvars","default_session_environment","environments","environment","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","StepParam","withDefault","NumberParam","FormValuesParam","JsonParam","AppOptionParam","step","currentStep","formValues","formValuesFromQueryParams","redirectTo","appOption","appOptionFromQueryParams","setQuery","useQueryParams","StringParam","isDarkMode","useThemeMode","navigate","useNavigate","webuiNavigate","useWebUINavigate","currentProject","useCurrentProjectValue","upsertNotification","useSetBAINotification","run","syncFormToURLWithDebounce","useDebounceFn","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","useForm","useEffect","validateFields","catch","mergedInitialValues","_mainContentDivRef$cu","current","scrollTo","useWatch","preserve","key","concat","PlayCircleFilled","currentStepKey","hasError","getFieldsError","item","errors","finalStepLastValidateTime","setFinalStepLastValidateTime","useUpdatableState","error","finally","setValidationTourOpen","validationTourOpen","direction","align","justifyContent","gap","flex","maxWidth","Provider","onFormChange","info","layout","requiredMark","initialValues","display","Radio","options","Typography","Text","code","SessionNameFormItem","hidden","required","TextArea","autoSize","noStyle","shouldUpdate","prev","next","BAIIntervalText","delay","callback","isBefore","getFieldError","fromNow","triggerKey","valuePropName","Checkbox","checked","setFieldValue","add","_prev$batch","_next$batch","_form$getFieldValue","disabled","async","DatePickerISO","showTime","disabledDate","startOf","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableNumOfSessions","enableResourcePresets","showRemainingWarning","Switch","checkedChildren","unCheckedChildren","setFieldsValue","_prev$hpcOptimization","_next$hpcOptimization","Row","gutter","marginMD","marginTop","Col","xs","sm","InputNumber","stringMode","VFolderTableFormItem","filter","vfolder","_vfolder$name","startsWith","PortSelectFormItem","BAICard","size","findIndex","Descriptions","column","labelStyle","whiteSpace","contentStyle","overflow","SourceCodeViewer","language","idx","flexFlow","sizeXS","ImageMetaIcon","version","manual","wordBreak","copyable","customizedTag","SyntaxHighlighter","dark","codeTagProps","customStyle","margin","variable","join","getFieldWarning","Alert","showIcon","span","wrap","Table","rowKey","pagination","columns","dataIndex","render","record","opacity","dataSource","_form$getFieldValue15","alias","justify","Popconfirm","onConfirm","resetFields","QuestionCircleOutlined","okText","okButtonProps","danger","paddingRight","paddingLeft","LeftOutlined","Tooltip","PlayCircleOutlined","startSession","then","mounts","modal","confirm","content","onOk","onCancel","imageFullName","kernelName","architecture","sessionName","sessionInfo","config","bootstrap_script","startsAt","startupCommand","group_name","domain","domainName","scaling_group","resourceGroup","cluster_mode","cluster_size","maxWaitSeconds","cpu","mem","compareNumberWithUnits","accelerator","acceleratorType","mount_map","vfoldersAliasMap","env","preopen_ports","ports","sessionPromises","num_of_sessions","formattedSessionName","generateRandomString","createIfNotExists","res","created","err","_err$message","includes","backupTo","window","location","pathname","search","backgroundTask","promise","all","statusDescriptions","pending","resolved","duration","firstSession","appOptions","kernelId","sessionId","service_info","servicePorts","Array","isArray","a","globalThis","appLauncher","showLauncher","to","toText","loading","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","items","s","SessionLauncherValidationTour","scrollIntoViewOptions"],"sourceRoot":""}