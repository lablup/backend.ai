{"version":3,"file":"static/js/587.a36b45ff.chunk.js","mappings":"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","sources":["__generated__/ImageEnvironmentSelectFormItemsQuery.graphql.ts","__generated__/VFolderPermissionTag_VFolder.graphql.ts","__generated__/VFolderTableProjectQuery.graphql.ts","components/EnvVarFormList.tsx","components/ImageEnvironmentSelectFormItems.tsx","components/ImageMetaIcon.tsx","components/ImageTags.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<069eed3537c1f9d3b16b394a33ab2743>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ImageEnvironmentSelectFormItemsQuery$variables = {\n  installed?: boolean | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery$data = {\n  readonly images: ReadonlyArray<{\n    readonly architecture: string | null | undefined;\n    readonly base_image_name: string | null | undefined;\n    readonly digest: string | null | undefined;\n    readonly humanized_name: string | null | undefined;\n    readonly id: string | null | undefined;\n    readonly installed: boolean | null | undefined;\n    readonly labels: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly name: string | null | undefined;\n    readonly namespace: string | null | undefined;\n    readonly registry: string | null | undefined;\n    readonly resource_limits: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly max: string | null | undefined;\n      readonly min: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly tag: string | null | undefined;\n    readonly tags: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly version: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery = {\n  response: ImageEnvironmentSelectFormItemsQuery$data;\n  variables: ImageEnvironmentSelectFormItemsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"installed\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"key\",\n  \"storageKey\": null\n},\nv2 = [\n  (v1/*: any*/),\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"value\",\n    \"storageKey\": null\n  }\n],\nv3 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"is_installed\",\n        \"variableName\": \"installed\"\n      }\n    ],\n    \"concreteType\": \"Image\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"images\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"humanized_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"tag\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"registry\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"architecture\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"digest\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"installed\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ResourceLimit\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"resource_limits\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"min\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"max\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"labels\",\n        \"plural\": true,\n        \"selections\": (v2/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"namespace\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"base_image_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"tags\",\n        \"plural\": true,\n        \"selections\": (v2/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"version\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v3/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v3/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"9ff1339a66b7da77df70de956e3c7dd8\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageEnvironmentSelectFormItemsQuery(\\n  $installed: Boolean\\n) {\\n  images(is_installed: $installed) {\\n    id\\n    name @deprecatedSince(version: \\\"24.12.0\\\")\\n    humanized_name\\n    tag\\n    registry\\n    architecture\\n    digest\\n    installed\\n    resource_limits {\\n      key\\n      min\\n      max\\n    }\\n    labels {\\n      key\\n      value\\n    }\\n    namespace @since(version: \\\"24.12.0\\\")\\n    base_image_name @since(version: \\\"24.12.0\\\")\\n    tags @since(version: \\\"24.12.0\\\") {\\n      key\\n      value\\n    }\\n    version @since(version: \\\"24.12.0\\\")\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"40b2d995106300fffb0c3a5d66103d38\";\n\nexport default node;\n","/**\n * @generated SignedSource<<aed62292557ed2085f1400aef2426716>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null | undefined;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","/**\n * @generated SignedSource<<e248ecb3a254452b53cfc67d5cc53bec>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type VFolderTableProjectQuery$variables = {\n  domain_name: string;\n  group_id: string;\n  keypair_resource_policy_name: string;\n};\nexport type VFolderTableProjectQuery$data = {\n  readonly domain: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n  readonly group: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n  readonly keypair_resource_policy: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n};\nexport type VFolderTableProjectQuery = {\n  response: VFolderTableProjectQuery$data;\n  variables: VFolderTableProjectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"domain_name\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"group_id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"keypair_resource_policy_name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"allowed_vfolder_hosts\",\n    \"storageKey\": null\n  }\n],\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"domain_name\"\n      }\n    ],\n    \"concreteType\": \"Domain\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"domain\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"domain_name\",\n        \"variableName\": \"domain_name\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"group_id\"\n      }\n    ],\n    \"concreteType\": \"Group\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"group\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"keypair_resource_policy_name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"2c2ce905afd89e93c6d761f22ed59f3d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"VFolderTableProjectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query VFolderTableProjectQuery(\\n  $domain_name: String!\\n  $group_id: UUID!\\n  $keypair_resource_policy_name: String!\\n) {\\n  domain(name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  group(id: $group_id, domain_name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  keypair_resource_policy(name: $keypair_resource_policy_name) {\\n    allowed_vfolder_hosts\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ccdbaa52a63c2ea005423e7c541eff80\";\n\nexport default node;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          !_.isEmpty(variableName) &&\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                    onChange={() => {\n                      const fieldNames = fields.map((field, index) => [\n                        props.name,\n                        index,\n                        'variable',\n                      ]);\n                      form.validateFields(fieldNames);\n                    }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\n                        'session.launcher.EnvironmentVariableValueRequired',\n                      ),\n                    },\n                  ]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input\n                    placeholder=\"Value\"\n                    // onChange={() => {\n                    //   const valueFields = fields.map((field, index) => [\n                    //     props.name,\n                    //     index,\n                    //     'value',\n                    //   ]);\n                    //   form.validateFields(valueFields);\n                    // }}\n                  />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                {t('session.launcher.AddEnvironmentVariable')}\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nconst sensitivePatterns = [\n  /AUTH/i,\n  /ACCESS/i,\n  /SECRET/i,\n  /_KEY/i,\n  /PASSWORD/i,\n  /PASSWD/i,\n  /PWD/i,\n  /TOKEN/i,\n  /PRIVATE/i,\n  /CREDENTIAL/i,\n  /JWT/i,\n  /KEYPAIR/i,\n  /CERTIFICATE/i,\n  /SSH/i,\n  /ENCRYPT/i,\n  /SIGNATURE/i,\n  /SALT/i,\n  /PIN/i,\n  /PASSPHRASE/i,\n  /OAUTH/i,\n];\n\nexport function isSensitiveEnv(key: string) {\n  return sensitivePatterns.some((pattern) => pattern.test(key));\n}\n\nexport function sanitizeSensitiveEnv(envs: EnvVarFormListValue[]) {\n  return _.map(envs, (env) => {\n    if (env && isSensitiveEnv(env.variable)) {\n      return { ...env, value: '' };\n    }\n    return env;\n  });\n}\n\nexport default EnvVarFormList;\n","import {\n  ImageEnvironmentSelectFormItemsQuery,\n  ImageEnvironmentSelectFormItemsQuery$data,\n} from '../__generated__/ImageEnvironmentSelectFormItemsQuery.graphql';\nimport {\n  getImageFullName,\n  localeCompare,\n  preserveDotStartCase,\n} from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\n// @ts-ignore\nimport cssRaw from './ImageEnvironmentSelectFormItems.css?raw';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { ImageTags } from './ImageTags';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  Divider,\n  Form,\n  Input,\n  RefSelectProps,\n  Select,\n  Tag,\n  theme,\n  Typography,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\n\nexport type Image = NonNullable<\n  NonNullable<ImageEnvironmentSelectFormItemsQuery$data>['images']\n>[0];\n\ntype ImageGroup = {\n  groupName: string;\n  environmentGroups: {\n    environmentName: string;\n    displayName: string;\n    prefix?: string;\n    images: Image[];\n  }[];\n};\n\nexport type ImageEnvironmentFormInput = {\n  environments: {\n    environment: string;\n    version: string;\n    image: Image | undefined;\n    manual?: string;\n    customizedTag?: string;\n  };\n};\n\ninterface ImageEnvironmentSelectFormItemsProps {\n  filter?: (image: Image) => boolean;\n  showPrivate?: boolean;\n}\n\nfunction compareVersions(version1: string, version2: string): number {\n  const v1 = version1.split('.').map(Number);\n  const v2 = version2.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const num1 = v1[i] || 0;\n    const num2 = v2[i] || 0;\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nconst isPrivateImage = (image: Image) => {\n  return _.some(image?.labels, (label) => {\n    return (\n      label?.key === 'ai.backend.features' &&\n      label?.value?.split(' ').includes('private')\n    );\n  });\n};\n\nconst ImageEnvironmentSelectFormItems: React.FC<\n  ImageEnvironmentSelectFormItemsProps\n> = ({ filter, showPrivate }) => {\n  const form = Form.useFormInstance<ImageEnvironmentFormInput>();\n  const environments = Form.useWatch('environments', { form, preserve: true });\n  const baiClient = useSuspendedBackendaiClient();\n  const supportExtendedImageInfo = baiClient?.supports('extended-image-info');\n\n  const [environmentSearch, setEnvironmentSearch] = useState('');\n  const [versionSearch, setVersionSearch] = useState('');\n  const { t } = useTranslation();\n  const [metadata, { getBaseVersion, getImageMeta, tagAlias }] =\n    useBackendAIImageMetaData();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n\n  const envSelectRef = useRef<RefSelectProps>(null);\n  const versionSelectRef = useRef<RefSelectProps>(null);\n  const imageEnvironmentSelectFormItemsVariables = baiClient?._config\n    ?.showNonInstalledImages\n    ? {}\n    : { installed: true };\n  const { images } = useLazyLoadQuery<ImageEnvironmentSelectFormItemsQuery>(\n    graphql`\n      query ImageEnvironmentSelectFormItemsQuery($installed: Boolean) {\n        images(is_installed: $installed) {\n          id\n          name @deprecatedSince(version: \"24.12.0\")\n          humanized_name\n          tag\n          registry\n          architecture\n          digest\n          installed\n          resource_limits {\n            key\n            min\n            max\n          }\n          labels {\n            key\n            value\n          }\n          namespace @since(version: \"24.12.0\")\n          base_image_name @since(version: \"24.12.0\")\n          tags @since(version: \"24.12.0\") {\n            key\n            value\n          }\n          version @since(version: \"24.12.0\")\n        }\n      }\n    `,\n    imageEnvironmentSelectFormItemsVariables,\n    {\n      fetchPolicy: 'store-and-network',\n    },\n  );\n\n  // If not initial value, select first value\n  // auto select when relative field is changed\n  useEffect(() => {\n    if (!_.isEmpty(environments?.manual)) {\n      // set undefined fields related to environments when manual is set\n      if (environments.environment || environments.version) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n          },\n        });\n      }\n      return;\n    }\n\n    let matchedEnvironmentByVersion:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    let matchedImageByVersion: Image | undefined;\n    let version = form.getFieldValue('environments')?.version;\n    // FIXME: manually add architecture based on amd64\n    if (version && version.indexOf('@') < 0) {\n      version += '@x86_64';\n    }\n    version &&\n      _.find(imageGroups, (group) => {\n        matchedEnvironmentByVersion = _.find(\n          group.environmentGroups,\n          (environment) => {\n            matchedImageByVersion = _.find(\n              environment.images,\n              (image) => getImageFullName(image) === version,\n            );\n            return !!matchedImageByVersion; // break iteration\n          },\n        );\n        return !!matchedEnvironmentByVersion; // break iteration\n      });\n\n    // if matchedEnvironmentByVersion is not existed, select first values\n    let nextEnvironment: ImageGroup['environmentGroups'][0] | undefined;\n    let nextImage: Image | undefined;\n    if (matchedEnvironmentByVersion) {\n      nextEnvironment = matchedEnvironmentByVersion;\n      nextImage = matchedImageByVersion;\n    } else if (form.getFieldValue(['environments', 'environment'])) {\n      _.find(imageGroups, (group) => {\n        nextEnvironment = _.find(group.environmentGroups, (environment) => {\n          return (\n            environment.environmentName ===\n            form.getFieldValue(['environments', 'environment'])\n          );\n        });\n        nextImage = nextEnvironment?.images[0];\n        return !!nextEnvironment;\n      });\n    }\n\n    if (!nextEnvironment || !nextImage) {\n      nextEnvironment = imageGroups[0]?.environmentGroups[0];\n      nextImage = nextEnvironment?.images[0];\n    }\n\n    const customizedImageTag = _.find(\n      nextImage?.labels,\n      (item) =>\n        item !== null && item?.key === 'ai.backend.customized-image.name',\n    )?.value;\n\n    if (nextImage) {\n      if (\n        !matchedEnvironmentByVersion &&\n        baiClient._config.allow_manual_image_name_for_session &&\n        version\n      ) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n            manual: version,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      } else {\n        form.setFieldsValue({\n          environments: {\n            environment: nextEnvironment.environmentName,\n            version: getImageFullName(nextImage),\n            image: nextImage,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      }\n    } else if (baiClient._config.allow_manual_image_name_for_session) {\n      // if no image is available, only set manual if it's allowed\n      form.setFieldValue(['environments', 'manual'], version);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environments?.version, environments?.manual]); // environments?.environment,\n\n  const imageGroups: ImageGroup[] = useMemo(\n    () =>\n      _.chain(images)\n        .filter((image) => {\n          return (\n            (showPrivate ? true : !isPrivateImage(image)) &&\n            (filter ? filter(image) : true)\n          );\n        })\n        .groupBy((image) => {\n          // group by using `group` property of image info\n          return (\n            metadata?.imageInfo[getImageMeta(getImageFullName(image) || '').key]\n              ?.group || 'Custom Environments'\n          );\n        })\n        .map((images, groupName) => {\n          return {\n            groupName,\n            environmentGroups: _.chain(images)\n              // sub group by using (environment) `name` property of image info\n              .groupBy((image) => {\n                return (\n                  // metadata?.imageInfo[\n                  //   getImageMeta(getImageFullName(image) || \"\").key\n                  // ]?.name || image?.name\n                  `${image?.registry}/${\n                    supportExtendedImageInfo ? image?.namespace : image?.name\n                  }`\n                );\n              })\n              .map((images, environmentName) => {\n                const imageKey = environmentName.split('/')?.[2];\n                const displayName =\n                  imageKey && metadata?.imageInfo[imageKey]?.name;\n\n                return {\n                  environmentName,\n                  displayName:\n                    displayName ||\n                    (_.last(environmentName.split('/')) as string),\n                  prefix: _.chain(environmentName)\n                    .split('/')\n                    .drop(1)\n                    .dropRight(1)\n                    .join('/')\n                    .value(),\n                  images: images.sort(\n                    (a, b) =>\n                      compareVersions(\n                        // latest version comes first\n                        b?.tag?.split('-')?.[0] ?? '',\n                        a?.tag?.split('-')?.[0] ?? '',\n                      ) || localeCompare(a?.architecture, b?.architecture),\n                  ),\n                };\n              })\n\n              .sortBy((item) => item.displayName)\n              .value(),\n          };\n        })\n        .sortBy((item) => item.groupName)\n        .value(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [images, metadata, filter, showPrivate],\n  );\n\n  // support search image by full name\n  const { fullNameMatchedImage } = useMemo(() => {\n    let fullNameMatchedImage: Image | undefined;\n    let fullNameMatchedImageGroup:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    if (environmentSearch.length) {\n      _.chain(\n        imageGroups\n          .flatMap((group) => group.environmentGroups)\n          .find((envGroup) => {\n            fullNameMatchedImageGroup = envGroup;\n            fullNameMatchedImage = _.find(envGroup.images, (image) => {\n              return getImageFullName(image) === environmentSearch;\n            });\n            return !!fullNameMatchedImage;\n          }),\n      ).value();\n    }\n    return {\n      fullNameMatchedImage,\n      fullNameMatchedImageGroup,\n    };\n  }, [environmentSearch, imageGroups]);\n\n  return (\n    <>\n      <style>{cssRaw}</style>\n      <Form.Item\n        className=\"image-environment-select-form-item\"\n        name={['environments', 'environment']}\n        label={\n          <Typography.Text\n            copyable={{\n              text: getImageFullName(\n                form.getFieldValue(['environments', 'image']),\n              ),\n            }}\n          >\n            {t('session.launcher.Environments')} /{' '}\n            {t('session.launcher.Version')}\n          </Typography.Text>\n        }\n        rules={[\n          {\n            required: _.isEmpty(environments?.manual),\n            message: t('general.ValueRequired', {\n              name: t('session.launcher.Environments'),\n            }),\n          },\n        ]}\n        style={{ marginBottom: 10 }}\n      >\n        <Select\n          ref={envSelectRef}\n          showSearch\n          // open={true}\n          // autoClearSearchValue\n          searchValue={environmentSearch}\n          onSearch={setEnvironmentSearch}\n          defaultActiveFirstOption={true}\n          optionFilterProp=\"filterValue\"\n          onChange={(value) => {\n            if (fullNameMatchedImage) {\n              form.setFieldsValue({\n                environments: {\n                  environment:\n                    (supportExtendedImageInfo\n                      ? fullNameMatchedImage?.namespace\n                      : fullNameMatchedImage?.name) || '',\n                  version: getImageFullName(fullNameMatchedImage),\n                  image: fullNameMatchedImage,\n                },\n              });\n            }\n            // NOTE: when user set environment only then set the version to the first item\n            else {\n              const firstInListImage: Image = imageGroups\n                .flatMap((group) => group.environmentGroups)\n                .filter((envGroup) => envGroup.environmentName === value)[0]\n                .images[0];\n              form.setFieldsValue({\n                environments: {\n                  environment:\n                    (supportExtendedImageInfo\n                      ? firstInListImage?.namespace\n                      : firstInListImage?.name) || '',\n                  version: getImageFullName(firstInListImage),\n                  image: firstInListImage,\n                },\n              });\n            }\n          }}\n          disabled={\n            baiClient._config.allow_manual_image_name_for_session &&\n            !_.isEmpty(environments?.manual)\n          }\n        >\n          {fullNameMatchedImage ? (\n            <Select.Option\n              value={\n                supportExtendedImageInfo\n                  ? fullNameMatchedImage?.namespace\n                  : fullNameMatchedImage?.name\n              }\n              filterValue={getImageFullName(fullNameMatchedImage)}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"center\"\n                gap=\"xs\"\n                style={{ display: 'inline-flex' }}\n              >\n                <ImageMetaIcon\n                  image={getImageFullName(fullNameMatchedImage) || ''}\n                  style={{\n                    width: 15,\n                    height: 15,\n                  }}\n                />\n                {getImageFullName(fullNameMatchedImage)}\n              </Flex>\n            </Select.Option>\n          ) : (\n            _.map(imageGroups, (group) => {\n              return (\n                <Select.OptGroup key={group.groupName} label={group.groupName}>\n                  {_.map(group.environmentGroups, (environmentGroup) => {\n                    const firstImage = environmentGroup.images[0];\n                    const currentMetaImageInfo =\n                      metadata?.imageInfo[\n                        environmentGroup.environmentName.split('/')?.[2]\n                      ];\n\n                    const extraFilterValues: string[] = [];\n                    let environmentPrefixTag = null;\n                    if (\n                      environmentGroup.prefix &&\n                      !['lablup', 'cloud', 'stable'].includes(\n                        environmentGroup.prefix,\n                      )\n                    ) {\n                      extraFilterValues.push(environmentGroup.prefix);\n                      environmentPrefixTag = (\n                        <Tag color=\"purple\">\n                          <TextHighlighter keyword={environmentSearch}>\n                            {environmentGroup.prefix}\n                          </TextHighlighter>\n                        </Tag>\n                      );\n                    }\n\n                    const tagsFromMetaImageInfoLabel = _.map(\n                      currentMetaImageInfo?.label,\n                      (label) => {\n                        if (\n                          _.isUndefined(label.category) &&\n                          label.tag &&\n                          label.color\n                        ) {\n                          extraFilterValues.push(label.tag);\n                          return (\n                            <Tag color={label.color} key={label.tag}>\n                              <TextHighlighter\n                                keyword={environmentSearch}\n                                key={label.tag}\n                              >\n                                {label.tag}\n                              </TextHighlighter>\n                            </Tag>\n                          );\n                        }\n                        return null;\n                      },\n                    );\n                    return (\n                      <Select.Option\n                        key={environmentGroup.environmentName}\n                        value={environmentGroup.environmentName}\n                        filterValue={\n                          environmentGroup.displayName +\n                          '\\t' +\n                          extraFilterValues.join('\\t')\n                        }\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\" align=\"center\" gap=\"xs\">\n                            <ImageMetaIcon\n                              image={getImageFullName(firstImage) || ''}\n                              style={{\n                                width: 15,\n                                height: 15,\n                              }}\n                            />\n                            <TextHighlighter keyword={environmentSearch}>\n                              {environmentGroup.displayName}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            // style={{ flex: 1 }}\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {environmentPrefixTag}\n                            {tagsFromMetaImageInfoLabel}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  })}\n                </Select.OptGroup>\n              );\n            })\n          )}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prev, cur) =>\n          prev.environments?.environment !== cur.environments?.environment\n        }\n      >\n        {({ getFieldValue }) => {\n          let selectedEnvironmentGroup:\n            | ImageGroup['environmentGroups'][0]\n            | undefined;\n          _.find(imageGroups, (group) => {\n            return _.find(group.environmentGroups, (environment) => {\n              if (\n                environment.environmentName ===\n                getFieldValue('environments')?.environment\n              ) {\n                selectedEnvironmentGroup = environment;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          });\n          return (\n            <Form.Item\n              className=\"image-environment-select-form-item\"\n              name={['environments', 'version']}\n              rules={[\n                {\n                  required: _.isEmpty(environments?.manual),\n                  message: t('general.ValueRequired', {\n                    name: t('session.launcher.Version'),\n                  }),\n                },\n              ]}\n            >\n              <Select\n                ref={versionSelectRef}\n                onChange={(value) => {\n                  const selectedImage = _.find(images, (image) => {\n                    return getImageFullName(image) === value;\n                  });\n                  form.setFieldValue(['environments', 'image'], selectedImage);\n                }}\n                showSearch\n                searchValue={versionSearch}\n                onSearch={setVersionSearch}\n                // autoClearSearchValue\n                optionFilterProp=\"filterValue\"\n                // optionLabelProp=\"label\"\n                dropdownRender={(menu) => (\n                  <>\n                    <Flex\n                      style={{\n                        fontWeight: token.fontWeightStrong,\n                        paddingLeft: token.paddingSM,\n                      }}\n                    >\n                      {t('session.launcher.Version')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Architecture')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Tags')}\n                    </Flex>\n                    <Divider style={{ margin: '8px 0' }} />\n                    {menu}\n                  </>\n                )}\n                disabled={\n                  baiClient._config.allow_manual_image_name_for_session &&\n                  !_.isEmpty(environments?.manual)\n                }\n              >\n                {_.map(\n                  _.uniqBy(selectedEnvironmentGroup?.images, 'id'),\n\n                  (image) => {\n                    const [version, tag, ...requirements] = image?.tag?.split(\n                      '-',\n                    ) || ['', '', ''];\n\n                    let metadataTagAlias = metadata?.tagAlias[tag];\n                    if (!metadataTagAlias) {\n                      for (const [key, replaceString] of Object.entries(\n                        metadata?.tagReplace || {},\n                      )) {\n                        const pattern = new RegExp(key);\n                        if (pattern.test(tag)) {\n                          metadataTagAlias = tag?.replace(\n                            pattern,\n                            replaceString,\n                          );\n                        }\n                      }\n                      if (!metadataTagAlias) {\n                        metadataTagAlias = tag;\n                      }\n                    }\n\n                    const extraFilterValues: string[] = [];\n                    const requirementTags = _.chain(requirements)\n                      .filter(\n                        (requirement) => !requirement.startsWith('customized_'),\n                      )\n                      .map((requirement, idx) => (\n                        <DoubleTag\n                          key={idx}\n                          values={_.split(\n                            metadata?.tagAlias[requirement] || requirement,\n                            ':',\n                          ).map((str) => {\n                            extraFilterValues.push(str);\n                            return {\n                              label: str,\n                              highlightKeyword: versionSearch,\n                            };\n                          })}\n                        />\n                      ))\n                      .value();\n                    const imageLabels = image?.labels;\n                    if (imageLabels) {\n                      const customizedImageNameLabelIdx = _.findIndex(\n                        imageLabels,\n                        (item) =>\n                          item !== null &&\n                          item?.key === 'ai.backend.customized-image.name',\n                      );\n                      if (\n                        customizedImageNameLabelIdx &&\n                        imageLabels[customizedImageNameLabelIdx]\n                      ) {\n                        const tag =\n                          imageLabels[customizedImageNameLabelIdx]?.value || '';\n                        extraFilterValues.push('Customized');\n                        extraFilterValues.push(tag);\n                        requirementTags.push(\n                          <DoubleTag\n                            key={requirementTags.length + 1}\n                            highlightKeyword={versionSearch}\n                            values={[\n                              {\n                                label: 'Customized',\n                                color: 'cyan',\n                              },\n                              {\n                                label: tag ?? '',\n                                color: 'cyan',\n                              },\n                            ]}\n                          />,\n                        );\n                      }\n                    }\n                    return (\n                      <Select.Option\n                        key={image?.id}\n                        value={getImageFullName(image)}\n                        filterValue={[\n                          version,\n                          metadataTagAlias,\n                          image?.architecture,\n                          ...extraFilterValues,\n                        ].join('\\t')}\n                      >\n                        {supportExtendedImageInfo ? (\n                          <Flex direction=\"row\">\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.version}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.architecture}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <Flex direction=\"row\" align=\"start\">\n                              {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                              {_.map(\n                                image?.tags,\n                                (tag: { key: string; value: string }) => {\n                                  const isCustomized = _.includes(\n                                    tag.key,\n                                    'customized_',\n                                  );\n                                  const tagValue = isCustomized\n                                    ? _.find(image?.labels, {\n                                        key: 'ai.backend.customized-image.name',\n                                      })?.value\n                                    : tag.value;\n                                  const aliasedTag = tagAlias(\n                                    tag.key + tagValue,\n                                  );\n                                  return _.isEqual(\n                                    aliasedTag,\n                                    preserveDotStartCase(tag.key + tagValue),\n                                  ) || isCustomized ? (\n                                    <DoubleTag\n                                      key={tag.key}\n                                      highlightKeyword={versionSearch}\n                                      values={[\n                                        {\n                                          label: tagAlias(tag.key),\n                                          color: isCustomized ? 'cyan' : 'blue',\n                                        },\n                                        {\n                                          label: tagValue ?? '',\n                                          color: isCustomized ? 'cyan' : 'blue',\n                                        },\n                                      ]}\n                                    />\n                                  ) : (\n                                    <Tag\n                                      key={tag.key}\n                                      color={isCustomized ? 'cyan' : 'blue'}\n                                    >\n                                      <TextHighlighter keyword={versionSearch}>\n                                        {aliasedTag}\n                                      </TextHighlighter>\n                                    </Tag>\n                                  );\n                                },\n                              )}\n                            </Flex>\n                          </Flex>\n                        ) : (\n                          <Flex direction=\"row\" justify=\"between\">\n                            <Flex direction=\"row\">\n                              <TextHighlighter keyword={versionSearch}>\n                                {getBaseVersion(getImageFullName(image) || '')}\n                              </TextHighlighter>\n                              <Divider type=\"vertical\" />\n                              <TextHighlighter keyword={versionSearch}>\n                                {image?.architecture}\n                              </TextHighlighter>\n                              <Divider type=\"vertical\" />\n                              <ImageTags\n                                tag={image?.tag || ''}\n                                highlightKeyword={versionSearch}\n                                labels={\n                                  image?.labels as Array<{\n                                    key: string;\n                                    value: string;\n                                  }>\n                                }\n                              />\n                            </Flex>\n                          </Flex>\n                        )}\n                      </Select.Option>\n                    );\n                  },\n                )}\n              </Select>\n            </Form.Item>\n          );\n        }}\n      </Form.Item>\n      <Form.Item\n        label={t('session.launcher.ManualImageName')}\n        name={['environments', 'manual']}\n        style={{\n          display: baiClient._config.allow_manual_image_name_for_session\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Input\n          allowClear\n          onChange={(value) => {\n            if (!_.isEmpty(value)) {\n              form.setFieldsValue({\n                environments: {\n                  environment: undefined,\n                  version: undefined,\n                  image: undefined,\n                },\n              });\n            } else {\n            }\n          }}\n        />\n      </Form.Item>\n      <Form.Item noStyle hidden name={['environments', 'image']}>\n        <Input />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ImageEnvironmentSelectFormItems;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  alt?: string;\n}> = ({ image, style = {}, alt = '' }) => {\n  const [, { getImageIcon }] = useBackendAIImageMetaData();\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: '1em',\n        height: '1em',\n        verticalAlign: 'middle',\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","import { preserveDotStartCase } from '../helper';\nimport { useBackendAIImageMetaData } from '../hooks';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag, TagProps } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\ninterface ImageAliasNameAndBaseVersionTagsProps\n  extends Omit<DoubleTagObjectValue, 'label'> {\n  image: string | null;\n}\nexport const ImageAliasNameAndBaseVersionTags: React.FC<\n  ImageAliasNameAndBaseVersionTagsProps\n> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageAliasName, getBaseVersion, tagAlias }] =\n    useBackendAIImageMetaData();\n  return (\n    <DoubleTag\n      values={[\n        {\n          label: tagAlias(getImageAliasName(image)),\n          color: 'blue',\n        },\n        {\n          label: getBaseVersion(image),\n          color: 'green',\n        },\n      ]}\n      {...props}\n    />\n  );\n};\n\ninterface BaseVersionTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseVersionTags: React.FC<BaseVersionTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseVersion, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getBaseVersion(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseVersion(image))}\n    </Tag>\n  );\n};\n\ninterface BaseImageTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseImageTags: React.FC<BaseImageTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseImage, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getBaseImage(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseImage(image))}\n    </Tag>\n  );\n};\n\ninterface ArchitectureTagsProps extends TagProps {\n  image: string | null;\n}\nexport const ArchitectureTags: React.FC<ArchitectureTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getArchitecture, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getArchitecture(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {getArchitecture(image)}\n    </Tag>\n  );\n};\n\ninterface LangTagsProps extends TagProps {\n  image: string | null;\n}\nexport const LangTags: React.FC<LangTagsProps> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageLang, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getImageLang(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getImageLang(image))}\n    </Tag>\n  );\n};\n\ninterface ConstraintTagsProps extends TagProps {\n  tag: string;\n  labels: { key: string; value: string }[];\n  highlightKeyword?: string;\n}\nexport const ConstraintTags: React.FC<ConstraintTagsProps> = ({\n  tag,\n  labels,\n  highlightKeyword,\n  ...props\n}) => {\n  labels = labels || [];\n  const [, { getConstraints }] = useBackendAIImageMetaData();\n  const constraints = getConstraints(tag, labels);\n  return (\n    <Flex direction=\"row\" align=\"start\">\n      {!_.isEmpty(constraints?.[0]) ? (\n        <Tag color=\"blue\" {...props}>\n          <TextHighlighter keyword={highlightKeyword}>\n            {constraints[0]}\n          </TextHighlighter>\n        </Tag>\n      ) : null}\n      {!_.isEmpty(constraints?.[1]) ? (\n        <DoubleTag\n          color=\"cyan\"\n          highlightKeyword={highlightKeyword}\n          values={[\n            {\n              label: 'Customized',\n              color: 'cyan',\n            },\n            {\n              label: constraints[1],\n              color: 'cyan',\n            },\n          ]}\n          {...props}\n        />\n      ) : null}\n    </Flex>\n  );\n};\n\nconst SessionKernelTags: React.FC<{\n  image: string | null;\n  border?: boolean;\n}> = ({ image }) => {\n  image = image || '';\n  return (\n    <>\n      <ImageAliasNameAndBaseVersionTags image={image} />\n      <BaseImageTags image={image} />\n      <ArchitectureTags image={image} />\n    </>\n  );\n};\n\nexport default React.memo(SessionKernelTags);\n\ninterface ImageTagsProps extends TagProps {\n  tag: string;\n  labels: Array<{ key: string; value: string }>;\n  highlightKeyword?: string;\n}\nexport const ImageTags: React.FC<ImageTagsProps> = ({\n  tag,\n  labels,\n  highlightKeyword,\n  ...props\n}) => {\n  labels = labels || [];\n  const [, { getTags, tagAlias }] = useBackendAIImageMetaData();\n  const tags = getTags(tag, labels);\n  return (\n    <React.Fragment {...props}>\n      {_.map(tags, (tag: { key: string; value: string }, index) => {\n        const isCustomized = tag.key === 'Customized';\n        const aliasedTag = tagAlias(tag.key + tag.value);\n        return _.isEqual(\n          aliasedTag,\n          preserveDotStartCase(tag.key + tag.value),\n        ) ? (\n          <DoubleTag\n            key={tag.key}\n            highlightKeyword={highlightKeyword}\n            values={[\n              {\n                label: tagAlias(tag.key),\n                color: isCustomized ? 'cyan' : 'blue',\n              },\n              {\n                label: tag.value,\n                color: isCustomized ? 'cyan' : 'blue',\n              },\n            ]}\n          />\n        ) : (\n          <Tag key={tag.key} color={isCustomized ? 'cyan' : 'blue'}>\n            <TextHighlighter keyword={highlightKeyword} key={index}>\n              {aliasedTag}\n            </TextHighlighter>\n          </Tag>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n","import { VFolderPermissionTag_VFolder$key } from '../__generated__/VFolderPermissionTag_VFolder.graphql';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport _ from 'lodash';\nimport React from 'react';\nimport { graphql, useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { VFolderTableProjectQuery } from '../__generated__/VFolderTableProjectQuery.graphql';\nimport { useBaiSignedRequestWithPromise } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useKeyPairLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport UserUnionIcon from './BAIIcons/UserUnionIcon';\nimport BAILink from './BAILink';\nimport Flex from './Flex';\nimport FolderCreateModal from './FolderCreateModal';\nimport { useFolderExplorerOpener } from './FolderExplorerOpener';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Descriptions,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tag,\n  theme,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { PlusIcon } from 'lucide-react';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  useTransition,\n} from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\nexport interface VFolderTableProps extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n  onChangeAutoMountedFolders?: (names: Array<string>) => void;\n  showAutoMountedFoldersSection?: boolean;\n  ownerEmail?: string;\n}\n\nexport const vFolderAliasNameRegExp = /^[a-zA-Z0-9_/.-]*$/;\nexport const DEFAULT_ALIAS_BASE_PATH = '/home/work/';\nconst VFolderTable: React.FC<VFolderTableProps> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = DEFAULT_ALIAS_BASE_PATH,\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  onChangeAutoMountedFolders,\n  showAutoMountedFoldersSection,\n  ownerEmail,\n  ...tableProps\n}) => {\n  const { generateFolderPath } = useFolderExplorerOpener();\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [isOpenCreateModal, setIsOpenCreateModal] = useState(false);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableState<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableState<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useSuspenseTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey, currentProject.id, ownerEmail],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      // FIXME: filter by group_id does not work\n      // search.set('group_id', currentProject.id);\n      ownerEmail && search.set('owner_user_email', ownerEmail);\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?${search.toString()}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 1000,\n  });\n\n  const { domain, group, keypair_resource_policy } =\n    useLazyLoadQuery<VFolderTableProjectQuery>(\n      graphql`\n        query VFolderTableProjectQuery(\n          $domain_name: String!\n          $group_id: UUID!\n          $keypair_resource_policy_name: String!\n        ) {\n          domain(name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          group(id: $group_id, domain_name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          keypair_resource_policy(name: $keypair_resource_policy_name) {\n            allowed_vfolder_hosts\n          }\n        }\n      `,\n      {\n        domain_name: baiClient._config.domainName,\n        group_id: currentProject.id,\n        keypair_resource_policy_name: keypair?.resource_policy || '',\n      },\n      {\n        fetchPolicy: 'store-and-network',\n        fetchKey: fetchKey,\n      },\n    );\n\n  const filteredFolderList = useMemo(() => {\n    const allowedVFolderHostsByDomain = JSON.parse(\n      domain?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByGroup = JSON.parse(\n      group?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByKeypairResourcePolicy = JSON.parse(\n      keypair_resource_policy?.allowed_vfolder_hosts || '{}',\n    );\n\n    const mergedVFolderPermissions = _.merge(\n      {}, // start with empty object\n      allowedVFolderHostsByDomain,\n      allowedVFolderHostsByGroup,\n      allowedVFolderHostsByKeypairResourcePolicy,\n    );\n    // only allow mount if volume permission has 'mount-in-session'\n    const mountAllowedVolumes = Object.keys(mergedVFolderPermissions).filter(\n      (volume) => mergedVFolderPermissions[volume].includes('mount-in-session'),\n    );\n    // Need to filter allFolderList from allowed vfolder\n    const filteredFolderListByPermission = allFolderList?.filter((folder) =>\n      mountAllowedVolumes.includes(folder.host),\n    );\n    const filteredFolderListByPermissionAndProject = _.filter(\n      filteredFolderListByPermission,\n      (folder) =>\n        folder.ownership_type === 'user' ||\n        !folder.group ||\n        folder.group === currentProject.id,\n    );\n    return filteredFolderListByPermissionAndProject;\n  }, [\n    domain,\n    group,\n    keypair_resource_policy,\n    allFolderList,\n    currentProject.id,\n  ]);\n\n  const autoMountedFolderNamesByPermission = useMemo(\n    () =>\n      _.chain(filteredFolderList)\n        .filter((vf) => vf.status === 'ready' && vf.name?.startsWith('.'))\n        .map((vf) => vf.name)\n        .value(),\n    [filteredFolderList],\n  );\n\n  useEffect(() => {\n    _.isFunction(onChangeAutoMountedFolders) &&\n      onChangeAutoMountedFolders(autoMountedFolderNamesByPermission);\n    // Do not need to run when `autoMountedFolderNames` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoMountedFolderNamesByPermission]);\n\n  useEffect(() => {\n    setSelectedRowKeys([]);\n    // Reset selectedRowKeys when currentProject changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentProject.id]);\n\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.chain(filteredFolderList)\n    .filter((vf) => (filter ? filter(vf) : true))\n    .filter((vf) => {\n      if (selectedRowKeys.includes(getRowKey(vf))) {\n        return true;\n      }\n      return !searchKey || vf.name.includes(searchKey);\n    })\n    .value();\n\n  /**\n   * Converts the input path to an aliased path based on the provided name and input.\n   * If the input is empty, it appends the name to the alias base path.\n   * If the input starts with '/', it returns the input as is.\n   * Otherwise, it appends the input to the alias base path.\n   *\n   * @param name - The name of the VFolderKey.\n   * @param input - The input path to be converted.\n   * @returns The aliased path based on the name and input.\n   */\n  const inputToAliasPath = useCallback(\n    (name: VFolderKey, input?: string) => {\n      if (input === undefined || input === '') {\n        return `${aliasBasePath}${name}`;\n      } else if (input.startsWith('/')) {\n        return input;\n      } else {\n        return `${aliasBasePath}${input}`;\n      }\n    },\n    [aliasBasePath],\n  );\n\n  const handleAliasUpdate = useEventNotStable(() => {\n    setAliasMap(\n      _.mapValues(\n        _.pickBy(internalForm.getFieldsValue({ strict: false }), (v) => !!v), //remove empty\n        (v, k) => inputToAliasPath(k, v), // add alias base path\n      ),\n    );\n    internalForm.validateFields().catch(() => {});\n  });\n\n  useEffect(() => {\n    handleAliasUpdate();\n    // `selectedRowKeys` can be changed by parents at any time, so we need to check whether `selectedRowKeys` has changed using JSON.stringify\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(selectedRowKeys), handleAliasUpdate]);\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"start\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : {\n                    maxWidth: 200,\n                  }\n            }\n          >\n            <BAILink type=\"hover\" to={generateFolderPath(record.id)}>\n              <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            </BAILink>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || inputToAliasPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: vFolderAliasNameRegExp,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    inputToAliasPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            const aliasPath = inputToAliasPath(\n                              getRowKey(record),\n                              value,\n                            );\n                            if (\n                              value &&\n                              _.map(\n                                autoMountedFolderNamesByPermission,\n                                // `n` is the name of the auto mounted folder. It cannot be empty.\n                                (n) => inputToAliasPath('', n),\n                              ).includes(aliasPath)\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.FolderAliasOverlappingToAutoMount',\n                                ),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={inputToAliasPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        allowClear\n                        onChange={() => {\n                          handleAliasUpdate();\n                        }}\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (_, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.ownership_type === 'user' ? (\n              <Flex gap={'xs'}>\n                <Typography.Text>{t('data.User')}</Typography.Text>\n                <UserOutlined style={{ color: token.colorTextTertiary }} />\n              </Flex>\n            ) : (\n              <Flex gap={'xs'}>\n                <Typography.Text>{t('data.Project')}</Typography.Text>\n                <UserUnionIcon style={{ color: token.colorTextTertiary }} />\n              </Flex>\n            )}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n      defaultSortOrder: 'descend',\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingRefetch}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startRefetchTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n        <Tooltip title={t('data.CreateANewStorageFolder')}>\n          <Button\n            icon={<PlusIcon />}\n            type=\"primary\"\n            ghost\n            onClick={() => {\n              setIsOpenCreateModal(true);\n            }}\n          />\n        </Tooltip>\n      </Flex>\n      <Form form={internalForm} component={false} preserve={false}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n      {showAutoMountedFoldersSection &&\n      autoMountedFolderNamesByPermission.length > 0 ? (\n        <>\n          <Descriptions size=\"small\">\n            <Descriptions.Item label={t('data.AutomountFolders')}>\n              {_.map(autoMountedFolderNamesByPermission, (name) => {\n                return <Tag key={name}>{name}</Tag>;\n              })}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ) : null}\n      <FolderCreateModal\n        open={isOpenCreateModal}\n        onRequestClose={(result) => {\n          setIsOpenCreateModal(false);\n          if (result) {\n            startRefetchTransition(() => {\n              updateFetchKey();\n              setSelectedRowKeys((x) => [\n                ...x,\n                // @ts-ignore\n                result[rowKey],\n              ]);\n            });\n          }\n        }}\n      />\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import { VFolder } from './VFolderSelect';\nimport VFolderTable, {\n  AliasMap,\n  DEFAULT_ALIAS_BASE_PATH,\n  VFolderTableProps,\n  vFolderAliasNameRegExp,\n} from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFormItemProps extends Omit<FormItemProps, 'name'> {\n  filter?: VFolderTableProps['filter'];\n  rowKey?: keyof VFolder;\n  tableProps?: Partial<VFolderTableProps>;\n}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n  autoMountedFolderNames?: string[];\n}\n\nconst VFolderTableFormItem: React.FC<VFolderTableFormItemProps> = ({\n  filter,\n  rowKey = 'name',\n  tableProps,\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              if (_.some(arr, (alias) => !vFolderAliasNameRegExp.test(alias))) {\n                return Promise.reject(t('session.launcher.FolderAliasInvalid'));\n              }\n\n              if (\n                _.some(\n                  form.getFieldValue('autoMountedFolderNames'),\n                  (autoName) =>\n                    arr.includes(DEFAULT_ALIAS_BASE_PATH + autoName),\n                )\n              ) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlappingToAutoMount'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item hidden name=\"autoMountedFolderNames\" />\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          key={tableProps?.ownerEmail}\n          rowKey={rowKey}\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n          filter={filter}\n          showAutoMountedFoldersSection\n          onChangeAutoMountedFolders={(names) => {\n            form.setFieldValue('autoMountedFolderNames', names);\n          }}\n          {...tableProps}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFormItem;\n"],"names":["node","v0","v1","v2","v3","hash","sensitivePatterns","sanitizeSensitiveEnv","envs","_","env","key","variable","some","pattern","test","value","_ref","formItemProps","props","inputRef","useRef","t","useTranslation","form","Form","useFormInstance","_jsx","List","children","fields","_ref2","add","remove","_jsxs","Flex","direction","gap","align","map","_ref3","index","name","restField","Item","style","marginBottom","flex","rules","required","message","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","length","Promise","reject","resolve","Input","ref","placeholder","onChange","fieldNames","field","validateFields","validateTrigger","MinusCircleOutlined","onClick","noStyle","Button","type","setTimeout","current","focus","icon","PlusOutlined","block","_baiClient$_config","filter","showPrivate","environments","useWatch","preserve","baiClient","useSuspendedBackendaiClient","supportExtendedImageInfo","supports","environmentSearch","setEnvironmentSearch","useState","versionSearch","setVersionSearch","metadata","getBaseVersion","getImageMeta","tagAlias","useBackendAIImageMetaData","token","theme","useToken","isDarkMode","useThemeMode","envSelectRef","versionSelectRef","imageEnvironmentSelectFormItemsVariables","_config","showNonInstalledImages","installed","images","useLazyLoadQuery","_ImageEnvironmentSelectFormItemsQuery","require","fetchPolicy","useEffect","_form$getFieldValue","_$find","_nextImage","manual","environment","version","setFieldsValue","undefined","image","matchedEnvironmentByVersion","matchedImageByVersion","nextEnvironment","nextImage","_imageGroups$","_nextEnvironment2","indexOf","imageGroups","group","environmentGroups","getImageFullName","_nextEnvironment","environmentName","customizedImageTag","labels","item","allow_manual_image_name_for_session","customizedTag","setFieldValue","useMemo","label","_label$value","split","includes","isPrivateImage","groupBy","_metadata$imageInfo$g","imageInfo","groupName","registry","namespace","_environmentName$spli","_metadata$imageInfo$i","imageKey","displayName","prefix","drop","dropRight","join","sort","a","b","_b$tag$split$","_b$tag","_b$tag$split","_a$tag$split$","_a$tag","_a$tag$split","version1","version2","Number","Math","max","num1","num2","compareVersions","tag","localeCompare","architecture","sortBy","fullNameMatchedImage","fullNameMatchedImageGroup","flatMap","find","envGroup","_Fragment","className","Typography","Text","copyable","text","Select","showSearch","searchValue","onSearch","defaultActiveFirstOption","optionFilterProp","firstInListImage","disabled","Option","filterValue","display","ImageMetaIcon","width","height","OptGroup","environmentGroup","_environmentGroup$env","firstImage","currentMetaImageInfo","extraFilterValues","environmentPrefixTag","push","Tag","color","TextHighlighter","keyword","tagsFromMetaImageInfoLabel","category","justify","marginLeft","marginXS","flexShrink","shouldUpdate","prev","cur","_prev$environments","_cur$environments","_selectedEnvironmentG","selectedEnvironmentGroup","_getFieldValue","selectedImage","dropdownRender","menu","fontWeight","fontWeightStrong","paddingLeft","paddingSM","Divider","margin","_image$tag","requirements","metadataTagAlias","replaceString","Object","entries","tagReplace","RegExp","replace","requirementTags","requirement","startsWith","idx","DoubleTag","values","str","highlightKeyword","imageLabels","customizedImageNameLabelIdx","_imageLabels$customiz","tags","_$find2","isCustomized","tagValue","aliasedTag","preserveDotStartCase","ImageTags","id","allowClear","hidden","alt","getImageIcon","src","verticalAlign","React","ImageAliasNameAndBaseVersionTags","getImageAliasName","BaseImageTags","getBaseImage","ArchitectureTags","getArchitecture","SessionKernelTags","_ref7","_ref8","getTags","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","tagValues","r","w","d","perm","hasPermission","toUpperCase","compact","vFolderAliasNameRegExp","DEFAULT_ALIAS_BASE_PATH","showAliasInput","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","aliasBasePath","aliasMap","controlledAliasMap","onChangeAliasMap","rowKey","onChangeAutoMountedFolders","showAutoMountedFoldersSection","ownerEmail","tableProps","generateFolderPath","useFolderExplorerOpener","getRowKey","record","isOpenCreateModal","setIsOpenCreateModal","setSelectedRowKeys","useControllableState","defaultValue","setAliasMap","keypair","useKeyPairLazyLoadQuery","accessKey","internalForm","useForm","v","slice","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","fetchKey","updateFetchKey","useUpdatableState","isPendingRefetch","startRefetchTransition","useTransition","data","allFolderList","useSuspenseTanQuery","queryKey","queryFn","search","URLSearchParams","set","method","url","toString","staleTime","domain","keypair_resource_policy","_VFolderTableProjectQuery","domain_name","domainName","group_id","keypair_resource_policy_name","resource_policy","filteredFolderList","allowedVFolderHostsByDomain","JSON","parse","allowed_vfolder_hosts","allowedVFolderHostsByGroup","allowedVFolderHostsByKeypairResourcePolicy","mergedVFolderPermissions","mountAllowedVolumes","keys","volume","filteredFolderListByPermission","folder","host","ownership_type","autoMountedFolderNamesByPermission","vf","_vf$name","status","searchKey","setSearchKey","displayingFolders","inputToAliasPath","useCallback","input","handleAliasUpdate","useEventNotStable","getFieldsValue","strict","k","catch","stringify","columns","title","Tooltip","Trans","i18nKey","QuestionCircleOutlined","dataIndex","sorter","render","isCurrentRowSelected","maxWidth","BAILink","to","allAliasPathMap","reduce","result","async","path","aliasPath","n","extra","e","stopPropagation","usage_mode","UserOutlined","colorTextTertiary","UserUnionIcon","row","VFolderPermissionTag","created_at","dayjs","format","defaultSortOrder","target","loading","ReloadOutlined","PlusIcon","ghost","component","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","Descriptions","size","FolderCreateModal","open","onRequestClose","arr","alias","autoName","valuePropName","trigger","VFolderTable","pagination","names"],"sourceRoot":""}