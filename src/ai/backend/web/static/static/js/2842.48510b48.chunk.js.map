{"version":3,"file":"static/js/2842.48510b48.chunk.js","mappings":"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","sources":["hooks/useIntervalValue.tsx","components/BAIIntervalText.tsx","components/BAIProgressWithLabel.tsx","components/DoubleTag.tsx","components/ResourceNumber.tsx","components/TableColumnsSettingModal.tsx","components/__generated__/AgentDetailModalFragment.graphql.ts","components/__generated__/AgentListQuery.graphql.ts","components/__generated__/AgentSettingModalFragment.graphql.ts","components/__generated__/AgentSettingModalMutation.graphql.ts","components/AgentDetailModal.tsx","components/AgentSettingModal.tsx","components/BAIPropertyFilter.tsx","components/AgentList.tsx","hooks/reactPaginationQueryOptions.tsx","pages/ResourcesPage.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/**\n * Custom hook that executes a callback function at a specified interval.\n *\n * @param callback The function to be executed at the specified interval.\n * @param delay The delay (in milliseconds) between each execution of the callback function. If `null`, the interval is cleared(pause).\n */\nexport function useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef<() => any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current?.();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n/**\n * Custom hook that provides a value updated at a specified interval.\n *\n * @param calculator - A function that calculates the value.\n * @param delay - The delay in milliseconds between updates.\n * @param triggerKey - An optional key that triggers an immediate update when changed.\n * @returns The updated value.\n */\nexport const useIntervalValue = (\n  calculator: () => any,\n  delay: number,\n  triggerKey?: string,\n) => {\n  const [result, setResult] = useState(calculator());\n\n  useEffect(() => {\n    if (triggerKey) {\n      setResult(calculator());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [triggerKey]);\n\n  useInterval(() => {\n    const newResult = calculator();\n    if (newResult !== result) setResult(newResult);\n  }, delay);\n\n  return result;\n};\n","import { useIntervalValue } from '../hooks/useIntervalValue';\nimport React from 'react';\n\nconst BAIIntervalText: React.FC<{\n  callback: () => any;\n  delay: number;\n  triggerKey?: string;\n}> = ({ callback, delay, triggerKey }) => {\n  const value = useIntervalValue(callback, delay, triggerKey);\n  return value;\n};\n\nexport default BAIIntervalText;\n","import Flex from './Flex';\nimport { Typography, theme } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface BAIProgressWithLabelProps {\n  title?: React.ReactNode;\n  valueLabel?: React.ReactNode;\n  percent?: number;\n  width?: React.CSSProperties['width'];\n  strokeColor?: string;\n  labelStyle?: React.CSSProperties;\n  size?: 'small' | 'middle' | 'large';\n}\nconst BAIProgressWithLabel: React.FC<BAIProgressWithLabelProps> = ({\n  title,\n  valueLabel,\n  percent = 0,\n  width,\n  strokeColor,\n  labelStyle,\n  size = 'small',\n}) => {\n  const { token } = theme.useToken();\n\n  const fontSize =\n    size === 'small'\n      ? token.fontSizeSM\n      : size === 'middle'\n        ? token.fontSize\n        : token.fontSizeLG;\n  return (\n    <Flex\n      style={{\n        padding: 1,\n        border: `1px solid ${token.colorBorder}`,\n        borderRadius: 3,\n        backgroundColor: token.colorBgContainerDisabled,\n        ...(_.isNumber(width) || _.isString(width)\n          ? { width: width }\n          : { flex: 1 }),\n      }}\n      direction=\"column\"\n      align=\"stretch\"\n    >\n      <Flex\n        style={{\n          height: '100%',\n          width: `${percent}%`,\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          backgroundColor: strokeColor ?? token.colorSuccess,\n          opacity: 0.7,\n          zIndex: 0,\n          overflow: 'hidden',\n        }}\n      ></Flex>\n      <Flex direction=\"row\" justify=\"between\">\n        <Typography.Text style={{ fontSize, ...labelStyle }}>\n          {title}\n        </Typography.Text>\n        <Typography.Text style={{ fontSize, ...labelStyle }}>\n          {valueLabel}\n        </Typography.Text>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default BAIProgressWithLabel;\n","import Flex from './Flex';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: ValueType;\n  color?: string;\n};\n\ntype ValueType = string | React.ReactNode;\nconst DoubleTag: React.FC<{\n  values?: ValueType[] | DoubleTagObjectValue[];\n}> = ({ values = [] }) => {\n  if (values.length === 0) return null;\n  let objectValues: DoubleTagObjectValue[];\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) => {\n        return (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {objValue.label}\n          </Tag>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","import { iSizeToSize } from '../helper';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport { useCurrentResourceGroupValue } from '../hooks/useCurrentProject';\nimport Flex from './Flex';\nimport { Tooltip, Typography, theme } from 'antd';\nimport React, { ReactElement } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const ACCELERATOR_UNIT_MAP: {\n  [key: string]: string;\n} = {\n  'cuda.device': 'GPU',\n  'cuda.shares': 'FGPU',\n  'rocm.device': 'GPU',\n  'tpu.device': 'TPU',\n  'ipu.device': 'IPU',\n  'atom.device': 'ATOM',\n  'atom-plus.device': 'ATOM+',\n  'warboy.device': 'Warboy',\n  'hyperaccel-lpu.device': 'Hyperaccel LPU',\n};\n\nexport type ResourceOpts = {\n  shmem?: number;\n};\ninterface ResourceNumberProps {\n  type: string;\n  extra?: ReactElement;\n  opts?: ResourceOpts;\n  value: string;\n  hideTooltip?: boolean;\n}\n\ntype ResourceTypeInfo<V> = {\n  [key in string]: V;\n};\nconst ResourceNumber: React.FC<ResourceNumberProps> = ({\n  type,\n  value: amount,\n  extra,\n  opts,\n  hideTooltip = false,\n}) => {\n  const { token } = theme.useToken();\n  const currentGroup = useCurrentResourceGroupValue();\n  const [resourceSlotsDetails] = useResourceSlotsDetails(\n    currentGroup || undefined,\n  );\n\n  return (\n    <Flex direction=\"row\" gap=\"xxs\">\n      {resourceSlotsDetails?.[type] ? (\n        <ResourceTypeIcon type={type} showTooltip={!hideTooltip} />\n      ) : (\n        type\n      )}\n\n      <Typography.Text>\n        {resourceSlotsDetails?.[type]?.number_format.binary\n          ? Number(iSizeToSize(amount, 'g', 3, true)?.numberFixed).toString()\n          : (resourceSlotsDetails?.[type]?.number_format.round_length || 0) > 0\n            ? parseFloat(amount).toFixed(2)\n            : amount}\n      </Typography.Text>\n      <Typography.Text type=\"secondary\">\n        {resourceSlotsDetails?.[type]?.display_unit || ''}\n      </Typography.Text>\n      {type === 'mem' && opts?.shmem && opts?.shmem > 0 ? (\n        <Typography.Text\n          type=\"secondary\"\n          style={{ fontSize: token.fontSizeSM }}\n        >\n          (SHM: {iSizeToSize(opts.shmem + 'b', 'g', 2, true)?.numberFixed}\n          GiB)\n        </Typography.Text>\n      ) : null}\n      {extra}\n    </Flex>\n  );\n};\n\nconst MWCIconWrap: React.FC<{ size?: number; children: string }> = ({\n  size = 16,\n  children,\n}) => {\n  return (\n    // @ts-ignore\n    <mwc-icon\n      style={{\n        '--mdc-icon-size': `${size + 2}px`,\n        width: size,\n        height: size,\n      }}\n    >\n      {children}\n      {/* @ts-ignore */}\n    </mwc-icon>\n  );\n};\ninterface AccTypeIconProps\n  extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'src'> {\n  type: string;\n  showIcon?: boolean;\n  showUnit?: boolean;\n  showTooltip?: boolean;\n  size?: number;\n}\nexport const ResourceTypeIcon: React.FC<AccTypeIconProps> = ({\n  type,\n  size = 16,\n  showIcon = true,\n  showUnit = true,\n  showTooltip = true,\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const resourceTypeIconSrcMap: ResourceTypeInfo<\n    [ReactElement | string, string]\n  > = {\n    cpu: [\n      <MWCIconWrap size={size}>developer_board</MWCIconWrap>,\n      t('session.core'),\n    ],\n    mem: [<MWCIconWrap size={size}>memory</MWCIconWrap>, 'GiB'],\n    'cuda.device': ['/resources/icons/file_type_cuda.svg', 'GPU'],\n    'cuda.shares': ['/resources/icons/file_type_cuda.svg', 'FGPU'],\n    'rocm.device': ['/resources/icons/rocm.svg', 'GPU'],\n    'tpu.device': [<MWCIconWrap size={size}>view_module</MWCIconWrap>, 'TPU'],\n    'ipu.device': [<MWCIconWrap size={size}>view_module</MWCIconWrap>, 'IPU'],\n    'atom.device': ['/resources/icons/rebel.svg', 'ATOM'],\n    'atom-plus.device': ['/resources/icons/rebel.svg', 'ATOM'],\n    'warboy.device': ['/resources/icons/furiosa.svg', 'Warboy'],\n    'hyperaccel-lpu.device': [\n      '/resources/icons/npu_generic.svg',\n      'Hyperaccel LPU',\n    ],\n  };\n\n  const content =\n    typeof resourceTypeIconSrcMap[type]?.[0] === 'string' ? (\n      <img\n        {...props}\n        style={{\n          height: size,\n          alignSelf: 'center',\n          ...(props.style || {}),\n        }}\n        // @ts-ignore\n        src={resourceTypeIconSrcMap[type]?.[0] || ''}\n        alt={type}\n      />\n    ) : (\n      <Flex style={{ width: 16, height: 16 }}>\n        {resourceTypeIconSrcMap[type]?.[0] || type}\n      </Flex>\n    );\n\n  return showTooltip ? (\n    // <Tooltip title={showTooltip ? `${type} (${resourceTypeIconSrcMap[type][1]})` : undefined}>\n    <Tooltip title={type}>{content}</Tooltip>\n  ) : (\n    <Flex style={{ pointerEvents: 'none' }}>{content}</Flex>\n  );\n};\n\nexport default ResourceNumber;\n","import BAIModal, { BAIModalProps } from './BAIModal';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Checkbox, Input, theme, Form } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { FormInstance } from 'antd/lib';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface FormValues {\n  searchInput?: string;\n  selectedColumnKeys?: string[];\n}\n\ninterface TableColumnsSettingProps extends BAIModalProps {\n  open: boolean;\n  onRequestClose: (formValues?: FormValues) => void;\n  columns: ColumnsType<any>;\n  displayedColumnKeys?: string[];\n}\n\nconst TableColumnsSettingModal: React.FC<TableColumnsSettingProps> = ({\n  open,\n  onRequestClose,\n  columns,\n  displayedColumnKeys,\n  ...modalProps\n}) => {\n  const formRef = useRef<FormInstance>(null);\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const onChangeTitleToString: any = (element: any) => {\n    const text = React.Children.map(element.props.children, (child) => {\n      if (typeof child === 'string') {\n        return child;\n      }\n    });\n    return text;\n  };\n\n  const columnOptions = columns.map((column) => {\n    if (typeof column.title === 'string') {\n      return {\n        label: column.title,\n        value: _.toString(column.key),\n      };\n    } else if (typeof column.title === 'object' && 'props' in column.title!) {\n      return {\n        label: onChangeTitleToString(column.title),\n        value: _.toString(column.key),\n      };\n    } else {\n      return {\n        label: undefined,\n        value: _.toString(column.key),\n      };\n    }\n  });\n\n  return (\n    <BAIModal\n      title={t('table.SettingTable')}\n      open={open}\n      destroyOnClose\n      centered\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            onRequestClose(values);\n          })\n          .catch(() => {});\n      }}\n      onCancel={() => {\n        onRequestClose();\n      }}\n      {...modalProps}\n    >\n      <Form\n        ref={formRef}\n        preserve={false}\n        initialValues={{\n          selectedColumnKeys:\n            displayedColumnKeys ||\n            columnOptions.map((columnOption) => columnOption.value),\n        }}\n        layout=\"vertical\"\n      >\n        <Form.Item\n          name=\"searchInput\"\n          label={t('table.SelectColumnToDisplay')}\n          style={{ marginBottom: 0 }}\n        >\n          <Input\n            prefix={<SearchOutlined />}\n            style={{ marginBottom: token.marginSM }}\n            placeholder={t('table.SearchTableColumn')}\n          />\n        </Form.Item>\n        <Form.Item\n          noStyle\n          shouldUpdate={(prev, cur) => prev.searchInput !== cur.searchInput}\n        >\n          {({ getFieldValue }) => {\n            const searchKeyword = getFieldValue('searchInput')\n              ? _.toLower(getFieldValue('searchInput'))\n              : undefined;\n\n            const filteredColumns = columnOptions.map((columnOption) =>\n              _.toLower(_.toString(columnOption.label)).includes(\n                searchKeyword || '',\n              )\n                ? columnOption\n                : {\n                    ...columnOption,\n                    style: {\n                      display: 'none',\n                    },\n                  },\n            );\n            return (\n              <Form.Item\n                name=\"selectedColumnKeys\"\n                style={{\n                  height: 220,\n                  overflowY: 'auto',\n                }}\n              >\n                <Checkbox.Group\n                  options={filteredColumns}\n                  style={{ flexDirection: 'column' }}\n                />\n              </Form.Item>\n            );\n          }}\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default TableColumnsSettingModal;\n","/**\n * @generated SignedSource<<2796155fedeb40412166a76259c55ca6>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentDetailModalFragment$data = {\n  readonly available_slots: any | null | undefined;\n  readonly cpu_cur_pct: number | null | undefined;\n  readonly id: string | null | undefined;\n  readonly live_stat: any | null | undefined;\n  readonly mem_cur_bytes: number | null | undefined;\n  readonly occupied_slots: any | null | undefined;\n  readonly \" $fragmentType\": \"AgentDetailModalFragment\";\n};\nexport type AgentDetailModalFragment$key = {\n  readonly \" $data\"?: AgentDetailModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AgentDetailModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"AgentDetailModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"live_stat\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"available_slots\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"occupied_slots\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"cpu_cur_pct\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"mem_cur_bytes\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Agent\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"cb343a0290034803cca4c2b82a1c1b68\";\n\nexport default node;\n","/**\n * @generated SignedSource<<92f50ef84935f6f078315999b308de3f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentListQuery$variables = {\n  filter?: string | null | undefined;\n  limit: number;\n  offset: number;\n  order?: string | null | undefined;\n  status?: string | null | undefined;\n};\nexport type AgentListQuery$data = {\n  readonly agent_list: {\n    readonly items: ReadonlyArray<{\n      readonly addr: string | null | undefined;\n      readonly architecture: string | null | undefined;\n      readonly available_slots: any | null | undefined;\n      readonly compute_plugins: any | null | undefined;\n      readonly cpu_cur_pct: number | null | undefined;\n      readonly first_contact: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly live_stat: any | null | undefined;\n      readonly lost_at: string | null | undefined;\n      readonly mem_cur_bytes: number | null | undefined;\n      readonly occupied_slots: any | null | undefined;\n      readonly region: string | null | undefined;\n      readonly scaling_group: string | null | undefined;\n      readonly schedulable: boolean | null | undefined;\n      readonly status: string | null | undefined;\n      readonly status_changed: string | null | undefined;\n      readonly version: string | null | undefined;\n      readonly \" $fragmentSpreads\": FragmentRefs<\"AgentDetailModalFragment\" | \"AgentSettingModalFragment\">;\n    } | null | undefined>;\n    readonly total_count: number;\n  } | null | undefined;\n};\nexport type AgentListQuery = {\n  response: AgentListQuery$data;\n  variables: AgentListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"order\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv5 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"filter\",\n    \"variableName\": \"filter\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"limit\",\n    \"variableName\": \"limit\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"offset\",\n    \"variableName\": \"offset\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"order\",\n    \"variableName\": \"order\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"status\",\n    \"variableName\": \"status\"\n  }\n],\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"version\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"addr\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"region\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"compute_plugins\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"first_contact\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"lost_at\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status_changed\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"live_stat\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"cpu_cur_pct\",\n  \"storageKey\": null\n},\nv18 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mem_cur_bytes\",\n  \"storageKey\": null\n},\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"available_slots\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"occupied_slots\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"scaling_group\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"schedulable\",\n  \"storageKey\": null\n},\nv23 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"total_count\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v5/*: any*/),\n        \"concreteType\": \"AgentList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"agent_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Agent\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/),\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"AgentDetailModalFragment\"\n              },\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"AgentSettingModalFragment\"\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v23/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v0/*: any*/),\n      (v4/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"AgentListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v5/*: any*/),\n        \"concreteType\": \"AgentList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"agent_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Agent\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          (v23/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"e1a551c0261ce59a4b187a3bbb29b86b\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AgentListQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $filter: String\\n  $status: String\\n  $order: String\\n) {\\n  agent_list(limit: $limit, offset: $offset, filter: $filter, status: $status, order: $order) {\\n    items {\\n      id\\n      status\\n      version\\n      addr\\n      architecture\\n      region\\n      compute_plugins\\n      first_contact\\n      lost_at\\n      status_changed\\n      live_stat\\n      cpu_cur_pct\\n      mem_cur_bytes\\n      available_slots\\n      occupied_slots\\n      scaling_group\\n      schedulable\\n      ...AgentDetailModalFragment\\n      ...AgentSettingModalFragment\\n    }\\n    total_count\\n  }\\n}\\n\\nfragment AgentDetailModalFragment on Agent {\\n  id\\n  live_stat\\n  available_slots\\n  occupied_slots\\n  cpu_cur_pct\\n  mem_cur_bytes\\n}\\n\\nfragment AgentSettingModalFragment on Agent {\\n  id\\n  schedulable\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"1d6c6a390aad71e4b7815a623ca61d86\";\n\nexport default node;\n","/**\n * @generated SignedSource<<e60efd5db04654b6c305eb8717640c79>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AgentSettingModalFragment$data = {\n  readonly id: string | null | undefined;\n  readonly schedulable: boolean | null | undefined;\n  readonly \" $fragmentType\": \"AgentSettingModalFragment\";\n};\nexport type AgentSettingModalFragment$key = {\n  readonly \" $data\"?: AgentSettingModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AgentSettingModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"AgentSettingModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"schedulable\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Agent\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"303f8ee06508c3b28511ab1a24a305d5\";\n\nexport default node;\n","/**\n * @generated SignedSource<<6f1370f463621cd65a4010017e2279ab>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ModifyAgentInput = {\n  scaling_group?: string | null | undefined;\n  schedulable?: boolean | null | undefined;\n};\nexport type AgentSettingModalMutation$variables = {\n  id: string;\n  props: ModifyAgentInput;\n};\nexport type AgentSettingModalMutation$data = {\n  readonly modify_agent: {\n    readonly msg: string | null | undefined;\n    readonly ok: boolean | null | undefined;\n  } | null | undefined;\n};\nexport type AgentSettingModalMutation = {\n  response: AgentSettingModalMutation$data;\n  variables: AgentSettingModalMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"props\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"id\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"props\"\n      }\n    ],\n    \"concreteType\": \"ModifyAgent\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_agent\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"ok\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"msg\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentSettingModalMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"AgentSettingModalMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1a9e43d4bc6e78f3949d1a2a397ff00e\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentSettingModalMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation AgentSettingModalMutation(\\n  $id: String!\\n  $props: ModifyAgentInput!\\n) {\\n  modify_agent(id: $id, props: $props) {\\n    ok\\n    msg\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"13b2a6a91c7f08bbced5fde155ded60e\";\n\nexport default node;\n","import { iSizeToSize } from '../helper';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport Flex from './Flex';\nimport { AgentDetailModalFragment$key } from './__generated__/AgentDetailModalFragment.graphql';\nimport { Col, Row, theme, Typography } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ntype LiveStat = {\n  capacity: string;\n  current: string;\n  pct: string;\n  'stats.avg': string;\n  'stats.max': string;\n  unit_hint: string;\n};\n\ninterface AgentDetailModalProps extends BAIModalProps {\n  agentDetailModalFrgmt?: AgentDetailModalFragment$key | null;\n  onRequestClose: () => void;\n}\n\nconst AgentDetailModal: React.FC<AgentDetailModalProps> = ({\n  agentDetailModalFrgmt = null,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [resourceSlotsDetails] = useResourceSlotsDetails();\n  const agent = useFragment(\n    graphql`\n      fragment AgentDetailModalFragment on Agent {\n        id\n        live_stat\n        available_slots\n        occupied_slots\n        cpu_cur_pct\n        mem_cur_bytes\n      }\n    `,\n    agentDetailModalFrgmt,\n  );\n  const parsedLiveStat = JSON.parse(agent?.live_stat || '{}');\n  const parsedAvailableSlots = JSON.parse(agent?.available_slots || '{}');\n\n  return (\n    <BAIModal\n      {...modalProps}\n      styles={{\n        body: {\n          padding: 0,\n        },\n      }}\n      centered\n      title={`${t('agent.DetailedInformation')}: ${agent?.id}`}\n      onCancel={onRequestClose}\n      destroyOnClose\n      footer={null}\n    >\n      <Flex direction=\"column\" align=\"stretch\" gap={'md'}>\n        <Row gutter={[24, 24]}>\n          <Col xs={24} sm={12}>\n            {parsedLiveStat?.devices?.cpu_util ? (\n              <Flex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                <Typography.Title level={5} style={{ marginTop: 0 }}>\n                  {resourceSlotsDetails?.cpu?.human_readable_name}\n                </Typography.Title>\n                {_.map(parsedLiveStat?.devices?.cpu_util, (value, key) => (\n                  <Flex justify=\"between\">\n                    <Typography.Text\n                      key={key}\n                      type=\"secondary\"\n                      style={{ flex: 0.5 }}\n                    >\n                      {resourceSlotsDetails?.cpu?.human_readable_name}\n                      {key}\n                    </Typography.Text>\n                    <BAIProgressWithLabel\n                      percent={value?.pct}\n                      valueLabel={value?.pct + '%'}\n                    />\n                  </Flex>\n                ))}\n              </Flex>\n            ) : null}\n          </Col>\n          <Col xs={24} sm={12}>\n            {parsedAvailableSlots?.mem ? (\n              <Flex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                <Typography.Title level={5} style={{ marginTop: 0 }}>\n                  {resourceSlotsDetails?.mem?.human_readable_name}\n                </Typography.Title>\n                <BAIProgressWithLabel\n                  percent={\n                    ((iSizeToSize(_.toString(agent?.mem_cur_bytes), 'g')\n                      ?.number ?? 0) /\n                      (iSizeToSize(parsedAvailableSlots?.mem, 'g')?.number ??\n                        0)) *\n                      100 ?? 0\n                  }\n                  valueLabel={`${\n                    iSizeToSize(_.toString(agent?.mem_cur_bytes), 'g')\n                      ?.numberUnit\n                  }iB / ${iSizeToSize(parsedAvailableSlots?.mem, 'g')?.numberUnit}iB`}\n                />\n              </Flex>\n            ) : null}\n            {parsedLiveStat?.node ? (\n              <Flex direction=\"column\" gap=\"xxs\" align=\"start\">\n                <Typography.Title level={5} style={{ marginTop: 0 }}>\n                  {t('session.launcher.Network')}\n                </Typography.Title>\n                <Flex gap=\"xl\">\n                  <Typography.Text>TX:</Typography.Text>\n                  <Typography.Text>\n                    {\n                      iSizeToSize(parsedLiveStat?.node?.net_tx?.current, 'm', 1)\n                        ?.numberUnit\n                    }\n                    iB\n                  </Typography.Text>\n                </Flex>\n                <Flex gap=\"xl\">\n                  <Typography.Text>RX:</Typography.Text>\n                  <Typography.Text>\n                    {\n                      iSizeToSize(parsedLiveStat?.node?.net_rx?.current, 'm', 1)\n                        ?.numberUnit\n                    }\n                    iB\n                  </Typography.Text>\n                </Flex>\n              </Flex>\n            ) : null}\n          </Col>\n        </Row>\n        <Row gutter={[24, 24]} style={{ marginBottom: token.marginSM }}>\n          {_.map(_.keys(parsedLiveStat?.devices), (key) => {\n            if (['cpu_util', 'mem', 'disk', 'net_rx', 'net_tx'].includes(key)) {\n              return null;\n            } else if (_.includes(key, '_util')) {\n              const deviceName = _.split(key, '_')[0] + '.device';\n              return (\n                <Col xs={24} sm={12}>\n                  <Flex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                    <Typography.Title level={5} style={{ marginTop: 0 }}>\n                      {resourceSlotsDetails?.[deviceName]?.human_readable_name}{' '}\n                      {t('session.Utilization')}\n                    </Typography.Title>\n                    {_.map(\n                      _.toPairs(parsedLiveStat?.devices[key]),\n                      (value, index) => (\n                        <Flex justify=\"between\">\n                          <Typography.Text\n                            key={index}\n                            type=\"secondary\"\n                            style={{ flex: 0.5 }}\n                          >\n                            {\n                              resourceSlotsDetails?.[deviceName]\n                                ?.human_readable_name\n                            }\n                            {index}\n                          </Typography.Text>\n                          <BAIProgressWithLabel\n                            percent={_.toFinite((value?.[1] as LiveStat)?.pct)}\n                            valueLabel={(value?.[1] as LiveStat)?.pct + '%'}\n                          />\n                        </Flex>\n                      ),\n                    )}\n                  </Flex>\n                </Col>\n              );\n            } else if (_.includes(key, '_mem')) {\n              const deviceName = _.split(key, '_')[0] + '.device';\n              return (\n                <Col xs={24} sm={12}>\n                  <Flex direction=\"column\" gap=\"xxs\" align=\"stretch\">\n                    <Typography.Title level={5} style={{ marginTop: 0 }}>\n                      {resourceSlotsDetails?.[deviceName]?.human_readable_name}{' '}\n                      {t('session.launcher.Memory')}\n                    </Typography.Title>\n                    {_.map(\n                      _.toPairs(parsedLiveStat?.devices[key]),\n                      (value, index) => (\n                        <Flex justify=\"between\">\n                          <Typography.Text\n                            key={index}\n                            type=\"secondary\"\n                            style={{ flex: 0.5 }}\n                          >\n                            {\n                              resourceSlotsDetails?.[deviceName]\n                                ?.human_readable_name\n                            }\n                            {index}\n                          </Typography.Text>\n                          <BAIProgressWithLabel\n                            percent={_.toFinite((value?.[1] as LiveStat)?.pct)}\n                            valueLabel={(value?.[1] as LiveStat)?.pct + '%'}\n                          />\n                        </Flex>\n                      ),\n                    )}\n                  </Flex>\n                </Col>\n              );\n            }\n          })}\n        </Row>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default AgentDetailModal;\n","import BAIModal, { BAIModalProps } from './BAIModal';\nimport {\n  AgentSettingModalFragment$data,\n  AgentSettingModalFragment$key,\n} from './__generated__/AgentSettingModalFragment.graphql';\nimport { AgentSettingModalMutation } from './__generated__/AgentSettingModalMutation.graphql';\nimport { App, Form, FormInstance, Switch } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment, useMutation } from 'react-relay';\n\ninterface AgentSettingModalProps extends BAIModalProps {\n  agentSettingModalFrgmt?: AgentSettingModalFragment$key | null;\n  onRequestClose: (success?: boolean) => void;\n}\n\nconst AgentSettingModal: React.FC<AgentSettingModalProps> = ({\n  agentSettingModalFrgmt = null,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { message } = App.useApp();\n  const formRef = useRef<FormInstance<AgentSettingModalFragment$data> | null>(\n    null,\n  );\n  const agent = useFragment(\n    graphql`\n      fragment AgentSettingModalFragment on Agent {\n        id\n        schedulable\n      }\n    `,\n    agentSettingModalFrgmt,\n  );\n\n  const [commitModifyAgentSetting, isInFlightCommitModifyAgentSetting] =\n    useMutation<AgentSettingModalMutation>(graphql`\n      mutation AgentSettingModalMutation(\n        $id: String!\n        $props: ModifyAgentInput!\n      ) {\n        modify_agent(id: $id, props: $props) {\n          ok\n          msg\n        }\n      }\n    `);\n\n  return (\n    <BAIModal\n      {...modalProps}\n      title={`${t('agent.AgentSetting')}: ${agent?.id}`}\n      onCancel={() => onRequestClose()}\n      destroyOnClose\n      width={300}\n      confirmLoading={isInFlightCommitModifyAgentSetting}\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            commitModifyAgentSetting({\n              variables: {\n                id: agent?.id || '',\n                props: {\n                  schedulable: values.schedulable,\n                },\n              },\n              onCompleted(res, errors) {\n                if (!res?.modify_agent?.ok || errors) {\n                  message.error(res?.modify_agent?.msg);\n                  onRequestClose();\n                } else {\n                  message.success(t('agent.AgentSettingUpdated'));\n                  onRequestClose(true);\n                }\n              },\n              onError(err) {\n                message.error(err?.message);\n              },\n            });\n          })\n          .catch(() => {});\n      }}\n    >\n      <Form ref={formRef} preserve={false} initialValues={{ ...agent }}>\n        <Form.Item\n          name=\"schedulable\"\n          label={t('agent.Schedulable')}\n          valuePropName=\"checked\"\n        >\n          <Switch />\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default AgentSettingModal;\n","import Flex from './Flex';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport { useControllableValue, useDynamicList } from 'ahooks';\nimport { Button, Input, Select, Tag, Tooltip, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ComponentProps, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\n// const OPERATION_LABELS = {\n//   '==': 'is',\n//   '!=': 'is not',\n//   '<': 'less than',\n//   '<=': 'less than or equal to',\n//   '>': 'greater than',\n//   '>=': 'greater than or equal to',\n//   '%': 'like',\n//   in: 'in',\n//   contains: 'contains',\n// };\n// operators: ['==', '!=', '<', '<=', '>', '>=', '%'],\n\ntype FilterProperty = {\n  key: string;\n  // operators: Array<string>;\n  defaultOperator?: string;\n  propertyLabel: string;\n};\nexport interface BAIPropertyFilterProps\n  extends Omit<ComponentProps<typeof Input.Search>, 'value' | 'onChange'> {\n  value?: string;\n  onChange?: (value: string) => void;\n  defaultValue?: string;\n  filterProperties: Array<FilterProperty>;\n}\n\ninterface FilterInput {\n  property: string;\n  operator: string;\n  value: string;\n  propertyLabel: string;\n}\n\nconst DEFAULT_OPERATOR = 'ilike';\n\nfunction trimFilterValue(filterValue: string): string {\n  return filterValue.replace(/^%|%$/g, '');\n}\n\nexport function parseFilterValue(filter: string) {\n  const [property, ...rest] = filter.split(/\\s+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n  const [operator, ...valueParts] = rest\n    .join(' ')\n    .split(/\\s+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n  const value = valueParts.join(' ').replace(/^\"|\"$/g, '');\n  return { property, operator, value };\n}\n\nconst BAIPropertyFilter: React.FC<BAIPropertyFilterProps> = ({\n  filterProperties,\n  value: propValue,\n  onChange: propOnChange,\n  defaultValue,\n  ...otherProps\n}) => {\n  const [search, setSearch] = useControllableValue({});\n\n  const [value, setValue] = useControllableValue<string | undefined>({\n    value: propValue,\n    defaultValue: defaultValue,\n    onChange: propOnChange,\n  });\n  const filtersFromValue = useMemo(() => {\n    if (value === undefined) return [];\n    const filters = value.split('&').map((filter) => filter.trim());\n    return filters.map((filter) => {\n      const { property, operator, value } = parseFilterValue(filter);\n      return {\n        property,\n        operator,\n        value,\n        propertyLabel:\n          _.find(filterProperties, (f) => f.key === property)?.propertyLabel ||\n          property,\n      };\n    });\n  }, [value, filterProperties]);\n\n  const { t } = useTranslation();\n  const options = _.map(filterProperties, (filterProperty) => {\n    return {\n      label: filterProperty.propertyLabel,\n      value: filterProperty.key,\n      filter: filterProperty,\n    };\n  });\n  const [selectedProperty, setSelectedProperty] = useState(options[0].filter);\n  const { list, remove, push, resetList, getKey } =\n    useDynamicList<FilterInput>(filtersFromValue);\n\n  const { token } = theme.useToken();\n\n  useEffect(() => {\n    if (list.length === 0) {\n      setValue(undefined);\n    } else {\n      setValue(\n        _.map(list, (item) => {\n          return `${item.property} ${item.operator} \"${item.value}\"`;\n        }).join(' & '),\n      );\n    }\n  }, [list, setValue]);\n\n  return (\n    <Flex direction=\"column\" gap={'xs'} style={{ flex: 1 }} align=\"start\">\n      <Flex>\n        <Input.Search\n          addonBefore={\n            <Select\n              popupMatchSelectWidth={false}\n              options={options}\n              value={selectedProperty.key}\n              onChange={(value, options) => {\n                setSelectedProperty(_.castArray(options)[0].filter);\n              }}\n            />\n          }\n          style={{ minWidth: 250 }}\n          onSearch={(value) => {\n            if (_.isEmpty(value)) return;\n            setSearch('');\n            const operator =\n              selectedProperty.defaultOperator || DEFAULT_OPERATOR;\n            const filterValue =\n              operator === 'ilike' || operator === 'like'\n                ? `%${value}%`\n                : `${value}`;\n            push({\n              property: selectedProperty.key,\n              propertyLabel: selectedProperty.propertyLabel,\n              operator,\n              value: filterValue,\n            });\n          }}\n          allowClear\n          placeholder={t('propertyFilter.placeHolder')}\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          {...otherProps}\n        />\n      </Flex>\n      {list.length > 0 && (\n        <Flex\n          direction=\"row\"\n          gap={'xs'}\n          wrap=\"wrap\"\n          style={{ alignSelf: 'stretch' }}\n        >\n          {_.map(list, (item, index) => {\n            return (\n              <Tag\n                key={getKey(index)}\n                closable\n                onClose={() => {\n                  remove(index);\n                }}\n                style={{ margin: 0 }}\n              >\n                {item.propertyLabel}: {trimFilterValue(item.value)}\n              </Tag>\n            );\n          })}\n          {list.length > 1 && (\n            <Tooltip title={t('propertyFilter.ResetFilter')}>\n              <Button\n                size=\"small\"\n                icon={\n                  <CloseCircleOutlined\n                    style={{ color: token.colorTextSecondary }}\n                  />\n                }\n                type=\"text\"\n                onClick={() => {\n                  resetList([]);\n                }}\n              />\n            </Tooltip>\n          )}\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\nexport default BAIPropertyFilter;\n","import {\n  bytesToGB,\n  iSizeToSize,\n  transformSorterToOrderString,\n} from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport { useBAIPaginationOptionState } from '../hooks/reactPaginationQueryOptions';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport AgentDetailModal from './AgentDetailModal';\nimport AgentSettingModal from './AgentSettingModal';\nimport BAIIntervalText from './BAIIntervalText';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport BAIPropertyFilter from './BAIPropertyFilter';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\nimport { ResourceTypeIcon } from './ResourceNumber';\nimport TableColumnsSettingModal from './TableColumnsSettingModal';\nimport { AgentDetailModalFragment$key } from './__generated__/AgentDetailModalFragment.graphql';\nimport {\n  AgentListQuery,\n  AgentListQuery$data,\n} from './__generated__/AgentListQuery.graphql';\nimport { AgentSettingModalFragment$key } from './__generated__/AgentSettingModalFragment.graphql';\nimport {\n  CheckCircleOutlined,\n  InfoCircleOutlined,\n  LoadingOutlined,\n  MinusCircleOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport { useLocalStorageState } from 'ahooks';\nimport {\n  Button,\n  Segmented,\n  Table,\n  TableProps,\n  Tag,\n  theme,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { AnyObject } from 'antd/es/_util/type';\nimport { ColumnsType, ColumnType } from 'antd/es/table';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useState, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ntype Agent = NonNullable<AgentListQuery$data['agent_list']>['items'][number];\n\ninterface AgentListProps {\n  containerStyle?: React.CSSProperties;\n  tableProps?: Omit<TableProps, 'dataSource'>;\n}\n\nconst AgentList: React.FC<AgentListProps> = ({\n  containerStyle,\n  tableProps,\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n  const [resourceSlotsDetails] = useResourceSlotsDetails();\n  const [currentAgentInfo, setCurrentAgentInfo] =\n    useState<AgentDetailModalFragment$key | null>();\n  const [currentSettingAgent, setCurrentSettingAgent] =\n    useState<AgentSettingModalFragment$key | null>();\n  const [isOpenColumnsSetting, setIsOpenColumnsSetting] = useState(false);\n  const baiClient = useSuspendedBackendaiClient();\n  const [isPendingStatusFetch, startStatusFetchTransition] = useTransition();\n  const [isPendingRefresh, startRefreshTransition] = useTransition();\n  const [isPendingPageChange, startPageChangeTransition] = useTransition();\n  const [selectedStatus, setSelectedStatus] = useState('ALIVE');\n  const [optimisticSelectedStatus, setOptimisticSelectedStatus] =\n    useState(selectedStatus);\n  const [isPendingFilter, startFilterTransition] = useTransition();\n\n  const [filterString, setFilterString] = useState<string>();\n\n  const {\n    baiPaginationOption,\n    tablePaginationOption,\n    setTablePaginationOption,\n  } = useBAIPaginationOptionState({\n    current: 1,\n    pageSize: 20,\n  });\n  const [order, setOrder] = useState<string>();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [fetchPolicy] = useState<FetchPolicy>('network-only');\n  const updateFetchKeyInTransition = () =>\n    startRefreshTransition(() => {\n      updateFetchKey();\n    });\n\n  const { agent_list } = useLazyLoadQuery<AgentListQuery>(\n    graphql`\n      query AgentListQuery(\n        $limit: Int!\n        $offset: Int!\n        $filter: String\n        $status: String\n        $order: String\n      ) {\n        agent_list(\n          limit: $limit\n          offset: $offset\n          filter: $filter\n          status: $status\n          order: $order\n        ) {\n          items {\n            id\n            status\n            version\n            addr\n            architecture\n            region\n            compute_plugins\n            first_contact\n            lost_at\n            status_changed\n            live_stat\n            cpu_cur_pct\n            mem_cur_bytes\n            available_slots\n            occupied_slots\n            scaling_group\n            schedulable\n            ...AgentDetailModalFragment\n            ...AgentSettingModalFragment\n          }\n          total_count\n        }\n      }\n    `,\n    {\n      limit: baiPaginationOption.limit,\n      offset: baiPaginationOption.offset,\n      filter: filterString,\n      order,\n      status: selectedStatus,\n    },\n    {\n      fetchKey,\n      fetchPolicy,\n    },\n  );\n\n  const columns: ColumnsType<Agent> = [\n    {\n      title: '#',\n      fixed: 'left',\n      render: (id, record, index) => {\n        return (\n          index +\n          1 +\n          (tablePaginationOption.current - 1) * tablePaginationOption.pageSize\n        );\n      },\n      showSorterTooltip: false,\n      rowScope: 'row',\n    },\n    {\n      title: `ID / ${t('agent.Endpoint')}`,\n      key: 'id',\n      dataIndex: 'id',\n      fixed: 'left',\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\" align=\"start\">\n            <Typography.Text>{value}</Typography.Text>\n            <Typography.Text type=\"secondary\">{record?.addr}</Typography.Text>\n          </Flex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('agent.Region'),\n      key: 'region',\n      dataIndex: 'region',\n      render: (value) => {\n        const platformData: {\n          [key: string]: { color: string; icon: string };\n        } = {\n          aws: { color: 'orange', icon: 'aws' },\n          amazon: { color: 'orange', icon: 'aws' },\n          azure: { color: 'blue', icon: 'azure' },\n          gcp: { color: 'lightblue', icon: 'gcp' },\n          google: { color: 'lightblue', icon: 'gcp' },\n          nbp: { color: 'green', icon: 'nbp' },\n          naver: { color: 'green', icon: 'nbp' },\n          openstack: { color: 'red', icon: 'openstack' },\n          dgx: { color: 'green', icon: 'local' },\n          local: { color: 'yellow', icon: 'local' },\n        };\n\n        const regionData = _.split(value, '/');\n        const platform = regionData?.[0];\n        const location = regionData?.length > 1 ? regionData[1] : '';\n        const { color, icon } = platformData[platform] || {\n          color: 'yellow',\n          icon: 'local',\n        };\n        return (\n          <Flex gap={'xxs'}>\n            <img\n              alt={value}\n              src={`/resources/icons/${icon}.png`}\n              style={{\n                width: '32px',\n                height: '32px',\n                filter: isDarkMode && icon === 'local' ? 'invert(1)' : '',\n              }}\n            />\n            {location !== '' ? (\n              <DoubleTag\n                values={[\n                  { label: location, color: color },\n                  { label: platform, color: color },\n                ]}\n              />\n            ) : (\n              <Tag color={color}>{platform}</Tag>\n            )}\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('agent.Architecture'),\n      key: 'architecture',\n      dataIndex: 'architecture',\n    },\n    {\n      title: t('agent.Starts'),\n      key: 'first_contact',\n      dataIndex: 'first_contact',\n      render: (value) => {\n        return (\n          <Flex direction=\"column\">\n            <Typography.Text>{dayjs(value).format('ll LTS')}</Typography.Text>\n            <DoubleTag\n              values={[\n                t('agent.Running'),\n                <BAIIntervalText\n                  callback={() => {\n                    return baiClient.utils.elapsedTime(value, Date.now());\n                  }}\n                  delay={1000}\n                />,\n              ]}\n            />\n          </Flex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('agent.Allocation'),\n      key: 'allocation',\n      render: (value, record) => {\n        const parsedOccupiedSlots = JSON.parse(record?.occupied_slots || '{}');\n        const parsedAvailableSlots = JSON.parse(\n          record?.available_slots || '{}',\n        );\n        return (\n          <Flex direction=\"column\" gap=\"xxs\">\n            {_.map(_.keys(parsedAvailableSlots), (key) => {\n              if (key === 'cpu') {\n                return (\n                  <Flex key={key} justify=\"between\" style={{ minWidth: 220 }}>\n                    <Flex gap=\"xxs\">\n                      <ResourceTypeIcon key={key} type={key} />\n                      <Typography.Text>\n                        {parsedOccupiedSlots[key] ?? 0}/\n                        {parsedAvailableSlots[key] ?? 0}\n                      </Typography.Text>\n                      <Typography.Text\n                        type=\"secondary\"\n                        style={{ fontSize: token.sizeXS }}\n                      >\n                        {resourceSlotsDetails?.cpu?.display_unit}\n                      </Typography.Text>\n                    </Flex>\n                    <BAIProgressWithLabel\n                      percent={\n                        (parsedOccupiedSlots[key] / parsedAvailableSlots[key]) *\n                        100\n                      }\n                      strokeColor={\n                        (parsedOccupiedSlots[key] / parsedAvailableSlots[key]) *\n                          100 >\n                        80\n                          ? token.colorError\n                          : token.colorSuccess\n                      }\n                      width={120}\n                      valueLabel={\n                        _.toFinite(\n                          (parsedOccupiedSlots[key] /\n                            parsedAvailableSlots[key]) *\n                            100,\n                        ).toFixed(2) + ' %'\n                      }\n                    />\n                  </Flex>\n                );\n              } else if (key === 'mem') {\n                return (\n                  <Flex key={key} justify=\"between\" style={{ minWidth: 220 }}>\n                    <Flex gap=\"xxs\">\n                      <ResourceTypeIcon key={key} type={key} />\n                      <Typography.Text>\n                        {iSizeToSize(parsedOccupiedSlots[key], 'g', 0)\n                          ?.numberFixed ?? 0}\n                        /\n                        {iSizeToSize(parsedAvailableSlots[key], 'g', 0)\n                          ?.numberFixed ?? 0}\n                      </Typography.Text>\n                      <Typography.Text\n                        type=\"secondary\"\n                        style={{ fontSize: token.sizeXS }}\n                      >\n                        GiB\n                      </Typography.Text>\n                    </Flex>\n                    <BAIProgressWithLabel\n                      percent={\n                        (parsedOccupiedSlots[key] / parsedAvailableSlots[key]) *\n                        100\n                      }\n                      strokeColor={\n                        (parsedOccupiedSlots[key] / parsedAvailableSlots[key]) *\n                          100 >\n                        80\n                          ? token.colorError\n                          : token.colorSuccess\n                      }\n                      width={120}\n                      valueLabel={\n                        _.toFinite(\n                          (parsedOccupiedSlots[key] /\n                            parsedAvailableSlots[key]) *\n                            100,\n                        ).toFixed(2) + ' %'\n                      }\n                    />\n                  </Flex>\n                );\n              } else if (\n                parsedOccupiedSlots[key] &&\n                parsedAvailableSlots[key]\n              ) {\n                return (\n                  <Flex key={key} justify=\"between\" style={{ minWidth: 220 }}>\n                    <Flex gap=\"xxs\">\n                      <ResourceTypeIcon key={key} type={key} />\n                      <Typography.Text>\n                        {parsedOccupiedSlots[key] ?? 0}/\n                        {parsedAvailableSlots[key] ?? 0}\n                      </Typography.Text>\n                      <Typography.Text\n                        type=\"secondary\"\n                        style={{ fontSize: token.sizeXS }}\n                      >\n                        {resourceSlotsDetails?.[key]?.display_unit}\n                      </Typography.Text>\n                    </Flex>\n                    <BAIProgressWithLabel\n                      percent={\n                        (parsedOccupiedSlots[key] / parsedAvailableSlots[key]) *\n                        100\n                      }\n                      strokeColor={\n                        (parsedOccupiedSlots[key] / parsedAvailableSlots[key]) *\n                          100 >\n                        80\n                          ? token.colorError\n                          : token.colorSuccess\n                      }\n                      width={120}\n                      valueLabel={\n                        _.toFinite(\n                          (parsedOccupiedSlots[key] /\n                            parsedAvailableSlots[key]) *\n                            100,\n                        ).toFixed(2) + ' %'\n                      }\n                    />\n                  </Flex>\n                );\n              }\n            })}\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('agent.Utilization'),\n      key: 'live_stat',\n      dataIndex: 'live_stat',\n      render: (value, record) => {\n        const parsedValue = JSON.parse(value || '{}');\n        if (record?.status === 'ALIVE') {\n          const liveStat = {\n            cpu_util: { capacity: 0, current: 0, ratio: 0 },\n            mem_util: { capacity: 0, current: 0, ratio: 0 },\n          };\n          if (parsedValue && parsedValue.node && parsedValue.devices) {\n            const numCores = _.keys(parsedValue.devices.cpu_util).length;\n            liveStat.cpu_util.capacity = _.toFinite(\n              parsedValue.node.cpu_util.capacity,\n            );\n            liveStat.cpu_util.current = _.toFinite(\n              parsedValue.node.cpu_util.current,\n            );\n            liveStat.cpu_util.ratio =\n              (liveStat.cpu_util.current /\n                liveStat.cpu_util.capacity /\n                numCores) *\n                100 || 0;\n            liveStat.mem_util.capacity = _.toInteger(\n              parsedValue.node.mem.capacity,\n            );\n            liveStat.mem_util.current = _.toInteger(\n              parsedValue.node.mem.current,\n            );\n            liveStat.mem_util.ratio =\n              (liveStat.mem_util.current / liveStat.mem_util.capacity) * 100 ||\n              0;\n          }\n          _.forEach(_.keys(parsedValue?.node), (statKey) => {\n            if (\n              ['cpu_util', 'mem', 'disk', 'net_rx', 'net_tx'].includes(statKey)\n            )\n              return;\n            if (_.includes(statKey, '_util')) {\n              // core utilization\n              liveStat[statKey as keyof typeof liveStat] = {\n                capacity:\n                  statKey === 'cuda_util'\n                    ? _.toFinite(parsedValue.node[statKey]['stats.max'])\n                    : _.toFinite(parsedValue.node[statKey].capacity),\n                current: _.toFinite(parsedValue.node[statKey].current),\n                ratio: _.toFinite(parsedValue.node[statKey].current) / 100 || 0,\n              };\n            } else if (statKey.includes('_mem')) {\n              // memory utilization\n              liveStat[statKey as keyof typeof liveStat] = {\n                capacity: _.toFinite(parsedValue.node[statKey].capacity),\n                current: _.toFinite(parsedValue.node[statKey].current),\n                ratio: _.toFinite(parsedValue.node[statKey].pct) / 100 || 0,\n              };\n            }\n          });\n          return (\n            <Flex direction=\"column\" gap=\"xxs\">\n              <Flex justify=\"between\" style={{ minWidth: 200 }}>\n                <Typography.Text>\n                  {resourceSlotsDetails?.cpu?.human_readable_name}\n                </Typography.Text>\n                <BAIProgressWithLabel\n                  percent={liveStat.cpu_util.ratio}\n                  width={120}\n                  valueLabel={\n                    _.toFinite(liveStat.cpu_util.ratio.toFixed(1)) + ' %'\n                  }\n                />\n              </Flex>\n              <Flex justify=\"between\" style={{ minWidth: 200 }}>\n                <Typography.Text>\n                  {resourceSlotsDetails?.mem?.human_readable_name}\n                </Typography.Text>\n                <BAIProgressWithLabel\n                  percent={liveStat.mem_util.ratio}\n                  width={120}\n                  valueLabel={\n                    iSizeToSize(_.toString(liveStat.mem_util.current), 'g')\n                      ?.numberFixed +\n                    '/' +\n                    iSizeToSize(_.toString(liveStat.mem_util.capacity), 'g')\n                      ?.numberFixed +\n                    ' GiB'\n                  }\n                />\n              </Flex>\n              {_.map(_.keys(parsedValue?.node), (statKey) => {\n                if (['cpu_util', 'mem'].includes(statKey)) {\n                  return;\n                }\n                if (_.includes(statKey, '_util')) {\n                  const deviceName = _.split(statKey, '_')[0] + '.device';\n                  return (\n                    <Flex\n                      justify=\"between\"\n                      style={{ minWidth: 200, width: 'min-content' }}\n                      gap=\"xxs\"\n                    >\n                      <Typography.Text>\n                        {\n                          resourceSlotsDetails?.[deviceName]\n                            ?.human_readable_name\n                        }\n                        (util)\n                      </Typography.Text>\n                      <BAIProgressWithLabel\n                        width={120}\n                        percent={\n                          liveStat[statKey as keyof typeof liveStat].ratio\n                        }\n                        valueLabel={\n                          _.toFinite(\n                            liveStat[\n                              statKey as keyof typeof liveStat\n                            ].ratio.toFixed(1),\n                          ) + ' %'\n                        }\n                      />\n                    </Flex>\n                  );\n                }\n                if (_.includes(statKey, '_mem')) {\n                  const deviceName = _.split(statKey, '_')[0] + '.device';\n                  return (\n                    <Flex\n                      justify=\"between\"\n                      style={{ minWidth: 200, width: 'min-content' }}\n                      gap=\"xxs\"\n                    >\n                      <Typography.Text>\n                        {\n                          resourceSlotsDetails?.[deviceName]\n                            ?.human_readable_name\n                        }\n                        (mem)\n                      </Typography.Text>\n                      <BAIProgressWithLabel\n                        width={120}\n                        percent={\n                          liveStat[statKey as keyof typeof liveStat].ratio\n                        }\n                        valueLabel={\n                          iSizeToSize(\n                            _.toString(\n                              liveStat[statKey as keyof typeof liveStat]\n                                .current,\n                            ),\n                            'g',\n                          )?.numberFixed +\n                          '/' +\n                          iSizeToSize(\n                            _.toString(\n                              liveStat[statKey as keyof typeof liveStat]\n                                .capacity,\n                            ),\n                            'g',\n                          )?.numberFixed +\n                          ' GiB'\n                        }\n                      />\n                    </Flex>\n                  );\n                }\n              })}\n            </Flex>\n          );\n        } else {\n          return t('agent.NoAvailableLiveStat');\n        }\n      },\n    },\n    {\n      title: t('agent.DiskPerc'),\n      key: 'disk_perc',\n      render: (value, record) => {\n        const parsedDisk =\n          JSON.parse(record?.live_stat || '{}')?.node?.disk ?? {};\n        const pctValue = parseFloat(parsedDisk.pct) || 0;\n        const pct = parseFloat(pctValue.toFixed(1));\n        const color = pct > 80 ? token.colorError : token.colorSuccess;\n        return (\n          <Flex direction=\"column\">\n            <BAIProgressWithLabel\n              valueLabel={pct + ' %'}\n              percent={pct}\n              strokeColor={color}\n              width={120}\n            />\n            <Typography.Text style={{ fontSize: token.fontSizeSM }}>\n              {bytesToGB(parsedDisk?.current)}GB /{' '}\n              {bytesToGB(parsedDisk?.capacity)}GB\n            </Typography.Text>\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('general.ResourceGroup'),\n      key: 'resource_group',\n      dataIndex: 'scaling_group',\n      sorter: true,\n    },\n    {\n      title: t('agent.Status'),\n      key: 'status',\n      dataIndex: 'status',\n      render: (value, record) => {\n        const parsedComputePlugins = JSON.parse(\n          record?.compute_plugins || '{}',\n        );\n        const parsedAvailableSlots = JSON.parse(\n          record?.available_slots || '{}',\n        );\n        return (\n          <Flex direction=\"column\" gap=\"xxs\" align=\"start\">\n            <DoubleTag\n              values={[\n                { label: 'Agent' },\n                {\n                  label: record?.version,\n                  color:\n                    value === 'ALIVE'\n                      ? 'green'\n                      : value === 'TERMINATED'\n                        ? 'red'\n                        : 'blue',\n                },\n              ]}\n            />\n            {parsedComputePlugins?.cuda ? (\n              <>\n                {parsedComputePlugins?.cuda?.cuda_version ? (\n                  <DoubleTag\n                    values={[\n                      { label: 'CUDA' },\n                      {\n                        label: parsedComputePlugins?.cuda?.cuda_version,\n                        color: 'green',\n                      },\n                    ]}\n                  />\n                ) : (\n                  <Tag color=\"green\">CUDA Disabled</Tag>\n                )}\n                <DoubleTag\n                  values={[\n                    { label: 'CUDA Plugin' },\n                    {\n                      label: parsedComputePlugins?.cuda?.version,\n                      color: 'blue',\n                    },\n                  ]}\n                />\n                {_.includes(_.keys(parsedAvailableSlots), 'cuda.shares') ? (\n                  <Tag color=\"blue\">Fractional GPU™</Tag>\n                ) : null}\n              </>\n            ) : null}\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('agent.Schedulable'),\n      key: 'schedulable',\n      dataIndex: 'schedulable',\n      render: (value) => {\n        return (\n          <Flex justify=\"center\">\n            {value === true ? (\n              <CheckCircleOutlined\n                style={{\n                  color: token.colorPrimary,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            ) : (\n              <MinusCircleOutlined\n                style={{\n                  color: token.colorError,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            )}\n          </Flex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('general.Control'),\n      key: 'control',\n      fixed: 'right',\n      render: (value, record) => {\n        return (\n          <Flex>\n            <Button\n              size=\"large\"\n              style={{\n                color: token.colorSuccess,\n              }}\n              type=\"text\"\n              icon={<InfoCircleOutlined />}\n              onClick={() => setCurrentAgentInfo(record)}\n            />\n            <Button\n              size=\"large\"\n              style={{\n                color: token.colorInfo,\n              }}\n              type=\"text\"\n              icon={<SettingOutlined />}\n              onClick={() => setCurrentSettingAgent(record)}\n            />\n          </Flex>\n        );\n      },\n    },\n  ];\n  const [displayedColumnKeys, setDisplayedColumnKeys] = useLocalStorageState(\n    'backendaiwebui.AgentList.displayedColumnKeys',\n    {\n      defaultValue: columns.map((column) => _.toString(column.key)),\n    },\n  );\n\n  return (\n    <Flex direction=\"column\" align=\"stretch\" style={containerStyle}>\n      <Flex\n        justify=\"between\"\n        align=\"start\"\n        gap=\"xs\"\n        style={{ padding: token.paddingXS }}\n        wrap=\"wrap\"\n      >\n        <Flex\n          direction=\"row\"\n          gap={'sm'}\n          align=\"start\"\n          style={{ flex: 1 }}\n          wrap=\"wrap\"\n        >\n          <Segmented\n            options={[\n              {\n                label: t('agent.Connected'),\n                value: 'ALIVE',\n              },\n              {\n                label: t('agent.Terminated'),\n                value: 'TERMINATED',\n              },\n            ]}\n            value={\n              isPendingStatusFetch ? optimisticSelectedStatus : selectedStatus\n            }\n            onChange={(value) => {\n              setOptimisticSelectedStatus(value);\n              startStatusFetchTransition(() => {\n                setSelectedStatus(value);\n              });\n            }}\n          />\n          <BAIPropertyFilter\n            filterProperties={[\n              {\n                key: 'id',\n                propertyLabel: 'ID',\n              },\n              {\n                key: 'addr',\n                propertyLabel: t('agent.Endpoint'),\n              },\n            ]}\n            value={filterString}\n            // loading={isPendingFilter}\n            onChange={(value) => {\n              startFilterTransition(() => {\n                setFilterString(value);\n              });\n            }}\n          />\n        </Flex>\n        <Flex gap=\"xs\">\n          <Tooltip title={t('button.Refresh')}>\n            <Button\n              loading={isPendingRefresh}\n              onClick={() => updateFetchKeyInTransition()}\n              icon={<ReloadOutlined />}\n            ></Button>\n          </Tooltip>\n        </Flex>\n      </Flex>\n      <Table\n        bordered\n        scroll={{ x: 'max-content' }}\n        rowKey={'id'}\n        dataSource={agent_list?.items}\n        showSorterTooltip={false}\n        columns={\n          _.filter(columns, (column) =>\n            displayedColumnKeys?.includes(_.toString(column.key)),\n          ) as ColumnType<AnyObject>[]\n        }\n        pagination={{\n          pageSize: tablePaginationOption.pageSize,\n          showSizeChanger: true,\n          total: agent_list?.total_count,\n          current: tablePaginationOption.current,\n          showTotal(total, range) {\n            return `${range[0]}-${range[1]} of ${total} items`;\n          },\n          pageSizeOptions: ['10', '20', '50'],\n          style: { marginRight: token.marginXS },\n        }}\n        onChange={({ pageSize, current }, filters, sorter) => {\n          startPageChangeTransition(() => {\n            if (\n              _.isNumber(current) &&\n              _.isNumber(pageSize) &&\n              pageSize !== tablePaginationOption.pageSize &&\n              current !== tablePaginationOption.current\n            ) {\n              setTablePaginationOption({\n                current,\n                pageSize,\n              });\n            }\n            setOrder(transformSorterToOrderString(sorter));\n          });\n        }}\n        loading={{\n          spinning:\n            isPendingPageChange || isPendingStatusFetch || isPendingFilter,\n          indicator: <LoadingOutlined />,\n        }}\n        {...tableProps}\n      />\n      <Flex\n        justify=\"end\"\n        style={{\n          padding: token.paddingXXS,\n        }}\n      >\n        <Button\n          type=\"text\"\n          icon={<SettingOutlined />}\n          onClick={() => {\n            setIsOpenColumnsSetting(true);\n          }}\n        />\n      </Flex>\n      <AgentDetailModal\n        agentDetailModalFrgmt={currentAgentInfo}\n        open={!!currentAgentInfo}\n        onRequestClose={() => setCurrentAgentInfo(null)}\n      />\n      <AgentSettingModal\n        agentSettingModalFrgmt={currentSettingAgent}\n        open={!!currentSettingAgent}\n        onRequestClose={(success) => {\n          if (success) {\n            updateFetchKeyInTransition();\n          }\n          setCurrentSettingAgent(null);\n        }}\n      />\n      <TableColumnsSettingModal\n        open={isOpenColumnsSetting}\n        onRequestClose={(values) => {\n          values?.selectedColumnKeys &&\n            setDisplayedColumnKeys(values?.selectedColumnKeys);\n          setIsOpenColumnsSetting(false);\n        }}\n        columns={columns}\n        displayedColumnKeys={displayedColumnKeys ? displayedColumnKeys : []}\n      />\n    </Flex>\n  );\n};\n\nexport default AgentList;\n","// import { offset_to_cursor } from \"../helper\";\nimport { LazyLoadQueryOptions } from '../helper/types';\nimport { SorterResult } from 'antd/lib/table/interface';\nimport _ from 'lodash';\nimport { useState } from 'react';\nimport {\n  fetchQuery,\n  GraphQLTaggedNode,\n  useRelayEnvironment,\n} from 'react-relay';\nimport {\n  ArrayParam,\n  NumberParam,\n  ObjectParam,\n  StringParam,\n  useQueryParams,\n} from 'use-query-params';\n\nexport type SorterInterface = Pick<SorterResult<any>, 'field' | 'order'>;\n\nexport const antdSorterResultToOrder = (\n  sorter: SorterInterface | SorterInterface[],\n) => {\n  const sorterArray = _.castArray(sorter).filter((s) => s.field);\n\n  return _.filter(\n    _.map(sorterArray, (s) =>\n      _.isNull(s.order)\n        ? undefined\n        : `${_.snakeCase(s.field as string).toUpperCase()}_${\n            s.order === 'ascend' ? 'ASC' : 'DESC'\n          }`,\n    ),\n  );\n};\n\nexport const orderToAntdSorterResult = (order: string[]) => {\n  return _.map(order, (o) => {\n    const names = o.split('_');\n    const orderKey = names.pop();\n    const field = _.camelCase(names.join('_'));\n    return {\n      field,\n      order: (orderKey === 'ASC' ? 'ascend' : 'descend') as\n        | 'ascend'\n        | 'descend'\n        | null,\n    };\n  });\n};\n\nexport const getSortOrderByName = (order: string[], name: string) => {\n  const sorterResult = orderToAntdSorterResult(order);\n  const sorter = _.find(sorterResult, (s) => s.field === name);\n  return sorter?.order;\n};\n\nexport const useRelayPaginationQueryOptions = <\n  // Q, N,\n  O,\n  F,\n>({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      first: pageSize,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n      order: order,\n      filter: filter,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n    // sorter?: SorterResult<N>[];\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n  }) => any;\n}) => {\n  const [isPending, setIsPending] = useState(false);\n\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    order: ArrayParam,\n    filter: ObjectParam,\n  });\n\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  //TODO: not use as\n  const order = (params.order || defaultVariables.order) as O[];\n  const filter = (params.filter || defaultVariables.filter) as F;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    // sorter: SorterResult<N>[],\n    newOrder: O[] = defaultVariables.order,\n    newFilter: F | undefined = defaultVariables.filter,\n    options?: {\n      withoutPendingStatus: boolean;\n    },\n  ) => {\n    if (options?.withoutPendingStatus !== true) {\n      setIsPending(true);\n    }\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setIsPending(false);\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          // eslint-disable-next-line\n          order: newOrder as [], // TODO: not use as []\n          // eslint-disable-next-line\n          filter: newFilter as {}, // TODO: not use as {}\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      isPending,\n      variables,\n      filter,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\nexport const useBAIPaginationQueryOptions = ({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      limit: pageSize,\n      offset: page > 1 ? (page - 1) * pageSize : 0,\n      filter: filter,\n      order: order,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  }) => any;\n}) => {\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    filter: StringParam,\n    order: StringParam,\n  });\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  const order = params.order || defaultVariables.order;\n  const filter = params.filter || defaultVariables.filter;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    newOrder: string | undefined = defaultVariables.order,\n    newFilter: string | undefined = defaultVariables.filter,\n  ) => {\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          order: newOrder,\n          filter: newFilter,\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      variables,\n      filter,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\ninterface BAIPaginationOption {\n  limit: number;\n  offset: number;\n  // filter?: string;\n  // order?: string;\n}\ninterface AntdBasicPaginationOption {\n  pageSize: number;\n  current: number;\n}\n\ninterface InitialPaginationOption\n  extends AntdBasicPaginationOption,\n    Omit<BAIPaginationOption, 'limit' | 'offset'> {}\nexport const useBAIPaginationOptionState = (\n  initialOptions: InitialPaginationOption,\n): {\n  baiPaginationOption: BAIPaginationOption;\n  tablePaginationOption: AntdBasicPaginationOption;\n  setTablePaginationOption: (pagination: AntdBasicPaginationOption) => void;\n} => {\n  const [options, setOptions] =\n    useState<AntdBasicPaginationOption>(initialOptions);\n  return {\n    baiPaginationOption: {\n      limit: options.pageSize,\n      offset:\n        options.current > 1 ? (options.current - 1) * options.pageSize : 0,\n    },\n    tablePaginationOption: {\n      pageSize: options.pageSize,\n      current: options.current,\n    },\n    setTablePaginationOption: (pagination) => {\n      setOptions((current) => ({\n        ...current,\n        ...pagination,\n      }));\n    },\n  };\n};\n","import AgentList from '../components/AgentList';\nimport { Card } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StringParam, useQueryParam, withDefault } from 'use-query-params';\n\ntype TabKey = 'agents' | 'storages' | 'resourceGroup';\n\ninterface ResourcesPageProps {}\n\nconst tabParam = withDefault(StringParam, 'agents');\n\nconst ResourcesPage: React.FC<ResourcesPageProps> = (props) => {\n  const { t } = useTranslation();\n  const [curTabKey, setCurTabKey] = useQueryParam('tab', tabParam, {\n    updateType: 'replace',\n  });\n\n  return (\n    <Card\n      activeTabKey={curTabKey}\n      onTabChange={(key) => setCurTabKey(key as TabKey)}\n      tabList={[\n        {\n          key: 'agents',\n          tab: t('agent.Agent'),\n        },\n        {\n          key: 'storages',\n          tab: t('general.StorageProxies'),\n        },\n        {\n          key: 'resourceGroup',\n          tab: t('general.ResourceGroup'),\n        },\n      ]}\n      styles={{\n        body: {\n          padding: 0,\n          paddingTop: 1,\n          overflow: 'hidden',\n        },\n      }}\n    >\n      {curTabKey === 'agents' ? (\n        // To remove duplicated border in the bordered table, we need to remove margin of the container.\n        <AgentList containerStyle={{ marginLeft: -1, marginRight: -1 }} />\n      ) : null}\n      {curTabKey === 'storages' ? (\n        // @ts-ignore\n        <backend-ai-storage-proxy-list active />\n      ) : null}\n      {curTabKey === 'resourceGroup' ? (\n        // @ts-ignore\n        <backend-ai-resource-group-list active />\n      ) : null}\n    </Card>\n  );\n};\n\nexport default ResourcesPage;\n"],"names":["useIntervalValue","calculator","delay","triggerKey","result","setResult","useState","useEffect","callback","savedCallback","useRef","current","id","setInterval","_savedCallback$curren","call","clearInterval","useInterval","newResult","_ref","title","valueLabel","percent","width","strokeColor","labelStyle","size","token","theme","useToken","fontSize","fontSizeSM","fontSizeLG","_jsxs","Flex","style","padding","border","concat","colorBorder","borderRadius","backgroundColor","colorBgContainerDisabled","_","flex","direction","align","children","_jsx","height","position","left","top","colorSuccess","opacity","zIndex","overflow","justify","Typography","Text","objectValues","values","length","React","map","value","label","color","objValue","idx","Tag","undefined","margin","marginRight","ACCELERATOR_UNIT_MAP","MWCIconWrap","_ref2","ResourceTypeIcon","_ref3","_resourceTypeIconSrcM","_resourceTypeIconSrcM2","_resourceTypeIconSrcM3","type","showIcon","showUnit","showTooltip","props","t","useTranslation","resourceTypeIconSrcMap","cpu","mem","content","alignSelf","src","alt","Tooltip","pointerEvents","_resourceSlotsDetails","_iSizeToSize","_resourceSlotsDetails2","_resourceSlotsDetails3","_iSizeToSize2","amount","extra","opts","hideTooltip","currentGroup","useCurrentResourceGroupValue","resourceSlotsDetails","useResourceSlotsDetails","gap","number_format","binary","Number","iSizeToSize","numberFixed","toString","round_length","parseFloat","toFixed","display_unit","shmem","open","onRequestClose","columns","displayedColumnKeys","modalProps","formRef","columnOptions","column","key","element","child","BAIModal","destroyOnClose","centered","onOk","_formRef$current","validateFields","then","catch","onCancel","Form","ref","preserve","initialValues","selectedColumnKeys","columnOption","layout","Item","name","marginBottom","Input","prefix","SearchOutlined","marginSM","placeholder","noStyle","shouldUpdate","prev","cur","searchInput","getFieldValue","searchKeyword","filteredColumns","includes","display","overflowY","Checkbox","Group","options","flexDirection","node","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","v23","hash","_parsedLiveStat$devic","_parsedLiveStat$devic2","_iSizeToSize$number","_iSizeToSize$number2","_iSizeToSize3","_iSizeToSize4","_iSizeToSize5","_parsedLiveStat$node","_parsedLiveStat$node$","_iSizeToSize6","_parsedLiveStat$node2","_parsedLiveStat$node3","agentDetailModalFrgmt","agent","useFragment","_AgentDetailModalFragment","require","parsedLiveStat","JSON","parse","live_stat","parsedAvailableSlots","available_slots","styles","body","footer","Row","gutter","Col","xs","sm","devices","cpu_util","Title","level","marginTop","human_readable_name","BAIProgressWithLabel","pct","mem_cur_bytes","number","numberUnit","net_tx","net_rx","_resourceSlotsDetails4","deviceName","index","_resourceSlotsDetails5","_value$","_value$2","_resourceSlotsDetails6","_resourceSlotsDetails7","_value$3","_value$4","agentSettingModalFrgmt","message","App","useApp","_AgentSettingModalFragment","commitModifyAgentSetting","isInFlightCommitModifyAgentSetting","useMutation","_AgentSettingModalMutation","confirmLoading","variables","schedulable","onCompleted","res","errors","_res$modify_agent","_res$modify_agent2","modify_agent","ok","error","msg","success","onError","err","valuePropName","Switch","filterProperties","propValue","onChange","propOnChange","defaultValue","otherProps","search","setSearch","useControllableValue","setValue","filtersFromValue","useMemo","split","filter","trim","_$find","property","operator","rest","valueParts","join","replace","parseFilterValue","propertyLabel","f","filterProperty","selectedProperty","setSelectedProperty","list","remove","push","resetList","getKey","useDynamicList","item","Search","addonBefore","Select","popupMatchSelectWidth","minWidth","onSearch","defaultOperator","filterValue","allowClear","e","target","wrap","closable","onClose","Button","icon","CloseCircleOutlined","colorTextSecondary","onClick","containerStyle","tableProps","isDarkMode","useThemeMode","currentAgentInfo","setCurrentAgentInfo","currentSettingAgent","setCurrentSettingAgent","isOpenColumnsSetting","setIsOpenColumnsSetting","baiClient","useSuspendedBackendaiClient","isPendingStatusFetch","startStatusFetchTransition","useTransition","isPendingRefresh","startRefreshTransition","isPendingPageChange","startPageChangeTransition","selectedStatus","setSelectedStatus","optimisticSelectedStatus","setOptimisticSelectedStatus","isPendingFilter","startFilterTransition","filterString","setFilterString","baiPaginationOption","tablePaginationOption","setTablePaginationOption","initialOptions","setOptions","limit","pageSize","offset","pagination","useBAIPaginationOptionState","order","setOrder","fetchKey","updateFetchKey","useUpdatableState","fetchPolicy","updateFetchKeyInTransition","agent_list","useLazyLoadQuery","_AgentListQuery","status","fixed","render","record","showSorterTooltip","rowScope","dataIndex","addr","sorter","regionData","platform","location","aws","amazon","azure","gcp","google","nbp","naver","openstack","dgx","local","DoubleTag","dayjs","format","BAIIntervalText","utils","elapsedTime","Date","now","parsedOccupiedSlots","occupied_slots","_parsedOccupiedSlots$","_parsedAvailableSlots","_iSizeToSize$numberFi","_iSizeToSize$numberFi2","_parsedOccupiedSlots$2","_parsedAvailableSlots2","sizeXS","colorError","parsedValue","liveStat","capacity","ratio","mem_util","numCores","statKey","_JSON$parse$node$disk","_JSON$parse","_JSON$parse$node","parsedDisk","disk","pctValue","bytesToGB","_parsedComputePlugins","_parsedComputePlugins2","_parsedComputePlugins3","parsedComputePlugins","compute_plugins","version","cuda","_Fragment","cuda_version","CheckCircleOutlined","colorPrimary","fontSizeXL","MinusCircleOutlined","InfoCircleOutlined","colorInfo","SettingOutlined","setDisplayedColumnKeys","useLocalStorageState","paddingXS","Segmented","BAIPropertyFilter","loading","ReloadOutlined","Table","bordered","scroll","x","rowKey","dataSource","items","showSizeChanger","total","total_count","showTotal","range","pageSizeOptions","marginXS","filters","transformSorterToOrderString","spinning","indicator","LoadingOutlined","paddingXXS","AgentDetailModal","AgentSettingModal","TableColumnsSettingModal","tabParam","withDefault","StringParam","curTabKey","setCurTabKey","useQueryParam","updateType","Card","activeTabKey","onTabChange","tabList","tab","paddingTop","AgentList","marginLeft","active"],"sourceRoot":""}