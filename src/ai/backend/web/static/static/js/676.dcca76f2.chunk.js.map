{"version":3,"file":"static/js/676.dcca76f2.chunk.js","mappings":"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","sources":["components/ImageEnvironmentSelectFormItems.tsx","components/__generated__/ImageEnvironmentSelectFormItemsQuery.graphql.ts"],"sourcesContent":["import {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\n// @ts-ignore\nimport cssRaw from './ImageEnvironmentSelectFormItems.css?raw';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  ImageEnvironmentSelectFormItemsQuery,\n  ImageEnvironmentSelectFormItemsQuery$data,\n} from './__generated__/ImageEnvironmentSelectFormItemsQuery.graphql';\nimport { Divider, Form, Input, RefSelectProps, Select, Tag, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport type Image = NonNullable<\n  NonNullable<ImageEnvironmentSelectFormItemsQuery$data>['images']\n>[0];\n\ntype ImageGroup = {\n  groupName: string;\n  environmentGroups: {\n    environmentName: string;\n    displayName: string;\n    prefix?: string;\n    images: Image[];\n  }[];\n};\n\nexport type ImageEnvironmentFormInput = {\n  environments: {\n    environment: string;\n    version: string;\n    image: Image | undefined;\n    manual?: string;\n    customizedTag?: string;\n  };\n};\n\ninterface ImageEnvironmentSelectFormItemsProps {\n  filter?: (image: Image) => boolean;\n  showPrivate?: boolean;\n}\n\nconst getImageFullName = (image: Image) => {\n  return image\n    ? `${image.registry}/${image.name}:${image.tag}@${image.architecture}`\n    : undefined;\n};\n\nfunction compareVersions(version1: string, version2: string): number {\n  const v1 = version1.split('.').map(Number);\n  const v2 = version2.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const num1 = v1[i] || 0;\n    const num2 = v2[i] || 0;\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nconst isPrivateImage = (image: Image) => {\n  return _.some(image?.labels, (label) => {\n    return (\n      label?.key === 'ai.backend.features' &&\n      label?.value?.split(' ').includes('private')\n    );\n  });\n};\n\nconst ImageEnvironmentSelectFormItems: React.FC<\n  ImageEnvironmentSelectFormItemsProps\n> = ({ filter, showPrivate }) => {\n  const form = Form.useFormInstance<ImageEnvironmentFormInput>();\n  const environments = Form.useWatch('environments', { form, preserve: true });\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [environmentSearch, setEnvironmentSearch] = useState('');\n  const [versionSearch, setVersionSearch] = useState('');\n  const { t } = useTranslation();\n  const [metadata, { getImageMeta }] = useBackendAIImageMetaData();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n\n  const envSelectRef = useRef<RefSelectProps>(null);\n  const versionSelectRef = useRef<RefSelectProps>(null);\n\n  const { images } = useLazyLoadQuery<ImageEnvironmentSelectFormItemsQuery>(\n    graphql`\n      query ImageEnvironmentSelectFormItemsQuery($installed: Boolean) {\n        images(is_installed: $installed) {\n          name\n          humanized_name\n          tag\n          registry\n          architecture\n          digest\n          installed\n          resource_limits {\n            key\n            min\n            max\n          }\n          labels {\n            key\n            value\n          }\n        }\n      }\n    `,\n    {\n      installed: true,\n    },\n    {\n      fetchPolicy: 'store-and-network',\n    },\n  );\n\n  // If not initial value, select first value\n  // auto select when relative field is changed\n  useEffect(() => {\n    if (!_.isEmpty(environments?.manual)) {\n      // set undefined fields related to environments when manual is set\n      if (environments.environment || environments.version) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n          },\n        });\n      }\n      return;\n    }\n\n    let matchedEnvironmentByVersion:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    let matchedImageByVersion: Image | undefined;\n    const version = form.getFieldValue('environments')?.version;\n\n    version &&\n      _.find(imageGroups, (group) => {\n        matchedEnvironmentByVersion = _.find(\n          group.environmentGroups,\n          (environment) => {\n            matchedImageByVersion = _.find(\n              environment.images,\n              (image) => getImageFullName(image) === version,\n            );\n            return !!matchedImageByVersion; // break iteration\n          },\n        );\n        return !!matchedEnvironmentByVersion; // break iteration\n      });\n\n    // if matchedEnvironmentByVersion is not existed, select first values\n    let nextEnvironment: ImageGroup['environmentGroups'][0] | undefined;\n    let nextImage: Image | undefined;\n    if (matchedEnvironmentByVersion) {\n      nextEnvironment = matchedEnvironmentByVersion;\n      nextImage = matchedImageByVersion;\n    } else {\n      nextEnvironment = imageGroups[0]?.environmentGroups[0];\n      nextImage = nextEnvironment?.images[0];\n    }\n\n    const customizedImageTag = _.find(\n      nextImage?.labels,\n      (item) =>\n        item !== null && item?.key === 'ai.backend.customized-image.name',\n    )?.value;\n\n    if (nextImage) {\n      if (\n        !matchedEnvironmentByVersion &&\n        baiClient._config.allow_manual_image_name_for_session &&\n        version\n      ) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n            manual: version,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      } else {\n        form.setFieldsValue({\n          environments: {\n            environment: nextEnvironment.environmentName,\n            version: getImageFullName(nextImage),\n            image: nextImage,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      }\n    } else if (baiClient._config.allow_manual_image_name_for_session) {\n      // if no image is available, only set manual if it's allowed\n      form.setFieldValue(['environments', 'manual'], version);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environments?.version, environments?.manual]); // environments?.environment,\n\n  const imageGroups: ImageGroup[] = useMemo(\n    () =>\n      _.chain(images)\n        .filter((image) => {\n          return (\n            (showPrivate ? true : !isPrivateImage(image)) &&\n            (filter ? filter(image) : true)\n          );\n        })\n        .groupBy((image) => {\n          // group by using `group` property of image info\n          return (\n            metadata?.imageInfo[getImageMeta(getImageFullName(image) || '').key]\n              ?.group || 'Custom Environments'\n          );\n        })\n        .map((images, groupName) => {\n          return {\n            groupName,\n            environmentGroups: _.chain(images)\n              // sub group by using (environment) `name` property of image info\n              .groupBy((image) => {\n                return (\n                  // metadata?.imageInfo[\n                  //   getImageMeta(getImageFullName(image) || \"\").key\n                  // ]?.name || image?.name\n                  image?.name\n                );\n              })\n              .map((images, environmentName) => {\n                const imageKey = environmentName.split('/')?.[1];\n                const displayName =\n                  imageKey && metadata?.imageInfo[imageKey]?.name;\n\n                return {\n                  environmentName,\n                  displayName:\n                    displayName ||\n                    (_.last(environmentName.split('/')) as string),\n                  prefix: _.chain(environmentName)\n                    .split('/')\n                    .dropRight(1)\n                    .join('/')\n                    .value(),\n                  images: images.sort((a, b) =>\n                    compareVersions(\n                      // latest version comes first\n                      b?.tag?.split('-')?.[0] ?? '',\n                      a?.tag?.split('-')?.[0] ?? '',\n                    ),\n                  ),\n                };\n              })\n\n              .sortBy((item) => item.displayName)\n              .value(),\n          };\n        })\n        .sortBy((item) => item.groupName)\n        .value(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [images, metadata, filter, showPrivate],\n  );\n\n  // support search image by full name\n  const { fullNameMatchedImage } = useMemo(() => {\n    let fullNameMatchedImage: Image | undefined;\n    let fullNameMatchedImageGroup:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    if (environmentSearch.length) {\n      _.chain(\n        imageGroups\n          .flatMap((group) => group.environmentGroups)\n          .find((envGroup) => {\n            fullNameMatchedImageGroup = envGroup;\n            fullNameMatchedImage = _.find(envGroup.images, (image) => {\n              return getImageFullName(image) === environmentSearch;\n            });\n            return !!fullNameMatchedImage;\n          }),\n      ).value();\n    }\n    return {\n      fullNameMatchedImage,\n      fullNameMatchedImageGroup,\n    };\n  }, [environmentSearch, imageGroups]);\n\n  return (\n    <>\n      <style>{cssRaw}</style>\n      <Form.Item\n        className=\"image-environment-select-form-item\"\n        name={['environments', 'environment']}\n        label={`${t('session.launcher.Environments')} / ${t(\n          'session.launcher.Version',\n        )}`}\n        rules={[{ required: _.isEmpty(environments?.manual) }]}\n        style={{ marginBottom: 10 }}\n      >\n        <Select\n          ref={envSelectRef}\n          showSearch\n          className=\"image-environment-select\"\n          // open={true}\n          // autoClearSearchValue\n          searchValue={environmentSearch}\n          onSearch={setEnvironmentSearch}\n          defaultActiveFirstOption={true}\n          optionFilterProp=\"filterValue\"\n          onChange={(value) => {\n            if (fullNameMatchedImage) {\n              form.setFieldsValue({\n                environments: {\n                  environment: fullNameMatchedImage?.name || '',\n                  version: getImageFullName(fullNameMatchedImage),\n                  image: fullNameMatchedImage,\n                },\n              });\n            }\n            // NOTE: when user set environment only then set the version to the first item\n            else {\n              const firstInListImage: Image = imageGroups\n                .flatMap((group) => group.environmentGroups)\n                .filter((envGroup) => envGroup.environmentName === value)[0]\n                .images[0];\n              form.setFieldsValue({\n                environments: {\n                  environment: firstInListImage?.name || '',\n                  version: getImageFullName(firstInListImage),\n                  image: firstInListImage,\n                },\n              });\n            }\n          }}\n          disabled={\n            baiClient._config.allow_manual_image_name_for_session &&\n            !_.isEmpty(environments?.manual)\n          }\n        >\n          {fullNameMatchedImage ? (\n            <Select.Option\n              value={fullNameMatchedImage?.name}\n              filterValue={getImageFullName(fullNameMatchedImage)}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"center\"\n                gap=\"xs\"\n                style={{ display: 'inline-flex' }}\n              >\n                <ImageMetaIcon\n                  image={getImageFullName(fullNameMatchedImage) || ''}\n                  style={{\n                    width: 15,\n                    height: 15,\n                  }}\n                />\n                {getImageFullName(fullNameMatchedImage)}\n              </Flex>\n            </Select.Option>\n          ) : (\n            _.map(imageGroups, (group) => {\n              return (\n                <Select.OptGroup key={group.groupName} label={group.groupName}>\n                  {_.map(group.environmentGroups, (environmentGroup) => {\n                    const firstImage = environmentGroup.images[0];\n                    const currentMetaImageInfo =\n                      metadata?.imageInfo[\n                        environmentGroup.environmentName.split('/')?.[1]\n                      ];\n\n                    const extraFilterValues: string[] = [];\n                    let environmentPrefixTag = null;\n                    if (\n                      environmentGroup.prefix &&\n                      !['lablup', 'cloud', 'stable'].includes(\n                        environmentGroup.prefix,\n                      )\n                    ) {\n                      extraFilterValues.push(environmentGroup.prefix);\n                      environmentPrefixTag = (\n                        <Tag color=\"purple\">\n                          <TextHighlighter keyword={environmentSearch}>\n                            {environmentGroup.prefix}\n                          </TextHighlighter>\n                        </Tag>\n                      );\n                    }\n\n                    const tagsFromMetaImageInfoLabel = _.map(\n                      currentMetaImageInfo?.label,\n                      (label) => {\n                        if (\n                          _.isUndefined(label.category) &&\n                          label.tag &&\n                          label.color\n                        ) {\n                          extraFilterValues.push(label.tag);\n                          return (\n                            <Tag color={label.color} key={label.tag}>\n                              <TextHighlighter\n                                keyword={environmentSearch}\n                                key={label.tag}\n                              >\n                                {label.tag}\n                              </TextHighlighter>\n                            </Tag>\n                          );\n                        }\n                        return null;\n                      },\n                    );\n                    return (\n                      <Select.Option\n                        key={environmentGroup.environmentName}\n                        value={environmentGroup.environmentName}\n                        filterValue={\n                          environmentGroup.displayName +\n                          '\\t' +\n                          extraFilterValues.join('\\t')\n                        }\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\" align=\"center\" gap=\"xs\">\n                            <ImageMetaIcon\n                              image={getImageFullName(firstImage) || ''}\n                              style={{\n                                width: 15,\n                                height: 15,\n                              }}\n                            />\n                            <TextHighlighter keyword={environmentSearch}>\n                              {environmentGroup.displayName}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            // style={{ flex: 1 }}\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {environmentPrefixTag}\n                            {tagsFromMetaImageInfoLabel}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  })}\n                </Select.OptGroup>\n              );\n            })\n          )}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prev, cur) =>\n          prev.environments?.environment !== cur.environments?.environment\n        }\n      >\n        {({ getFieldValue }) => {\n          let selectedEnvironmentGroup:\n            | ImageGroup['environmentGroups'][0]\n            | undefined;\n          _.find(imageGroups, (group) => {\n            return _.find(group.environmentGroups, (environment) => {\n              if (\n                environment.environmentName ===\n                getFieldValue('environments')?.environment\n              ) {\n                selectedEnvironmentGroup = environment;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          });\n          return (\n            <Form.Item\n              className=\"image-environment-select-form-item\"\n              name={['environments', 'version']}\n              rules={[{ required: _.isEmpty(environments?.manual) }]}\n            >\n              <Select\n                ref={versionSelectRef}\n                onChange={(value) => {\n                  const selectedImage = _.find(images, (image) => {\n                    return getImageFullName(image) === value;\n                  });\n                  form.setFieldValue(['environments', 'image'], selectedImage);\n                }}\n                showSearch\n                searchValue={versionSearch}\n                onSearch={setVersionSearch}\n                // autoClearSearchValue\n                optionFilterProp=\"filterValue\"\n                // optionLabelProp=\"label\"\n                dropdownRender={(menu) => (\n                  <>\n                    <Flex\n                      style={{\n                        fontWeight: token.fontWeightStrong,\n                        paddingLeft: token.paddingSM,\n                      }}\n                    >\n                      {t('session.launcher.Version')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Base')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Architecture')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Requirements')}\n                    </Flex>\n                    <Divider style={{ margin: '8px 0' }} />\n                    {menu}\n                  </>\n                )}\n                disabled={\n                  baiClient._config.allow_manual_image_name_for_session &&\n                  !_.isEmpty(environments?.manual)\n                }\n              >\n                {_.map(\n                  _.uniqBy(selectedEnvironmentGroup?.images, 'digest'),\n\n                  (image) => {\n                    const [version, tag, ...requirements] = image?.tag?.split(\n                      '-',\n                    ) || ['', '', ''];\n\n                    let tagAlias = metadata?.tagAlias[tag];\n                    if (!tagAlias) {\n                      for (const [key, replaceString] of Object.entries(\n                        metadata?.tagReplace || {},\n                      )) {\n                        const pattern = new RegExp(key);\n                        if (pattern.test(tag)) {\n                          tagAlias = tag?.replace(pattern, replaceString);\n                        }\n                      }\n                      if (!tagAlias) {\n                        tagAlias = tag;\n                      }\n                    }\n\n                    const extraFilterValues: string[] = [];\n                    const requirementTags = _.chain(requirements)\n                      .filter(\n                        (requirement) => !requirement.startsWith('customized_'),\n                      )\n                      .map((requirement, idx) => (\n                        <DoubleTag\n                          key={idx}\n                          values={_.split(\n                            metadata?.tagAlias[requirement] || requirement,\n                            ':',\n                          ).map((str) => {\n                            extraFilterValues.push(str);\n                            return (\n                              <TextHighlighter\n                                keyword={versionSearch}\n                                key={str}\n                              >\n                                {str}\n                              </TextHighlighter>\n                            );\n                          })}\n                        />\n                      ))\n                      .value();\n                    const imageLabels = image?.labels;\n                    if (imageLabels) {\n                      const customizedImageNameLabelIdx = _.findIndex(\n                        imageLabels,\n                        (item) =>\n                          item !== null &&\n                          item?.key === 'ai.backend.customized-image.name',\n                      );\n                      if (\n                        customizedImageNameLabelIdx &&\n                        imageLabels[customizedImageNameLabelIdx]\n                      ) {\n                        const tag =\n                          imageLabels[customizedImageNameLabelIdx]?.value || '';\n                        extraFilterValues.push('Customized');\n                        extraFilterValues.push(tag);\n                        requirementTags.push(\n                          <DoubleTag\n                            key={requirementTags.length + 1}\n                            values={[\n                              {\n                                label: (\n                                  <TextHighlighter\n                                    keyword={versionSearch}\n                                    key=\"Customized\"\n                                  >\n                                    Customized\n                                  </TextHighlighter>\n                                ),\n                                color: 'cyan',\n                              },\n                              {\n                                label: (\n                                  <TextHighlighter\n                                    keyword={versionSearch}\n                                    key={tag}\n                                  >\n                                    {tag}\n                                  </TextHighlighter>\n                                ),\n                                color: 'cyan',\n                              },\n                            ]}\n                          />,\n                        );\n                      }\n                    }\n                    return (\n                      <Select.Option\n                        key={image?.digest}\n                        value={getImageFullName(image)}\n                        filterValue={[\n                          version,\n                          tagAlias,\n                          image?.architecture,\n                          ...extraFilterValues,\n                        ].join('\\t')}\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\">\n                            <TextHighlighter keyword={versionSearch}>\n                              {version}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {tagAlias}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.architecture}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {requirementTags || '-'}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  },\n                )}\n              </Select>\n            </Form.Item>\n          );\n        }}\n      </Form.Item>\n      <Form.Item\n        label={t('session.launcher.ManualImageName')}\n        name={['environments', 'manual']}\n        style={{\n          display: baiClient._config.allow_manual_image_name_for_session\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Input\n          allowClear\n          onChange={(value) => {\n            if (!_.isEmpty(value)) {\n              form.setFieldsValue({\n                environments: {\n                  environment: undefined,\n                  version: undefined,\n                  image: undefined,\n                },\n              });\n            } else {\n            }\n          }}\n        />\n      </Form.Item>\n      <Form.Item noStyle hidden name={['environments', 'image']}>\n        <Input />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ImageEnvironmentSelectFormItems;\n","/**\n * @generated SignedSource<<eb85d3c5b8be4b647315f0e92797a0ce>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ImageEnvironmentSelectFormItemsQuery$variables = {\n  installed?: boolean | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery$data = {\n  readonly images: ReadonlyArray<{\n    readonly architecture: string | null | undefined;\n    readonly digest: string | null | undefined;\n    readonly humanized_name: string | null | undefined;\n    readonly installed: boolean | null | undefined;\n    readonly labels: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly name: string | null | undefined;\n    readonly registry: string | null | undefined;\n    readonly resource_limits: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly max: string | null | undefined;\n      readonly min: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly tag: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery = {\n  response: ImageEnvironmentSelectFormItemsQuery$data;\n  variables: ImageEnvironmentSelectFormItemsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"installed\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"key\",\n  \"storageKey\": null\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"is_installed\",\n        \"variableName\": \"installed\"\n      }\n    ],\n    \"concreteType\": \"Image\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"images\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"humanized_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"tag\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"registry\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"architecture\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"digest\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"installed\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ResourceLimit\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"resource_limits\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"min\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"max\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"labels\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"value\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ea71f4a3948d4742dd6bb11ef80a8300\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageEnvironmentSelectFormItemsQuery(\\n  $installed: Boolean\\n) {\\n  images(is_installed: $installed) {\\n    name\\n    humanized_name\\n    tag\\n    registry\\n    architecture\\n    digest\\n    installed\\n    resource_limits {\\n      key\\n      min\\n      max\\n    }\\n    labels {\\n      key\\n      value\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"33367bd6e1532b42b61629ef9d3dc46b\";\n\nexport default node;\n"],"names":["getImageFullName","image","concat","registry","name","tag","architecture","undefined","_ref","filter","showPrivate","form","Form","useFormInstance","environments","useWatch","preserve","baiClient","useSuspendedBackendaiClient","environmentSearch","setEnvironmentSearch","useState","versionSearch","setVersionSearch","t","useTranslation","metadata","getImageMeta","useBackendAIImageMetaData","token","theme","useToken","isDarkMode","useThemeMode","envSelectRef","useRef","versionSelectRef","images","useLazyLoadQuery","_ImageEnvironmentSelectFormItemsQuery","require","installed","fetchPolicy","useEffect","_form$getFieldValue","_$find","_nextImage","_","manual","environment","version","setFieldsValue","matchedEnvironmentByVersion","matchedImageByVersion","getFieldValue","nextEnvironment","nextImage","_imageGroups$","_nextEnvironment","imageGroups","group","environmentGroups","customizedImageTag","labels","item","key","value","_config","allow_manual_image_name_for_session","customizedTag","environmentName","setFieldValue","useMemo","label","_label$value","split","includes","isPrivateImage","groupBy","_metadata$imageInfo$g","imageInfo","map","groupName","_environmentName$spli","_metadata$imageInfo$i","imageKey","displayName","prefix","dropRight","join","sort","a","b","_b$tag$split$","_b$tag","_b$tag$split","_a$tag$split$","_a$tag","_a$tag$split","version1","version2","v1","Number","v2","i","Math","max","length","num1","num2","compareVersions","sortBy","fullNameMatchedImage","fullNameMatchedImageGroup","flatMap","find","envGroup","_jsxs","_Fragment","children","_jsx","Item","className","rules","required","style","marginBottom","Select","ref","showSearch","searchValue","onSearch","defaultActiveFirstOption","optionFilterProp","onChange","firstInListImage","disabled","Option","filterValue","Flex","direction","align","gap","display","ImageMetaIcon","width","height","OptGroup","environmentGroup","_environmentGroup$env","firstImage","currentMetaImageInfo","extraFilterValues","environmentPrefixTag","push","Tag","color","TextHighlighter","keyword","tagsFromMetaImageInfoLabel","category","justify","marginLeft","marginXS","flexShrink","noStyle","shouldUpdate","prev","cur","_prev$environments","_cur$environments","_ref2","_selectedEnvironmentG","selectedEnvironmentGroup","_getFieldValue","selectedImage","dropdownRender","menu","fontWeight","fontWeightStrong","paddingLeft","paddingSM","Divider","type","margin","_image$tag","requirements","tagAlias","replaceString","Object","entries","tagReplace","pattern","RegExp","test","replace","requirementTags","requirement","startsWith","idx","DoubleTag","values","str","imageLabels","customizedImageNameLabelIdx","_imageLabels$customiz","digest","Input","allowClear","hidden","node","v0","hash"],"sourceRoot":""}