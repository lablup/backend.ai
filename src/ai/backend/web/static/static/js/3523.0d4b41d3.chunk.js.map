{"version":3,"file":"static/js/3523.0d4b41d3.chunk.js","mappings":"wNAKA,MAAMA,EAAgCC,EAAAA,MACpC,IAAM,kCAwBR,EArB4CC,KAC1C,MAAOC,EAAkBC,IAAuBC,EAAAA,EAAAA,eAC9C,aACAC,EAAAA,cAEI,MAAEC,IAAUC,EAAAA,EAAAA,KAElB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAsB,CAAAC,UACrBF,EAAAA,EAAAA,KAACT,EAA6B,CAC5BY,KAA2B,SAArBT,EACNU,eAAiBC,IACVA,GAAqB,IAAVP,GACdH,EAAoB,KAAM,YAC5B,KAGmB,C,gDClB7B,MA0CA,EA1CsEW,IAE/D,IAFgE,SACrEJ,GACDI,EAEC,MAAMC,EAAef,EAAAA,SAAegB,KAAKN,GACnCO,EAAcF,EAAaG,MAAMP,MAGhCQ,EAASC,IAAcC,EAAAA,EAAAA,UAASJ,GAUvC,IAPAK,EAAAA,EAAAA,kBAAgB,KACVL,GACFG,GAAW,EACb,GACC,CAACH,KAGCE,EACH,OAAO,KAIT,MAAMI,EAAqBR,EAAaG,MAAMM,WAgB9C,OAJoBxB,EAAAA,aAAmBe,EAAc,CACnDS,WAVsD,WAClDD,GACFA,KAAmBE,WAGrBL,GAAW,EACb,GAOkB,C","sources":["components/FolderInvitationResponseModalOpener.tsx","components/UnmountModalAfterClose.tsx"],"sourcesContent":["import { useVFolderInvitationsValue } from '../hooks/useVFolderInvitations';\nimport UnmountModalAfterClose from './UnmountModalAfterClose';\nimport React from 'react';\nimport { useQueryParam, StringParam } from 'use-query-params';\n\nconst FolderInvitationResponseModal = React.lazy(\n  () => import('./FolderInvitationResponseModal'),\n);\n\nconst FolderInvitationResponseModalOpener = () => {\n  const [isInvitationOpen, setIsInvitationOpen] = useQueryParam(\n    'invitation',\n    StringParam,\n  );\n  const { count } = useVFolderInvitationsValue();\n\n  return (\n    <UnmountModalAfterClose>\n      <FolderInvitationResponseModal\n        open={isInvitationOpen === 'true'}\n        onRequestClose={(success) => {\n          if (!success || count === 1) {\n            setIsInvitationOpen(null, 'replaceIn');\n          }\n        }}\n      />\n    </UnmountModalAfterClose>\n  );\n};\n\nexport default FolderInvitationResponseModalOpener;\n","import { BAIModalProps } from './BAIModal';\nimport { ModalProps } from 'antd';\nimport React, { useState, useLayoutEffect } from 'react';\n\ninterface UnmountModalAfterCloseProps {\n  children: React.ReactElement<BAIModalProps> | React.ReactElement<ModalProps>;\n}\n\nconst UnmountModalAfterClose: React.FC<UnmountModalAfterCloseProps> = ({\n  children,\n}) => {\n  // Ensure there is only one child element\n  const modalElement = React.Children.only(children);\n  const isModalOpen = modalElement.props.open;\n\n  // Manage internal rendering state\n  const [isMount, setIsMount] = useState(isModalOpen);\n\n  // Update internal state when the child's open prop becomes true\n  useLayoutEffect(() => {\n    if (isModalOpen) {\n      setIsMount(true);\n    }\n  }, [isModalOpen]);\n\n  // Return null if the modal should not be rendered\n  if (!isMount) {\n    return null;\n  }\n\n  // Preserve the original afterClose callback if it exists\n  const originalAfterClose = modalElement.props.afterClose;\n\n  // New handler to intercept afterClose\n  const handleModalAfterClose: ModalProps['afterClose'] = (...args) => {\n    if (originalAfterClose) {\n      originalAfterClose(...args);\n    }\n    // Set internal state to false after the exit animation completes\n    setIsMount(false);\n  };\n\n  // Clone the child element, keeping the open prop and replacing afterClose with the new handler\n  const clonedChild = React.cloneElement(modalElement, {\n    afterClose: handleModalAfterClose,\n  });\n\n  return clonedChild;\n};\n\nexport default UnmountModalAfterClose;\n"],"names":["FolderInvitationResponseModal","React","FolderInvitationResponseModalOpener","isInvitationOpen","setIsInvitationOpen","useQueryParam","StringParam","count","useVFolderInvitationsValue","_jsx","UnmountModalAfterClose","children","open","onRequestClose","success","_ref","modalElement","only","isModalOpen","props","isMount","setIsMount","useState","useLayoutEffect","originalAfterClose","afterClose","arguments"],"sourceRoot":""}