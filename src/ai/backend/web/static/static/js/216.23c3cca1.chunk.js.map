{"version":3,"file":"static/js/216.23c3cca1.chunk.js","mappings":"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","sources":["components/CopyableCodeText.tsx","components/EndpointStatusTag.tsx","components/Flex.tsx","components/ImageMetaIcon.tsx","components/ModelServiceSettingModal.tsx","components/__generated__/EndpointStatusTagFragment.graphql.ts","components/__generated__/ModelServiceSettingModal_endpoint.graphql.ts","components/__generated__/ServingRouteErrorModalFragment.graphql.ts","helper/index.tsx","hooks/index.ts","hooks/reactQueryAlias.tsx","components/ServingRouteErrorModal.tsx","pages/RoutingListPage.tsx","pages/__generated__/RoutingListPageQuery.graphql.ts","../node_modules/@ant-design/icons-svg/es/asn/ReloadOutlined.js","../node_modules/@ant-design/icons/es/icons/ReloadOutlined.js"],"sourcesContent":["import React, { PropsWithChildren } from \"react\";\nimport { Typography } from \"antd\";\n\ninterface Props extends PropsWithChildren {\n  text?: string;\n}\n\nconst CopyableCodeText: React.FC<Props> = ({ text, children }) => {\n  return (\n    <Typography.Text copyable code>\n      {text || children}\n    </Typography.Text>\n  );\n};\n\nexport default CopyableCodeText;\n","import { Tag } from \"antd\";\nimport React from \"react\";\nimport { useFragment } from \"react-relay\";\nimport { EndpointStatusTagFragment$key } from \"./__generated__/EndpointStatusTagFragment.graphql\";\nimport graphql from \"babel-plugin-relay/macro\";\n\ninterface EndpointStatusTagProps {\n  endpointFrgmt: EndpointStatusTagFragment$key | null;\n}\nconst EndpointStatusTag: React.FC<EndpointStatusTagProps> = ({\n  endpointFrgmt,\n}) => {\n  const endpoint = useFragment(\n    graphql`\n      fragment EndpointStatusTagFragment on Endpoint {\n        id\n        status\n      }\n    `,\n    endpointFrgmt\n  );\n  let color = \"default\";\n  switch (endpoint?.status?.toUpperCase()) {\n    case \"RUNNING\":\n      color = \"success\";\n      break;\n    // case 'TERMINATED':\n    //   color = 'default';\n    //   break;\n  }\n\n  return <Tag color={color}>{endpoint?.status}</Tag>;\n};\n\nexport default EndpointStatusTag;\n","import { theme } from \"antd\";\nimport React, { PropsWithChildren } from \"react\";\n\nexport interface FlexProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"dir\">,\n    PropsWithChildren {\n  direction?: \"row\" | \"row-reverse\" | \"column\" | \"column-reverse\";\n  wrap?: \"nowrap\" | \"wrap\" | \"wrap-reverse\";\n  justify?: \"start\" | \"end\" | \"center\" | \"between\" | \"around\";\n  // | \"evenly\";\n  align?: \"start\" | \"end\" | \"center\" | \"baseline\" | \"stretch\";\n  gap?: number | \"xxs\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"xxl\";\n}\n\nconst Flex: React.FC<FlexProps> = ({\n  direction = \"row\",\n  wrap = \"nowrap\",\n  justify = \"flex-start\",\n  align = \"center\",\n  gap = 0,\n  style,\n  children,\n  ...restProps\n}) => {\n  const { token } = theme.useToken();\n\n  const transferConst = [justify, align];\n  const transferConstStyle = transferConst?.map((el) => {\n    let tempTxt;\n    switch (el) {\n      case \"start\":\n        tempTxt = \"flex-start\";\n        break;\n      case \"end\":\n        tempTxt = \"flex-end\";\n        break;\n      case \"between\":\n        tempTxt = \"space-between\";\n        break;\n      case \"around\":\n        tempTxt = \"space-around\";\n        break;\n      default:\n        tempTxt = el;\n        break;\n    }\n\n    return tempTxt;\n  });\n  const flexStyle: React.CSSProperties = {\n    display: \"flex\",\n    flexDirection: direction,\n    flexWrap: wrap,\n    justifyContent: transferConstStyle[0],\n    alignItems: transferConstStyle[1],\n    ...style,\n  };\n\n  return (\n    <div\n      style={{\n        alignItems: \"stretch\",\n        backgroundColor: \"transparent\",\n        border: \"0 solid black\",\n        boxSizing: \"border-box\",\n        display: \"flex\",\n        flexBasis: \"auto\",\n        flexDirection: \"column\",\n        flexShrink: 0,\n        listStyle: \"none\",\n        margin: 0,\n        minHeight: 0,\n        minWidth: 0,\n        padding: 0,\n        position: \"relative\",\n        textDecoration: \"none\",\n        gap:\n          // @ts-ignore\n          typeof gap === \"string\" ? token[\"padding\" + gap.toUpperCase()] : gap,\n        ...flexStyle,\n      }}\n      {...restProps}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Flex;\n","import React from \"react\";\nimport { useBackendaiImageMetaData } from \"../hooks\";\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n  alt?: string | null;\n}> = ({ image, style = {} }, bordered, alt = \"\") => {\n  const [, { getImageIcon }] = useBackendaiImageMetaData();\n\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: \"1.5em\",\n        height: \"1.5em\",\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","import React from \"react\";\n\nimport { Form, InputNumber, Modal, ModalProps, theme } from \"antd\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSuspendedBackendaiClient } from \"../hooks\";\nimport { baiSignedRequestWithPromise } from \"../helper\";\nimport { useTanMutation } from \"../hooks/reactQueryAlias\";\nimport Flex from \"./Flex\";\nimport { useFragment } from \"react-relay\";\nimport graphql from \"babel-plugin-relay/macro\";\nimport { ModelServiceSettingModal_endpoint$key } from \"./__generated__/ModelServiceSettingModal_endpoint.graphql\";\n\ninterface Props extends ModalProps {\n  endpointFrgmt: ModelServiceSettingModal_endpoint$key | null;\n  onRequestClose: (success?: boolean) => void;\n}\n\ninterface ServiceSettingFormInput {\n  desired_session_count: number;\n}\n\nconst ModelServiceSettingModal: React.FC<Props> = ({\n  onRequestClose,\n  endpointFrgmt,\n  ...props\n}) => {\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n\n  const endpoint = useFragment(\n    graphql`\n      fragment ModelServiceSettingModal_endpoint on Endpoint {\n        endpoint_id\n        desired_session_count\n      }\n    `,\n    endpointFrgmt\n  );\n\n  const mutationToUpdateService = useTanMutation({\n    mutationFn: (values: ServiceSettingFormInput) => {\n      const body = {\n        to: values.desired_session_count,\n      };\n      return baiSignedRequestWithPromise({\n        method: \"POST\",\n        url: `/services/${endpoint?.endpoint_id}/scale`,\n        body,\n        client: baiClient,\n      });\n    },\n  });\n\n  // Apply any operation after clicking OK button\n  const handleOk = (e: React.MouseEvent<HTMLElement>) => {\n    form\n      .validateFields()\n      .then((values) => {\n        mutationToUpdateService.mutate(values, {\n          onSuccess: () => {\n            console.log(\"service updated\");\n            onRequestClose(true);\n          },\n          onError: (error) => {\n            console.log(error);\n            // TODO: show error message\n          },\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // Apply any operation after clicking Cancel button\n  const handleCancel = () => {\n    // console.log(\"Clicked cancel button\");\n    onRequestClose();\n  };\n\n  return (\n    <Modal\n      {...props}\n      style={{\n        zIndex: 10000,\n      }}\n      destroyOnClose\n      onOk={handleOk}\n      onCancel={handleCancel}\n      okButtonProps={{\n        loading: mutationToUpdateService.isLoading,\n      }}\n      title={t(\"modelService.EditModelService\")}\n    >\n      <Flex direction=\"row\" align=\"stretch\" justify=\"around\">\n        <Form\n          form={form}\n          preserve={false}\n          validateTrigger={[\"onChange\", \"onBlur\"]}\n          initialValues={{\n            desired_session_count: endpoint?.desired_session_count,\n          }}\n          style={{ marginBottom: token.marginLG, marginTop: token.margin }}\n        >\n          <Form.Item\n            name=\"desired_session_count\"\n            label={t(\"modelService.DesiredSessionCount\")}\n            rules={[\n              {\n                pattern: /^[0-9]+$/,\n                message: t(\"modelService.OnlyAllowsNonNegativeIntegers\"),\n              },\n            ]}\n          >\n            <InputNumber type=\"number\" min={0} />\n          </Form.Item>\n        </Form>\n      </Flex>\n    </Modal>\n  );\n};\n\nexport default ModelServiceSettingModal;\n","/**\n * @generated SignedSource<<8a960e7428e05bcb25f322a53888680e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type EndpointStatusTagFragment$data = {\n  readonly id: string | null;\n  readonly status: string | null;\n  readonly \" $fragmentType\": \"EndpointStatusTagFragment\";\n};\nexport type EndpointStatusTagFragment$key = {\n  readonly \" $data\"?: EndpointStatusTagFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"EndpointStatusTagFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"EndpointStatusTagFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Endpoint\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"3b31efa50b55edddcb210b59003dc479\";\n\nexport default node;\n","/**\n * @generated SignedSource<<b2872924ef54e9c1706ca51d19289a4f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ModelServiceSettingModal_endpoint$data = {\n  readonly desired_session_count: number | null;\n  readonly endpoint_id: any | null;\n  readonly \" $fragmentType\": \"ModelServiceSettingModal_endpoint\";\n};\nexport type ModelServiceSettingModal_endpoint$key = {\n  readonly \" $data\"?: ModelServiceSettingModal_endpoint$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ModelServiceSettingModal_endpoint\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ModelServiceSettingModal_endpoint\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"endpoint_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"desired_session_count\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Endpoint\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"881f18324b27eba6ff0fcfb83ae241d2\";\n\nexport default node;\n","/**\n * @generated SignedSource<<22d692b42fd93a1f67c1061a41bf4fb0>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ServingRouteErrorModalFragment$data = {\n  readonly errors: ReadonlyArray<{\n    readonly repr: string;\n  }>;\n  readonly session_id: any;\n  readonly \" $fragmentType\": \"ServingRouteErrorModalFragment\";\n};\nexport type ServingRouteErrorModalFragment$key = {\n  readonly \" $data\"?: ServingRouteErrorModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ServingRouteErrorModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ServingRouteErrorModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"session_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"InferenceSessionErrorInfo\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"errors\",\n      \"plural\": true,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"repr\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"InferenceSessionError\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"a1003e0f75387e665f4407909eea5ff6\";\n\nexport default node;\n","import { useSuspendedBackendaiClient } from \"../hooks\";\n\nexport const newLineToBrElement = (\n  text: string,\n  separatorRegExp = /(<br\\s*\\/?>|\\n)/\n) => {\n  return text.split(separatorRegExp).map((line, index) => {\n    return line.match(separatorRegExp) ? <br key={index} /> : line;\n  });\n};\n\nexport const baiSignedRequestWithPromise = ({\n  method,\n  url,\n  body = null,\n  client,\n}: {\n  method: string;\n  url: string;\n  body?: any;\n  client: any;\n}) => {\n  let request = client?.newSignedRequest(method, url, body, null);\n  return client?._wrapWithPromise(request);\n};\n\nexport const useBaiSignedRequestWithPromise = () => {\n  const baiClient = useSuspendedBackendaiClient();\n  return ({\n    method,\n    url,\n    body = null,\n  }: {\n    method: string;\n    url: string;\n    body?: any;\n  }) =>\n    baiSignedRequestWithPromise({\n      method,\n      url,\n      body,\n      client: baiClient,\n    });\n};\n\n/**\n * Convert file size with binary unit to human readable unit and value\n *\n * @param {number} bytes\n * @param {number} decimalPoint decimal point set to 2 as a default\n * @return {string} converted file size to human readable value\n */\nexport const _humanReadableDecimalSize = (bytes = 0, decimalPoint = 2) => {\n  if (bytes === 0) return \"0 Bytes\";\n  const k = Math.pow(10, 3);\n  decimalPoint = decimalPoint < 0 ? 0 : decimalPoint;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"];\n  let i = Math.floor(Math.log(Math.round(bytes)) / Math.log(k));\n  i = i < 0 ? 0 : i; // avoid negative value\n  return (\n    parseFloat((bytes / Math.pow(k, i)).toFixed(decimalPoint)) + \" \" + sizes[i]\n  );\n};\n\nexport const _humanReadableBinarySize = (\n  bytes = 0,\n  decimalPoint = 2,\n  compact = false\n) => {\n  if (!bytes) return 0;\n  if (typeof bytes === \"string\") bytes = parseInt(bytes);\n  const k = Math.pow(2, 10);\n  let i;\n  let unitList;\n  decimalPoint = decimalPoint < 0 || compact ? 0 : decimalPoint;\n  i = Math.floor(Math.log(Math.round(bytes)) / Math.log(k));\n  i = i < 0 ? 0 : i; // avoid negative value\n  if (compact) {\n    unitList = [\"\", \"Ki\", \"Mi\", \"Gi\", \"Ti\", \"Pi\", \"Ei\"];\n  } else {\n    unitList = [\"Bytes\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\"];\n  }\n  return (\n    parseFloat((bytes / Math.pow(k, i)).toFixed(decimalPoint)) +\n    \" \" +\n    unitList[i]\n  );\n};\n\nexport const GBToBytes = (value = 0) => {\n  const gigabyte = Math.pow(10, 9);\n  return Math.round(gigabyte * value);\n};\n\nexport const bytesToGB = (\n  bytes: number,\n  decimalPoint = 2,\n  nullStr: string = \"-\"\n) => {\n  if (bytes === null || bytes === undefined) return nullStr;\n  if (!bytes) return bytes;\n  return (bytes / 10 ** 9).toFixed(decimalPoint);\n};\n\nexport type QuotaScopeType = \"project\" | \"user\";\nexport const addQuotaScopeTypePrefix = (type: QuotaScopeType, str: string) => {\n  if (str === \"\" || str === undefined) return \"\";\n  if (str.startsWith(`${type}:`)) return str;\n  return `${type}:${str}`;\n};\n\nexport const usageIndicatorColor = (percentage: number) => {\n  return percentage < 70\n    ? \"rgba(58, 178, 97, 1)\"\n    : percentage < 90\n    ? \"rgb(223, 179, 23)\"\n    : \"#ef5350\";\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nexport const useBackendAIConnectedState = () => {\n  const [time, setTime] = useState<string>();\n\n  useEffect(() => {\n    const listener = () => {\n      setTime(new Date().toISOString());\n    };\n    document.addEventListener(\"backend-ai-connected\", listener);\n    return () => {\n      document.removeEventListener(\"backend-ai-connected\", listener);\n    };\n  }, []);\n\n  return time;\n};\n\nexport const useDateISOState = (initialValue?: string) => {\n  const [value, setValue] = useState(initialValue || new Date().toISOString());\n\n  const update = (newValue?: string) => {\n    setValue(newValue || new Date().toISOString());\n  };\n  return [value, update] as const;\n};\n\nexport const useUpdatableState = (initialValue: string) => {\n  return useDateISOState(initialValue);\n};\n\nexport const useCurrentDomainValue = () => {\n  const baiClient = useSuspendedBackendaiClient();\n  return baiClient._config.domainName;\n};\n\nexport const useCurrentProjectValue = () => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [project, _setProject] = useState<{\n    name: string;\n    id: string;\n  }>({\n    name: baiClient.current_group,\n    id: baiClient.groupIds[baiClient.current_group],\n  });\n\n  useEffect(() => {\n    const listener = (e: any) => {\n      const newProjectName = e.detail;\n      _setProject({\n        name: newProjectName,\n        id: baiClient.groupIds[newProjectName],\n      });\n    };\n    document.addEventListener(\"backend-ai-group-changed\", listener);\n    return () => {\n      document.removeEventListener(\"backend-ai-group-changed\", listener);\n    };\n  });\n\n  return project;\n};\n\nexport const useAnonymousBackendaiClient = ({\n  api_endpoint,\n}: {\n  api_endpoint: string;\n}) => {\n  const client = useMemo(() => {\n    //@ts-ignore\n    const clientConfig = new globalThis.BackendAIClientConfig(\n      \"\",\n      \"\",\n      api_endpoint,\n      \"SESSION\"\n    );\n    //@ts-ignore\n    return new globalThis.BackendAIClient(clientConfig, \"Backend.AI Console.\");\n  }, [api_endpoint]);\n\n  return client;\n};\n\nexport const useSuspendedBackendaiClient = () => {\n  const { data: client } = useQuery<any>({\n    queryKey: \"backendai-client-for-suspense\",\n    queryFn: () =>\n      new Promise((resolve) => {\n        if (\n          //@ts-ignore\n          typeof globalThis.backendaiclient === \"undefined\" ||\n          //@ts-ignore\n          globalThis.backendaiclient === null ||\n          //@ts-ignore\n          globalThis.backendaiclient.ready === false\n        ) {\n          const listener = () => {\n            // @ts-ignore\n            resolve(globalThis.backendaiclient);\n            document.removeEventListener(\"backend-ai-connected\", listener);\n          };\n          document.addEventListener(\"backend-ai-connected\", listener);\n        } else {\n          //@ts-ignore\n          return resolve(globalThis.backendaiclient);\n        }\n      }),\n    retry: false,\n    // enabled: false,\n    suspense: true,\n  });\n\n  return client;\n};\n\ninterface ImageMetadata {\n  name: string;\n  description: string;\n  group: string;\n  tags: string[];\n  icon: string;\n  label: {\n    category: string;\n    tag: string;\n    color: string;\n  }[];\n}\n\nexport const useBackendaiImageMetaData = () => {\n  const { data: metadata } = useQuery({\n    queryKey: \"backendai-metadata-for-suspense\",\n    queryFn: () => {\n      return fetch(\"resources/image_metadata.json\")\n        .then((response) => response.json())\n        .then(\n          (json: {\n            imageInfo: {\n              [key: string]: ImageMetadata;\n            };\n            tagAlias: {\n              [key: string]: string;\n            };\n            tagReplace: {\n              [key: string]: string;\n            };\n          }) => {\n            return json;\n          }\n        );\n    },\n    suspense: true,\n    retry: false,\n  });\n\n  const getImageMeta = (imageName: string) => {\n    // cr.backend.ai/multiarch/python:3.9-ubuntu20.04\n    // key = python, tags = [3.9, ubuntu20.04]\n    if (!imageName) {\n      return {\n        key: \"\",\n        tags: [],\n      };\n    }\n    const specs = imageName.split(\"/\");\n\n    const [key, tag] = (specs[2] || specs[1]).split(\":\");\n    const tags = tag.split(\"-\");\n\n    return { key, tags };\n  };\n\n  return [\n    metadata,\n    {\n      getImageAliasName: (imageName: string) => {\n        const { key } = getImageMeta(imageName);\n        return metadata?.imageInfo[key].name || key;\n      },\n      getImageIcon: (imageName?: string | null, path = \"resources/icons/\") => {\n        if (!imageName) return \"default.png\";\n        const { key } = getImageMeta(imageName);\n        return (\n          path +\n          (metadata?.imageInfo[key]?.icon !== undefined\n            ? metadata?.imageInfo[key]?.icon\n            : \"default.png\")\n        );\n      },\n      getImageTags: (imageName: string) => {\n        // const { key, tags } = getImageMeta(imageName);\n      },\n      getBaseVersion: (imageName: string) => {\n        const { tags } = getImageMeta(imageName);\n        return tags[0];\n      },\n      getBaseImage: (imageName: string) => {\n        const { tags } = getImageMeta(imageName);\n        return tags[1];\n      },\n      getImageMeta,\n    },\n  ] as const;\n};\n","import { useQuery, useMutation } from \"react-query\";\n\nexport const useTanQuery = useQuery;\nexport const useTanMutation = useMutation;\n","import React from \"react\";\n\nimport {\n  Modal,\n  ModalProps,\n  Descriptions,\n  DescriptionsProps,\n  Button,\n} from \"antd\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFragment } from \"react-relay\";\nimport graphql from \"babel-plugin-relay/macro\";\nimport { ServingRouteErrorModalFragment$key } from \"./__generated__/ServingRouteErrorModalFragment.graphql\";\nimport CopyableCodeText from \"./CopyableCodeText\";\n\ninterface Props extends Omit<ModalProps, \"onOk\" | \"onClose\"> {\n  inferenceSessionErrorFrgmt: ServingRouteErrorModalFragment$key | null;\n  onRequestClose: () => void;\n}\n\nconst ServingRouteErrorModal: React.FC<Props> = ({\n  onRequestClose,\n  onCancel,\n  inferenceSessionErrorFrgmt,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n\n  const iSessionError = useFragment(\n    graphql`\n      fragment ServingRouteErrorModalFragment on InferenceSessionError {\n        session_id\n        errors {\n          repr\n        }\n      }\n    `,\n    inferenceSessionErrorFrgmt\n  );\n\n  // const { errors } = endpoint\n  // const targetSession = errors.filter(({ session_id }) => session === session_id)\n  // if (targetSession.length > 0) {\n  //   // setErrorJSONModalSessionID(session)\n  //   // setErrorJSONModalError(targetSession[0].errors[0].repr)\n  //   // setShowErrorJSONModal(true)\n  // }\n\n  const columnSetting: DescriptionsProps[\"column\"] = {\n    xxl: 1,\n    xl: 1,\n    lg: 1,\n    md: 1,\n    sm: 1,\n    xs: 1,\n  };\n\n  return (\n    <Modal\n      centered\n      title={t(\"modelService.ServingRouteErrorModalTitle\")}\n      onCancel={() => {\n        onRequestClose();\n      }}\n      footer={[\n        <Button\n          onClick={() => {\n            onRequestClose();\n          }}\n        >\n          {t(\"button.Close\")}\n        </Button>,\n      ]}\n      {...modalProps}\n    >\n      <Descriptions\n        bordered\n        column={columnSetting}\n        labelStyle={{ minWidth: 100 }}\n      >\n        <Descriptions.Item label={t(\"modelService.SessionId\")}>\n          <CopyableCodeText>{iSessionError?.session_id}</CopyableCodeText>\n        </Descriptions.Item>\n        <Descriptions.Item label={t(\"dialog.error.Error\")}>\n          {iSessionError?.errors[0].repr}\n        </Descriptions.Item>\n      </Descriptions>\n    </Modal>\n  );\n};\n\nexport default ServingRouteErrorModal;\n","import {\n  Breadcrumb,\n  Button,\n  Card,\n  Descriptions,\n  Popover,\n  Table,\n  Tag,\n  Tooltip,\n  Typography,\n  theme,\n} from \"antd\";\nimport {\n  CheckOutlined,\n  CloseOutlined,\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n  WarningOutlined,\n} from \"@ant-design/icons\";\nimport React, { useState, useTransition } from \"react\";\nimport Flex from \"../components/Flex\";\nimport { useSuspendedBackendaiClient, useUpdatableState } from \"../hooks\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useLazyLoadQuery } from \"react-relay\";\nimport { useTranslation } from \"react-i18next\";\nimport graphql from \"babel-plugin-relay/macro\";\nimport {\n  RoutingListPageQuery,\n  RoutingListPageQuery$data,\n} from \"./__generated__/RoutingListPageQuery.graphql\";\nimport CopyableCodeText from \"../components/CopyableCodeText\";\nimport ImageMetaIcon from \"../components/ImageMetaIcon\";\nimport ServingRouteErrorModal from \"../components/ServingRouteErrorModal\";\nimport { useTanMutation } from \"../hooks/reactQueryAlias\";\nimport { baiSignedRequestWithPromise } from \"../helper\";\nimport { ServingRouteErrorModalFragment$key } from \"../components/__generated__/ServingRouteErrorModalFragment.graphql\";\nimport EndpointStatusTag from \"../components/EndpointStatusTag\";\nimport ModelServiceSettingModal from \"../components/ModelServiceSettingModal\";\n\ninterface RoutingInfo {\n  route_id: string;\n  session_id: string;\n  traffic_ratio: number;\n}\nexport interface ModelServiceInfo {\n  endpoint_id: string;\n  name: string;\n  desired_session_count: number;\n  active_routes: RoutingInfo[];\n  service_endpoint: string;\n  is_public: boolean;\n}\n\n// TODO: display all of routings when API/GQL supports\n// type RoutingStatus = \"HEALTHY\" | \"PROVISIONING\" | \"UNHEALTHY\";\n\ninterface RoutingListPageProps {}\n\ntype EndPoint = NonNullable<RoutingListPageQuery$data[\"endpoint\"]>;\ntype Routing = NonNullable<NonNullable<EndPoint[\"routings\"]>[0]>;\n\nconst RoutingListPage: React.FC<RoutingListPageProps> = () => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  const navigate = useNavigate();\n  const { serviceId } = useParams<{\n    serviceId: string;\n  }>();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState(\"initial-fetch\");\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const [isPendingClearError, startClearErrorTransition] = useTransition();\n  const [selectedSessionErrorForModal, setSelectedSessionErrorForModal] =\n    useState<ServingRouteErrorModalFragment$key | null>(null);\n  const [isOpenModelServiceSettingModal, setIsOpenModelServiceSettingModal] =\n    useState(false);\n\n  const { endpoint } = useLazyLoadQuery<RoutingListPageQuery>(\n    graphql`\n      query RoutingListPageQuery($endpointId: UUID!) {\n        endpoint(endpoint_id: $endpointId) {\n          name\n          endpoint_id\n          image\n          desired_session_count\n          url\n          open_to_public\n          errors {\n            session_id\n            ...ServingRouteErrorModalFragment\n          }\n          retries\n          routings {\n            routing_id\n            session\n            traffic_ratio\n            endpoint\n            status\n          }\n          ...EndpointStatusTagFragment\n          ...ModelServiceSettingModal_endpoint\n        }\n      }\n    `,\n    {\n      endpointId: serviceId,\n    },\n    {\n      fetchPolicy:\n        fetchKey === \"initial-fetch\" ? \"store-and-network\" : \"network-only\",\n      fetchKey,\n    }\n  );\n  const mutationToClearError = useTanMutation(() => {\n    if (!endpoint) return;\n    return baiSignedRequestWithPromise({\n      method: \"POST\",\n      url: `/services/${endpoint.endpoint_id}/errors/clear`,\n      client: baiClient,\n    });\n  });\n  const openSessionErrorModal = (session: string) => {\n    if (endpoint === null) return;\n    const { errors } = endpoint;\n    const firstMatchedSessionError = errors.find(\n      ({ session_id }) => session === session_id\n    );\n    setSelectedSessionErrorForModal(firstMatchedSessionError || null);\n  };\n  // const { t } = useTranslation();\n\n  // return color of tag by status\n  const applyStatusColor = (status: string = \"\") => {\n    let color = \"default\";\n    switch (status.toUpperCase()) {\n      case \"HEALTHY\":\n        color = \"success\";\n        break;\n      case \"PROVISIONING\":\n        color = \"processing\";\n        break;\n      case \"UNHEALTHY\":\n        color = \"warning\";\n        break;\n    }\n    return color;\n  };\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{ margin: token.marginSM }}\n      gap=\"sm\"\n    >\n      <Breadcrumb\n        items={[\n          {\n            title: t(\"modelService.Services\"),\n            onClick: (e) => {\n              e.preventDefault();\n              navigate(\"/serving\");\n            },\n            href: \"/serving\",\n          },\n          {\n            title: t(\"modelService.RoutingInfo\"),\n          },\n        ]}\n      />\n      <Flex direction=\"row\" justify=\"between\">\n        <Typography.Title level={3} style={{ margin: 0 }}>\n          {endpoint?.name || \"\"}\n        </Typography.Title>\n        <Flex gap={\"xxs\"}>\n          {(endpoint?.retries || 0) > 0 ? (\n            <Tooltip title={t(\"modelService.ClearErrors\")}>\n              <Button\n                loading={isPendingClearError}\n                icon={<WarningOutlined />}\n                onClick={() => {\n                  startClearErrorTransition(() => {\n                    mutationToClearError.mutate(undefined, {\n                      onSuccess: () =>\n                        startRefetchTransition(() => {\n                          updateFetchKey();\n                        }),\n                    });\n                  });\n                }}\n              />\n            </Tooltip>\n          ) : (\n            <></>\n          )}\n          <Tooltip title={t(\"button.Refresh\")}>\n            <Button\n              loading={isPendingRefetch}\n              icon={<ReloadOutlined />}\n              onClick={() => {\n                startRefetchTransition(() => {\n                  updateFetchKey();\n                });\n              }}\n            />\n          </Tooltip>\n          <Button\n            type=\"primary\"\n            icon={<SettingOutlined />}\n            disabled={(endpoint?.desired_session_count || 0) < 0}\n            onClick={() => {\n              setIsOpenModelServiceSettingModal(true);\n            }}\n          >\n            {t(\"button.Edit\")}\n          </Button>\n        </Flex>\n      </Flex>\n      <Card title={t(\"modelService.ServiceInfo\")}>\n        <Descriptions\n          bordered\n          column={{ xxl: 3, xl: 3, lg: 2, md: 2, sm: 1, xs: 1 }}\n          style={{\n            backgroundColor: token.colorBgBase,\n          }}\n        >\n          <Descriptions.Item label={t(\"modelService.EndpointName\")}>\n            <Typography.Text copyable>{endpoint?.name}</Typography.Text>\n          </Descriptions.Item>\n          <Descriptions.Item label={t(\"modelService.Status\")}>\n            <EndpointStatusTag endpointFrgmt={endpoint} />\n          </Descriptions.Item>\n          <Descriptions.Item label={t(\"modelService.EndpointId\")}>\n            {endpoint?.endpoint_id}\n          </Descriptions.Item>\n          <Descriptions.Item label={t(\"modelService.SessionOwner\")}>\n            {baiClient.email || \"\"}\n          </Descriptions.Item>\n          <Descriptions.Item label={t(\"modelService.DesiredSessionCount\")}>\n            {endpoint?.desired_session_count}\n          </Descriptions.Item>\n          <Descriptions.Item label={t(\"modelService.ServiceEndpoint\")}>\n            {endpoint?.url ? (\n              endpoint?.url\n            ) : (\n              <Tag>{t(\"modelService.NoServiceEndpoint\")}</Tag>\n            )}\n          </Descriptions.Item>\n          <Descriptions.Item label={t(\"modelService.OpenToPublic\")}>\n            {endpoint?.open_to_public ? <CheckOutlined /> : <CloseOutlined />}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Image\">\n            {endpoint?.image && (\n              <Flex direction=\"row\" gap={\"xs\"}>\n                <ImageMetaIcon image={endpoint.image} />\n                <CopyableCodeText>{endpoint.image}</CopyableCodeText>\n              </Flex>\n            )}\n          </Descriptions.Item>\n        </Descriptions>\n      </Card>\n      <Typography.Title level={4} style={{ margin: 0 }}>\n        {t(\"modelService.RoutesInfo\")}\n      </Typography.Title>\n      <Table\n        scroll={{ x: \"max-content\" }}\n        columns={[\n          {\n            title: t(\"modelService.RouteId\"),\n            dataIndex: \"routing_id\",\n            fixed: \"left\",\n          },\n          {\n            title: t(\"modelService.SessionId\"),\n            dataIndex: \"session\",\n          },\n          {\n            title: t(\"modelService.Status\"),\n            render: (_, { session, status }) =>\n              status && (\n                <>\n                  <Tag\n                    color={applyStatusColor(status)}\n                    key={status}\n                    style={{ marginRight: 0 }}\n                  >\n                    {status.toUpperCase()}\n                  </Tag>\n                  {status === \"FAILED_TO_START\" && (\n                    <Popover>\n                      <Button\n                        size=\"small\"\n                        type=\"text\"\n                        icon={<QuestionCircleOutlined />}\n                        style={{ color: token.colorTextSecondary }}\n                        onClick={() => openSessionErrorModal(session)}\n                      />\n                    </Popover>\n                  )}\n                </>\n              ),\n          },\n          {\n            title: t(\"modelService.TrafficRatio\"),\n            dataIndex: \"traffic_ratio\",\n          },\n        ]}\n        pagination={false}\n        dataSource={endpoint?.routings as Routing[]}\n      />\n      <ServingRouteErrorModal\n        open={!!selectedSessionErrorForModal}\n        inferenceSessionErrorFrgmt={selectedSessionErrorForModal}\n        onRequestClose={() => setSelectedSessionErrorForModal(null)}\n      />\n      <ModelServiceSettingModal\n        open={isOpenModelServiceSettingModal}\n        onRequestClose={(success) => {\n          setIsOpenModelServiceSettingModal(false);\n          if (success) {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }\n        }}\n        endpointFrgmt={endpoint}\n      />\n    </Flex>\n  );\n};\n\nexport default RoutingListPage;\n","/**\n * @generated SignedSource<<7bf7b406cb8c5f31ea344ffe86dd1e9f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type RoutingListPageQuery$variables = {\n  endpointId: any;\n};\nexport type RoutingListPageQuery$data = {\n  readonly endpoint: {\n    readonly desired_session_count: number | null;\n    readonly endpoint_id: any | null;\n    readonly errors: ReadonlyArray<{\n      readonly session_id: any;\n      readonly \" $fragmentSpreads\": FragmentRefs<\"ServingRouteErrorModalFragment\">;\n    }>;\n    readonly image: string | null;\n    readonly name: string | null;\n    readonly open_to_public: boolean | null;\n    readonly retries: number | null;\n    readonly routings: ReadonlyArray<{\n      readonly endpoint: string | null;\n      readonly routing_id: any | null;\n      readonly session: any | null;\n      readonly status: string | null;\n      readonly traffic_ratio: number | null;\n    } | null> | null;\n    readonly url: string | null;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"EndpointStatusTagFragment\" | \"ModelServiceSettingModal_endpoint\">;\n  } | null;\n};\nexport type RoutingListPageQuery = {\n  response: RoutingListPageQuery$data;\n  variables: RoutingListPageQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"endpointId\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"endpoint_id\",\n    \"variableName\": \"endpointId\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"endpoint_id\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"desired_session_count\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"url\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"open_to_public\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"session_id\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"retries\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"routing_id\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"session\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"traffic_ratio\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"endpoint\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"RoutingListPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"Endpoint\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"endpoint\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          (v4/*: any*/),\n          (v5/*: any*/),\n          (v6/*: any*/),\n          (v7/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"InferenceSessionError\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"errors\",\n            \"plural\": true,\n            \"selections\": [\n              (v8/*: any*/),\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"ServingRouteErrorModalFragment\"\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v9/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Routing\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"routings\",\n            \"plural\": true,\n            \"selections\": [\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"EndpointStatusTagFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ModelServiceSettingModal_endpoint\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"RoutingListPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"Endpoint\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"endpoint\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          (v4/*: any*/),\n          (v5/*: any*/),\n          (v6/*: any*/),\n          (v7/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"InferenceSessionError\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"errors\",\n            \"plural\": true,\n            \"selections\": [\n              (v8/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"InferenceSessionErrorInfo\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"errors\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"repr\",\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v9/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Routing\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"routings\",\n            \"plural\": true,\n            \"selections\": [\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          (v15/*: any*/),\n          (v14/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"60f56bd8c7f196e035d4b5d504ef89bc\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"RoutingListPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query RoutingListPageQuery(\\n  $endpointId: UUID!\\n) {\\n  endpoint(endpoint_id: $endpointId) {\\n    name\\n    endpoint_id\\n    image\\n    desired_session_count\\n    url\\n    open_to_public\\n    errors {\\n      session_id\\n      ...ServingRouteErrorModalFragment\\n    }\\n    retries\\n    routings {\\n      routing_id\\n      session\\n      traffic_ratio\\n      endpoint\\n      status\\n      id\\n    }\\n    ...EndpointStatusTagFragment\\n    ...ModelServiceSettingModal_endpoint\\n    id\\n  }\\n}\\n\\nfragment EndpointStatusTagFragment on Endpoint {\\n  id\\n  status\\n}\\n\\nfragment ModelServiceSettingModal_endpoint on Endpoint {\\n  endpoint_id\\n  desired_session_count\\n}\\n\\nfragment ServingRouteErrorModalFragment on InferenceSessionError {\\n  session_id\\n  errors {\\n    repr\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"4a9fd7675a26a9a0c1e6d4563ad73878\";\n\nexport default node;\n","// This icon file is generated automatically.\nvar ReloadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M909.1 209.3l-56.4 44.1C775.8 155.1 656.2 92 521.9 92 290 92 102.3 279.5 102 511.5 101.7 743.7 289.8 932 521.9 932c181.3 0 335.8-115 394.6-276.1 1.5-4.2-.7-8.9-4.9-10.3l-56.7-19.5a8 8 0 00-10.1 4.8c-1.8 5-3.8 10-5.9 14.9-17.3 41-42.1 77.8-73.7 109.4A344.77 344.77 0 01655.9 829c-42.3 17.9-87.4 27-133.8 27-46.5 0-91.5-9.1-133.8-27A341.5 341.5 0 01279 755.2a342.16 342.16 0 01-73.7-109.4c-17.9-42.4-27-87.4-27-133.9s9.1-91.5 27-133.9c17.3-41 42.1-77.8 73.7-109.4 31.6-31.6 68.4-56.4 109.3-73.8 42.3-17.9 87.4-27 133.8-27 46.5 0 91.5 9.1 133.8 27a341.5 341.5 0 01109.3 73.8c9.9 9.9 19.2 20.4 27.8 31.4l-60.2 47a8 8 0 003 14.1l175.6 43c5 1.2 9.9-2.6 9.9-7.7l.8-180.9c-.1-6.6-7.8-10.3-13-6.2z\" } }] }, \"name\": \"reload\", \"theme\": \"outlined\" };\nexport default ReloadOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport ReloadOutlinedSvg from \"@ant-design/icons-svg/es/asn/ReloadOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar ReloadOutlined = function ReloadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: ReloadOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ReloadOutlined.displayName = 'ReloadOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(ReloadOutlined);"],"names":["_ref","text","children","_jsx","Typography","copyable","code","_endpoint$status","endpointFrgmt","endpoint","useFragment","_EndpointStatusTagFragment","require","color","status","toUpperCase","Tag","_ref$direction","direction","_ref$wrap","wrap","_ref$justify","justify","_ref$align","align","_ref$gap","gap","style","restProps","_objectWithoutProperties","_excluded","token","theme","transferConst","transferConstStyle","map","el","tempTxt","flexStyle","_objectSpread","display","flexDirection","flexWrap","justifyContent","alignItems","backgroundColor","border","boxSizing","flexBasis","flexShrink","listStyle","margin","minHeight","minWidth","padding","position","textDecoration","ImageMetaIcon","bordered","image","_ref$style","alt","arguments","length","undefined","_useBackendaiImageMet","useBackendaiImageMetaData","getImageIcon","_slicedToArray","src","width","height","React","onRequestClose","props","baiClient","useSuspendedBackendaiClient","t","useTranslation","_Form$useForm","Form","form","_ModelServiceSettingModal_endpoint","mutationToUpdateService","useTanMutation","mutationFn","values","body","to","desired_session_count","baiSignedRequestWithPromise","method","url","concat","endpoint_id","client","Modal","zIndex","destroyOnClose","onOk","e","validateFields","then","mutate","onSuccess","console","log","onError","error","catch","err","onCancel","okButtonProps","loading","isLoading","title","Flex","preserve","validateTrigger","initialValues","marginBottom","marginLG","marginTop","name","label","rules","pattern","message","InputNumber","type","min","node","newLineToBrElement","separatorRegExp","split","line","index","match","_ref$body","request","newSignedRequest","_wrapWithPromise","useBaiSignedRequestWithPromise","_ref2","_ref2$body","_humanReadableDecimalSize","bytes","decimalPoint","k","Math","pow","i","floor","round","parseFloat","toFixed","GBToBytes","value","gigabyte","bytesToGB","addQuotaScopeTypePrefix","str","startsWith","usageIndicatorColor","percentage","useUpdatableState","initialValue","_useState3","useState","Date","toISOString","_useState4","setValue","newValue","useDateISOState","useCurrentDomainValue","_config","domainName","useCurrentProjectValue","_useState5","current_group","id","groupIds","_useState6","project","_setProject","useEffect","listener","newProjectName","detail","document","addEventListener","removeEventListener","useAnonymousBackendaiClient","api_endpoint","useMemo","clientConfig","globalThis","BackendAIClientConfig","BackendAIClient","useQuery","queryKey","queryFn","Promise","resolve","backendaiclient","ready","retry","suspense","data","metadata","fetch","response","json","getImageMeta","imageName","key","tags","specs","_split","_split2","getImageAliasName","imageInfo","_metadata$imageInfo$k","_metadata$imageInfo$k2","path","icon","getImageTags","getBaseVersion","getBaseImage","useTanQuery","useMutation","inferenceSessionErrorFrgmt","modalProps","iSessionError","_ServingRouteErrorModalFragment","centered","footer","Button","onClick","_jsxs","Descriptions","column","xxl","xl","lg","md","sm","xs","labelStyle","CopyableCodeText","session_id","errors","repr","navigate","useNavigate","serviceId","useParams","_useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","_useTransition","useTransition","_useTransition2","isPendingRefetch","startRefetchTransition","_useTransition3","_useTransition4","isPendingClearError","startClearErrorTransition","_useState","_useState2","selectedSessionErrorForModal","setSelectedSessionErrorForModal","isOpenModelServiceSettingModal","setIsOpenModelServiceSettingModal","useLazyLoadQuery","_RoutingListPageQuery","endpointId","fetchPolicy","mutationToClearError","applyStatusColor","marginSM","Breadcrumb","items","preventDefault","href","level","retries","Tooltip","WarningOutlined","_Fragment","ReloadOutlined","SettingOutlined","disabled","Card","colorBgBase","EndpointStatusTag","email","open_to_public","CheckOutlined","CloseOutlined","Table","scroll","x","columns","dataIndex","fixed","render","_","session","marginRight","Popover","size","QuestionCircleOutlined","colorTextSecondary","firstMatchedSessionError","find","openSessionErrorModal","pagination","dataSource","routings","ServingRouteErrorModal","open","ModelServiceSettingModal","success","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","hash","ref","AntdIcon","_extends","ReloadOutlinedSvg"],"sourceRoot":""}