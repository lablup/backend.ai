{"version":3,"file":"static/js/8078.c68f069d.chunk.js","mappings":"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","sources":["__generated__/DashboardPageQuery.graphql.ts","__generated__/MySessionCardQueryFragment.graphql.ts","__generated__/MySessionCardQueryFragmentRefetchQuery.graphql.ts","__generated__/RecentlyCreatedSessionCardFragment.graphql.ts","__generated__/RecentlyCreatedSessionCardRefetchQuery.graphql.ts","components/MySessionCard.tsx","components/RecentlyCreatedSessionCard.tsx","pages/DashboardPage.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<3296b5fd7cc2ecbf102506946ccab489>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type DashboardPageQuery$variables = {\n  projectId: string;\n};\nexport type DashboardPageQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"MySessionCardQueryFragment\" | \"RecentlyCreatedSessionCardFragment\">;\n};\nexport type DashboardPageQuery = {\n  response: DashboardPageQuery$data;\n  variables: DashboardPageQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"projectId\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"projectId\",\n    \"variableName\": \"projectId\"\n  }\n],\nv2 = {\n  \"kind\": \"Literal\",\n  \"name\": \"first\",\n  \"value\": 0\n},\nv3 = {\n  \"kind\": \"Variable\",\n  \"name\": \"project_id\",\n  \"variableName\": \"projectId\"\n},\nv4 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"count\",\n    \"storageKey\": null\n  }\n],\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"DashboardPageQuery\",\n    \"selections\": [\n      {\n        \"args\": (v1/*: any*/),\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"MySessionCardQueryFragment\"\n      },\n      {\n        \"args\": (v1/*: any*/),\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"RecentlyCreatedSessionCardFragment\"\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"DashboardPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"myInteractive\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n          },\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v4/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myBatch\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n          },\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v4/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myInference\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n          },\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v4/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myUpload\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n          },\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v4/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status == \\\"running\\\"\"\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"first\",\n            \"value\": 3\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"order\",\n            \"value\": \"-created_at\"\n          },\n          (v3/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSessionEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"ComputeSessionNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v5/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"row_id\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"name\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_info\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_data\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"created_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"starts_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"terminated_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"occupied_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"requested_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"kernel_nodes\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"KernelEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KernelNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"live_stat\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_role\",\n                                \"storageKey\": null\n                              },\n                              (v5/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"4c0b47a074a596892474794705089694\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"DashboardPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query DashboardPageQuery(\\n  $projectId: UUID!\\n) {\\n  ...MySessionCardQueryFragment_2CgS8h\\n  ...RecentlyCreatedSessionCardFragment_2CgS8h\\n}\\n\\nfragment MySessionCardQueryFragment_2CgS8h on Queries {\\n  myInteractive: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"interactive\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myBatch: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"batch\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myInference: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"inference\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myUpload: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"system\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n}\\n\\nfragment RecentlyCreatedSessionCardFragment_2CgS8h on Queries {\\n  compute_session_nodes(first: 3, order: \\\"-created_at\\\", filter: \\\"status == \\\\\\\"running\\\\\\\"\\\", project_id: $projectId) {\\n    edges {\\n      node {\\n        id\\n        ...SessionNodesFragment\\n      }\\n    }\\n  }\\n}\\n\\nfragment SessionNodesFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  ...SessionStatusTagFragment\\n  ...SessionReservationFragment\\n  ...SessionSlotCellFragment\\n  ...SessionUsageMonitorFragment\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionSlotCellFragment on ComputeSessionNode {\\n  id\\n  status\\n  occupied_slots\\n  requested_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  status\\n  status_info\\n  status_data\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  occupied_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment useSessionNodeLiveStatSessionFragment on ComputeSessionNode {\\n  id\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        cluster_role\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"342b968110a2e463f10f2f3bd3998b1a\";\n\nexport default node;\n","/**\n * @generated SignedSource<<8f33723b1038712f2c5818594874762d>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type MySessionCardQueryFragment$data = {\n  readonly myBatch: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly myInference: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly myInteractive: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly myUpload: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly \" $fragmentType\": \"MySessionCardQueryFragment\";\n};\nexport type MySessionCardQueryFragment$key = {\n  readonly \" $data\"?: MySessionCardQueryFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"MySessionCardQueryFragment\">;\n};\n\nconst node: ReaderFragment = (function(){\nvar v0 = {\n  \"kind\": \"Literal\",\n  \"name\": \"first\",\n  \"value\": 0\n},\nv1 = {\n  \"kind\": \"Variable\",\n  \"name\": \"project_id\",\n  \"variableName\": \"projectId\"\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"count\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"argumentDefinitions\": [\n    {\n      \"defaultValue\": null,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"projectId\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"refetch\": {\n      \"connection\": null,\n      \"fragmentPathInResult\": [],\n      \"operation\": require('./MySessionCardQueryFragmentRefetchQuery.graphql')\n    }\n  },\n  \"name\": \"MySessionCardQueryFragment\",\n  \"selections\": [\n    {\n      \"alias\": \"myInteractive\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": \"myBatch\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": \"myInference\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": \"myUpload\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Queries\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"ce8178951e50988dac5cf649a66b0605\";\n\nexport default node;\n","/**\n * @generated SignedSource<<9d51aab2b5d447bbe498aa5c1d4e8f38>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type MySessionCardQueryFragmentRefetchQuery$variables = {\n  projectId: string;\n};\nexport type MySessionCardQueryFragmentRefetchQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"MySessionCardQueryFragment\">;\n};\nexport type MySessionCardQueryFragmentRefetchQuery = {\n  response: MySessionCardQueryFragmentRefetchQuery$data;\n  variables: MySessionCardQueryFragmentRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"projectId\"\n  }\n],\nv1 = {\n  \"kind\": \"Literal\",\n  \"name\": \"first\",\n  \"value\": 0\n},\nv2 = {\n  \"kind\": \"Variable\",\n  \"name\": \"project_id\",\n  \"variableName\": \"projectId\"\n},\nv3 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"count\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"MySessionCardQueryFragmentRefetchQuery\",\n    \"selections\": [\n      {\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"projectId\",\n            \"variableName\": \"projectId\"\n          }\n        ],\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"MySessionCardQueryFragment\"\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"MySessionCardQueryFragmentRefetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"myInteractive\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myBatch\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myInference\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myUpload\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"c5404406b3c47ef22ff9afbef2c37f1b\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"MySessionCardQueryFragmentRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query MySessionCardQueryFragmentRefetchQuery(\\n  $projectId: UUID!\\n) {\\n  ...MySessionCardQueryFragment_2CgS8h\\n}\\n\\nfragment MySessionCardQueryFragment_2CgS8h on Queries {\\n  myInteractive: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"interactive\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myBatch: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"batch\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myInference: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"inference\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myUpload: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"system\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ce8178951e50988dac5cf649a66b0605\";\n\nexport default node;\n","/**\n * @generated SignedSource<<aacff700b240b0b45c8e533ff93055bc>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type RecentlyCreatedSessionCardFragment$data = {\n  readonly compute_session_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly id: string;\n        readonly \" $fragmentSpreads\": FragmentRefs<\"SessionNodesFragment\">;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly \" $fragmentType\": \"RecentlyCreatedSessionCardFragment\";\n};\nexport type RecentlyCreatedSessionCardFragment$key = {\n  readonly \" $data\"?: RecentlyCreatedSessionCardFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"RecentlyCreatedSessionCardFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [\n    {\n      \"defaultValue\": null,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"projectId\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"refetch\": {\n      \"connection\": null,\n      \"fragmentPathInResult\": [],\n      \"operation\": require('./RecentlyCreatedSessionCardRefetchQuery.graphql')\n    }\n  },\n  \"name\": \"RecentlyCreatedSessionCardFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status == \\\"running\\\"\"\n        },\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"first\",\n          \"value\": 3\n        },\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"order\",\n          \"value\": \"-created_at\"\n        },\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"project_id\",\n          \"variableName\": \"projectId\"\n        }\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"ComputeSessionEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"ComputeSessionNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"id\",\n                  \"storageKey\": null\n                },\n                {\n                  \"args\": null,\n                  \"kind\": \"FragmentSpread\",\n                  \"name\": \"SessionNodesFragment\"\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Queries\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"7c16f9a5bfd4d5f60959224a02a0c143\";\n\nexport default node;\n","/**\n * @generated SignedSource<<04c43e20869ee46c83b15d24cc841994>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type RecentlyCreatedSessionCardRefetchQuery$variables = {\n  projectId: string;\n};\nexport type RecentlyCreatedSessionCardRefetchQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"RecentlyCreatedSessionCardFragment\">;\n};\nexport type RecentlyCreatedSessionCardRefetchQuery = {\n  response: RecentlyCreatedSessionCardRefetchQuery$data;\n  variables: RecentlyCreatedSessionCardRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"projectId\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"RecentlyCreatedSessionCardRefetchQuery\",\n    \"selections\": [\n      {\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"projectId\",\n            \"variableName\": \"projectId\"\n          }\n        ],\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"RecentlyCreatedSessionCardFragment\"\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"RecentlyCreatedSessionCardRefetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status == \\\"running\\\"\"\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"first\",\n            \"value\": 3\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"order\",\n            \"value\": \"-created_at\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"project_id\",\n            \"variableName\": \"projectId\"\n          }\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSessionEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"ComputeSessionNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v1/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"row_id\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"name\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_info\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_data\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"created_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"starts_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"terminated_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"occupied_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"requested_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"kernel_nodes\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"KernelEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KernelNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"live_stat\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_role\",\n                                \"storageKey\": null\n                              },\n                              (v1/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"4996191666fb998b1fd01d214529777a\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"RecentlyCreatedSessionCardRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query RecentlyCreatedSessionCardRefetchQuery(\\n  $projectId: UUID!\\n) {\\n  ...RecentlyCreatedSessionCardFragment_2CgS8h\\n}\\n\\nfragment RecentlyCreatedSessionCardFragment_2CgS8h on Queries {\\n  compute_session_nodes(first: 3, order: \\\"-created_at\\\", filter: \\\"status == \\\\\\\"running\\\\\\\"\\\", project_id: $projectId) {\\n    edges {\\n      node {\\n        id\\n        ...SessionNodesFragment\\n      }\\n    }\\n  }\\n}\\n\\nfragment SessionNodesFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  ...SessionStatusTagFragment\\n  ...SessionReservationFragment\\n  ...SessionSlotCellFragment\\n  ...SessionUsageMonitorFragment\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionSlotCellFragment on ComputeSessionNode {\\n  id\\n  status\\n  occupied_slots\\n  requested_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  status\\n  status_info\\n  status_data\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  occupied_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment useSessionNodeLiveStatSessionFragment on ComputeSessionNode {\\n  id\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        cluster_role\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"7c16f9a5bfd4d5f60959224a02a0c143\";\n\nexport default node;\n","import { MySessionCardQueryFragment$key } from '../__generated__/MySessionCardQueryFragment.graphql';\nimport BAICard, { BAICardProps } from './BAICard';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport BAIPanelItem from './BAIPanelItem';\nimport Flex from './Flex';\nimport { Col, Divider, Row, theme } from 'antd';\nimport { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useRefetchableFragment } from 'react-relay';\n\ninterface MySessionCardProps extends BAICardProps {\n  queryRef: MySessionCardQueryFragment$key;\n  isRefetching?: boolean;\n}\n\nconst MySessionCard: React.FC<MySessionCardProps> = ({\n  queryRef,\n  isRefetching,\n  ...props\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n        fragment  MySessionCardQueryFragment on Queries\n        @argumentDefinitions(\n          projectId: { type: \"UUID!\" }\n        ) \n        @refetchable(queryName: \"MySessionCardQueryFragmentRefetchQuery\") {\n          myInteractive: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n            project_id: $projectId\n          ) {\n            count\n          }\n          myBatch: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n            project_id: $projectId\n          ) {\n            count\n          }\n          myInference: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n            project_id: $projectId\n          ) {\n            count\n          }\n          myUpload: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n            project_id: $projectId\n          ) {\n            count\n          }\n        }\n      `,\n    queryRef,\n  );\n\n  const { myInteractive, myBatch, myInference, myUpload } = data || {};\n  return (\n    <BAICard\n      {...props}\n      title={t('session.MySessions')}\n      extra={\n        <Flex\n          direction=\"row\"\n          gap=\"sm\"\n          style={{\n            marginRight: -8,\n          }}\n        >\n          <BAIFetchKeyButton\n            loading={isPendingRefetch || isRefetching}\n            value=\"\"\n            onChange={(newFetchKey) => {\n              startRefetchTransition(() => {\n                refetch(\n                  {},\n                  {\n                    fetchPolicy: 'network-only',\n                  },\n                );\n              });\n            }}\n            type=\"text\"\n            style={{\n              backgroundColor: 'transparent',\n            }}\n          />\n        </Flex>\n      }\n    >\n      <Row gutter={[24, 16]}>\n        <Col\n          span={5}\n          style={{\n            justifyItems: 'center',\n            overflow: 'break-word',\n            whiteSpace: 'nowrap',\n            wordBreak: 'keep-all',\n          }}\n        >\n          <BAIPanelItem\n            title={t('session.Interactive')}\n            value={myInteractive?.count || 0}\n          />\n        </Col>\n        <Col\n          span={1}\n          style={{\n            justifyItems: 'center',\n            textAlign: 'center',\n            paddingTop: token.paddingSM,\n            paddingBottom: token.paddingSM,\n            paddingLeft: 0,\n            paddingRight: 0,\n          }}\n        >\n          <Divider\n            type=\"vertical\"\n            style={{\n              height: '100%',\n            }}\n          />\n        </Col>\n        <Col\n          span={5}\n          style={{\n            justifyItems: 'center',\n            overflow: 'break-word',\n            whiteSpace: 'nowrap',\n          }}\n        >\n          <BAIPanelItem\n            title={t('session.Batch')}\n            value={myBatch?.count || 0}\n          />\n        </Col>\n        <Col\n          span={1}\n          style={{\n            justifyItems: 'center',\n            textAlign: 'center',\n            paddingTop: token.paddingSM,\n            paddingBottom: token.paddingSM,\n            paddingLeft: 0,\n            paddingRight: 0,\n          }}\n        >\n          <Divider\n            type=\"vertical\"\n            style={{\n              height: '100%',\n            }}\n          />\n        </Col>\n        <Col\n          span={5}\n          style={{\n            justifyItems: 'center',\n            overflow: 'break-word',\n            whiteSpace: 'nowrap',\n          }}\n        >\n          <BAIPanelItem\n            title={t('session.Inference')}\n            value={myInference?.count || 0}\n          />\n        </Col>\n        <Col\n          span={1}\n          style={{\n            justifyItems: 'center',\n            textAlign: 'center',\n            paddingTop: token.paddingSM,\n            paddingBottom: token.paddingSM,\n            paddingLeft: 0,\n            paddingRight: 0,\n          }}\n        >\n          <Divider\n            type=\"vertical\"\n            style={{\n              height: '100%',\n            }}\n          />\n        </Col>\n        <Col\n          span={6}\n          style={{\n            justifyItems: 'center',\n            overflow: 'break-word',\n          }}\n        >\n          <BAIPanelItem\n            title={t('session.System')}\n            value={myUpload?.count || 0}\n          />\n        </Col>\n      </Row>\n    </BAICard>\n  );\n};\n\nexport default MySessionCard;\n","import { RecentlyCreatedSessionCardFragment$key } from '../__generated__/RecentlyCreatedSessionCardFragment.graphql';\nimport { filterNonNullItems, toLocalId } from '../helper';\nimport BAICard, { BAICardProps } from './BAICard';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport Flex from './Flex';\nimport SessionDetailDrawer from './SessionDetailDrawer';\nimport SessionNodes from './SessionNodes';\nimport { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useRefetchableFragment } from 'react-relay';\nimport { useQueryParam, StringParam } from 'use-query-params';\n\ninterface RecentlyCreatedSessionCardProps extends BAICardProps {\n  queryRef: RecentlyCreatedSessionCardFragment$key;\n  isRefetching?: boolean;\n}\n\nconst RecentlyCreatedSessionCard: React.FC<RecentlyCreatedSessionCardProps> = ({\n  queryRef,\n  isRefetching,\n  ...props\n}) => {\n  const { t } = useTranslation();\n  const [sessionDetailId, setSessionDetailId] = useQueryParam(\n    'sessionDetail',\n    StringParam,\n  );\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment RecentlyCreatedSessionCardFragment on Queries\n      @argumentDefinitions(\n        projectId: { type: \"UUID!\" }\n      )\n      @refetchable(queryName: \"RecentlyCreatedSessionCardRefetchQuery\") {\n        compute_session_nodes(\n          first: 3\n          order: \"-created_at\"\n          filter: \"status == \\\"running\\\"\"\n          project_id: $projectId\n        ) {\n          edges {\n            node {\n              id\n              ...SessionNodesFragment\n            }\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <BAICard\n        title={t('session.RecentlyCreatedSessions')}\n        extra={\n          <Flex\n            direction=\"row\"\n            gap=\"sm\"\n            style={{\n              marginRight: -8,\n            }}\n          >\n            <BAIFetchKeyButton\n              loading={isPendingRefetch || isRefetching}\n              value=\"\"\n              onChange={(newFetchKey) => {\n                startRefetchTransition(() => {\n                  refetch(\n                    {},\n                    {\n                      fetchPolicy: 'network-only',\n                    },\n                  );\n                });\n              }}\n              type=\"text\"\n              style={{\n                backgroundColor: 'transparent',\n              }}\n            />\n          </Flex>\n        }\n        {...props}\n      >\n        <SessionNodes\n          sessionsFrgmt={filterNonNullItems(\n            data.compute_session_nodes?.edges.map((e) => e?.node),\n          )}\n          onClickSessionName={(session) => {\n            setSessionDetailId(toLocalId(session.id));\n          }}\n          pagination={false}\n          disableSorter\n        />\n        <SessionDetailDrawer\n          open={!!sessionDetailId}\n          sessionId={sessionDetailId || undefined}\n          onClose={() => {\n            setSessionDetailId(undefined, 'pushIn');\n          }}\n        />\n      </BAICard>\n    </>\n  );\n};\n\nexport default RecentlyCreatedSessionCard;\n","import { DashboardPageQuery } from '../__generated__/DashboardPageQuery.graphql';\nimport AvailableResourcesCard from '../components/AvailableResourcesCard';\nimport MySessionCard from '../components/MySessionCard';\nimport RecentlyCreatedSessionCard from '../components/RecentlyCreatedSessionCard';\nimport { filterEmptyItem } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useInterval } from '../hooks/useIntervalValue';\nimport { Col, Grid, Row } from 'antd';\nimport _ from 'lodash';\nimport { useTransition } from 'react';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\n\nconst DashboardPage: React.FC = () => {\n  const { lg } = Grid.useBreakpoint();\n\n  // to avoid flickering\n  useSuspendedBackendaiClient();\n\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const queryRef = useLazyLoadQuery<DashboardPageQuery>(\n    graphql`\n      query DashboardPageQuery($projectId: UUID!) {\n        ...MySessionCardQueryFragment @arguments(projectId: $projectId)\n        ...RecentlyCreatedSessionCardFragment @arguments(projectId: $projectId)\n      }\n    `,\n    {\n      projectId: currentProject.id,\n    },\n    {\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n      fetchKey,\n    },\n  );\n\n  useInterval(() => {\n    startRefetchTransition(() => {\n      updateFetchKey();\n    });\n  }, 15_000);\n\n  const items = filterEmptyItem([\n    {\n      id: 'mySession',\n      rowSpan: 3,\n      columnSpan: 1,\n      columnOffset: { 6: 0, 4: 0 },\n      data: {\n        content: (\n          <MySessionCard\n            queryRef={queryRef}\n            isRefetching={isPendingRefetch}\n            style={{ minHeight: lg ? 200 : undefined }}\n          />\n        ),\n      },\n    },\n    {\n      id: 'allocatedResources',\n      rowSpan: 3,\n      columnSpan: 1,\n      columnOffset: { 6: 1, 4: 1 },\n      data: {\n        content: (\n          <AvailableResourcesCard\n            style={{\n              width: '100%',\n              minHeight: lg ? 200 : undefined,\n            }}\n            isRefetching={isPendingRefetch}\n            fetchKey={fetchKey}\n          />\n        ),\n      },\n    },\n    {\n      id: 'recentlyCreatedSession',\n      rowSpan: 3,\n      columnSpan: 2,\n      columnOffset: { 6: 0, 4: 0 },\n      data: {\n        content: (\n          <RecentlyCreatedSessionCard\n            queryRef={queryRef}\n            isRefetching={isPendingRefetch}\n          />\n        ),\n      },\n    },\n    // {\n    //   id: 'mostResourceAllocatedSession',\n    //   rowSpan: 3,\n    //   columnSpan: 2,\n    //   columnOffset: { 6: 0, 4: 0 },\n    //   data: {\n    //     content: <></>,\n    //   },\n    // },\n    // {\n    //   id: 'pipelineStatus',\n    //   rowSpan: 3,\n    //   columnSpan: 2,\n    //   columnOffset: { 6: 0, 4: 0 },\n    //   data: {\n    //     content: <></>,\n    //   },\n    // },\n  ]);\n\n  return (\n    <>\n      <Row gutter={[16, 16]}>\n        {_.map(items, (item) => {\n          return (\n            <Col xs={24} lg={item.columnSpan === 2 ? 24 : 12}>\n              {item.data.content}\n            </Col>\n          );\n        })}\n      </Row>\n    </>\n  );\n};\n\nexport default DashboardPage;\n"],"names":["node","v0","v1","v2","v3","v4","v5","hash","require","_ref","queryRef","isRefetching","props","t","useTranslation","token","theme","useToken","isPendingRefetch","startRefetchTransition","useTransition","data","refetch","useRefetchableFragment","_MySessionCardQueryFragment","myInteractive","myBatch","myInference","myUpload","_jsx","BAICard","title","extra","Flex","direction","gap","style","marginRight","children","BAIFetchKeyButton","loading","value","onChange","newFetchKey","fetchPolicy","type","backgroundColor","_jsxs","Row","gutter","Col","span","justifyItems","overflow","whiteSpace","wordBreak","BAIPanelItem","count","textAlign","paddingTop","paddingSM","paddingBottom","paddingLeft","paddingRight","Divider","height","_data$compute_session","sessionDetailId","setSessionDetailId","useQueryParam","StringParam","_RecentlyCreatedSessionCardFragment","_Fragment","SessionNodes","sessionsFrgmt","filterNonNullItems","compute_session_nodes","edges","map","e","onClickSessionName","session","toLocalId","id","pagination","disableSorter","SessionDetailDrawer","open","sessionId","undefined","onClose","DashboardPage","lg","Grid","useBreakpoint","useSuspendedBackendaiClient","currentProject","useCurrentProjectValue","fetchKey","updateFetchKey","useUpdatableState","useLazyLoadQuery","_DashboardPageQuery","projectId","useInterval","items","filterEmptyItem","rowSpan","columnSpan","columnOffset","content","MySessionCard","minHeight","AvailableResourcesCard","width","RecentlyCreatedSessionCard","_","item","xs"],"sourceRoot":""}