{"version":3,"file":"static/js/9154.33ba7a76.chunk.js","mappings":"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","sources":["components/EnvVarFormList.tsx","__generated__/ImageEnvironmentSelectFormItemsQuery.graphql.ts","components/ImageEnvironmentSelectFormItems.tsx","__generated__/ImageTagsUNSAFELazySessionImageTagQuery.graphql.ts","components/ImageTags.tsx","__generated__/VFolderTableProjectQuery.graphql.ts","__generated__/VFolderPermissionTag_VFolder.graphql.ts","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx"],"sourcesContent":["import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport { BAIFlex } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <BAIFlex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <BAIFlex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          !_.isEmpty(variableName) &&\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                    onChange={() => {\n                      const fieldNames = fields.map((field, index) => [\n                        props.name,\n                        index,\n                        'variable',\n                      ]);\n                      form.validateFields(fieldNames);\n                    }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\n                        'session.launcher.EnvironmentVariableValueRequired',\n                      ),\n                    },\n                  ]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input\n                    placeholder=\"Value\"\n                    // onChange={() => {\n                    //   const valueFields = fields.map((field, index) => [\n                    //     props.name,\n                    //     index,\n                    //     'value',\n                    //   ]);\n                    //   form.validateFields(valueFields);\n                    // }}\n                  />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </BAIFlex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                {t('session.launcher.AddEnvironmentVariable')}\n              </Button>\n            </Form.Item>\n          </BAIFlex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nconst sensitivePatterns = [\n  /AUTH/i,\n  /ACCESS/i,\n  /SECRET/i,\n  /_KEY/i,\n  /PASSWORD/i,\n  /PASSWD/i,\n  /PWD/i,\n  /TOKEN/i,\n  /PRIVATE/i,\n  /CREDENTIAL/i,\n  /JWT/i,\n  /KEYPAIR/i,\n  /CERTIFICATE/i,\n  /SSH/i,\n  /ENCRYPT/i,\n  /SIGNATURE/i,\n  /SALT/i,\n  /PIN/i,\n  /PASSPHRASE/i,\n  /OAUTH/i,\n];\n\nexport function isSensitiveEnv(key: string) {\n  return sensitivePatterns.some((pattern) => pattern.test(key));\n}\n\nexport function sanitizeSensitiveEnv(envs: EnvVarFormListValue[]) {\n  return _.map(envs, (env) => {\n    if (env && isSensitiveEnv(env.variable)) {\n      return { ...env, value: '' };\n    }\n    return env;\n  });\n}\n\nexport default EnvVarFormList;\n","/**\n * @generated SignedSource<<7a56c9a082f2cc08ad7586b14c6b1e54>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ImageEnvironmentSelectFormItemsQuery$variables = {\n  installed?: boolean | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery$data = {\n  readonly images: ReadonlyArray<{\n    readonly architecture: string | null | undefined;\n    readonly base_image_name: string | null | undefined;\n    readonly digest: string | null | undefined;\n    readonly humanized_name: string | null | undefined;\n    readonly id: string | null | undefined;\n    readonly installed: boolean | null | undefined;\n    readonly labels: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly name: string | null | undefined;\n    readonly namespace: string | null | undefined;\n    readonly registry: string | null | undefined;\n    readonly resource_limits: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly max: string | null | undefined;\n      readonly min: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly supported_accelerators: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly tag: string | null | undefined;\n    readonly tags: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly version: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery = {\n  response: ImageEnvironmentSelectFormItemsQuery$data;\n  variables: ImageEnvironmentSelectFormItemsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"installed\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"key\",\n  \"storageKey\": null\n},\nv2 = [\n  (v1/*: any*/),\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"value\",\n    \"storageKey\": null\n  }\n],\nv3 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"is_installed\",\n        \"variableName\": \"installed\"\n      }\n    ],\n    \"concreteType\": \"Image\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"images\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"humanized_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"tag\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"registry\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"architecture\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"digest\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"installed\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ResourceLimit\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"resource_limits\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"min\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"max\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"labels\",\n        \"plural\": true,\n        \"selections\": (v2/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"namespace\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"base_image_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"tags\",\n        \"plural\": true,\n        \"selections\": (v2/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"version\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"supported_accelerators\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v3/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v3/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"192812639ccebbee01e918cbd60b8816\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageEnvironmentSelectFormItemsQuery(\\n  $installed: Boolean\\n) {\\n  images(is_installed: $installed) {\\n    id\\n    name @deprecatedSince(version: \\\"24.12.0\\\")\\n    humanized_name\\n    tag\\n    registry\\n    architecture\\n    digest\\n    installed\\n    resource_limits {\\n      key\\n      min\\n      max\\n    }\\n    labels {\\n      key\\n      value\\n    }\\n    namespace @since(version: \\\"24.12.0\\\")\\n    base_image_name @since(version: \\\"24.12.0\\\")\\n    tags @since(version: \\\"24.12.0\\\") {\\n      key\\n      value\\n    }\\n    version @since(version: \\\"24.12.0\\\")\\n    supported_accelerators\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"cd124d0155c7eab304c2d3b6dc75074a\";\n\nexport default node;\n","import {\n  ImageEnvironmentSelectFormItemsQuery,\n  ImageEnvironmentSelectFormItemsQuery$data,\n} from '../__generated__/ImageEnvironmentSelectFormItemsQuery.graphql';\nimport {\n  getImageFullName,\n  localeCompare,\n  preserveDotStartCase,\n} from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport DoubleTag from './DoubleTag';\n// @ts-ignore\nimport cssRaw from './ImageEnvironmentSelectFormItems.css?raw';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { ImageTags } from './ImageTags';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  Divider,\n  Form,\n  Input,\n  RefSelectProps,\n  Select,\n  Tag,\n  theme,\n  Typography,\n} from 'antd';\nimport { BAIFlex } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\n\nexport type Image = NonNullable<\n  NonNullable<ImageEnvironmentSelectFormItemsQuery$data>['images']\n>[0];\n\ntype ImageGroup = {\n  groupName: string;\n  environmentGroups: {\n    environmentName: string;\n    displayName: string;\n    prefix?: string;\n    images: Image[];\n  }[];\n};\n\nexport type ImageEnvironmentFormInput = {\n  environments: {\n    environment: string;\n    version: string;\n    image: Image | undefined;\n    manual?: string;\n    customizedTag?: string;\n  };\n};\n\ninterface ImageEnvironmentSelectFormItemsProps {\n  filter?: (image: Image) => boolean;\n  showPrivate?: boolean;\n}\n\nfunction compareVersions(version1: string, version2: string): number {\n  const v1 = version1.split('.').map(Number);\n  const v2 = version2.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const num1 = v1[i] || 0;\n    const num2 = v2[i] || 0;\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nconst isPrivateImage = (image: Image) => {\n  return _.some(image?.labels, (label) => {\n    return (\n      label?.key === 'ai.backend.features' &&\n      label?.value?.split(' ').includes('private')\n    );\n  });\n};\n\nconst ImageEnvironmentSelectFormItems: React.FC<\n  ImageEnvironmentSelectFormItemsProps\n> = ({ filter, showPrivate }) => {\n  const form = Form.useFormInstance<ImageEnvironmentFormInput>();\n  const environments = Form.useWatch('environments', { form, preserve: true });\n  const baiClient = useSuspendedBackendaiClient();\n  const supportExtendedImageInfo = baiClient?.supports('extended-image-info');\n\n  const [environmentSearch, setEnvironmentSearch] = useState('');\n  const [versionSearch, setVersionSearch] = useState('');\n  const { t } = useTranslation();\n  const [metadata, { getBaseVersion, getImageMeta, tagAlias }] =\n    useBackendAIImageMetaData();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n\n  const envSelectRef = useRef<RefSelectProps>(null);\n  const versionSelectRef = useRef<RefSelectProps>(null);\n  const imageEnvironmentSelectFormItemsVariables = baiClient?._config\n    ?.showNonInstalledImages\n    ? {}\n    : { installed: true };\n  const { images } = useLazyLoadQuery<ImageEnvironmentSelectFormItemsQuery>(\n    graphql`\n      query ImageEnvironmentSelectFormItemsQuery($installed: Boolean) {\n        images(is_installed: $installed) {\n          id\n          name @deprecatedSince(version: \"24.12.0\")\n          humanized_name\n          tag\n          registry\n          architecture\n          digest\n          installed\n          resource_limits {\n            key\n            min\n            max\n          }\n          labels {\n            key\n            value\n          }\n          namespace @since(version: \"24.12.0\")\n          base_image_name @since(version: \"24.12.0\")\n          tags @since(version: \"24.12.0\") {\n            key\n            value\n          }\n          version @since(version: \"24.12.0\")\n          supported_accelerators\n        }\n      }\n    `,\n    imageEnvironmentSelectFormItemsVariables,\n    {\n      fetchPolicy: 'store-and-network',\n    },\n  );\n\n  // If not initial value, select first value\n  // auto select when relative field is changed\n  useEffect(() => {\n    if (!_.isEmpty(environments?.manual)) {\n      // set undefined fields related to environments when manual is set\n      if (environments.environment || environments.version) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n          },\n        });\n      }\n      return;\n    }\n\n    let matchedEnvironmentByVersion:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    let matchedImageByVersion: Image | undefined;\n    let version = form.getFieldValue('environments')?.version;\n    // FIXME: manually add architecture based on amd64\n    if (version && version.indexOf('@') < 0) {\n      version += '@x86_64';\n    }\n    version &&\n      _.find(imageGroups, (group) => {\n        matchedEnvironmentByVersion = _.find(\n          group.environmentGroups,\n          (environment) => {\n            matchedImageByVersion = _.find(\n              environment.images,\n              (image) => getImageFullName(image) === version,\n            );\n            return !!matchedImageByVersion; // break iteration\n          },\n        );\n        return !!matchedEnvironmentByVersion; // break iteration\n      });\n\n    // if matchedEnvironmentByVersion is not existed, select first values\n    let nextEnvironment: ImageGroup['environmentGroups'][0] | undefined;\n    let nextImage: Image | undefined;\n    if (matchedEnvironmentByVersion) {\n      nextEnvironment = matchedEnvironmentByVersion;\n      nextImage = matchedImageByVersion;\n    } else if (form.getFieldValue(['environments', 'environment'])) {\n      _.find(imageGroups, (group) => {\n        nextEnvironment = _.find(group.environmentGroups, (environment) => {\n          return (\n            environment.environmentName ===\n            form.getFieldValue(['environments', 'environment'])\n          );\n        });\n        nextImage = nextEnvironment?.images[0];\n        return !!nextEnvironment;\n      });\n    }\n\n    if (!nextEnvironment || !nextImage) {\n      nextEnvironment = imageGroups[0]?.environmentGroups[0];\n      nextImage = nextEnvironment?.images[0];\n    }\n\n    const customizedImageTag = _.find(\n      nextImage?.labels,\n      (item) =>\n        item !== null && item?.key === 'ai.backend.customized-image.name',\n    )?.value;\n\n    if (nextImage) {\n      if (\n        !matchedEnvironmentByVersion &&\n        baiClient._config.allow_manual_image_name_for_session &&\n        version\n      ) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n            manual: version,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      } else {\n        form.setFieldsValue({\n          environments: {\n            environment: nextEnvironment.environmentName,\n            version: getImageFullName(nextImage),\n            image: nextImage,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      }\n    } else if (baiClient._config.allow_manual_image_name_for_session) {\n      // if no image is available, only set manual if it's allowed\n      form.setFieldValue(['environments', 'manual'], version);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environments?.version, environments?.manual]); // environments?.environment,\n\n  const imageGroups: ImageGroup[] = useMemo(\n    () =>\n      _.chain(images)\n        .filter((image) => {\n          return (\n            (showPrivate ? true : !isPrivateImage(image)) &&\n            (filter ? filter(image) : true)\n          );\n        })\n        .groupBy((image) => {\n          // group by using `group` property of image info\n          return (\n            metadata?.imageInfo[getImageMeta(getImageFullName(image) || '').key]\n              ?.group || 'Custom Environments'\n          );\n        })\n        .map((images, groupName) => {\n          return {\n            groupName,\n            environmentGroups: _.chain(images)\n              // sub group by using (environment) `name` property of image info\n              .groupBy((image) => {\n                return (\n                  // metadata?.imageInfo[\n                  //   getImageMeta(getImageFullName(image) || \"\").key\n                  // ]?.name || image?.name\n                  `${image?.registry}/${\n                    supportExtendedImageInfo ? image?.namespace : image?.name\n                  }`\n                );\n              })\n              .map((images, environmentName) => {\n                const imageKey = environmentName.split('/')?.[2];\n                const displayName =\n                  imageKey && metadata?.imageInfo[imageKey]?.name;\n\n                return {\n                  environmentName,\n                  displayName:\n                    displayName ||\n                    (_.last(environmentName.split('/')) as string),\n                  prefix: _.chain(environmentName)\n                    .split('/')\n                    .drop(1)\n                    .dropRight(1)\n                    .join('/')\n                    .value(),\n                  images: images.sort(\n                    (a, b) =>\n                      compareVersions(\n                        // latest version comes first\n                        b?.tag?.split('-')?.[0] ?? '',\n                        a?.tag?.split('-')?.[0] ?? '',\n                      ) || localeCompare(a?.architecture, b?.architecture),\n                  ),\n                };\n              })\n\n              .sortBy((item) => item.displayName)\n              .value(),\n          };\n        })\n        .sortBy((item) => item.groupName)\n        .value(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [images, metadata, filter, showPrivate],\n  );\n\n  // support search image by full name\n  const { fullNameMatchedImage } = useMemo(() => {\n    let fullNameMatchedImage: Image | undefined;\n    let fullNameMatchedImageGroup:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    if (environmentSearch.length) {\n      _.chain(\n        imageGroups\n          .flatMap((group) => group.environmentGroups)\n          .find((envGroup) => {\n            fullNameMatchedImageGroup = envGroup;\n            fullNameMatchedImage = _.find(envGroup.images, (image) => {\n              return getImageFullName(image) === environmentSearch;\n            });\n            return !!fullNameMatchedImage;\n          }),\n      ).value();\n    }\n    return {\n      fullNameMatchedImage,\n      fullNameMatchedImageGroup,\n    };\n  }, [environmentSearch, imageGroups]);\n\n  return (\n    <>\n      <style>{cssRaw}</style>\n      <Form.Item\n        className=\"image-environment-select-form-item\"\n        name={['environments', 'environment']}\n        label={\n          <Typography.Text\n            copyable={{\n              text: getImageFullName(\n                form.getFieldValue(['environments', 'image']),\n              ),\n            }}\n          >\n            {t('session.launcher.Environments')} /{' '}\n            {t('session.launcher.Version')}\n          </Typography.Text>\n        }\n        rules={[\n          {\n            required: _.isEmpty(environments?.manual),\n            message: t('general.ValueRequired', {\n              name: t('session.launcher.Environments'),\n            }),\n          },\n        ]}\n        style={{ marginBottom: 10 }}\n      >\n        <Select\n          ref={envSelectRef}\n          showSearch\n          // open={true}\n          // autoClearSearchValue\n          searchValue={environmentSearch}\n          onSearch={setEnvironmentSearch}\n          defaultActiveFirstOption={true}\n          optionFilterProp=\"filterValue\"\n          onChange={(value) => {\n            if (fullNameMatchedImage) {\n              form.setFieldsValue({\n                environments: {\n                  environment:\n                    (supportExtendedImageInfo\n                      ? fullNameMatchedImage?.namespace\n                      : fullNameMatchedImage?.name) || '',\n                  version: getImageFullName(fullNameMatchedImage),\n                  image: fullNameMatchedImage,\n                },\n              });\n            }\n            // NOTE: when user set environment only then set the version to the first item\n            else {\n              const firstInListImage: Image = imageGroups\n                .flatMap((group) => group.environmentGroups)\n                .filter((envGroup) => envGroup.environmentName === value)[0]\n                .images[0];\n              form.setFieldsValue({\n                environments: {\n                  environment:\n                    (supportExtendedImageInfo\n                      ? firstInListImage?.namespace\n                      : firstInListImage?.name) || '',\n                  version: getImageFullName(firstInListImage),\n                  image: firstInListImage,\n                },\n              });\n            }\n          }}\n          disabled={\n            baiClient._config.allow_manual_image_name_for_session &&\n            !_.isEmpty(environments?.manual)\n          }\n        >\n          {fullNameMatchedImage ? (\n            <Select.Option\n              value={\n                supportExtendedImageInfo\n                  ? fullNameMatchedImage?.namespace\n                  : fullNameMatchedImage?.name\n              }\n              filterValue={getImageFullName(fullNameMatchedImage)}\n            >\n              <BAIFlex\n                direction=\"row\"\n                align=\"center\"\n                gap=\"xs\"\n                style={{ display: 'inline-flex' }}\n              >\n                <ImageMetaIcon\n                  image={getImageFullName(fullNameMatchedImage) || ''}\n                  style={{\n                    width: 15,\n                    height: 15,\n                  }}\n                />\n                {getImageFullName(fullNameMatchedImage)}\n              </BAIFlex>\n            </Select.Option>\n          ) : (\n            _.map(imageGroups, (group) => {\n              return (\n                <Select.OptGroup key={group.groupName} label={group.groupName}>\n                  {_.map(group.environmentGroups, (environmentGroup) => {\n                    const firstImage = environmentGroup.images[0];\n                    const currentMetaImageInfo =\n                      metadata?.imageInfo[\n                        environmentGroup.environmentName.split('/')?.[2]\n                      ];\n\n                    const extraFilterValues: string[] = [];\n                    let environmentPrefixTag = null;\n                    if (\n                      environmentGroup.prefix &&\n                      !['lablup', 'cloud', 'stable'].includes(\n                        environmentGroup.prefix,\n                      )\n                    ) {\n                      extraFilterValues.push(environmentGroup.prefix);\n                      environmentPrefixTag = (\n                        <Tag color=\"purple\">\n                          <TextHighlighter keyword={environmentSearch}>\n                            {environmentGroup.prefix}\n                          </TextHighlighter>\n                        </Tag>\n                      );\n                    }\n\n                    const tagsFromMetaImageInfoLabel = _.map(\n                      currentMetaImageInfo?.label,\n                      (label) => {\n                        if (\n                          _.isUndefined(label.category) &&\n                          label.tag &&\n                          label.color\n                        ) {\n                          extraFilterValues.push(label.tag);\n                          return (\n                            <Tag color={label.color} key={label.tag}>\n                              <TextHighlighter\n                                keyword={environmentSearch}\n                                key={label.tag}\n                              >\n                                {label.tag}\n                              </TextHighlighter>\n                            </Tag>\n                          );\n                        }\n                        return null;\n                      },\n                    );\n                    return (\n                      <Select.Option\n                        key={environmentGroup.environmentName}\n                        value={environmentGroup.environmentName}\n                        filterValue={\n                          environmentGroup.displayName +\n                          '\\t' +\n                          extraFilterValues.join('\\t')\n                        }\n                      >\n                        <BAIFlex direction=\"row\" justify=\"between\">\n                          <BAIFlex direction=\"row\" align=\"center\" gap=\"xs\">\n                            <ImageMetaIcon\n                              image={getImageFullName(firstImage) || ''}\n                              style={{\n                                width: 15,\n                                height: 15,\n                              }}\n                            />\n                            <TextHighlighter keyword={environmentSearch}>\n                              {environmentGroup.displayName}\n                            </TextHighlighter>\n                          </BAIFlex>\n                          <BAIFlex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            // style={{ flex: 1 }}\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {environmentPrefixTag}\n                            {tagsFromMetaImageInfoLabel}\n                          </BAIFlex>\n                        </BAIFlex>\n                      </Select.Option>\n                    );\n                  })}\n                </Select.OptGroup>\n              );\n            })\n          )}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prev, cur) =>\n          prev.environments?.environment !== cur.environments?.environment\n        }\n      >\n        {({ getFieldValue }) => {\n          let selectedEnvironmentGroup:\n            | ImageGroup['environmentGroups'][0]\n            | undefined;\n          _.find(imageGroups, (group) => {\n            return _.find(group.environmentGroups, (environment) => {\n              if (\n                environment.environmentName ===\n                getFieldValue('environments')?.environment\n              ) {\n                selectedEnvironmentGroup = environment;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          });\n          return (\n            <Form.Item\n              className=\"image-environment-select-form-item\"\n              name={['environments', 'version']}\n              rules={[\n                {\n                  required: _.isEmpty(environments?.manual),\n                  message: t('general.ValueRequired', {\n                    name: t('session.launcher.Version'),\n                  }),\n                },\n              ]}\n            >\n              <Select\n                ref={versionSelectRef}\n                onChange={(value) => {\n                  const selectedImage = _.find(images, (image) => {\n                    return getImageFullName(image) === value;\n                  });\n                  form.setFieldValue(['environments', 'image'], selectedImage);\n                }}\n                showSearch\n                searchValue={versionSearch}\n                onSearch={setVersionSearch}\n                // autoClearSearchValue\n                optionFilterProp=\"filterValue\"\n                // optionLabelProp=\"label\"\n                dropdownRender={(menu) => (\n                  <>\n                    <BAIFlex\n                      style={{\n                        fontWeight: token.fontWeightStrong,\n                        paddingLeft: token.paddingSM,\n                      }}\n                    >\n                      {t('session.launcher.Version')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Architecture')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Tags')}\n                    </BAIFlex>\n                    <Divider style={{ margin: '8px 0' }} />\n                    {menu}\n                  </>\n                )}\n                disabled={\n                  baiClient._config.allow_manual_image_name_for_session &&\n                  !_.isEmpty(environments?.manual)\n                }\n              >\n                {_.map(\n                  _.uniqBy(selectedEnvironmentGroup?.images, 'id'),\n\n                  (image) => {\n                    const [version, tag, ...requirements] = image?.tag?.split(\n                      '-',\n                    ) || ['', '', ''];\n\n                    let metadataTagAlias = metadata?.tagAlias[tag];\n                    if (!metadataTagAlias) {\n                      for (const [key, replaceString] of Object.entries(\n                        metadata?.tagReplace || {},\n                      )) {\n                        const pattern = new RegExp(key);\n                        if (pattern.test(tag)) {\n                          metadataTagAlias = tag?.replace(\n                            pattern,\n                            replaceString,\n                          );\n                        }\n                      }\n                      if (!metadataTagAlias) {\n                        metadataTagAlias = tag;\n                      }\n                    }\n\n                    const extraFilterValues: string[] = [];\n                    const requirementTags = _.chain(requirements)\n                      .filter(\n                        (requirement) => !requirement.startsWith('customized_'),\n                      )\n                      .map((requirement, idx) => (\n                        <DoubleTag\n                          key={idx}\n                          values={_.split(\n                            metadata?.tagAlias[requirement] || requirement,\n                            ':',\n                          ).map((str) => {\n                            extraFilterValues.push(str);\n                            return {\n                              label: str,\n                              highlightKeyword: versionSearch,\n                            };\n                          })}\n                        />\n                      ))\n                      .value();\n                    const imageLabels = image?.labels;\n                    if (imageLabels) {\n                      const customizedImageNameLabelIdx = _.findIndex(\n                        imageLabels,\n                        (item) =>\n                          item !== null &&\n                          item?.key === 'ai.backend.customized-image.name',\n                      );\n                      if (\n                        customizedImageNameLabelIdx &&\n                        imageLabels[customizedImageNameLabelIdx]\n                      ) {\n                        const tag =\n                          imageLabels[customizedImageNameLabelIdx]?.value || '';\n                        extraFilterValues.push('Customized');\n                        extraFilterValues.push(tag);\n                        requirementTags.push(\n                          <DoubleTag\n                            key={requirementTags.length + 1}\n                            highlightKeyword={versionSearch}\n                            values={[\n                              {\n                                label: 'Customized',\n                                color: 'cyan',\n                              },\n                              {\n                                label: tag ?? '',\n                                color: 'cyan',\n                              },\n                            ]}\n                          />,\n                        );\n                      }\n                    }\n                    return (\n                      <Select.Option\n                        key={image?.id}\n                        value={getImageFullName(image)}\n                        filterValue={[\n                          version,\n                          metadataTagAlias,\n                          image?.architecture,\n                          ...extraFilterValues,\n                        ].join('\\t')}\n                      >\n                        {supportExtendedImageInfo ? (\n                          <BAIFlex direction=\"row\">\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.version}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.architecture}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <BAIFlex direction=\"row\" align=\"start\">\n                              {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                              {_.map(\n                                image?.tags,\n                                (tag: { key: string; value: string }) => {\n                                  const isCustomized = _.includes(\n                                    tag.key,\n                                    'customized_',\n                                  );\n                                  const tagValue = isCustomized\n                                    ? _.find(image?.labels, {\n                                        key: 'ai.backend.customized-image.name',\n                                      })?.value\n                                    : tag.value;\n                                  const aliasedTag = tagAlias(\n                                    tag.key + tagValue,\n                                  );\n                                  return _.isEqual(\n                                    aliasedTag,\n                                    preserveDotStartCase(tag.key + tagValue),\n                                  ) || isCustomized ? (\n                                    <DoubleTag\n                                      key={tag.key}\n                                      highlightKeyword={versionSearch}\n                                      values={[\n                                        {\n                                          label: tagAlias(tag.key),\n                                          color: isCustomized ? 'cyan' : 'blue',\n                                        },\n                                        {\n                                          label: tagValue ?? '',\n                                          color: isCustomized ? 'cyan' : 'blue',\n                                        },\n                                      ]}\n                                    />\n                                  ) : (\n                                    <Tag\n                                      key={tag.key}\n                                      color={isCustomized ? 'cyan' : 'blue'}\n                                    >\n                                      <TextHighlighter keyword={versionSearch}>\n                                        {aliasedTag}\n                                      </TextHighlighter>\n                                    </Tag>\n                                  );\n                                },\n                              )}\n                            </BAIFlex>\n                          </BAIFlex>\n                        ) : (\n                          <BAIFlex direction=\"row\" justify=\"between\">\n                            <BAIFlex direction=\"row\">\n                              <TextHighlighter keyword={versionSearch}>\n                                {getBaseVersion(getImageFullName(image) || '')}\n                              </TextHighlighter>\n                              <Divider type=\"vertical\" />\n                              <TextHighlighter keyword={versionSearch}>\n                                {image?.architecture}\n                              </TextHighlighter>\n                              <Divider type=\"vertical\" />\n                              <ImageTags\n                                tag={image?.tag || ''}\n                                highlightKeyword={versionSearch}\n                                labels={\n                                  image?.labels as Array<{\n                                    key: string;\n                                    value: string;\n                                  }>\n                                }\n                              />\n                            </BAIFlex>\n                          </BAIFlex>\n                        )}\n                      </Select.Option>\n                    );\n                  },\n                )}\n              </Select>\n            </Form.Item>\n          );\n        }}\n      </Form.Item>\n      <Form.Item\n        label={t('session.launcher.ManualImageName')}\n        name={['environments', 'manual']}\n        style={{\n          display: baiClient._config.allow_manual_image_name_for_session\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Input\n          allowClear\n          onChange={(value) => {\n            if (!_.isEmpty(value)) {\n              form.setFieldsValue({\n                environments: {\n                  environment: undefined,\n                  version: undefined,\n                  image: undefined,\n                },\n              });\n            } else {\n            }\n          }}\n        />\n      </Form.Item>\n      <Form.Item noStyle hidden name={['environments', 'image']}>\n        <Input />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ImageEnvironmentSelectFormItems;\n","/**\n * @generated SignedSource<<a473707c26b9b877ea1ea8f6a1405d36>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ImageTagsUNSAFELazySessionImageTagQuery$variables = {\n  uuid: string;\n};\nexport type ImageTagsUNSAFELazySessionImageTagQuery$data = {\n  readonly compute_session: {\n    readonly architecture: string | null | undefined;\n    readonly image: string | null | undefined;\n    readonly mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type ImageTagsUNSAFELazySessionImageTagQuery = {\n  response: ImageTagsUNSAFELazySessionImageTagQuery$data;\n  variables: ImageTagsUNSAFELazySessionImageTagQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"uuid\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mounts\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageTagsUNSAFELazySessionImageTagQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageTagsUNSAFELazySessionImageTagQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          (v4/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"561670e250a47b880df70cc432c19049\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageTagsUNSAFELazySessionImageTagQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageTagsUNSAFELazySessionImageTagQuery(\\n  $uuid: UUID!\\n) {\\n  compute_session(id: $uuid) {\\n    image\\n    mounts\\n    architecture\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"20cd966dac98c484e7c795ff3d7e78a4\";\n\nexport default node;\n","import { ImageTagsUNSAFELazySessionImageTagQuery } from '../__generated__/ImageTagsUNSAFELazySessionImageTagQuery.graphql';\nimport { preserveDotStartCase } from '../helper';\nimport { useBackendAIImageMetaData } from '../hooks';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag, TagProps, theme } from 'antd';\nimport { BAIFlex } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport React from 'react';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\n\ninterface ImageAliasNameAndBaseVersionTagsProps\n  extends Omit<DoubleTagObjectValue, 'label'> {\n  image: string | null;\n}\nconst ImageAliasNameAndBaseVersionTags: React.FC<\n  ImageAliasNameAndBaseVersionTagsProps\n> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageAliasName, getBaseVersion, tagAlias }] =\n    useBackendAIImageMetaData();\n  return (\n    <DoubleTag\n      values={[\n        {\n          label: tagAlias(getImageAliasName(image)),\n          color: 'blue',\n        },\n        {\n          label: getBaseVersion(image),\n          color: 'green',\n        },\n      ]}\n      {...props}\n    />\n  );\n};\n\ninterface BaseImageTagsProps extends TagProps {\n  image: string | null;\n}\nconst BaseImageTags: React.FC<BaseImageTagsProps> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getBaseImage, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getBaseImage(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseImage(image))}\n    </Tag>\n  );\n};\n\ninterface ArchitectureTagsProps extends TagProps {\n  image: string | null;\n}\nconst ArchitectureTags: React.FC<ArchitectureTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getArchitecture, tagAlias }] = useBackendAIImageMetaData();\n  return _.isEmpty(tagAlias(getArchitecture(image))) ? null : (\n    <Tag color=\"green\" {...props}>\n      {getArchitecture(image)}\n    </Tag>\n  );\n};\n\nconst SessionKernelTags: React.FC<{\n  image: string | null;\n  border?: boolean;\n}> = React.memo(function SessionKernelTags({ image }) {\n  image = image || '';\n  return (\n    <>\n      <ImageAliasNameAndBaseVersionTags image={image} />\n      <BaseImageTags image={image} />\n      <ArchitectureTags image={image} />\n    </>\n  );\n});\n\ninterface ImageTagsProps extends TagProps {\n  tag: string;\n  labels: Array<{ key: string; value: string }>;\n  highlightKeyword?: string;\n}\nexport const ImageTags: React.FC<ImageTagsProps> = ({\n  tag,\n  labels,\n  highlightKeyword,\n  ...props\n}) => {\n  labels = labels || [];\n  const [, { getTags, tagAlias }] = useBackendAIImageMetaData();\n  const tags = getTags(tag, labels);\n  return (\n    <React.Fragment {...props}>\n      {_.map(tags, (tag: { key: string; value: string }, index) => {\n        const isCustomized = tag.key === 'Customized';\n        const aliasedTag = tagAlias(tag.key + tag.value);\n        return _.isEqual(\n          aliasedTag,\n          preserveDotStartCase(tag.key + tag.value),\n        ) ? (\n          <DoubleTag\n            key={tag.key}\n            highlightKeyword={highlightKeyword}\n            values={[\n              {\n                label: tagAlias(tag.key),\n                color: isCustomized ? 'cyan' : 'blue',\n              },\n              {\n                label: tag.value,\n                color: isCustomized ? 'cyan' : 'blue',\n              },\n            ]}\n          />\n        ) : (\n          <Tag key={tag.key} color={isCustomized ? 'cyan' : 'blue'}>\n            <TextHighlighter keyword={highlightKeyword} key={index}>\n              {aliasedTag}\n            </TextHighlighter>\n          </Tag>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\ninterface UNSAFELazySessionImageTagProps {\n  sessionId: string | null;\n}\nexport const UNSAFELazySessionImageTag: React.FC<\n  UNSAFELazySessionImageTagProps\n> = ({ sessionId }) => {\n  const { token } = theme.useToken();\n  const { compute_session } =\n    useLazyLoadQuery<ImageTagsUNSAFELazySessionImageTagQuery>(\n      graphql`\n        query ImageTagsUNSAFELazySessionImageTagQuery($uuid: UUID!) {\n          compute_session(id: $uuid) {\n            image\n            mounts\n            architecture\n          }\n        }\n      `,\n      {\n        uuid: sessionId || '',\n      },\n      {\n        fetchPolicy: sessionId ? 'store-or-network' : 'store-only',\n      },\n    );\n\n  const imageFullName =\n    compute_session?.image &&\n    compute_session?.architecture &&\n    compute_session.image + '@' + compute_session.architecture;\n\n  return imageFullName ? (\n    <BAIFlex gap={['xs', 0]} wrap=\"wrap\">\n      <ImageMetaIcon\n        image={imageFullName}\n        style={{ marginRight: token.marginXS }}\n      />\n      <SessionKernelTags image={imageFullName} />\n    </BAIFlex>\n  ) : null;\n};\n","/**\n * @generated SignedSource<<6a9112d8eab0fa8667190c09c69c4273>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type VFolderTableProjectQuery$variables = {\n  domain_name: string;\n  group_id: string;\n  keypair_resource_policy_name: string;\n};\nexport type VFolderTableProjectQuery$data = {\n  readonly domain: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n  readonly group: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n  readonly keypair_resource_policy: {\n    readonly allowed_vfolder_hosts: string | null | undefined;\n  } | null | undefined;\n};\nexport type VFolderTableProjectQuery = {\n  response: VFolderTableProjectQuery$data;\n  variables: VFolderTableProjectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"domain_name\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"group_id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"keypair_resource_policy_name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"allowed_vfolder_hosts\",\n    \"storageKey\": null\n  }\n],\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"domain_name\"\n      }\n    ],\n    \"concreteType\": \"Domain\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"domain\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"domain_name\",\n        \"variableName\": \"domain_name\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"group_id\"\n      }\n    ],\n    \"concreteType\": \"Group\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"group\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"keypair_resource_policy_name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"2c2ce905afd89e93c6d761f22ed59f3d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"VFolderTableProjectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query VFolderTableProjectQuery(\\n  $domain_name: String!\\n  $group_id: UUID!\\n  $keypair_resource_policy_name: String!\\n) {\\n  domain(name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  group(id: $group_id, domain_name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  keypair_resource_policy(name: $keypair_resource_policy_name) {\\n    allowed_vfolder_hosts\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ccdbaa52a63c2ea005423e7c541eff80\";\n\nexport default node;\n","/**\n * @generated SignedSource<<aed62292557ed2085f1400aef2426716>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null | undefined;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","import { VFolderPermissionTag_VFolder$key } from '../__generated__/VFolderPermissionTag_VFolder.graphql';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport _ from 'lodash';\nimport React from 'react';\nimport { graphql, useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { VFolderTableProjectQuery } from '../__generated__/VFolderTableProjectQuery.graphql';\nimport { useBaiSignedRequestWithPromise } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useKeyPairLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport FolderCreateModal from './FolderCreateModal';\nimport { useFolderExplorerOpener } from './FolderExplorerOpener';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Descriptions,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tag,\n  theme,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport { BAIUserUnionIcon, BAIFlex, BAILink } from 'backend.ai-ui';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { PlusIcon } from 'lucide-react';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  useTransition,\n} from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\nexport interface VFolderTableProps extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (\n    selectedKeys: VFolderKey[],\n    selectedVFolders: VFolder[],\n  ) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  rowFilter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n  onChangeAutoMountedFolders?: (names: Array<string>) => void;\n  showAutoMountedFoldersSection?: boolean;\n  ownerEmail?: string;\n  onValidateSelectedRowKeys?: (\n    invalidKeys: VFolderKey[],\n    validVFolders: VFolder[],\n  ) => void;\n}\n\nexport const vFolderAliasNameRegExp = /^[a-zA-Z0-9_/.-]*$/;\nexport const DEFAULT_ALIAS_BASE_PATH = '/home/work/';\nconst VFolderTable: React.FC<VFolderTableProps> = ({\n  rowFilter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = DEFAULT_ALIAS_BASE_PATH,\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  onChangeAutoMountedFolders,\n  showAutoMountedFoldersSection,\n  ownerEmail,\n  onValidateSelectedRowKeys,\n  ...tableProps\n}) => {\n  const { generateFolderPath } = useFolderExplorerOpener();\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [isOpenCreateModal, setIsOpenCreateModal] = useState(false);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableState<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: (selectedKeys: VFolderKey[]) => {\n        const selectedVFolders = _.filter(displayingFolders, (folder) =>\n          _.includes(selectedKeys, getRowKey(folder)),\n        );\n        onChangeSelectedRowKeys?.(selectedKeys, selectedVFolders);\n      },\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableState<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useSuspenseTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey, currentProject.id, ownerEmail],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      // FIXME: filter by group_id does not work\n      // search.set('group_id', currentProject.id);\n      ownerEmail && search.set('owner_user_email', ownerEmail);\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?${search.toString()}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 1000,\n  });\n\n  const { domain, group, keypair_resource_policy } =\n    useLazyLoadQuery<VFolderTableProjectQuery>(\n      graphql`\n        query VFolderTableProjectQuery(\n          $domain_name: String!\n          $group_id: UUID!\n          $keypair_resource_policy_name: String!\n        ) {\n          domain(name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          group(id: $group_id, domain_name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          keypair_resource_policy(name: $keypair_resource_policy_name) {\n            allowed_vfolder_hosts\n          }\n        }\n      `,\n      {\n        domain_name: baiClient._config.domainName,\n        group_id: currentProject.id,\n        keypair_resource_policy_name: keypair?.resource_policy || '',\n      },\n      {\n        fetchPolicy: 'store-and-network',\n        fetchKey: fetchKey,\n      },\n    );\n\n  const mountableVolumesByPermission = useMemo(() => {\n    const allowedVFolderHostsByDomain = JSON.parse(\n      domain?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByGroup = JSON.parse(\n      group?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByKeypairResourcePolicy = JSON.parse(\n      keypair_resource_policy?.allowed_vfolder_hosts || '{}',\n    );\n\n    const mergedVFolderPermissions = _.merge(\n      {}, // start with empty object\n      allowedVFolderHostsByDomain,\n      allowedVFolderHostsByGroup,\n      allowedVFolderHostsByKeypairResourcePolicy,\n    );\n    // only allow mount if volume permission has 'mount-in-session'\n    return Object.keys(mergedVFolderPermissions).filter((volume) =>\n      mergedVFolderPermissions[volume].includes('mount-in-session'),\n    );\n  }, [domain, group, keypair_resource_policy]);\n\n  const accessibleFoldersByCurrentProject = useMemo(() => {\n    return (\n      allFolderList?.filter(\n        (folder) =>\n          folder.ownership_type === 'user' ||\n          !folder.group ||\n          folder.group === currentProject.id,\n      ) || []\n    );\n  }, [allFolderList, currentProject.id]);\n\n  const mountableFoldersByPermission = useMemo(() => {\n    return accessibleFoldersByCurrentProject.filter((folder) =>\n      mountableVolumesByPermission.includes(folder.host),\n    );\n  }, [accessibleFoldersByCurrentProject, mountableVolumesByPermission]);\n\n  useEffect(() => {\n    // check selectedRowKeys are valid\n    const invalidKeys = _.difference(\n      selectedRowKeys,\n      mountableFoldersByPermission.map((vf) => getRowKey(vf)),\n    );\n\n    onValidateSelectedRowKeys?.(\n      invalidKeys,\n      _.filter(mountableFoldersByPermission, (vf) =>\n        _.includes(selectedRowKeys, getRowKey(vf)),\n      ),\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    mountableFoldersByPermission,\n    getRowKey,\n    onValidateSelectedRowKeys,\n    // Use JSON.stringify to compare array contents rather than reference\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    JSON.stringify(selectedRowKeys),\n  ]);\n\n  const autoMountedFolderNames = useMemo(\n    () =>\n      _.chain(mountableFoldersByPermission)\n        .filter((vf) => vf.status === 'ready' && vf.name?.startsWith('.'))\n        .map((vf) => vf.name)\n        .value(),\n    [mountableFoldersByPermission],\n  );\n\n  useEffect(() => {\n    _.isFunction(onChangeAutoMountedFolders) &&\n      onChangeAutoMountedFolders(autoMountedFolderNames);\n    // Do not need to run when `autoMountedFolderNames` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoMountedFolderNames]);\n\n  useEffect(() => {\n    // Only reset selectedRowKeys when currentProject changes if there are no controlled selectedRowKeys\n    if (!controlledSelectedRowKeys || controlledSelectedRowKeys.length === 0) {\n      setSelectedRowKeys([]);\n    }\n    // Reset selectedRowKeys when currentProject changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentProject.id]);\n\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = useMemo(() => {\n    return _.chain(mountableFoldersByPermission)\n      .filter((vf) => {\n        // Apply external filter for display\n        if (rowFilter && !rowFilter(vf)) {\n          return false;\n        }\n        // Always show selected items\n        if (selectedRowKeys.includes(getRowKey(vf))) {\n          return true;\n        }\n        // Apply search filter\n        return !searchKey || vf.name.includes(searchKey);\n      })\n      .value();\n  }, [\n    mountableFoldersByPermission,\n    rowFilter,\n    selectedRowKeys,\n    getRowKey,\n    searchKey,\n  ]);\n\n  /**\n   * Converts the input path to an aliased path based on the provided name and input.\n   * If the input is empty, it appends the name to the alias base path.\n   * If the input starts with '/', it returns the input as is.\n   * Otherwise, it appends the input to the alias base path.\n   *\n   * @param name - The name of the VFolderKey.\n   * @param input - The input path to be converted.\n   * @returns The aliased path based on the name and input.\n   */\n  const inputToAliasPath = useCallback(\n    (name: VFolderKey, input?: string) => {\n      if (input === undefined || input === '') {\n        return `${aliasBasePath}${name}`;\n      } else if (input.startsWith('/')) {\n        return input;\n      } else {\n        return `${aliasBasePath}${input}`;\n      }\n    },\n    [aliasBasePath],\n  );\n\n  const handleAliasUpdate = useEventNotStable(() => {\n    setAliasMap(\n      _.mapValues(\n        _.pickBy(internalForm.getFieldsValue({ strict: false }), (v) => !!v), //remove empty\n        (v, k) => inputToAliasPath(k, v), // add alias base path\n      ),\n    );\n    internalForm.validateFields().catch(() => {});\n  });\n\n  useEffect(() => {\n    handleAliasUpdate();\n    // `selectedRowKeys` can be changed by parents at any time, so we need to check whether `selectedRowKeys` has changed using JSON.stringify\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(selectedRowKeys), handleAliasUpdate]);\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <BAIFlex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </BAIFlex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <BAIFlex\n            direction=\"column\"\n            align=\"start\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : {\n                    maxWidth: 200,\n                  }\n            }\n          >\n            <BAILink type=\"hover\" to={generateFolderPath(record.id)}>\n              <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            </BAILink>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || inputToAliasPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: vFolderAliasNameRegExp,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    inputToAliasPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            const aliasPath = inputToAliasPath(\n                              getRowKey(record),\n                              value,\n                            );\n                            if (\n                              value &&\n                              _.map(\n                                autoMountedFolderNames,\n                                // `n` is the name of the auto mounted folder. It cannot be empty.\n                                (n) => inputToAliasPath('', n),\n                              ).includes(aliasPath)\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.FolderAliasOverlappingToAutoMount',\n                                ),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={inputToAliasPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        allowClear\n                        onChange={() => {\n                          handleAliasUpdate();\n                        }}\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </BAIFlex>\n        );\n      },\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (_, record) => {\n        return (\n          <BAIFlex direction=\"column\">\n            {record.ownership_type === 'user' ? (\n              <BAIFlex gap={'xs'}>\n                <Typography.Text>{t('data.User')}</Typography.Text>\n                <UserOutlined style={{ color: token.colorTextTertiary }} />\n              </BAIFlex>\n            ) : (\n              <BAIFlex gap={'xs'}>\n                <Typography.Text>{t('data.Project')}</Typography.Text>\n                <BAIUserUnionIcon style={{ color: token.colorTextTertiary }} />\n              </BAIFlex>\n            )}\n          </BAIFlex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n      defaultSortOrder: 'descend',\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <BAIFlex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <BAIFlex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingRefetch}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startRefetchTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n        <Tooltip title={t('data.CreateANewStorageFolder')}>\n          <Button\n            icon={<PlusIcon />}\n            type=\"primary\"\n            ghost\n            onClick={() => {\n              setIsOpenCreateModal(true);\n            }}\n          />\n        </Tooltip>\n      </BAIFlex>\n      <Form form={internalForm} component={false} preserve={false}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n      {showAutoMountedFoldersSection && autoMountedFolderNames.length > 0 ? (\n        <>\n          <Descriptions size=\"small\">\n            <Descriptions.Item label={t('data.AutomountFolders')}>\n              {_.map(autoMountedFolderNames, (name) => {\n                return <Tag key={name}>{name}</Tag>;\n              })}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ) : null}\n      <FolderCreateModal\n        open={isOpenCreateModal}\n        onRequestClose={(result) => {\n          setIsOpenCreateModal(false);\n          if (result) {\n            startRefetchTransition(() => {\n              updateFetchKey();\n              setSelectedRowKeys((x) => [\n                ...x,\n                // @ts-ignore\n                result[rowKey],\n              ]);\n            });\n          }\n        }}\n      />\n    </BAIFlex>\n  );\n};\n\nexport default VFolderTable;\n","import { useEventNotStable } from '../hooks/useEventNotStable';\nimport { VFolder } from './VFolderSelect';\nimport VFolderTable, {\n  AliasMap,\n  DEFAULT_ALIAS_BASE_PATH,\n  VFolderTableProps,\n  vFolderAliasNameRegExp,\n} from './VFolderTable';\nimport { App, Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFormItemProps extends Omit<FormItemProps, 'name'> {\n  rowFilter?: VFolderTableProps['rowFilter'];\n  rowKey?: keyof VFolder;\n  tableProps?: Partial<VFolderTableProps>;\n}\n\nexport interface VFolderTableFormValues {\n  // The mounts field has been deprecated but is retained for backward compatibility\n  mounts?: string[];\n  mount_ids?: string[];\n  mount_id_map?: Record<string, string>;\n  vfoldersNameMap?: Record<string, string>;\n  autoMountedFolderNames?: string[];\n}\n\nconst VFolderTableFormItem: React.FC<VFolderTableFormItemProps> = ({\n  rowFilter,\n  rowKey = 'name',\n  tableProps,\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n\n  const { message } = App.useApp();\n  return (\n    <>\n      <Form.Item\n        hidden\n        name={'mount_id_map'}\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mount_ids'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              if (_.some(arr, (alias) => !vFolderAliasNameRegExp.test(alias))) {\n                return Promise.reject(t('session.launcher.FolderAliasInvalid'));\n              }\n\n              if (\n                _.some(\n                  form.getFieldValue('autoMountedFolderNames'),\n                  (autoName) =>\n                    arr.includes(DEFAULT_ALIAS_BASE_PATH + autoName),\n                )\n              ) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlappingToAutoMount'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      {/* The mounts field has been deprecated but is retained for backward compatibility */}\n      <Form.Item hidden name=\"mounts\">\n        <div />\n      </Form.Item>\n      <Form.Item hidden name=\"autoMountedFolderNames\">\n        <div />\n      </Form.Item>\n      <Form.Item hidden name=\"vfoldersNameMap\">\n        <div />\n      </Form.Item>\n      <Form.Item\n        name={'mount_ids'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          key={tableProps?.ownerEmail}\n          rowKey={rowKey}\n          showAliasInput\n          aliasMap={form.getFieldValue('mount_id_map')}\n          onChangeAliasMap={useEventNotStable((aliasMap) => {\n            form.setFieldValue('mount_id_map', aliasMap);\n            form.validateFields(['mount_id_map']);\n          })}\n          // TODO: implement pagination\n          pagination={false}\n          rowFilter={rowFilter}\n          showAutoMountedFoldersSection\n          onChangeAutoMountedFolders={useEventNotStable((names) => {\n            form.setFieldValue('autoMountedFolderNames', names);\n          })}\n          onValidateSelectedRowKeys={useEventNotStable(\n            (invalidKeys, validVFolders) => {\n              form.setFieldValue(\n                'mount_ids',\n                _.difference(form.getFieldValue('mount_ids'), invalidKeys),\n              );\n              form.setFieldValue(\n                'mount_id_map',\n                _.omitBy(form.getFieldValue('mount_id_map'), (alias, key) =>\n                  invalidKeys.includes(key),\n                ),\n              );\n\n              form.setFieldValue(\n                'vfoldersNameMap',\n                _.reduce(\n                  validVFolders,\n                  (acc, vf) => {\n                    // @ts-ignore\n                    acc[vf[rowKey]] = vf.name;\n                    return acc;\n                  },\n                  {} as Record<string, string>,\n                ),\n              );\n\n              if (invalidKeys.length > 0) {\n                message.warning(\n                  t('session.launcher.InvalidMountsSelectionWarning'),\n                );\n              }\n            },\n          )}\n          {...tableProps}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFormItem;\n"],"names":["sensitivePatterns","sanitizeSensitiveEnv","envs","_","env","key","variable","some","pattern","test","value","_ref","formItemProps","props","inputRef","useRef","t","useTranslation","form","Form","useFormInstance","_jsx","List","children","fields","_ref2","add","remove","_jsxs","BAIFlex","direction","gap","align","map","_ref3","index","name","restField","Item","style","marginBottom","flex","rules","required","message","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","length","Promise","reject","resolve","Input","ref","placeholder","onChange","fieldNames","field","validateFields","validateTrigger","MinusCircleOutlined","onClick","noStyle","Button","type","setTimeout","current","focus","icon","PlusOutlined","block","node","v0","v1","v2","v3","hash","_baiClient$_config","filter","showPrivate","environments","useWatch","preserve","baiClient","useSuspendedBackendaiClient","supportExtendedImageInfo","supports","environmentSearch","setEnvironmentSearch","useState","versionSearch","setVersionSearch","metadata","getBaseVersion","getImageMeta","tagAlias","useBackendAIImageMetaData","token","theme","useToken","isDarkMode","useThemeMode","envSelectRef","versionSelectRef","imageEnvironmentSelectFormItemsVariables","_config","showNonInstalledImages","installed","images","useLazyLoadQuery","_ImageEnvironmentSelectFormItemsQuery","fetchPolicy","useEffect","_form$getFieldValue","_$find","_nextImage","manual","environment","version","setFieldsValue","undefined","image","matchedEnvironmentByVersion","matchedImageByVersion","nextEnvironment","nextImage","_imageGroups$","_nextEnvironment2","indexOf","imageGroups","group","environmentGroups","getImageFullName","_nextEnvironment","environmentName","customizedImageTag","labels","item","allow_manual_image_name_for_session","customizedTag","setFieldValue","useMemo","label","_label$value","split","includes","isPrivateImage","groupBy","_metadata$imageInfo$g","imageInfo","groupName","registry","namespace","_environmentName$spli","_metadata$imageInfo$i","imageKey","displayName","prefix","drop","dropRight","join","sort","a","b","_b$tag$split$","_b$tag","_b$tag$split","_a$tag$split$","_a$tag","_a$tag$split","version1","version2","Number","Math","max","num1","num2","compareVersions","tag","localeCompare","architecture","sortBy","fullNameMatchedImage","fullNameMatchedImageGroup","flatMap","find","envGroup","_Fragment","className","Typography","Text","copyable","text","Select","showSearch","searchValue","onSearch","defaultActiveFirstOption","optionFilterProp","firstInListImage","disabled","Option","filterValue","display","ImageMetaIcon","width","height","OptGroup","environmentGroup","_environmentGroup$env","firstImage","currentMetaImageInfo","extraFilterValues","environmentPrefixTag","push","Tag","color","TextHighlighter","keyword","tagsFromMetaImageInfoLabel","category","justify","marginLeft","marginXS","flexShrink","shouldUpdate","prev","cur","_prev$environments","_cur$environments","_selectedEnvironmentG","selectedEnvironmentGroup","_getFieldValue","selectedImage","dropdownRender","menu","fontWeight","fontWeightStrong","paddingLeft","paddingSM","Divider","margin","_image$tag","requirements","metadataTagAlias","replaceString","Object","entries","tagReplace","RegExp","replace","requirementTags","requirement","startsWith","idx","DoubleTag","values","str","highlightKeyword","imageLabels","customizedImageNameLabelIdx","_imageLabels$customiz","tags","_$find2","isCustomized","tagValue","aliasedTag","preserveDotStartCase","ImageTags","id","allowClear","hidden","v4","ImageAliasNameAndBaseVersionTags","getImageAliasName","BaseImageTags","getBaseImage","ArchitectureTags","getArchitecture","SessionKernelTags","React","_ref5","getTags","UNSAFELazySessionImageTag","_ref6","sessionId","compute_session","_ImageTagsUNSAFELazySessionImageTagQuery","uuid","imageFullName","wrap","marginRight","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","tagValues","r","w","d","perm","hasPermission","toUpperCase","compact","vFolderAliasNameRegExp","DEFAULT_ALIAS_BASE_PATH","rowFilter","showAliasInput","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","aliasBasePath","aliasMap","controlledAliasMap","onChangeAliasMap","rowKey","onChangeAutoMountedFolders","showAutoMountedFoldersSection","ownerEmail","onValidateSelectedRowKeys","tableProps","generateFolderPath","useFolderExplorerOpener","getRowKey","record","isOpenCreateModal","setIsOpenCreateModal","setSelectedRowKeys","useControllableState","selectedKeys","selectedVFolders","displayingFolders","folder","defaultValue","setAliasMap","keypair","useKeyPairLazyLoadQuery","accessKey","internalForm","useForm","v","slice","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","fetchKey","updateFetchKey","useUpdatableState","isPendingRefetch","startRefetchTransition","useTransition","data","allFolderList","useSuspenseTanQuery","queryKey","queryFn","search","URLSearchParams","set","method","url","toString","staleTime","domain","keypair_resource_policy","_VFolderTableProjectQuery","domain_name","domainName","group_id","keypair_resource_policy_name","resource_policy","mountableVolumesByPermission","allowedVFolderHostsByDomain","JSON","parse","allowed_vfolder_hosts","allowedVFolderHostsByGroup","allowedVFolderHostsByKeypairResourcePolicy","mergedVFolderPermissions","keys","volume","accessibleFoldersByCurrentProject","ownership_type","mountableFoldersByPermission","host","invalidKeys","vf","stringify","autoMountedFolderNames","_vf$name","status","searchKey","setSearchKey","inputToAliasPath","useCallback","input","handleAliasUpdate","useEventNotStable","getFieldsValue","strict","k","catch","columns","title","Tooltip","Trans","i18nKey","QuestionCircleOutlined","dataIndex","sorter","render","isCurrentRowSelected","maxWidth","BAILink","to","allAliasPathMap","reduce","result","async","path","aliasPath","n","extra","e","stopPropagation","usage_mode","UserOutlined","colorTextTertiary","BAIUserUnionIcon","row","VFolderPermissionTag","created_at","dayjs","format","defaultSortOrder","target","loading","ReloadOutlined","PlusIcon","ghost","component","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","Descriptions","size","FolderCreateModal","open","onRequestClose","App","useApp","arr","alias","autoName","valuePropName","trigger","VFolderTable","pagination","names","validVFolders","acc","warning"],"sourceRoot":""}