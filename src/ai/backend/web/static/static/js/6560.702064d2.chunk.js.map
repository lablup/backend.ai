{"version":3,"file":"static/js/6560.702064d2.chunk.js","mappings":"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","sources":["components/BAIPropertyFilter.tsx","components/ComputeSessionNodeItems/__generated__/SessionSlotCellFragment.graphql.ts","components/__generated__/SessionNodesFragment.graphql.ts","components/ComputeSessionNodeItems/SessionSlotCell.tsx","components/SessionNodes.tsx","hooks/useDeferredQueryParams.tsx","pages/ComputeSessionListPage.tsx","pages/__generated__/ComputeSessionListPageQuery.graphql.ts"],"sourcesContent":["import { filterEmptyItem } from '../helper';\nimport Flex from './Flex';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  AutoComplete,\n  AutoCompleteProps,\n  Button,\n  GetRef,\n  Input,\n  Select,\n  Space,\n  Tag,\n  Tooltip,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, {\n  ComponentProps,\n  ReactNode,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\n//github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/models/minilang/queryfilter.py\nexport type FilterProperty = {\n  key: string;\n  // operators: Array<string>;\n  defaultOperator?: string;\n  propertyLabel: string;\n  // TODO: support array, number\n  type: 'string' | 'boolean';\n  options?: AutoCompleteProps['options'];\n  strictSelection?: boolean;\n  rule?: {\n    message: string;\n    validate: (value: string) => boolean;\n  };\n};\n\nexport interface BAIPropertyFilterProps\n  extends Omit<ComponentProps<typeof Flex>, 'value' | 'onChange'> {\n  value?: string;\n  onChange?: (value: string) => void;\n  defaultValue?: string;\n  filterProperties: Array<FilterProperty>;\n  loading?: boolean;\n}\n\ninterface FilterInput {\n  property: string;\n  operator: string;\n  value: string;\n  label?: ReactNode;\n  type: FilterProperty['type'];\n  propertyLabel: string;\n}\n\nconst DEFAULT_OPERATOR_OF_TYPES = {\n  string: 'ilike',\n  boolean: '==',\n};\n\nconst DEFAULT_OPTIONS_OF_TYPES: {\n  [key: string]: AutoCompleteProps['options'] | undefined;\n} = {\n  boolean: [\n    {\n      label: 'True',\n      value: 'true',\n    },\n    {\n      label: 'False',\n      value: 'false',\n    },\n  ],\n  string: undefined,\n};\n\nconst DEFAULT_STRICT_SELECTION_OF_TYPES: {\n  [key: string]: boolean | undefined;\n} = {\n  boolean: true,\n};\n\nfunction trimFilterValue(filterValue: string): string {\n  return filterValue.replace(/^%|%$/g, '');\n}\n\nexport function mergeFilterValues(\n  filterStrings: Array<string | undefined | null>,\n  operator: string = '&',\n) {\n  const mergedFilter = _.join(\n    _.map(filterEmptyItem(filterStrings), (str) => `(${str})`),\n    operator,\n  );\n  return !!mergedFilter ? mergedFilter : undefined;\n}\n\n/**\n * Parses the filter value and returns an object containing the property, operator, and value.\n * @param filter - The filter string to parse.\n * @returns An object containing the parsed property, operator, and value.\n */\nexport function parseFilterValue(filter: string) {\n  // Split the filter string into an array of strings using a regular expression.\n  // The regular expression splits the string at whitespace characters, but ignores whitespace within double quotes.\n  const [property, ...rest] = filter.split(/\\s+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n  // Join the remaining strings in the array and split them again using the same regular expression.\n  // This extracts the operator and the value from the filter string.\n  const [operator, ...valueParts] = rest\n    .join(' ')\n    .split(/\\s+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n  // Join the value parts into a single string and remove any leading or trailing double quotes.\n  const value = valueParts.join(' ').replace(/^\"|\"$/g, '');\n\n  // Return an object containing the parsed property, operator, and value.\n  return { property, operator, value };\n}\n\n/**\n * Combines filter strings with the specified logical operator.\n * @param filters - The array of filter strings to combine.\n * @param operator - The logical operator to use ('and' or 'or').\n * @returns The combined filter string.\n */\nfunction combineFilters(filters: string[], operator: '&' | '|'): string {\n  return filters.join(` ${operator} `);\n}\n\nconst BAIPropertyFilter: React.FC<BAIPropertyFilterProps> = ({\n  filterProperties,\n  value: propValue,\n  onChange: propOnChange,\n  defaultValue,\n  loading,\n  ...containerProps\n}) => {\n  const [search, setSearch] = useState<string>();\n  const autoCompleteRef = useRef<GetRef<typeof AutoComplete>>(null);\n  const [isOpenAutoComplete, setIsOpenAutoComplete] = useState(false);\n\n  const [value, setValue] = useControllableValue<string | undefined>({\n    value: propValue,\n    defaultValue: defaultValue,\n    onChange: propOnChange,\n  });\n\n  const filtersFromValue = useMemo(() => {\n    if (value === undefined || value === '') return [];\n    const filters = value.split('&').map((filter) => filter.trim());\n    return filters.map((filter, index) => {\n      const { property, operator, value } = parseFilterValue(filter);\n      return {\n        key: index + value,\n        property,\n        operator,\n        value,\n        propertyLabel:\n          _.find(filterProperties, (f) => f.key === property)?.propertyLabel ||\n          property,\n        type:\n          _.find(filterProperties, (f) => f.key === property)?.type || 'string',\n      };\n    });\n  }, [value, filterProperties]);\n\n  const { t } = useTranslation();\n  const options = _.map(filterProperties, (filterProperty) => ({\n    label: filterProperty.propertyLabel,\n    value: filterProperty.key,\n    filter: filterProperty,\n  }));\n  const [selectedProperty, setSelectedProperty] = useState(options[0].filter);\n\n  const { token } = theme.useToken();\n\n  const [isValid, setIsValid] = useState(true);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const updateFiltersValue = (filters: FilterInput[]) => {\n    if (filters.length === 0) {\n      setValue(undefined);\n    } else {\n      const newFilterString = _.map(filters, (item) => {\n        const valueStringInResult =\n          item.type === 'string' ? `\"${item.value}\"` : item.value;\n        return `${item.property} ${item.operator} ${valueStringInResult}`;\n      });\n      setValue(combineFilters(newFilterString, '&'));\n    }\n  };\n\n  const push = (item: FilterInput) => {\n    updateFiltersValue([...filtersFromValue, item]);\n  };\n\n  const remove = (key: string) => {\n    const newFilters = filtersFromValue.filter((item) => item.key !== key);\n    updateFiltersValue(newFilters);\n  };\n\n  const resetList = () => {\n    updateFiltersValue([]);\n  };\n\n  const onSearch = (value: string) => {\n    if (_.isEmpty(value)) return;\n    if (\n      selectedProperty.strictSelection ||\n      DEFAULT_STRICT_SELECTION_OF_TYPES[selectedProperty.type]\n    ) {\n      const option = _.find(\n        selectedProperty.options ||\n          DEFAULT_OPTIONS_OF_TYPES[selectedProperty.type],\n        (o) => o.value === value,\n      );\n      if (!option) return;\n    }\n    const isValid =\n      !selectedProperty.rule?.validate || selectedProperty.rule.validate(value);\n    setIsValid(isValid);\n    if (!isValid) return;\n\n    setSearch('');\n    const operator =\n      selectedProperty.defaultOperator ||\n      DEFAULT_OPERATOR_OF_TYPES[selectedProperty.type];\n    const filterValue =\n      operator === 'ilike' || operator === 'like' ? `%${value}%` : `${value}`;\n    push({\n      property: selectedProperty.key,\n      propertyLabel: selectedProperty.propertyLabel,\n      operator,\n      value: filterValue,\n      label: selectedProperty.options?.find((o) => o.value === value)?.label,\n      type: selectedProperty.type,\n    });\n  };\n\n  return (\n    <Flex direction=\"column\" gap={'xs'} style={{ flex: 1 }} align=\"start\">\n      <Space.Compact>\n        <Select\n          popupMatchSelectWidth={false}\n          options={options}\n          value={selectedProperty.key}\n          onChange={(value, options) => {\n            setSelectedProperty(_.castArray(options)[0].filter);\n          }}\n          onSelect={() => {\n            autoCompleteRef.current?.focus();\n            setIsOpenAutoComplete(true);\n            setIsValid(true);\n          }}\n          showSearch\n          optionFilterProp=\"label\"\n        />\n        <Tooltip\n          title={isValid || !isFocused ? '' : selectedProperty.rule?.message}\n          open={!isValid && isFocused}\n          color={token.colorError}\n        >\n          <AutoComplete\n            ref={autoCompleteRef}\n            value={search}\n            open={isOpenAutoComplete}\n            onDropdownVisibleChange={setIsOpenAutoComplete}\n            onSelect={onSearch}\n            onChange={(value) => {\n              setIsValid(true);\n              setSearch(value);\n            }}\n            style={{\n              minWidth: 200,\n            }}\n            // @ts-ignore\n            options={_.filter(\n              selectedProperty.options ||\n                DEFAULT_OPTIONS_OF_TYPES[selectedProperty.type],\n              (option) => {\n                return !search\n                  ? true\n                  : option.label?.toString().includes(search);\n              },\n            )}\n            placeholder={t('propertyFilter.PlaceHolder')}\n            onBlur={() => {\n              setIsFocused(false);\n            }}\n            onFocus={() => {\n              setIsFocused(true);\n            }}\n          >\n            <Input.Search\n              onSearch={onSearch}\n              allowClear\n              status={!isValid && isFocused ? 'error' : undefined}\n            />\n          </AutoComplete>\n        </Tooltip>\n      </Space.Compact>\n      {filtersFromValue.length > 0 && (\n        <Flex\n          direction=\"row\"\n          gap={'xs'}\n          wrap=\"wrap\"\n          style={{ alignSelf: 'stretch' }}\n        >\n          {_.map(filtersFromValue, (item) => (\n            <Tag\n              key={item.key}\n              closable\n              onClose={() => remove(item.key)}\n              style={{ margin: 0 }}\n            >\n              {item.propertyLabel}: {trimFilterValue(item.value)}\n            </Tag>\n          ))}\n          {filtersFromValue.length > 1 && (\n            <Tooltip title={t('propertyFilter.ResetFilter')}>\n              <Button\n                size=\"small\"\n                icon={\n                  <CloseCircleOutlined\n                    style={{ color: token.colorTextSecondary }}\n                  />\n                }\n                type=\"text\"\n                onClick={resetList}\n              />\n            </Tooltip>\n          )}\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\nexport default BAIPropertyFilter;\n","/**\n * @generated SignedSource<<db3a9e430bb46d4771a6c5e75ba49665>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionSlotCellFragment$data = {\n  readonly id: string;\n  readonly occupied_slots: string | null | undefined;\n  readonly requested_slots: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionSlotCellFragment\";\n};\nexport type SessionSlotCellFragment$key = {\n  readonly \" $data\"?: SessionSlotCellFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionSlotCellFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionSlotCellFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"occupied_slots\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"requested_slots\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"39927d6fcf4a8ce5c71769155ce2a7a4\";\n\nexport default node;\n","/**\n * @generated SignedSource<<19857b81bbf64123505bb97856fd8622>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionNodesFragment$data = ReadonlyArray<{\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly row_id: string;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionReservationFragment\" | \"SessionSlotCellFragment\" | \"SessionStatusTagFragment\" | \"SessionUsageMonitorFragment\">;\n  readonly \" $fragmentType\": \"SessionNodesFragment\";\n} | null | undefined>;\nexport type SessionNodesFragment$key = ReadonlyArray<{\n  readonly \" $data\"?: SessionNodesFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionNodesFragment\">;\n}>;\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"plural\": true\n  },\n  \"name\": \"SessionNodesFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"row_id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionStatusTagFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionReservationFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionSlotCellFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionUsageMonitorFragment\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"bdc7ae5235b75dfbe3d856167333a079\";\n\nexport default node;\n","import { convertBinarySizeUnit } from '../../helper';\nimport { useResourceSlotsDetails } from '../../hooks/backendai';\nimport { SessionSlotCellFragment$key } from './__generated__/SessionSlotCellFragment.graphql';\nimport { Divider, Typography } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { Fragment } from 'react';\nimport { useFragment } from 'react-relay';\n\ninterface OccupiedSlotViewProps {\n  sessionFrgmt: SessionSlotCellFragment$key;\n  type: 'cpu' | 'mem' | 'accelerator';\n  mode?: 'occupied' | 'requested';\n}\nconst SessionSlotCell: React.FC<OccupiedSlotViewProps> = ({\n  type,\n  sessionFrgmt,\n  mode = 'requested',\n}) => {\n  const { deviceMetadata } = useResourceSlotsDetails();\n  const session = useFragment(\n    graphql`\n      fragment SessionSlotCellFragment on ComputeSessionNode {\n        id\n        occupied_slots\n        requested_slots\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const slots = JSON.parse(\n    (mode === 'occupied' ? session.occupied_slots : session.requested_slots) ||\n      '{}',\n  );\n\n  if (type === 'cpu') {\n    return slots.cpu ?? '-';\n  } else if (type === 'mem') {\n    const mem = slots.mem ?? '-';\n    return mem === '-' ? mem : convertBinarySizeUnit(mem, 'G')?.number + ' GiB';\n  } else if (type === 'accelerator') {\n    const occupiedAccelerators = _.omit(slots, ['cpu', 'mem']);\n    return _.isEmpty(occupiedAccelerators)\n      ? '-'\n      : _.map(occupiedAccelerators, (value, key) => {\n          return (\n            <Fragment key={key}>\n              <Typography.Text>{value}</Typography.Text>\n              <Divider type=\"vertical\" />\n              <Typography.Text>\n                {deviceMetadata?.[key]?.human_readable_name}\n              </Typography.Text>\n            </Fragment>\n          );\n        });\n  }\n};\n\nexport default SessionSlotCell;\n","import { filterNonNullItems } from '../helper';\nimport BAILink from './BAILink';\nimport BAITable from './BAITable';\nimport SessionReservation from './ComputeSessionNodeItems/SessionReservation';\nimport SessionSlotCell from './ComputeSessionNodeItems/SessionSlotCell';\nimport SessionStatusTag from './ComputeSessionNodeItems/SessionStatusTag';\nimport Flex from './Flex';\nimport SessionDetailDrawer from './SessionDetailDrawer';\nimport SessionUsageMonitor from './SessionUsageMonitor';\nimport { SessionNodesFragment$key } from './__generated__/SessionNodesFragment.graphql';\nimport { TableProps, theme } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface SessionNodesProps extends Omit<TableProps, 'dataSource' | 'columns'> {\n  sessionsFrgmt: SessionNodesFragment$key;\n}\nconst SessionNodes: React.FC<SessionNodesProps> = ({\n  sessionsFrgmt,\n  ...tableProps\n}) => {\n  const { t } = useTranslation();\n  const [selectedSessionId, setSelectedSessionId] = useState<string>();\n  const { token } = theme.useToken();\n\n  const sessions = useFragment(\n    graphql`\n      fragment SessionNodesFragment on ComputeSessionNode @relay(plural: true) {\n        id\n        row_id @required(action: NONE)\n        name\n        ...SessionStatusTagFragment\n        ...SessionReservationFragment\n        ...SessionSlotCellFragment\n        ...SessionUsageMonitorFragment\n      }\n    `,\n    sessionsFrgmt,\n  );\n\n  const filteredSessions = filterNonNullItems(sessions);\n\n  return (\n    <>\n      <BAITable<(typeof filteredSessions)[0]>\n        resizable\n        neoStyle\n        // TODO: fix type\n        // @ts-ignore\n        rowKey={(record) => record.row_id as string}\n        size=\"small\"\n        dataSource={filteredSessions}\n        scroll={{ x: 'max-content' }}\n        columns={[\n          {\n            key: 'name',\n            title: t('session.SessionName'),\n            dataIndex: 'name',\n            render: (name: string, session) => {\n              return (\n                <BAILink\n                  to={'#'}\n                  type=\"hover\"\n                  onClick={(e) => {\n                    session.row_id && setSelectedSessionId(session.row_id);\n                  }}\n                >\n                  {name}\n                </BAILink>\n              );\n            },\n            sorter: true,\n          },\n          {\n            key: 'status',\n            title: t('session.Status'),\n            dataIndex: 'status',\n            render: (status: string, session) => {\n              return <SessionStatusTag sessionFrgmt={session} />;\n            },\n          },\n          {\n            key: 'utils',\n            title: t('session.Utilization'),\n            render: (__, session) => {\n              return (\n                <Flex\n                  style={{\n                    paddingLeft: token.paddingXS,\n                  }}\n                >\n                  <SessionUsageMonitor size=\"small\" sessionFrgmt={session} />\n                </Flex>\n              );\n            },\n          },\n          {\n            key: 'accelerator',\n            title: t('session.launcher.AIAccelerator'),\n            render: (__, session) => {\n              return (\n                <SessionSlotCell sessionFrgmt={session} type=\"accelerator\" />\n              );\n            },\n          },\n          {\n            key: 'cpu',\n            title: t('session.launcher.CPU'),\n            render: (__, session) => {\n              return <SessionSlotCell sessionFrgmt={session} type=\"cpu\" />;\n            },\n          },\n          {\n            key: 'mem',\n            title: t('session.launcher.Memory'),\n            render: (__, session) => {\n              return <SessionSlotCell sessionFrgmt={session} type=\"mem\" />;\n            },\n          },\n          {\n            key: 'elapsedTime',\n            title: t('session.ElapsedTime'),\n            render: (__, session) => {\n              return (\n                <SessionReservation\n                  mode=\"simple-elapsed\"\n                  sessionFrgmt={session}\n                />\n              );\n            },\n          },\n        ]}\n        {...tableProps}\n      />\n      <SessionDetailDrawer\n        open={!selectedSessionId}\n        sessionId={selectedSessionId}\n        onClose={() => {\n          setSelectedSessionId(undefined);\n        }}\n      />\n    </>\n  );\n};\n\nexport default SessionNodes;\n","import { atom, useAtomValue, useSetAtom } from 'jotai';\nimport { atomWithDefault } from 'jotai/utils';\nimport _ from 'lodash';\nimport { useCallback, useMemo } from 'react';\nimport {\n  useQueryParams,\n  QueryParamConfigMap,\n  DecodedValueMap,\n  UrlUpdateType,\n} from 'use-query-params';\n\n// Create a global atom to store query params\nconst queryParamsAtom = atom<Record<string, any>>({});\n\nexport function useDeferredQueryParams<QPCMap extends QueryParamConfigMap>(\n  paramConfigMap: QPCMap,\n) {\n  const [query, setQuery] = useQueryParams(paramConfigMap);\n\n  const selectiveQueryAtom = useMemo(\n    () =>\n      atomWithDefault((get) => {\n        const globalParams = get(queryParamsAtom);\n        const selectedParams = _.pick(\n          globalParams,\n          Object.keys(paramConfigMap),\n        );\n        if (_.isEmpty(selectedParams)) {\n          // If the global state is empty, return the query\n          return query;\n        }\n        // Use the value from the global state if it exists\n        return selectedParams as DecodedValueMap<QPCMap>;\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(paramConfigMap)],\n  );\n\n  let localQuery = useAtomValue(selectiveQueryAtom);\n  const setLocalQuery = useSetAtom(queryParamsAtom);\n\n  const setDeferredQuery = useCallback(\n    (\n      nextQuery:\n        | Partial<DecodedValueMap<QPCMap>>\n        | ((\n            prevQuery: DecodedValueMap<QPCMap>,\n          ) => Partial<DecodedValueMap<QPCMap>>),\n      updateType: UrlUpdateType,\n    ) => {\n      const newQuery =\n        typeof nextQuery === 'function' ? nextQuery(localQuery) : nextQuery;\n\n      // Update Jotai state\n      if (updateType === 'replaceIn' || updateType === 'pushIn') {\n        setLocalQuery((prev) => ({ ...prev, ...newQuery }));\n      } else {\n        setLocalQuery(newQuery as DecodedValueMap<QPCMap>);\n      }\n      // Update URL params\n      setQuery(newQuery, updateType);\n    },\n    [localQuery, setQuery, setLocalQuery],\n  );\n\n  return [localQuery, setDeferredQuery] as const;\n}\n","import BAILink from '../components/BAILink';\nimport BAIPropertyFilter, {\n  mergeFilterValues,\n} from '../components/BAIPropertyFilter';\nimport Flex from '../components/Flex';\nimport SessionNodes from '../components/SessionNodes';\nimport { filterNonNullItems, transformSorterToOrderString } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { useBAIPaginationOptionState } from '../hooks/reactPaginationQueryOptions';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useDeferredQueryParams } from '../hooks/useDeferredQueryParams';\nimport { useInterval } from '../hooks/useIntervalValue';\nimport { ComputeSessionListPageQuery } from './__generated__/ComputeSessionListPageQuery.graphql';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Badge, Button, Card, Radio, Spin, Tabs, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { startTransition, useRef, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\nimport { StringParam, withDefault } from 'use-query-params';\n\ntype TypeFilterType = 'all' | 'interactive' | 'batch' | 'inference' | 'system';\nconst ComputeSessionListPage = () => {\n  const currentProject = useCurrentProjectValue();\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const {\n    baiPaginationOption,\n    tablePaginationOption,\n    setTablePaginationOption,\n  } = useBAIPaginationOptionState({\n    current: 1,\n    pageSize: 10,\n  });\n  const [isPendingPageOnChange, startTableOnChangeTransition] = useTransition();\n  const [isPendingFilterChange, startFilterChangeTransition] = useTransition();\n  const [isPendingTabChange, startTabChangeTransition] = useTransition();\n\n  const [queryParams, setQuery] = useDeferredQueryParams({\n    order: StringParam,\n    filter: StringParam,\n    type: withDefault(StringParam, 'all'),\n    statusCategory: withDefault(StringParam, 'running'),\n  });\n  const queryMapRef = useRef({\n    [queryParams.type]: queryParams,\n  });\n  //\n  queryMapRef.current[queryParams.type] = queryParams;\n\n  const typeFilter =\n    queryParams.type === 'all' || queryParams.type === undefined\n      ? undefined\n      : `type == \"${queryParams.type}\"`;\n\n  const statusFilter =\n    queryParams.statusCategory === 'running' ||\n    queryParams.statusCategory === undefined\n      ? 'status != \"TERMINATED\" & status != \"CANCELLED\"'\n      : 'status == \"TERMINATED\" | status == \"CANCELLED\"';\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n\n  const { compute_session_nodes, allRunningSessionForCount } =\n    useLazyLoadQuery<ComputeSessionListPageQuery>(\n      graphql`\n        query ComputeSessionListPageQuery(\n          $projectId: UUID!\n          $first: Int = 20\n          $offset: Int = 0\n          $filter: String\n          $order: String\n          $runningTypeFilter: String!\n        ) {\n          compute_session_nodes(\n            project_id: $projectId\n            first: $first\n            offset: $offset\n            filter: $filter\n            order: $order\n          ) {\n            edges @required(action: THROW) {\n              node @required(action: THROW) {\n                id\n                ...SessionNodesFragment\n              }\n            }\n            count\n          }\n          allRunningSessionForCount: compute_session_nodes(\n            project_id: $projectId\n            first: 0\n            offset: 0\n            filter: $runningTypeFilter\n          ) {\n            count\n          }\n        }\n      `,\n      {\n        projectId: currentProject.id,\n        offset: baiPaginationOption.offset,\n        first: baiPaginationOption.first,\n        filter: mergeFilterValues([\n          statusFilter,\n          queryParams.filter,\n          typeFilter,\n        ]),\n        order: queryParams.order,\n        runningTypeFilter: 'status != \"TERMINATED\" & status != \"CANCELLED\"',\n      },\n      {\n        fetchPolicy: 'network-only',\n        fetchKey,\n      },\n    );\n\n  useInterval(() => {\n    startTransition(() => {\n      updateFetchKey();\n    });\n  }, 15_000);\n\n  return (\n    <>\n      {/* TODO: add legacy opener */}\n      {/* <SessionDetailAndContainerLogOpenerForLegacy /> */}\n      <Card\n        bordered={false}\n        title={t('webui.menu.Sessions')}\n        extra={[\n          <BAILink to={'/session/start'} key={'start-session'}>\n            <Button type=\"primary\">{t('session.launcher.Start')}</Button>\n          </BAILink>,\n        ]}\n        styles={{\n          header: {\n            borderBottom: 'none',\n          },\n          body: {\n            paddingTop: 0,\n          },\n        }}\n      >\n        {/* {mergeFilterValues([statusFilter, queryParams.filter, typeFilter])} */}\n        <Tabs\n          type=\"card\"\n          activeKey={queryParams.type}\n          onChange={(key) => {\n            startTabChangeTransition(() => {\n              const storedQuery = queryMapRef.current[key] || {\n                statusCategory: 'running',\n              };\n              setQuery(\n                { ...storedQuery, type: key as TypeFilterType },\n                'replace',\n              );\n              setTablePaginationOption({ current: 1 });\n            });\n          }}\n          items={_.map(\n            {\n              all: t('general.All'),\n              interactive: t('session.Interactive'),\n              batch: t('session.Batch'),\n              inference: t('session.Inference'),\n              system: t('session.System'),\n            },\n            (label, key) => ({\n              key,\n              label: (\n                <Flex justify=\"center\" gap={10}>\n                  {label}\n                  {key === 'all' && (\n                    <Badge\n                      count={allRunningSessionForCount?.count}\n                      color={token.colorPrimary}\n                      size=\"small\"\n                      showZero\n                      style={{\n                        paddingRight: token.paddingXS,\n                        paddingLeft: token.paddingXS,\n                        fontSize: 10,\n                      }}\n                    />\n                  )}\n                  {/*  */}\n                </Flex>\n              ),\n            }),\n          )}\n        />\n        <Spin spinning={isPendingTabChange} indicator={<LoadingOutlined />}>\n          <Flex direction=\"column\" align=\"stretch\" gap={'sm'}>\n            <Flex gap={'sm'} align=\"start\">\n              <Radio.Group\n                optionType=\"button\"\n                value={queryParams.statusCategory}\n                onChange={(e) => {\n                  startFilterChangeTransition(() => {\n                    setQuery({ statusCategory: e.target.value }, 'replaceIn');\n                    setTablePaginationOption({ current: 1 });\n                  });\n                }}\n                options={[\n                  {\n                    label: 'Running',\n                    value: 'running',\n                  },\n                  {\n                    label: 'Finished',\n                    value: 'finished',\n                  },\n                ]}\n              />\n              <BAIPropertyFilter\n                filterProperties={[\n                  {\n                    key: 'name',\n                    propertyLabel: t('session.SessionName'),\n                    type: 'string',\n                  },\n                ]}\n                value={queryParams.filter || undefined}\n                onChange={(value) => {\n                  startFilterChangeTransition(() => {\n                    setQuery({ filter: value }, 'replaceIn');\n                    setTablePaginationOption({ current: 1 });\n                  });\n                }}\n              />\n            </Flex>\n            <SessionNodes\n              rowSelection={\n                queryParams.statusCategory !== 'finished'\n                  ? {\n                      type: 'checkbox',\n                      // onChange: (selectedRowKeys, selectedRows) => {\n                      //   console.log(\n                      //     `selectedRowKeys: ${selectedRowKeys}`,\n                      //     'selectedRows: ',\n                      //     selectedRows,\n                      //   );\n                      // },\n                    }\n                  : undefined\n              }\n              sessionsFrgmt={filterNonNullItems(\n                compute_session_nodes?.edges.map((e) => e?.node),\n              )}\n              pagination={{\n                pageSize: tablePaginationOption.pageSize,\n                current: tablePaginationOption.current,\n                total: compute_session_nodes?.count ?? 0,\n                // showTotal: (total) => {\n                //   return total;\n                // },\n              }}\n              loading={{\n                spinning: isPendingPageOnChange || isPendingFilterChange,\n                indicator: <LoadingOutlined />,\n              }}\n              onChange={({ current, pageSize }, filters, sorter) => {\n                startTableOnChangeTransition(() => {\n                  if (_.isNumber(current) && _.isNumber(pageSize)) {\n                    setTablePaginationOption({ current, pageSize });\n                  }\n                  setQuery(\n                    { order: transformSorterToOrderString(sorter) },\n                    'replaceIn',\n                  );\n                });\n              }}\n            />\n          </Flex>\n        </Spin>\n      </Card>\n    </>\n  );\n};\n\nexport default ComputeSessionListPage;\n","/**\n * @generated SignedSource<<140d9f1d426a1a35f9d9a86ac9be1ec6>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ComputeSessionListPageQuery$variables = {\n  filter?: string | null | undefined;\n  first?: number | null | undefined;\n  offset?: number | null | undefined;\n  order?: string | null | undefined;\n  projectId: string;\n  runningTypeFilter: string;\n};\nexport type ComputeSessionListPageQuery$data = {\n  readonly allRunningSessionForCount: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly compute_session_nodes: {\n    readonly count: number | null | undefined;\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly id: string;\n        readonly \" $fragmentSpreads\": FragmentRefs<\"SessionNodesFragment\">;\n      };\n    } | null | undefined>;\n  } | null | undefined;\n};\nexport type ComputeSessionListPageQuery = {\n  response: ComputeSessionListPageQuery$data;\n  variables: ComputeSessionListPageQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": 20,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"first\"\n},\nv2 = {\n  \"defaultValue\": 0,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"order\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"projectId\"\n},\nv5 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"runningTypeFilter\"\n},\nv6 = {\n  \"kind\": \"Variable\",\n  \"name\": \"project_id\",\n  \"variableName\": \"projectId\"\n},\nv7 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"filter\",\n    \"variableName\": \"filter\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"first\",\n    \"variableName\": \"first\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"offset\",\n    \"variableName\": \"offset\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"order\",\n    \"variableName\": \"order\"\n  },\n  (v6/*: any*/)\n],\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"count\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": \"allRunningSessionForCount\",\n  \"args\": [\n    {\n      \"kind\": \"Variable\",\n      \"name\": \"filter\",\n      \"variableName\": \"runningTypeFilter\"\n    },\n    {\n      \"kind\": \"Literal\",\n      \"name\": \"first\",\n      \"value\": 0\n    },\n    {\n      \"kind\": \"Literal\",\n      \"name\": \"offset\",\n      \"value\": 0\n    },\n    (v6/*: any*/)\n  ],\n  \"concreteType\": \"ComputeSessionConnection\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"compute_session_nodes\",\n  \"plural\": false,\n  \"selections\": [\n    (v9/*: any*/)\n  ],\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"occupied_slots\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/),\n      (v5/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ComputeSessionListPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v7/*: any*/),\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"RequiredField\",\n            \"field\": {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"ComputeSessionEdge\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"edges\",\n              \"plural\": true,\n              \"selections\": [\n                {\n                  \"kind\": \"RequiredField\",\n                  \"field\": {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"ComputeSessionNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v8/*: any*/),\n                      {\n                        \"args\": null,\n                        \"kind\": \"FragmentSpread\",\n                        \"name\": \"SessionNodesFragment\"\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  \"action\": \"THROW\",\n                  \"path\": \"compute_session_nodes.edges.node\"\n                }\n              ],\n              \"storageKey\": null\n            },\n            \"action\": \"THROW\",\n            \"path\": \"compute_session_nodes.edges\"\n          },\n          (v9/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      (v10/*: any*/)\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v4/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v0/*: any*/),\n      (v3/*: any*/),\n      (v5/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"ComputeSessionListPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v7/*: any*/),\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSessionEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"ComputeSessionNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v8/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"row_id\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"name\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_info\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"created_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"starts_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"terminated_at\",\n                    \"storageKey\": null\n                  },\n                  (v11/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"requested_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"kernel_nodes\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"KernelEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KernelNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"live_stat\",\n                                \"storageKey\": null\n                              },\n                              (v11/*: any*/),\n                              (v8/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v9/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      (v10/*: any*/)\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"53ddd2fdeb112865b101e3f758bf089d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ComputeSessionListPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ComputeSessionListPageQuery(\\n  $projectId: UUID!\\n  $first: Int = 20\\n  $offset: Int = 0\\n  $filter: String\\n  $order: String\\n  $runningTypeFilter: String!\\n) {\\n  compute_session_nodes(project_id: $projectId, first: $first, offset: $offset, filter: $filter, order: $order) {\\n    edges {\\n      node {\\n        id\\n        ...SessionNodesFragment\\n      }\\n    }\\n    count\\n  }\\n  allRunningSessionForCount: compute_session_nodes(project_id: $projectId, first: 0, offset: 0, filter: $runningTypeFilter) {\\n    count\\n  }\\n}\\n\\nfragment SessionNodesFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  ...SessionStatusTagFragment\\n  ...SessionReservationFragment\\n  ...SessionSlotCellFragment\\n  ...SessionUsageMonitorFragment\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionSlotCellFragment on ComputeSessionNode {\\n  id\\n  occupied_slots\\n  requested_slots\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  name\\n  status\\n  status_info\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        occupied_slots\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"6c1c06bb33de91c3f187ac06efe71e20\";\n\nexport default node;\n"],"names":["DEFAULT_OPERATOR_OF_TYPES","string","boolean","DEFAULT_OPTIONS_OF_TYPES","label","value","undefined","DEFAULT_STRICT_SELECTION_OF_TYPES","mergeFilterValues","filterStrings","operator","arguments","length","mergedFilter","_","filterEmptyItem","str","_ref","_selectedProperty$rul2","filterProperties","propValue","onChange","propOnChange","defaultValue","loading","containerProps","search","setSearch","useState","autoCompleteRef","useRef","isOpenAutoComplete","setIsOpenAutoComplete","setValue","useControllableValue","filtersFromValue","useMemo","split","map","filter","trim","index","_$find","_$find2","property","rest","valueParts","join","replace","parseFilterValue","key","propertyLabel","f","type","t","useTranslation","options","filterProperty","selectedProperty","setSelectedProperty","token","theme","useToken","isValid","setIsValid","isFocused","setIsFocused","updateFiltersValue","filters","newFilterString","item","valueStringInResult","combineFilters","onSearch","_selectedProperty$rul","_selectedProperty$opt","_selectedProperty$opt2","strictSelection","o","rule","validate","defaultOperator","filterValue","find","_jsxs","Flex","direction","gap","style","flex","align","children","Space","Compact","_jsx","Select","popupMatchSelectWidth","onSelect","_autoCompleteRef$curr","current","focus","showSearch","optionFilterProp","Tooltip","title","message","open","color","colorError","AutoComplete","ref","onDropdownVisibleChange","minWidth","option","_option$label","toString","includes","placeholder","onBlur","onFocus","Input","Search","allowClear","status","wrap","alignSelf","Tag","closable","onClose","newFilters","remove","margin","Button","size","icon","CloseCircleOutlined","colorTextSecondary","onClick","resetList","node","sessionFrgmt","mode","deviceMetadata","useResourceSlotsDetails","session","useFragment","_SessionSlotCellFragment","require","slots","JSON","parse","occupied_slots","requested_slots","_slots$cpu","cpu","_slots$mem","_convertBinarySizeUni","mem","convertBinarySizeUnit","number","occupiedAccelerators","_deviceMetadata$key","Fragment","Typography","Text","Divider","human_readable_name","sessionsFrgmt","tableProps","selectedSessionId","setSelectedSessionId","sessions","_SessionNodesFragment","filteredSessions","filterNonNullItems","_Fragment","BAITable","resizable","neoStyle","rowKey","record","row_id","dataSource","scroll","x","columns","dataIndex","render","name","BAILink","to","e","sorter","SessionStatusTag","__","paddingLeft","paddingXS","SessionUsageMonitor","SessionSlotCell","SessionReservation","SessionDetailDrawer","sessionId","queryParamsAtom","atom","ComputeSessionListPage","_compute_session_node","currentProject","useCurrentProjectValue","baiPaginationOption","tablePaginationOption","setTablePaginationOption","useBAIPaginationOptionState","pageSize","isPendingPageOnChange","startTableOnChangeTransition","useTransition","isPendingFilterChange","startFilterChangeTransition","isPendingTabChange","startTabChangeTransition","queryParams","setQuery","paramConfigMap","query","useQueryParams","selectiveQueryAtom","atomWithDefault","get","globalParams","selectedParams","Object","keys","stringify","localQuery","useAtomValue","setLocalQuery","useSetAtom","setDeferredQuery","useCallback","nextQuery","updateType","newQuery","prev","useDeferredQueryParams","order","StringParam","withDefault","statusCategory","queryMapRef","typeFilter","statusFilter","fetchKey","updateFetchKey","useUpdatableState","compute_session_nodes","allRunningSessionForCount","useLazyLoadQuery","_ComputeSessionListPageQuery","projectId","id","offset","first","runningTypeFilter","fetchPolicy","useInterval","startTransition","Card","bordered","extra","styles","header","borderBottom","body","paddingTop","Tabs","activeKey","storedQuery","items","all","interactive","batch","inference","system","justify","Badge","count","colorPrimary","showZero","paddingRight","fontSize","Spin","spinning","indicator","LoadingOutlined","Radio","optionType","target","BAIPropertyFilter","SessionNodes","rowSelection","edges","pagination","total","transformSorterToOrderString","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","hash"],"sourceRoot":""}