{"version":3,"file":"static/js/142.fc8495a6.chunk.js","mappings":"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","sources":["components/ImageEnvironmentSelectFormItems.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","components/__generated__/ImageEnvironmentSelectFormItemsQuery.graphql.ts","components/__generated__/VFolderPermissionTag_VFolder.graphql.ts","components/__generated__/VFolderTableProjectQuery.graphql.ts"],"sourcesContent":["import { getImageFullName } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\n// @ts-ignore\nimport cssRaw from './ImageEnvironmentSelectFormItems.css?raw';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  ImageEnvironmentSelectFormItemsQuery,\n  ImageEnvironmentSelectFormItemsQuery$data,\n} from './__generated__/ImageEnvironmentSelectFormItemsQuery.graphql';\nimport { Divider, Form, Input, RefSelectProps, Select, Tag, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport type Image = NonNullable<\n  NonNullable<ImageEnvironmentSelectFormItemsQuery$data>['images']\n>[0];\n\ntype ImageGroup = {\n  groupName: string;\n  environmentGroups: {\n    environmentName: string;\n    displayName: string;\n    prefix?: string;\n    images: Image[];\n  }[];\n};\n\nexport type ImageEnvironmentFormInput = {\n  environments: {\n    environment: string;\n    version: string;\n    image: Image | undefined;\n    manual?: string;\n    customizedTag?: string;\n  };\n};\n\ninterface ImageEnvironmentSelectFormItemsProps {\n  filter?: (image: Image) => boolean;\n  showPrivate?: boolean;\n}\n\nfunction compareVersions(version1: string, version2: string): number {\n  const v1 = version1.split('.').map(Number);\n  const v2 = version2.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const num1 = v1[i] || 0;\n    const num2 = v2[i] || 0;\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nconst isPrivateImage = (image: Image) => {\n  return _.some(image?.labels, (label) => {\n    return (\n      label?.key === 'ai.backend.features' &&\n      label?.value?.split(' ').includes('private')\n    );\n  });\n};\n\nconst ImageEnvironmentSelectFormItems: React.FC<\n  ImageEnvironmentSelectFormItemsProps\n> = ({ filter, showPrivate }) => {\n  const form = Form.useFormInstance<ImageEnvironmentFormInput>();\n  const environments = Form.useWatch('environments', { form, preserve: true });\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [environmentSearch, setEnvironmentSearch] = useState('');\n  const [versionSearch, setVersionSearch] = useState('');\n  const { t } = useTranslation();\n  const [metadata, { getImageMeta }] = useBackendAIImageMetaData();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n\n  const envSelectRef = useRef<RefSelectProps>(null);\n  const versionSelectRef = useRef<RefSelectProps>(null);\n\n  const { images } = useLazyLoadQuery<ImageEnvironmentSelectFormItemsQuery>(\n    graphql`\n      query ImageEnvironmentSelectFormItemsQuery($installed: Boolean) {\n        images(is_installed: $installed) {\n          name\n          humanized_name\n          tag\n          registry\n          architecture\n          digest\n          installed\n          resource_limits {\n            key\n            min\n            max\n          }\n          labels {\n            key\n            value\n          }\n        }\n      }\n    `,\n    {\n      installed: true,\n    },\n    {\n      fetchPolicy: 'store-and-network',\n    },\n  );\n\n  // If not initial value, select first value\n  // auto select when relative field is changed\n  useEffect(() => {\n    if (!_.isEmpty(environments?.manual)) {\n      // set undefined fields related to environments when manual is set\n      if (environments.environment || environments.version) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n          },\n        });\n      }\n      return;\n    }\n\n    let matchedEnvironmentByVersion:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    let matchedImageByVersion: Image | undefined;\n    let version = form.getFieldValue('environments')?.version;\n    // FIXME: manually add architecture based on amd64\n    if (version && version.indexOf('@') < 0) {\n      version += '@x86_64';\n    }\n    version &&\n      _.find(imageGroups, (group) => {\n        matchedEnvironmentByVersion = _.find(\n          group.environmentGroups,\n          (environment) => {\n            matchedImageByVersion = _.find(\n              environment.images,\n              (image) => getImageFullName(image) === version,\n            );\n            return !!matchedImageByVersion; // break iteration\n          },\n        );\n        return !!matchedEnvironmentByVersion; // break iteration\n      });\n\n    // if matchedEnvironmentByVersion is not existed, select first values\n    let nextEnvironment: ImageGroup['environmentGroups'][0] | undefined;\n    let nextImage: Image | undefined;\n    if (matchedEnvironmentByVersion) {\n      nextEnvironment = matchedEnvironmentByVersion;\n      nextImage = matchedImageByVersion;\n    } else if (form.getFieldValue(['environments', 'environment'])) {\n      _.find(imageGroups, (group) => {\n        nextEnvironment = _.find(group.environmentGroups, (environment) => {\n          return (\n            environment.environmentName ===\n            form.getFieldValue(['environments', 'environment'])\n          );\n        });\n        nextImage = nextEnvironment?.images[0];\n        return !!nextEnvironment;\n      });\n    }\n\n    if (!nextEnvironment || !nextImage) {\n      nextEnvironment = imageGroups[0]?.environmentGroups[0];\n      nextImage = nextEnvironment?.images[0];\n    }\n\n    const customizedImageTag = _.find(\n      nextImage?.labels,\n      (item) =>\n        item !== null && item?.key === 'ai.backend.customized-image.name',\n    )?.value;\n\n    if (nextImage) {\n      if (\n        !matchedEnvironmentByVersion &&\n        baiClient._config.allow_manual_image_name_for_session &&\n        version\n      ) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n            manual: version,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      } else {\n        form.setFieldsValue({\n          environments: {\n            environment: nextEnvironment.environmentName,\n            version: getImageFullName(nextImage),\n            image: nextImage,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      }\n    } else if (baiClient._config.allow_manual_image_name_for_session) {\n      // if no image is available, only set manual if it's allowed\n      form.setFieldValue(['environments', 'manual'], version);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environments?.version, environments?.manual]); // environments?.environment,\n\n  const imageGroups: ImageGroup[] = useMemo(\n    () =>\n      _.chain(images)\n        .filter((image) => {\n          return (\n            (showPrivate ? true : !isPrivateImage(image)) &&\n            (filter ? filter(image) : true)\n          );\n        })\n        .groupBy((image) => {\n          // group by using `group` property of image info\n          return (\n            metadata?.imageInfo[getImageMeta(getImageFullName(image) || '').key]\n              ?.group || 'Custom Environments'\n          );\n        })\n        .map((images, groupName) => {\n          return {\n            groupName,\n            environmentGroups: _.chain(images)\n              // sub group by using (environment) `name` property of image info\n              .groupBy((image) => {\n                return (\n                  // metadata?.imageInfo[\n                  //   getImageMeta(getImageFullName(image) || \"\").key\n                  // ]?.name || image?.name\n                  image?.registry + '/' + image?.name\n                );\n              })\n              .map((images, environmentName) => {\n                const imageKey = environmentName.split('/')?.[2];\n                const displayName =\n                  imageKey && metadata?.imageInfo[imageKey]?.name;\n\n                return {\n                  environmentName,\n                  displayName:\n                    displayName ||\n                    (_.last(environmentName.split('/')) as string),\n                  prefix: _.chain(environmentName)\n                    .split('/')\n                    .drop(1)\n                    .dropRight(1)\n                    .join('/')\n                    .value(),\n                  images: images.sort((a, b) =>\n                    compareVersions(\n                      // latest version comes first\n                      b?.tag?.split('-')?.[0] ?? '',\n                      a?.tag?.split('-')?.[0] ?? '',\n                    ),\n                  ),\n                };\n              })\n\n              .sortBy((item) => item.displayName)\n              .value(),\n          };\n        })\n        .sortBy((item) => item.groupName)\n        .value(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [images, metadata, filter, showPrivate],\n  );\n\n  // support search image by full name\n  const { fullNameMatchedImage } = useMemo(() => {\n    let fullNameMatchedImage: Image | undefined;\n    let fullNameMatchedImageGroup:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    if (environmentSearch.length) {\n      _.chain(\n        imageGroups\n          .flatMap((group) => group.environmentGroups)\n          .find((envGroup) => {\n            fullNameMatchedImageGroup = envGroup;\n            fullNameMatchedImage = _.find(envGroup.images, (image) => {\n              return getImageFullName(image) === environmentSearch;\n            });\n            return !!fullNameMatchedImage;\n          }),\n      ).value();\n    }\n    return {\n      fullNameMatchedImage,\n      fullNameMatchedImageGroup,\n    };\n  }, [environmentSearch, imageGroups]);\n\n  return (\n    <>\n      <style>{cssRaw}</style>\n      <Form.Item\n        name={['environments', 'environment']}\n        label={`${t('session.launcher.Environments')} / ${t(\n          'session.launcher.Version',\n        )}`}\n        rules={[{ required: _.isEmpty(environments?.manual) }]}\n        style={{ marginBottom: 10 }}\n      >\n        <Select\n          ref={envSelectRef}\n          showSearch\n          // open={true}\n          // autoClearSearchValue\n          searchValue={environmentSearch}\n          onSearch={setEnvironmentSearch}\n          defaultActiveFirstOption={true}\n          optionFilterProp=\"filterValue\"\n          onChange={(value) => {\n            if (fullNameMatchedImage) {\n              form.setFieldsValue({\n                environments: {\n                  environment: fullNameMatchedImage?.name || '',\n                  version: getImageFullName(fullNameMatchedImage),\n                  image: fullNameMatchedImage,\n                },\n              });\n            }\n            // NOTE: when user set environment only then set the version to the first item\n            else {\n              const firstInListImage: Image = imageGroups\n                .flatMap((group) => group.environmentGroups)\n                .filter((envGroup) => envGroup.environmentName === value)[0]\n                .images[0];\n              form.setFieldsValue({\n                environments: {\n                  environment: firstInListImage?.name || '',\n                  version: getImageFullName(firstInListImage),\n                  image: firstInListImage,\n                },\n              });\n            }\n          }}\n          disabled={\n            baiClient._config.allow_manual_image_name_for_session &&\n            !_.isEmpty(environments?.manual)\n          }\n        >\n          {fullNameMatchedImage ? (\n            <Select.Option\n              value={fullNameMatchedImage?.name}\n              filterValue={getImageFullName(fullNameMatchedImage)}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"center\"\n                gap=\"xs\"\n                style={{ display: 'inline-flex' }}\n              >\n                <ImageMetaIcon\n                  image={getImageFullName(fullNameMatchedImage) || ''}\n                  style={{\n                    width: 15,\n                    height: 15,\n                  }}\n                />\n                {getImageFullName(fullNameMatchedImage)}\n              </Flex>\n            </Select.Option>\n          ) : (\n            _.map(imageGroups, (group) => {\n              return (\n                <Select.OptGroup key={group.groupName} label={group.groupName}>\n                  {_.map(group.environmentGroups, (environmentGroup) => {\n                    const firstImage = environmentGroup.images[0];\n                    const currentMetaImageInfo =\n                      metadata?.imageInfo[\n                        environmentGroup.environmentName.split('/')?.[2]\n                      ];\n\n                    const extraFilterValues: string[] = [];\n                    let environmentPrefixTag = null;\n                    if (\n                      environmentGroup.prefix &&\n                      !['lablup', 'cloud', 'stable'].includes(\n                        environmentGroup.prefix,\n                      )\n                    ) {\n                      extraFilterValues.push(environmentGroup.prefix);\n                      environmentPrefixTag = (\n                        <Tag color=\"purple\">\n                          <TextHighlighter keyword={environmentSearch}>\n                            {environmentGroup.prefix}\n                          </TextHighlighter>\n                        </Tag>\n                      );\n                    }\n\n                    const tagsFromMetaImageInfoLabel = _.map(\n                      currentMetaImageInfo?.label,\n                      (label) => {\n                        if (\n                          _.isUndefined(label.category) &&\n                          label.tag &&\n                          label.color\n                        ) {\n                          extraFilterValues.push(label.tag);\n                          return (\n                            <Tag color={label.color} key={label.tag}>\n                              <TextHighlighter\n                                keyword={environmentSearch}\n                                key={label.tag}\n                              >\n                                {label.tag}\n                              </TextHighlighter>\n                            </Tag>\n                          );\n                        }\n                        return null;\n                      },\n                    );\n                    return (\n                      <Select.Option\n                        key={environmentGroup.environmentName}\n                        value={environmentGroup.environmentName}\n                        filterValue={\n                          environmentGroup.displayName +\n                          '\\t' +\n                          extraFilterValues.join('\\t')\n                        }\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\" align=\"center\" gap=\"xs\">\n                            <ImageMetaIcon\n                              image={getImageFullName(firstImage) || ''}\n                              style={{\n                                width: 15,\n                                height: 15,\n                              }}\n                            />\n                            <TextHighlighter keyword={environmentSearch}>\n                              {environmentGroup.displayName}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            // style={{ flex: 1 }}\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {environmentPrefixTag}\n                            {tagsFromMetaImageInfoLabel}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  })}\n                </Select.OptGroup>\n              );\n            })\n          )}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prev, cur) =>\n          prev.environments?.environment !== cur.environments?.environment\n        }\n      >\n        {({ getFieldValue }) => {\n          let selectedEnvironmentGroup:\n            | ImageGroup['environmentGroups'][0]\n            | undefined;\n          _.find(imageGroups, (group) => {\n            return _.find(group.environmentGroups, (environment) => {\n              if (\n                environment.environmentName ===\n                getFieldValue('environments')?.environment\n              ) {\n                selectedEnvironmentGroup = environment;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          });\n          return (\n            <Form.Item\n              name={['environments', 'version']}\n              rules={[{ required: _.isEmpty(environments?.manual) }]}\n            >\n              <Select\n                ref={versionSelectRef}\n                onChange={(value) => {\n                  const selectedImage = _.find(images, (image) => {\n                    return getImageFullName(image) === value;\n                  });\n                  form.setFieldValue(['environments', 'image'], selectedImage);\n                }}\n                showSearch\n                searchValue={versionSearch}\n                onSearch={setVersionSearch}\n                // autoClearSearchValue\n                optionFilterProp=\"filterValue\"\n                // optionLabelProp=\"label\"\n                dropdownRender={(menu) => (\n                  <>\n                    <Flex\n                      style={{\n                        fontWeight: token.fontWeightStrong,\n                        paddingLeft: token.paddingSM,\n                      }}\n                    >\n                      {t('session.launcher.Version')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Base')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Architecture')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Requirements')}\n                    </Flex>\n                    <Divider style={{ margin: '8px 0' }} />\n                    {menu}\n                  </>\n                )}\n                disabled={\n                  baiClient._config.allow_manual_image_name_for_session &&\n                  !_.isEmpty(environments?.manual)\n                }\n              >\n                {_.map(\n                  _.uniqBy(selectedEnvironmentGroup?.images, 'digest'),\n\n                  (image) => {\n                    const [version, tag, ...requirements] = image?.tag?.split(\n                      '-',\n                    ) || ['', '', ''];\n\n                    let tagAlias = metadata?.tagAlias[tag];\n                    if (!tagAlias) {\n                      for (const [key, replaceString] of Object.entries(\n                        metadata?.tagReplace || {},\n                      )) {\n                        const pattern = new RegExp(key);\n                        if (pattern.test(tag)) {\n                          tagAlias = tag?.replace(pattern, replaceString);\n                        }\n                      }\n                      if (!tagAlias) {\n                        tagAlias = tag;\n                      }\n                    }\n\n                    const extraFilterValues: string[] = [];\n                    const requirementTags = _.chain(requirements)\n                      .filter(\n                        (requirement) => !requirement.startsWith('customized_'),\n                      )\n                      .map((requirement, idx) => (\n                        <DoubleTag\n                          key={idx}\n                          values={_.split(\n                            metadata?.tagAlias[requirement] || requirement,\n                            ':',\n                          ).map((str) => {\n                            extraFilterValues.push(str);\n                            return (\n                              <TextHighlighter\n                                keyword={versionSearch}\n                                key={str}\n                              >\n                                {str}\n                              </TextHighlighter>\n                            );\n                          })}\n                        />\n                      ))\n                      .value();\n                    const imageLabels = image?.labels;\n                    if (imageLabels) {\n                      const customizedImageNameLabelIdx = _.findIndex(\n                        imageLabels,\n                        (item) =>\n                          item !== null &&\n                          item?.key === 'ai.backend.customized-image.name',\n                      );\n                      if (\n                        customizedImageNameLabelIdx &&\n                        imageLabels[customizedImageNameLabelIdx]\n                      ) {\n                        const tag =\n                          imageLabels[customizedImageNameLabelIdx]?.value || '';\n                        extraFilterValues.push('Customized');\n                        extraFilterValues.push(tag);\n                        requirementTags.push(\n                          <DoubleTag\n                            key={requirementTags.length + 1}\n                            values={[\n                              {\n                                label: (\n                                  <TextHighlighter\n                                    keyword={versionSearch}\n                                    key=\"Customized\"\n                                  >\n                                    Customized\n                                  </TextHighlighter>\n                                ),\n                                color: 'cyan',\n                              },\n                              {\n                                label: (\n                                  <TextHighlighter\n                                    keyword={versionSearch}\n                                    key={tag}\n                                  >\n                                    {tag}\n                                  </TextHighlighter>\n                                ),\n                                color: 'cyan',\n                              },\n                            ]}\n                          />,\n                        );\n                      }\n                    }\n                    return (\n                      <Select.Option\n                        key={image?.digest}\n                        value={getImageFullName(image)}\n                        filterValue={[\n                          version,\n                          tagAlias,\n                          image?.architecture,\n                          ...extraFilterValues,\n                        ].join('\\t')}\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\">\n                            <TextHighlighter keyword={versionSearch}>\n                              {version}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {tagAlias}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.architecture}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {requirementTags || '-'}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  },\n                )}\n              </Select>\n            </Form.Item>\n          );\n        }}\n      </Form.Item>\n      <Form.Item\n        label={t('session.launcher.ManualImageName')}\n        name={['environments', 'manual']}\n        style={{\n          display: baiClient._config.allow_manual_image_name_for_session\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Input\n          allowClear\n          onChange={(value) => {\n            if (!_.isEmpty(value)) {\n              form.setFieldsValue({\n                environments: {\n                  environment: undefined,\n                  version: undefined,\n                  image: undefined,\n                },\n              });\n            } else {\n            }\n          }}\n        />\n      </Form.Item>\n      <Form.Item noStyle hidden name={['environments', 'image']}>\n        <Input />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ImageEnvironmentSelectFormItems;\n","import DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport { VFolderPermissionTag_VFolder$key } from './__generated__/VFolderPermissionTag_VFolder.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useKeyPairLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport { useShadowRoot } from './DefaultProviders';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport { VFolderTableProjectQuery } from './__generated__/VFolderTableProjectQuery.graphql';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  Button,\n  Descriptions,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string | number;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\nexport interface VFolderTableProps extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n  onChangeAutoMountedFolders?: (names: Array<string>) => void;\n  showAutoMountedFoldersSection?: boolean;\n}\n\nexport const vFolderAliasNameRegExp = /^[a-zA-Z0-9_/-]*$/;\n\nconst VFolderTable: React.FC<VFolderTableProps> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = '/home/work/',\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  onChangeAutoMountedFolders,\n  showAutoMountedFoldersSection,\n  ...tableProps\n}) => {\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableValue<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableValue<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey, currentProject.id],\n    queryFn: () => {\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?group_id=${currentProject.id}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 1000,\n  });\n\n  const { domain, group, keypair_resource_policy } =\n    useLazyLoadQuery<VFolderTableProjectQuery>(\n      graphql`\n        query VFolderTableProjectQuery(\n          $domain_name: String!\n          $group_id: UUID!\n          $keypair_resource_policy_name: String!\n        ) {\n          domain(name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          group(id: $group_id, domain_name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          keypair_resource_policy(name: $keypair_resource_policy_name) {\n            allowed_vfolder_hosts\n          }\n        }\n      `,\n      {\n        domain_name: baiClient._config.domainName,\n        group_id: currentProject.id,\n        keypair_resource_policy_name: keypair?.resource_policy || '',\n      },\n      {\n        fetchPolicy: 'store-and-network',\n        fetchKey: fetchKey,\n      },\n    );\n\n  const filteredFolderListByPermission = useMemo(() => {\n    const allowedVFolderHostsByDomain = JSON.parse(\n      domain?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByGroup = JSON.parse(\n      group?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByKeypairResourcePolicy = JSON.parse(\n      keypair_resource_policy?.allowed_vfolder_hosts || '{}',\n    );\n\n    const mergedVFolderPermissions = _.merge(\n      allowedVFolderHostsByDomain,\n      allowedVFolderHostsByGroup,\n      allowedVFolderHostsByKeypairResourcePolicy,\n    );\n    // only allow mount if volume permission has 'mount-in-session'\n    const mountAllowedVolumes = Object.keys(mergedVFolderPermissions).filter(\n      (volume) => mergedVFolderPermissions[volume].includes('mount-in-session'),\n    );\n    // Need to filter allFolderList from allowed vfolder\n    return allFolderList?.filter((folder) =>\n      mountAllowedVolumes.includes(folder.host),\n    );\n  }, [domain, group, keypair_resource_policy, allFolderList]);\n\n  const autoMountedFolderNamesByPermission = useMemo(\n    () =>\n      _.chain(filteredFolderListByPermission)\n        .filter((vf) => vf.status === 'ready' && vf.name?.startsWith('.'))\n        .map((vf) => vf.name)\n        .value(),\n    [filteredFolderListByPermission],\n  );\n\n  useEffect(() => {\n    _.isFunction(onChangeAutoMountedFolders) &&\n      onChangeAutoMountedFolders(autoMountedFolderNamesByPermission);\n    // Do not need to run when `autoMountedFolderNames` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoMountedFolderNamesByPermission]);\n\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.chain(filteredFolderListByPermission)\n    .filter((vf) => (filter ? filter(vf) : true))\n    .filter((vf) => {\n      if (selectedRowKeys.includes(getRowKey(vf))) {\n        return true;\n      }\n      return !searchKey || vf.name.includes(searchKey);\n    })\n    .value();\n\n  const mapAliasToPath = useEventNotStable(\n    (name: VFolderKey, input?: string) => {\n      if (_.isEmpty(input)) {\n        return `${aliasBasePath}${name}`;\n      } else if (input?.startsWith('/')) {\n        return input;\n      } else {\n        return `${aliasBasePath}${input}`;\n      }\n    },\n  );\n\n  const handleAliasUpdate = useEventNotStable(() => {\n    setAliasMap(\n      _.mapValues(\n        _.pickBy(internalForm.getFieldsValue(), (v) => !!v), //remove empty\n        (v, k) => mapAliasToPath(k, v), // add alias base path\n      ),\n    );\n    internalForm.validateFields().catch(() => {});\n  });\n\n  useEffect(() => {\n    handleAliasUpdate();\n    // `selectedRowKeys` can be changed by parents at any time, so we need to check whether `selectedRowKeys` has changed using JSON.stringify\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(selectedRowKeys), handleAliasUpdate]);\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : {\n                    maxWidth: 200,\n                  }\n            }\n          >\n            <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || mapAliasToPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: vFolderAliasNameRegExp,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    mapAliasToPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={mapAliasToPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        allowClear\n                        onChange={() => {\n                          handleAliasUpdate();\n                        }}\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Button\n          loading={isPendingRefetch}\n          icon={<ReloadOutlined />}\n          onClick={() => {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Form form={internalForm} component={false}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n      {showAutoMountedFoldersSection &&\n      autoMountedFolderNamesByPermission.length > 0 ? (\n        <>\n          <Descriptions size=\"small\">\n            <Descriptions.Item label={t('data.AutomountFolders')}>\n              {_.map(autoMountedFolderNamesByPermission, (name) => {\n                return <Tag key={name}>{name}</Tag>;\n              })}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ) : null}\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import { VFolder } from './VFolderSelect';\nimport VFolderTable, {\n  AliasMap,\n  VFolderTableProps,\n  vFolderAliasNameRegExp,\n} from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFormItemProps extends Omit<FormItemProps, 'name'> {\n  filter?: VFolderTableProps['filter'];\n  rowKey?: keyof VFolder;\n  tableProps?: Partial<VFolderTableProps>;\n}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n}\n\nconst VFolderTableFormItem: React.FC<VFolderTableFormItemProps> = ({\n  filter,\n  rowKey = 'name',\n  tableProps,\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  Form.useWatch('vfoldersAliasMap', form);\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              if (_.some(arr, (alias) => !vFolderAliasNameRegExp.test(alias))) {\n                return Promise.reject(t('session.launcher.FolderAliasInvalid'));\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item hidden name=\"autoMountedFolderNames\" />\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey={rowKey}\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n          filter={filter}\n          showAutoMountedFoldersSection\n          onChangeAutoMountedFolders={(names) => {\n            form.setFieldValue('autoMountedFolderNames', names);\n          }}\n          {...tableProps}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFormItem;\n","/**\n * @generated SignedSource<<eb85d3c5b8be4b647315f0e92797a0ce>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ImageEnvironmentSelectFormItemsQuery$variables = {\n  installed?: boolean | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery$data = {\n  readonly images: ReadonlyArray<{\n    readonly architecture: string | null | undefined;\n    readonly digest: string | null | undefined;\n    readonly humanized_name: string | null | undefined;\n    readonly installed: boolean | null | undefined;\n    readonly labels: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly name: string | null | undefined;\n    readonly registry: string | null | undefined;\n    readonly resource_limits: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly max: string | null | undefined;\n      readonly min: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly tag: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery = {\n  response: ImageEnvironmentSelectFormItemsQuery$data;\n  variables: ImageEnvironmentSelectFormItemsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"installed\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"key\",\n  \"storageKey\": null\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"is_installed\",\n        \"variableName\": \"installed\"\n      }\n    ],\n    \"concreteType\": \"Image\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"images\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"humanized_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"tag\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"registry\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"architecture\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"digest\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"installed\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ResourceLimit\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"resource_limits\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"min\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"max\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"labels\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"value\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ea71f4a3948d4742dd6bb11ef80a8300\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageEnvironmentSelectFormItemsQuery(\\n  $installed: Boolean\\n) {\\n  images(is_installed: $installed) {\\n    name\\n    humanized_name\\n    tag\\n    registry\\n    architecture\\n    digest\\n    installed\\n    resource_limits {\\n      key\\n      min\\n      max\\n    }\\n    labels {\\n      key\\n      value\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"33367bd6e1532b42b61629ef9d3dc46b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<a6063364be2bb8e0d0d7ede25c023b08>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null | undefined;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2f1d42e18d07f2a8dbef6f6bf28f54f9>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type VFolderTableProjectQuery$variables = {\n  domain_name: string;\n  group_id: string;\n  keypair_resource_policy_name: string;\n};\nexport type VFolderTableProjectQuery$data = {\n  readonly domain: {\n    readonly allowed_vfolder_hosts: any | null | undefined;\n  } | null | undefined;\n  readonly group: {\n    readonly allowed_vfolder_hosts: any | null | undefined;\n  } | null | undefined;\n  readonly keypair_resource_policy: {\n    readonly allowed_vfolder_hosts: any | null | undefined;\n  } | null | undefined;\n};\nexport type VFolderTableProjectQuery = {\n  response: VFolderTableProjectQuery$data;\n  variables: VFolderTableProjectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"domain_name\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"group_id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"keypair_resource_policy_name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"allowed_vfolder_hosts\",\n    \"storageKey\": null\n  }\n],\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"domain_name\"\n      }\n    ],\n    \"concreteType\": \"Domain\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"domain\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"domain_name\",\n        \"variableName\": \"domain_name\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"group_id\"\n      }\n    ],\n    \"concreteType\": \"Group\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"group\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"keypair_resource_policy_name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"2c2ce905afd89e93c6d761f22ed59f3d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"VFolderTableProjectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query VFolderTableProjectQuery(\\n  $domain_name: String!\\n  $group_id: UUID!\\n  $keypair_resource_policy_name: String!\\n) {\\n  domain(name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  group(id: $group_id, domain_name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  keypair_resource_policy(name: $keypair_resource_policy_name) {\\n    allowed_vfolder_hosts\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ccdbaa52a63c2ea005423e7c541eff80\";\n\nexport default node;\n"],"names":["_ref","filter","showPrivate","form","Form","useFormInstance","environments","useWatch","preserve","baiClient","useSuspendedBackendaiClient","environmentSearch","setEnvironmentSearch","useState","versionSearch","setVersionSearch","t","useTranslation","metadata","getImageMeta","useBackendAIImageMetaData","token","theme","useToken","isDarkMode","useThemeMode","envSelectRef","useRef","versionSelectRef","images","useLazyLoadQuery","_ImageEnvironmentSelectFormItemsQuery","require","installed","fetchPolicy","useEffect","_form$getFieldValue","_$find","_nextImage","_","manual","environment","version","setFieldsValue","undefined","image","matchedEnvironmentByVersion","matchedImageByVersion","nextEnvironment","nextImage","getFieldValue","_imageGroups$","_nextEnvironment2","indexOf","imageGroups","group","environmentGroups","getImageFullName","_nextEnvironment","environmentName","customizedImageTag","labels","item","key","value","_config","allow_manual_image_name_for_session","customizedTag","setFieldValue","useMemo","label","_label$value","split","includes","isPrivateImage","groupBy","_metadata$imageInfo$g","imageInfo","map","groupName","registry","name","_environmentName$spli","_metadata$imageInfo$i","imageKey","displayName","prefix","drop","dropRight","join","sort","a","b","_b$tag$split$","_b$tag","_b$tag$split","_a$tag$split$","_a$tag","_a$tag$split","version1","version2","v1","Number","v2","i","Math","max","length","num1","num2","compareVersions","tag","sortBy","fullNameMatchedImage","fullNameMatchedImageGroup","flatMap","find","envGroup","_jsxs","_Fragment","children","_jsx","Item","concat","rules","required","style","marginBottom","Select","ref","showSearch","searchValue","onSearch","defaultActiveFirstOption","optionFilterProp","onChange","firstInListImage","disabled","Option","filterValue","Flex","direction","align","gap","display","ImageMetaIcon","width","height","OptGroup","environmentGroup","_environmentGroup$env","firstImage","currentMetaImageInfo","extraFilterValues","environmentPrefixTag","push","Tag","color","TextHighlighter","keyword","tagsFromMetaImageInfoLabel","category","justify","className","marginLeft","marginXS","flexShrink","noStyle","shouldUpdate","prev","cur","_prev$environments","_cur$environments","_ref2","_selectedEnvironmentG","selectedEnvironmentGroup","_getFieldValue","selectedImage","dropdownRender","menu","fontWeight","fontWeightStrong","paddingLeft","paddingSM","Divider","type","margin","_image$tag","requirements","tagAlias","replaceString","Object","entries","tagReplace","pattern","RegExp","test","replace","requirementTags","requirement","startsWith","idx","DoubleTag","values","str","imageLabels","customizedImageNameLabelIdx","_imageLabels$customiz","architecture","digest","Input","allowClear","hidden","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","tagValues","r","w","d","perm","hasPermission","toUpperCase","compact","vFolderAliasNameRegExp","showAliasInput","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","aliasBasePath","aliasMap","controlledAliasMap","onChangeAliasMap","rowKey","onChangeAutoMountedFolders","showAutoMountedFoldersSection","tableProps","getRowKey","React","record","setSelectedRowKeys","useControllableValue","defaultValue","setAliasMap","keypair","useKeyPairLazyLoadQuery","accessKey","internalForm","useForm","v","slice","validateFields","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","fetchKey","updateFetchKey","useUpdatableState","isPendingRefetch","startRefetchTransition","useTransition","data","allFolderList","useTanQuery","queryKey","id","queryFn","method","url","staleTime","domain","keypair_resource_policy","_VFolderTableProjectQuery","domain_name","domainName","group_id","keypair_resource_policy_name","resource_policy","filteredFolderListByPermission","allowedVFolderHostsByDomain","JSON","parse","allowed_vfolder_hosts","allowedVFolderHostsByGroup","allowedVFolderHostsByKeypairResourcePolicy","mergedVFolderPermissions","mountAllowedVolumes","keys","volume","folder","host","autoMountedFolderNamesByPermission","vf","_vf$name","status","searchKey","setSearchKey","displayingFolders","mapAliasToPath","useEventNotStable","input","handleAliasUpdate","getFieldsValue","k","catch","stringify","shadowRoot","useShadowRoot","columns","title","Typography","Text","Tooltip","Trans","i18nKey","getPopupContainer","QuestionCircleOutlined","dataIndex","sorter","localeCompare","render","isCurrentRowSelected","maxWidth","allAliasPathMap","reduce","result","message","validator","async","rule","path","Promise","reject","resolve","extra","onClick","e","stopPropagation","placeholder","usage_mode","UserOutlined","group_name","row","VFolderPermissionTag","created_at","dayjs","format","target","Button","loading","icon","ReloadOutlined","component","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","Descriptions","size","formItemProps","arr","alias","valuePropName","trigger","VFolderTable","pagination","names","node","v0","hash"],"sourceRoot":""}