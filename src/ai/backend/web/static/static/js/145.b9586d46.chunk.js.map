{"version":3,"file":"static/js/145.b9586d46.chunk.js","mappings":"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","sources":["components/DoubleTag.tsx","components/DescriptionLabel.tsx","components/Information.tsx","../node_modules/@ant-design/icons-svg/es/asn/WarningOutlined.js","../node_modules/@ant-design/icons/es/icons/WarningOutlined.js"],"sourcesContent":["import Flex from './Flex';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: ValueType;\n  color?: string;\n};\n\ntype ValueType = string | React.ReactNode;\nconst DoubleTag: React.FC<{\n  values?: ValueType[] | DoubleTagObjectValue[];\n}> = ({ values = [] }) => {\n  if (values.length === 0) return null;\n  let objectValues: DoubleTagObjectValue[];\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) => {\n        return (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {objValue.label}\n          </Tag>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","import Flex from './Flex';\nimport { Typography } from 'antd';\nimport React, { ReactNode } from 'react';\n\nconst DescriptionLabel: React.FC<{\n  title: string;\n  subtitle?: ReactNode | string | null;\n}> = ({ title, subtitle }) => {\n  // const { token } = theme.useToken();\n  return (\n    <Flex direction=\"column\" align=\"start\">\n      <Typography.Text strong>{title}</Typography.Text>\n      {subtitle && (\n        <Typography.Text type=\"secondary\">{subtitle}</Typography.Text>\n      )}\n    </Flex>\n  );\n};\n\nexport default DescriptionLabel;\n","import { newLineToBrElement } from '../helper';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport DescriptionLabel from './DescriptionLabel';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\nimport { CheckOutlined, WarningOutlined } from '@ant-design/icons';\nimport {\n  Descriptions,\n  Tag,\n  Card,\n  theme,\n  DescriptionsProps,\n  Spin,\n  Row,\n  Col,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { useQuery } from 'react-query';\n\ninterface InformationProps {}\nconst Information: React.FC<InformationProps> = () => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n\n  let { data: licenseInfo, isLoading: isLoadingLicenseInfo } = useQuery<{\n    valid: boolean;\n    type: string;\n    licensee: string;\n    key: string;\n    expiration: string;\n  }>(\n    'licenseInfo',\n    () => {\n      return baiClient.enterprise.getLicense();\n    },\n    {\n      // for to render even this fail query failed\n      suspense: false,\n    },\n  );\n\n  if (!licenseInfo) {\n    licenseInfo = {\n      valid: false,\n      type: t('information.CannotRead'),\n      licensee: t('information.CannotRead'),\n      key: t('information.CannotRead'),\n      expiration: t('information.CannotRead'),\n    };\n  }\n\n  const columnSetting: DescriptionsProps['column'] = {\n    xxl: 4,\n    xl: 4,\n    lg: 2,\n    md: 1,\n    sm: 1,\n    xs: 1,\n  };\n\n  return (\n    <Flex direction=\"column\" align=\"stretch\" style={{ gap: token.margin }}>\n      <Row gutter={[token.margin, token.margin]}>\n        <Col xs={24} xxl={12}>\n          <Card\n            style={{\n              height: '100%',\n            }}\n          >\n            <Descriptions\n              title={t('information.Core')}\n              bordered\n              column={columnSetting}\n            >\n              <Descriptions.Item\n                label={\n                  <DescriptionLabel title={t('information.ManagerVersion')} />\n                }\n              >\n                <Flex\n                  direction=\"column\"\n                  style={{ gap: token.marginXXS }}\n                  align=\"start\"\n                >\n                  Backend.AI {baiClient.managerVersion}\n                  <DoubleTag\n                    values={[\n                      t('information.Installation'),\n                      baiClient.managerVersion,\n                    ]}\n                  />\n                  {/* TODO: get manager_version_latest  */}\n                  {/* <DoubleTag\n                label={t(\"information.LatestRelease\")}\n                value={\"manager_version_latest\"}\n              /> */}\n                </Flex>\n              </Descriptions.Item>\n              <Descriptions.Item\n                label={<DescriptionLabel title={t('information.APIVersion')} />}\n              >\n                {baiClient.apiVersion}\n              </Descriptions.Item>\n            </Descriptions>\n          </Card>\n        </Col>\n        <Col xs={24} xxl={12}>\n          <Card>\n            <Descriptions\n              title={t('information.Security')}\n              bordered\n              column={columnSetting}\n            >\n              <Descriptions.Item\n                label={\n                  <DescriptionLabel\n                    title={t('information.DefaultAdministratorAccountChanged')}\n                    subtitle={t(\n                      'information.DescDefaultAdministratorAccountChanged',\n                    )}\n                  />\n                }\n              >\n                {/* TODO: accountChanged  */}\n                {true ? (\n                  <CheckOutlined title=\"Yes\" />\n                ) : (\n                  <WarningOutlined\n                    style={{ color: token.colorWarning }}\n                    title=\"No\"\n                  />\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item\n                label={\n                  <DescriptionLabel\n                    title={t('information.UsesSSL')}\n                    subtitle={t('information.DescUsesSSL')}\n                  />\n                }\n              >\n                {baiClient?._config.endpoint.startsWith('https:') ? (\n                  <CheckOutlined title=\"Yes\" />\n                ) : (\n                  <WarningOutlined\n                    style={{ color: token.colorWarning }}\n                    title=\"No\"\n                  />\n                )}\n              </Descriptions.Item>\n            </Descriptions>\n          </Card>\n        </Col>\n      </Row>\n\n      <Card>\n        <Descriptions\n          title={t('information.Component')}\n          bordered\n          column={{ xxl: 4, xl: 2, lg: 2, md: 1, sm: 1, xs: 1 }}\n        >\n          <Descriptions.Item\n            label={\n              <DescriptionLabel\n                title={t('information.DockerVersion')}\n                subtitle={t('information.DescDockerVersion')}\n              />\n            }\n          >\n            <Tag>{t('information.Compatible')}</Tag>\n          </Descriptions.Item>\n          <Descriptions.Item\n            label={\n              <DescriptionLabel\n                title={t('information.PostgreSQLVersion')}\n                subtitle={t('information.DescPostgreSQLVersion')}\n              />\n            }\n          >\n            <Tag>{t('information.Compatible')}</Tag>\n          </Descriptions.Item>\n          <Descriptions.Item\n            label={\n              <DescriptionLabel\n                title={t('information.ETCDVersion')}\n                subtitle={t('information.DescETCDVersion')}\n              />\n            }\n          >\n            <Tag>{t('information.Compatible')}</Tag>\n          </Descriptions.Item>\n          <Descriptions.Item\n            label={\n              <DescriptionLabel\n                title={t('information.RedisVersion')}\n                subtitle={newLineToBrElement(t('information.DescRedisVersion'))}\n              />\n            }\n          >\n            <Tag>{t('information.Compatible')}</Tag>\n          </Descriptions.Item>\n        </Descriptions>\n      </Card>\n      <Card>\n        <Spin spinning={isLoadingLicenseInfo}>\n          <Descriptions\n            title={t('information.License')}\n            bordered\n            column={{\n              xxl: 2,\n              xl: 2,\n              lg: 2,\n              md: 1,\n              sm: 1,\n              xs: 1,\n            }}\n          >\n            <Descriptions.Item\n              label={\n                <DescriptionLabel\n                  title={t('information.IsLicenseValid')}\n                  subtitle={t('information.DescIsLicenseValid')}\n                />\n              }\n            >\n              {licenseInfo.valid ? (\n                <CheckOutlined />\n              ) : (\n                <WarningOutlined style={{ color: token.colorWarning }} />\n              )}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={\n                <DescriptionLabel\n                  title={t('information.LicenseType')}\n                  subtitle={newLineToBrElement(\n                    t('information.DescLicenseType'),\n                  )}\n                />\n              }\n            >\n              <Tag>\n                {licenseInfo.type === 'fixed'\n                  ? t('information.FixedLicense')\n                  : t('information.DynamicLicense')}\n              </Tag>\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={\n                <DescriptionLabel\n                  title={t('information.Licensee')}\n                  subtitle={t('information.DescLicensee')}\n                />\n              }\n            >\n              <Tag>{licenseInfo.licensee}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={\n                <DescriptionLabel\n                  title={t('information.LicenseKey')}\n                  subtitle={t('information.DescLicenseKey')}\n                />\n              }\n            >\n              <Tag>{licenseInfo.key}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={\n                <DescriptionLabel\n                  title={t('information.Expiration')}\n                  subtitle={t('information.DescExpiration')}\n                />\n              }\n            >\n              <Tag>{licenseInfo.expiration}</Tag>\n            </Descriptions.Item>\n          </Descriptions>\n        </Spin>\n      </Card>\n    </Flex>\n  );\n};\n\nexport default Information;\n","// This icon file is generated automatically.\nvar WarningOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M464 720a48 48 0 1096 0 48 48 0 10-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8zm475.7 440l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z\" } }] }, \"name\": \"warning\", \"theme\": \"outlined\" };\nexport default WarningOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport WarningOutlinedSvg from \"@ant-design/icons-svg/es/asn/WarningOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar WarningOutlined = function WarningOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: WarningOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  WarningOutlined.displayName = 'WarningOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(WarningOutlined);"],"names":["_ref","objectValues","_ref$values","values","length","React","map","value","label","color","_jsx","Flex","direction","children","_","objValue","idx","Tag","style","undefined","margin","marginRight","title","subtitle","_jsxs","align","Typography","Text","strong","type","t","useTranslation","token","theme","useToken","baiClient","useSuspendedBackendaiClient","_useQuery","useQuery","enterprise","getLicense","suspense","licenseInfo","data","isLoadingLicenseInfo","isLoading","valid","licensee","key","expiration","columnSetting","xxl","xl","lg","md","sm","xs","gap","Row","gutter","Col","Card","height","Descriptions","bordered","column","Item","DescriptionLabel","marginXXS","managerVersion","DoubleTag","apiVersion","CheckOutlined","_config","endpoint","startsWith","WarningOutlined","colorWarning","newLineToBrElement","Spin","spinning","props","ref","AntdIcon","_extends","icon","WarningOutlinedSvg"],"sourceRoot":""}