{"version":3,"file":"static/js/112.2e2878c3.chunk.js","mappings":"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","sources":["helper/graphql-transformer.ts","RelayEnvironment.ts","components/DefaultProviders.tsx","components/__generated__/ResourcePresetSelectQuery.graphql.ts","BAICard.tsx","components/DatePickerISO.tsx","components/EnvVarFormList.tsx","components/PortSelectFormItem.tsx","components/DynamicUnitInputNumber.tsx","components/DynamicUnitInputNumberWithSlider.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/SessionNameFormItem.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { parse, print, visit } from 'graphql';\n\n// Delete nodes in enter\n// Remove unnecessary arguments or directives in leave\nexport function manipulateGraphQLQueryWithClientDirectives(\n  query: string,\n  variables: any = {},\n  isCompatibleWith: (version: string) => boolean,\n) {\n  const ast = parse(query);\n  let newAst = visit(ast, {\n    Field: {\n      enter(node) {\n        if (\n          node?.directives?.find((directive) => {\n            const directiveName = directive.name.value;\n            const firstArgName = directive.arguments?.[0].name.value;\n            // @ts-ignore\n            const firstArgValue = directive.arguments?.[0].value?.value;\n            const arg = directive.arguments?.[0];\n\n            if (directiveName === 'since' && firstArgName === 'version') {\n              if (isCompatibleWith(firstArgValue)) {\n                return true;\n              }\n            } else if (\n              directiveName === 'deprecatedSince' &&\n              firstArgName === 'version'\n            ) {\n              const version =\n                arg?.value.kind === 'StringValue'\n                  ? arg?.value.value\n                  : // @ts-ignore\n                    variables[arg?.value.name.value];\n\n              if (!isCompatibleWith(version)) {\n                return true;\n              }\n            } else if (\n              directiveName === 'skipOnClient' &&\n              firstArgName === 'if'\n            ) {\n              if (arg?.value.kind === 'BooleanValue' && arg.value.value) {\n                return true;\n              }\n\n              if (\n                arg?.value.kind === 'Variable' &&\n                variables[arg.value.name.value]\n              ) {\n                return true;\n              }\n            }\n            return false;\n          })\n        ) {\n          return null;\n        }\n      },\n      leave(node) {\n        // when field has a empty selectionSet, delete it\n        if (\n          node.selectionSet &&\n          node.selectionSet.kind === 'SelectionSet' &&\n          node.selectionSet.selections?.length === 0\n        ) {\n          return null;\n        }\n      },\n    },\n    Directive: {\n      // delete all onClient directives\n      leave(directive) {\n        const directiveName = directive.name.value;\n        if (\n          ['since', 'deprecatedSince', 'skipOnClient'].includes(directiveName)\n        ) {\n          return null;\n        }\n      },\n    },\n  });\n\n  // count used variables\n  const usedVariables: {\n    [key: string]: number;\n  } = {};\n  visit(newAst, {\n    Variable(node) {\n      usedVariables[node.name.value] =\n        (usedVariables[node.name.value] || 0) + 1;\n    },\n  });\n\n  // delete unused variables\n  newAst = visit(newAst, {\n    VariableDefinition: {\n      enter(variableDefinition) {\n        if (usedVariables[variableDefinition.variable.name.value] <= 1) {\n          return null;\n        }\n      },\n    },\n  });\n\n  return print(newAst);\n}\n","// import { createClient } from \"graphql-ws\";\nimport { manipulateGraphQLQueryWithClientDirectives } from './helper/graphql-transformer';\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n  FetchFunction,\n  SubscribeFunction,\n  RelayFeatureFlags,\n} from 'relay-runtime';\n\nRelayFeatureFlags.ENABLE_RELAY_RESOLVERS = true;\n\nconst fetchFn: FetchFunction = async (\n  request,\n  variables,\n  // cacheConfig,\n  // uploadables\n) => {\n  //@ts-ignore\n  if (globalThis.backendaiclient === undefined) {\n    // If globalThis.backendaiclient is not defined, wait for the backend-ai-connected event.\n    await new Promise((resolve) => {\n      const onBackendAIConnected = () => {\n        // When the backend-ai-connected event occurs, remove the event listener and execute the function.\n        document.removeEventListener(\n          'backend-ai-connected',\n          onBackendAIConnected,\n        );\n        resolve(undefined);\n      };\n      document.addEventListener('backend-ai-connected', onBackendAIConnected);\n    });\n  }\n\n  const transformedQuery = manipulateGraphQLQueryWithClientDirectives(\n    request.text || '',\n    variables,\n    (version) => {\n      // @ts-ignore\n      return !globalThis.backendaiclient?.isManagerVersionCompatibleWith(\n        version,\n      );\n    },\n  );\n\n  const reqBody = {\n    query: transformedQuery,\n    variables: variables,\n  };\n\n  //@ts-ignore\n  const reqInfo = globalThis.backendaiclient?.newSignedRequest(\n    'POST',\n    '/admin/gql',\n    reqBody,\n  );\n\n  const result =\n    //@ts-ignore\n    (await globalThis.backendaiclient\n      ?._wrapWithPromise(reqInfo, false, null, 10000, 0)\n      .catch((err: any) => {\n        // console.log(err);\n      })) || {};\n\n  return result;\n};\n\nlet subscribeFn: SubscribeFunction;\n\n// if (typeof window !== \"undefined\") {\n//   // We only want to setup subscriptions if we are on the client.\n//   const subscriptionsClient = createClient({\n//     url: WEBSOCKET_ENDPOINT,\n//   });\n\n//   subscribeFn = (request, variables) => {\n//     // To understand why we return Observable.create<any>,\n//     // please see: https://github.com/enisdenjo/graphql-ws/issues/316#issuecomment-1047605774\n//     return Observable.create<any>((sink) => {\n//       if (!request.text) {\n//         return sink.error(new Error(\"Operation text cannot be empty\"));\n//       }\n\n//       return subscriptionsClient.subscribe(\n//         {\n//           operationName: request.name,\n//           query: request.text,\n//           variables,\n//         },\n//         sink\n//       );\n//     });\n//   };\n// }\n\nfunction createRelayEnvironment() {\n  return new Environment({\n    network: Network.create(fetchFn, subscribeFn),\n    store: new Store(new RecordSource()),\n  });\n}\n\nexport const RelayEnvironment = createRelayEnvironment();\n","import { RelayEnvironment } from '../RelayEnvironment';\n// @ts-ignore\nimport rawFixAntCss from '../fix_antd.css?raw';\nimport { useCustomThemeConfig } from '../helper/customThemeConfig';\nimport { ReactWebComponentProps } from '../helper/react-to-webcomponent';\nimport { StyleProvider, createCache } from '@ant-design/cssinjs';\nimport { App, ConfigProvider } from 'antd';\nimport en_US from 'antd/locale/en_US';\nimport ko_KR from 'antd/locale/ko_KR';\nimport dayjs from 'dayjs';\nimport 'dayjs/locale/ko';\nimport localeData from 'dayjs/plugin/localeData';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\nimport weekday from 'dayjs/plugin/weekday';\nimport i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport React, {\n  Suspense,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useTranslation, initReactI18next } from 'react-i18next';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { RelayEnvironmentProvider } from 'react-relay';\nimport { BrowserRouter, useNavigate } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\nimport { ReactRouter6Adapter } from 'use-query-params/adapters/react-router-6';\n\ndayjs.extend(weekday);\ndayjs.extend(localeData);\ndayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\ninterface WebComponentContextType {\n  value?: ReactWebComponentProps['value'];\n  dispatchEvent: ReactWebComponentProps['dispatchEvent'];\n  moveTo: (\n    path: string,\n    params?: {\n      [key in string]?: boolean | string | number;\n    },\n  ) => void;\n}\n\nconst WebComponentContext = React.createContext<WebComponentContextType>(null!);\nconst ShadowRootContext = React.createContext<ShadowRoot>(null!);\nexport const useShadowRoot = () => React.useContext(ShadowRootContext);\nexport const useWebComponentInfo = () => React.useContext(WebComponentContext);\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      suspense: true,\n      refetchOnWindowFocus: false,\n      retry: false,\n    },\n  },\n});\n\nexport interface DefaultProvidersProps extends ReactWebComponentProps {\n  children?: React.ReactNode;\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(Backend)\n  .init({\n    backend: {\n      loadPath: '/resources/i18n/{{lng}}.json',\n    },\n    //@ts-ignore\n    lng: globalThis?.backendaioptions?.get('current_language') || 'en',\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false, // react already safes from xss => https://www.i18next.com/translation-function/interpolation#unescape\n    },\n    react: {\n      transSupportBasicHtmlNodes: true,\n      transKeepBasicHtmlNodesFor: ['br', 'strong', 'span', 'code', 'p'],\n    },\n  });\n\nconst useCurrentLanguage = () => {\n  const [lang, _setLang] = useState(\n    //@ts-ignore\n    globalThis?.backendaioptions?.get('current_language'),\n  );\n  const { i18n } = useTranslation();\n\n  useEffect(() => {\n    // TODO: remove this hack to initialize i18next\n    setTimeout(() => i18n?.changeLanguage(lang), 0);\n    // For changing locale globally, use dayjs.locale instead of dayjs().locale\n    dayjs.locale(lang);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const handler = (e: Event) => {\n      //@ts-ignore\n      _setLang(e?.detail?.lang);\n      //@ts-ignore\n      const lang: string = e?.detail?.lang || 'en';\n      i18n?.changeLanguage(lang);\n      // For changing locale globally, use dayjs.locale instead of dayjs().locale\n      dayjs.locale(lang);\n    };\n    window.addEventListener('langChanged', handler);\n    return () => window.removeEventListener('langChanged', handler);\n  }, [i18n]);\n\n  return [lang] as const;\n};\n\nconst DefaultProviders: React.FC<DefaultProvidersProps> = ({\n  children,\n  value,\n  styles,\n  shadowRoot,\n  dispatchEvent,\n}) => {\n  const cache = useMemo(() => createCache(), []);\n  const [lang] = useCurrentLanguage();\n  const themeConfig = useCustomThemeConfig();\n\n  const componentValues = useMemo(() => {\n    return {\n      value,\n      dispatchEvent,\n      moveTo: (path, params) => {\n        dispatchEvent('moveTo', { path, params: params });\n      },\n    } as WebComponentContextType;\n  }, [value, dispatchEvent]);\n  return (\n    <>\n      {RelayEnvironment && (\n        <RelayEnvironmentProvider environment={RelayEnvironment}>\n          <React.StrictMode>\n            <style>\n              {styles}\n              {rawFixAntCss}\n            </style>\n            <QueryClientProvider client={queryClient}>\n              <ShadowRootContext.Provider value={shadowRoot}>\n                <WebComponentContext.Provider value={componentValues}>\n                  <ConfigProvider\n                    // @ts-ignore\n                    getPopupContainer={(triggerNode) => {\n                      return triggerNode?.parentNode || shadowRoot;\n                    }}\n                    //TODO: apply other supported locales\n                    locale={'ko' === lang ? ko_KR : en_US}\n                    theme={themeConfig}\n                  >\n                    <App>\n                      <StyleProvider container={shadowRoot} cache={cache}>\n                        <Suspense fallback=\"\">\n                          <BrowserRouter>\n                            <QueryParamProvider\n                              adapter={ReactRouter6Adapter}\n                              options={\n                                {\n                                  // searchStringToObject: queryString.parse,\n                                  // objectToSearchString: queryString.stringify,\n                                }\n                              }\n                            >\n                              <RoutingEventHandler />\n                              {children}\n                            </QueryParamProvider>\n                          </BrowserRouter>\n                        </Suspense>\n                      </StyleProvider>\n                    </App>\n                  </ConfigProvider>\n                </WebComponentContext.Provider>\n              </ShadowRootContext.Provider>\n            </QueryClientProvider>\n          </React.StrictMode>\n        </RelayEnvironmentProvider>\n      )}\n    </>\n  );\n};\n\nconst RoutingEventHandler = () => {\n  const navigate = useNavigate();\n  useLayoutEffect(() => {\n    const handleNavigate = (e: any) => {\n      const { detail } = e;\n      navigate(detail, {\n        // we don't want to add duplicated one to history.\n        // On lit component side, it adds to history already.\n        replace: true,\n      });\n    };\n    document.addEventListener('react-navigate', handleNavigate);\n\n    return () => {\n      document.removeEventListener('react-navigate', handleNavigate);\n    };\n  }, [navigate]);\n\n  return null;\n};\n\nexport default DefaultProviders;\n","/**\n * @generated SignedSource<<f8c3ae59478b8ffd874be16c33231c44>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = {};\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null;\n    readonly resource_slots: any | null;\n    readonly shared_memory: any | null;\n  } | null> | null;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\ninterface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n            ? token.colorWarning\n            : status === 'success'\n            ? token.colorSuccess\n            : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerDateProps } from 'antd/es/date-picker/generatePicker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport React from 'react';\n\ninterface DatePickerISOProps\n  extends Omit<PickerDateProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO: React.FC<DatePickerISOProps> = ({\n  value,\n  onChange,\n  localFormat,\n  ...pickerProps\n}) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n};\n\nexport default DatePickerISO;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    { required: true, message: 'Enter Variable name' },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message:\n                        'Variable name must start with a letter or underscore, and can only contain letters, numbers, and underscores.',\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue('envList'),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject('Variable name already exists');\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[{ required: true, message: 'Enter value' }]}\n                >\n                  <Input placeholder=\"Value\" />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                Add variable\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nexport default EnvVarFormList;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({ ...formItemProps }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name=\"ports\"\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        {\n          max: baiClient._config.maxCountForPreopenPorts,\n          type: 'array',\n          message: t('session.launcher.PreOpenPortMaxCountLimit', {\n            count: baiClient._config.maxCountForPreopenPorts,\n          }),\n        },\n        ({ getFieldValue }) => ({\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                const port = parseInt(v);\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          return (\n            <PortTag\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n}\nexport const PortTag: React.FC<PortTagProps> = ({ value, ...tagProps }) => {\n  const port = parseInt(value);\n  const isValid = port >= MIN_PORT && port <= MAX_PORT;\n  return <Tag color={isValid ? undefined : 'red'} {...tagProps} />;\n};\n\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { iSizeToSize, parseUnit } from '../helper';\nimport { useControllableValue, usePrevious } from 'ahooks';\nimport { InputNumber, InputNumberProps, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nexport interface DynamicUnitInputNumberProps\n  extends Omit<\n    InputNumberProps,\n    'step' | 'max' | 'min' | 'value' | 'onChange'\n  > {\n  dynamicSteps?: number[];\n  disableAutoUnit?: boolean;\n  max?: string;\n  min?: string;\n  value?: string | null | undefined;\n  units?: string[];\n  onChange?: (value: string) => void;\n}\n\nconst DynamicUnitInputNumber: React.FC<DynamicUnitInputNumberProps> = ({\n  dynamicSteps = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],\n  units = ['m', 'g', 't', 'p'],\n  disableAutoUnit = false,\n  min = '0m',\n  max = '300p',\n  // value,\n  // onChange,\n  ...inputNumberProps\n}) => {\n  const [value, setValue] = useControllableValue<string | null | undefined>(\n    inputNumberProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const [numValue, _unitFromValue] =\n    value === null || value === undefined ? [null, null] : parseUnit(value);\n  const previousUnit = usePrevious(_unitFromValue);\n  const unit = _unitFromValue || previousUnit || units[0];\n\n  const [minNumValue, minUnit] = parseUnit(min);\n  const [maxNumValue, maxUnit] = parseUnit(max);\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const onInput = (e: Event) => {\n        // @ts-ignore\n        const value = e?.target?.value;\n        if (/^\\d+(g|m)$/.test(value)) {\n          // const [newNumber, newUnit] = parseUnit(value);\n          // if (newNumber === numValue && newUnit === unit) {\n          //   e.target.value = numValue;\n          // } else {\n          setValue(value);\n          // }\n        }\n      };\n      const target = ref.current;\n      target?.addEventListener('input', onInput);\n      return () => {\n        target?.removeEventListener('input', onInput);\n      };\n    }\n  }, [ref, numValue, _unitFromValue, setValue]);\n\n  return (\n    <InputNumber\n      ref={ref}\n      {...inputNumberProps}\n      value={numValue}\n      onChange={(newValue) => {\n        if (newValue === null || newValue === undefined) {\n          setValue(newValue);\n        } else {\n          setValue(`${newValue}${unit}`);\n        }\n      }}\n      //TODO: When min and max have different units, they should be calculated and put in.\n      // 입력의 초소단위 확인 0.4g 가 되는지 확인\n      // @ts-ignore\n      max={maxUnit === unit ? maxNumValue : iSizeToSize(max, unit).number}\n      min={\n        minUnit === unit\n          ? minNumValue\n          : // @ts-ignore\n            iSizeToSize(min, unit).number\n      }\n      addonAfter={\n        <Select\n          value={unit}\n          onChange={(newUnit) => {\n            setValue(`${numValue}${newUnit}`);\n          }}\n          onDropdownVisibleChange={(open) => {\n            // A null or undefined value doesn't have a unit info, so we need to set the value before setting the unit.\n            if ((open && value === null) || value === undefined) {\n              setValue(`0${unit}`);\n            }\n          }}\n          options={_.map(units, (unit) => ({\n            value: unit,\n            label: (\n              <Typography.Text\n                style={{\n                  fontFamily:\n                    \"'SFMono-Regular',Consolas,'Liberation Mono',Menlo,Courier,monospace\",\n                }}\n              >\n                {unit.toUpperCase() + 'iB'}\n              </Typography.Text>\n            ),\n          }))}\n          suffixIcon={units.length > 1 ? undefined : null}\n          open={units.length > 1 ? undefined : false}\n          style={{\n            cursor: units.length > 1 ? undefined : 'default',\n          }}\n        />\n      }\n      step={0} // this step applies when onStep doesn't setValue\n      onStep={(afterStepValue, info) => {\n        const numValueNotNull =\n          _.isNull(numValue) || _.isUndefined(numValue) ? 0 : numValue;\n        const index = _.sortedIndex(_.sortBy(dynamicSteps), numValueNotNull);\n        let nextIndex: number;\n        if (info.type === 'up') {\n          if (numValueNotNull === dynamicSteps[index]) {\n            nextIndex = index + 1;\n          } else {\n            nextIndex = index;\n          }\n        } else {\n          nextIndex = index - 1;\n        }\n\n        const currentUnitIndex = units.indexOf(unit);\n        if (!disableAutoUnit && nextIndex < 0) {\n          // WHEN MOVING TO MORE Smaller Unit: change unit and number\n          if (currentUnitIndex === 0) {\n            // if already at min unit, set to 0\n            setValue(`0${unit}`);\n          } else {\n            const nextValue = dynamicSteps[dynamicSteps.length - 1];\n            const nextUnit = units[currentUnitIndex - 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else if (!disableAutoUnit && nextIndex > dynamicSteps.length - 1) {\n          // WHEN MOVING TO MORE Bigger Unit: change unit and number\n          //  if already at max unit, step up/down by 1\n          if (currentUnitIndex === units.length - 1) {\n            setValue(\n              `${numValueNotNull + (info.type === 'up' ? 1 : -1)}${maxUnit}`,\n            );\n          } else {\n            const nextValue = dynamicSteps[0];\n            const nextUnit = units[currentUnitIndex + 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else {\n          // WHEN, DON'T NEED TO CHANGE UNIT\n          if (nextIndex >= 0 && nextIndex < dynamicSteps.length) {\n            let nextNumValue = dynamicSteps[nextIndex];\n            if (minUnit === unit && nextNumValue < minNumValue) {\n              nextNumValue = minNumValue;\n            } else if (maxUnit === unit && nextNumValue > maxNumValue) {\n              nextNumValue = maxNumValue;\n            }\n            setValue(`${nextNumValue}${unit}`);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DynamicUnitInputNumber;\n","import { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport DynamicUnitInputNumber, {\n  DynamicUnitInputNumberProps,\n} from './DynamicUnitInputNumber';\nimport Flex from './Flex';\nimport { useControllableValue } from 'ahooks';\nimport { Slider, theme } from 'antd';\nimport { SliderMarks } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useMemo } from 'react';\n\nexport interface DynamicUnitInputNumberWithSliderProps\n  extends DynamicUnitInputNumberProps {\n  extraMarks?: SliderMarks;\n  warn?: string;\n}\nconst DynamicUnitInputNumberWithSlider: React.FC<\n  DynamicUnitInputNumberWithSliderProps\n> = ({\n  min = '0m',\n  max = '32g',\n  warn,\n  units = ['m', 'g'],\n  extraMarks,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableValue<string | undefined | null>(\n    otherProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const { token } = theme.useToken();\n  const minGiB = useMemo(() => iSizeToSize(min, 'g', 2), [min]);\n  const maxGiB = useMemo(() => iSizeToSize(max, 'g', 2), [max]);\n  const valueGiB = useMemo(() => iSizeToSize(value || '0g', 'g', 2), [value]);\n\n  // const warnPercent = useMemo(() => {\n  //   return warn\n  //     ? ((iSizeToSize(warn, 'g', 2)?.number || 0) / (maxGiB?.number || 1)) * 100\n  //     : undefined;\n  // }, [warn, maxGiB?.number]);\n  // console.log('##marks', marks);\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex direction=\"column\" align=\"stretch\" style={{ flex: 3 }}>\n        <Flex direction=\"column\" align=\"stretch\">\n          {/* {warn && (\n            <Flex\n              direction=\"row\"\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 14.5,\n                width: '100%',\n                height: 4,\n                padding: '0 5px',\n              }}\n              align=\"start\"\n            >\n              <div\n                style={{\n                  width: warnPercent + '%',\n                  height: 4,\n                }}\n              ></div>\n              <div\n                style={{\n                  marginTop: 3,\n                  marginLeft: -3.5,\n                  width: 0,\n                  height: 0,\n\n                  borderTop: '4px solid transparent',\n                  borderLeft: '4px solid transparent',\n                  borderRight: '4px solid transparent',\n                  borderBottom: `7px solid ${token.colorWarning}`,\n                }}\n              ></div>\n            </Flex>\n          )} */}\n          <Slider\n            max={maxGiB?.number}\n            trackStyle={\n              (warn && {\n                backgroundColor:\n                  compareNumberWithUnits(warn, value || '0b') < 0\n                    ? token.colorWarning\n                    : undefined,\n              }) ||\n              undefined\n            }\n            railStyle={\n              {\n                // backgroundColor:'red',\n                // fill: 'red',\n              }\n            }\n            step={0.05}\n            // min={minGiB.number}  // DO NOT use min, because slider left should be 0\n            value={valueGiB?.number}\n            tooltip={{\n              formatter: (value = 0) => {\n                return value < 1\n                  ? `${(value * 1024).toFixed(2)} MiB`\n                  : `${value.toFixed(2)} GiB`;\n              },\n            }}\n            onChange={(newNumValue) => {\n              if (minGiB?.number && minGiB.number > newNumValue) {\n                setValue(min);\n              } else {\n                setValue(\n                  newNumValue < 1\n                    ? `${newNumValue * 1024}m`\n                    : `${newNumValue}g`,\n                );\n              }\n            }}\n            marks={{\n              // 0: {\n              //   style: {\n              //     color: token.colorTextSecondary,\n              //   },\n              //   label: 0,\n              // },\n              ...(minGiB &&\n                _.isNumber(minGiB?.number) && {\n                  [minGiB.number]: {\n                    style: {\n                      color: token.colorTextSecondary,\n                    },\n                    // if 0, without unit\n                    label: minGiB.number + (minGiB.number ? 'g' : ''),\n                  },\n                }),\n              ...(maxGiB?.number && {\n                [maxGiB.number]: {\n                  style: {\n                    color: token.colorTextSecondary,\n                  },\n                  label: maxGiB.number + 'g',\n                },\n              }),\n              // ...extraMarks,\n            }}\n          />\n        </Flex>\n      </Flex>\n      <Flex\n        style={{ flex: 2, minWidth: 130 }}\n        direction=\"column\"\n        align=\"stretch\"\n      >\n        <DynamicUnitInputNumber\n          {...otherProps}\n          min={min}\n          max={max}\n          units={units}\n          value={value}\n          onChange={(nextValue) => {\n            setValue(nextValue);\n          }}\n          style={{\n            minWidth: 130,\n          }}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default DynamicUnitInputNumberWithSlider;\n","import { useUpdatableState } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport { ResourcePresetSelectQuery } from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined } from '@ant-design/icons';\nimport { useThrottleFn } from 'ahooks';\nimport { Select } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useLazyLoadQuery } from 'react-relay';\n\n// const myFunc= ()=>{\n//   const param: any = { group: globalThis.backendaiclient.current_group };\n//       if (\n//         this.current_user_group !== globalThis.backendaiclient.current_group ||\n//         this.scaling_groups.length == 0 ||\n//         (this.scaling_groups.length === 1 && this.scaling_groups[0].name === '')\n//       ) {\n//         this.current_user_group = globalThis.backendaiclient.current_group;\n//         const sgs = await globalThis.backendaiclient.scalingGroup.list(\n//           this.current_user_group,\n//         );\n//         // Make empty scaling group item if there is no scaling groups.\n//         this.scaling_groups =\n//           sgs.scaling_groups.length > 0 ? sgs.scaling_groups : [{ name: '' }];\n//       }\n//       if (this.scaling_groups.length > 0) {\n//         const scaling_groups: any = [];\n//         this.scaling_groups.map((group) => {\n//           scaling_groups.push(group.name);\n//         });\n//         if (\n//           this.scaling_group === '' ||\n//           !scaling_groups.includes(this.scaling_group)\n//         ) {\n//           this.scaling_group = this.scaling_groups[0].name;\n//         }\n//         param['scaling_group'] = this.scaling_group;\n//       }\n//       const resourcePresetInfo =\n//         await globalThis.backendaiclient.resourcePreset.check(param);\n// }\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\ninterface ResourcePresetSelectProps extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [resourceSlots] = useResourceSlots();\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n  // const resourcePresetInfo = await globalThis.backendaiclient.resourcePreset.check(param);\n  return (\n    <Select\n      loading={isPendingUpdate}\n      // options={_.map(resource_presets, (preset) => {\n      //   return {\n      //     value: preset?.name,\n      //     label: preset?.name,\n      //   };\n      // })}\n      options={[\n        {\n          value: 'custom',\n          label: (\n            <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n              <EditOutlined /> Custom\n            </Flex>\n          ),\n          // label: (\n          //   <Flex direction=\"row\" gap=\"xs\">\n          //     <Typography.Text strong>Custom</Typography.Text>\n          //     <Typography.Text type=\"secondary\">\n          //       Customize allocation amount\n          //     </Typography.Text>\n          //   </Flex>\n          // ),\n        },\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset, index) => {\n            const slotsInfo: {\n              [key in string]: string;\n            } = JSON.parse(preset?.resource_slots);\n            return {\n              value: preset?.name,\n              label: (\n                <Flex direction=\"row\" justify=\"between\" gap={'xs'}>\n                  {preset?.name}\n                  <Flex\n                    direction=\"row\"\n                    gap={'xxs'}\n                    style={{\n                      color: 'black',\n                      opacity: index === 1 ? 0.5 : 1,\n                    }}\n                  >\n                    {_.map(\n                      _.omitBy(slotsInfo, (slot, key) =>\n                        // @ts-ignore\n                        _.isEmpty(resourceSlots[key]),\n                      ),\n                      (slot, key) => {\n                        return (\n                          <ResourceNumber\n                            key={key}\n                            // @ts-ignore\n                            type={key}\n                            value={slot}\n                            hideTooltip\n                          />\n                        );\n                      },\n                    )}\n                  </Flex>\n                </Flex>\n              ),\n              preset,\n              // disabled: index === 1,\n            };\n          }),\n        },\n      ]}\n      showSearch\n      {...selectProps}\n      onDropdownVisibleChange={(open) => {\n        if (open) {\n          console.log(open);\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport DynamicUnitInputNumberWithSlider from './DynamicUnitInputNumberWithSlider';\nimport Flex from './Flex';\nimport { ImageEnvironmentFormInput } from './ImageEnvironmentSelectFormItems';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { ACCELERATOR_UNIT_MAP } from './ResourceNumber';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport SliderInputItem from './SliderInputFormItem';\nimport {\n  Card,\n  Col,\n  Divider,\n  Form,\n  FormRule,\n  Radio,\n  Row,\n  Select,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport const RESOURCE_ALLOCATION_INITIAL_FORM_VALUES = {\n  resource: {\n    cpu: 0,\n    mem: '0g',\n    shmem: '0g',\n    accelerator: 0,\n  },\n  num_of_sessions: 1,\n  cluster_mode: 'single-node',\n  cluster_size: 1,\n};\n\nexport interface ResourceAllocationFormValue {\n  resource: {\n    cpu: number;\n    mem: string;\n    shmem: string;\n    accelerator: number;\n    acceleratorType: string;\n  };\n  resourceGroup: string;\n  num_of_sessions?: number;\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n}\n\ntype MergedResourceAllocationFormValue = ResourceAllocationFormValue &\n  ImageEnvironmentFormInput;\nconst limitParser = (limit: string | undefined) => {\n  if (limit === undefined) {\n    return undefined;\n  } else if (limit === 'Infinity') {\n    return undefined;\n  } else if (limit === 'NaN') {\n    return undefined;\n  } else {\n    return _.toNumber(limit);\n  }\n};\n\ninterface ResourceAllocationFormItemsProps {\n  enableNumOfSessions?: boolean;\n}\n\nconst ResourceAllocationFormItems: React.FC<\n  ResourceAllocationFormItemsProps\n> = ({ enableNumOfSessions }) => {\n  const form = Form.useFormInstance<MergedResourceAllocationFormValue>();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n\n  const currentProject = useCurrentProjectValue();\n\n  // Form watch\n  // const currentResourceGroup = Form.useWatch('resourceGroup', {\n  //   form,\n  //   preserve: true,\n  // });\n\n  // use `useState` instead of `Form.useWatch` for handling `resourcePreset.check` pending state\n  const [currentResourceGroup, setCurrentResourceGroup] = useState(\n    form.getFieldValue('resourceGroup'),\n  );\n  const [isPendingCheckResets, startCheckRestsTransition] = useTransition();\n  const currentImage = Form.useWatch(['environments', 'image'], {\n    form,\n    preserve: true,\n  });\n  const currentImageAcceleratorLimits = _.filter(\n    currentImage?.resource_limits,\n    (limit) =>\n      limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n  );\n\n  const { data: checkPresetInfo } = useTanQuery<ResourceAllocation>({\n    queryKey: ['check-resets', currentProject.name, currentResourceGroup],\n    queryFn: () => {\n      if (currentResourceGroup) {\n        return baiClient.resourcePreset.check({\n          group: currentProject.name,\n          scaling_group: currentResourceGroup,\n        });\n      } else {\n        return;\n      }\n    },\n    staleTime: 0,\n    suspense: !_.isEmpty(currentResourceGroup), //prevent flicking\n  });\n\n  // interface ResourceLimit {\n  //   min: number | string;\n  //   max: number | string;\n  //   remaining?: number | string;\n  // }\n\n  // interface AcceleratorLimit {\n  //   min: number;\n  //   max: number;\n  //   remaining: number;\n  // }\n\n  // type ResourceSlots = {\n  //   cpu?: ResourceLimit;\n  //   mem?: ResourceLimit;\n  //   shmem?: {\n  //     min: string | undefined;\n  //   };\n  // } & {\n  //   [key in string]?: AcceleratorLimit | undefined;\n  // };\n\n  const sliderMinMax: any = {\n    ...(resourceSlots?.cpu\n      ? {\n          cpu: {\n            min: _.max([\n              _.toNumber(\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'cpu')\n                  ?.min || '0',\n              ),\n            ]),\n            max: _.min([\n              baiClient._config.maxCPUCoresPerContainer,\n              limitParser(checkPresetInfo?.keypair_limits.cpu),\n              limitParser(checkPresetInfo?.group_limits.cpu),\n              // scaling group all cpu (using + remaining), string type\n              !_.isEmpty(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.using\n                  ?.cpu,\n              ) &&\n              !_.isEmpty(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n                  ?.cpu,\n              )\n                ? _.toNumber(\n                    checkPresetInfo?.scaling_groups[currentResourceGroup]?.using\n                      .cpu,\n                  ) +\n                  _.toNumber(\n                    checkPresetInfo?.scaling_groups[currentResourceGroup]\n                      ?.remaining.cpu,\n                  )\n                : undefined,\n            ]),\n            remaining:\n              _.min([\n                checkPresetInfo?.keypair_remaining.cpu,\n                checkPresetInfo?.group_remaining.cpu,\n                checkPresetInfo?.scaling_group_remaining.cpu,\n              ]) ?? Number.MAX_SAFE_INTEGER,\n          },\n        }\n      : {}),\n    ...(resourceSlots?.mem\n      ? {\n          mem: {\n            min:\n              _.max([\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'mem')\n                  ?.min,\n              ]) || '0g',\n            max:\n              _.min([\n                baiClient._config.maxMemoryPerContainer,\n                limitParser(checkPresetInfo?.keypair_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.keypair_limits.mem) + '',\n                    'g',\n                  )?.number,\n                limitParser(checkPresetInfo?.group_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.group_limits.mem) + '',\n                    'g',\n                  )?.number,\n                // scaling group all mem (using + remaining), string type\n                !_.isEmpty(\n                  checkPresetInfo?.scaling_groups[currentResourceGroup]?.using\n                    ?.mem,\n                ) &&\n                !_.isEmpty(\n                  checkPresetInfo?.scaling_groups[currentResourceGroup]?.using\n                    ?.mem,\n                )\n                  ? iSizeToSize(\n                      _.toNumber(\n                        checkPresetInfo?.scaling_groups[currentResourceGroup]\n                          ?.using.mem,\n                      ) +\n                        _.toNumber(\n                          checkPresetInfo?.scaling_groups[currentResourceGroup]\n                            ?.remaining.mem,\n                        ) +\n                        'b',\n                      'g',\n                      2,\n                    )?.numberFixed\n                  : undefined,\n              ]) + 'g',\n            remaining:\n              _.min([\n                checkPresetInfo?.keypair_remaining.mem,\n                checkPresetInfo?.group_remaining.mem,\n                checkPresetInfo?.scaling_group_remaining.mem,\n              ]) ?? Number.MAX_SAFE_INTEGER,\n          },\n          shmem: {\n            min:\n              _.max([\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'shmem')\n                  ?.min,\n              ]) || '64m',\n            // shmem max is mem max\n          },\n        }\n      : {}),\n    ..._.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        const configName =\n          {\n            'cuda.device': 'maxCUDADevicesPerContainer',\n            'cuda.shares': 'maxCUDASharesPerContainer',\n            'rocm.device': 'maxROCMDevicesPerContainer',\n            'tpu.device': 'maxTPUDevicesPerContainer',\n            'ipu.device': 'maxIPUDevicesPerContainer',\n            'atom.device': 'maxATOMDevicesPerContainer',\n            'warboy.device': 'maxWarboyDevicesPerContainer',\n          }[key] || 'cuda.device'; // FIXME: temporally `cuda.device` config, when undefined\n        result[key] = {\n          min:\n            parseInt(\n              _.filter(\n                currentImageAcceleratorLimits,\n                (supportedAcceleratorInfo) => {\n                  return supportedAcceleratorInfo?.key === key;\n                },\n              )[0]?.min as string,\n            ) || 0,\n          //\n          max: _.min([\n            baiClient._config[configName] || 8,\n            // scaling group all cpu (using + remaining), string type\n            !_.isEmpty(\n              // @ts-ignore\n              checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.[\n                key\n              ],\n            ) &&\n            !_.isEmpty(\n              // @ts-ignore\n              checkPresetInfo?.scaling_groups[currentResourceGroup]\n                ?.remaining?.[key],\n            )\n              ? _.toNumber(\n                  // @ts-ignore\n                  checkPresetInfo?.scaling_groups[currentResourceGroup]?.using[\n                    key\n                  ],\n                ) +\n                _.toNumber(\n                  // @ts-ignore\n                  checkPresetInfo?.scaling_groups[currentResourceGroup]\n                    ?.remaining[key],\n                )\n              : undefined,\n          ]),\n          remaining:\n            _.min([\n              // @ts-ignore\n              _.toNumber(checkPresetInfo?.keypair_remaining[key]),\n              // @ts-ignore\n              _.toNumber(checkPresetInfo?.group_remaining[key]),\n              // @ts-ignore\n              _.toNumber(checkPresetInfo?.scaling_group_remaining[key]),\n            ]) ?? Number.MAX_SAFE_INTEGER,\n        };\n        return result;\n      },\n      {} as {\n        [key: string]: {\n          min: number;\n          max: number;\n          remaining: number;\n        };\n      },\n    ),\n\n    session: {\n      min: 1,\n      // TODO: calculate max session count using remaining numbers\n      max: _.min([\n        // remaining_slot['concurrency'],\n        3, //BackendAiResourceBroker.DEFAULT_CONCURRENT_SESSION_COUNT\n      ]),\n    },\n    // ...(acceleratorSlots)\n    // ..._.map(['cuda.device'], (key) => {\n    //   return {\n    //     [key]: {\n    //       min: _.max([\n    //         _.find(form.getFieldValue('image')?.resource_limits, key)?.min,\n    //       ]),\n    //       max: _.min([\n    //         baiClient._config.max,\n    //         _.toNumber(\n    //           _.find(\n    //             currentImage?.resource_limits,\n    //             (i) => i?.key === 'cuda.device',\n    //           )?.max || '0',\n    //         ),\n    //       ]),\n    //     },\n    //   };\n    // }),\n  };\n\n  useEffect(() => {\n    // when image changed, set value of resources to min value\n\n    // const miniumShmem = '64m';\n    form.setFieldsValue({\n      resource: {\n        cpu: sliderMinMax.cpu?.min,\n        mem:\n          iSizeToSize(\n            (iSizeToSize(sliderMinMax.shmem?.min, 'm')?.number || 0) +\n              (iSizeToSize(sliderMinMax.mem?.min, 'm')?.number || 0) +\n              'm',\n            'g',\n          )?.number + 'g', //to prevent loosing precision\n        shmem: sliderMinMax.shmem?.min,\n        // shmem: sliderMinMax.shmem?.min,\n      },\n    });\n\n    if (currentImageAcceleratorLimits.length > 0) {\n      if (\n        _.find(\n          currentImageAcceleratorLimits,\n          (limit) =>\n            limit?.key === form.getFieldValue(['resource', 'acceleratorType']),\n        )\n      ) {\n        // if current selected accelerator type is supported in the selected image,\n        form.setFieldValue(\n          ['resource', 'accelerator'],\n          sliderMinMax[form.getFieldValue(['resource', 'acceleratorType'])].min,\n        );\n      } else {\n        // if current selected accelerator type is not supported in the selected image,\n        // change accelerator type to the first supported accelerator type.\n        const nextImageSelectorType: string | undefined | null = // NOTE:\n          // filter from resourceSlots since resourceSlots and supported image could be non-identical.\n          // resourceSlots returns \"all resources enable to allocate(including AI accelerator)\"\n          // imageAcceleratorLimit returns \"all resources that is supported in the selected image\"\n          _.filter(currentImageAcceleratorLimits, (acceleratorInfo: any) =>\n            _.keys(resourceSlots).includes(acceleratorInfo?.key),\n          )[0]?.key;\n\n        if (nextImageSelectorType) {\n          form.setFieldValue(\n            ['resource', 'accelerator'],\n            sliderMinMax[nextImageSelectorType].min,\n          );\n          form.setFieldValue(\n            ['resource', 'acceleratorType'],\n            nextImageSelectorType,\n          );\n        }\n      }\n    }\n\n    form.validateFields().catch(() => {});\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentImage]);\n\n  const remainingValidationRules: {\n    [key: string]: FormRule;\n  } = {\n    cpu: {\n      warningOnly: true,\n      validator: async (rule, value: string) => {\n        if (sliderMinMax.cpu && value > sliderMinMax.cpu.remaining) {\n          return Promise.reject(\n            t('session.launcher.EnqueueComputeSessionWarning'),\n          );\n        } else {\n          return Promise.resolve();\n        }\n      },\n    },\n    mem: {\n      warningOnly: true,\n      validator: async (rule, value: string) => {\n        if (\n          !_.isElement(value) &&\n          sliderMinMax.mem &&\n          compareNumberWithUnits(value, sliderMinMax.mem.remaining + 'b') > 0\n        ) {\n          return Promise.reject(\n            t('session.launcher.EnqueueComputeSessionWarning'),\n          );\n        } else {\n          return Promise.resolve();\n        }\n      },\n    },\n    ..._.reduce(\n      acceleratorSlots,\n      (result, slot, slotKey) => {\n        return {\n          ...result,\n          [slotKey]: {\n            warningOnly: true,\n            validator: async (rule: any, value: string) => {\n              if (\n                sliderMinMax[slotKey] &&\n                value > sliderMinMax[slotKey].remaining\n              ) {\n                return Promise.reject(\n                  t('session.launcher.EnqueueComputeSessionWarning'),\n                );\n              } else {\n                return Promise.resolve();\n              }\n            },\n          },\n        };\n      },\n      {},\n    ),\n  };\n  return (\n    <>\n      <Form.Item\n        name=\"resourceGroup\"\n        label={t('session.ResourceGroup')}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <ResourceGroupSelect\n          autoSelectDefault\n          loading={isPendingCheckResets}\n          onChange={(v) => {\n            startCheckRestsTransition(() => {\n              setCurrentResourceGroup(v);\n            });\n          }}\n        />\n      </Form.Item>\n      <Form.Item\n        label={t('resourcePreset.ResourcePresets')}\n        name=\"allocationPreset\"\n        required\n        style={{ marginBottom: token.marginXS }}\n      >\n        <ResourcePresetSelect\n          onChange={(value, options) => {\n            const slots = _.pick(\n              JSON.parse(options?.preset?.resource_slots || '{}'),\n              _.keys(resourceSlots),\n            );\n            form.setFieldsValue({\n              resource: {\n                ...slots,\n                // transform to GB based on preset values\n                mem: iSizeToSize((slots?.mem || 0) + 'b', 'g', 2)?.numberUnit,\n                shmem: iSizeToSize(\n                  (options?.preset?.shared_memory || 0) + 'b',\n                  'g',\n                  2,\n                )?.numberUnit,\n              },\n            });\n          }}\n        />\n      </Form.Item>\n      <Card\n        style={{\n          marginBottom: token.margin,\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlots?.cpu && (\n                  <SliderInputItem\n                    name={['resource', 'cpu']}\n                    // initialValue={0}\n                    label={t('session.launcher.CPU')}\n                    tooltip={<Trans i18nKey={'session.launcher.DescCPU'} />}\n                    // min={parseInt(\n                    //   _.find(\n                    //     currentImage?.resource_limits,\n                    //     (i) => i?.key === 'cpu',\n                    //   )?.min || '0',\n                    // )}\n                    // max={parseInt(\n                    //   _.find(\n                    //     currentImage?.resource_limits,\n                    //     (i) => i?.key === 'cpu',\n                    //   )?.max || '100',\n                    // )}\n                    inputNumberProps={{\n                      addonAfter: t('session.launcher.Core'),\n                    }}\n                    sliderProps={{\n                      marks: {\n                        0: {\n                          style: {\n                            color: token.colorTextSecondary,\n                          },\n                          label: 0,\n                        },\n                        ...(sliderMinMax.cpu?.max\n                          ? {\n                              [sliderMinMax.cpu?.max]: {\n                                style: {\n                                  color: token.colorTextSecondary,\n                                },\n                                label: sliderMinMax.cpu?.max,\n                              },\n                            }\n                          : {}),\n                      },\n                    }}\n                    min={0}\n                    max={sliderMinMax.cpu?.max}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        type: 'number',\n                        min: sliderMinMax.cpu?.min,\n                        // TODO: set message\n                      },\n                      remainingValidationRules.cpu,\n                    ]}\n                  />\n                )}\n                {resourceSlots?.mem && (\n                  <Form.Item\n                    name={['resource', 'mem']}\n                    label={t('session.launcher.Memory')}\n                    tooltip={<Trans i18nKey={'session.launcher.DescMemory'} />}\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        validator: async (rule, value: string) => {\n                          if (\n                            compareNumberWithUnits(\n                              value || '0b',\n                              sliderMinMax.mem?.min,\n                            ) < 0\n                          ) {\n                            return Promise.reject(\n                              t('session.launcher.MinMemory', {\n                                size: _.toUpper(sliderMinMax.mem?.min),\n                              }),\n                            );\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                      remainingValidationRules.mem,\n                      // {\n                      //   warningOnly: true,\n                      //   validator: async (rule, value: string) => {\n                      //     if (\n                      //       compareNumberWithUnits(\n                      //         value || '0b',\n                      //         checkPresetInfo?.keypair_remaining.mem + 'b',\n                      //       ) > 0\n                      //     ) {\n                      //       return Promise.reject(\n                      //         t(\n                      //           'session.launcher.EnqueueComputeSessionWarning',\n                      //         ),\n                      //       );\n                      //     }\n                      //     return Promise.resolve();\n                      //   },\n                      // },\n                    ]}\n                  >\n                    <DynamicUnitInputNumberWithSlider\n                      max={sliderMinMax.mem?.max}\n                      // min=\"256m\"\n                      min={'0g'}\n                      // warn={\n                      //   checkPresetInfo?.scaling_group_remaining.mem ===\n                      //   undefined\n                      //     ? undefined\n                      //     : checkPresetInfo?.scaling_group_remaining.mem + 'g'\n                      // }\n                      extraMarks={\n                        checkPresetInfo?.scaling_group_remaining.mem\n                          ? {\n                              // @ts-ignore\n                              [iSizeToSize(\n                                checkPresetInfo?.scaling_group_remaining.mem,\n                                'g',\n                                3,\n                              ).numberFixed]: {\n                                label: '-',\n                              },\n                            }\n                          : undefined\n                      }\n                    />\n                  </Form.Item>\n                )}\n                {resourceSlots?.mem && (\n                  <Form.Item\n                    name={['resource', 'shmem']}\n                    // initialValue={'0g'}\n                    label={t('session.launcher.SharedMemory')}\n                    tooltip={\n                      <Trans i18nKey={'session.launcher.DescSharedMemory'} />\n                    }\n                    dependencies={[['resource', 'mem']]}\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {},\n                      {\n                        validator: async (rule, value: string) => {\n                          if (\n                            _.isEmpty(getFieldValue('resource')?.mem) ||\n                            _.isEmpty(value) ||\n                            compareNumberWithUnits(\n                              getFieldValue('resource')?.mem,\n                              value,\n                            ) >= 0\n                          ) {\n                            return Promise.resolve();\n                          } else {\n                            throw t(\n                              'resourcePreset.SHMEMShouldBeSmallerThanMemory',\n                            );\n                          }\n                        },\n                      },\n                    ]}\n                  >\n                    <DynamicUnitInputNumberWithSlider\n                      // shmem max is mem max\n                      min=\"0g\"\n                      max={sliderMinMax.mem?.max}\n                    />\n                  </Form.Item>\n                )}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) => {\n                    return (\n                      prev.resource?.acceleratorType !==\n                      next.resource?.acceleratorType\n                    );\n                  }}\n                >\n                  {({ getFieldValue }) => {\n                    const currentAcceleratorType = getFieldValue([\n                      'resource',\n                      'acceleratorType',\n                    ]);\n                    return (\n                      <SliderInputItem\n                        name={['resource', 'accelerator']}\n                        // initialValue={0}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        // tooltip={\n                        //   <Trans i18nKey={'session.launcher.DescSharedMemory'} />\n                        // }\n                        sliderProps={{\n                          marks: {\n                            0: 0,\n                          },\n                        }}\n                        min={0}\n                        max={sliderMinMax[currentAcceleratorType]?.max}\n                        step={\n                          _.endsWith(currentAcceleratorType, 'shares') ? 0.1 : 1\n                        }\n                        inputNumberProps={{\n                          addonAfter: (\n                            <Form.Item\n                              noStyle\n                              name={['resource', 'acceleratorType']}\n                              initialValue={_.keys(acceleratorSlots)[0]}\n                            >\n                              <Select\n                                suffixIcon={\n                                  _.size(acceleratorSlots) > 1\n                                    ? undefined\n                                    : null\n                                }\n                                // open={\n                                //   _.size(acceleratorSlots) > 1\n                                //     ? undefined\n                                //     : false\n                                // }\n                                popupMatchSelectWidth={false}\n                                options={_.map(\n                                  acceleratorSlots,\n                                  (value, name) => {\n                                    return {\n                                      value: name,\n                                      label:\n                                        ACCELERATOR_UNIT_MAP[name] || 'UNIT',\n                                      disabled:\n                                        currentImageAcceleratorLimits.length >\n                                          0 &&\n                                        !_.find(\n                                          currentImageAcceleratorLimits,\n                                          (limit) => limit?.key === name,\n                                        ),\n                                    };\n                                  },\n                                )}\n                              />\n                            </Form.Item>\n                          ),\n                        }}\n                        required\n                        rules={[\n                          {\n                            required: true,\n                          },\n                          {\n                            type: 'number',\n                            min: sliderMinMax[currentAcceleratorType]?.min || 0,\n                          },\n                          remainingValidationRules[currentAcceleratorType],\n                        ]}\n                      />\n                    );\n                  }}\n                </Form.Item>\n                {/* TODO:  */}\n                {enableNumOfSessions ? (\n                  <>\n                    <Divider> x </Divider>\n                    <SliderInputItem\n                      name={['num_of_sessions']}\n                      // initialValue={0}\n                      label={t('webui.menu.Sessions')}\n                      tooltip={\n                        <Trans i18nKey={'session.launcher.DescSession'} />\n                      }\n                      // min={parseInt(\n                      //   _.find(\n                      //     currentImage?.resource_limits,\n                      //     (i) => i?.key === 'cpu',\n                      //   )?.min || '0',\n                      // )}\n                      // max={parseInt(\n                      //   _.find(\n                      //     currentImage?.resource_limits,\n                      //     (i) => i?.key === 'cpu',\n                      //   )?.max || '100',\n                      // )}\n                      inputNumberProps={{\n                        addonAfter: '#',\n                      }}\n                      sliderProps={\n                        {\n                          // marks: {\n                          //   0: {\n                          //     style: {\n                          //       color: token.colorTextSecondary,\n                          //     },\n                          //     label: 0,\n                          //   },\n                          //   ...(sliderMinMax.cpu?.max\n                          //     ? {\n                          //         [sliderMinMax.cpu?.max]: {\n                          //           style: {\n                          //             color: token.colorTextSecondary,\n                          //           },\n                          //           label: sliderMinMax.cpu?.max,\n                          //         },\n                          //       }\n                          //     : {}),\n                          // },\n                        }\n                      }\n                      min={sliderMinMax.session?.min}\n                      max={sliderMinMax.session?.max}\n                      required\n                      rules={[\n                        {\n                          required: true,\n                        },\n                        // {\n                        //   type: 'number',\n                        //   min: sliderMinMax.cpu?.min,\n                        //   // TODO: set message\n                        // },\n                        // remainingValidationRules.cpu,\n                      ]}\n                    />\n                  </>\n                ) : null}\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n      {/* TODO: Support cluster mode */}\n      {/* {baiClient.supports('multi-container') && ( */}\n      {false && (\n        <Form.Item\n          label={t('session.launcher.ClusterMode')}\n          tooltip={\n            <Flex direction=\"column\" align=\"start\">\n              {t('session.launcher.SingleNode')}\n              <Trans i18nKey={'session.launcher.DescSingleNode'} />\n              <Divider style={{ backgroundColor: token.colorBorder }} />\n              {t('session.launcher.MultiNode')}\n              <Trans i18nKey={'session.launcher.DescMultiNode'} />\n            </Flex>\n          }\n          required\n        >\n          <Card\n            style={{\n              marginBottom: token.margin,\n            }}\n          >\n            <Row gutter={token.marginMD}>\n              <Col xs={24}>\n                {/* <Col xs={24} lg={12}> */}\n                <Form.Item name={'cluster_mode'} required>\n                  <Radio.Group\n                    onChange={(e) => {\n                      e.target.value === 'single-node' &&\n                        form.setFieldValue('cluster_size', 1);\n                    }}\n                  >\n                    <Radio.Button value=\"single-node\">\n                      {t('session.launcher.SingleNode')}\n                    </Radio.Button>\n                    <Radio.Button value=\"multi-node\">\n                      {t('session.launcher.MultiNode')}\n                    </Radio.Button>\n                  </Radio.Group>\n                </Form.Item>\n              </Col>\n              <Col xs={24}>\n                {/* <Col xs={24} lg={12}> */}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) =>\n                    prev.cluster_mode !== next.cluster_mode\n                  }\n                >\n                  {() => (\n                    <SliderInputItem\n                      disabled={\n                        form.getFieldValue('cluster_mode') === 'single-node'\n                      }\n                      name={'cluster_size'}\n                      label={t('session.launcher.ClusterSize')}\n                      required\n                      inputNumberProps={{\n                        addonAfter: '#',\n                      }}\n                      min={1}\n                      // TODO: max cluster size\n                      max={_.min([sliderMinMax.cpu?.max])}\n                    />\n                  )}\n                </Form.Item>\n              </Col>\n            </Row>\n          </Card>\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\ntype ResourceLimits = {\n  cpu: string | 'Infinity' | 'NaN';\n  mem: string | 'Infinity' | 'NaN';\n  'cuda.device': string | 'Infinity' | 'NaN';\n};\ntype ResourceUsing = ResourceLimits;\ntype ResourceRemaining = ResourceLimits;\n\ntype ResourceSlots = {\n  cpu: string;\n  mem: string;\n  'cuda.device': string;\n  [key: string]: string;\n};\n\ntype Preset = {\n  name: string;\n  resource_slots: ResourceSlots;\n  shared_memory: string | null;\n  allocatable: boolean;\n};\n\ntype ScalingGroup = {\n  using: ResourceUsing;\n  remaining: ResourceRemaining;\n};\n\ntype ResourceAllocation = {\n  keypair_limits: ResourceLimits;\n  keypair_using: ResourceUsing;\n  keypair_remaining: ResourceRemaining;\n  scaling_group_remaining: ResourceRemaining;\n  scaling_groups: {\n    [key: string]: ScalingGroup;\n  };\n  presets: Preset[];\n  group_limits: ResourceLimits;\n  group_using: ResourceUsing;\n  group_remaining: ResourceRemaining;\n};\n\nconst MemoizedResourceAllocationFormItems = React.memo(\n  ResourceAllocationFormItems,\n);\n\nexport default MemoizedResourceAllocationFormItems;\n","import { Form, FormItemProps, Input } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  name: string;\n}\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"name\"\n      rules={[\n        {\n          max: 64,\n          message: t('session.Validation.SessionNameTooLong64'),\n        },\n        {\n          pattern: /^(?:[a-zA-Z0-9][a-zA-Z0-9._-]{2,}[a-zA-Z0-9])?$/,\n          message: t(\n            'session.Validation.PleaseFollowSessionNameRule',\n          ).toString(),\n        },\n      ]}\n      {...formItemProps}\n    >\n      <Input allowClear />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useCurrentProjectValue, useUpdatableState } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport { useShadowRoot } from './DefaultProviders';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { VFolder } from './VFolderSelect';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  Button,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string | number;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\ninterface Props extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n}\n\nconst VFolderTable: React.FC<Props> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = '/home/work/',\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  ...tableProps\n}) => {\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableValue<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableValue<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey],\n    queryFn: () => {\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?group_id=${currentProject.id}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 0,\n  });\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.filter(allFolderList, (vf) => {\n    // keep selected folders\n    if (selectedRowKeys.includes(getRowKey(vf))) {\n      return true;\n    }\n    // filter by search key\n    return (\n      (!filter || filter(vf)) && (!searchKey || vf.name.includes(searchKey))\n    );\n  });\n  // const { token } = theme.useToken();\n  // const searchInput = useRef<InputRef>(null);\n\n  // TODO: set defaults\n  // useUpdateEffect(() => {\n  //   setSelectedRowKeys(defaultSelectedKeys || []);\n  // }, [defaultSelectedKeys]);\n\n  const handleAliasUpdate = (e?: any) => {\n    e?.preventDefault();\n    internalForm\n      .validateFields()\n      .then((values) => {})\n      .catch(() => {})\n      .finally(() => {\n        setAliasMap(\n          _.mapValues(\n            _.pickBy(internalForm.getFieldsValue(), (v) => !!v), //remove empty\n            (v, k) => mapAliasToPath(k, v), // add alias base path\n          ),\n        );\n      });\n  };\n\n  const hasPermission = (vFolder: VFolder, perm: string) => {\n    if (vFolder.permission.includes(perm)) {\n      return true;\n    }\n    if (vFolder.permission.includes('w') && perm === 'r') {\n      return true;\n    }\n    return false;\n  };\n\n  const mapAliasToPath = (name: VFolderKey, input?: string) => {\n    if (_.isEmpty(input)) {\n      return `${aliasBasePath}${name}`;\n    } else if (input?.startsWith('/')) {\n      return input;\n    } else {\n      return `${aliasBasePath}${input}`;\n    }\n  };\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  style={{\n                    zIndex: 10000,\n                  }}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : undefined\n            }\n          >\n            <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || mapAliasToPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: /^[a-zA-Z0-9_/-]*$/,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    mapAliasToPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={mapAliasToPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        // onPressEnter={handleAliasUpdate}\n                        // onBlur={handleAliasUpdate}\n                        onChange={handleAliasUpdate}\n                        allowClear\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      fixed: 'left',\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        const tagValues: DoubleTagObjectValue[] = _.chain({\n          r: 'green',\n          w: 'blue',\n          d: 'red',\n        })\n          .map((color, perm) => {\n            if (hasPermission(row, perm)) {\n              return {\n                label: perm.toUpperCase(),\n                color,\n              };\n            }\n            return undefined;\n          })\n          .compact()\n          .value();\n\n        return <DoubleTag values={tagValues} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Button\n          loading={isPendingRefetch}\n          icon={<ReloadOutlined />}\n          onClick={() => {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Form form={internalForm}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import VFolderTable, { AliasMap } from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFromItemProps extends Omit<FormItemProps, 'name'> {}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n}\n\nconst VFolderTableFromItem: React.FC<VFolderTableFromItemProps> = ({\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  Form.useWatch('vfoldersAliasMap', form);\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey=\"name\"\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFromItem;\n","import BAICard from '../BAICard';\nimport DatePickerISO from '../components/DatePickerISO';\nimport { useWebComponentInfo } from '../components/DefaultProviders';\nimport EnvVarFormList, {\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  PortTag,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport VFolderTableFromItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from '../hooks';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  BlockOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n  SaveOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn } from 'ahooks';\nimport {\n  Affix,\n  Alert,\n  Breadcrumb,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Descriptions,\n  Form,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Table,\n  Tag,\n  Typography,\n  message,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\nconst INITIAL_FORM_VALUES: SessionLauncherValue = {\n  sessionType: 'interactive',\n  allocationPreset: 'custom',\n  hpcOptimization: {\n    autoEnabled: true,\n    OMP_NUM_THREADS: '1',\n    OPENBLAS_NUM_THREADS: '1',\n  },\n  batch: {\n    enabled: false,\n    command: undefined,\n    scheduleDate: undefined,\n  },\n  envvars: [],\n  ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n};\nconst stepParam = withDefault(NumberParam, 0);\nconst formValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n}\n\ntype SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\nconst SessionLauncherPage = () => {\n  let sessionMode: SessionMode = 'normal';\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const [\n    { step: currentStep, formValues: formValuesFromQueryParams, redirectTo },\n    setQuery,\n  ] = useQueryParams({\n    step: stepParam,\n    formValues: formValuesParam,\n    redirectTo: StringParam,\n  });\n\n  const navigate = useNavigate();\n  const { moveTo } = useWebComponentInfo();\n  const baiClient = useSuspendedBackendaiClient();\n  const currentProject = useCurrentProjectValue();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.omit(form.getFieldsValue(), ['environments.image']),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  // After first render, set fields value using query params if it is NOT same as initial values\n  useEffect(() => {\n    if (\n      // if form is changed, validate it to show error on the first render\n      JSON.stringify(INITIAL_FORM_VALUES) !==\n      JSON.stringify(formValuesFromQueryParams)\n    ) {\n      form.setFieldsValue(formValuesFromQueryParams);\n      form.validateFields().catch((e) => {});\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // TODO: scroll to top\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: (\n          <PlayCircleFilled />\n          // <Flex\n          //   align=\"center\"\n          //   justify=\"center\"\n          //   style={{\n          //     // border: '1px solid gray',\n          //     backgroundColor: '#E8E7E7',\n          //     width: 24,\n          //     height: 24,\n          //     borderRadius: 12,\n          //     fontSize: 16,\n          //   }}\n          // >\n          //   <CaretRightOutlined />\n          // </Flex>\n        ),\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  // console.log(form.getFieldError(['resource', 'shmem']));\n  // console.log(form.getFieldValue(['resource']));\n\n  const moveToPreview = () => {\n    // TODO: if handling more async validations, required fetch, use `useTransition`\n    form\n      .validateFields()\n      .catch((e) => {})\n      .finally(() => {\n        setCurrentStep(steps.length - 1);\n      });\n  };\n\n  const startSession = () => {\n    // TODO: support inference mode\n    // TODO: support import mode\n    // TODO: session number\n\n    setIsStartingSession(true);\n    form\n      .validateFields()\n      .then(async (values) => {\n        const [kernelName, architecture] =\n          values.environments.version.split('@');\n        const sessionInfo: CreateSessionInfo = {\n          // TODO: allow_manual_image_name_for_session\n          kernelName,\n          architecture,\n          sessionName: _.isEmpty(values.name)\n            ? generateSessionId()\n            : values.name,\n          config: {\n            type: values.sessionType,\n\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            group_name: currentProject.name,\n            domain: baiClient._config.domainName,\n            scaling_group: values.resourceGroup,\n            ///////////////////////////\n\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            // TODO: CHECK: Convert to rule??? Automatically increase shared memory to 1GiB\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: _.map(values.ports, (v) => parseInt(v)),\n          },\n        };\n\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                20000,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  message.warning(t('session.launcher.SessionAlreadyExists'));\n                  // this.notification.text = _text(\n                  //   'session.launcher.SessionAlreadyExists',\n                  // );\n                  // this.notification.show();\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                console.log(err);\n                throw err;\n                // console.log(err);\n                // if (err && err.message) {\n                //   if ('statusCode' in err && err.statusCode === 408) {\n                //     this.notification.text = _text(\n                //       'session.launcher.sessionStillPreparing',\n                //     );\n                //   } else {\n                //     if (err.description) {\n                //       this.notification.text = PainKiller.relieve(err.description);\n                //     } else {\n                //       this.notification.text = PainKiller.relieve(err.message);\n                //     }\n                //   }\n                //   this.notification.detail = err.message;\n                //   this.notification.show(true, err);\n                // } else if (err && err.title) {\n                //   this.notification.text = PainKiller.relieve(err.title);\n                //   this.notification.show(true, err);\n                // }\n              });\n          },\n        );\n        // console.log('##', values.mounts);\n        // console.log(sessionInfo);\n\n        await Promise.all(sessionPromises)\n          .then(([firstSession]) => {\n            // console.log('##sessionPromises', firstSession);\n            if (\n              values.num_of_sessions === 1 &&\n              values.sessionType !== 'batch'\n            ) {\n              const res = firstSession;\n              let appOptions: {\n                [key in string]: any;\n              };\n              if ('kernelId' in res) {\n                // API v4\n                appOptions = {\n                  'session-name': res.kernelId,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              } else {\n                // API >= v5\n                appOptions = {\n                  'session-uuid': res.sessionId,\n                  'session-name': res.sessionName,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              }\n              const service_info = res.servicePorts;\n              if (Array.isArray(service_info) === true) {\n                appOptions['app-services'] = service_info.map(\n                  (a: { name: string }) => a.name,\n                );\n              } else {\n                appOptions['app-services'] = [];\n              }\n              // TODO: support import and inference\n              // if (sessionMode === 'import') {\n              //   appOptions['runtime'] = 'jupyter';\n              //   appOptions['filename'] = this.importFilename;\n              // }\n              // if (sessionMode === 'inference') {\n              //   appOptions['runtime'] = appOptions['app-services'].find(\n              //     (element: any) => !['ttyd', 'sshd'].includes(element),\n              //   );\n              // }\n\n              // only launch app when it has valid service ports\n              if (service_info.length > 0) {\n                // @ts-ignore\n                globalThis.appLauncher.showLauncher(appOptions);\n              }\n            }\n            navigate('/job', {\n              // replace: true,\n            });\n            moveTo('/job');\n          })\n          .catch(() => {\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        padding: token.paddingSM,\n        width: '100%',\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n    >\n      <style>{customCSS}</style>\n      {redirectTo && (\n        <Breadcrumb\n          items={[\n            {\n              title: t('webui.menu.Sessions'),\n              onClick: (e) => {\n                e.preventDefault();\n                moveTo(redirectTo);\n              },\n              href: redirectTo,\n            },\n            {\n              title: t('session.launcher.StartNewSession'),\n            },\n          ]}\n        />\n      )}\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={3} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Popconfirm\n                title={t('button.Reset')}\n                description={t('session.launcher.ResetFormConfirm')}\n                onConfirm={() => {\n                  form.resetFields();\n\n                  navigate('/session/start');\n                }}\n                icon={\n                  <QuestionCircleOutlined style={{ color: token.colorError }} />\n                }\n                okText={t('button.Reset')}\n                okButtonProps={{\n                  danger: true,\n                }}\n              >\n                <Button\n                  danger\n                  type=\"link\"\n                  style={{ paddingRight: 0, paddingLeft: 0 }}\n                >\n                  {t('button.Reset')}\n                </Button>\n              </Popconfirm>\n              <Button\n                type=\"link\"\n                icon={<BlockOutlined />}\n                disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n              >\n                {t('session.launcher.TemplateAndHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={INITIAL_FORM_VALUES}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      className=\"session-type-radio-group\"\n                      options={[\n                        {\n                          label: (\n                            <Flex\n                              direction=\"column\"\n                              align=\"start\"\n                              style={{ marginBottom: token.marginXS }}\n                            >\n                              <Typography.Text strong>\n                                🏃‍♀️ Make, test and run\n                              </Typography.Text>\n                              <Typography.Text type=\"secondary\">\n                                <Typography.Text code>\n                                  Interactive mode\n                                </Typography.Text>{' '}\n                                allows you to create, test and run code\n                                interactively via jupyter notebook, visual\n                                studio code, etc.\n                              </Typography.Text>\n                            </Flex>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <Flex direction=\"column\" align=\"start\">\n                              <Typography.Text strong>\n                                ⌚️ Start an long-running task\n                              </Typography.Text>\n                              <Typography.Text type=\"secondary\">\n                                <Typography.Text code>\n                                  Batch mode\n                                </Typography.Text>{' '}\n                                runs your code with multiple node & clusters to\n                                scale your idea\n                              </Typography.Text>\n                            </Flex>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item label={t('session.launcher.SessionStartTime')}>\n                      <Flex direction=\"row\" gap={'xs'}>\n                        <Form.Item\n                          noStyle\n                          name={['batch', 'enabled']}\n                          valuePropName=\"checked\"\n                        >\n                          <Checkbox\n                            onChange={(e) => {\n                              if (\n                                e.target.checked &&\n                                _.isEmpty(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                )\n                              ) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  dayjs().add(2, 'minutes').toISOString(),\n                                );\n                              } else if (e.target.checked === false) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  undefined,\n                                );\n                              }\n                            }}\n                          >\n                            {t('session.launcher.Enable')}\n                          </Checkbox>\n                        </Form.Item>\n                        <Form.Item\n                          noStyle\n                          // dependencies={[['batch', 'enabled']]}\n                          shouldUpdate={(prev, next) => {\n                            return (\n                              // @ts-ignore\n                              prev.batch?.enabled !== next.batch?.enabled\n                            );\n                          }}\n                        >\n                          {() => {\n                            const disabled =\n                              form.getFieldValue('batch')?.enabled !== true;\n                            return (\n                              <>\n                                <Form.Item\n                                  name={['batch', 'scheduleDate']}\n                                  noStyle\n                                  rules={[\n                                    {\n                                      // required: true,\n                                      validator: async (rule, value) => {\n                                        if (\n                                          value &&\n                                          dayjs(value).isBefore(dayjs())\n                                        ) {\n                                          return Promise.reject(\n                                            t(\n                                              'session.launcher.StartTimeMustBeInTheFuture',\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <DatePickerISO\n                                    disabled={disabled}\n                                    showTime\n                                    localFormat\n                                    disabledDate={(value) => {\n                                      return value.isBefore(\n                                        dayjs().startOf('day'),\n                                      );\n                                    }}\n                                  />\n                                </Form.Item>\n                                {/* <Form.Item\n                                      noStyle\n                                      name={['batch', 'scheduleTime']}\n                                    >\n                                      <TimePicker disabled={disabled} />\n                                    </Form.Item> */}\n                              </>\n                            );\n                          }}\n                        </Form.Item>\n                      </Flex>\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label=\"Environment Variables\">\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems enableNumOfSessions />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFromItem />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('name').length > 0 ||\n                        form.getFieldError(['batch', 'command']).length > 0 ||\n                        form.getFieldError(['batch', 'scheduleDate']).length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.SessionType')}\n                          span={24}\n                        >\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        {!_.isEmpty(form.getFieldValue('name')) && (\n                          <Descriptions.Item\n                            label={t('session.launcher.SessionName')}\n                            span={24}\n                          >\n                            {form.getFieldValue('name')}\n                          </Descriptions.Item>\n                        )}\n                        {sessionType === 'batch' && (\n                          <>\n                            <Descriptions.Item\n                              label={t('session.launcher.StartUpCommand')}\n                              span={24}\n                            >\n                              <Input.TextArea\n                                readOnly\n                                autoSize\n                                value={form.getFieldValue(['batch', 'command'])}\n                              ></Input.TextArea>\n                            </Descriptions.Item>\n                            <Descriptions.Item\n                              label={t('session.launcher.ScheduleTimeSimple')}\n                              span={24}\n                            >\n                              {dayjs(\n                                form.getFieldValue(['batch', 'scheduleDate']),\n                              ).format('LLLT')}\n                            </Descriptions.Item>\n                          </>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(form.getFieldValue('envvars'), (v, idx) => {\n                          return (\n                            form.getFieldError(['envvars', idx, 'variable'])\n                              .length > 0 ||\n                            form.getFieldError(['envvars', idx, 'value'])\n                              .length > 0\n                          );\n                        })\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" column={2}>\n                        <Descriptions.Item\n                          label={t('session.launcher.Project')}\n                        >\n                          {currentProject.name}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.ResourceGroup')}>\n                          {form.getFieldValue('resourceGroup')}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.Image')} span={2}>\n                          <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }}>\n                            <ImageMetaIcon\n                              image={\n                                form.getFieldValue('environments')?.version\n                              }\n                            />\n                            {/* {form.getFieldValue('environments').image} */}\n                            <Typography.Text copyable code>\n                              {form.getFieldValue('environments')?.version}\n                            </Typography.Text>\n                          </Flex>\n                        </Descriptions.Item>\n                        {form.getFieldValue('envvars')?.length > 0 && (\n                          <Descriptions.Item\n                            label={t('session.launcher.EnvironmentVariable')}\n                          >\n                            {form.getFieldValue('envvars')?.length ? (\n                              <SyntaxHighlighter\n                                style={darcula}\n                                codeTagProps={{\n                                  style: {\n                                    // fontFamily: 'monospace',\n                                  },\n                                }}\n                                // showLineNumbers\n                                customStyle={{\n                                  margin: 0,\n                                  width: '100%',\n                                }}\n                              >\n                                {_.map(\n                                  form.getFieldValue('envvars'),\n                                  (v: { variable: string; value: string }) =>\n                                    `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                                ).join('\\n')}\n                              </SyntaxHighlighter>\n                            ) : (\n                              <Typography.Text type=\"secondary\">\n                                -\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.ResourceAllocation')}\n                      status={\n                        _.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldError(['resource', key]).length > 0\n                          );\n                        })\n                          ? 'error'\n                          : // : _.some(form.getFieldValue('resource'), (v, key) => {\n                            //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n                            //     // console.log(form.getFieldValue(['resource']));\n                            //     return (\n                            //       form.getFieldWarning(['resource', key]).length >\n                            //       0\n                            //     );\n                            //   })\n                            // ? 'warning'\n                            undefined\n                      }\n                      size=\"small\"\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Flex direction=\"column\" gap={'xs'} align=\"stretch\">\n                        {_.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldWarning(['resource', key]).length > 0\n                          );\n                        }) && (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t(\n                              'session.launcher.EnqueueComputeSessionWarning',\n                            )}\n                          />\n                        )}\n\n                        <Descriptions>\n                          <Descriptions.Item\n                            span={24}\n                            label={t('environment.ResourcePresets')}\n                          >\n                            <Flex\n                              direction=\"row\"\n                              align=\"start\"\n                              gap={'sm'}\n                              wrap=\"wrap\"\n                              style={{ flex: 1 }}\n                            >\n                              {form.getFieldValue('allocationPreset') ===\n                              'custom' ? (\n                                // t('session.launcher.CustomAllocation')\n                                ''\n                              ) : (\n                                <Tag>\n                                  {form.getFieldValue('allocationPreset')}\n                                </Tag>\n                              )}\n\n                              {_.map(\n                                _.omit(\n                                  form.getFieldValue('resource'),\n                                  'shmem',\n                                  'accelerator',\n                                  'acceleratorType',\n                                ),\n                                (value, type) => {\n                                  return (\n                                    <ResourceNumber\n                                      key={type}\n                                      // @ts-ignore\n                                      type={type}\n                                      value={\n                                        type === 'mem'\n                                          ? iSizeToSize(value, 'b')?.number + ''\n                                          : value\n                                      }\n                                      opts={{\n                                        shmem: form.getFieldValue('resource')\n                                          .shmem\n                                          ? iSizeToSize(\n                                              form.getFieldValue('resource')\n                                                .shmem,\n                                              'b',\n                                            )?.number\n                                          : undefined,\n                                      }}\n                                    />\n                                  );\n                                },\n                              )}\n                              {_.isNumber(\n                                form.getFieldValue(['resource', 'accelerator']),\n                              ) && (\n                                <ResourceNumber\n                                  // @ts-ignore\n                                  type={form.getFieldValue([\n                                    'resource',\n                                    'acceleratorType',\n                                  ])}\n                                  value={form.getFieldValue([\n                                    'resource',\n                                    'accelerator',\n                                  ])}\n                                />\n                              )}\n                              {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                            </Flex>\n                          </Descriptions.Item>\n                        </Descriptions>\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {form.getFieldValue('mounts')?.length > 0 ? (\n                        <Table\n                          rowKey=\"name\"\n                          size=\"small\"\n                          pagination={false}\n                          columns={[\n                            {\n                              dataIndex: 'name',\n                              title: t('data.folders.Name'),\n                            },\n                            {\n                              dataIndex: 'alias',\n                              title: t('session.launcher.FolderAlias'),\n                              render: (value, record) => {\n                                return _.isEmpty(value) ? (\n                                  <Typography.Text\n                                    type=\"secondary\"\n                                    style={{\n                                      opacity: 0.7,\n                                    }}\n                                  >\n                                    {`/home/work/${record.name}`}\n                                  </Typography.Text>\n                                ) : (\n                                  value\n                                );\n                              },\n                            },\n                          ]}\n                          dataSource={_.map(\n                            form.getFieldValue('mounts'),\n                            (v) => {\n                              return {\n                                name: v,\n                                alias:\n                                  form.getFieldValue('vfoldersAliasMap')?.[v],\n                              };\n                            },\n                          )}\n                        ></Table>\n                      ) : (\n                        <Alert\n                          type=\"warning\"\n                          showIcon\n                          message={t('session.launcher.NoFolderMounted')}\n                        />\n                      )}\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n\n                            {!_.isArray(form.getFieldValue('ports')) ||\n                            form.getFieldValue('ports')?.length === 0 ? (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            ) : null}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    {/* <Popconfirm\n                    title={t('session.CheckAgainDialog')}\n                    placement=\"topLeft\"\n                    okButtonProps={{\n                      danger: true,\n                    }}\n                    okText={t('button.Reset')}\n                    onConfirm={() => {\n                      // @ts-ignore\n                      form.resetFields({\n\n                      });\n                    }}\n                  >\n                    <Button ghost danger>\n                      {t('button.Reset')}\n                    </Button>\n                  </Popconfirm> */}\n                    {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )}\n                  </Flex>\n                  <Flex direction=\"row\" gap=\"sm\">\n                    {currentStep !== steps.length - 1 && (\n                      <Button onClick={moveToPreview}>Skip to Review</Button>\n                    )}\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        Previous\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Button\n                        type=\"primary\"\n                        icon={<PlayCircleOutlined />}\n                        disabled={hasError}\n                        onClick={startSession}\n                        loading={isStartingSession}\n                      >\n                        {t('session.launcher.Launch')}\n                      </Button>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        Next <RightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.md && (\n          <Affix\n            offsetTop={150}\n            // direction=\"column\"\n            style={{ zIndex: 2 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                // handle \"skip to review\" step specifically, because validation\n                if (nextCurrent === steps.length - 1) {\n                  moveToPreview();\n                } else {\n                  setCurrentStep(nextCurrent);\n                }\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Affix>\n        )}\n      </Flex>\n      {/* <FolderExplorer\n        folderName={selectedFolderName}\n        open={!!selectedFolderName}\n        onRequestClose={() => {\n          setSelectedFolderName(undefined);\n        }}\n      /> */}\n    </Flex>\n  );\n};\n\n// const SessionTypeItem: React.FC<{\n//   title: string;\n//   description?: string;\n// }> = ({ title, description }) => {\n//   const { token } = theme.useToken();\n//   return (\n//     <Flex\n//       direction=\"column\"\n//       style={{ padding: token.paddingXS }}\n//       align=\"stretch\"\n//     >\n//       <Typography.Title level={5}>{title}</Typography.Title>\n//       <Typography.Text\n//         type=\"secondary\"\n//         // @ts-ignore\n//         style={{ textWrap: 'wrap' }}\n//       >\n//         {description}\n//       </Typography.Text>\n//     </Flex>\n//   );\n// };\n\n// interface StepContentProps extends FlexProps{\n\n// }\n// const StepContent: React.FC<{}> = () => {\n//   return <Flex>\n\n//   </Flex>\n// }\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nconst generateRandomString = () => {\n  let randNum = Math.floor(Math.random() * 52 * 52 * 52);\n\n  const parseNum = (num: number) => {\n    if (num < 26) return String.fromCharCode(65 + num);\n    else return String.fromCharCode(97 + num - 26);\n  };\n\n  let randStr = '';\n\n  for (let i = 0; i < 3; i++) {\n    randStr += parseNum(randNum % 52);\n    randNum = Math.floor(randNum / 52);\n  }\n\n  return randStr;\n};\n\nexport default SessionLauncherPage;\n"],"names":["manipulateGraphQLQueryWithClientDirectives","query","variables","arguments","length","undefined","isCompatibleWith","ast","parse","newAst","visit","Field","enter","node","_node$directives","directives","find","directive","_directive$arguments","_directive$arguments2","_directive$arguments3","_directive$arguments4","directiveName","name","value","firstArgName","firstArgValue","arg","version","kind","leave","_node$selectionSet$se","selectionSet","selections","Directive","includes","usedVariables","Variable","VariableDefinition","variableDefinition","variable","print","RelayFeatureFlags","ENABLE_RELAY_RESOLVERS","fetchFn","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","_globalThis$backendai2","_globalThis$backendai3","transformedQuery","reqBody","reqInfo","result","wrap","_context","prev","next","globalThis","backendaiclient","Promise","resolve","document","addEventListener","onBackendAIConnected","removeEventListener","text","_globalThis$backendai","isManagerVersionCompatibleWith","newSignedRequest","_wrapWithPromise","catch","err","t0","sent","abrupt","stop","_x","_x2","apply","RelayEnvironment","Environment","network","Network","create","subscribeFn","store","Store","RecordSource","dayjs","weekday","localeData","localizedFormat","relativeTime","utc","timezone","WebComponentContext","React","ShadowRootContext","useShadowRoot","useWebComponentInfo","queryClient","QueryClient","defaultOptions","queries","suspense","refetchOnWindowFocus","retry","i18n","initReactI18next","use","Backend","init","backend","loadPath","lng","backendaioptions","get","fallbackLng","interpolation","escapeValue","react","transSupportBasicHtmlNodes","transKeepBasicHtmlNodesFor","RoutingEventHandler","navigate","useNavigate","useLayoutEffect","handleNavigate","e","detail","replace","children","styles","shadowRoot","dispatchEvent","cache","useMemo","createCache","_useCurrentLanguage","_useState","useState","_useState2","_slicedToArray","lang","_setLang","useTranslation","useEffect","setTimeout","changeLanguage","handler","_e$detail","_e$detail2","window","useCurrentLanguage","themeConfig","useCustomThemeConfig","componentValues","moveTo","path","params","_jsx","_Fragment","RelayEnvironmentProvider","environment","_jsxs","QueryClientProvider","client","Provider","ConfigProvider","getPopupContainer","triggerNode","parentNode","locale","ko_KR","en_US","theme","App","StyleProvider","container","Suspense","fallback","BrowserRouter","QueryParamProvider","adapter","ReactRouter6Adapter","options","v0","hash","_ref$status","status","extraButtonTitle","onClickExtraButton","extra","style","cardProps","_objectWithoutProperties","_excluded","token","useToken","_extra","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","onClick","Card","_objectSpread","_","borderColor","colorSuccess","onChange","localFormat","pickerProps","_useControllableValue","useControllableValue","setControllableValue","DatePicker","_value$tz","newValue","format","tz","toISOString","formItemProps","props","inputRef","useRef","Form","List","fields","_ref2","add","remove","Flex","direction","gap","align","map","_ref3","index","key","restField","_excluded2","Item","marginBottom","flex","rules","required","message","pattern","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","reject","Input","ref","placeholder","MinusCircleOutlined","noStyle","current","focus","PlusOutlined","block","PortTag","tagProps","port","parseInt","isValid","Tag","color","Object","assign","_objectDestructuringEmpty","t","baiClient","useSuspendedBackendaiClient","label","tooltip","Trans","i18nKey","max","_config","maxCountForPreopenPorts","count","values","v","Error","Select","mode","tagRender","closable","onClose","onMouseDown","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","_ref$dynamicSteps","dynamicSteps","_ref$units","units","_ref$disableAutoUnit","disableAutoUnit","_ref$min","min","_ref$max","inputNumberProps","defaultValue","_useControllableValue2","setValue","parseUnit","numValue","_unitFromValue","previousUnit","usePrevious","unit","_parseUnit","_parseUnit2","minNumValue","minUnit","_parseUnit3","_parseUnit4","maxNumValue","maxUnit","onInput","_e$target","target","test","InputNumber","concat","iSizeToSize","number","addonAfter","newUnit","onDropdownVisibleChange","Typography","Text","fontFamily","toUpperCase","cursor","step","onStep","afterStepValue","info","nextIndex","numValueNotNull","currentUnitIndex","indexOf","nextValue","nextUnit","nextNumValue","warn","otherProps","extraMarks","minGiB","maxGiB","valueGiB","Slider","trackStyle","backgroundColor","compareNumberWithUnits","railStyle","formatter","toFixed","newNumValue","marks","_defineProperty","colorTextSecondary","minWidth","DynamicUnitInputNumber","selectProps","_useUpdatableState","useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","run","_useResourceSlots","useResourceSlots","resourceSlots","_useTransition","useTransition","_useTransition2","isPendingUpdate","_startTransition","resource_presets","useLazyLoadQuery","_ResourcePresetSelectQuery","require","fetchPolicy","loading","display","EditOutlined","preset","slotsInfo","JSON","resource_slots","justify","opacity","slot","ResourceNumber","hideTooltip","showSearch","console","log","limitParser","limit","ResourceAllocationFormItems","_$find","_checkPresetInfo$scal","_checkPresetInfo$scal2","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal5","_checkPresetInfo$scal6","_$min","_$find2","_iSizeToSize","_iSizeToSize2","_checkPresetInfo$scal7","_checkPresetInfo$scal8","_checkPresetInfo$scal9","_checkPresetInfo$scal10","_iSizeToSize3","_checkPresetInfo$scal11","_checkPresetInfo$scal12","_$min2","_$find3","enableNumOfSessions","form","useFormInstance","acceleratorSlots","currentProject","useCurrentProjectValue","currentResourceGroup","setCurrentResourceGroup","isPendingCheckResets","startCheckRestsTransition","currentImage","useWatch","preserve","currentImageAcceleratorLimits","resource_limits","checkPresetInfo","useTanQuery","queryKey","queryFn","resourcePreset","check","group","scaling_group","staleTime","data","sliderMinMax","cpu","maxCPUCoresPerContainer","keypair_limits","group_limits","scaling_groups","using","remaining","keypair_remaining","group_remaining","scaling_group_remaining","Number","MAX_SAFE_INTEGER","mem","maxMemoryPerContainer","numberFixed","shmem","_$filter$","_checkPresetInfo$scal13","_checkPresetInfo$scal14","_checkPresetInfo$scal15","_checkPresetInfo$scal16","_checkPresetInfo$scal17","_checkPresetInfo$scal18","_$min3","configName","supportedAcceleratorInfo","session","_sliderMinMax$cpu","_iSizeToSize4","_iSizeToSize5","_sliderMinMax$shmem","_iSizeToSize6","_sliderMinMax$mem","_sliderMinMax$shmem2","setFieldsValue","resource","setFieldValue","_$filter$2","nextImageSelectorType","acceleratorInfo","validateFields","remainingValidationRules","warningOnly","_validator","_validator2","_callee2","_context2","_x3","_x4","slotKey","_validator3","_callee3","_context3","_x5","_x6","ResourceGroupSelect","autoSelectDefault","marginXS","ResourcePresetSelect","_options$preset","_iSizeToSize7","_iSizeToSize8","_options$preset2","slots","numberUnit","shared_memory","margin","shouldUpdate","cur","allocationPreset","_sliderMinMax$cpu2","_sliderMinMax$cpu3","_sliderMinMax$cpu4","_sliderMinMax$cpu5","_sliderMinMax$cpu6","_sliderMinMax$mem4","_sliderMinMax$mem5","_sliderMinMax$session","_sliderMinMax$session2","SliderInputItem","sliderProps","_validator4","_callee4","_sliderMinMax$mem2","_sliderMinMax$mem3","_context4","size","_x7","_x8","DynamicUnitInputNumberWithSlider","dependencies","_validator5","_callee5","_getFieldValue","_getFieldValue2","_context5","_x9","_x10","_prev$resource","_next$resource","acceleratorType","_ref5","_sliderMinMax$current","_sliderMinMax$current2","currentAcceleratorType","initialValue","popupMatchSelectWidth","ACCELERATOR_UNIT_MAP","disabled","Divider","toString","allowClear","filter","_ref$showAliasInput","showAliasInput","_ref$selectedRowKeys","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","_ref$aliasBasePath","aliasBasePath","controlledAliasMap","aliasMap","onChangeAliasMap","_ref$rowKey","rowKey","tableProps","getRowKey","record","setSelectedRowKeys","_useControllableValue3","_useControllableValue4","setAliasMap","_Form$useForm","useForm","internalForm","startsWith","slice","baiRequestWithPromise","useBaiSignedRequestWithPromise","isPendingRefetch","startRefetchTransition","allFolderList","method","url","id","searchKey","setSearchKey","displayingFolders","vf","handleAliasUpdate","then","finally","getFieldsValue","k","mapAliasToPath","input","columns","title","fontWeight","Tooltip","zIndex","QuestionCircleOutlined","dataIndex","sorter","a","b","localeCompare","render","isCurrentRowSelected","height","TextHighlighter","keyword","allAliasPathMap","reduce","fixed","usage_mode","UserOutlined","group_name","permission","row","tagValues","r","w","d","perm","vFolder","hasPermission","compact","DoubleTag","created_at","ReloadOutlined","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","_toConsumableArray","hidden","arr","valuePropName","trigger","VFolderTable","pagination","INITIAL_FORM_VALUES","sessionType","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","enabled","command","scheduleDate","envvars","accelerator","num_of_sessions","cluster_mode","cluster_size","stepParam","withDefault","NumberParam","formValuesParam","JsonParam","generateSessionId","possible","charAt","Math","floor","random","generateRandomString","num","randNum","randStr","String","fromCharCode","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue8","sessionMode","isStartingSession","setIsStartingSession","_useQueryParams","useQueryParams","formValues","redirectTo","StringParam","_useQueryParams2","_useQueryParams2$","currentStep","formValuesFromQueryParams","setQuery","syncFormToURLWithDebounce","useDebounceFn","setCurrentStep","nextStep","screens","Grid","useBreakpoint","stringify","steps","PlayCircleFilled","currentStepKey","hasError","getFieldsError","item","errors","moveToPreview","padding","paddingSM","justifyContent","Breadcrumb","items","href","maxWidth","Title","level","marginTop","Popconfirm","description","onConfirm","resetFields","okText","okButtonProps","danger","paddingRight","paddingLeft","BlockOutlined","onFormChange","layout","requiredMark","initialValues","Radio","className","strong","code","SessionNameFormItem","TextArea","autoSize","Checkbox","checked","_prev$batch","_next$batch","_form$getFieldValue","isBefore","DatePickerISO","showTime","disabledDate","startOf","ErrorBoundary","fallbackRender","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","Switch","_prev$hpcOptimization","_next$hpcOptimization","Row","gutter","marginMD","Col","xs","sm","stringMode","VFolderTableFromItem","PortSelectFormItem","BAICard","getFieldError","findIndex","Descriptions","span","readOnly","idx","column","ImageMetaIcon","image","copyable","SyntaxHighlighter","darcula","codeTagProps","customStyle","join","getFieldWarning","Alert","showIcon","opts","_form$getFieldValue7","alias","SaveOutlined","LeftOutlined","PlayCircleOutlined","_values$environments$","_values$environments$2","kernelName","architecture","sessionInfo","sessionPromises","environments","split","sessionName","config","startsAt","startupCommand","domain","domainName","resourceGroup","maxWaitSeconds","mounts","mount_map","vfoldersAliasMap","env","preopen_ports","ports","formattedSessionName","createIfNotExists","res","created","warning","all","firstSession","appOptions","kernelId","sessionId","service_info","servicePorts","Array","isArray","appLauncher","showLauncher","ghost","RightOutlined","md","Affix","offsetTop","Steps","nextCurrent","s"],"sourceRoot":""}