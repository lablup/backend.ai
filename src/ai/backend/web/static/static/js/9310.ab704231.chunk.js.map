{"version":3,"file":"static/js/9310.ab704231.chunk.js","mappings":"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","sources":["BAICard.tsx","components/DatePickerISO.tsx","components/HiddenFormItem.tsx","components/ImageTags.tsx","components/__generated__/SessionOwnerSetterCardQuery.graphql.ts","components/PortSelectFormItem.tsx","components/SessionLauncherErrorTourProps.tsx","components/SessionNameFormItem.tsx","components/BAISelect.tsx","components/SessionOwnerSetterCard.tsx","hooks/useRecentSessionHistory.tsx","components/SessionTemplateModal.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\nexport interface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n  ref?: React.LegacyRef<HTMLDivElement> | undefined;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      className={status === 'error' ? 'bai-card-error' : ''}\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n              ? token.colorWarning\n              : status === 'success'\n                ? token.colorSuccess\n                : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport { GetRef } from 'antd/lib';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO = React.forwardRef<\n  GetRef<typeof DatePicker>,\n  DatePickerISOProps\n>(({ value, onChange, localFormat, ...pickerProps }, ref) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      ref={ref}\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n});\n\nexport default DatePickerISO;\n","import { Form, FormItemProps } from 'antd';\nimport React, { useEffect } from 'react';\n\ninterface HiddenFormItemProps extends Omit<FormItemProps, 'children'> {\n  value: any;\n}\nconst HiddenFormItem: React.FC<HiddenFormItemProps> = ({ value, ...props }) => {\n  const form = Form.useFormInstance();\n  useEffect(() => {\n    form.setFieldValue(props.name, value);\n  }, [value, form, props.name]);\n  return <Form.Item {...props} hidden />;\n};\n\nexport default HiddenFormItem;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag, TagProps } from 'antd';\nimport React from 'react';\n\ninterface ImageAliasNameAndBaseVersionTagsProps\n  extends Omit<DoubleTagObjectValue, 'label'> {\n  image: string | null;\n}\nexport const ImageAliasNameAndBaseVersionTags: React.FC<\n  ImageAliasNameAndBaseVersionTagsProps\n> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageAliasName, getBaseVersion, tagAlias }] =\n    useBackendAIImageMetaData();\n  return (\n    <DoubleTag\n      values={[\n        {\n          label: tagAlias(getImageAliasName(image)),\n          color: 'blue',\n        },\n        {\n          label: getBaseVersion(image),\n          color: 'green',\n        },\n      ]}\n      {...props}\n    />\n  );\n};\n\ninterface BaseVersionTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseVersionTags: React.FC<BaseVersionTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseVersion, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseVersion(image))}\n    </Tag>\n  );\n};\n\ninterface BaseImageTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseImageTags: React.FC<BaseImageTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseImage, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseImage(image))}\n    </Tag>\n  );\n};\n\ninterface ArchitectureTagsProps extends TagProps {\n  image: string | null;\n}\nexport const ArchitectureTags: React.FC<ArchitectureTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getArchitecture, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getArchitecture(image))}\n    </Tag>\n  );\n};\n\ninterface LangTagsProps extends TagProps {\n  image: string | null;\n}\nexport const LangTags: React.FC<LangTagsProps> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageLang, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getImageLang(image))}\n    </Tag>\n  );\n};\n\ninterface ConstraintTagsProps extends TagProps {\n  tag: string;\n  labels: { key: string; value: string }[];\n  highlightKeyword?: string;\n}\nexport const ConstraintTags: React.FC<ConstraintTagsProps> = ({\n  tag,\n  labels,\n  highlightKeyword,\n  ...props\n}) => {\n  labels = labels || [];\n  const [, { getConstraints }] = useBackendAIImageMetaData();\n  const constraints = getConstraints(tag, labels);\n  return (\n    <Flex direction=\"row\" align=\"start\">\n      {constraints[0] ? (\n        <Tag color=\"blue\" {...props}>\n          <TextHighlighter keyword={highlightKeyword}>\n            {constraints[0]}\n          </TextHighlighter>\n        </Tag>\n      ) : null}\n      {constraints[1] ? (\n        <DoubleTag\n          color=\"cyan\"\n          values={[\n            {\n              label: (\n                <TextHighlighter keyword={highlightKeyword}>\n                  Customized\n                </TextHighlighter>\n              ),\n              color: 'cyan',\n            },\n            {\n              label: (\n                <TextHighlighter keyword={highlightKeyword}>\n                  {constraints[1]}\n                </TextHighlighter>\n              ),\n              color: 'cyan',\n            },\n          ]}\n          {...props}\n        />\n      ) : null}\n    </Flex>\n  );\n};\n\nconst SessionKernelTags: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n}> = ({ image, style = {} }, bordered) => {\n  image = image || '';\n  return (\n    <>\n      <ImageAliasNameAndBaseVersionTags image={image} />\n      <BaseImageTags image={image} />\n      <ArchitectureTags image={image} />\n    </>\n  );\n};\n\nexport default React.memo(SessionKernelTags);\n","/**\n * @generated SignedSource<<7fb275c8d975fa998bb8dde71c251b8c>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type SessionOwnerSetterCardQuery$variables = {\n  email: string;\n};\nexport type SessionOwnerSetterCardQuery$data = {\n  readonly keypairs: ReadonlyArray<{\n    readonly access_key: string | null | undefined;\n  } | null | undefined> | null | undefined;\n  readonly user: {\n    readonly domain_name: string | null | undefined;\n    readonly groups: ReadonlyArray<{\n      readonly id: string | null | undefined;\n      readonly name: string | null | undefined;\n    } | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type SessionOwnerSetterCardQuery = {\n  response: SessionOwnerSetterCardQuery$data;\n  variables: SessionOwnerSetterCardQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"domain_name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"UserGroup\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"groups\",\n  \"plural\": true,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    (v4/*: any*/)\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"a8de553c14d6730a6825cba2f409be0d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionOwnerSetterCardQuery(\\n  $email: String!\\n) {\\n  keypairs(email: $email) {\\n    access_key\\n    id\\n  }\\n  user(email: $email) {\\n    domain_name\\n    groups {\\n      name\\n      id\\n    }\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ba086835ea654ab889e0e6aaefa0abfe\";\n\nexport default node;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({\n  name = 'ports',\n  ...formItemProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const form = Form.useFormInstance();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name={name}\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        () => ({\n          validator(rule, values) {\n            if (\n              transformPortValuesToNumbers(values).length <=\n              baiClient._config.maxCountForPreopenPorts\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(\n                  t('session.launcher.PreOpenPortMaxCountLimit', {\n                    count: baiClient._config.maxCountForPreopenPorts,\n                  }),\n                ),\n              );\n            }\n          },\n        }),\n        () => ({\n          // To check if the port range is not start <= end\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                return parseInt(v).toString() === v || isPortRangeStr(v);\n              })\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(t('session.launcher.InvalidPortFormat')),\n              );\n            }\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            const allPorts = transformPortValuesToNumbers(values);\n            if (\n              _.every(allPorts, (port) => {\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            // To check if the port is duplicated\n            const allPorts = transformPortValuesToNumbers(values);\n            if (_.uniq(allPorts).length === allPorts.length) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.DuplicatedPort')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          const hasDuplicated =\n            _.filter(\n              transformPortValuesToNumbers(form.getFieldValue(name)),\n              (v) => v === parseInt(props.value),\n            ).length > 1;\n          return (\n            <PortTag\n              inValid={hasDuplicated}\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n  inValid?: boolean;\n}\n\nexport const PortTag: React.FC<PortTagProps> = ({\n  inValid,\n  value,\n  ...tagProps\n}) => {\n  return (\n    <Tag\n      color={!inValid && isValidPortStr(value) ? undefined : 'red'}\n      {...tagProps}\n    />\n  );\n};\n\nexport const isValidPortStr = (portStr: string) => {\n  // consider range as valid\n  if (isPortRangeStr(portStr)) {\n    const splitPortRange = portStr.split(':');\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start >= MIN_PORT && end <= MAX_PORT;\n  } else if (\n    portStr === parseInt(portStr).toString() &&\n    parseInt(portStr) >= MIN_PORT &&\n    parseInt(portStr) <= MAX_PORT\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const isPortRangeStr = (portRange: string) => {\n  const splitPortRange = portRange.split(':');\n  if (splitPortRange.length === 2) {\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start <= end;\n  }\n  return false;\n};\n\nexport const parsePortRangeToNumbers = (portRange: string) => {\n  const [start, end] = portRange.split(':').map((v) => parseInt(v));\n  return _.range(start, end + 1);\n};\n\nexport const transformPortValuesToNumbers = (\n  values: PortSelectFormValues['ports'],\n) => {\n  return _.flatten(\n    _.map(values, (v) =>\n      isPortRangeStr(v) ? parsePortRangeToNumbers(v) : parseInt(v),\n    ),\n  );\n};\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useBAISettingUserState } from '../hooks/useBAISetting';\nimport { Tour, TourProps } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionLauncherValidationTourProps extends Omit<TourProps, 'steps'> {}\nconst SessionLauncherValidationTour: React.FC<\n  SessionLauncherValidationTourProps\n> = ({ open, onClose, ...otherProps }) => {\n  const { t } = useTranslation();\n  const [hasOpenedValidationTour, setHasOpenedValidationTour] =\n    useBAISettingUserState('has_opened_tour_neo_session_validation');\n\n  const steps = [\n    {\n      title: t('tourguide.NeoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourguide.NeoSessionLauncher.ValidationErrorText'),\n      target: () =>\n        document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement,\n    },\n    {\n      title: t('tourguide.NeoSessionLauncher.ValidationErrorTitle'),\n      description: t(\n        'tourguide.NeoSessionLauncher.FixErrorFieldbyModifyButton',\n      ),\n      target: () =>\n        (\n          document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement\n        )?.querySelector('.ant-card-extra') as HTMLElement,\n    },\n    {\n      title: t('tourguide.NeoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourguide.NeoSessionLauncher.FixErrorAndTryAgainText'),\n      target: () =>\n        document.querySelector(\n          '[data-test-id=\"neo-session-launcher-tour-step-navigation\"]',\n        ) as HTMLElement,\n    },\n  ];\n  return (\n    <Tour\n      steps={steps}\n      onClose={(e) => {\n        onClose?.(e);\n        setHasOpenedValidationTour(true);\n      }}\n      open={!hasOpenedValidationTour && open}\n      {...otherProps}\n    />\n  );\n};\n\nexport default SessionLauncherValidationTour;\n","import { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={[\n        {\n          min: 4,\n          message: t('session.Validation.SessionNameTooShort'),\n        },\n        {\n          max: 64,\n          message: t('session.Validation.SessionNameTooLong64'),\n        },\n        {\n          validator(f, value) {\n            if (_.isEmpty(value)) {\n              return Promise.resolve();\n            }\n            if (!/^\\w/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldStartWith'),\n              );\n            }\n\n            if (!/^[\\w.-]*$/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameInvalidCharacter'),\n              );\n            }\n\n            if (!/\\w$/.test(value) && value.length >= 4) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldEndWith'),\n              );\n            }\n            return Promise.resolve();\n          },\n        },\n      ]}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import { Select, SelectProps } from 'antd';\nimport _ from 'lodash';\nimport React, { useLayoutEffect } from 'react';\n\ninterface BAISelectProps extends SelectProps {\n  autoSelectOption?: boolean | ((options: SelectProps['options']) => any);\n}\n/**\n * BAISelect component.\n *\n * @component\n * @param {Object} props - The component props.\n * @param {boolean | Function} props.autoSelectOption - Determines whether to automatically select an option.\n * @param {any} props.value - The current value of the select.\n * @param {Array} props.options - The available options for the select.\n * @param {Function} props.onChange - The callback function to handle value changes.\n * @returns {JSX.Element} The rendered BAISelect component.\n */\nconst BAISelect: React.FC<BAISelectProps> = ({\n  autoSelectOption,\n  ...selectProps\n}) => {\n  const { value, options, onChange } = selectProps;\n  useLayoutEffect(() => {\n    if (autoSelectOption && _.isEmpty(value) && options?.[0]) {\n      if (_.isBoolean(autoSelectOption)) {\n        onChange?.(options?.[0].value || options?.[0], options?.[0]);\n      } else if (_.isFunction(autoSelectOption)) {\n        onChange?.(autoSelectOption(options), options[0]);\n      }\n    }\n  }, [value, options, onChange, autoSelectOption]);\n  return <Select {...selectProps} />;\n};\n\nexport default BAISelect;\n","import BAICard, { BAICardProps } from '../BAICard';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAISelect from './BAISelect';\nimport Flex from './Flex';\nimport HiddenFormItem from './HiddenFormItem';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { SessionOwnerSetterCardQuery } from './__generated__/SessionOwnerSetterCardQuery.graphql';\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Form,\n  Input,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport { CardProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { CheckIcon } from 'lucide-react';\nimport React, { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { fetchQuery, useRelayEnvironment } from 'react-relay';\n\nexport interface SessionOwnerSetterFormValues {\n  owner?:\n    | {\n        email: string;\n        accesskey: string;\n        project: string;\n        resourceGroup: string;\n        enabled: true;\n        domainName: string;\n      }\n    | {\n        email?: string;\n        accesskey?: string;\n        project?: string;\n        resourceGroup?: string;\n        enabled: false;\n        domainName?: string;\n      };\n}\n\nconst SessionOwnerSetterCard: React.FC<CardProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const form = Form.useFormInstance<SessionOwnerSetterFormValues>();\n\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n\n  const [fetchingEmail, setFetchingEmail] = useState<string>();\n  const relayEvn = useRelayEnvironment();\n\n  const { data, isFetching } = useTanQuery({\n    queryKey: ['SessionOwnerSetterCard', 'ownerInfo', fetchingEmail],\n    queryFn: () => {\n      const email = form.getFieldValue(['owner', 'email']);\n      if (!email) return;\n\n      const query = graphql`\n        query SessionOwnerSetterCardQuery($email: String!) {\n          keypairs(email: $email) {\n            access_key\n          }\n          user(email: $email) {\n            domain_name\n            groups {\n              name\n              id\n            }\n          }\n        }\n      `;\n      return fetchQuery<SessionOwnerSetterCardQuery>(relayEvn, query, {\n        email,\n      }).toPromise();\n    },\n    enabled: !!fetchingEmail,\n  });\n\n  const ownerKeypairs = form.getFieldValue(['owner', 'email'])\n    ? data?.keypairs\n    : undefined;\n  const owner = form.getFieldValue(['owner', 'email']) ? data?.user : undefined;\n\n  const nonExistentOwner = !isFetching && fetchingEmail && !owner;\n  return (\n    <Card\n      title={t('session.launcher.SetSessionOwner')}\n      extra={\n        <Form.Item name={['owner', 'enabled']} valuePropName=\"checked\" noStyle>\n          <Switch />\n        </Form.Item>\n      }\n      styles={\n        isActive\n          ? undefined\n          : {\n              header: {\n                borderBottom: 'none',\n              },\n              body: {\n                display: isActive ? 'block' : 'none',\n              },\n            }\n      }\n      {...props}\n    >\n      <HiddenFormItem\n        name={['owner', 'domainName']}\n        value={owner?.domain_name}\n      />\n      <Form.Item dependencies={[['owner', 'enabled']]} noStyle>\n        {({ getFieldValue }) => {\n          return (\n            <>\n              <Flex>\n                <Form.Item\n                  name={['owner', 'email']}\n                  label={t('session.launcher.OwnerEmail')}\n                  rules={[\n                    {\n                      required: isActive,\n                    },\n                    {\n                      type: 'email',\n                      message: t('credential.validation.InvalidEmailAddress'),\n                    },\n                  ]}\n                  style={{ flex: 1 }}\n                  validateStatus={nonExistentOwner ? 'error' : undefined}\n                  help={\n                    nonExistentOwner\n                      ? t('credential.NoUserToDisplay')\n                      : undefined\n                  }\n                >\n                  <Input.Search\n                    onSearch={(v) => {\n                      // startTransition(()=>{\n\n                      form\n                        .validateFields([['owner', 'email']])\n                        .then(() => {\n                          setFetchingEmail(v);\n                        })\n                        .catch(() => {});\n                      // })\n                    }}\n                    onChange={() => {\n                      setFetchingEmail('');\n                      form.setFieldsValue({\n                        owner: {\n                          accesskey: '',\n                          project: undefined,\n                          resourceGroup: undefined,\n                        },\n                      });\n                    }}\n                    loading={isFetching}\n                    enterButton={\n                      !isFetching && owner ? (\n                        <Button icon={<CheckIcon />} />\n                      ) : undefined\n                    }\n                  />\n                </Form.Item>\n              </Flex>\n              <Form.Item\n                name={['owner', 'accesskey']}\n                label={t('session.launcher.OwnerAccessKey')}\n                rules={[\n                  {\n                    required: getFieldValue(['owner', 'enabled']),\n                  },\n                ]}\n              >\n                <BAISelect\n                  options={_.map(ownerKeypairs, (k) => {\n                    return {\n                      label: k?.access_key,\n                      value: k?.access_key,\n                    };\n                  })}\n                  autoSelectOption\n                  disabled={_.isEmpty(fetchingEmail) || isFetching}\n                  // defaultActiveFirstOption\n                />\n              </Form.Item>\n              <Row gutter={token.marginSM}>\n                <Col span={12}>\n                  <Form.Item\n                    name={['owner', 'project']}\n                    label={t('session.launcher.OwnerGroup')}\n                    rules={[\n                      {\n                        required: getFieldValue(['owner', 'enabled']),\n                      },\n                    ]}\n                  >\n                    <BAISelect\n                      options={_.map(owner?.groups, (g) => {\n                        return {\n                          label: g?.name,\n                          value: g?.name,\n                        };\n                      })}\n                      autoSelectOption\n                      disabled={_.isEmpty(fetchingEmail) || isFetching}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item dependencies={[['owner', 'project']]} noStyle>\n                    {({ getFieldValue }) => {\n                      return (\n                        <Suspense\n                          fallback={\n                            <Form.Item\n                              label={t('session.launcher.OwnerResourceGroup')}\n                              rules={[\n                                {\n                                  required: getFieldValue(['owner', 'enabled']),\n                                },\n                              ]}\n                            >\n                              <Select loading />\n                            </Form.Item>\n                          }\n                        >\n                          <Form.Item\n                            name={['owner', 'resourceGroup']}\n                            label={t('session.launcher.OwnerResourceGroup')}\n                            rules={[\n                              {\n                                required: getFieldValue(['owner', 'enabled']),\n                              },\n                            ]}\n                          >\n                            {getFieldValue(['owner', 'project']) ? (\n                              <ResourceGroupSelect\n                                projectName={getFieldValue([\n                                  'owner',\n                                  'project',\n                                ])}\n                                disabled={\n                                  _.isEmpty(fetchingEmail) || isFetching\n                                }\n                                autoSelectDefault\n                              />\n                            ) : (\n                              <Select disabled />\n                            )}\n                          </Form.Item>\n                        </Suspense>\n                      );\n                    }}\n                  </Form.Item>\n                </Col>\n              </Row>\n            </>\n          );\n        }}\n      </Form.Item>\n    </Card>\n  );\n};\n\nexport const SessionOwnerSetterPreviewCard: React.FC<BAICardProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n  const currentUserRole = useCurrentUserRole();\n  return (\n    (currentUserRole === 'admin' || currentUserRole === 'superadmin') &&\n    isActive && (\n      <BAICard\n        title={t('session.launcher.SetSessionOwner')}\n        size=\"small\"\n        status={\n          form.getFieldError(['owner', 'email']).length > 0 ||\n          form.getFieldError(['owner', 'accesskey']).length > 0 ||\n          form.getFieldError(['owner', 'project']).length > 0 ||\n          form.getFieldError(['owner', 'resourceGroup']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        {...props}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.OwnerEmail')}>\n            {form.getFieldValue(['owner', 'email'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerAccessKey')}>\n            {form.getFieldValue(['owner', 'accesskey'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerGroup')}>\n            {form.getFieldValue(['owner', 'project'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerResourceGroup')}>\n            {form.getFieldValue(['owner', 'resourceGroup'])}\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    )\n  );\n};\n\nexport default SessionOwnerSetterCard;\n","import { generateRandomString } from '../helper';\nimport { SessionHistory, useBAISettingUserState } from './useBAISetting';\nimport { useEventNotStable } from './useEventNotStable';\n\nexport const useRecentSessionHistory = () => {\n  const [recentSessionHistory, setRecentSessionHistory] =\n    useBAISettingUserState('recentSessionHistory');\n\n  const push = useEventNotStable(\n    ({\n      id,\n      params,\n      createdAt,\n    }: SelectivePartial<SessionHistory, 'id' | 'createdAt'>) => {\n      const newHistory: SessionHistory = {\n        id: id ?? generateRandomString(8),\n        params,\n        createdAt: createdAt ?? new Date().toISOString(),\n      };\n      // push new history to the top of recentSessionHistory and keep it up to 5\n      const newRecentSessionHistory = [\n        newHistory,\n        ...(recentSessionHistory || []),\n      ].slice(0, 5);\n      setRecentSessionHistory(newRecentSessionHistory);\n    },\n  );\n  const clear = useEventNotStable(() => setRecentSessionHistory([]));\n  const remove = useEventNotStable((id: string) => {\n    const newRecentSessionHistory = (recentSessionHistory || []).filter(\n      (item) => item.id !== id,\n    );\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n  return [\n    recentSessionHistory,\n    {\n      push,\n      clear,\n      remove,\n    },\n  ] as const;\n};\n","import { useBackendAIImageMetaData } from '../hooks';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\nimport {\n  ResourceNumbersOfSession,\n  SessionLauncherFormValue,\n} from '../pages/SessionLauncherPage';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { Divider, Table, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionTemplateModalProps\n  extends Omit<BAIModalProps, 'onOk' | 'onCancel'> {\n  onRequestClose: (formValue?: SessionLauncherFormValue) => void;\n}\nconst SessionTemplateModal: React.FC<SessionTemplateModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const [sessionHistory] = useRecentSessionHistory();\n\n  const [, { getImageAliasName, getBaseVersion }] = useBackendAIImageMetaData();\n\n  const [selectedHistoryId, setSelectedHistoryId] = useState<string>();\n\n  const parsedSessionHistory = useMemo(() => {\n    return _.map(sessionHistory, (history) => {\n      const params = new URLSearchParams(history.params);\n      const formValues: SessionLauncherFormValue = JSON.parse(\n        params.get('formValues') || '{}',\n      );\n      return {\n        ...history,\n        ...formValues,\n        // resourceAllocation: `${history.cpu}CPU ${history.memory}GB`,\n      };\n    });\n  }, [sessionHistory]);\n\n  return (\n    <BAIModal\n      width={800}\n      title={t('session.launcher.RecentHistory')}\n      okButtonProps={{ disabled: !selectedHistoryId }}\n      okText={t('button.Apply')}\n      {...modalProps}\n      onOk={(e) => {\n        const params = _.find(sessionHistory, {\n          id: selectedHistoryId,\n        })?.params;\n        modalProps.onRequestClose?.(\n          JSON.parse(new URLSearchParams(params).get('formValues') || '{}'),\n        );\n      }}\n      onCancel={() => {\n        // reset\n        setSelectedHistoryId(undefined);\n        modalProps.onRequestClose();\n      }}\n    >\n      <Divider style={{ margin: 0 }} />\n      <Table\n        showHeader={false}\n        scroll={{ x: 'max-content' }}\n        dataSource={parsedSessionHistory}\n        pagination={false}\n        rowSelection={{\n          type: 'radio',\n          selectedRowKeys: selectedHistoryId ? [selectedHistoryId] : [],\n          onSelect: (record) => {\n            setSelectedHistoryId(record.id);\n          },\n        }}\n        onRow={(record) => ({\n          onClick: () => {\n            setSelectedHistoryId(record.id);\n          },\n        })}\n        rowKey={(record) => record.id}\n        columns={[\n          // {\n          //   title: t('session.launcher.SessionName'),\n          //   dataIndex: 'sessionName',\n          //   render: (sessionName, record) => {\n          //     return sessionName ?? '-';\n          //   },\n          // },\n          {\n            title: t('general.Image'),\n            dataIndex: ['environments', 'version'],\n            render: (version, record) => {\n              const imageStr =\n                record.environments.version || record.environments.manual;\n              return (\n                !!imageStr && (\n                  <Flex gap={'xs'}>\n                    <ImageMetaIcon image={imageStr} />\n                    <Typography.Text>\n                      {getImageAliasName(imageStr)}\n                    </Typography.Text>\n                    <Typography.Text>\n                      {getBaseVersion(imageStr)}\n                    </Typography.Text>\n                    <Typography.Text>\n                      {record.sessionName ? `(${record.sessionName})` : null}\n                    </Typography.Text>\n                  </Flex>\n                )\n              );\n            },\n            // onCell: () => ({\n            //   style: { maxWidth: 250, textOverflow: 'ellipsis' },\n            // }),\n          },\n          {\n            title: t('session.launcher.ResourceAllocation'),\n            dataIndex: 'resource',\n            render: (resource) => {\n              // return JSON.stringify(resource)\n              return (\n                <Flex>\n                  <ResourceNumbersOfSession resource={resource} />\n                </Flex>\n              );\n            },\n          },\n          // {\n          //   dataIndex: 'mounts',\n          //   render: (value, record) => {\n          //     record.mou\n          //   }\n          // },\n          {\n            title: t('session.launcher.CreatedAt'),\n            dataIndex: 'createdAt',\n            render: (createdAt: string) => {\n              return dayjs(createdAt).fromNow();\n            },\n          },\n        ]}\n      />\n      {/* <Tabs\n        defaultActiveKey=\"history\"\n        items={[\n          {\n            key: 'template',\n            label: t('session.launcher.Template'),\n            children: <div>Template</div>,\n          },\n          {\n            key: 'history',\n            label: t('session.launcher.RecentHistory'),\n            children: (\n              \n            ),\n          },\n        ]}\n      /> */}\n    </BAIModal>\n  );\n};\n\nexport default SessionTemplateModal;\n","import BAICard from '../BAICard';\nimport BAIIntervalText from '../components/BAIIntervalText';\nimport DatePickerISO from '../components/DatePickerISO';\nimport DoubleTag from '../components/DoubleTag';\nimport EnvVarFormList, {\n  sanitizeSensitiveEnv,\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport SessionKernelTags from '../components/ImageTags';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  PortTag,\n  transformPortValuesToNumbers,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionLauncherValidationTour from '../components/SessionLauncherErrorTourProps';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport SessionOwnerSetterCard, {\n  SessionOwnerSetterFormValues,\n} from '../components/SessionOwnerSetterCard';\nimport { SessionOwnerSetterPreviewCard } from '../components/SessionOwnerSetterCard';\nimport SessionTemplateModal from '../components/SessionTemplateModal';\nimport SourceCodeViewer from '../components/SourceCodeViewer';\nimport VFolderTableFormItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport {\n  compareNumberWithUnits,\n  generateRandomString,\n  iSizeToSize,\n} from '../helper';\nimport {\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n  useWebUINavigate,\n} from '../hooks';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupState,\n} from '../hooks/useCurrentProject';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\nimport { useThemeMode } from '../hooks/useThemeMode';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn, useToggle } from 'ahooks';\nimport {\n  Alert,\n  App,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Descriptions,\n  Form,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Table,\n  Tag,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n  bootstrap_script?: string;\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n  bootstrap_script?: string;\n}\n\nexport type SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues &\n  SessionOwnerSetterFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\n\nexport type AppOption = {\n  'session-name'?: string;\n  'session-uuid'?: string;\n  'access-key'?: string;\n  mode?: SessionMode;\n  'app-services'?: Array<string>;\n  runtime?: string;\n  filename?: string;\n  // [key in string]: any;\n};\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n  let sessionMode: SessionMode = 'normal';\n\n  const mainContentDivRef = useAtomValue(mainContentDivRefState);\n  const baiClient = useSuspendedBackendaiClient();\n  const currentUserRole = useCurrentUserRole();\n  const [currentGlobalResourceGroup, setCurrentGlobalResourceGroup] =\n    useCurrentResourceGroupState();\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const INITIAL_FORM_VALUES: DeepPartial<SessionLauncherFormValue> = useMemo(\n    () => ({\n      sessionType: 'interactive',\n      // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n      allocationPreset: 'auto-preset',\n      hpcOptimization: {\n        autoEnabled: true,\n        OMP_NUM_THREADS: '1',\n        OPENBLAS_NUM_THREADS: '1',\n      },\n      batch: {\n        enabled: false,\n        command: undefined,\n        scheduleDate: undefined,\n      },\n      envvars: [],\n      // set default_session_environment only if set\n      ...(baiClient._config?.default_session_environment && {\n        environments: {\n          environment: baiClient._config?.default_session_environment,\n        },\n      }),\n      ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n      resourceGroup: currentGlobalResourceGroup || undefined,\n    }),\n    [\n      baiClient._config?.default_session_environment,\n      currentGlobalResourceGroup,\n    ],\n  );\n  const StepParam = withDefault(NumberParam, 0);\n  const FormValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n  const AppOptionParam = withDefault(JsonParam, {});\n  const [\n    {\n      step: currentStep,\n      formValues: formValuesFromQueryParams,\n      redirectTo,\n      appOption: appOptionFromQueryParams,\n    },\n    setQuery,\n  ] = useQueryParams({\n    step: StepParam,\n    formValues: FormValuesParam,\n    redirectTo: StringParam,\n    appOption: AppOptionParam,\n  });\n  const { search } = useLocation();\n\n  const { isDarkMode } = useThemeMode();\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const currentProject = useCurrentProjectValue();\n\n  const [isOpenTemplateModal, { toggle: toggleIsOpenTemplateModal }] =\n    useToggle();\n  const { upsertNotification } = useSetBAINotification();\n  const [, { push: pushSessionHistory }] = useRecentSessionHistory();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      const currentValue = form.getFieldsValue();\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.extend(\n            _.omit(\n              form.getFieldsValue(),\n              ['environments.image'],\n              ['environments.customizedTag'],\n              ['autoMountedFolderNames'],\n              ['owner'],\n              ['envvars'],\n            ),\n            {\n              envvars: sanitizeSensitiveEnv(currentValue.envvars),\n            },\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  useEffect(() => {\n    if (!_.isEmpty(formValuesFromQueryParams)) {\n      form.validateFields().catch((e) => {});\n    }\n    // Run this memo only for the first time\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const mergedInitialValues = useMemo(() => {\n    return _.merge({}, INITIAL_FORM_VALUES, formValuesFromQueryParams);\n  }, [INITIAL_FORM_VALUES, formValuesFromQueryParams]);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: <PlayCircleFilled />,\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  const [finalStepLastValidateTime, setFinalStepLastValidateTime] =\n    useUpdatableState('first'); // Force re-render after validation in final step.\n\n  useEffect(() => {\n    if (currentStep === steps.length - 1) {\n      form\n        .validateFields()\n        .catch((error) => {})\n        .finally(() => setFinalStepLastValidateTime());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep, form, setFinalStepLastValidateTime, steps.length]);\n\n  useEffect(() => {\n    if (finalStepLastValidateTime !== 'first') {\n      if (hasError) {\n        setValidationTourOpen(true);\n      } else {\n        setValidationTourOpen(false);\n      }\n    }\n  }, [finalStepLastValidateTime, hasError]);\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n    setIsStartingSession(true);\n    const usedSearchParams = search;\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mounts) || values.mounts.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          kernelName,\n          architecture,\n          sessionName: sessionName,\n          config: {\n            type: values.sessionType,\n            ...(_.isEmpty(values.bootstrap_script)\n              ? {}\n              : {\n                  bootstrap_script: values.bootstrap_script,\n                }),\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            ...(values.owner?.enabled\n              ? {\n                  group_name: values.owner.project,\n                  domain: values.owner.domainName,\n                  scaling_group: values.owner.project,\n                  owner_access_key: values.owner.accesskey,\n                }\n              : {\n                  group_name: currentProject.name,\n                  domain: baiClient._config.domainName,\n                  scaling_group: values.resourceGroup,\n                }),\n            ///////////////////////////\n\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: transformPortValuesToNumbers(values.ports),\n          },\n        };\n\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                20000,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean; status: string }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                if (res?.status === 'CANCELLED') {\n                  // Case about failed to start new session kind of \"docker image not found\" or etc.\n                  throw new Error(\n                    t('session.launcher.FailedToStartNewSession'),\n                  );\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                if (err?.message?.includes('The session already exists')) {\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                } else {\n                  throw err;\n                }\n              });\n          },\n        );\n        // After sending a create request, navigate to job page and set current resource group\n        setCurrentGlobalResourceGroup(values.resourceGroup);\n        const backupTo = window.location.pathname + window.location.search;\n        webuiNavigate(redirectTo || '/job');\n        upsertNotification({\n          key: 'session-launcher:' + sessionName,\n          backgroundTask: {\n            promise: Promise.all(sessionPromises),\n            status: 'pending',\n            statusDescriptions: {\n              pending: t('session.PreparingSession'),\n              resolved: t('eduapi.ComputeSessionPrepared'),\n            },\n          },\n          duration: 0,\n          message: t('general.Session') + ': ' + sessionName,\n          open: true,\n        });\n        await Promise.all(sessionPromises)\n          .then(\n            ([firstSession]: Array<{\n              kernelId?: string;\n              sessionId: string;\n              sessionName: string;\n              servicePorts: Array<{ name: string }>;\n            }>) => {\n              pushSessionHistory({\n                id: firstSession.sessionId,\n                params: usedSearchParams,\n                name: firstSession.sessionName,\n              });\n              if (\n                values.num_of_sessions === 1 &&\n                values.sessionType !== 'batch'\n              ) {\n                const res = firstSession;\n                let appOptions: AppOption = _.cloneDeep(\n                  appOptionFromQueryParams,\n                );\n                if ('kernelId' in res) {\n                  // API v4\n                  appOptions = _.extend(appOptions, {\n                    'session-name': res.kernelId,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                } else {\n                  // API >= v5\n                  appOptions = _.extend(appOptions, {\n                    'session-uuid': res.sessionId,\n                    'session-name': res.sessionName,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                }\n                const service_info = res.servicePorts;\n                if (Array.isArray(service_info) === true) {\n                  appOptions['app-services'] = service_info.map(\n                    (a: { name: string }) => a.name,\n                  );\n                } else {\n                  appOptions['app-services'] = [];\n                }\n                // TODO: support import and inference\n                // if (sessionMode === 'import') {\n                //   appOptions['runtime'] = 'jupyter';\n                //   appOptions['filename'] = this.importFilename;\n                // }\n                // if (sessionMode === 'inference') {\n                //   appOptions['runtime'] = appOptions['app-services'].find(\n                //     (element: any) => !['ttyd', 'sshd'].includes(element),\n                //   );\n                // }\n\n                // only launch app when it has valid service ports\n                if (service_info.length > 0) {\n                  // @ts-ignore\n                  globalThis.appLauncher.showLauncher(appOptions);\n                }\n              }\n            },\n          )\n          .catch(() => {\n            upsertNotification({\n              key: 'session-launcher:' + sessionName,\n              to: backupTo,\n              toText: '수정',\n            });\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n\n  const [validationTourOpen, setValidationTourOpen] = useState(false);\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={4} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                // icon={<BlockOutlined />}\n                // disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n                onClick={() => toggleIsOpenTemplateModal()}\n              >\n                {t('session.launcher.RecentHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={mergedInitialValues}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                  <Form.Item\n                    name=\"bootstrap_script\"\n                    label=\"Bootstrap Script\"\n                    hidden\n                  >\n                    <Input />\n                  </Form.Item>\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      label={t('session.launcher.SessionStartTime')}\n                      extra={\n                        <Form.Item\n                          noStyle\n                          shouldUpdate={(prev, next) =>\n                            prev.batch.scheduleDate !== next.batch.scheduleDate\n                          }\n                        >\n                          {() => {\n                            const scheduleDate = form.getFieldValue([\n                              'batch',\n                              'scheduleDate',\n                            ]);\n                            return (\n                              <BAIIntervalText\n                                delay={1000}\n                                callback={() => {\n                                  const scheduleDate = form.getFieldValue([\n                                    'batch',\n                                    'scheduleDate',\n                                  ]);\n                                  if (scheduleDate) {\n                                    if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                      if (\n                                        form.getFieldError([\n                                          'batch',\n                                          'scheduleDate',\n                                        ]).length === 0\n                                      ) {\n                                        form.validateFields([\n                                          ['batch', 'scheduleDate'],\n                                        ]);\n                                      }\n                                      return undefined;\n                                    } else {\n                                      return dayjs(scheduleDate).fromNow();\n                                    }\n                                  } else {\n                                    return undefined;\n                                  }\n                                }}\n                                triggerKey={\n                                  scheduleDate ? scheduleDate : 'none'\n                                }\n                              />\n                            );\n                          }}\n                        </Form.Item>\n                      }\n                    >\n                      <Flex direction=\"row\" gap={'xs'}>\n                        <Form.Item\n                          noStyle\n                          name={['batch', 'enabled']}\n                          valuePropName=\"checked\"\n                        >\n                          <Checkbox\n                            onChange={(e) => {\n                              if (\n                                e.target.checked &&\n                                _.isEmpty(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                )\n                              ) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  dayjs().add(2, 'minutes').toISOString(),\n                                );\n                              } else if (e.target.checked === false) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  undefined,\n                                );\n                              }\n                              form.validateFields([['batch', 'scheduleDate']]);\n                            }}\n                          >\n                            {t('session.launcher.Enable')}\n                          </Checkbox>\n                        </Form.Item>\n                        <Form.Item\n                          noStyle\n                          // dependencies={[['batch', 'enabled']]}\n                          shouldUpdate={(prev, next) => {\n                            return (\n                              // @ts-ignore\n                              prev.batch?.enabled !== next.batch?.enabled\n                            );\n                          }}\n                        >\n                          {() => {\n                            const disabled =\n                              form.getFieldValue('batch')?.enabled !== true;\n                            return (\n                              <>\n                                <Form.Item\n                                  name={['batch', 'scheduleDate']}\n                                  noStyle\n                                  rules={[\n                                    {\n                                      // required: true,\n                                      validator: async (rule, value) => {\n                                        if (\n                                          value &&\n                                          dayjs(value).isBefore(dayjs())\n                                        ) {\n                                          return Promise.reject(\n                                            t(\n                                              'session.launcher.StartTimeMustBeInTheFuture',\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <DatePickerISO\n                                    disabled={disabled}\n                                    showTime\n                                    localFormat\n                                    disabledDate={(value) => {\n                                      return value.isBefore(\n                                        dayjs().startOf('day'),\n                                      );\n                                    }}\n                                  />\n                                </Form.Item>\n                                {/* <Form.Item\n                                      noStyle\n                                      name={['batch', 'scheduleTime']}\n                                    >\n                                      <TimePicker disabled={disabled} />\n                                    </Form.Item> */}\n                              </>\n                            );\n                          }}\n                        </Form.Item>\n                      </Flex>\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {(currentUserRole === 'admin' ||\n                  currentUserRole === 'superadmin') && (\n                  <SessionOwnerSetterCard\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  />\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableNumOfSessions\n                    enableResourcePresets\n                    showRemainingWarning\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFormItem\n                    filter={(vfolder) => {\n                      return (\n                        vfolder.status === 'ready' &&\n                        !vfolder.name?.startsWith('.')\n                      );\n                    }}\n                  />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('sessionName').length > 0 ||\n                        form.getFieldError(['batch', 'command']).length > 0 ||\n                        form.getFieldError(['batch', 'scheduleDate']).length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\" column={1}>\n                        <Descriptions.Item label={t('session.SessionType')}>\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        {!_.isEmpty(form.getFieldValue('sessionName')) && (\n                          <Descriptions.Item\n                            label={t('session.launcher.SessionName')}\n                          >\n                            {form.getFieldValue('sessionName')}\n                          </Descriptions.Item>\n                        )}\n                        {sessionType === 'batch' && (\n                          <>\n                            <Descriptions.Item\n                              label={t('session.launcher.StartUpCommand')}\n                              labelStyle={{ whiteSpace: 'nowrap' }}\n                              contentStyle={{\n                                overflow: 'auto',\n                              }}\n                            >\n                              {form.getFieldValue(['batch', 'command']) ? (\n                                <SourceCodeViewer language=\"shell\">\n                                  {form.getFieldValue(['batch', 'command'])}\n                                </SourceCodeViewer>\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                            <Descriptions.Item\n                              label={t('session.launcher.ScheduleTimeSimple')}\n                            >\n                              {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                                dayjs(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                ).format('LLL (Z)')\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                          </>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <SessionOwnerSetterPreviewCard\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                    />\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(form.getFieldValue('envvars'), (v, idx) => {\n                          return (\n                            form.getFieldError(['envvars', idx, 'variable'])\n                              .length > 0 ||\n                            form.getFieldError(['envvars', idx, 'value'])\n                              .length > 0\n                          );\n                        })\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" column={1}>\n                        <Descriptions.Item\n                          label={t('session.launcher.Project')}\n                        >\n                          {currentProject.name}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.Image')}>\n                          <Row\n                            style={{ flexFlow: 'nowrap', gap: token.sizeXS }}\n                          >\n                            <Col>\n                              <ImageMetaIcon\n                                image={\n                                  form.getFieldValue('environments')?.version ||\n                                  form.getFieldValue('environments')?.manual\n                                }\n                              />\n                            </Col>\n                            <Col>\n                              {/* {form.getFieldValue('environments').image} */}\n                              <Flex direction=\"row\">\n                                {form.getFieldValue('environments')?.manual ? (\n                                  <Typography.Text\n                                    code\n                                    style={{ wordBreak: 'break-all' }}\n                                    copyable={{\n                                      text: form.getFieldValue('environments')\n                                        ?.manual,\n                                    }}\n                                  >\n                                    {form.getFieldValue('environments')?.manual}\n                                  </Typography.Text>\n                                ) : (\n                                  <>\n                                    <SessionKernelTags\n                                      image={\n                                        form.getFieldValue('environments')\n                                          ?.version\n                                      }\n                                    />\n                                    {form.getFieldValue('environments')\n                                      ?.customizedTag ? (\n                                      <DoubleTag\n                                        values={[\n                                          {\n                                            label: 'Customized',\n                                            color: 'cyan',\n                                          },\n                                          {\n                                            label:\n                                              form.getFieldValue('environments')\n                                                ?.customizedTag,\n                                            color: 'cyan',\n                                          },\n                                        ]}\n                                      />\n                                    ) : null}\n                                    <Typography.Text\n                                      copyable={{\n                                        text: form.getFieldValue('environments')\n                                          ?.version,\n                                      }}\n                                    />\n                                  </>\n                                )}\n                              </Flex>\n                            </Col>\n                          </Row>\n                        </Descriptions.Item>\n                        {form.getFieldValue('envvars')?.length > 0 && (\n                          <Descriptions.Item\n                            label={t('session.launcher.EnvironmentVariable')}\n                          >\n                            {form.getFieldValue('envvars')?.length ? (\n                              <SyntaxHighlighter\n                                style={isDarkMode ? dark : undefined}\n                                codeTagProps={{\n                                  style: {\n                                    // fontFamily: 'monospace',\n                                  },\n                                }}\n                                // showLineNumbers\n                                customStyle={{\n                                  margin: 0,\n                                  width: '100%',\n                                }}\n                              >\n                                {_.map(\n                                  form.getFieldValue('envvars'),\n                                  (v: { variable: string; value: string }) =>\n                                    `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                                ).join('\\n')}\n                              </SyntaxHighlighter>\n                            ) : (\n                              <Typography.Text type=\"secondary\">\n                                -\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.ResourceAllocation')}\n                      status={\n                        _.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldError(['resource', key]).length > 0\n                          );\n                        }) ||\n                        form.getFieldError(['num_of_sessions']).length > 0 ||\n                        form.getFieldError('resourceGroup').length > 0\n                          ? 'error'\n                          : // : _.some(form.getFieldValue('resource'), (v, key) => {\n                            //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n                            //     // console.log(form.getFieldValue(['resource']));\n                            //     return (\n                            //       form.getFieldWarning(['resource', key]).length >\n                            //       0\n                            //     );\n                            //   })\n                            // ? 'warning'\n                            undefined\n                      }\n                      size=\"small\"\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Flex direction=\"column\" align=\"stretch\">\n                        {_.some(\n                          form.getFieldValue('resource')?.resource,\n                          (v, key) => {\n                            return (\n                              form.getFieldWarning(['resource', key]).length > 0\n                            );\n                          },\n                        ) && (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t(\n                              'session.launcher.EnqueueComputeSessionWarning',\n                            )}\n                          />\n                        )}\n\n                        <Descriptions column={2}>\n                          <Descriptions.Item\n                            label={t('general.ResourceGroup')}\n                            span={2}\n                          >\n                            {form.getFieldValue('resourceGroup') || (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t(\n                              'session.launcher.ResourceAllocationPerContainer',\n                            )}\n                            span={2}\n                          >\n                            <Flex\n                              direction=\"row\"\n                              align=\"start\"\n                              gap={'sm'}\n                              wrap=\"wrap\"\n                              style={{ flex: 1 }}\n                            >\n                              {form.getFieldValue('allocationPreset') ===\n                              'custom' ? (\n                                // t('session.launcher.CustomAllocation')\n                                ''\n                              ) : (\n                                <Tag>\n                                  {form.getFieldValue('allocationPreset')}\n                                </Tag>\n                              )}\n\n                              <ResourceNumbersOfSession\n                                resource={form.getFieldValue('resource')}\n                              />\n                              {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                            </Flex>\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.NumberOfContainer')}\n                          >\n                            {form.getFieldValue('cluster_size') === 1\n                              ? form.getFieldValue('num_of_sessions')\n                              : form.getFieldValue('cluster_size')}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.ClusterMode')}\n                          >\n                            {form.getFieldValue('cluster_mode') ===\n                            'single-node'\n                              ? t('session.launcher.SingleNode')\n                              : t('session.launcher.MultiNode')}\n                          </Descriptions.Item>\n                        </Descriptions>\n                        <Card\n                          size=\"small\"\n                          type=\"inner\"\n                          title={t('session.launcher.TotalAllocation')}\n                        >\n                          <Flex direction=\"row\" gap=\"xxs\">\n                            <ResourceNumbersOfSession\n                              resource={form.getFieldValue('resource')}\n                              containerCount={\n                                form.getFieldValue('cluster_size') === 1\n                                  ? form.getFieldValue('num_of_sessions')\n                                  : form.getFieldValue('cluster_size')\n                              }\n                            />\n                          </Flex>\n                        </Card>\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {/* {console.log(_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames')]))} */}\n                      {/* {_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames').length]) > 0 ? ( */}\n                      <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n                        {form.getFieldValue('mounts')?.length > 0 ? (\n                          <Table\n                            rowKey=\"name\"\n                            size=\"small\"\n                            pagination={false}\n                            columns={[\n                              {\n                                dataIndex: 'name',\n                                title: t('data.folders.Name'),\n                              },\n                              {\n                                dataIndex: 'alias',\n                                title: t('session.launcher.FolderAlias'),\n                                render: (value, record) => {\n                                  return _.isEmpty(value) ? (\n                                    <Typography.Text\n                                      type=\"secondary\"\n                                      style={{\n                                        opacity: 0.7,\n                                      }}\n                                    >\n                                      {`/home/work/${record.name}`}\n                                    </Typography.Text>\n                                  ) : (\n                                    value\n                                  );\n                                },\n                              },\n                            ]}\n                            dataSource={_.map(\n                              form.getFieldValue('mounts'),\n                              (v) => {\n                                return {\n                                  name: v,\n                                  alias:\n                                    form.getFieldValue('vfoldersAliasMap')?.[v],\n                                };\n                              },\n                            )}\n                          ></Table>\n                        ) : (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t('session.launcher.NoFolderMounted')}\n                          />\n                        )}\n                        {form.getFieldValue('autoMountedFolderNames')?.length >\n                        0 ? (\n                          <Descriptions size=\"small\">\n                            <Descriptions.Item\n                              label={t('data.AutomountFolders')}\n                            >\n                              {_.map(\n                                form.getFieldValue('autoMountedFolderNames'),\n                                (name) => {\n                                  return <Tag>{name}</Tag>;\n                                },\n                              )}\n                            </Descriptions.Item>\n                          </Descriptions>\n                        ) : null}\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n\n                            {!_.isArray(form.getFieldValue('ports')) ||\n                            form.getFieldValue('ports')?.length === 0 ? (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            ) : null}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        webuiNavigate('/session/start');\n                        form.resetFields();\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </Flex>\n                  <Flex\n                    data-test-id=\"neo-session-launcher-tour-step-navigation\"\n                    direction=\"row\"\n                    gap=\"sm\"\n                  >\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Flex\n            data-test-id=\"neo-session-launcher-tour-step\"\n            style={{ position: 'sticky', top: 80 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Flex>\n        )}\n      </Flex>\n      <SessionTemplateModal\n        onRequestClose={(formValue) => {\n          if (formValue) {\n            const fieldsValue = _.merge(\n              {\n                // reset fields related to optional and nested fields\n                sessionName: '',\n                ports: [],\n                mounts: [],\n                vfoldersAliasMap: {},\n                bootstrap_script: '',\n                num_of_sessions: 1,\n                owner: {\n                  enabled: false,\n                  accesskey: '',\n                  domainName: '',\n                  email: undefined,\n                  project: '',\n                  resourceGroup: '',\n                },\n                environments: {\n                  manual: '',\n                },\n                batch: {\n                  enabled: false,\n                  command: undefined,\n                  scheduleDate: undefined,\n                },\n              } as Omit<\n                Required<OptionalFieldsOnly<SessionLauncherFormValue>>,\n                'autoMountedFolderNames'\n              >,\n              formValue,\n            );\n\n            if (!_.isEmpty(fieldsValue.sessionName)) {\n              fieldsValue.sessionName =\n                fieldsValue.sessionName + '-' + generateRandomString(4);\n            }\n            form.setFieldsValue(fieldsValue);\n            setCurrentStep(steps.length - 1);\n            form.validateFields().catch(() => {});\n          }\n          toggleIsOpenTemplateModal();\n        }}\n        open={isOpenTemplateModal}\n      />\n      {currentStep === steps.length - 1 ? (\n        <ErrorBoundary fallback={null}>\n          <SessionLauncherValidationTour\n            open={validationTourOpen}\n            onClose={() => {\n              setValidationTourOpen(false);\n            }}\n            scrollIntoViewOptions\n          />\n        </ErrorBoundary>\n      ) : undefined}\n    </Flex>\n  );\n};\n\ntype FormOrResourceRequired = {\n  resource: ResourceAllocationFormValue['resource'];\n  containerCount?: number;\n};\n\nexport const ResourceNumbersOfSession: React.FC<FormOrResourceRequired> = ({\n  resource,\n  containerCount = 1,\n}) => {\n  return (\n    <>\n      {_.map(\n        _.omit(resource, 'shmem', 'accelerator', 'acceleratorType'),\n        (value, type) => {\n          return (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (iSizeToSize(value.toString(), 'b')?.number || 0) *\n                      containerCount +\n                    ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: resource.shmem\n                  ? (iSizeToSize(resource.shmem, 'b')?.number || 0) *\n                    containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {resource &&\n      resource.accelerator &&\n      resource.acceleratorType &&\n      _.isNumber(resource.accelerator) ? (\n        <ResourceNumber\n          // @ts-ignore\n          type={resource.acceleratorType}\n          value={_.toString(resource.accelerator * containerCount)}\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nexport default SessionLauncherPage;\n"],"names":["_ref","status","extraButtonTitle","onClickExtraButton","extra","style","cardProps","token","theme","useToken","_extra","_jsx","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","undefined","onClick","children","Card","className","_","borderColor","colorSuccess","React","ref","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","DatePicker","dayjs","_value","_value2","_value2$tz","newValue","format","tz","toISOString","props","form","Form","useFormInstance","useEffect","setFieldValue","name","Item","hidden","ImageAliasNameAndBaseVersionTags","image","getImageAliasName","getBaseVersion","tagAlias","useBackendAIImageMetaData","DoubleTag","values","label","color","BaseVersionTags","_ref2","Tag","BaseImageTags","_ref3","getBaseImage","ArchitectureTags","_ref4","getArchitecture","LangTags","_ref5","getImageLang","ConstraintTags","_ref6","tag","labels","highlightKeyword","getConstraints","constraints","_jsxs","Flex","direction","align","TextHighlighter","keyword","SessionKernelTags","_ref7","bordered","_Fragment","node","v0","v1","v2","v3","v4","v5","hash","MIN_PORT","MAX_PORT","PortTag","inValid","tagProps","isValidPortStr","portStr","isPortRangeStr","splitPortRange","split","start","end","map","v","parseInt","toString","portRange","length","transformPortValuesToNumbers","parsePortRangeToNumbers","formItemProps","t","useTranslation","baiClient","useSuspendedBackendaiClient","tooltip","Trans","i18nKey","rules","validator","rule","_config","maxCountForPreopenPorts","Promise","resolve","reject","Error","count","allPorts","port","Select","mode","tagRender","hasDuplicated","getFieldValue","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","otherProps","hasOpenedValidationTour","setHasOpenedValidationTour","useBAISettingUserState","steps","title","description","target","_document$getElements","document","getElementsByClassName","_document$getElements2","_document$getElements3","querySelector","Tour","min","message","max","f","test","Input","allowClear","autoComplete","autoSelectOption","selectProps","options","useLayoutEffect","SessionOwnerSetterPreviewCard","isActive","useWatch","currentUserRole","useCurrentUserRole","BAICard","size","getFieldError","Descriptions","column","fetchingEmail","setFetchingEmail","useState","relayEvn","useRelayEnvironment","data","isFetching","useTanQuery","queryKey","queryFn","email","query","_SessionOwnerSetterCardQuery","require","fetchQuery","toPromise","enabled","ownerKeypairs","keypairs","owner","user","nonExistentOwner","valuePropName","noStyle","Switch","styles","header","borderBottom","body","display","HiddenFormItem","domain_name","dependencies","required","flex","validateStatus","help","Search","onSearch","validateFields","then","catch","setFieldsValue","accesskey","project","resourceGroup","loading","enterButton","CheckIcon","BAISelect","k","access_key","disabled","Row","gutter","marginSM","Col","span","groups","g","Suspense","fallback","ResourceGroupSelect","projectName","autoSelectDefault","useRecentSessionHistory","recentSessionHistory","setRecentSessionHistory","push","useEventNotStable","id","params","createdAt","newRecentSessionHistory","generateRandomString","Date","slice","clear","remove","filter","item","modalProps","sessionHistory","selectedHistoryId","setSelectedHistoryId","parsedSessionHistory","useMemo","history","URLSearchParams","formValues","JSON","parse","get","BAIModal","okButtonProps","okText","onOk","_$find","_modalProps$onRequest","onRequestClose","call","onCancel","Divider","margin","Table","showHeader","scroll","x","dataSource","pagination","rowSelection","selectedRowKeys","onSelect","record","onRow","rowKey","columns","dataIndex","render","version","imageStr","environments","manual","gap","ImageMetaIcon","Typography","Text","sessionName","resource","ResourceNumbersOfSession","fromNow","containerCount","_iSizeToSize","_iSizeToSize2","ResourceNumber","iSizeToSize","number","opts","shmem","accelerator","acceleratorType","generateSessionId","text","possible","i","charAt","Math","floor","random","SessionLauncherPage","_baiClient$_config3","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue7","_form$getFieldValue8","_form$getFieldValue9","_form$getFieldValue10","_form$getFieldValue11","_form$getFieldValue12","_form$getFieldValue13","_form$getFieldValue14","_form$getFieldValue16","_form$getFieldValue17","app","App","useApp","sessionMode","mainContentDivRef","useAtomValue","mainContentDivRefState","currentGlobalResourceGroup","setCurrentGlobalResourceGroup","useCurrentResourceGroupState","isStartingSession","setIsStartingSession","INITIAL_FORM_VALUES","_baiClient$_config","_baiClient$_config2","sessionType","allocationPreset","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","command","scheduleDate","envvars","default_session_environment","environment","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","StepParam","withDefault","NumberParam","FormValuesParam","JsonParam","AppOptionParam","step","currentStep","formValuesFromQueryParams","redirectTo","appOption","appOptionFromQueryParams","setQuery","useQueryParams","StringParam","search","useLocation","isDarkMode","useThemeMode","webuiNavigate","useWebUINavigate","currentProject","useCurrentProjectValue","isOpenTemplateModal","toggle","toggleIsOpenTemplateModal","useToggle","upsertNotification","useSetBAINotification","pushSessionHistory","run","syncFormToURLWithDebounce","useDebounceFn","currentValue","getFieldsValue","sanitizeSensitiveEnv","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","useForm","mergedInitialValues","_mainContentDivRef$cu","current","scrollTo","preserve","key","PlayCircleFilled","currentStepKey","hasError","getFieldsError","errors","finalStepLastValidateTime","setFinalStepLastValidateTime","useUpdatableState","error","finally","setValidationTourOpen","validationTourOpen","justifyContent","maxWidth","justify","Title","level","marginTop","paddingRight","paddingLeft","Provider","onFormChange","info","layout","requiredMark","initialValues","Radio","code","SessionNameFormItem","TextArea","autoSize","shouldUpdate","prev","next","BAIIntervalText","delay","callback","isBefore","triggerKey","Checkbox","checked","add","_prev$batch","_next$batch","_form$getFieldValue","async","DatePickerISO","showTime","disabledDate","startOf","SessionOwnerSetterCard","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableNumOfSessions","enableResourcePresets","showRemainingWarning","checkedChildren","unCheckedChildren","_prev$hpcOptimization","_next$hpcOptimization","marginMD","xs","sm","InputNumber","stringMode","VFolderTableFormItem","vfolder","_vfolder$name","startsWith","PortSelectFormItem","findIndex","labelStyle","whiteSpace","contentStyle","overflow","SourceCodeViewer","language","idx","flexFlow","sizeXS","wordBreak","copyable","customizedTag","SyntaxHighlighter","dark","codeTagProps","customStyle","variable","join","getFieldWarning","Alert","showIcon","wrap","opacity","_form$getFieldValue15","alias","Popconfirm","onConfirm","resetFields","QuestionCircleOutlined","danger","LeftOutlined","Tooltip","PlayCircleOutlined","startSession","usedSearchParams","_values$owner","mounts","modal","confirm","content","imageFullName","kernelName","architecture","sessionInfo","config","bootstrap_script","startsAt","startupCommand","group_name","domain","domainName","scaling_group","owner_access_key","cluster_mode","cluster_size","maxWaitSeconds","cpu","mem","compareNumberWithUnits","mount_map","vfoldersAliasMap","env","preopen_ports","ports","sessionPromises","num_of_sessions","formattedSessionName","createIfNotExists","res","created","err","_err$message","includes","backupTo","window","location","pathname","backgroundTask","promise","all","statusDescriptions","pending","resolved","duration","firstSession","sessionId","appOptions","kernelId","service_info","servicePorts","Array","isArray","a","globalThis","appLauncher","showLauncher","to","toText","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","items","s","SessionTemplateModal","formValue","fieldsValue","SessionLauncherValidationTour","scrollIntoViewOptions"],"sourceRoot":""}