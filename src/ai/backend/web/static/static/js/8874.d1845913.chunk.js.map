{"version":3,"file":"static/js/8874.d1845913.chunk.js","mappings":"gPAUA,MAAMA,GAAsBC,EAAAA,EAAAA,KAAK,GACjCC,SAASC,iBAAiB,kCAAkC,KAC1DC,EAAAA,WAAWC,IAAIL,GAAqB,EAAK,IAE3CE,SAASC,iBAAiB,qCAAqC,KAC7DC,EAAAA,WAAWC,IAAIL,GAAqB,EAAM,IAG5C,MAwCA,EAxC6BM,KAC3B,MAAOC,IAAYC,EAAAA,EAAAA,eAAc,SAAUC,EAAAA,cAAgB,GACrDC,EAA6B,OAARH,QAAQ,IAARA,OAAQ,EAARA,EAAUI,WAAW,IAAK,IAC/CC,GAAiBC,EAAAA,EAAAA,MACjBC,GAAwBC,EAAAA,EAAAA,MAExBC,GAAkBC,EAAAA,EAAAA,IAAajB,GA+BrC,OA9BAkB,EAAAA,EAAAA,YAAU,KACR,GAAIF,GAAmBT,EAAU,CAC/B,MAAMY,EAAS,IAAIC,gBACnBD,EAAOd,IAAI,WAAYO,EAAeS,IAEpCP,EAAsB,CACpBQ,OAAQ,MACRC,IAAI,YAADC,OAAcL,EAAOM,cAGzBC,MAAMC,IACL,MAAMC,EAAkB,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAUE,MAEvBD,GAAYA,EAAQP,KAAOX,IAE9BR,SAAS4B,cACP,IAAIC,YAAY,sBAAuB,CACrCC,OAAQ,CACNJ,aAGL,IAEFK,OAAM,QAGX,IAEC,CAACjB,EAAiBT,IAEd,IAAI,C","sources":["components/FolderExplorerOpener.tsx"],"sourcesContent":["import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { jotaiStore } from './DefaultProviders';\nimport { VFolder } from './VFolderSelect';\nimport { atom, useAtomValue } from 'jotai';\nimport { useEffect } from 'react';\nimport { StringParam, useQueryParam } from 'use-query-params';\n\n// TODO: Separate Folder Explorer from `backend-ai-data-view` and make it opened directly on all pages.\n\nconst isDataViewReadyAtom = atom(false);\ndocument.addEventListener('backend-ai-data-view:connected', () => {\n  jotaiStore.set(isDataViewReadyAtom, true);\n});\ndocument.addEventListener('backend-ai-data-view:disconnected', () => {\n  jotaiStore.set(isDataViewReadyAtom, false);\n});\n\nconst FolderExplorerOpener = () => {\n  const [folderId] = useQueryParam('folder', StringParam) || '';\n  const normalizedFolderId = folderId?.replaceAll('-', '');\n  const currentProject = useCurrentProjectValue();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n\n  const isDataViewReady = useAtomValue(isDataViewReadyAtom);\n  useEffect(() => {\n    if (isDataViewReady && folderId) {\n      const search = new URLSearchParams();\n      search.set('group_id', currentProject.id);\n      (\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/folders?${search.toString()}`,\n        }) as Promise<VFolder[]>\n      )\n        .then((vFolders) => {\n          const vFolder = vFolders?.find(\n            // `id` of `/folders` API is not UUID, but UUID without `-`\n            (vFolder) => vFolder.id === normalizedFolderId,\n          );\n          document.dispatchEvent(\n            new CustomEvent('folderExplorer:open', {\n              detail: {\n                vFolder,\n              },\n            }),\n          );\n        })\n        .catch(() => {\n          // do nothing\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDataViewReady, folderId]); // don't need to watch `folderId` because this used only once right after the backend-ai-data-view is ready\n\n  return null;\n};\n\nexport default FolderExplorerOpener;\n"],"names":["isDataViewReadyAtom","atom","document","addEventListener","jotaiStore","set","FolderExplorerOpener","folderId","useQueryParam","StringParam","normalizedFolderId","replaceAll","currentProject","useCurrentProjectValue","baiRequestWithPromise","useBaiSignedRequestWithPromise","isDataViewReady","useAtomValue","useEffect","search","URLSearchParams","id","method","url","concat","toString","then","vFolders","vFolder","find","dispatchEvent","CustomEvent","detail","catch"],"sourceRoot":""}