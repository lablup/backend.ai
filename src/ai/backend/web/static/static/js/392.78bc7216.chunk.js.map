{"version":3,"file":"static/js/392.78bc7216.chunk.js","mappings":"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","sources":["components/DoubleTag.tsx","components/ImageEnvironmentSelectFormItems.tsx","components/ImageMetaIcon.tsx","components/InputNumberWithSlider.tsx","hooks/hooksUsingRelay.tsx","hooks/useResourceLimitAndRemaining.tsx","components/DynamicUnitInputNumber.tsx","components/DynamicUnitInputNumberWithSlider.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/__generated__/ImageEnvironmentSelectFormItemsQuery.graphql.ts","components/__generated__/ResourcePresetSelectQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql.ts"],"sourcesContent":["import Flex from './Flex';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: ValueType;\n  color?: string;\n};\n\ntype ValueType = string | React.ReactNode;\nconst DoubleTag: React.FC<{\n  values?: ValueType[] | DoubleTagObjectValue[];\n}> = ({ values = [] }) => {\n  if (values.length === 0) return null;\n  let objectValues: DoubleTagObjectValue[];\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) => {\n        return (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {objValue.label}\n          </Tag>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","import {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\n// @ts-ignore\nimport cssRaw from './ImageEnvironmentSelectFormItems.css?raw';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  ImageEnvironmentSelectFormItemsQuery,\n  ImageEnvironmentSelectFormItemsQuery$data,\n} from './__generated__/ImageEnvironmentSelectFormItemsQuery.graphql';\nimport { Divider, Form, Input, RefSelectProps, Select, Tag, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport type Image = NonNullable<\n  NonNullable<ImageEnvironmentSelectFormItemsQuery$data>['images']\n>[0];\n\ntype ImageGroup = {\n  groupName: string;\n  environmentGroups: {\n    environmentName: string;\n    displayName: string;\n    prefix?: string;\n    images: Image[];\n  }[];\n};\n\nexport type ImageEnvironmentFormInput = {\n  environments: {\n    environment: string;\n    version: string;\n    image: Image | undefined;\n    manual?: string;\n  };\n};\n\ninterface ImageEnvironmentSelectFormItemsProps {\n  filter?: (image: Image) => boolean;\n  showPrivate?: boolean;\n}\n\nconst getImageFullName = (image: Image) => {\n  return image\n    ? `${image.registry}/${image.name}:${image.tag}@${image.architecture}`\n    : undefined;\n};\n\nfunction compareVersions(version1: string, version2: string): number {\n  const v1 = version1.split('.').map(Number);\n  const v2 = version2.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const num1 = v1[i] || 0;\n    const num2 = v2[i] || 0;\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nconst isPrivateImage = (image: Image) => {\n  return _.some(image?.labels, (label) => {\n    return (\n      label?.key === 'ai.backend.features' &&\n      label?.value?.split(' ').includes('private')\n    );\n  });\n};\n\nconst ImageEnvironmentSelectFormItems: React.FC<\n  ImageEnvironmentSelectFormItemsProps\n> = ({ filter, showPrivate }) => {\n  const form = Form.useFormInstance<ImageEnvironmentFormInput>();\n  const environments = Form.useWatch('environments', { form, preserve: true });\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [environmentSearch, setEnvironmentSearch] = useState('');\n  const [versionSearch, setVersionSearch] = useState('');\n  const { t } = useTranslation();\n  const [metadata, { getImageMeta }] = useBackendAIImageMetaData();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n\n  const envSelectRef = useRef<RefSelectProps>(null);\n  const versionSelectRef = useRef<RefSelectProps>(null);\n\n  const { images } = useLazyLoadQuery<ImageEnvironmentSelectFormItemsQuery>(\n    graphql`\n      query ImageEnvironmentSelectFormItemsQuery($installed: Boolean) {\n        images(is_installed: $installed) {\n          name\n          humanized_name\n          tag\n          registry\n          architecture\n          digest\n          installed\n          resource_limits {\n            key\n            min\n            max\n          }\n          labels {\n            key\n            value\n          }\n        }\n      }\n    `,\n    {\n      installed: true,\n    },\n    {\n      fetchPolicy: 'store-and-network',\n    },\n  );\n\n  // If not initial value, select first value\n  // auto select when relative field is changed\n  useEffect(() => {\n    if (!_.isEmpty(environments?.manual)) {\n      // set undefined fields related to environments when manual is set\n      if (environments.environment || environments.version) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n          },\n        });\n      }\n      return;\n    }\n\n    let matchedEnvironmentByVersion:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    let matchedImageByVersion: Image | undefined;\n    const version = form.getFieldValue('environments')?.version;\n\n    version &&\n      _.find(imageGroups, (group) => {\n        matchedEnvironmentByVersion = _.find(\n          group.environmentGroups,\n          (environment) => {\n            matchedImageByVersion = _.find(\n              environment.images,\n              (image) => getImageFullName(image) === version,\n            );\n            return !!matchedImageByVersion; // break iteration\n          },\n        );\n        return !!matchedEnvironmentByVersion; // break iteration\n      });\n\n    // if matchedEnvironmentByVersion is not existed, select first values\n    let nextEnvironment: ImageGroup['environmentGroups'][0] | undefined;\n    let nextImage: Image | undefined;\n    if (matchedEnvironmentByVersion) {\n      nextEnvironment = matchedEnvironmentByVersion;\n      nextImage = matchedImageByVersion;\n    } else {\n      nextEnvironment = imageGroups[0]?.environmentGroups[0];\n      nextImage = nextEnvironment?.images[0];\n    }\n\n    if (nextImage) {\n      if (\n        !matchedEnvironmentByVersion &&\n        baiClient._config.allow_manual_image_name_for_session &&\n        version\n      ) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n            manual: version,\n          },\n        });\n      } else {\n        form.setFieldsValue({\n          environments: {\n            environment: nextEnvironment.environmentName,\n            version: getImageFullName(nextImage),\n            image: nextImage,\n          },\n        });\n      }\n    } else if (baiClient._config.allow_manual_image_name_for_session) {\n      // if no image is available, only set manual if it's allowed\n      form.setFieldValue(['environments', 'manual'], version);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environments?.version, environments?.manual]); // environments?.environment,\n\n  const imageGroups: ImageGroup[] = useMemo(\n    () =>\n      _.chain(images)\n        .filter((image) => {\n          return (\n            (showPrivate ? true : !isPrivateImage(image)) &&\n            (filter ? filter(image) : true)\n          );\n        })\n        .groupBy((image) => {\n          // group by using `group` property of image info\n          return (\n            metadata?.imageInfo[getImageMeta(getImageFullName(image) || '').key]\n              ?.group || 'Custom Environments'\n          );\n        })\n        .map((images, groupName) => {\n          return {\n            groupName,\n            environmentGroups: _.chain(images)\n              // sub group by using (environment) `name` property of image info\n              .groupBy((image) => {\n                return (\n                  // metadata?.imageInfo[\n                  //   getImageMeta(getImageFullName(image) || \"\").key\n                  // ]?.name || image?.name\n                  image?.name\n                );\n              })\n              .map((images, environmentName) => {\n                const imageKey = environmentName.split('/')?.[1];\n                const displayName =\n                  imageKey && metadata?.imageInfo[imageKey]?.name;\n\n                return {\n                  environmentName,\n                  displayName:\n                    displayName ||\n                    (_.last(environmentName.split('/')) as string),\n                  prefix: _.chain(environmentName)\n                    .split('/')\n                    .dropRight(1)\n                    .join('/')\n                    .value(),\n                  images: images.sort((a, b) =>\n                    compareVersions(\n                      // latest version comes first\n                      b?.tag?.split('-')?.[0] ?? '',\n                      a?.tag?.split('-')?.[0] ?? '',\n                    ),\n                  ),\n                };\n              })\n\n              .sortBy((item) => item.displayName)\n              .value(),\n          };\n        })\n        .sortBy((item) => item.groupName)\n        .value(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [images, metadata, filter, showPrivate],\n  );\n\n  // support search image by full name\n  const { fullNameMatchedImage } = useMemo(() => {\n    let fullNameMatchedImage: Image | undefined;\n    let fullNameMatchedImageGroup:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    if (environmentSearch.length) {\n      _.chain(\n        imageGroups\n          .flatMap((group) => group.environmentGroups)\n          .find((envGroup) => {\n            fullNameMatchedImageGroup = envGroup;\n            fullNameMatchedImage = _.find(envGroup.images, (image) => {\n              return getImageFullName(image) === environmentSearch;\n            });\n            return !!fullNameMatchedImage;\n          }),\n      ).value();\n    }\n    return {\n      fullNameMatchedImage,\n      fullNameMatchedImageGroup,\n    };\n  }, [environmentSearch, imageGroups]);\n\n  return (\n    <>\n      <style>{cssRaw}</style>\n      <Form.Item\n        className=\"image-environment-select-form-item\"\n        name={['environments', 'environment']}\n        label={`${t('session.launcher.Environments')} / ${t(\n          'session.launcher.Version',\n        )}`}\n        rules={[{ required: _.isEmpty(environments?.manual) }]}\n        style={{ marginBottom: 10 }}\n      >\n        <Select\n          ref={envSelectRef}\n          showSearch\n          className=\"image-environment-select\"\n          // open={true}\n          // autoClearSearchValue\n          searchValue={environmentSearch}\n          onSearch={setEnvironmentSearch}\n          defaultActiveFirstOption={true}\n          optionFilterProp=\"filterValue\"\n          onChange={(value) => {\n            if (fullNameMatchedImage) {\n              form.setFieldsValue({\n                environments: {\n                  environment: fullNameMatchedImage?.name || '',\n                  version: getImageFullName(fullNameMatchedImage),\n                  image: fullNameMatchedImage,\n                },\n              });\n            }\n            // NOTE: when user set environment only then set the version to the first item\n            else {\n              const firstInListImage: Image = imageGroups\n                .flatMap((group) => group.environmentGroups)\n                .filter((envGroup) => envGroup.environmentName === value)[0]\n                .images[0];\n              form.setFieldsValue({\n                environments: {\n                  environment: firstInListImage?.name || '',\n                  version: getImageFullName(firstInListImage),\n                  image: firstInListImage,\n                },\n              });\n            }\n          }}\n          disabled={\n            baiClient._config.allow_manual_image_name_for_session &&\n            !_.isEmpty(environments?.manual)\n          }\n        >\n          {fullNameMatchedImage ? (\n            <Select.Option\n              value={fullNameMatchedImage?.name}\n              filterValue={getImageFullName(fullNameMatchedImage)}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"center\"\n                gap=\"xs\"\n                style={{ display: 'inline-flex' }}\n              >\n                <ImageMetaIcon\n                  image={getImageFullName(fullNameMatchedImage) || ''}\n                  style={{\n                    width: 15,\n                    height: 15,\n                  }}\n                />\n                {getImageFullName(fullNameMatchedImage)}\n              </Flex>\n            </Select.Option>\n          ) : (\n            _.map(imageGroups, (group) => {\n              return (\n                <Select.OptGroup key={group.groupName} label={group.groupName}>\n                  {_.map(group.environmentGroups, (environmentGroup) => {\n                    const firstImage = environmentGroup.images[0];\n                    const currentMetaImageInfo =\n                      metadata?.imageInfo[\n                        environmentGroup.environmentName.split('/')?.[1]\n                      ];\n\n                    const extraFilterValues: string[] = [];\n                    let environmentPrefixTag = null;\n                    if (\n                      environmentGroup.prefix &&\n                      !['lablup', 'cloud', 'stable'].includes(\n                        environmentGroup.prefix,\n                      )\n                    ) {\n                      extraFilterValues.push(environmentGroup.prefix);\n                      environmentPrefixTag = (\n                        <Tag color=\"purple\">\n                          <TextHighlighter keyword={environmentSearch}>\n                            {environmentGroup.prefix}\n                          </TextHighlighter>\n                        </Tag>\n                      );\n                    }\n\n                    const tagsFromMetaImageInfoLabel = _.map(\n                      currentMetaImageInfo?.label,\n                      (label) => {\n                        if (\n                          _.isUndefined(label.category) &&\n                          label.tag &&\n                          label.color\n                        ) {\n                          extraFilterValues.push(label.tag);\n                          return (\n                            <Tag color={label.color} key={label.tag}>\n                              <TextHighlighter\n                                keyword={environmentSearch}\n                                key={label.tag}\n                              >\n                                {label.tag}\n                              </TextHighlighter>\n                            </Tag>\n                          );\n                        }\n                        return null;\n                      },\n                    );\n                    return (\n                      <Select.Option\n                        key={environmentGroup.environmentName}\n                        value={environmentGroup.environmentName}\n                        filterValue={\n                          environmentGroup.displayName +\n                          '\\t' +\n                          extraFilterValues.join('\\t')\n                        }\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\" align=\"center\" gap=\"xs\">\n                            <ImageMetaIcon\n                              image={getImageFullName(firstImage) || ''}\n                              style={{\n                                width: 15,\n                                height: 15,\n                              }}\n                            />\n                            <TextHighlighter keyword={environmentSearch}>\n                              {environmentGroup.displayName}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            // style={{ flex: 1 }}\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {environmentPrefixTag}\n                            {tagsFromMetaImageInfoLabel}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  })}\n                </Select.OptGroup>\n              );\n            })\n          )}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prev, cur) =>\n          prev.environments?.environment !== cur.environments?.environment\n        }\n      >\n        {({ getFieldValue }) => {\n          let selectedEnvironmentGroup:\n            | ImageGroup['environmentGroups'][0]\n            | undefined;\n          _.find(imageGroups, (group) => {\n            return _.find(group.environmentGroups, (environment) => {\n              if (\n                environment.environmentName ===\n                getFieldValue('environments')?.environment\n              ) {\n                selectedEnvironmentGroup = environment;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          });\n          return (\n            <Form.Item\n              className=\"image-environment-select-form-item\"\n              name={['environments', 'version']}\n              rules={[{ required: _.isEmpty(environments?.manual) }]}\n            >\n              <Select\n                ref={versionSelectRef}\n                onChange={(value) => {\n                  const selectedImage = _.find(images, (image) => {\n                    return getImageFullName(image) === value;\n                  });\n                  form.setFieldValue(['environments', 'image'], selectedImage);\n                }}\n                showSearch\n                searchValue={versionSearch}\n                onSearch={setVersionSearch}\n                // autoClearSearchValue\n                optionFilterProp=\"filterValue\"\n                // optionLabelProp=\"label\"\n                dropdownRender={(menu) => (\n                  <>\n                    <Flex\n                      style={{\n                        fontWeight: token.fontWeightStrong,\n                        paddingLeft: token.paddingSM,\n                      }}\n                    >\n                      {t('session.launcher.Version')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Base')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Architecture')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Requirements')}\n                    </Flex>\n                    <Divider style={{ margin: '8px 0' }} />\n                    {menu}\n                  </>\n                )}\n                disabled={\n                  baiClient._config.allow_manual_image_name_for_session &&\n                  !_.isEmpty(environments?.manual)\n                }\n              >\n                {_.map(\n                  _.uniqBy(selectedEnvironmentGroup?.images, 'digest'),\n\n                  (image) => {\n                    const [version, tag, ...requirements] = image?.tag?.split(\n                      '-',\n                    ) || ['', '', ''];\n\n                    let tagAlias = metadata?.tagAlias[tag];\n                    if (!tagAlias) {\n                      for (const [key, replaceString] of Object.entries(\n                        metadata?.tagReplace || {},\n                      )) {\n                        const pattern = new RegExp(key);\n                        if (pattern.test(tag)) {\n                          tagAlias = tag?.replace(pattern, replaceString);\n                        }\n                      }\n                      if (!tagAlias) {\n                        tagAlias = tag;\n                      }\n                    }\n\n                    const extraFilterValues: string[] = [];\n                    const requirementTags =\n                      requirements.length > 0\n                        ? _.map(requirements, (requirement, idx) => (\n                            <DoubleTag\n                              key={idx}\n                              values={_.split(\n                                metadata?.tagAlias[requirement] || requirement,\n                                ':',\n                              ).map((str) => {\n                                extraFilterValues.push(str);\n                                return (\n                                  <TextHighlighter\n                                    keyword={versionSearch}\n                                    key={str}\n                                  >\n                                    {str}\n                                  </TextHighlighter>\n                                );\n                              })}\n                            />\n                          ))\n                        : '-';\n                    return (\n                      <Select.Option\n                        key={image?.digest}\n                        value={getImageFullName(image)}\n                        filterValue={[\n                          version,\n                          tagAlias,\n                          image?.architecture,\n                          ...extraFilterValues,\n                        ].join('\\t')}\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\">\n                            <TextHighlighter keyword={versionSearch}>\n                              {version}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {tagAlias}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.architecture}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {requirementTags}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  },\n                )}\n              </Select>\n            </Form.Item>\n          );\n        }}\n      </Form.Item>\n      <Form.Item\n        label={t('session.launcher.ManualImageName')}\n        name={['environments', 'manual']}\n        style={{\n          display: baiClient._config.allow_manual_image_name_for_session\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Input\n          allowClear\n          onChange={(value) => {\n            if (!_.isEmpty(value)) {\n              form.setFieldsValue({\n                environments: {\n                  environment: undefined,\n                  version: undefined,\n                  image: undefined,\n                },\n              });\n            } else {\n            }\n          }}\n        />\n      </Form.Item>\n      <Form.Item noStyle hidden name={['environments', 'image']}>\n        <Input />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ImageEnvironmentSelectFormItems;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n  alt?: string | null;\n}> = ({ image, style = {} }, bordered, alt = '') => {\n  const [, { getImageIcon }] = useBackendAIImageMetaData();\n\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: '1em',\n        height: '1em',\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","import Flex from './Flex';\nimport { useControllableValue } from 'ahooks';\nimport { InputNumber, Slider, InputNumberProps, SliderSingleProps } from 'antd';\nimport { SliderRangeProps } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\n\ntype OmitControlledProps<T> = Omit<T, 'value' | 'onChange'>;\n\ninterface InputNumberWithSliderProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  disabled?: boolean;\n  value?: number;\n  onChange?: (value: number) => void;\n  inputNumberProps?: OmitControlledProps<InputNumberProps>;\n  sliderProps?:\n    | OmitControlledProps<SliderSingleProps>\n    | OmitControlledProps<SliderRangeProps>;\n}\nconst InputNumberWithSlider: React.FC<InputNumberWithSliderProps> = ({\n  min,\n  max,\n  step,\n  disabled,\n  inputNumberProps,\n  sliderProps,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableValue(otherProps);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    // when step is 1, make sure the value is integer\n    if (step === 1 && value % 1 !== 0) {\n      setValue(Math.round(value));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [step]);\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        align=\"stretch\"\n        direction=\"column\"\n      >\n        <InputNumber\n          ref={inputRef}\n          max={max}\n          min={min}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={setValue}\n          onBlur={() => {\n            if (_.isNumber(step) && step > 0) {\n              const decimalCount = step.toString().split('.')[1]?.length || 0;\n              setValue(\n                _.toNumber(\n                  (\n                    Math.round(\n                      _.toNumber(inputRef.current?.value || '0') / step,\n                    ) * step\n                  ).toFixed(decimalCount),\n                ),\n              );\n            }\n          }}\n          {...inputNumberProps}\n        />\n      </Flex>\n      <Flex direction=\"column\" align=\"stretch\" style={{ flex: 3 }}>\n        <Slider\n          max={max}\n          min={0}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={(value: any) => {\n            if (min !== undefined && value < min) {\n              return;\n            } else {\n              setValue(value);\n            }\n          }}\n          {...sliderProps}\n          // remove marks that are greater than max\n          marks={_.omitBy(sliderProps?.marks, (option, key) => {\n            return _.isNumber(max) ? _.parseInt(key) > max : false;\n          })}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default InputNumberWithSlider;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { hooksUsingRelay_KeyPairQuery } from './__generated__/hooksUsingRelay_KeyPairQuery.graphql';\nimport { hooksUsingRelay_KeyPairResourcePolicyQuery } from './__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport { useCallback } from 'react';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ninterface FetchOptions {\n  fetchKey?: string | number;\n  fetchPolicy?: FetchPolicy;\n}\nexport const useKeyPairLazyLoadQuery = (\n  accessKey: string,\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { keypair } = useLazyLoadQuery<hooksUsingRelay_KeyPairQuery>(\n    graphql`\n      query hooksUsingRelay_KeyPairQuery($accessKey: String!) {\n        keypair(access_key: $accessKey) {\n          id\n          resource_policy\n          concurrency_used\n        }\n      }\n    `,\n    {\n      accessKey: accessKey,\n    },\n    {\n      ...options,\n      fetchKey: fetchKey + options.fetchKey,\n    },\n  );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [keypair, { refresh }] as const;\n};\n\nexport const useCurrentKeyPairResourcePolicyLazyLoadQuery = (\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const { keypair_resource_policy } =\n    useLazyLoadQuery<hooksUsingRelay_KeyPairResourcePolicyQuery>(\n      graphql`\n        query hooksUsingRelay_KeyPairResourcePolicyQuery($name: String!) {\n          keypair_resource_policy(name: $name) {\n            max_containers_per_session\n            max_concurrent_sessions\n          }\n        }\n      `,\n      {\n        name: keypair?.resource_policy || '',\n      },\n      {\n        ...options,\n        fetchKey: fetchKey + options.fetchKey,\n      },\n    );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [\n    {\n      keypairResourcePolicy: (keypair_resource_policy || {}) as NonNullable<\n        typeof keypair_resource_policy\n      >,\n      keypair: (keypair || {}) as NonNullable<typeof keypair>,\n    },\n    { refresh },\n  ] as const;\n};\n","import { useSuspendedBackendaiClient } from '.';\nimport { Image } from '../components/ImageEnvironmentSelectFormItems';\nimport { AUTOMATIC_DEFAULT_SHMEM } from '../components/ResourceAllocationFormItems';\nimport { addNumberWithUnits, iSizeToSize } from '../helper';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { useTanQuery } from './reactQueryAlias';\nimport _ from 'lodash';\n\ninterface MergedResourceLimits {\n  accelerators: {\n    [key: string]:\n      | {\n          min?: number;\n          max?: number;\n        }\n      | undefined;\n  };\n  cpu?: {\n    min?: number;\n    max?: number;\n  };\n  mem?: {\n    min?: string;\n    max?: string;\n  };\n  shmem?: {\n    min?: string;\n    max?: string;\n  };\n}\n\ntype ResourceLimits = {\n  cpu: string | 'Infinity' | 'NaN';\n  mem: string | 'Infinity' | 'NaN';\n  'cuda.device': string | 'Infinity' | 'NaN';\n};\ntype ResourceUsing = ResourceLimits;\ntype ResourceRemaining = ResourceLimits;\ntype ScalingGroup = {\n  using: ResourceUsing;\n  remaining: ResourceRemaining;\n};\n\ntype ResourceSlots = {\n  cpu: string;\n  mem: string;\n  'cuda.device': string;\n  [key: string]: string;\n};\n\ntype RemainingSlots = {\n  cpu: number;\n  mem: number;\n  accelerators: {\n    [key: string]: number;\n  };\n};\n\ntype Preset = {\n  name: string;\n  resource_slots: ResourceSlots;\n  shared_memory: string | null;\n  allocatable: boolean;\n};\n\ntype ResourceAllocation = {\n  keypair_limits: ResourceLimits;\n  keypair_using: ResourceUsing;\n  keypair_remaining: ResourceRemaining;\n  scaling_group_remaining: ResourceRemaining;\n  scaling_groups: {\n    [key: string]: ScalingGroup;\n  };\n  presets: Preset[];\n  group_limits: ResourceLimits;\n  group_using: ResourceUsing;\n  group_remaining: ResourceRemaining;\n};\n\ninterface Props {\n  currentProjectName: string;\n  currentImage?: Image;\n  currentResourceGroup: string;\n}\n\n// determine resource limits and remaining for current resource group and current image in current project\nexport const useResourceLimitAndRemaining = ({\n  currentImage,\n  currentResourceGroup,\n  currentProjectName,\n}: Props) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n\n  const {\n    data: checkPresetInfo,\n    refetch,\n    isRefetching,\n  } = useTanQuery<ResourceAllocation>({\n    queryKey: ['check-resets', currentProjectName, currentResourceGroup],\n    queryFn: () => {\n      if (currentResourceGroup) {\n        return baiClient.resourcePreset.check({\n          group: currentProjectName,\n          scaling_group: currentResourceGroup,\n        });\n      } else {\n        return;\n      }\n    },\n    staleTime: 0,\n    suspense: !_.isEmpty(currentResourceGroup), //prevent flicking\n  });\n\n  const currentImageMinM =\n    _.find(currentImage?.resource_limits, (i) => i?.key === 'mem')?.min || '0g';\n\n  const resourceGroupResourceSize: {\n    cpu?: number;\n    mem?: string;\n    accelerators: {\n      [key: string]: number | undefined;\n    };\n  } = {\n    // scaling group all cpu (using + remaining), string type\n    cpu:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.cpu,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.cpu,\n      )\n        ? _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.cpu,\n          ) +\n          _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n              .cpu,\n          )\n        : undefined,\n    mem:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.mem,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.mem,\n      )\n        ? iSizeToSize(\n            _.toNumber(\n              checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.mem,\n            ) +\n              _.toNumber(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n                  .mem,\n              ) +\n              'b',\n            'g',\n            2,\n          )?.numberFixed + 'g'\n        : undefined,\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.[key],\n          ) &&\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.[\n              key\n            ],\n          )\n            ? _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.using[\n                  key\n                ],\n              ) +\n              _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]\n                  ?.remaining[key],\n              )\n            : undefined;\n        return result;\n      },\n      {} as {\n        [key: string]: number | undefined;\n      },\n    ),\n  };\n  const resourceLimits: MergedResourceLimits = {\n    cpu:\n      resourceSlots?.cpu === undefined\n        ? undefined\n        : {\n            min: _.max([\n              _.toNumber(\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'cpu')\n                  ?.min || '0',\n              ),\n            ]),\n            max: _.min([\n              baiClient._config.maxCPUCoresPerContainer,\n              limitParser(checkPresetInfo?.keypair_limits.cpu),\n              limitParser(checkPresetInfo?.group_limits.cpu),\n              resourceGroupResourceSize?.cpu,\n            ]),\n          },\n    mem:\n      resourceSlots?.mem === undefined\n        ? undefined\n        : {\n            // M to max of [ image's mem min, AUTOMATIC_DEFAULT_SHMEM]\n            // mem(M+S) should be larger than _.max([ image's mem min, AUTOMATIC_DEFAULT_SHMEM ]) + AUTOMATIC_DEFAULT_SHMEM (rule: S can not be larger than M)\n            min:\n              //handled by 'b' unit\n              addNumberWithUnits(\n                _.max([\n                  iSizeToSize(currentImageMinM, 'b')?.number,\n                  iSizeToSize(AUTOMATIC_DEFAULT_SHMEM, 'b')?.number,\n                  0,\n                ]) + 'b',\n                AUTOMATIC_DEFAULT_SHMEM,\n              ),\n            max:\n              //handled by 'g(GiB)' unit\n              _.min([\n                baiClient._config.maxMemoryPerContainer,\n                limitParser(checkPresetInfo?.keypair_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.keypair_limits.mem) + '',\n                    'g',\n                  )?.number,\n                limitParser(checkPresetInfo?.group_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.group_limits.mem) + '',\n                    'g',\n                  )?.number,\n                // scaling group all mem (using + remaining), string type\n                resourceGroupResourceSize?.mem &&\n                  iSizeToSize(resourceGroupResourceSize?.mem + '', 'g')?.number,\n              ]) + 'g',\n          },\n    // shmem:\n    //   resourceSlots?.mem === undefined\n    //     ? undefined\n    //     : {\n    //         min: _.max([\n    //           _.find(currentImage?.resource_limits, (i) => i?.key === 'shmem')\n    //             ?.min,\n    //           '64m',\n    //         ]),\n    //       },\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        const configName =\n          {\n            'cuda.device': 'maxCUDADevicesPerContainer',\n            'cuda.shares': 'maxCUDASharesPerContainer',\n            'rocm.device': 'maxROCMDevicesPerContainer',\n            'tpu.device': 'maxTPUDevicesPerContainer',\n            'ipu.device': 'maxIPUDevicesPerContainer',\n            'atom.device': 'maxATOMDevicesPerContainer',\n            'warboy.device': 'maxWarboyDevicesPerContainer',\n          }[key] || 'cuda.device'; // FIXME: temporally `cuda.device` config, when undefined\n        result[key] = {\n          min: parseInt(\n            _.filter(\n              currentImage?.resource_limits,\n              (supportedAcceleratorInfo) => {\n                return supportedAcceleratorInfo?.key === key;\n              },\n            )?.[0]?.min || '0',\n          ),\n          max: _.min([\n            baiClient._config[configName] || 8,\n            // scaling group all cpu (using + remaining), string type\n            resourceGroupResourceSize.accelerators[key],\n          ]),\n        };\n        return result;\n      },\n      {} as MergedResourceLimits['accelerators'],\n    ),\n  };\n  const remaining: RemainingSlots = {\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          _.min([\n            // @ts-ignore\n            _.toNumber(checkPresetInfo?.keypair_remaining[key]),\n            // @ts-ignore\n            _.toNumber(checkPresetInfo?.group_remaining[key]),\n            // @ts-ignore\n            _.toNumber(checkPresetInfo?.scaling_group_remaining[key]),\n          ]) ?? Number.MAX_SAFE_INTEGER;\n        return result;\n      },\n      {} as RemainingSlots['accelerators'],\n    ),\n    cpu:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.cpu),\n        limitParser(checkPresetInfo?.group_remaining.cpu),\n        limitParser(checkPresetInfo?.scaling_group_remaining.cpu),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n    mem:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.mem),\n        limitParser(checkPresetInfo?.group_remaining.mem),\n        limitParser(checkPresetInfo?.scaling_group_remaining.mem),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n  };\n\n  return [\n    {\n      resourceGroupResourceSize,\n      resourceLimits,\n      remaining,\n      currentImageMinM,\n      isRefetching,\n    },\n    {\n      refetch,\n    },\n  ] as const;\n};\n\nconst limitParser = (limit: string | undefined) => {\n  if (limit === undefined) {\n    return undefined;\n  } else if (limit === 'Infinity') {\n    return undefined;\n  } else if (limit === 'NaN') {\n    return undefined;\n  } else {\n    return _.toNumber(limit);\n  }\n};\n","import { iSizeToSize, parseUnit } from '../helper';\nimport { useControllableValue, usePrevious } from 'ahooks';\nimport { InputNumber, InputNumberProps, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nexport interface DynamicUnitInputNumberProps\n  extends Omit<\n    InputNumberProps,\n    'step' | 'max' | 'min' | 'value' | 'onChange'\n  > {\n  dynamicSteps?: number[];\n  disableAutoUnit?: boolean;\n  max?: string;\n  min?: string;\n  value?: string | null | undefined;\n  units?: string[];\n  roundStep?: number;\n  onChange?: (value: string) => void;\n}\n\nconst DynamicUnitInputNumber: React.FC<DynamicUnitInputNumberProps> = ({\n  dynamicSteps = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],\n  units = ['m', 'g', 't', 'p'],\n  disableAutoUnit = false,\n  min = '0m',\n  max = '300p',\n  roundStep,\n  ...inputNumberProps\n}) => {\n  const [value, setValue] = useControllableValue<string | null | undefined>(\n    inputNumberProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const [numValue, _unitFromValue] =\n    value === null || value === undefined ? [null, null] : parseUnit(value);\n  const previousUnit = usePrevious(_unitFromValue);\n  const unit = _unitFromValue || previousUnit || units[0];\n\n  const [minNumValue, minUnit] = parseUnit(min);\n  const [maxNumValue, maxUnit] = parseUnit(max);\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const onInput = (e: Event) => {\n        // @ts-ignore\n        const value = e?.target?.value;\n        if (/^\\d+(g|m)$/.test(value)) {\n          // const [newNumber, newUnit] = parseUnit(value);\n          // if (newNumber === numValue && newUnit === unit) {\n          //   e.target.value = numValue;\n          // } else {\n          setValue(value);\n          // }\n        }\n      };\n      const target = ref.current;\n      target?.addEventListener('input', onInput);\n      return () => {\n        target?.removeEventListener('input', onInput);\n      };\n    }\n  }, [ref, numValue, _unitFromValue, setValue]);\n\n  return (\n    <InputNumber\n      ref={ref}\n      {...inputNumberProps}\n      onBlur={() => {\n        if (_.isNumber(roundStep) && roundStep > 0) {\n          const decimalCount = roundStep.toString().split('.')[1]?.length || 0;\n          setValue(\n            `${(Math.round(_.toNumber(ref.current?.value || '0') / roundStep) * roundStep).toFixed(decimalCount)}${unit}`,\n          );\n        }\n      }}\n      value={numValue}\n      onChange={(newValue) => {\n        if (newValue === null || newValue === undefined) {\n          setValue(newValue);\n        } else {\n          setValue(`${newValue}${unit}`);\n        }\n      }}\n      //TODO: When min and max have different units, they should be calculated and put in.\n      // 입력의 초소단위 확인 0.4g 가 되는지 확인\n      // @ts-ignore\n      max={maxUnit === unit ? maxNumValue : iSizeToSize(max, unit).number}\n      min={\n        minUnit === unit\n          ? minNumValue\n          : // @ts-ignore\n            iSizeToSize(min, unit).number\n      }\n      addonAfter={\n        <Select\n          tabIndex={-1}\n          value={unit}\n          onChange={(newUnit) => {\n            setValue(`${numValue}${newUnit}`);\n          }}\n          onDropdownVisibleChange={(open) => {\n            // A null or undefined value doesn't have a unit info, so we need to set the value before setting the unit.\n            if ((open && value === null) || value === undefined) {\n              setValue(`0${unit}`);\n            }\n          }}\n          options={_.map(units, (unit) => ({\n            value: unit,\n            label: (\n              <Typography.Text\n                style={{\n                  fontFamily:\n                    \"'SFMono-Regular',Consolas,'Liberation Mono',Menlo,Courier,monospace\",\n                }}\n              >\n                {unit.toUpperCase() + 'iB'}\n              </Typography.Text>\n            ),\n          }))}\n          suffixIcon={units.length > 1 ? undefined : null}\n          open={units.length > 1 ? undefined : false}\n          style={{\n            cursor: units.length > 1 ? undefined : 'default',\n          }}\n        />\n      }\n      step={0} // this step applies when onStep doesn't setValue\n      onStep={(afterStepValue, info) => {\n        const numValueNotNull =\n          _.isNull(numValue) || _.isUndefined(numValue) ? 0 : numValue;\n        const index = _.sortedIndex(_.sortBy(dynamicSteps), numValueNotNull);\n        let nextIndex: number;\n        if (info.type === 'up') {\n          if (numValueNotNull === dynamicSteps[index]) {\n            nextIndex = index + 1;\n          } else {\n            nextIndex = index;\n          }\n        } else {\n          nextIndex = index - 1;\n        }\n\n        const currentUnitIndex = units.indexOf(unit);\n        if (!disableAutoUnit && nextIndex < 0) {\n          // WHEN MOVING TO MORE Smaller Unit: change unit and number\n          if (currentUnitIndex === 0) {\n            // if already at min unit, set to 0\n            setValue(`0${unit}`);\n          } else {\n            const nextValue = dynamicSteps[dynamicSteps.length - 1];\n            const nextUnit = units[currentUnitIndex - 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else if (!disableAutoUnit && nextIndex > dynamicSteps.length - 1) {\n          // WHEN MOVING TO MORE Bigger Unit: change unit and number\n          //  if already at max unit, step up/down by 1\n          if (currentUnitIndex === units.length - 1) {\n            setValue(\n              `${numValueNotNull + (info.type === 'up' ? 1 : -1)}${maxUnit}`,\n            );\n          } else {\n            const nextValue = dynamicSteps[0];\n            const nextUnit = units[currentUnitIndex + 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else {\n          // WHEN, DON'T NEED TO CHANGE UNIT\n          if (nextIndex >= 0 && nextIndex < dynamicSteps.length) {\n            let nextNumValue = dynamicSteps[nextIndex];\n            if (minUnit === unit && nextNumValue < minNumValue) {\n              nextNumValue = minNumValue;\n            } else if (maxUnit === unit && nextNumValue > maxNumValue) {\n              nextNumValue = maxNumValue;\n            }\n            setValue(`${nextNumValue}${unit}`);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DynamicUnitInputNumber;\n","import { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport DynamicUnitInputNumber, {\n  DynamicUnitInputNumberProps,\n} from './DynamicUnitInputNumber';\nimport Flex from './Flex';\nimport { useControllableValue } from 'ahooks';\nimport { Slider, theme } from 'antd';\nimport { SliderMarks } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useMemo } from 'react';\n\nexport interface DynamicUnitInputNumberWithSliderProps\n  extends DynamicUnitInputNumberProps {\n  extraMarks?: SliderMarks;\n  hideSlider?: boolean;\n  warn?: string;\n  step?: number;\n}\nconst DynamicUnitInputNumberWithSlider: React.FC<\n  DynamicUnitInputNumberWithSliderProps\n> = ({\n  min = '0m',\n  max = '32g',\n  warn,\n  units = ['m', 'g'],\n  extraMarks,\n  hideSlider,\n  step = 0.05,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableValue<string | undefined | null>(\n    otherProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const { token } = theme.useToken();\n  const minGiB = useMemo(() => iSizeToSize(min, 'g', 2), [min]);\n  const maxGiB = useMemo(() => iSizeToSize(max, 'g', 2), [max]);\n  const valueGiB = useMemo(() => iSizeToSize(value || '0g', 'g', 2), [value]);\n\n  // const warnPercent = useMemo(() => {\n  //   return warn\n  //     ? ((iSizeToSize(warn, 'g', 2)?.number || 0) / (maxGiB?.number || 1)) * 100\n  //     : undefined;\n  // }, [warn, maxGiB?.number]);\n  // console.log('##marks', marks);\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        direction=\"column\"\n        align=\"stretch\"\n      >\n        <DynamicUnitInputNumber\n          {...otherProps}\n          min={min}\n          max={max}\n          units={units}\n          value={value}\n          onChange={(nextValue) => {\n            setValue(nextValue);\n          }}\n          style={{\n            minWidth: 130,\n          }}\n          roundStep={step}\n        />\n      </Flex>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 3,\n          ...(hideSlider && {\n            visibility: 'hidden',\n            height: 0,\n          }),\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {/* {warn && (\n            <Flex\n              direction=\"row\"\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 14.5,\n                width: '100%',\n                height: 4,\n                padding: '0 5px',\n              }}\n              align=\"start\"\n            >\n              <div\n                style={{\n                  width: warnPercent + '%',\n                  height: 4,\n                }}\n              ></div>\n              <div\n                style={{\n                  marginTop: 3,\n                  marginLeft: -3.5,\n                  width: 0,\n                  height: 0,\n\n                  borderTop: '4px solid transparent',\n                  borderLeft: '4px solid transparent',\n                  borderRight: '4px solid transparent',\n                  borderBottom: `7px solid ${token.colorWarning}`,\n                }}\n              ></div>\n            </Flex>\n          )} */}\n          <Slider\n            max={maxGiB?.number}\n            styles={{\n              track:\n                (warn && {\n                  backgroundColor:\n                    compareNumberWithUnits(warn, value || '0b') < 0\n                      ? token.colorWarning\n                      : undefined,\n                }) ||\n                undefined,\n              rail: {\n                // backgroundColor:'red',\n                // fill: 'red',\n              },\n            }}\n            step={step}\n            // min={minGiB.number}  // DO NOT use min, because slider left should be 0\n            value={valueGiB?.number}\n            tooltip={{\n              formatter: (value = 0) => {\n                return value < 1\n                  ? `${(value * 1024).toFixed(2)} MiB`\n                  : `${value.toFixed(2)} GiB`;\n              },\n            }}\n            onChange={(newNumValue) => {\n              if (minGiB?.number && minGiB.number > newNumValue) {\n                setValue(min);\n              } else {\n                setValue(\n                  newNumValue < 1\n                    ? `${newNumValue * 1024}m`\n                    : `${newNumValue}g`,\n                );\n              }\n            }}\n            marks={{\n              // 0: {\n              //   style: {\n              //     color: token.colorTextSecondary,\n              //   },\n              //   label: 0,\n              // },\n              ...(minGiB &&\n                _.isNumber(minGiB?.number) && {\n                  [minGiB.number]: {\n                    style: {\n                      color: token.colorTextSecondary,\n                    },\n                    // if 0, without unit\n                    label:\n                      minGiB.number === 0\n                        ? minGiB.number\n                        : minGiB.number >= 1\n                          ? minGiB.number + 'g'\n                          : minGiB.number * 1024 + 'm',\n                  },\n                }),\n              // extra: remaining mark code should be located before max mark code to prevent overlapping when it is same value\n              ..._.omitBy(extraMarks, (option, key) => {\n                return _.isNumber(maxGiB?.number)\n                  ? _.parseInt(key) > (maxGiB?.number as number)\n                  : false;\n              }),\n              ...(maxGiB?.number && {\n                [maxGiB.number]: {\n                  style: {\n                    color: token.colorTextSecondary,\n                  },\n                  label:\n                    maxGiB.number === 0\n                      ? maxGiB.number\n                      : maxGiB.number >= 1\n                        ? maxGiB.number + 'g'\n                        : maxGiB.number * 1024 + 'm',\n                },\n              }),\n            }}\n          />\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default DynamicUnitInputNumberWithSlider;\n","import { useUpdatableState } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport { ResourcePresetSelectQuery } from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined } from '@ant-design/icons';\nimport { useThrottleFn } from 'ahooks';\nimport { Select } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useLazyLoadQuery } from 'react-relay';\n\n// const myFunc= ()=>{\n//   const param: any = { group: globalThis.backendaiclient.current_group };\n//       if (\n//         this.current_user_group !== globalThis.backendaiclient.current_group ||\n//         this.scaling_groups.length == 0 ||\n//         (this.scaling_groups.length === 1 && this.scaling_groups[0].name === '')\n//       ) {\n//         this.current_user_group = globalThis.backendaiclient.current_group;\n//         const sgs = await globalThis.backendaiclient.scalingGroup.list(\n//           this.current_user_group,\n//         );\n//         // Make empty scaling group item if there is no scaling groups.\n//         this.scaling_groups =\n//           sgs.scaling_groups.length > 0 ? sgs.scaling_groups : [{ name: '' }];\n//       }\n//       if (this.scaling_groups.length > 0) {\n//         const scaling_groups: any = [];\n//         this.scaling_groups.map((group) => {\n//           scaling_groups.push(group.name);\n//         });\n//         if (\n//           this.scaling_group === '' ||\n//           !scaling_groups.includes(this.scaling_group)\n//         ) {\n//           this.scaling_group = this.scaling_groups[0].name;\n//         }\n//         param['scaling_group'] = this.scaling_group;\n//       }\n//       const resourcePresetInfo =\n//         await globalThis.backendaiclient.resourcePreset.check(param);\n// }\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\ninterface ResourcePresetSelectProps extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [resourceSlots] = useResourceSlots();\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n  // const resourcePresetInfo = await globalThis.backendaiclient.resourcePreset.check(param);\n  return (\n    <Select\n      loading={isPendingUpdate}\n      // options={_.map(resource_presets, (preset) => {\n      //   return {\n      //     value: preset?.name,\n      //     label: preset?.name,\n      //   };\n      // })}\n      options={[\n        {\n          value: 'custom',\n          label: (\n            <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n              <EditOutlined /> Custom\n            </Flex>\n          ),\n          // label: (\n          //   <Flex direction=\"row\" gap=\"xs\">\n          //     <Typography.Text strong>Custom</Typography.Text>\n          //     <Typography.Text type=\"secondary\">\n          //       Customize allocation amount\n          //     </Typography.Text>\n          //   </Flex>\n          // ),\n        },\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset, index) => {\n            const slotsInfo: {\n              [key in string]: string;\n            } = JSON.parse(preset?.resource_slots);\n            return {\n              value: preset?.name,\n              label: (\n                <Flex direction=\"row\" justify=\"between\" gap={'xs'}>\n                  {preset?.name}\n                  <Flex\n                    direction=\"row\"\n                    gap={'xxs'}\n                    style={{\n                      color: 'black',\n                      opacity: index === 1 ? 0.5 : 1,\n                    }}\n                  >\n                    {_.map(\n                      _.omitBy(slotsInfo, (slot, key) =>\n                        // @ts-ignore\n                        _.isEmpty(resourceSlots[key]),\n                      ),\n                      (slot, key) => {\n                        return (\n                          <ResourceNumber\n                            key={key}\n                            // @ts-ignore\n                            type={key}\n                            value={slot}\n                            hideTooltip\n                          />\n                        );\n                      },\n                    )}\n                  </Flex>\n                </Flex>\n              ),\n              preset,\n              // disabled: index === 1,\n            };\n          }),\n        },\n      ]}\n      showSearch\n      {...selectProps}\n      onDropdownVisibleChange={(open) => {\n        if (open) {\n          console.log(open);\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import {\n  addNumberWithUnits,\n  compareNumberWithUnits,\n  iSizeToSize,\n} from '../helper';\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { useCurrentKeyPairResourcePolicyLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useResourceLimitAndRemaining } from '../hooks/useResourceLimitAndRemaining';\nimport DynamicUnitInputNumberWithSlider from './DynamicUnitInputNumberWithSlider';\nimport Flex from './Flex';\nimport { ImageEnvironmentFormInput } from './ImageEnvironmentSelectFormItems';\nimport InputNumberWithSlider from './InputNumberWithSlider';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { ACCELERATOR_UNIT_MAP } from './ResourceNumber';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport {\n  Card,\n  Col,\n  Divider,\n  Form,\n  Radio,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport const AUTOMATIC_DEFAULT_SHMEM = '64m';\nexport const RESOURCE_ALLOCATION_INITIAL_FORM_VALUES = {\n  resource: {\n    cpu: 0,\n    mem: '0g',\n    shmem: '0g',\n    accelerator: 0,\n  },\n  num_of_sessions: 1,\n  cluster_mode: 'single-node',\n  cluster_size: 1,\n  enabledAutomaticShmem: true,\n};\n\nexport interface ResourceAllocationFormValue {\n  resource: {\n    cpu: number;\n    mem: string;\n    shmem: string;\n    accelerator: number;\n    acceleratorType: string;\n  };\n  resourceGroup: string;\n  num_of_sessions?: number;\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  enabledAutomaticShmem: boolean;\n}\n\ntype MergedResourceAllocationFormValue = ResourceAllocationFormValue &\n  ImageEnvironmentFormInput;\n\ninterface ResourceAllocationFormItemsProps {\n  enableNumOfSessions?: boolean;\n  enableResourcePresets?: boolean;\n  forceImageMinValues?: boolean;\n}\n\nconst ResourceAllocationFormItems: React.FC<\n  ResourceAllocationFormItemsProps\n> = ({\n  enableNumOfSessions,\n  enableResourcePresets,\n  forceImageMinValues = false,\n}) => {\n  const form = Form.useFormInstance<MergedResourceAllocationFormValue>();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n\n  const [{ keypair, keypairResourcePolicy }] =\n    useCurrentKeyPairResourcePolicyLazyLoadQuery();\n\n  const currentProject = useCurrentProjectValue();\n\n  // use `useState` instead of `Form.useWatch` for handling `resourcePreset.check` pending state\n  const [currentResourceGroup, setCurrentResourceGroup] = useState<string>(\n    form.getFieldValue('resourceGroup'),\n  );\n  const [isPendingCheckResets, startCheckRestsTransition] = useTransition();\n  const currentImage = Form.useWatch(['environments', 'image'], {\n    form,\n    preserve: true,\n  });\n  const [{ currentImageMinM, remaining, resourceLimits }] =\n    useResourceLimitAndRemaining({\n      currentProjectName: currentProject.name,\n      currentResourceGroup: currentResourceGroup,\n      currentImage: currentImage,\n    });\n\n  const currentImageAcceleratorLimits = _.filter(\n    currentImage?.resource_limits,\n    (limit) =>\n      limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n  );\n\n  const sessionSliderLimitAndRemaining = {\n    min: 1,\n    max: _.min([\n      keypairResourcePolicy.max_concurrent_sessions,\n      3, //BackendAiResourceBroker.DEFAULT_CONCURRENT_SESSION_COUNT\n    ]) as number,\n    remaining:\n      (keypairResourcePolicy.max_concurrent_sessions || 3) -\n      (keypair.concurrency_used || 0),\n  };\n\n  useEffect(() => {\n    // when image changed, set value of resources to min value only if it's larger than current value\n    const minimumResources: Partial<ResourceAllocationFormValue['resource']> = {\n      cpu: resourceLimits.cpu?.min,\n      mem:\n        iSizeToSize(\n          (iSizeToSize(resourceLimits.shmem?.min, 'm')?.number || 0) +\n            (iSizeToSize(resourceLimits.mem?.min, 'm')?.number || 0) +\n            'm',\n          'g',\n        )?.number + 'g', //to prevent loosing precision\n    };\n\n    // NOTE: accelerator value setting is done inside the conditional statement\n    if (currentImageAcceleratorLimits.length > 0) {\n      if (\n        _.find(\n          currentImageAcceleratorLimits,\n          (limit) =>\n            limit?.key === form.getFieldValue(['resource', 'acceleratorType']),\n        )\n      ) {\n        // if current selected accelerator type is supported in the selected image,\n        minimumResources.acceleratorType = form.getFieldValue([\n          'resource',\n          'acceleratorType',\n        ]);\n        minimumResources.accelerator =\n          resourceLimits.accelerators[\n            form.getFieldValue(['resource', 'acceleratorType'])\n          ]?.min;\n      } else {\n        // if current selected accelerator type is not supported in the selected image,\n        // change accelerator type to the first supported accelerator type.\n        const nextImageSelectorType: string | undefined | null = // NOTE:\n          // filter from resourceSlots since resourceSlots and supported image could be non-identical.\n          // resourceSlots returns \"all resources enable to allocate(including AI accelerator)\"\n          // imageAcceleratorLimit returns \"all resources that is supported in the selected image\"\n          _.filter(currentImageAcceleratorLimits, (acceleratorInfo: any) =>\n            _.keys(resourceSlots).includes(acceleratorInfo?.key),\n          )[0]?.key;\n\n        if (nextImageSelectorType) {\n          minimumResources.accelerator =\n            resourceLimits.accelerators[nextImageSelectorType]?.min;\n          minimumResources.acceleratorType = nextImageSelectorType;\n        }\n      }\n    } else {\n      minimumResources.accelerator = 0;\n    }\n\n    if (forceImageMinValues !== true) {\n      // delete keys that is not less than current value\n      (['cpu', 'accelerator'] as const).forEach((key) => {\n        const minNum = minimumResources[key];\n        if (\n          _.isNumber(minNum) &&\n          minNum < form.getFieldValue(['resource', key])\n        ) {\n          delete minimumResources[key];\n        }\n      });\n      (['mem', 'shmem'] as const).forEach((key) => {\n        const minNumStr = minimumResources[key];\n        if (\n          _.isString(minNumStr) &&\n          compareNumberWithUnits(\n            minNumStr,\n            form.getFieldValue(['resource', key]),\n          ) < 0\n        ) {\n          delete minimumResources[key];\n        }\n      });\n    }\n\n    form.setFieldsValue({\n      resource: {\n        ...minimumResources,\n      },\n    });\n\n    // set to 0 when currentImage doesn't support any AI accelerator\n    if (currentImage && currentImageAcceleratorLimits.length === 0) {\n      form.setFieldValue(['resource', 'accelerator'], 0);\n    }\n\n    form\n      .validateFields([\n        ['resource', 'cpu'],\n        ['resource', 'mem'],\n        ['resource', 'shmem'],\n        ['resource', 'accelerator'],\n        ['resource', 'acceleratorType'],\n      ])\n      .catch(() => {});\n    if (form.getFieldValue('enabledAutomaticShmem')) {\n      runShmemAutomationRule(form.getFieldValue(['resource', 'mem']) || '0g');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentImage]);\n\n  const runShmemAutomationRule = (M_plus_S: string) => {\n    // if M+S > 4G, S can be 1G regard to current image's minimum mem(M)\n    if (\n      // M+S > 4G\n      compareNumberWithUnits(M_plus_S, '4g') >= 0 &&\n      // M+S > M+1G\n      compareNumberWithUnits(\n        M_plus_S,\n        addNumberWithUnits(currentImageMinM, '1g') || '0b',\n      ) >= 0 &&\n      // if 1G < AUTOMATIC_DEFAULT_SHMEM, no need to apply 1G rule\n      compareNumberWithUnits('1g', AUTOMATIC_DEFAULT_SHMEM) > 0\n    ) {\n      form.setFieldValue(['resource', 'shmem'], '1g');\n    } else {\n      form.setFieldValue(['resource', 'shmem'], AUTOMATIC_DEFAULT_SHMEM);\n    }\n  };\n\n  return (\n    <>\n      <Form.Item\n        name=\"resourceGroup\"\n        label={t('session.ResourceGroup')}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <ResourceGroupSelect\n          autoSelectDefault\n          showSearch\n          loading={isPendingCheckResets}\n          onChange={(v) => {\n            startCheckRestsTransition(() => {\n              setCurrentResourceGroup(v);\n            });\n          }}\n        />\n      </Form.Item>\n      {enableResourcePresets ? (\n        <Form.Item\n          label={t('resourcePreset.ResourcePresets')}\n          name=\"allocationPreset\"\n          required\n          style={{ marginBottom: token.marginXS }}\n        >\n          <ResourcePresetSelect\n            onChange={(value, options) => {\n              const slots = _.pick(\n                JSON.parse(options?.preset?.resource_slots || '{}'),\n                _.keys(resourceSlots),\n              );\n              form.setFieldsValue({\n                resource: {\n                  ...slots,\n                  // transform to GB based on preset values\n                  mem: iSizeToSize((slots?.mem || 0) + 'b', 'g', 2)?.numberUnit,\n                  shmem: iSizeToSize(\n                    (options?.preset?.shared_memory || 0) + 'b',\n                    'g',\n                    2,\n                  )?.numberUnit,\n                },\n              });\n            }}\n          />\n        </Form.Item>\n      ) : null}\n      <Card\n        style={{\n          marginBottom: token.margin,\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlots?.cpu && (\n                  <Form.Item\n                    name={['resource', 'cpu']}\n                    // initialValue={0}\n                    label={t('session.launcher.CPU')}\n                    tooltip={{\n                      placement: 'right',\n                      title: <Trans i18nKey={'session.launcher.DescCPU'} />,\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        type: 'number',\n                        min: resourceLimits.cpu?.min,\n                        // TODO: set message\n                      },\n                      {\n                        warningOnly:\n                          baiClient._config?.always_enqueue_compute_session,\n                        validator: async (rule, value: number) => {\n                          if (\n                            _.isNumber(remaining.cpu) &&\n                            value > remaining.cpu\n                          ) {\n                            return Promise.reject(\n                              baiClient._config?.always_enqueue_compute_session\n                                ? t(\n                                    'session.launcher.EnqueueComputeSessionWarning',\n                                  )\n                                : t(\n                                    'session.launcher.ErrorCanNotExceedRemaining',\n                                    {\n                                      amount: remaining.cpu,\n                                    },\n                                  ),\n                            );\n                          } else {\n                            return Promise.resolve();\n                          }\n                        },\n                      },\n                    ]}\n                  >\n                    <InputNumberWithSlider\n                      inputNumberProps={{\n                        addonAfter: t('session.launcher.Core'),\n                      }}\n                      sliderProps={{\n                        marks: {\n                          // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                          ...(remaining.cpu\n                            ? {\n                                [remaining.cpu]: {\n                                  label: <RemainingMark />,\n                                },\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.min\n                            ? {\n                                [resourceLimits.cpu?.min]:\n                                  resourceLimits.cpu?.min,\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.max\n                            ? {\n                                [resourceLimits.cpu?.max]: {\n                                  style: {\n                                    color: token.colorTextSecondary,\n                                  },\n                                  label: resourceLimits.cpu?.max,\n                                },\n                              }\n                            : {}),\n                        },\n                      }}\n                      min={resourceLimits.cpu?.min}\n                      max={resourceLimits.cpu?.max}\n                      step={1}\n                    />\n                  </Form.Item>\n                )}\n                {resourceSlots?.mem && (\n                  <Form.Item\n                    label={t('session.launcher.Memory')}\n                    tooltip={{\n                      placement: 'right',\n                      props: {\n                        onClick: (e: any) => e.preventDefault(),\n                      },\n                      title: (\n                        <Flex\n                          direction=\"column\"\n                          onClick={(e) => e.preventDefault()}\n                        >\n                          <Trans i18nKey={'session.launcher.DescMemory'} />\n                          {/* <Divider\n                            style={{\n                              margin: 0,\n                              backgroundColor: token.colorBorderSecondary,\n                            }}\n                          />\n                         \n                          <Trans\n                            i18nKey={'session.launcher.DescSharedMemory'}\n                          /> */}\n                        </Flex>\n                      ),\n                    }}\n                    required\n                  >\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.resource.shmem !== next.resource.shmem\n                      }\n                    >\n                      {() => {\n                        return (\n                          <Form.Item\n                            name={['resource', 'mem']}\n                            noStyle\n                            rules={[\n                              {\n                                required: true,\n                              },\n                              {\n                                // TODO: min of mem should be shmem + image's mem limit??\n                                validator: async (rule, value: string) => {\n                                  // const memMinPlusShmem =\n                                  //   addNumberWithUnits(\n                                  //     resourceLimits.mem?.min,\n                                  //     form.getFieldValue(['resource', 'shmem']),\n                                  //   ) || '0b';\n\n                                  if (\n                                    !_.isElement(value) &&\n                                    resourceLimits.mem?.min &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.min || '0g',\n                                    ) < 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('session.launcher.MinMemory', {\n                                        size: _.toUpper(\n                                          resourceLimits.mem?.min || '0g',\n                                        ),\n                                      }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                warningOnly:\n                                  baiClient._config\n                                    ?.always_enqueue_compute_session,\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    !_.isElement(value) &&\n                                    resourceLimits.mem &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      remaining.mem + 'b',\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      baiClient._config\n                                        ?.always_enqueue_compute_session\n                                        ? t(\n                                            'session.launcher.EnqueueComputeSessionWarning',\n                                          )\n                                        : t(\n                                            'session.launcher.ErrorCanNotExceedRemaining',\n                                            {\n                                              amount:\n                                                iSizeToSize(\n                                                  remaining.mem + 'b',\n                                                  'g',\n                                                  3,\n                                                )?.numberUnit + 'iB',\n                                            },\n                                          ),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                            ]}\n                          >\n                            <DynamicUnitInputNumberWithSlider\n                              max={resourceLimits.mem?.max}\n                              // min=\"256m\"\n                              // min={'0g'}\n                              // min={addNumberWithUnits(\n                              //   resourceLimits.mem?.min,\n                              //   form.getFieldValue(['resource', 'shmem']) || '0g',\n                              // )}\n                              min={resourceLimits.mem?.min}\n                              // warn={\n                              //   checkPresetInfo?.scaling_group_remaining.mem ===\n                              //   undefined\n                              //     ? undefined\n                              //     : checkPresetInfo?.scaling_group_remaining.mem + 'g'\n                              // }\n                              addonBefore={'MEM'}\n                              extraMarks={{\n                                // ...(checkPresetInfo?.scaling_group_remaining.mem\n                                //   ? {\n                                //       // @ts-ignore\n                                //       [iSizeToSize(\n                                //         checkPresetInfo?.scaling_group_remaining\n                                //           .mem,\n                                //         'g',\n                                //         3,\n                                //       ).numberFixed]: {\n                                //         label: '-',\n                                //       },\n                                //     }\n                                //   : {}),\n                                // ...(form.getFieldValue(['resource', 'shmem'])\n                                //   ? {\n                                //       [iSizeToSize(\n                                //         form.getFieldValue([\n                                //           'resource',\n                                //           'shmem',\n                                //         ]),\n                                //         'g',\n                                //       )?.number || 0]: (\n                                //         <Flex\n                                //           style={{\n                                //             height: 8,\n                                //             width: 8,\n                                //             borderRadius: 4,\n                                //             backgroundColor: token.colorInfo,\n                                //             position: 'absolute',\n                                //             top: -10,\n                                //             transform: 'translateX(-50%)',\n                                //             opacity: 0.5,\n                                //             pointerEvents: 'none',\n                                //           }}\n                                //         ></Flex>\n                                //       ),\n                                //     }\n                                //   : undefined),\n                                ...(remaining.mem\n                                  ? {\n                                      //@ts-ignore\n                                      [iSizeToSize(remaining.mem + 'b', 'g', 3)\n                                        ?.numberFixed]: {\n                                        label: <RemainingMark />,\n                                      },\n                                    }\n                                  : {}),\n                              }}\n                              onChange={(M_plus_S) => {\n                                if (\n                                  !M_plus_S ||\n                                  !form.getFieldValue('enabledAutomaticShmem')\n                                )\n                                  return;\n                                runShmemAutomationRule(M_plus_S);\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n\n                    <Flex direction=\"column\" gap={'xxs'} align=\"start\">\n                      <Flex direction=\"row\" gap={'xs'}>\n                        {t('session.launcher.EnableAutomaticShmem')}{' '}\n                        <Form.Item\n                          noStyle\n                          name={'enabledAutomaticShmem'}\n                          valuePropName=\"checked\"\n                        >\n                          <Switch\n                            size=\"small\"\n                            onChange={(checked) => {\n                              if (checked)\n                                runShmemAutomationRule(\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                    '0g',\n                                );\n                            }}\n                          />\n                        </Form.Item>\n                      </Flex>\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prev, next) =>\n                          prev.resource.mem !== next.resource.mem ||\n                          prev.enabledAutomaticShmem !==\n                            next.enabledAutomaticShmem\n                        }\n                      >\n                        {() => {\n                          return (\n                            <Form.Item\n                              noStyle\n                              name={['resource', 'shmem']}\n                              // initialValue={'0g'}\n                              // label={t('session.launcher.SharedMemory')}\n                              hidden={form.getFieldValue(\n                                'enabledAutomaticShmem',\n                              )}\n                              tooltip={\n                                <Trans\n                                  i18nKey={'session.launcher.DescSharedMemory'}\n                                />\n                              }\n                              dependencies={[['resource', 'mem']]}\n                              rules={[\n                                {\n                                  required: true,\n                                },\n                                {},\n                                {\n                                  validator: async (rule, value: string) => {\n                                    if (\n                                      _.isEmpty(\n                                        getFieldValue('resource')?.mem,\n                                      ) ||\n                                      _.isEmpty(value) ||\n                                      compareNumberWithUnits(\n                                        getFieldValue('resource')?.mem,\n                                        value,\n                                      ) >= 0\n                                    ) {\n                                      return Promise.resolve();\n                                    } else {\n                                      throw t(\n                                        'resourcePreset.SHMEMShouldBeSmallerThanMemory',\n                                      );\n                                    }\n                                  },\n                                },\n                              ]}\n                            >\n                              <DynamicUnitInputNumberWithSlider\n                                // shmem max is mem max\n                                // min={resourceLimits.shmem?.min}\n                                min={resourceLimits.shmem?.min}\n                                // max={resourceLimits.mem?.max || '0g'}\n                                addonBefore={'SHM'}\n                                max={\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                  '0g'\n                                }\n                                hideSlider\n                              />\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                )}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) => {\n                    return (\n                      prev.resource?.acceleratorType !==\n                        next.resource?.acceleratorType ||\n                      // ref: https://github.com/lablup/backend.ai-webui/issues/868\n                      // change gpu step to 1 when cluster_size > 1\n                      prev.cluster_size !== next.cluster_size\n                    );\n                  }}\n                >\n                  {({ getFieldValue }) => {\n                    const currentAcceleratorType = getFieldValue([\n                      'resource',\n                      'acceleratorType',\n                    ]);\n                    return (\n                      <Form.Item\n                        name={['resource', 'accelerator']}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        tooltip={{\n                          placement: 'right',\n                          title: (\n                            <Trans\n                              i18nKey={'session.launcher.DescAIAccelerator'}\n                            />\n                          ),\n                        }}\n                        rules={[\n                          {\n                            required: currentImageAcceleratorLimits.length > 0,\n                          },\n                          {\n                            type: 'number',\n                            min:\n                              resourceLimits.accelerators[\n                                currentAcceleratorType\n                              ]?.min || 0,\n                            max: resourceLimits.accelerators[\n                              currentAcceleratorType\n                            ]?.max,\n                          },\n                          {\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.endsWith(currentAcceleratorType, 'shares') &&\n                                form.getFieldValue('cluster_size') >= 2 &&\n                                value % 1 !== 0\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.OnlyAllowsDiscreteNumberByClusterSize',\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                          {\n                            warningOnly:\n                              baiClient._config?.always_enqueue_compute_session,\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.isNumber(\n                                  remaining.accelerators[\n                                    currentAcceleratorType\n                                  ],\n                                ) &&\n                                value >\n                                  remaining.accelerators[currentAcceleratorType]\n                              ) {\n                                return Promise.reject(\n                                  baiClient._config\n                                    ?.always_enqueue_compute_session\n                                    ? t(\n                                        'session.launcher.EnqueueComputeSessionWarning',\n                                      )\n                                    : t(\n                                        'session.launcher.ErrorCanNotExceedRemaining',\n                                        {\n                                          amount:\n                                            remaining.accelerators[\n                                              currentAcceleratorType\n                                            ],\n                                        },\n                                      ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          sliderProps={{\n                            marks: {\n                              0: 0,\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.accelerators[currentAcceleratorType]\n                                ? {\n                                    [remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(\n                                resourceLimits.accelerators[\n                                  currentAcceleratorType\n                                ]?.max,\n                              )\n                                ? {\n                                    // @ts-ignore\n                                    [resourceLimits.accelerators[\n                                      currentAcceleratorType\n                                    ]?.max]:\n                                      resourceLimits.accelerators[\n                                        currentAcceleratorType\n                                      ]?.max,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${ACCELERATOR_UNIT_MAP[currentAcceleratorType]}`;\n                              },\n                              open:\n                                currentImageAcceleratorLimits.length <= 0\n                                  ? false\n                                  : undefined,\n                            },\n                          }}\n                          disabled={\n                            currentImageAcceleratorLimits.length === 0 &&\n                            _.isEmpty(\n                              form.getFieldValue(['environments', 'manual']),\n                            )\n                          }\n                          min={0}\n                          max={\n                            resourceLimits.accelerators[currentAcceleratorType]\n                              ?.max\n                          }\n                          step={\n                            _.endsWith(currentAcceleratorType, 'shares') &&\n                            form.getFieldValue('cluster_size') < 2\n                              ? 0.1\n                              : 1\n                          }\n                          inputNumberProps={{\n                            addonAfter: (\n                              <Form.Item\n                                noStyle\n                                name={['resource', 'acceleratorType']}\n                                initialValue={_.keys(acceleratorSlots)[0]}\n                              >\n                                <Select\n                                  tabIndex={-1}\n                                  disabled={\n                                    currentImageAcceleratorLimits.length ===\n                                      0 &&\n                                    _.isEmpty(\n                                      form.getFieldValue([\n                                        'environments',\n                                        'manual',\n                                      ]),\n                                    )\n                                  }\n                                  suffixIcon={\n                                    _.size(acceleratorSlots) > 1\n                                      ? undefined\n                                      : null\n                                  }\n                                  // open={\n                                  //   _.size(acceleratorSlots) > 1\n                                  //     ? undefined\n                                  //     : false\n                                  // }\n                                  popupMatchSelectWidth={false}\n                                  options={_.map(\n                                    acceleratorSlots,\n                                    (value, name) => {\n                                      return {\n                                        value: name,\n                                        label:\n                                          ACCELERATOR_UNIT_MAP[name] || 'UNIT',\n                                        disabled:\n                                          currentImageAcceleratorLimits.length >\n                                            0 &&\n                                          !_.find(\n                                            currentImageAcceleratorLimits,\n                                            (limit) => limit?.key === name,\n                                          ),\n                                      };\n                                    },\n                                  )}\n                                />\n                              </Form.Item>\n                            ),\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n      {enableNumOfSessions ? (\n        <Card\n          style={{\n            marginBottom: token.margin,\n          }}\n        >\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.cluster_size !== next.cluster_size\n            }\n          >\n            {() => {\n              return (\n                <Form.Item\n                  name={['num_of_sessions']}\n                  label={t('webui.menu.Sessions')}\n                  tooltip={<Trans i18nKey={'session.launcher.DescSession'} />}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                    },\n                    {\n                      warningOnly:\n                        baiClient._config?.always_enqueue_compute_session,\n                      validator: async (rule, value: number) => {\n                        if (\n                          sessionSliderLimitAndRemaining &&\n                          value > sessionSliderLimitAndRemaining.remaining\n                        ) {\n                          return Promise.reject(\n                            baiClient._config?.always_enqueue_compute_session\n                              ? t(\n                                  'session.launcher.EnqueueComputeSessionWarning',\n                                )\n                              : t(\n                                  'session.launcher.ErrorCanNotExceedRemaining',\n                                  {\n                                    amount:\n                                      sessionSliderLimitAndRemaining.remaining,\n                                  },\n                                ),\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumberWithSlider\n                    inputNumberProps={{\n                      addonAfter: '#',\n                    }}\n                    disabled={form.getFieldValue('cluster_size') > 1}\n                    sliderProps={{\n                      marks: {\n                        [sessionSliderLimitAndRemaining?.min]:\n                          sessionSliderLimitAndRemaining?.min,\n                        // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                        ...(sessionSliderLimitAndRemaining?.remaining\n                          ? {\n                              [sessionSliderLimitAndRemaining?.remaining]: {\n                                label: <RemainingMark />,\n                              },\n                            }\n                          : {}),\n                        [sessionSliderLimitAndRemaining?.max]:\n                          sessionSliderLimitAndRemaining?.max,\n                      },\n                    }}\n                    min={sessionSliderLimitAndRemaining?.min}\n                    max={sessionSliderLimitAndRemaining?.max}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Form.Item>\n        </Card>\n      ) : null}\n      {/* TODO: Support cluster mode */}\n      {baiClient.supports('multi-container') && (\n        // {false && (\n        <Form.Item\n          label={t('session.launcher.ClusterMode')}\n          tooltip={\n            <Flex direction=\"column\" align=\"start\">\n              {t('session.launcher.SingleNode')}\n              <Trans i18nKey={'session.launcher.DescSingleNode'} />\n              <Divider style={{ backgroundColor: token.colorBorder }} />\n              {t('session.launcher.MultiNode')}\n              <Trans i18nKey={'session.launcher.DescMultiNode'} />\n            </Flex>\n          }\n          required\n        >\n          <Card\n            style={{\n              marginBottom: token.margin,\n            }}\n          >\n            <Row gutter={token.marginMD}>\n              <Col xs={24}>\n                {/* <Col xs={24} lg={12}> */}\n                <Form.Item name={'cluster_mode'} required>\n                  <Radio.Group\n                    onChange={(e) => {\n                      form.validateFields().catch(() => {});\n                    }}\n                  >\n                    <Radio.Button value=\"single-node\">\n                      {t('session.launcher.SingleNode')}\n                    </Radio.Button>\n                    <Radio.Button value=\"multi-node\">\n                      {t('session.launcher.MultiNode')}\n                    </Radio.Button>\n                  </Radio.Group>\n                </Form.Item>\n              </Col>\n              <Col xs={24}>\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) =>\n                    prev.cluster_mode !== next.cluster_mode\n                  }\n                >\n                  {() => {\n                    const derivedClusterSizeMaxLimit = _.min([\n                      resourceLimits.cpu?.max,\n                      keypairResourcePolicy.max_containers_per_session,\n                    ]);\n                    const clusterUnit =\n                      form.getFieldValue('cluster_mode') === 'single-node'\n                        ? t('session.launcher.Container')\n                        : t('session.launcher.Node');\n                    return (\n                      <Form.Item\n                        name={'cluster_size'}\n                        label={t('session.launcher.ClusterSize')}\n                        required\n                        rules={[\n                          {\n                            warningOnly:\n                              baiClient._config?.always_enqueue_compute_session,\n                            validator: async (rule, value: number) => {\n                              const minCPU = _.min([\n                                remaining.cpu,\n                                keypairResourcePolicy.max_containers_per_session,\n                              ]);\n                              if (_.isNumber(minCPU) && value > minCPU) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.EnqueueComputeSessionWarning',\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          min={1}\n                          step={1}\n                          // TODO: max cluster size\n                          max={\n                            _.isNumber(derivedClusterSizeMaxLimit)\n                              ? derivedClusterSizeMaxLimit\n                              : undefined\n                          }\n                          disabled={derivedClusterSizeMaxLimit === 1}\n                          sliderProps={{\n                            marks: {\n                              1: '1',\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.cpu\n                                ? {\n                                    [remaining.cpu]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(derivedClusterSizeMaxLimit)\n                                ? {\n                                    [derivedClusterSizeMaxLimit]:\n                                      derivedClusterSizeMaxLimit,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${clusterUnit}`;\n                              },\n                            },\n                          }}\n                          inputNumberProps={{\n                            addonAfter: clusterUnit,\n                          }}\n                          onChange={(value) => {\n                            if (value > 1) {\n                              form.setFieldValue('num_of_sessions', 1);\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </Col>\n            </Row>\n          </Card>\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nconst RemainingMark: React.FC<{ title?: string }> = () => {\n  const { token } = theme.useToken();\n  return (\n    <Flex\n      style={{\n        position: 'absolute',\n        top: -24,\n        transform: 'translateX(-50%)',\n        color: token.colorSuccess,\n        opacity: 0.5,\n      }}\n    >\n      <CaretDownOutlined />\n    </Flex>\n  );\n};\n\nconst MemoizedResourceAllocationFormItems = React.memo(\n  ResourceAllocationFormItems,\n);\n\nexport default MemoizedResourceAllocationFormItems;\n","/**\n * @generated SignedSource<<7a44bb06b700bc6990b9f284967ae6c0>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ImageEnvironmentSelectFormItemsQuery$variables = {\n  installed?: boolean | null;\n};\nexport type ImageEnvironmentSelectFormItemsQuery$data = {\n  readonly images: ReadonlyArray<{\n    readonly architecture: string | null;\n    readonly digest: string | null;\n    readonly humanized_name: string | null;\n    readonly installed: boolean | null;\n    readonly labels: ReadonlyArray<{\n      readonly key: string | null;\n      readonly value: string | null;\n    } | null> | null;\n    readonly name: string | null;\n    readonly registry: string | null;\n    readonly resource_limits: ReadonlyArray<{\n      readonly key: string | null;\n      readonly max: string | null;\n      readonly min: string | null;\n    } | null> | null;\n    readonly tag: string | null;\n  } | null> | null;\n};\nexport type ImageEnvironmentSelectFormItemsQuery = {\n  response: ImageEnvironmentSelectFormItemsQuery$data;\n  variables: ImageEnvironmentSelectFormItemsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"installed\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"key\",\n  \"storageKey\": null\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"is_installed\",\n        \"variableName\": \"installed\"\n      }\n    ],\n    \"concreteType\": \"Image\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"images\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"humanized_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"tag\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"registry\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"architecture\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"digest\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"installed\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ResourceLimit\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"resource_limits\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"min\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"max\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"labels\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"value\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ea71f4a3948d4742dd6bb11ef80a8300\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageEnvironmentSelectFormItemsQuery(\\n  $installed: Boolean\\n) {\\n  images(is_installed: $installed) {\\n    name\\n    humanized_name\\n    tag\\n    registry\\n    architecture\\n    digest\\n    installed\\n    resource_limits {\\n      key\\n      min\\n      max\\n    }\\n    labels {\\n      key\\n      value\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"33367bd6e1532b42b61629ef9d3dc46b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<f8c3ae59478b8ffd874be16c33231c44>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = {};\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null;\n    readonly resource_slots: any | null;\n    readonly shared_memory: any | null;\n  } | null> | null;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2d83f26a36e2c0f0fa14a758947b24ca>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairQuery$variables = {\n  accessKey: string;\n};\nexport type hooksUsingRelay_KeyPairQuery$data = {\n  readonly keypair: {\n    readonly concurrency_used: number | null;\n    readonly id: string | null;\n    readonly resource_policy: string | null;\n  } | null;\n};\nexport type hooksUsingRelay_KeyPairQuery = {\n  response: hooksUsingRelay_KeyPairQuery$data;\n  variables: hooksUsingRelay_KeyPairQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"accessKey\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"access_key\",\n        \"variableName\": \"accessKey\"\n      }\n    ],\n    \"concreteType\": \"KeyPair\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_policy\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"concurrency_used\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1f8fc324e9907111de581f5cd2dc3640\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairQuery(\\n  $accessKey: String!\\n) {\\n  keypair(access_key: $accessKey) {\\n    id\\n    resource_policy\\n    concurrency_used\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8f5c91f0fc46a3366f57566ab688d81\";\n\nexport default node;\n","/**\n * @generated SignedSource<<35444e48a9d4ab1fa713e5dd086d175e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$variables = {\n  name: string;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$data = {\n  readonly keypair_resource_policy: {\n    readonly max_concurrent_sessions: number | null;\n    readonly max_containers_per_session: number | null;\n  } | null;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery = {\n  response: hooksUsingRelay_KeyPairResourcePolicyQuery$data;\n  variables: hooksUsingRelay_KeyPairResourcePolicyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_containers_per_session\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_concurrent_sessions\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ad7039c1935637fe3f3841f0ea8bf347\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairResourcePolicyQuery(\\n  $name: String!\\n) {\\n  keypair_resource_policy(name: $name) {\\n    max_containers_per_session\\n    max_concurrent_sessions\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f3f7364c63aefe9b03111b584c48c103\";\n\nexport default node;\n"],"names":["_ref","objectValues","_ref$values","values","length","React","map","value","label","color","_jsx","Flex","direction","children","_","objValue","idx","Tag","style","undefined","margin","marginRight","getImageFullName","image","concat","registry","name","tag","architecture","filter","showPrivate","form","Form","useFormInstance","environments","useWatch","preserve","baiClient","useSuspendedBackendaiClient","_useState","useState","_useState2","_slicedToArray","environmentSearch","setEnvironmentSearch","_useState3","_useState4","versionSearch","setVersionSearch","t","useTranslation","_useBackendAIImageMet","useBackendAIImageMetaData","_useBackendAIImageMet2","metadata","getImageMeta","token","theme","useToken","isDarkMode","useThemeMode","envSelectRef","useRef","versionSelectRef","images","useLazyLoadQuery","_ImageEnvironmentSelectFormItemsQuery","require","installed","fetchPolicy","useEffect","_form$getFieldValue","manual","matchedEnvironmentByVersion","matchedImageByVersion","nextEnvironment","nextImage","_imageGroups$","_nextEnvironment","version","getFieldValue","imageGroups","group","environmentGroups","environment","_config","allow_manual_image_name_for_session","setFieldsValue","environmentName","setFieldValue","useMemo","labels","_label$value","key","split","includes","isPrivateImage","groupBy","_metadata$imageInfo$g","imageInfo","groupName","_environmentName$spli","_metadata$imageInfo$i","imageKey","displayName","prefix","dropRight","join","sort","a","b","_b$tag$split$","_b$tag","_b$tag$split","_a$tag$split$","_a$tag","_a$tag$split","version1","version2","v1","Number","v2","i","Math","max","num1","num2","compareVersions","sortBy","item","_useMemo","fullNameMatchedImage","fullNameMatchedImageGroup","flatMap","find","envGroup","_jsxs","_Fragment","Item","className","rules","required","marginBottom","Select","ref","showSearch","searchValue","onSearch","defaultActiveFirstOption","optionFilterProp","onChange","firstInListImage","disabled","Option","filterValue","align","gap","display","ImageMetaIcon","width","height","OptGroup","environmentGroup","_environmentGroup$env","firstImage","currentMetaImageInfo","extraFilterValues","environmentPrefixTag","push","TextHighlighter","keyword","tagsFromMetaImageInfoLabel","category","justify","marginLeft","marginXS","flexShrink","noStyle","shouldUpdate","prev","cur","_prev$environments","_cur$environments","_ref2","_selectedEnvironmentG","selectedEnvironmentGroup","_getFieldValue","selectedImage","dropdownRender","menu","fontWeight","fontWeightStrong","paddingLeft","paddingSM","Divider","type","_image$tag","_ref3","_ref4","_toArray","requirements","slice","tagAlias","_i","_Object$entries","Object","entries","tagReplace","_Object$entries$_i","replaceString","pattern","RegExp","test","replace","requirementTags","requirement","DoubleTag","str","digest","Input","allowClear","hidden","bordered","_ref$style","alt","arguments","getImageIcon","src","_objectSpread","min","step","inputNumberProps","sliderProps","otherProps","_objectWithoutProperties","_excluded","_useControllableValue","useControllableValue","_useControllableValue2","setValue","inputRef","round","flex","minWidth","InputNumber","onBlur","_step$toString$split$","_inputRef$current","decimalCount","toString","current","toFixed","Slider","marks","option","useCurrentKeyPairResourcePolicyLazyLoadQuery","options","_useUpdatableState3","useUpdatableState","_useUpdatableState4","fetchKey","updateFetchKey","_useKeyPairLazyLoadQu","accessKey","_useUpdatableState","_useUpdatableState2","_hooksUsingRelay_KeyPairQuery","keypair","refresh","useCallback","useKeyPairLazyLoadQuery","keypairResourcePolicy","_hooksUsingRelay_KeyPairResourcePolicyQuery","resource_policy","keypair_resource_policy","limitParser","limit","_ref$dynamicSteps","dynamicSteps","_ref$units","units","_ref$disableAutoUnit","disableAutoUnit","_ref$min","_ref$max","roundStep","defaultValue","parseUnit","numValue","_unitFromValue","previousUnit","usePrevious","unit","_parseUnit","_parseUnit2","minNumValue","minUnit","_parseUnit3","_parseUnit4","maxNumValue","maxUnit","onInput","e","_e$target","target","addEventListener","removeEventListener","_roundStep$toString$s","_ref$current","newValue","iSizeToSize","number","addonAfter","tabIndex","newUnit","onDropdownVisibleChange","open","Typography","Text","fontFamily","toUpperCase","suffixIcon","cursor","onStep","afterStepValue","info","nextIndex","numValueNotNull","index","currentUnitIndex","indexOf","nextValue","nextUnit","nextNumValue","warn","extraMarks","hideSlider","_ref$step","minGiB","maxGiB","valueGiB","DynamicUnitInputNumber","visibility","styles","track","backgroundColor","compareNumberWithUnits","colorWarning","rail","tooltip","formatter","newNumValue","_defineProperty","colorTextSecondary","selectProps","assign","_objectDestructuringEmpty","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","run","_useResourceSlots","useResourceSlots","resourceSlots","_useTransition","useTransition","_useTransition2","isPendingUpdate","_startTransition","resource_presets","_ResourcePresetSelectQuery","loading","EditOutlined","preset","slotsInfo","JSON","parse","resource_slots","opacity","slot","ResourceNumber","hideTooltip","console","log","AUTOMATIC_DEFAULT_SHMEM","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","resource","cpu","mem","shmem","accelerator","num_of_sessions","cluster_mode","cluster_size","enabledAutomaticShmem","ResourceAllocationFormItems","enableNumOfSessions","enableResourcePresets","_ref$forceImageMinVal","forceImageMinValues","acceleratorSlots","_useCurrentKeyPairRes","_useCurrentKeyPairRes3","currentProject","useCurrentProjectValue","currentResourceGroup","setCurrentResourceGroup","isPendingCheckResets","startCheckRestsTransition","currentImage","_useResourceLimitAndR","_$find","_checkPresetInfo$scal","_checkPresetInfo$scal2","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal5","_checkPresetInfo$scal6","_checkPresetInfo$scal7","_checkPresetInfo$scal8","_checkPresetInfo$scal9","_checkPresetInfo$scal10","_iSizeToSize","_checkPresetInfo$scal11","_checkPresetInfo$scal12","_$find2","_iSizeToSize2","_iSizeToSize3","_iSizeToSize4","_iSizeToSize5","_iSizeToSize6","_$min2","_$min3","currentProjectName","_useTanQuery","useTanQuery","queryKey","queryFn","resourcePreset","check","scaling_group","staleTime","suspense","checkPresetInfo","data","refetch","isRefetching","currentImageMinM","resource_limits","resourceGroupResourceSize","scaling_groups","using","remaining","numberFixed","accelerators","result","_checkPresetInfo$scal13","_checkPresetInfo$scal14","_checkPresetInfo$scal15","_checkPresetInfo$scal16","_checkPresetInfo$scal17","_checkPresetInfo$scal18","resourceLimits","maxCPUCoresPerContainer","keypair_limits","group_limits","addNumberWithUnits","maxMemoryPerContainer","_$filter","_$filter$","configName","parseInt","supportedAcceleratorInfo","_$min","keypair_remaining","group_remaining","scaling_group_remaining","MAX_SAFE_INTEGER","useResourceLimitAndRemaining","_useResourceLimitAndR3","currentImageAcceleratorLimits","sessionSliderLimitAndRemaining","max_concurrent_sessions","concurrency_used","_resourceLimits$cpu","_resourceLimits$shmem","_resourceLimits$mem","minimumResources","_resourceLimits$accel","acceleratorType","_resourceLimits$accel2","nextImageSelectorType","acceleratorInfo","forEach","minNum","minNumStr","validateFields","catch","runShmemAutomationRule","M_plus_S","ResourceGroupSelect","autoSelectDefault","v","ResourcePresetSelect","_options$preset","_options$preset2","slots","numberUnit","shared_memory","Card","allocationPreset","_resourceLimits$cpu2","_baiClient$_config","_resourceLimits$cpu3","_resourceLimits$cpu4","_resourceLimits$cpu5","_resourceLimits$cpu6","_resourceLimits$cpu7","_resourceLimits$cpu8","_resourceLimits$cpu9","_resourceLimits$cpu10","placement","title","Trans","i18nKey","warningOnly","always_enqueue_compute_session","validator","_validator","_asyncToGenerator","_regeneratorRuntime","mark","_callee","rule","_baiClient$_config2","wrap","_context","next","abrupt","Promise","reject","amount","resolve","stop","_x","_x2","apply","InputNumberWithSlider","RemainingMark","props","onClick","preventDefault","_baiClient$_config3","_resourceLimits$mem5","_resourceLimits$mem6","_iSizeToSize7","_validator2","_callee2","_resourceLimits$mem2","_resourceLimits$mem3","_resourceLimits$mem4","_context2","size","_x3","_x4","_validator3","_callee3","_baiClient$_config4","_context3","_x5","_x6","DynamicUnitInputNumberWithSlider","addonBefore","valuePropName","Switch","checked","_resourceLimits$shmem2","dependencies","_validator4","_callee4","_getFieldValue2","_context4","_x7","_x8","_prev$resource","_next$resource","_ref7","_resourceLimits$accel3","_resourceLimits$accel4","_baiClient$_config5","_resourceLimits$accel5","_resourceLimits$accel6","_resourceLimits$accel7","_resourceLimits$accel8","currentAcceleratorType","_validator5","_callee5","_context5","_x9","_x10","_validator6","_callee6","_baiClient$_config6","_context6","_x11","_x12","ACCELERATOR_UNIT_MAP","initialValue","popupMatchSelectWidth","_baiClient$_config7","_validator7","_callee7","_baiClient$_config8","_context7","_x13","_x14","supports","colorBorder","Row","gutter","marginMD","Col","xs","Radio","_resourceLimits$cpu11","_baiClient$_config9","derivedClusterSizeMaxLimit","max_containers_per_session","clusterUnit","_validator8","_callee8","minCPU","_context8","_x15","_x16","position","top","transform","colorSuccess","CaretDownOutlined","node","v0","hash"],"sourceRoot":""}