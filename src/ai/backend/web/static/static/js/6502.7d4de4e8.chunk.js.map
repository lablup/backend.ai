{"version":3,"file":"static/js/6502.7d4de4e8.chunk.js","mappings":"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","sources":["components/DatePickerISO.tsx","components/HiddenFormItem.tsx","components/SessionNameFormItem.tsx","components/__generated__/SessionOwnerSetterCardQuery.graphql.ts","components/PortSelectFormItem.tsx","components/SessionLauncherErrorTourProps.tsx","components/SessionOwnerSetterCard.tsx","components/SessionLauncherPreview.tsx","hooks/useRecentSessionHistory.tsx","components/SessionTemplateModal.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport { GetRef } from 'antd/lib';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO = React.forwardRef<\n  GetRef<typeof DatePicker>,\n  DatePickerISOProps\n>(({ value, onChange, localFormat, ...pickerProps }, ref) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      ref={ref}\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n});\n\nDatePickerISO.displayName = 'DatePickerISO';\nexport default DatePickerISO;\n","import { Form, FormItemProps } from 'antd';\nimport React, { useEffect } from 'react';\n\ninterface HiddenFormItemProps extends Omit<FormItemProps, 'children'> {\n  value: any;\n}\nconst HiddenFormItem: React.FC<HiddenFormItemProps> = ({ value, ...props }) => {\n  const form = Form.useFormInstance();\n  useEffect(() => {\n    form.setFieldValue(props.name, value);\n  }, [value, form, props.name]);\n  return <Form.Item {...props} hidden />;\n};\n\nexport default HiddenFormItem;\n","import { Form, FormItemProps, Input } from 'antd';\nimport { TFunction } from 'i18next';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\n\nexport const getSessionNameRules = (t: TFunction): FormItemProps['rules'] => [\n  {\n    min: 4,\n    message: t('session.validation.SessionNameTooShort'),\n  },\n  {\n    max: 64,\n    message: t('session.validation.SessionNameTooLong64'),\n  },\n  {\n    validator(f, value) {\n      if (_.isEmpty(value)) {\n        return Promise.resolve();\n      }\n      if (!/^\\w/.test(value)) {\n        return Promise.reject(\n          t('session.validation.SessionNameShouldStartWith'),\n        );\n      }\n\n      if (!/^[\\w.-]*$/.test(value)) {\n        return Promise.reject(\n          t('session.validation.SessionNameInvalidCharacter'),\n        );\n      }\n\n      if (!/\\w$/.test(value) && value.length >= 4) {\n        return Promise.reject(t('session.validation.SessionNameShouldEndWith'));\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={getSessionNameRules(t)}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","/**\n * @generated SignedSource<<d19e05501e2f8044559e0684fe36364e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionOwnerSetterCardQuery$variables = {\n  email: string;\n};\nexport type SessionOwnerSetterCardQuery$data = {\n  readonly keypairs: ReadonlyArray<{\n    readonly access_key: string | null | undefined;\n  } | null | undefined> | null | undefined;\n  readonly user: {\n    readonly domain_name: string | null | undefined;\n    readonly groups: ReadonlyArray<{\n      readonly id: string | null | undefined;\n      readonly name: string | null | undefined;\n    } | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type SessionOwnerSetterCardQuery = {\n  response: SessionOwnerSetterCardQuery$data;\n  variables: SessionOwnerSetterCardQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"domain_name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"UserGroup\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"groups\",\n  \"plural\": true,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    (v4/*: any*/)\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"a8de553c14d6730a6825cba2f409be0d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionOwnerSetterCardQuery(\\n  $email: String!\\n) {\\n  keypairs(email: $email) {\\n    access_key\\n    id\\n  }\\n  user(email: $email) {\\n    domain_name\\n    groups {\\n      name\\n      id\\n    }\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ba086835ea654ab889e0e6aaefa0abfe\";\n\nexport default node;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({\n  name = 'ports',\n  ...formItemProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const form = Form.useFormInstance();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name={name}\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        () => ({\n          validator(rule, values) {\n            if (\n              transformPortValuesToNumbers(values).length <=\n              baiClient._config.maxCountForPreopenPorts\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(\n                  t('session.launcher.PreOpenPortMaxCountLimit', {\n                    count: baiClient._config.maxCountForPreopenPorts,\n                  }),\n                ),\n              );\n            }\n          },\n        }),\n        () => ({\n          // To check if the port range is not start <= end\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                return parseInt(v).toString() === v || isPortRangeStr(v);\n              })\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(t('session.launcher.InvalidPortFormat')),\n              );\n            }\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            const allPorts = transformPortValuesToNumbers(values);\n            if (\n              _.every(allPorts, (port) => {\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            // To check if the port is duplicated\n            const allPorts = transformPortValuesToNumbers(values);\n            if (_.uniq(allPorts).length === allPorts.length) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.DuplicatedPort')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          const hasDuplicated =\n            _.filter(\n              transformPortValuesToNumbers(form.getFieldValue(name)),\n              (v) => v === parseInt(props.value),\n            ).length > 1;\n          return (\n            <PortTag\n              inValid={hasDuplicated}\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.PreOpen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n  inValid?: boolean;\n}\n\nexport const PortTag: React.FC<PortTagProps> = ({\n  inValid,\n  value,\n  ...tagProps\n}) => {\n  return (\n    <Tag\n      color={!inValid && isValidPortStr(value) ? undefined : 'red'}\n      {...tagProps}\n    />\n  );\n};\n\nexport const isValidPortStr = (portStr: string) => {\n  // consider range as valid\n  if (isPortRangeStr(portStr)) {\n    const splitPortRange = portStr.split(':');\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start >= MIN_PORT && end <= MAX_PORT;\n  } else if (\n    portStr === parseInt(portStr).toString() &&\n    parseInt(portStr) >= MIN_PORT &&\n    parseInt(portStr) <= MAX_PORT\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const isPortRangeStr = (portRange: string) => {\n  const splitPortRange = portRange.split(':');\n  if (splitPortRange.length === 2) {\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start <= end;\n  }\n  return false;\n};\n\nexport const parsePortRangeToNumbers = (portRange: string) => {\n  const [start, end] = portRange.split(':').map((v) => parseInt(v));\n  return _.range(start, end + 1);\n};\n\nexport const transformPortValuesToNumbers = (\n  values: PortSelectFormValues['ports'],\n) => {\n  return _.flatten(\n    _.map(values, (v) =>\n      isPortRangeStr(v) ? parsePortRangeToNumbers(v) : parseInt(v),\n    ),\n  );\n};\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useBAISettingUserState } from '../hooks/useBAISetting';\nimport { Tour, TourProps } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionLauncherValidationTourProps extends Omit<TourProps, 'steps'> {}\nconst SessionLauncherValidationTour: React.FC<\n  SessionLauncherValidationTourProps\n> = ({ open, onClose, ...otherProps }) => {\n  const { t } = useTranslation();\n  const [hasOpenedValidationTour, setHasOpenedValidationTour] =\n    useBAISettingUserState('has_opened_tour_neo_session_validation');\n\n  const steps = [\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.ValidationErrorText'),\n      target: () =>\n        document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t(\n        'tourGuide.neoSessionLauncher.FixErrorFieldByModifyButton',\n      ),\n      target: () =>\n        (\n          document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement\n        )?.querySelector('.ant-card-extra') as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.FixErrorAndTryAgainText'),\n      target: () =>\n        document.querySelector(\n          '[data-test-id=\"neo-session-launcher-tour-step-navigation\"]',\n        ) as HTMLElement,\n    },\n  ];\n  return (\n    <Tour\n      steps={steps}\n      onClose={(e) => {\n        onClose?.(e);\n        setHasOpenedValidationTour(true);\n      }}\n      open={!hasOpenedValidationTour && open}\n      {...otherProps}\n    />\n  );\n};\n\nexport default SessionLauncherValidationTour;\n","import { useCurrentUserRole } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAICard, { BAICardProps } from './BAICard';\nimport BAISelect from './BAISelect';\nimport Flex from './Flex';\nimport HiddenFormItem from './HiddenFormItem';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { SessionOwnerSetterCardQuery } from './__generated__/SessionOwnerSetterCardQuery.graphql';\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Form,\n  Input,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport { CardProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { CheckIcon } from 'lucide-react';\nimport React, { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { fetchQuery, useRelayEnvironment } from 'react-relay';\n\nexport interface SessionOwnerSetterFormValues {\n  owner?:\n    | {\n        email: string;\n        accesskey: string;\n        project: string;\n        resourceGroup: string;\n        enabled: true;\n        domainName: string;\n      }\n    | {\n        email?: string;\n        accesskey?: string;\n        project?: string;\n        resourceGroup?: string;\n        enabled: false;\n        domainName?: string;\n      };\n}\n\nconst SessionOwnerSetterCard: React.FC<CardProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const form = Form.useFormInstance<SessionOwnerSetterFormValues>();\n\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n\n  const [fetchingEmail, setFetchingEmail] = useState<string>();\n  const relayEvn = useRelayEnvironment();\n\n  const { data, isFetching } = useTanQuery({\n    queryKey: ['SessionOwnerSetterCard', 'ownerInfo', fetchingEmail],\n    queryFn: () => {\n      const email = form.getFieldValue(['owner', 'email']);\n      if (!email) return;\n\n      const query = graphql`\n        query SessionOwnerSetterCardQuery($email: String!) {\n          keypairs(email: $email) {\n            access_key\n          }\n          user(email: $email) {\n            domain_name\n            groups {\n              name\n              id\n            }\n          }\n        }\n      `;\n      return fetchQuery<SessionOwnerSetterCardQuery>(relayEvn, query, {\n        email,\n      }).toPromise();\n    },\n    enabled: !!fetchingEmail,\n  });\n\n  const ownerKeypairs = form.getFieldValue(['owner', 'email'])\n    ? data?.keypairs\n    : undefined;\n  const owner = form.getFieldValue(['owner', 'email']) ? data?.user : undefined;\n\n  const nonExistentOwner = !isFetching && fetchingEmail && !owner;\n\n  return (\n    <Card\n      title={t('session.launcher.SetSessionOwner')}\n      extra={\n        <Form.Item name={['owner', 'enabled']} valuePropName=\"checked\" noStyle>\n          <Switch />\n        </Form.Item>\n      }\n      styles={\n        isActive\n          ? undefined\n          : {\n              header: {\n                borderBottom: 'none',\n              },\n              body: {\n                display: isActive ? 'block' : 'none',\n              },\n            }\n      }\n      {...props}\n    >\n      <HiddenFormItem\n        name={['owner', 'domainName']}\n        value={owner?.domain_name}\n      />\n      <Form.Item dependencies={[['owner', 'enabled']]} noStyle>\n        {({ getFieldValue }) => {\n          return (\n            <>\n              <Flex>\n                <Form.Item\n                  name={['owner', 'email']}\n                  label={t('session.launcher.OwnerEmail')}\n                  rules={[\n                    {\n                      required: isActive,\n                    },\n                    {\n                      type: 'email',\n                      message: t('credential.validation.InvalidEmailAddress'),\n                    },\n                  ]}\n                  style={{ flex: 1 }}\n                  validateStatus={nonExistentOwner ? 'error' : undefined}\n                  help={\n                    nonExistentOwner\n                      ? t('credential.NoUserToDisplay')\n                      : undefined\n                  }\n                >\n                  <Input.Search\n                    onSearch={(v) => {\n                      // startTransition(()=>{\n                      form\n                        .validateFields([['owner', 'email']])\n                        .then(() => {\n                          setFetchingEmail(v);\n                        })\n                        .catch(() => {});\n                      // })\n                    }}\n                    onChange={() => {\n                      setFetchingEmail('');\n                      form.setFieldsValue({\n                        owner: {\n                          accesskey: '',\n                          project: undefined,\n                          resourceGroup: undefined,\n                        },\n                      });\n                    }}\n                    loading={isFetching}\n                    enterButton={\n                      !isFetching && owner ? (\n                        <Button icon={<CheckIcon />} />\n                      ) : undefined\n                    }\n                  />\n                </Form.Item>\n              </Flex>\n              <Form.Item\n                name={['owner', 'accesskey']}\n                label={t('session.launcher.OwnerAccessKey')}\n                rules={[\n                  {\n                    required: getFieldValue(['owner', 'enabled']),\n                  },\n                ]}\n              >\n                <BAISelect\n                  options={_.map(ownerKeypairs, (k) => {\n                    return {\n                      label: k?.access_key,\n                      value: k?.access_key,\n                    };\n                  })}\n                  autoSelectOption\n                  disabled={_.isEmpty(fetchingEmail) || isFetching}\n                  // defaultActiveFirstOption\n                />\n              </Form.Item>\n              <Row gutter={token.marginSM}>\n                <Col span={12}>\n                  <Form.Item\n                    name={['owner', 'project']}\n                    label={t('session.launcher.OwnerGroup')}\n                    rules={[\n                      {\n                        required: getFieldValue(['owner', 'enabled']),\n                      },\n                    ]}\n                  >\n                    <BAISelect\n                      options={_.map(owner?.groups, (g) => {\n                        return {\n                          label: g?.name,\n                          value: g?.name,\n                        };\n                      })}\n                      autoSelectOption\n                      disabled={_.isEmpty(fetchingEmail) || isFetching}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item dependencies={[['owner', 'project']]} noStyle>\n                    {({ getFieldValue }) => {\n                      return (\n                        <Suspense\n                          fallback={\n                            <Form.Item\n                              label={t('session.launcher.OwnerResourceGroup')}\n                              rules={[\n                                {\n                                  required: getFieldValue(['owner', 'enabled']),\n                                },\n                              ]}\n                            >\n                              <Select loading />\n                            </Form.Item>\n                          }\n                        >\n                          <Form.Item\n                            name={['owner', 'resourceGroup']}\n                            label={t('session.launcher.OwnerResourceGroup')}\n                            rules={[\n                              {\n                                required: getFieldValue(['owner', 'enabled']),\n                              },\n                            ]}\n                          >\n                            {getFieldValue(['owner', 'project']) ? (\n                              <ResourceGroupSelect\n                                projectName={getFieldValue([\n                                  'owner',\n                                  'project',\n                                ])}\n                                disabled={\n                                  _.isEmpty(fetchingEmail) || isFetching\n                                }\n                                autoSelectDefault\n                              />\n                            ) : (\n                              <Select disabled />\n                            )}\n                          </Form.Item>\n                        </Suspense>\n                      );\n                    }}\n                  </Form.Item>\n                </Col>\n              </Row>\n            </>\n          );\n        }}\n      </Form.Item>\n    </Card>\n  );\n};\n\nexport const SessionOwnerSetterPreviewCard: React.FC<BAICardProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n  const currentUserRole = useCurrentUserRole();\n  return (\n    (currentUserRole === 'admin' || currentUserRole === 'superadmin') &&\n    isActive && (\n      <BAICard\n        title={t('session.launcher.SetSessionOwner')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError(['owner', 'email']).length > 0 ||\n          form.getFieldError(['owner', 'accesskey']).length > 0 ||\n          form.getFieldError(['owner', 'project']).length > 0 ||\n          form.getFieldError(['owner', 'resourceGroup']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        {...props}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.OwnerEmail')}>\n            {form.getFieldValue(['owner', 'email'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerAccessKey')}>\n            {form.getFieldValue(['owner', 'accesskey'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerGroup')}>\n            {form.getFieldValue(['owner', 'project'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerResourceGroup')}>\n            {form.getFieldValue(['owner', 'resourceGroup'])}\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    )\n  );\n};\n\nexport default SessionOwnerSetterCard;\n","import { preserveDotStartCase, getImageFullName } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport {\n  SessionLauncherFormValue,\n  ResourceNumbersOfSession,\n  SessionLauncherStepKey,\n} from '../pages/SessionLauncherPage';\nimport BAICard from './BAICard';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { ImageTags } from './ImageTags';\nimport { PortTag } from './PortSelectFormItem';\nimport { SessionOwnerSetterPreviewCard } from './SessionOwnerSetterCard';\nimport SourceCodeViewer from './SourceCodeViewer';\nimport {\n  Descriptions,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  Tag,\n  Alert,\n  Card,\n  Table,\n  Form,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst SessionLauncherPreview: React.FC<{\n  onClickEditStep: (stepKey: SessionLauncherStepKey) => void;\n}> = ({ onClickEditStep }) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance<SessionLauncherFormValue>();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  const sessionType = Form.useWatch('sessionType', { form, preserve: true });\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n  const supportExtendedImageInfo =\n    baiClient?.supports('extended-image-info') ?? false;\n  const currentProject = useCurrentProjectValue();\n  const [, { getBaseVersion, getBaseImage, tagAlias }] =\n    useBackendAIImageMetaData();\n  const { isDarkMode } = useThemeMode();\n\n  return (\n    <>\n      <BAICard\n        title={t('session.launcher.SessionType')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError('sessionName').length > 0 ||\n          form.getFieldError(['batch', 'command']).length > 0 ||\n          form.getFieldError(['batch', 'scheduleDate']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.SessionType')}>\n            {form.getFieldValue('sessionType')}\n          </Descriptions.Item>\n          {!_.isEmpty(form.getFieldValue('sessionName')) && (\n            <Descriptions.Item label={t('session.launcher.SessionName')}>\n              {form.getFieldValue('sessionName')}\n            </Descriptions.Item>\n          )}\n          {sessionType === 'batch' && (\n            <>\n              <Descriptions.Item\n                label={t('session.launcher.StartUpCommand')}\n                labelStyle={{ whiteSpace: 'nowrap' }}\n                contentStyle={{\n                  overflow: 'auto',\n                }}\n              >\n                {form.getFieldValue(['batch', 'command']) ? (\n                  <SourceCodeViewer language=\"shell\">\n                    {form.getFieldValue(['batch', 'command'])}\n                  </SourceCodeViewer>\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('session.launcher.SessionStartTime')}>\n                {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                  dayjs(form.getFieldValue(['batch', 'scheduleDate'])).format(\n                    'LLL (Z)',\n                  )\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              {supportBatchTimeout ? (\n                <Descriptions.Item\n                  label={t('session.launcher.BatchJobTimeoutDuration')}\n                >\n                  {form.getFieldValue(['batch', 'timeout']) ? (\n                    <Typography.Text>\n                      {form.getFieldValue(['batch', 'timeout'])}\n                      {form.getFieldValue(['batch', 'timeoutUnit']) || 's'}\n                    </Typography.Text>\n                  ) : (\n                    <Typography.Text type=\"secondary\">\n                      {t('general.None')}\n                    </Typography.Text>\n                  )}\n                </Descriptions.Item>\n              ) : null}\n            </>\n          )}\n        </Descriptions>\n      </BAICard>\n      <SessionOwnerSetterPreviewCard\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      />\n      <BAICard\n        title={t('session.launcher.Environments')}\n        showDivider\n        size=\"small\"\n        status={\n          _.some(\n            form.getFieldValue(\n              'envvars',\n            ) as SessionLauncherFormValue['envvars'],\n            (v, idx) => {\n              return (\n                form.getFieldError(['envvars', idx, 'variable']).length > 0 ||\n                form.getFieldError(['envvars', idx, 'value']).length > 0\n              );\n            },\n          )\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.Project')}>\n            {currentProject.name}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('general.Image')}>\n            {supportExtendedImageInfo ? (\n              <Row style={{ flexFlow: 'nowrap' }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                    style={{ marginRight: token.marginXS }}\n                  />\n                </Col>\n                <Col>\n                  <Flex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            form.getFieldValue('environments')?.image\n                              ?.base_image_name,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {form.getFieldValue('environments')?.image?.version}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                        {_.map(\n                          form.getFieldValue('environments')?.image?.tags,\n                          (tag: { key: string; value: string }) => {\n                            const isCustomized = _.includes(\n                              tag.key,\n                              'customized_',\n                            );\n                            const tagValue = isCustomized\n                              ? _.find(\n                                  form.getFieldValue('environments')?.image\n                                    ?.labels,\n                                  {\n                                    key: 'ai.backend.customized-image.name',\n                                  },\n                                )?.value\n                              : tag.value;\n                            const aliasedTag = tagAlias(tag.key + tagValue);\n                            return _.isEqual(\n                              aliasedTag,\n                              preserveDotStartCase(tag.key + tagValue),\n                            ) ? (\n                              <DoubleTag\n                                key={tag.key}\n                                values={[\n                                  {\n                                    label: tagAlias(tag.key),\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                  {\n                                    label: tagValue,\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                ]}\n                              />\n                            ) : (\n                              <Tag\n                                key={tag.key}\n                                color={isCustomized ? 'cyan' : 'blue'}\n                              >\n                                {aliasedTag}\n                              </Tag>\n                            );\n                          },\n                        )}\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </Flex>\n                </Col>\n              </Row>\n            ) : (\n              <Row style={{ flexFlow: 'nowrap', gap: token.sizeXS }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                  />\n                </Col>\n                <Col>\n                  {/* {form.getFieldValue('environments').image} */}\n                  <Flex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            getBaseImage(\n                              form.getFieldValue('environments')?.version,\n                            ),\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {getBaseVersion(\n                            form.getFieldValue('environments')?.version,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <ImageTags\n                          tag={form.getFieldValue([\n                            'environments',\n                            'image',\n                            'tag',\n                          ])}\n                          labels={\n                            form.getFieldValue('environments')?.image\n                              ?.labels as Array<{\n                              key: string;\n                              value: string;\n                            }>\n                          }\n                        />\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </Flex>\n                </Col>\n              </Row>\n            )}\n          </Descriptions.Item>\n          {form.getFieldValue('envvars')?.length > 0 && (\n            <Descriptions.Item\n              label={t('session.launcher.EnvironmentVariable')}\n            >\n              {form.getFieldValue('envvars')?.length ? (\n                <SyntaxHighlighter\n                  style={isDarkMode ? dark : undefined}\n                  codeTagProps={{\n                    style: {\n                      // fontFamily: 'monospace',\n                    },\n                  }}\n                  // showLineNumbers\n                  customStyle={{\n                    margin: 0,\n                    width: '100%',\n                  }}\n                >\n                  {_.map(\n                    form.getFieldValue('envvars'),\n                    (v: { variable: string; value: string }) =>\n                      `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                  ).join('\\n')}\n                </SyntaxHighlighter>\n              ) : (\n                <Typography.Text type=\"secondary\">-</Typography.Text>\n              )}\n            </Descriptions.Item>\n          )}\n        </Descriptions>\n      </BAICard>\n      <BAICard\n        title={t('session.launcher.ResourceAllocation')}\n        showDivider\n        status={\n          _.some(form.getFieldValue('resource'), (v, key) => {\n            return (\n              // @ts-ignore\n              form.getFieldError(['resource', key]).length > 0\n            );\n          }) ||\n          form.getFieldError(['num_of_sessions']).length > 0 ||\n          form.getFieldError('resourceGroup').length > 0\n            ? 'error'\n            : // : _.some(form.getFieldValue('resource'), (v, key) => {\n              //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n              //     // console.log(form.getFieldValue(['resource']));\n              //     return (\n              //       form.getFieldWarning(['resource', key]).length >\n              //       0\n              //     );\n              //   })\n              // ? 'warning'\n              undefined\n        }\n        size=\"small\"\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {_.some(\n            form.getFieldValue('resource'),\n            (v, key: keyof SessionLauncherFormValue['resource']) => {\n              return (\n                // @ts-ignore\n                form.getFieldWarning(['resource', key]).length > 0\n              );\n            },\n          ) && (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.EnqueueComputeSessionWarning')}\n            />\n          )}\n\n          <Descriptions column={2}>\n            <Descriptions.Item label={t('general.ResourceGroup')} span={2}>\n              {form.getFieldValue('resourceGroup') || (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              )}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={t('session.launcher.ResourceAllocationPerContainer')}\n              span={2}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"start\"\n                gap={'sm'}\n                wrap=\"wrap\"\n                style={{ flex: 1 }}\n              >\n                {form.getFieldValue('allocationPreset') === 'custom' ? (\n                  // t('session.launcher.CustomAllocation')\n                  ''\n                ) : (\n                  <Tag>{form.getFieldValue('allocationPreset')}</Tag>\n                )}\n\n                <ResourceNumbersOfSession\n                  resource={form.getFieldValue('resource')}\n                />\n                {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n              </Flex>\n            </Descriptions.Item>\n            {baiClient.supports('agent-select') &&\n              !baiClient?._config?.hideAgents && (\n                <Descriptions.Item label={t('session.launcher.AgentNode')}>\n                  {form.getFieldValue('agent') ||\n                    t('session.launcher.AutoSelect')}\n                </Descriptions.Item>\n              )}\n            <Descriptions.Item label={t('session.launcher.NumberOfContainer')}>\n              {form.getFieldValue('cluster_size') === 1\n                ? form.getFieldValue('num_of_sessions')\n                : form.getFieldValue('cluster_size')}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('session.launcher.ClusterMode')}>\n              {form.getFieldValue('cluster_mode') === 'single-node'\n                ? t('session.launcher.SingleNode')\n                : t('session.launcher.MultiNode')}\n            </Descriptions.Item>\n          </Descriptions>\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={t('session.launcher.TotalAllocation')}\n          >\n            <Flex direction=\"row\" gap=\"xxs\">\n              <ResourceNumbersOfSession\n                resource={form.getFieldValue('resource')}\n                containerCount={\n                  form.getFieldValue('cluster_size') === 1\n                    ? form.getFieldValue('num_of_sessions')\n                    : form.getFieldValue('cluster_size')\n                }\n              />\n            </Flex>\n          </Card>\n        </Flex>\n      </BAICard>\n      <BAICard\n        title={t('webui.menu.Data&Storage')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError('vfoldersAliasMap').length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('storage');\n        }}\n      >\n        {/* {console.log(_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames')]))} */}\n        {/* {_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames').length]) > 0 ? ( */}\n        <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n          {form.getFieldValue('mounts')?.length > 0 ? (\n            <Table\n              rowKey=\"name\"\n              size=\"small\"\n              pagination={false}\n              columns={[\n                {\n                  dataIndex: 'name',\n                  title: t('data.folders.Name'),\n                },\n                {\n                  dataIndex: 'alias',\n                  title: t('session.launcher.FolderAlias'),\n                  render: (value, record) => {\n                    return _.isEmpty(value) ? (\n                      <Typography.Text\n                        type=\"secondary\"\n                        style={{\n                          opacity: 0.7,\n                        }}\n                      >\n                        {`/home/work/${record.name}`}\n                      </Typography.Text>\n                    ) : (\n                      value\n                    );\n                  },\n                },\n              ]}\n              dataSource={_.map(form.getFieldValue('mounts'), (v) => {\n                return {\n                  name: v,\n                  alias: form.getFieldValue('vfoldersAliasMap')?.[v],\n                };\n              })}\n            ></Table>\n          ) : (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.NoFolderMounted')}\n            />\n          )}\n          {form.getFieldValue('autoMountedFolderNames')?.length > 0 ? (\n            <Descriptions size=\"small\">\n              <Descriptions.Item label={t('data.AutomountFolders')}>\n                {_.map(form.getFieldValue('autoMountedFolderNames'), (name) => {\n                  return <Tag>{name}</Tag>;\n                })}\n              </Descriptions.Item>\n            </Descriptions>\n          ) : null}\n        </Flex>\n      </BAICard>\n      <BAICard\n        title=\"Network\"\n        showDivider\n        size=\"small\"\n        status={form.getFieldError('ports').length > 0 ? 'error' : undefined}\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('network');\n        }}\n      >\n        <Descriptions size=\"small\">\n          <Descriptions.Item label={t('session.launcher.PreOpenPortTitle')}>\n            <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }} wrap=\"wrap\">\n              {/* {form.getFieldValue('environments').image} */}\n              {_.sortBy(form.getFieldValue('ports'), (v) => parseInt(v)).map(\n                (v, idx) => (\n                  <PortTag key={idx + v} value={v} style={{ margin: 0 }}>\n                    {v}\n                  </PortTag>\n                ),\n              )}\n\n              {!_.isArray(form.getFieldValue('ports')) ||\n              form.getFieldValue('ports')?.length === 0 ? (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              ) : null}\n            </Flex>\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    </>\n  );\n};\n\nexport default SessionLauncherPreview;\n","import { generateRandomString } from '../helper';\nimport { SessionHistory, useBAISettingUserState } from './useBAISetting';\nimport { useEventNotStable } from './useEventNotStable';\nimport _ from 'lodash';\n\nexport const useRecentSessionHistory = () => {\n  const [recentSessions, setRecentSessionHistory] = useBAISettingUserState(\n    'recentSessionHistory',\n  );\n\n  const push = useEventNotStable(\n    ({\n      id,\n      params,\n      createdAt,\n      name,\n    }: SelectivePartial<SessionHistory, 'id' | 'createdAt'>) => {\n      const newHistory: SessionHistory = {\n        id: id ?? generateRandomString(8),\n        params,\n        createdAt: createdAt ?? new Date().toISOString(),\n        name: name,\n      };\n      // push new history to the top of recentSessionHistory and keep it up to 5\n      const newRecentSessionHistory = _.sortBy(\n        [newHistory, ...(recentSessions || [])],\n        '-createdAt',\n      ).slice(0, 5);\n      setRecentSessionHistory(newRecentSessionHistory);\n    },\n  );\n  const clear = useEventNotStable(() => setRecentSessionHistory([]));\n  const remove = useEventNotStable((id: string) => {\n    const newRecentSessionHistory = (recentSessions || []).filter(\n      (item) => item.id !== id,\n    );\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n\n  const update = useEventNotStable((id: string, name: string) => {\n    const newRecentSessionHistory = (recentSessions || []).map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          name,\n        };\n      }\n      return item;\n    });\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n\n  return [\n    recentSessions,\n    {\n      push,\n      clear,\n      remove,\n      update,\n    },\n  ] as const;\n};\n\nexport const usePinnedSessionHistory = () => {\n  const [pinnedSessionHistory, setPinnedSessionHistory] =\n    useBAISettingUserState('pinnedSessionHistory');\n  const [recentSessionHistory] = useBAISettingUserState('recentSessionHistory');\n\n  const pin = useEventNotStable((id: string) => {\n    const pinnedItem = (recentSessionHistory || []).find(\n      (item) => item.id === id,\n    );\n    pinnedItem &&\n      setPinnedSessionHistory([...(pinnedSessionHistory || []), pinnedItem]);\n  });\n\n  const unpin = useEventNotStable((id: string) => {\n    const newPinnedSessionHistory = (pinnedSessionHistory || []).filter(\n      (item) => item.id !== id,\n    );\n    setPinnedSessionHistory(newPinnedSessionHistory);\n  });\n\n  const update = useEventNotStable((id: string, name: string) => {\n    const newPinnedSessionHistory = (pinnedSessionHistory || []).map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          name,\n        };\n      }\n      return item;\n    });\n    setPinnedSessionHistory(newPinnedSessionHistory);\n  });\n\n  return [\n    pinnedSessionHistory,\n    {\n      pin,\n      unpin,\n      update,\n    },\n  ] as const;\n};\n","import { useBackendAIImageMetaData } from '../hooks';\nimport { SessionHistory } from '../hooks/useBAISetting';\nimport {\n  usePinnedSessionHistory,\n  useRecentSessionHistory,\n} from '../hooks/useRecentSessionHistory';\nimport {\n  ResourceNumbersOfSession,\n  SessionLauncherFormValue,\n} from '../pages/SessionLauncherPage';\nimport BAILink from './BAILink';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport BAITable from './BAITable';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport QuestionIconWithTooltip from './QuestionIconWithTooltip';\nimport { Button, theme, Tooltip, Typography } from 'antd';\nimport { createStyles } from 'antd-style';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { PinIcon } from 'lucide-react';\nimport React, { Key, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyle = createStyles(({ token, css }) => ({\n  fixEditableVerticalAlign: css`\n    & {\n      margin-top: 0px !important;\n    }\n  `,\n}));\n\ninterface SessionTemplateModalProps\n  extends Omit<BAIModalProps, 'onOk' | 'onCancel'> {\n  onRequestClose: (formValue?: SessionLauncherFormValue) => void;\n}\nconst SessionTemplateModal: React.FC<SessionTemplateModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { styles } = useStyle();\n  const [sessionHistory, { update: updateSessionHistory }] =\n    useRecentSessionHistory();\n  const [hoverRowKey, setHoverRowKey] = useState<Key | null>(null);\n\n  const [, { getImageAliasName, getBaseVersion }] = useBackendAIImageMetaData();\n  const [pinnedSessionHistory, { pin, unpin, update: updatePinnedHistory }] =\n    usePinnedSessionHistory();\n\n  const [, setSelectedHistoryId] = useState<string>();\n  const { token } = theme.useToken();\n\n  const parsedSessionHistory = useMemo(() => {\n    const parseToFormValues = (history: SessionHistory, isPinned: boolean) => {\n      const params = new URLSearchParams(history.params);\n      const formValues: SessionLauncherFormValue = JSON.parse(\n        params.get('formValues') || '{}',\n      );\n      return {\n        ...formValues,\n        pinned: isPinned,\n        name: history.name,\n      };\n    };\n\n    // const params = new URLSearchParams(history.params);\n    //   const formValues: SessionLauncherFormValue = JSON.parse(\n    //     params.get('formValues') || '{}',\n    //   );\n    const recent = _.map(sessionHistory, (history) => ({\n      ...history,\n      ...parseToFormValues(history, false),\n    }));\n\n    const pinned = _.map(pinnedSessionHistory, (history) => ({\n      ...history,\n      ...parseToFormValues(history, true),\n    }));\n\n    return _.chain([...pinned, ...recent])\n      .unionBy('id')\n      .value();\n  }, [sessionHistory, pinnedSessionHistory]);\n\n  return (\n    <BAIModal\n      width={800}\n      title={t('session.launcher.RecentHistory')}\n      footer={null}\n      onCancel={() => {\n        // reset\n        setSelectedHistoryId(undefined);\n        modalProps.onRequestClose();\n      }}\n      {...modalProps}\n    >\n      <Flex direction=\"column\" align=\"stretch\" gap=\"sm\">\n        <Typography.Text>\n          {t('session.launcher.YouCanStartWithHistory')}\n        </Typography.Text>\n        <BAITable\n          rowSelection={{\n            selectedRowKeys: pinnedSessionHistory?.map((item) => item.id),\n            columnWidth: 0,\n            hideSelectAll: true,\n            renderCell: () => null,\n          }}\n          scroll={{ x: 'max-content' }}\n          dataSource={parsedSessionHistory}\n          pagination={false}\n          onRow={(record) => ({\n            onMouseEnter: () => setHoverRowKey(record.id),\n            onMouseLeave: () => setHoverRowKey(null),\n          })}\n          rowKey={(record) => record.id}\n          columns={[\n            {\n              title: (\n                <Flex gap={'xxs'}>\n                  <PinIcon />\n                  <QuestionIconWithTooltip\n                    title={t('session.launcher.PinnedHistoryTooltip')}\n                  />\n                </Flex>\n              ),\n              dataIndex: 'pinned',\n              width: 40,\n              render: (value, record) => {\n                const isPinned = !!record.pinned;\n                const isHovered = hoverRowKey === record.id;\n                return isPinned ? (\n                  <Button\n                    size=\"small\"\n                    onClick={() => {\n                      unpin(record.id);\n                      // TODO: add it to recent session history\n                    }}\n                    type=\"link\"\n                  >\n                    <PinIcon />\n                  </Button>\n                ) : (\n                  <Button\n                    size=\"small\"\n                    onClick={() => pin(record.id)}\n                    type=\"link\"\n                  >\n                    <PinIcon\n                      style={{\n                        color: isHovered\n                          ? token.colorTextQuaternary\n                          : 'transparent',\n                      }}\n                    />\n                  </Button>\n                );\n              },\n            },\n            {\n              title: t('session.launcher.SessionNameShort'),\n              dataIndex: 'name',\n              render: (name, record) => {\n                const displayName = name || record.id.split('-')[0];\n                return (\n                  <Typography.Link\n                    className={styles.fixEditableVerticalAlign}\n                    editable={{\n                      onChange(value) {\n                        if (!_.isEmpty(value)) {\n                          updateSessionHistory(record.id, value);\n                          record.pinned &&\n                            updatePinnedHistory(record.id, value);\n                        }\n                      },\n                      text: displayName,\n                    }}\n                  >\n                    <BAILink\n                      type=\"hover\"\n                      onClick={() => {\n                        const params = _.find(sessionHistory, {\n                          id: record.id,\n                        })?.params;\n                        modalProps.onRequestClose?.(\n                          JSON.parse(\n                            new URLSearchParams(params).get('formValues') ||\n                              '{}',\n                          ),\n                        );\n                      }}\n                    >\n                      {displayName}\n                    </BAILink>\n                  </Typography.Link>\n                );\n              },\n            },\n            {\n              title: t('session.launcher.Environments'),\n              dataIndex: ['environments', 'version'],\n              render: (version, record) => {\n                const imageStr =\n                  record.environments.version || record.environments.manual;\n                return (\n                  imageStr && (\n                    <Tooltip title={imageStr} placement=\"right\">\n                      <Flex gap={'xxs'}>\n                        <ImageMetaIcon image={imageStr} />\n                        <Typography.Text>\n                          {getImageAliasName(imageStr)}{' '}\n                          {getBaseVersion(imageStr)}\n                        </Typography.Text>\n                      </Flex>\n                    </Tooltip>\n                  )\n                );\n              },\n              onCell: () => ({\n                style: { maxWidth: 250, textOverflow: 'ellipsis' },\n              }),\n            },\n            {\n              title: t('session.launcher.ResourceAllocation'),\n              dataIndex: 'resource',\n              render: (resource) => {\n                // return JSON.stringify(resource)\n                return (\n                  <Flex gap={'xs'}>\n                    <ResourceNumbersOfSession resource={resource} />\n                  </Flex>\n                );\n              },\n            },\n            // {\n            //   dataIndex: 'mounts',\n            //   render: (value, record) => {\n            //     return _.join(record.mounts,', ');\n            //   }\n            // },\n            {\n              title: t('session.launcher.CreatedAt'),\n              dataIndex: 'createdAt',\n              render: (createdAt: string) => {\n                return dayjs(createdAt).fromNow();\n              },\n            },\n          ]}\n        />\n      </Flex>\n      {/* <Tabs\n        defaultActiveKey=\"history\"\n        items={[\n          {\n            key: 'template',\n            label: t('session.launcher.Template'),\n            children: <div>Template</div>,\n          },\n          {\n            key: 'history',\n            label: t('session.launcher.RecentHistory'),\n            children: (\n              \n            ),\n          },\n        ]}\n      /> */}\n    </BAIModal>\n  );\n};\n\nexport default SessionTemplateModal;\n","import BAIIntervalView from '../components/BAIIntervalView';\nimport DatePickerISO from '../components/DatePickerISO';\nimport EnvVarFormList, {\n  sanitizeSensitiveEnv,\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  transformPortValuesToNumbers,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionLauncherValidationTour from '../components/SessionLauncherErrorTourProps';\nimport SessionLauncherPreview from '../components/SessionLauncherPreview';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport SessionOwnerSetterCard, {\n  SessionOwnerSetterFormValues,\n} from '../components/SessionOwnerSetterCard';\nimport SessionTemplateModal from '../components/SessionTemplateModal';\nimport VFolderTableFormItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport {\n  compareNumberWithUnits,\n  formatDuration,\n  generateRandomString,\n  convertBinarySizeUnit,\n  filterEmptyItem,\n} from '../helper';\nimport {\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n  useWebUINavigate,\n} from '../hooks';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupState,\n} from '../hooks/useCurrentProject';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn, useToggle } from 'ahooks';\nimport {\n  App,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Form,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport _ from 'lodash';\nimport React, { useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n  bootstrap_script?: string;\n  agent_list?: string[];\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  batchTimeout?: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n    timeoutEnabled?: boolean;\n    timeout?: string;\n    timeoutUnit?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS?: string;\n    OPENBLAS_NUM_THREADS?: string;\n  };\n  bootstrap_script?: string;\n}\n\nexport type SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues &\n  SessionOwnerSetterFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\n\nexport type AppOption = {\n  'session-name'?: string;\n  'session-uuid'?: string;\n  'access-key'?: string;\n  mode?: SessionMode;\n  'app-services'?: Array<string>;\n  runtime?: string;\n  filename?: string;\n  // [key in string]: any;\n};\n\nexport type SessionLauncherStepKey =\n  | 'sessionType'\n  | 'environment'\n  | 'storage'\n  | 'network'\n  | 'review';\ninterface StepPropsWithKey extends StepProps {\n  key: SessionLauncherStepKey;\n}\n\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n  let sessionMode: SessionMode = 'normal';\n\n  const mainContentDivRef = useAtomValue(mainContentDivRefState);\n  const baiClient = useSuspendedBackendaiClient();\n  const currentUserRole = useCurrentUserRole();\n  const [currentGlobalResourceGroup, setCurrentGlobalResourceGroup] =\n    useCurrentResourceGroupState();\n\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const INITIAL_FORM_VALUES: DeepPartial<SessionLauncherFormValue> = useMemo(\n    () => ({\n      sessionType: 'interactive',\n      // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n      allocationPreset: 'auto-select',\n      hpcOptimization: {\n        autoEnabled: true,\n      },\n      batch: {\n        enabled: false,\n        command: undefined,\n        scheduleDate: undefined,\n        ...(supportBatchTimeout && {\n          timeoutEnabled: false,\n          timeout: undefined,\n          timeoutUnit: 's',\n        }),\n      },\n      envvars: [],\n      // set default_session_environment only if set\n      ...(baiClient._config?.default_session_environment && {\n        environments: {\n          environment: baiClient._config?.default_session_environment,\n        },\n      }),\n      ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n      resourceGroup: currentGlobalResourceGroup || undefined,\n    }),\n    [\n      baiClient._config?.default_session_environment,\n      currentGlobalResourceGroup,\n      supportBatchTimeout,\n    ],\n  );\n  const StepParam = withDefault(NumberParam, 0);\n  const FormValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n  const AppOptionParam = withDefault(JsonParam, {});\n  const [\n    {\n      step: currentStep,\n      formValues: formValuesFromQueryParams,\n      redirectTo,\n      appOption: appOptionFromQueryParams,\n    },\n    setQuery,\n  ] = useQueryParams({\n    step: StepParam,\n    formValues: FormValuesParam,\n    redirectTo: StringParam,\n    appOption: AppOptionParam,\n  });\n  const { search } = useLocation();\n\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const currentProject = useCurrentProjectValue();\n\n  const [isOpenTemplateModal, { toggle: toggleIsOpenTemplateModal }] =\n    useToggle();\n  const { upsertNotification } = useSetBAINotification();\n  const [, { push: pushSessionHistory }] = useRecentSessionHistory();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      const currentValue = form.getFieldsValue();\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.extend(\n            _.omit(\n              form.getFieldsValue(),\n              ['environments.image'],\n              ['environments.customizedTag'],\n              ['autoMountedFolderNames'],\n              ['owner'],\n              ['envvars'],\n            ),\n            {\n              envvars: sanitizeSensitiveEnv(currentValue.envvars),\n            },\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  useEffect(() => {\n    if (!_.isEmpty(formValuesFromQueryParams)) {\n      form.validateFields().catch((e) => {});\n    }\n    // Run this memo only for the first time\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const mergedInitialValues = useMemo(() => {\n    return _.merge({}, INITIAL_FORM_VALUES, formValuesFromQueryParams);\n  }, [INITIAL_FORM_VALUES, formValuesFromQueryParams]);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps: Array<StepPropsWithKey> = filterEmptyItem([\n    {\n      title: t('session.launcher.SessionType'),\n      key: 'sessionType',\n      // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n    },\n    {\n      title: `${t('session.launcher.Environments')} & ${t(\n        'session.launcher.ResourceAllocation',\n      )} `,\n      key: 'environment',\n    },\n    sessionType !== 'inference' && {\n      title: t('webui.menu.Data&Storage'),\n      key: 'storage',\n    },\n    {\n      title: t('session.launcher.Network'),\n      key: 'network',\n    },\n    {\n      title: t('session.launcher.ConfirmAndLaunch'),\n      icon: <PlayCircleFilled />,\n      // @ts-ignore\n      key: 'review',\n    },\n  ]);\n\n  const currentStepKey = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  const [finalStepLastValidateTime, setFinalStepLastValidateTime] =\n    useUpdatableState('first'); // Force re-render after validation in final step.\n\n  useEffect(() => {\n    if (currentStep === steps.length - 1) {\n      form\n        .validateFields()\n        .catch((error) => {})\n        .finally(() => setFinalStepLastValidateTime());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep, form, setFinalStepLastValidateTime, steps.length]);\n\n  useEffect(() => {\n    if (finalStepLastValidateTime !== 'first') {\n      if (hasError) {\n        setValidationTourOpen(true);\n      } else {\n        setValidationTourOpen(false);\n      }\n    }\n  }, [finalStepLastValidateTime, hasError]);\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n    setIsStartingSession(true);\n    const usedSearchParams = search;\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mounts) || values.mounts.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          kernelName,\n          architecture,\n          sessionName: sessionName,\n          ...(supportBatchTimeout &&\n          values?.batch?.timeoutEnabled &&\n          !_.isUndefined(values?.batch?.timeout)\n            ? {\n                batchTimeout:\n                  _.toString(values.batch.timeout) + values?.batch?.timeoutUnit,\n              }\n            : undefined),\n          config: {\n            ...(baiClient.supports('agent-select') &&\n            !baiClient?._config?.hideAgents &&\n            values.agent !== 'auto'\n              ? {\n                  agent_list: [values.agent].filter(\n                    (agent): agent is string => !!agent,\n                  ),\n                } // Filter out undefined values\n              : undefined),\n            type: values.sessionType,\n            ...(_.isEmpty(values.bootstrap_script)\n              ? {}\n              : {\n                  bootstrap_script: values.bootstrap_script,\n                }),\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            ...(values.owner?.enabled\n              ? {\n                  group_name: values.owner.project,\n                  domain: values.owner.domainName,\n                  scaling_group: values.owner.project,\n                  owner_access_key: values.owner.accesskey,\n                }\n              : {\n                  group_name: currentProject.name,\n                  domain: baiClient._config.domainName,\n                  scaling_group: values.resourceGroup,\n                }),\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ...(values.hpcOptimization.autoEnabled\n                ? {}\n                : _.omit(values.hpcOptimization, 'autoEnabled')),\n            },\n            preopen_ports: transformPortValuesToNumbers(values.ports),\n            ...(baiClient.supports('agent-select') &&\n            !baiClient?._config?.hideAgents &&\n            values.agent !== 'auto'\n              ? {\n                  agent_list: [values.agent].filter(\n                    (agent): agent is string => !!agent,\n                  ),\n                } // Filter out undefined values\n              : undefined),\n          },\n        };\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                undefined,\n                sessionInfo.architecture,\n                sessionInfo.batchTimeout,\n              )\n              .then((res: { created: boolean; status: string }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                if (res?.status === 'CANCELLED') {\n                  // Case about failed to start new session kind of \"docker image not found\" or etc.\n                  throw new Error(\n                    t('session.launcher.FailedToStartNewSession'),\n                  );\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                if (err?.message?.includes('The session already exists')) {\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                } else {\n                  throw err;\n                }\n              });\n          },\n        );\n        // After sending a create request, navigate to job page and set current resource group\n        setCurrentGlobalResourceGroup(values.resourceGroup);\n        const backupTo = window.location.pathname + window.location.search;\n        webuiNavigate(redirectTo || '/job');\n        upsertNotification({\n          key: 'session-launcher:' + sessionName,\n          backgroundTask: {\n            promise: Promise.all(sessionPromises),\n            status: 'pending',\n            onChange: {\n              pending: t('session.PreparingSession'),\n              resolved: t('eduapi.ComputeSessionPrepared'),\n            },\n          },\n          duration: 0,\n          message: t('general.Session') + ': ' + sessionName,\n          open: true,\n        });\n\n        pushSessionHistory({\n          params: usedSearchParams,\n          name: sessionName,\n        });\n\n        await Promise.all(sessionPromises)\n          .then(\n            ([firstSession]: Array<{\n              kernelId?: string;\n              sessionId: string;\n              sessionName: string;\n              servicePorts: Array<{ name: string }>;\n            }>) => {\n              // After the session is created, add a \"See Details\" button to navigate to the session page.\n              upsertNotification({\n                key: 'session-launcher:' + sessionName,\n                to: `/session?sessionDetail=${firstSession.sessionId}`,\n              });\n              if (\n                values.num_of_sessions === 1 &&\n                values.sessionType !== 'batch'\n              ) {\n                const res = firstSession;\n                let appOptions: AppOption = _.cloneDeep(\n                  appOptionFromQueryParams,\n                );\n                if ('kernelId' in res) {\n                  // API v4\n                  appOptions = _.extend(appOptions, {\n                    'session-name': res.kernelId,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                } else {\n                  // API >= v5\n                  appOptions = _.extend(appOptions, {\n                    'session-uuid': res.sessionId,\n                    'session-name': res.sessionName,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                }\n                const service_info = res.servicePorts;\n                if (Array.isArray(service_info) === true) {\n                  appOptions['app-services'] = service_info.map(\n                    (a: { name: string }) => a.name,\n                  );\n                } else {\n                  appOptions['app-services'] = [];\n                }\n                // TODO: support import and inference\n                // if (sessionMode === 'import') {\n                //   appOptions['runtime'] = 'jupyter';\n                //   appOptions['filename'] = this.importFilename;\n                // }\n                // if (sessionMode === 'inference') {\n                //   appOptions['runtime'] = appOptions['app-services'].find(\n                //     (element: any) => !['ttyd', 'sshd'].includes(element),\n                //   );\n                // }\n\n                // only launch app when it has valid service ports\n                if (service_info.length > 0) {\n                  // @ts-ignore\n                  globalThis.appLauncher.showLauncher(appOptions);\n                }\n              }\n            },\n          )\n          .catch(() => {\n            upsertNotification({\n              key: 'session-launcher:' + sessionName,\n              to: backupTo,\n              toText: t('button.Edit'),\n            });\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n\n  const [validationTourOpen, setValidationTourOpen] = useState(false);\n\n  const [isQueryReset, setIsQueryReset] = useState(false);\n  useLayoutEffect(() => {\n    if (isQueryReset) {\n      form.resetFields();\n      setIsQueryReset(false);\n    }\n  }, [isQueryReset, form]);\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={4} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                // icon={<BlockOutlined />}\n                // disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n                onClick={() => toggleIsOpenTemplateModal()}\n              >\n                {t('session.launcher.RecentHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={mergedInitialValues}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                  <Form.Item\n                    name=\"bootstrap_script\"\n                    label=\"Bootstrap Script\"\n                    hidden\n                  >\n                    <Input />\n                  </Form.Item>\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      noStyle\n                      dependencies={[['batch', 'scheduleDate']]}\n                    >\n                      {() => {\n                        const scheduleDate = form.getFieldValue([\n                          'batch',\n                          'scheduleDate',\n                        ]);\n                        return (\n                          <BAIIntervalView\n                            delay={1000}\n                            callback={() => {\n                              const scheduleDate = form.getFieldValue([\n                                'batch',\n                                'scheduleDate',\n                              ]);\n                              if (scheduleDate) {\n                                if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                  if (\n                                    form.getFieldError([\n                                      'batch',\n                                      'scheduleDate',\n                                    ]).length === 0\n                                  ) {\n                                    form.validateFields([\n                                      ['batch', 'scheduleDate'],\n                                    ]);\n                                  }\n                                  return undefined;\n                                } else {\n                                  return dayjs(scheduleDate).fromNow();\n                                }\n                              } else {\n                                return undefined;\n                              }\n                            }}\n                            triggerKey={scheduleDate ? scheduleDate : 'none'}\n                            render={(time) => {\n                              return (\n                                <Form.Item\n                                  label={t('session.launcher.SessionStartTime')}\n                                  extra={time}\n                                >\n                                  <Flex direction=\"row\" gap={'xs'}>\n                                    <Form.Item\n                                      noStyle\n                                      name={['batch', 'enabled']}\n                                      valuePropName=\"checked\"\n                                    >\n                                      <Checkbox\n                                        onChange={(e) => {\n                                          if (\n                                            e.target.checked &&\n                                            _.isEmpty(\n                                              form.getFieldValue([\n                                                'batch',\n                                                'scheduleDate',\n                                              ]),\n                                            )\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              dayjs()\n                                                .add(2, 'minutes')\n                                                .toISOString(),\n                                            );\n                                          } else if (\n                                            e.target.checked === false\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              undefined,\n                                            );\n                                          }\n                                          form.validateFields([\n                                            ['batch', 'scheduleDate'],\n                                          ]);\n                                        }}\n                                      >\n                                        {t('session.launcher.Enable')}\n                                      </Checkbox>\n                                    </Form.Item>\n                                    <Form.Item\n                                      noStyle\n                                      // dependencies={[['batch', 'enabled']]}\n                                      shouldUpdate={(prev, next) => {\n                                        return (\n                                          // @ts-ignore\n                                          prev.batch?.enabled !==\n                                          next.batch?.enabled\n                                        );\n                                      }}\n                                    >\n                                      {() => {\n                                        const disabled =\n                                          form.getFieldValue('batch')\n                                            ?.enabled !== true;\n                                        return (\n                                          <>\n                                            <Form.Item\n                                              name={['batch', 'scheduleDate']}\n                                              noStyle\n                                              rules={[\n                                                {\n                                                  // required: true,\n                                                  validator: async (\n                                                    rule,\n                                                    value,\n                                                  ) => {\n                                                    if (\n                                                      value &&\n                                                      dayjs(value).isBefore(\n                                                        dayjs(),\n                                                      )\n                                                    ) {\n                                                      return Promise.reject(\n                                                        t(\n                                                          'session.launcher.StartTimeMustBeInTheFuture',\n                                                        ),\n                                                      );\n                                                    }\n                                                    return Promise.resolve();\n                                                  },\n                                                },\n                                              ]}\n                                            >\n                                              <DatePickerISO\n                                                disabled={disabled}\n                                                showTime\n                                                localFormat\n                                                disabledDate={(value) => {\n                                                  return value.isBefore(\n                                                    dayjs().startOf('day'),\n                                                  );\n                                                }}\n                                              />\n                                            </Form.Item>\n                                            {/* <Form.Item\n                                              noStyle\n                                              name={['batch', 'scheduleTime']}\n                                            >\n                                              <TimePicker disabled={disabled} />\n                                            </Form.Item> */}\n                                          </>\n                                        );\n                                      }}\n                                    </Form.Item>\n                                  </Flex>\n                                </Form.Item>\n                              );\n                            }}\n                          />\n                        );\n                      }}\n                    </Form.Item>\n\n                    {supportBatchTimeout ? (\n                      <Form.Item\n                        noStyle\n                        dependencies={[\n                          ['batch', 'timeoutEnabled'],\n                          ['batch', 'timeoutUnit'],\n                        ]}\n                      >\n                        {() => {\n                          const timeout = form.getFieldValue([\n                            'batch',\n                            'timeout',\n                          ]);\n                          const unit = form.getFieldValue([\n                            'batch',\n                            'timeoutUnit',\n                          ]);\n\n                          const timeDuration = dayjs.duration(\n                            timeout,\n                            unit ?? 's',\n                          );\n\n                          const formattedDuration = formatDuration(\n                            timeDuration,\n                            t,\n                          );\n\n                          const durationText =\n                            !_.isNull(timeout) && _.toFinite(timeout) > 0\n                              ? formattedDuration\n                              : null;\n                          return (\n                            <Form.Item\n                              label={t(\n                                'session.launcher.BatchJobTimeoutDuration',\n                              )}\n                              tooltip={t(\n                                'session.launcher.BatchJobTimeoutDurationDesc',\n                              )}\n                              // extra={durationText}\n                              help={durationText}\n                            >\n                              <Flex direction=\"row\" gap={'xs'}>\n                                <Form.Item\n                                  noStyle\n                                  name={['batch', 'timeoutEnabled']}\n                                  valuePropName=\"checked\"\n                                >\n                                  <Checkbox\n                                    onChange={(e) => {\n                                      if (e.target.checked === false) {\n                                        form.setFieldValue(\n                                          ['batch', 'timeout'],\n                                          undefined,\n                                        );\n                                      }\n                                      form.validateFields([\n                                        ['batch', 'timeout'],\n                                      ]);\n                                    }}\n                                  >\n                                    {t('session.launcher.Enable')}\n                                  </Checkbox>\n                                </Form.Item>\n                                <Form.Item\n                                  noStyle\n                                  dependencies={[['batch', 'timeoutEnabled']]}\n                                >\n                                  {() => {\n                                    const disabled =\n                                      form.getFieldValue([\n                                        'batch',\n                                        'timeoutEnabled',\n                                      ]) !== true;\n                                    return (\n                                      <>\n                                        <Form.Item\n                                          name={['batch', 'timeout']}\n                                          label={t(\n                                            'session.launcher.BatchJobTimeoutDuration',\n                                          )}\n                                          noStyle\n                                          rules={[\n                                            {\n                                              min: 0,\n                                              type: 'number',\n                                              message: t(\n                                                'error.AllowsPositiveNumberOnly',\n                                              ),\n                                            },\n                                            {\n                                              required: !disabled,\n                                            },\n                                          ]}\n                                        >\n                                          <InputNumber\n                                            disabled={disabled}\n                                            min={1}\n                                            addonAfter={\n                                              <Form.Item\n                                                noStyle\n                                                name={['batch', 'timeoutUnit']}\n                                              >\n                                                <Select\n                                                  tabIndex={-1}\n                                                  style={{ minWidth: 75 }}\n                                                  options={[\n                                                    {\n                                                      label: t('time.Sec'),\n                                                      value: 's',\n                                                    },\n                                                    {\n                                                      label: t('time.Min'),\n                                                      value: 'm',\n                                                    },\n                                                    {\n                                                      label: t('time.Hour'),\n                                                      value: 'h',\n                                                    },\n                                                    {\n                                                      label: t('time.Day'),\n                                                      value: 'd',\n                                                    },\n                                                    {\n                                                      label: t('time.Week'),\n                                                      value: 'w',\n                                                    },\n                                                  ]}\n                                                />\n                                              </Form.Item>\n                                            }\n                                          />\n                                        </Form.Item>\n                                      </>\n                                    );\n                                  }}\n                                </Form.Item>\n                              </Flex>\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    ) : null}\n                  </Card>\n                )}\n\n                {(currentUserRole === 'admin' ||\n                  currentUserRole === 'superadmin') && (\n                  <SessionOwnerSetterCard\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  />\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableAgentSelect={\n                      !baiClient._config.hideAgents &&\n                      baiClient.supports('agent-select')\n                    }\n                    enableNumOfSessions\n                    enableResourcePresets\n                    showRemainingWarning\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue({\n                                hpcOptimization: {\n                                  autoEnabled: true,\n                                  OMP_NUM_THREADS: undefined,\n                                  OPENBLAS_NUM_THREADS: undefined,\n                                },\n                              });\n                            } else {\n                              form.setFieldsValue({\n                                hpcOptimization: {\n                                  autoEnabled: false,\n                                  OMP_NUM_THREADS: '1',\n                                  OPENBLAS_NUM_THREADS: '1',\n                                },\n                              });\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={1}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={1}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle dependencies={['owner']}>\n                    {({ getFieldValue }) => {\n                      const ownerInfo = getFieldValue('owner');\n                      const isValidOwner =\n                        ownerInfo?.enabled &&\n                        _.every(_.omit(ownerInfo, 'enabled'), (key, value) => {\n                          return key !== undefined;\n                        });\n\n                      return (\n                        <VFolderTableFormItem\n                          filter={(vfolder) => {\n                            return (\n                              vfolder.status === 'ready' &&\n                              !vfolder.name?.startsWith('.')\n                            );\n                          }}\n                          tableProps={{\n                            ownerEmail: isValidOwner\n                              ? ownerInfo?.email\n                              : undefined,\n                          }}\n                        />\n                      );\n                    }}\n                  </Form.Item>\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <SessionLauncherPreview\n                    onClickEditStep={(stepKey) => {\n                      const nextStep = _.findIndex(steps, { key: stepKey });\n                      setCurrentStep(nextStep);\n                    }}\n                  />\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        setQuery({}, 'replace');\n                        setIsQueryReset(true);\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </Flex>\n                  <Flex\n                    data-test-id=\"neo-session-launcher-tour-step-navigation\"\n                    direction=\"row\"\n                    gap=\"sm\"\n                  >\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Flex\n            data-test-id=\"neo-session-launcher-tour-step\"\n            style={{ position: 'sticky', top: 80 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Flex>\n        )}\n      </Flex>\n      <SessionTemplateModal\n        onRequestClose={(formValue) => {\n          if (formValue) {\n            const fieldsValue = _.merge(\n              {\n                // reset fields related to optional and nested fields\n                sessionName: '',\n                ports: [],\n                mounts: [],\n                vfoldersAliasMap: {},\n                bootstrap_script: '',\n                num_of_sessions: 1,\n                owner: {\n                  enabled: false,\n                  accesskey: '',\n                  domainName: '',\n                  email: undefined,\n                  project: '',\n                  resourceGroup: '',\n                },\n                environments: {\n                  manual: '',\n                },\n                batch: {\n                  enabled: false,\n                  command: undefined,\n                  scheduleDate: undefined,\n                },\n                agent: 'auto', // Add the missing 'agent' property\n              } as Omit<\n                Required<OptionalFieldsOnly<SessionLauncherFormValue>>,\n                'autoMountedFolderNames'\n              >,\n              formValue,\n            );\n\n            if (!_.isEmpty(fieldsValue.sessionName)) {\n              fieldsValue.sessionName =\n                fieldsValue.sessionName + '-' + generateRandomString(4);\n            }\n            form.setFieldsValue(fieldsValue);\n            setCurrentStep(steps.length - 1);\n            form.validateFields().catch(() => {});\n          }\n          toggleIsOpenTemplateModal();\n        }}\n        open={isOpenTemplateModal}\n      />\n      {currentStep === steps.length - 1 ? (\n        <ErrorBoundary fallback={null}>\n          <SessionLauncherValidationTour\n            open={validationTourOpen}\n            onClose={() => {\n              setValidationTourOpen(false);\n            }}\n            scrollIntoViewOptions\n          />\n        </ErrorBoundary>\n      ) : undefined}\n    </Flex>\n  );\n};\n\ntype FormOrResourceRequired = {\n  resource: ResourceAllocationFormValue['resource'];\n  containerCount?: number;\n};\n\nexport const ResourceNumbersOfSession: React.FC<FormOrResourceRequired> = ({\n  resource,\n  containerCount = 1,\n}) => {\n  return (\n    <>\n      {_.map(\n        _.omit(resource, 'shmem', 'accelerator', 'acceleratorType'),\n        (value, type) => {\n          return value === '0' ? null : (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (convertBinarySizeUnit(value.toString(), 'b')?.number ||\n                      0) *\n                      containerCount +\n                    ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: resource.shmem\n                  ? (convertBinarySizeUnit(resource.shmem, 'b')?.number || 0) *\n                    containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {resource &&\n      resource.accelerator &&\n      resource.acceleratorType &&\n      _.isNumber(resource.accelerator) ? (\n        <ResourceNumber\n          // @ts-ignore\n          type={resource.acceleratorType}\n          value={_.toString(resource.accelerator * containerCount)}\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nexport default SessionLauncherPage;\n"],"names":["DatePickerISO","React","_ref","ref","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","_jsx","DatePicker","dayjs","undefined","_value","_value2","_value2$tz","_","newValue","format","tz","toISOString","displayName","props","form","Form","useFormInstance","useEffect","setFieldValue","name","Item","hidden","getSessionNameRules","t","min","message","max","validator","f","Promise","resolve","test","length","reject","formItemProps","useTranslation","label","rules","children","Input","allowClear","autoComplete","node","v0","v1","v2","v3","v4","v5","hash","MIN_PORT","MAX_PORT","PortTag","_ref2","inValid","tagProps","Tag","color","isValidPortStr","portStr","isPortRangeStr","splitPortRange","split","start","end","map","v","parseInt","toString","portRange","transformPortValuesToNumbers","values","parsePortRangeToNumbers","baiClient","useSuspendedBackendaiClient","tooltip","Trans","i18nKey","extra","rule","_config","maxCountForPreopenPorts","Error","count","allPorts","port","Select","mode","tagRender","hasDuplicated","getFieldValue","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","style","width","suffixIcon","open","tokenSeparators","otherProps","hasOpenedValidationTour","setHasOpenedValidationTour","useBAISettingUserState","steps","title","description","target","_document$getElements","document","getElementsByClassName","_document$getElements2","_document$getElements3","querySelector","Tour","SessionOwnerSetterPreviewCard","isActive","useWatch","currentUserRole","useCurrentUserRole","BAICard","showDivider","size","status","getFieldError","extraButtonTitle","_jsxs","Descriptions","column","token","theme","useToken","fetchingEmail","setFetchingEmail","useState","relayEvn","useRelayEnvironment","data","isFetching","useTanQuery","queryKey","queryFn","email","query","_SessionOwnerSetterCardQuery","require","fetchQuery","toPromise","enabled","ownerKeypairs","keypairs","owner","user","nonExistentOwner","Card","valuePropName","noStyle","Switch","styles","header","borderBottom","body","display","HiddenFormItem","domain_name","dependencies","_Fragment","Flex","required","type","flex","validateStatus","help","Search","onSearch","validateFields","then","catch","setFieldsValue","accesskey","project","resourceGroup","loading","enterButton","Button","icon","CheckIcon","BAISelect","options","k","access_key","autoSelectOption","disabled","Row","gutter","marginSM","Col","span","groups","g","Suspense","fallback","ResourceGroupSelect","projectName","autoSelectDefault","_baiClient$supports","_baiClient$supports2","_form$getFieldValue","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue6$","_form$getFieldValue7","_form$getFieldValue7$","_form$getFieldValue8","_form$getFieldValue8$","_form$getFieldValue9","_form$getFieldValue9$","_form$getFieldValue12","_form$getFieldValue13","_form$getFieldValue14","_form$getFieldValue15","_form$getFieldValue16","_form$getFieldValue17","_form$getFieldValue18","_form$getFieldValue19","_form$getFieldValue20","_form$getFieldValue21","_form$getFieldValue22","_form$getFieldValue23","_form$getFieldValue24","_form$getFieldValue25","_form$getFieldValue26","_form$getFieldValue27","_form$getFieldValue28","_baiClient$_config","_form$getFieldValue29","_form$getFieldValue31","_form$getFieldValue32","onClickEditStep","sessionType","preserve","supportBatchTimeout","supports","supportExtendedImageInfo","currentProject","useCurrentProjectValue","getBaseVersion","getBaseImage","tagAlias","useBackendAIImageMetaData","isDarkMode","useThemeMode","onClickExtraButton","labelStyle","whiteSpace","contentStyle","overflow","SourceCodeViewer","language","Typography","Text","idx","flexFlow","ImageMetaIcon","image","version","manual","marginRight","marginXS","direction","wrap","code","wordBreak","copyable","text","base_image_name","Divider","architecture","tags","tag","_$find","_form$getFieldValue10","_form$getFieldValue11","isCustomized","key","tagValue","labels","aliasedTag","preserveDotStartCase","DoubleTag","colorPrimary","getImageFullName","gap","sizeXS","ImageTags","SyntaxHighlighter","dark","codeTagProps","customStyle","margin","variable","join","align","getFieldWarning","Alert","showIcon","ResourceNumbersOfSession","resource","hideAgents","containerCount","Table","rowKey","pagination","columns","dataIndex","render","record","opacity","dataSource","_form$getFieldValue30","alias","useRecentSessionHistory","recentSessions","setRecentSessionHistory","push","useEventNotStable","id","params","createdAt","newHistory","generateRandomString","Date","newRecentSessionHistory","slice","clear","remove","filter","item","update","useStyle","createStyles","css","fixEditableVerticalAlign","modalProps","sessionHistory","updateSessionHistory","hoverRowKey","setHoverRowKey","getImageAliasName","pinnedSessionHistory","pin","unpin","updatePinnedHistory","usePinnedSessionHistory","setPinnedSessionHistory","recentSessionHistory","pinnedItem","find","newPinnedSessionHistory","setSelectedHistoryId","parsedSessionHistory","useMemo","parseToFormValues","history","isPinned","URLSearchParams","JSON","parse","get","pinned","recent","unionBy","BAIModal","footer","onCancel","onRequestClose","BAITable","rowSelection","selectedRowKeys","columnWidth","hideSelectAll","renderCell","scroll","x","onRow","onMouseEnter","onMouseLeave","PinIcon","QuestionIconWithTooltip","isHovered","onClick","colorTextQuaternary","Link","className","editable","BAILink","_modalProps$onRequest","call","imageStr","environments","Tooltip","placement","onCell","maxWidth","textOverflow","fromNow","_ref3","_convertBinarySizeUni","_convertBinarySizeUni2","ResourceNumber","convertBinarySizeUnit","number","opts","shmem","accelerator","acceleratorType","generateSessionId","possible","i","charAt","Math","floor","random","SessionLauncherPage","_baiClient$_config3","_steps$currentStep","app","App","useApp","sessionMode","mainContentDivRef","useAtomValue","mainContentDivRefState","currentGlobalResourceGroup","setCurrentGlobalResourceGroup","useCurrentResourceGroupState","isStartingSession","setIsStartingSession","INITIAL_FORM_VALUES","_baiClient$_config2","allocationPreset","hpcOptimization","autoEnabled","batch","command","scheduleDate","timeoutEnabled","timeout","timeoutUnit","envvars","default_session_environment","environment","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","StepParam","withDefault","NumberParam","FormValuesParam","JsonParam","AppOptionParam","step","currentStep","formValues","formValuesFromQueryParams","redirectTo","appOption","appOptionFromQueryParams","setQuery","useQueryParams","StringParam","search","useLocation","webuiNavigate","useWebUINavigate","isOpenTemplateModal","toggle","toggleIsOpenTemplateModal","useToggle","upsertNotification","useSetBAINotification","pushSessionHistory","run","syncFormToURLWithDebounce","useDebounceFn","currentValue","getFieldsValue","sanitizeSensitiveEnv","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","useForm","mergedInitialValues","_mainContentDivRef$cu","current","scrollTo","filterEmptyItem","PlayCircleFilled","currentStepKey","hasError","getFieldsError","errors","finalStepLastValidateTime","setFinalStepLastValidateTime","useUpdatableState","error","finally","setValidationTourOpen","validationTourOpen","isQueryReset","setIsQueryReset","useLayoutEffect","resetFields","justifyContent","justify","Title","level","marginTop","paddingRight","paddingLeft","Provider","onFormChange","info","layout","requiredMark","initialValues","Radio","SessionNameFormItem","TextArea","autoSize","BAIIntervalView","delay","callback","isBefore","triggerKey","time","Checkbox","checked","add","shouldUpdate","prev","next","_prev$batch","_next$batch","async","showTime","disabledDate","startOf","unit","timeDuration","formattedDuration","formatDuration","durationText","InputNumber","addonAfter","tabIndex","minWidth","SessionOwnerSetterCard","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableAgentSelect","enableNumOfSessions","enableResourcePresets","showRemainingWarning","checkedChildren","unCheckedChildren","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","_prev$hpcOptimization","_next$hpcOptimization","marginMD","xs","sm","stringMode","ownerInfo","isValidOwner","VFolderTableFormItem","vfolder","_vfolder$name","startsWith","tableProps","ownerEmail","PortSelectFormItem","SessionLauncherPreview","stepKey","Popconfirm","onConfirm","QuestionCircleOutlined","colorError","okText","okButtonProps","danger","LeftOutlined","PlayCircleOutlined","startSession","usedSearchParams","_values$batch","_values$batch2","_values$batch3","_baiClient$_config4","_values$owner","_baiClient$_config5","mounts","modal","confirm","content","onOk","imageFullName","kernelName","sessionName","sessionInfo","batchTimeout","config","agent","agent_list","bootstrap_script","startsAt","startupCommand","group_name","domain","domainName","scaling_group","owner_access_key","cluster_mode","cluster_size","maxWaitSeconds","cpu","mem","compareNumberWithUnits","mount_map","vfoldersAliasMap","env","preopen_ports","ports","sessionPromises","num_of_sessions","formattedSessionName","createIfNotExists","res","created","err","_err$message","includes","backupTo","window","location","pathname","backgroundTask","promise","all","pending","resolved","duration","firstSession","to","sessionId","appOptions","kernelId","service_info","servicePorts","Array","isArray","a","globalThis","appLauncher","showLauncher","toText","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","items","s","SessionTemplateModal","formValue","fieldsValue","SessionLauncherValidationTour","scrollIntoViewOptions"],"sourceRoot":""}