{"version":3,"file":"static/js/3835.b4fc93c2.chunk.js","mappings":"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","sources":["components/ComputeSessionNodeItems/ContainerLogModal.tsx","hooks/useMemoWithPrevious.tsx","components/ComputeSessionNodeItems/EditableSessionName.tsx","components/ComputeSessionNodeItems/TerminateSessionModal.tsx","components/ComputeSessionNodeItems/SessionActionButtons.tsx","hooks/useBackendAIAppLauncher.tsx","components/ComputeSessionNodeItems/SessionReservation.tsx","components/ComputeSessionNodeItems/SessionStatusTag.tsx","components/ComputeSessionNodeItems/SessionTypeTag.tsx","components/ComputeSessionNodeItems/__generated__/ContainerLogModalFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/EditableSessionNameFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/EditableSessionNameMutation.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionActionButtonsFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionReservationFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionStatusTagFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionTypeTagFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/TerminateSessionModalFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/TerminateSessionModalRefetchQuery.graphql.ts","components/SessionDetailContent.tsx","components/SessionDetailDrawer.tsx","components/__generated__/SessionDetailContentLegacyQuery.graphql.ts","components/__generated__/SessionDetailContentQuery.graphql.ts","helper/csv-util.ts","hooks/usePainKiller.tsx"],"sourcesContent":["import { downloadBlob } from '../../helper/csv-util';\nimport { useSuspendedBackendaiClient } from '../../hooks';\nimport { useCurrentUserRole } from '../../hooks/backendai';\nimport { useTanQuery } from '../../hooks/reactQueryAlias';\nimport { useMemoWithPrevious } from '../../hooks/useMemoWithPrevious';\nimport BAIModal, { BAIModalProps } from '../BAIModal';\nimport BAISelect from '../BAISelect';\nimport Flex from '../Flex';\nimport { ContainerLogModalFragment$key } from './__generated__/ContainerLogModalFragment.graphql';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { LazyLog, ScrollFollow } from '@melloware/react-logviewer';\nimport { Button, Divider, Grid, theme, Tooltip, Typography } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { DownloadIcon } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface ContainerLogModalProps extends BAIModalProps {\n  sessionFrgmt: ContainerLogModalFragment$key | null;\n}\n\nconst ContainerLogModal: React.FC<ContainerLogModalProps> = ({\n  sessionFrgmt,\n  ...modalProps\n}) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const userRole = useCurrentUserRole();\n\n  const session = useFragment(\n    graphql`\n      fragment ContainerLogModalFragment on ComputeSessionNode {\n        id\n        row_id @required(action: NONE)\n        name\n        status\n        access_key\n        kernel_nodes {\n          edges {\n            node {\n              id\n              row_id\n              container_id\n              cluster_idx\n              cluster_role\n            }\n          }\n        }\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const kernelNodes = session?.kernel_nodes?.edges?.map((e) => e?.node) || [];\n  const [selectedKernelId, setSelectedKernelId] = useState(\n    _.find(kernelNodes, (e) => e?.cluster_role === 'main')?.row_id ||\n      kernelNodes[0]?.row_id,\n  );\n\n  useEffect(() => {\n    if (modalProps.open === false) {\n      setSelectedKernelId(undefined);\n    }\n  }, [modalProps.open]);\n\n  // Currently we can only fetch full logs\n  // const [logSize, setLogSize] = useState<100|'full'>('full');\n  const {\n    data: logs,\n    refetch,\n    isPending,\n    isRefetching,\n    dataUpdatedAt,\n  } = useTanQuery<string>({\n    queryKey: [\n      'containerLog',\n      session?.row_id,\n      session?.access_key,\n      selectedKernelId,\n      modalProps.open,\n    ],\n    queryFn: async () => {\n      if (\n        !modalProps.open ||\n        !session?.row_id ||\n        !session?.access_key ||\n        !selectedKernelId\n      ) {\n        return '';\n      }\n      return await baiClient\n        .get_logs(session?.row_id, session?.access_key, selectedKernelId, 15000)\n        .then((req: any) => req.result.logs);\n    },\n    staleTime: 5000,\n  });\n\n  // let queryParams: Array<string> = [];\n  // if (session?.access_key != null) {\n  //   queryParams.push(`owner_access_key=${session.access_key}`);\n  // }\n  // if (baiClient.supports('per-kernel-logs') && selectedKernelId !== null) {\n  //   queryParams.push(`kernel_id=${selectedKernelId}`);\n  // }\n  // let queryString = `/session/${session?.row_id}/logs`;\n  // if (queryParams.length > 0) {\n  //   queryString += `?${queryParams.join('&')}`;\n  // }\n  // // const url = `${baiClient._endpoint}${queryString}`\n\n  // const signed = baiClient.newSignedRequest('GET', queryString, null);\n  // console.log(signed)\n  // console.log(signed.uri);\n\n  const [lastLineNumbers, { resetPrevious: resetPreviousLineNumber }] =\n    useMemoWithPrevious(() => logs?.split('\\n').length || 0, [logs]);\n\n  const { md } = Grid.useBreakpoint();\n  const { t } = useTranslation();\n\n  return (\n    <BAIModal\n      title={\n        <Flex style={{ maxWidth: '100%' }} gap={'sm'}>\n          <Typography.Title level={4} style={{ margin: 0, flexShrink: 0 }}>\n            Logs\n          </Typography.Title>\n          {session ? (\n            <>\n              <Typography.Text style={{ fontWeight: 'normal' }} ellipsis>\n                {session?.name}\n              </Typography.Text>\n              <Typography.Text\n                style={{ fontWeight: 'normal', fontFamily: 'monospace' }}\n                copyable={{\n                  text: session?.row_id,\n                  tooltips: t('button.CopySomething', {\n                    name: t('session.SessionId'),\n                  }),\n                }}\n              >\n                ({md ? session?.row_id : session?.row_id.split('-')?.[0]})\n              </Typography.Text>\n            </>\n          ) : null}\n        </Flex>\n      }\n      width={'100%'}\n      styles={{\n        header: {\n          width: '100%',\n        },\n        body: {\n          height: 'calc(100vh - 100px)',\n          maxHeight: 'calc(100vh - 100px)',\n        },\n      }}\n      {...modalProps}\n      footer={null}\n      destroyOnClose\n    >\n      <Flex\n        direction=\"column\"\n        align=\"start\"\n        style={{ height: '100%' }}\n        gap={'sm'}\n      >\n        <Flex gap=\"sm\" wrap=\"wrap\">\n          Kernel Role\n          <BAISelect\n            value={selectedKernelId}\n            onChange={(value) => {\n              setSelectedKernelId(value);\n              resetPreviousLineNumber();\n            }}\n            autoSelectOption\n            options={_.chain(session?.kernel_nodes?.edges)\n              .sortBy((e) => `${e?.node?.cluster_role} ${e?.node?.cluster_idx}`)\n              .map((e) => {\n                return {\n                  label: (\n                    <>\n                      {e?.node?.cluster_role}\n                      {e?.node?.cluster_role !== 'main'\n                        ? e?.node?.cluster_idx\n                        : ''}\n                      {userRole === 'admin' || userRole === 'superadmin' ? (\n                        <Typography.Text\n                          style={{\n                            fontFamily: 'monospace',\n                            fontSize: token.fontSizeSM,\n                          }}\n                          type=\"secondary\"\n                        >\n                          ({(e?.node?.row_id || '').substring(0, 5)})\n                        </Typography.Text>\n                      ) : null}\n                    </>\n                  ),\n                  value: e?.node?.row_id,\n                };\n              })\n              .value()}\n          />\n          <Divider type=\"vertical\" />\n          {/* Request logs\n          <Select\n            value={logSize}\n            options={[\n              {\n                label: 'last 100 lines',\n                value: 100,\n              },\n              {\n                label: 'Full logs',\n                value: 'full',\n              },\n            ]}\n            onChange={(value) => { \n              setLogSize(value);\n              if(value!=='full'){\n                resetPreviousLineNumber();\n              }\n              refetch();\n            }}\n          ></Select> */}\n          <Tooltip title={t('button.Download')}>\n            <Button\n              size=\"middle\"\n              icon={<DownloadIcon />}\n              disabled={isPending || isRefetching}\n              onClick={() => {\n                const blob = new Blob([logs || ''], { type: 'text/plain' });\n                downloadBlob(\n                  blob,\n                  `${session?.name || 'session'}-logs-${selectedKernelId}-${new Date().toISOString()}.txt`,\n                );\n              }}\n            />\n          </Tooltip>\n          <Tooltip title={t('button.Refresh')}>\n            <Button\n              size=\"middle\"\n              loading={isPending || isRefetching}\n              icon={<ReloadOutlined />}\n              onClick={() => refetch()}\n            />\n          </Tooltip>\n        </Flex>\n\n        <div\n          style={{\n            height: 'calc(100% - 50px)',\n            alignSelf: 'stretch',\n\n            border: `1px solid ${token.colorBorder}`,\n            overflow: 'hidden',\n          }}\n        >\n          <ScrollFollow\n            key={dataUpdatedAt} // to scroll to bottom on new data\n            startFollowing={true}\n            render={({ follow, onScroll }) => (\n              <LazyLog\n                enableLinks\n                caseInsensitive\n                enableSearch\n                enableSearchNavigation\n                selectableLines\n                text={logs || ''}\n                highlight={lastLineNumbers.previous}\n                extraLines={1}\n                // url={signed.uri}\n                // fetchOptions={\n                //   {\n                //     headers: signed.headers\n                //   }\n                // }\n                // stream\n                follow={follow}\n                onScroll={onScroll}\n              />\n            )}\n          />\n        </div>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default ContainerLogModal;\n","import { DependencyList, useEffect, useMemo, useRef, useState } from 'react';\n\nexport const useMemoWithPrevious = <T,>(\n  factory: () => T,\n  deps: DependencyList,\n  { initialPrev }: { initialPrev?: T } | undefined = {},\n) => {\n  const prevRef = useRef(initialPrev);\n  const [prevResetKey, setPrevResetKey] = useState({});\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const current = useMemo(factory, deps);\n  const memoizedPrev = useMemo(() => {\n    return prevRef.current;\n    // Only update when the reset key changes and deps change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, prevResetKey]);\n\n  useEffect(() => {\n    prevRef.current = current;\n    // Only update when deps change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return [\n    {\n      previous: memoizedPrev,\n      current: current,\n    },\n    {\n      resetPrevious: () => {\n        prevRef.current = initialPrev;\n        setPrevResetKey({});\n      },\n    },\n  ] as const;\n};\n","import { EditableSessionNameFragment$key } from './__generated__/EditableSessionNameFragment.graphql';\nimport { EditableSessionNameMutation } from './__generated__/EditableSessionNameMutation.graphql';\nimport { theme } from 'antd';\nimport Text, { TextProps } from 'antd/es/typography/Text';\nimport Title, { TitleProps } from 'antd/es/typography/Title';\nimport graphql from 'babel-plugin-relay/macro';\nimport React, { useState } from 'react';\nimport { useFragment, useMutation } from 'react-relay';\n\ntype EditableSessionNameProps = {\n  sessionFrgmt: EditableSessionNameFragment$key;\n} & (\n  | ({ component?: typeof Text } & Omit<TextProps, 'children'>)\n  | ({ component: typeof Title } & Omit<TitleProps, 'children'>)\n);\n\nconst EditableSessionName: React.FC<EditableSessionNameProps> = ({\n  component: Component = Text,\n  sessionFrgmt,\n  style,\n  ...otherProps\n}) => {\n  const session = useFragment(\n    graphql`\n      fragment EditableSessionNameFragment on ComputeSessionNode {\n        id\n        name\n        priority\n      }\n    `,\n    sessionFrgmt,\n  );\n  const [optimisticName, setOptimisticName] = useState(session.name);\n  const { token } = theme.useToken();\n  const [commitEditMutation, isPendingEditMutation] =\n    useMutation<EditableSessionNameMutation>(graphql`\n      mutation EditableSessionNameMutation($input: ModifyComputeSessionInput!) {\n        modify_compute_session(input: $input) {\n          item {\n            id\n            name\n          }\n        }\n      }\n    `);\n  return (\n    session && (\n      <Component\n        editable={\n          isPendingEditMutation\n            ? undefined\n            : {\n                onChange: (newName) => {\n                  setOptimisticName(newName);\n                  commitEditMutation({\n                    variables: {\n                      input: {\n                        id: session.id,\n                        name: newName,\n                        // TODO: Setting the priority is not needed here. However, due to an API bug, we will keep it.\n                        priority: session.priority,\n                      },\n                    },\n                    onCompleted(response, errors) {},\n                    onError(error) {},\n                  });\n                },\n                triggerType: ['icon', 'text'],\n              }\n        }\n        copyable\n        style={{\n          ...style,\n          color: isPendingEditMutation ? token.colorTextTertiary : style?.color,\n        }}\n        {...otherProps}\n      >\n        {isPendingEditMutation ? optimisticName : session.name}\n      </Component>\n    )\n  );\n};\n\nexport default EditableSessionName;\n","import { BackendAIClient, useSuspendedBackendaiClient } from '../../hooks';\nimport { useCurrentUserRole } from '../../hooks/backendai';\nimport { useTanMutation } from '../../hooks/reactQueryAlias';\nimport { useSetBAINotification } from '../../hooks/useBAINotification';\nimport { useCurrentProjectValue } from '../../hooks/useCurrentProject';\nimport { usePainKiller } from '../../hooks/usePainKiller';\nimport BAIModal from '../BAIModal';\nimport Flex from '../Flex';\nimport {\n  TerminateSessionModalFragment$data,\n  TerminateSessionModalFragment$key,\n} from './__generated__/TerminateSessionModalFragment.graphql';\nimport { TerminateSessionModalRefetchQuery } from './__generated__/TerminateSessionModalRefetchQuery.graphql';\nimport { Card, Checkbox, ModalProps, Typography } from 'antd';\nimport { createStyles } from 'antd-style';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { fetchQuery, useFragment, useRelayEnvironment } from 'react-relay';\n\ninterface TerminateSessionModalProps\n  extends Omit<ModalProps, 'onOk' | 'onCancel'> {\n  sessionFrgmts: TerminateSessionModalFragment$key;\n  onRequestClose: (success: boolean) => void;\n}\n\nconst useStyle = createStyles(({ css, token }) => {\n  return {\n    custom: css`\n      ul {\n        list-style-type: circle;\n        padding-left: ${token.paddingMD}px;\n      }\n    `,\n  };\n});\n\ntype KernelType = NonNullableNodeOnEdges<\n  NonNullable<TerminateSessionModalFragment$data[number]>['kernel_nodes']\n>;\n\ntype Session = NonNullable<TerminateSessionModalFragment$data[number]>;\n\nconst sendRequest = async (\n  rqst: {\n    uri: string;\n  } & RequestInit,\n) => {\n  let resp;\n  let body;\n  try {\n    if (rqst.method === 'GET') {\n      rqst.body = undefined;\n    }\n    resp = await fetch(rqst.uri, rqst);\n    const contentType = resp.headers.get('Content-Type');\n    if (contentType === null) {\n      body = resp.ok;\n      if (!resp.ok) {\n        // @ts-ignore\n        throw new Error(resp);\n      }\n    } else if (\n      contentType.startsWith('application/json') ||\n      contentType.startsWith('application/problem+json')\n    ) {\n      body = await resp.json();\n    } else if (contentType.startsWith('text/')) {\n      body = await resp.text();\n    } else {\n      body = await resp.blob();\n    }\n    if (!resp.ok) {\n      throw body;\n    }\n  } catch (e) {\n    return resp;\n  }\n  return body;\n};\n\nconst getWSProxyVersion = async (\n  resourceGroupIdOfSession: string,\n  projectId: string,\n  baiClient: BackendAIClient,\n) => {\n  // TODO: remove globalThis.appLauncher(backend-ai-app-launcher) dependency after migration to React\n  if (baiClient.debug === true) {\n    // @ts-ignore\n    if (globalThis.appLauncher?.forceUseV1Proxy?.checked) return 'v1';\n    // @ts-ignore\n    else if (globalThis.appLauncher?.forceUseV2Proxy?.checked) return 'v2';\n  }\n\n  // @ts-ignore\n  if (globalThis.isElectron) {\n    return 'v1';\n  }\n  return baiClient.scalingGroup\n    .getWsproxyVersion(resourceGroupIdOfSession, projectId)\n    .then((result: { wsproxy_version: string }) => {\n      return result.wsproxy_version;\n    });\n};\n\nconst getProxyURL = async (\n  resourceGroupIdOfSession: string,\n  projectId: string,\n  baiClient: BackendAIClient,\n) => {\n  let url = 'http://127.0.0.1:5050/';\n  if (\n    // @ts-ignore\n    globalThis.__local_proxy !== undefined &&\n    // @ts-ignore\n    globalThis.__local_proxy.url !== undefined\n  ) {\n    // @ts-ignore\n    url = globalThis.__local_proxy.url;\n  } else if (baiClient._config.proxyURL !== undefined) {\n    url = baiClient._config.proxyURL;\n  }\n  if (resourceGroupIdOfSession !== undefined && projectId !== undefined) {\n    const wsproxyVersion = await getWSProxyVersion(\n      resourceGroupIdOfSession,\n      projectId,\n      baiClient,\n    );\n    if (wsproxyVersion !== 'v1') {\n      url = new URL(`${wsproxyVersion}/`, url).href;\n    }\n  }\n  return url;\n};\n\nconst terminateApp = async (\n  session: Session,\n  accessKey: string,\n  currentProjectId: string,\n  baiClient: BackendAIClient,\n) => {\n  const proxyURL = await getProxyURL(\n    session.scaling_group,\n    currentProjectId,\n    baiClient,\n  );\n\n  const rqst = {\n    method: 'GET',\n    uri: new URL(`proxy/${accessKey}/${session.row_id}`, proxyURL).href,\n  };\n\n  return sendRequest(rqst).then((response) => {\n    let uri = new URL(`proxy/${accessKey}/${session.row_id}/delete`, proxyURL);\n    if (localStorage.getItem('backendaiwebui.appproxy-permit-key')) {\n      uri.searchParams.set(\n        'permit_key',\n        localStorage.getItem('backendaiwebui.appproxy-permit-key') || '',\n      );\n      uri = new URL(uri.href);\n    }\n    if (response !== undefined && response.code !== 404) {\n      return sendRequest({\n        method: 'GET',\n        uri: uri.href,\n        credentials: 'include',\n        mode: 'cors',\n      });\n    }\n    return true;\n  });\n};\n\nconst TerminateSessionModal: React.FC<TerminateSessionModalProps> = ({\n  sessionFrgmts: sessionFrgmt,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const openTerminateModal = false;\n  const { t } = useTranslation();\n  const { styles } = useStyle();\n  const sessions = useFragment(\n    graphql`\n      fragment TerminateSessionModalFragment on ComputeSessionNode\n      @relay(plural: true) {\n        id\n        row_id\n        name\n        scaling_group @required(action: NONE)\n        kernel_nodes {\n          edges {\n            node {\n              container_id\n              agent_id\n            }\n          }\n        }\n      }\n    `,\n    sessionFrgmt,\n  );\n  const [isForce, setIsForce] = useState(false);\n  const userRole = useCurrentUserRole();\n\n  const baiClient = useSuspendedBackendaiClient();\n\n  const currentProject = useCurrentProjectValue();\n\n  const terminateMutation = useTanMutation({\n    mutationFn: async (session: Session) => {\n      return terminateApp(\n        session,\n        baiClient._config.accessKey,\n        currentProject.id,\n        baiClient,\n      )\n        .catch((e) => {\n          return {\n            error: e,\n          };\n        })\n        .then((result) => {\n          const err = result?.error;\n          if (\n            err === undefined || //no error\n            (err && // Even if wsproxy address is invalid, session must be deleted.\n              err.message &&\n              (err.statusCode === 404 || err.statusCode === 500))\n          ) {\n            // BAI client destroy try to request 3times as default\n            return baiClient.destroy(\n              session.row_id,\n              baiClient._config.accessKey,\n              isForce,\n            );\n          } else {\n            throw err;\n          }\n        });\n    },\n  });\n  const relayEvn = useRelayEnvironment();\n  const painKiller = usePainKiller();\n  const { upsertNotification } = useSetBAINotification();\n\n  return (\n    <BAIModal\n      centered\n      title={t('session.TerminateSession')}\n      open={openTerminateModal}\n      confirmLoading={terminateMutation.isPending}\n      onOk={() => {\n        if (sessions[0]?.row_id) {\n          const session = sessions[0];\n          terminateMutation\n            .mutateAsync(session)\n            .then(() => {\n              setIsForce(false);\n              onRequestClose(true);\n            })\n            .catch((err) => {\n              upsertNotification({\n                message: painKiller.relieve(err?.title),\n                description: err?.message,\n                open: true,\n              });\n            })\n            .finally(() => {\n              // TODO: remove below code after session list migration to React\n              const event = new CustomEvent(\n                'backend-ai-session-list-refreshed',\n                {\n                  detail: 'running',\n                },\n              );\n              document.dispatchEvent(event);\n\n              // refetch session node\n              return fetchQuery<TerminateSessionModalRefetchQuery>(\n                relayEvn,\n                graphql`\n                  query TerminateSessionModalRefetchQuery(\n                    $id: GlobalIDField!\n                    $project_id: UUID!\n                  ) {\n                    compute_session_node(id: $id, project_id: $project_id) {\n                      id\n                      status\n                    }\n                  }\n                `,\n                {\n                  id: session.id,\n                  project_id: currentProject.id,\n                },\n              ).toPromise();\n            });\n        }\n      }}\n      okText={isForce ? t('button.ForceTerminate') : t('session.Terminate')}\n      okType=\"danger\"\n      okButtonProps={{\n        type: isForce ? 'primary' : 'default',\n      }}\n      onCancel={() => {\n        setIsForce(false);\n        onRequestClose(false);\n      }}\n      {...modalProps}\n    >\n      <Flex\n        className={styles.custom}\n        direction=\"column\"\n        align=\"stretch\"\n        gap={'xs'}\n      >\n        <Typography.Text>\n          {t('usersettings.SessionTerminationDialog')}\n        </Typography.Text>\n        <Typography.Text mark>\n          {sessions.length === 1\n            ? sessions[0]?.name\n            : `${sessions.length} sessions`}\n        </Typography.Text>\n        <Checkbox\n          checked={isForce}\n          onChange={(e) => {\n            setIsForce(e.target.checked);\n          }}\n        >\n          {t('button.ForceTerminate')}\n        </Checkbox>\n        {isForce && (\n          <Card>\n            <Typography.Paragraph type=\"danger\">\n              {t('session.ForceTerminateWarningMsg')}\n            </Typography.Paragraph>\n            <ul>\n              <li>{t('session.ForceTerminateWarningMsg2')}</li>\n              <li>{t('session.ForceTerminateWarningMsg3')}</li>\n            </ul>\n            {userRole === 'superadmin' && (\n              <>\n                <Card type=\"inner\" title={t('session.ContainerToCleanUp')}>\n                  {_.chain(sessions)\n                    .map((s) => s?.kernel_nodes?.edges)\n                    .map((edges) => edges?.map((e) => e?.node))\n                    .flatten()\n                    .groupBy('agent_id')\n                    .map((kernels: Array<KernelType>, agentId: string) => {\n                      return (\n                        <>\n                          {agentId}\n                          <ul key={agentId}>\n                            {kernels.map((k) => (\n                              <li key={k.container_id}>\n                                <Typography.Text copyable>\n                                  {k.container_id}\n                                </Typography.Text>\n                              </li>\n                            ))}\n                          </ul>\n                        </>\n                      );\n                    })\n                    .value()}\n                </Card>\n              </>\n            )}\n          </Card>\n        )}\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default TerminateSessionModal;\n","import { useBackendAIAppLauncher } from '../../hooks/useBackendAIAppLauncher';\nimport ContainerLogModal from './ContainerLogModal';\nimport TerminateSessionModal from './TerminateSessionModal';\nimport {\n  SessionActionButtonsFragment$data,\n  SessionActionButtonsFragment$key,\n} from './__generated__/SessionActionButtonsFragment.graphql';\nimport { Tooltip, Button, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport { TerminalIcon, PowerOffIcon, ScrollTextIcon } from 'lucide-react';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface SessionActionButtonsProps {\n  sessionFrgmt: SessionActionButtonsFragment$key | null;\n}\n// const isRunning = (session:SessionActionButtonsFragment$data) => {\n//   return [\n//     'batch',\n//     'interactive',\n//     'inference',\n//     'system',\n//     'running',\n//     'others',\n//   ].includes(session);\n// }\n\nconst isActive = (session: SessionActionButtonsFragment$data) => {\n  return !['TERMINATED', 'CANCELLED'].includes(session?.status || '');\n};\n// const isTransitional = (session: SessionActionButtonsFragment$data) => {\n//   return [\n//     'RESTARTING',\n//     'TERMINATING',\n//     'PENDING',\n//     'PREPARING',\n//     'CREATING',\n//     'PULLING',\n//   ].includes(session?.status || '');\n// };\n\nconst SessionActionButtons: React.FC<SessionActionButtonsProps> = (props) => {\n  const { token } = theme.useToken();\n  const appLauncher = useBackendAIAppLauncher();\n\n  const { t } = useTranslation();\n\n  const session = useFragment(\n    graphql`\n      fragment SessionActionButtonsFragment on ComputeSessionNode {\n        id\n        row_id @required(action: NONE)\n        status\n        access_key\n        service_ports\n        commit_status\n        ...TerminateSessionModalFragment\n        ...ContainerLogModalFragment\n      }\n    `,\n    props.sessionFrgmt,\n  );\n  const [openTerminateModal, setOpenTerminateModal] = useState(false);\n  const [openLogModal, setOpenLogModal] = useState(false);\n\n  // const isDisabledTermination = !['PENDING'].includes(session?.status || '') && session?.commit_status === 'ongoing'\n  // ${(this._isRunning && !this._isPreparing(rowData.item.status)) ||\n  //   this._isError(rowData.item.status)\n  return (\n    session && (\n      <>\n        {/* <Tooltip title={t('session.SeeAppDialog')}>\n        <Button icon={<LayoutGridIcon />} onClick={()=>{\n          appLauncher.showLauncher({\n            \"access-key\": session?.access_key || '',\n            \"service-ports\": session?.service_ports || '',\n          })\n        }} />\n      </Tooltip> */}\n        <Tooltip title={t('session.ExecuteTerminalApp')}>\n          <Button\n            disabled={!isActive(session)}\n            icon={<TerminalIcon />}\n            onClick={() => {\n              appLauncher.runTerminal(session?.row_id);\n            }}\n          />\n        </Tooltip>\n        {/* Don't put this modal to end of the return array(<></>). */}\n        <TerminateSessionModal\n          sessionFrgmts={[session]}\n          open={openTerminateModal}\n          onRequestClose={() => {\n            setOpenTerminateModal(false);\n          }}\n        />\n\n        <Tooltip title={t('session.SeeContainerLogs')}>\n          <Button\n            icon={<ScrollTextIcon />}\n            onClick={() => {\n              setOpenLogModal(true);\n            }}\n          />\n        </Tooltip>\n        <ContainerLogModal\n          sessionFrgmt={session}\n          open={openLogModal}\n          onCancel={() => {\n            setOpenLogModal(false);\n          }}\n        />\n        {/*\n        <Tooltip title={t('session.RequestContainerCommit')}>\n        <Button icon={<ContainerIcon />} />\n      </Tooltip> */}\n        <Tooltip title={t('session.TerminateSession')}>\n          <Button\n            disabled={!isActive(session)}\n            icon={\n              <PowerOffIcon\n                color={isActive(session) ? token.colorError : undefined}\n              />\n            }\n            onClick={() => {\n              setOpenTerminateModal(true);\n            }}\n          />\n        </Tooltip>\n      </>\n    )\n  );\n};\n\nexport default SessionActionButtons;\n","export const useBackendAIAppLauncher = () => {\n  // This is not use any React hooks, so it's not a React hook.\n  // But keep it here for the future refactoring.\n\n  // @ts-ignore\n  return {\n    runTerminal: (sessionId: string) => {\n      // @ts-ignore\n      globalThis.appLauncher.runTerminal(sessionId);\n    },\n    showLauncher: (params: {\n      'session-uuid'?: string;\n      'access-key'?: string;\n      'app-services'?: string;\n      mode?: string;\n      'app-services-option'?: string;\n      'service-ports'?: string;\n      runtime?: string;\n      filename?: string;\n      arguments?: string;\n    }) => {},\n  };\n};\n","import { useSuspendedBackendaiClient } from '../../hooks';\nimport BAIIntervalView from '../BAIIntervalView';\nimport DoubleTag from '../DoubleTag';\nimport { SessionReservationFragment$key } from './__generated__/SessionReservationFragment.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\nconst SessionReservation: React.FC<{\n  sessionFrgmt: SessionReservationFragment$key;\n}> = ({ sessionFrgmt }) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const { t } = useTranslation();\n  const session = useFragment(\n    graphql`\n      fragment SessionReservationFragment on ComputeSessionNode {\n        id\n        created_at\n        terminated_at\n      }\n    `,\n    sessionFrgmt,\n  );\n  return (\n    <>\n      {dayjs(session.created_at).format('lll')}\n      <BAIIntervalView\n        callback={() => {\n          return session?.created_at\n            ? baiClient.utils.elapsedTime(\n                session.created_at,\n                session?.terminated_at,\n              )\n            : '-';\n        }}\n        delay={1000}\n        render={(intervalValue) => (\n          <DoubleTag\n            values={[\n              { label: t('session.ElapsedTime') },\n              { label: intervalValue },\n            ]}\n          />\n        )}\n      />\n    </>\n  );\n};\n\nexport default SessionReservation;\n","import Flex from '../Flex';\nimport {\n  SessionStatusTagFragment$data,\n  SessionStatusTagFragment$key,\n} from './__generated__/SessionStatusTagFragment.graphql';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Tag, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\ninterface SessionStatusTagProps {\n  sessionFrgmt?: SessionStatusTagFragment$key | null;\n}\nconst statusTagColor = {\n  //prepare\n  RESTARTING: 'blue',\n  PREPARING: 'blue',\n  PREPARED: 'blue',\n  CREATING: 'blue',\n  PULLING: 'blue',\n  //running\n  RUNNING: 'green',\n  PENDING: 'green',\n  SCHEDULED: 'green',\n  //error\n  ERROR: 'red',\n  //finished return undefined\n};\n\nconst isTransitional = (session: SessionStatusTagFragment$data) => {\n  return [\n    'RESTARTING',\n    'TERMINATING',\n    'PENDING',\n    `PREPARING`,\n    'CREATING',\n    'PULLING',\n  ].includes(session?.status || '');\n};\n\nconst statusInfoTagColor = {\n  // 'idle-timeout': undefined,\n  // 'user-requested': undefined,\n  // scheduled: undefined,\n  // 'self-terminated': undefined,\n  'no-available-instances': 'red',\n  'failed-to-start': 'red',\n  'creation-failed': 'red',\n};\nconst SessionStatusTag: React.FC<SessionStatusTagProps> = ({\n  sessionFrgmt,\n}) => {\n  const session = useFragment(\n    graphql`\n      fragment SessionStatusTagFragment on ComputeSessionNode {\n        id\n        name\n        status\n        status_info\n      }\n    `,\n    sessionFrgmt,\n  );\n  const { token } = theme.useToken();\n\n  return session ? (\n    _.isEmpty(session.status_info) ? (\n      <Tag\n        color={\n          session.status ? _.get(statusTagColor, session.status) : undefined\n        }\n        icon={isTransitional(session) ? <LoadingOutlined spin /> : undefined}\n      >\n        {session.status || ' '}\n      </Tag>\n    ) : (\n      <Flex>\n        <Tag\n          style={{ margin: 0, zIndex: 1 }}\n          color={\n            session.status ? _.get(statusTagColor, session.status) : undefined\n          }\n        >\n          {session.status}\n        </Tag>\n        <Tag\n          style={{\n            margin: 0,\n            marginLeft: -1,\n            borderStyle: 'dashed',\n            color:\n              session.status_info &&\n              _.get(statusInfoTagColor, session.status_info)\n                ? undefined\n                : token.colorTextSecondary,\n          }}\n          color={\n            session.status_info\n              ? _.get(statusInfoTagColor, session.status_info)\n              : undefined\n          }\n        >\n          {session.status_info}\n        </Tag>\n      </Flex>\n    )\n  ) : null;\n};\n\nexport default SessionStatusTag;\n","import { SessionTypeTagFragment$key } from './__generated__/SessionTypeTagFragment.graphql';\nimport { Tag } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst typeTagColor = {\n  INTERACTIVE: 'green',\n  BATCH: 'darkgreen',\n  INFERENCE: 'blue',\n};\n\ninterface SessionTypeTagProps {\n  sessionFrgmt: SessionTypeTagFragment$key;\n}\n\nconst SessionTypeTag: React.FC<SessionTypeTagProps> = ({ sessionFrgmt }) => {\n  const session = useFragment(\n    graphql`\n      fragment SessionTypeTagFragment on ComputeSessionNode {\n        type\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  return (\n    <Tag color={_.get(typeTagColor, _.toUpper(session.type || ''))}>\n      {_.toUpper(session.type || '')}\n    </Tag>\n  );\n};\n\nexport default SessionTypeTag;\n","/**\n * @generated SignedSource<<4ad7686d85570119a8fe237eb7cc0de9>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerLogModalFragment$data = {\n  readonly access_key: string | null | undefined;\n  readonly id: string;\n  readonly kernel_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly cluster_idx: number | null | undefined;\n        readonly cluster_role: string | null | undefined;\n        readonly container_id: string | null | undefined;\n        readonly id: string;\n        readonly row_id: string | null | undefined;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly name: string | null | undefined;\n  readonly row_id: string;\n  readonly status: string | null | undefined;\n  readonly \" $fragmentType\": \"ContainerLogModalFragment\";\n} | null | undefined;\nexport type ContainerLogModalFragment$key = {\n  readonly \" $data\"?: ContainerLogModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerLogModalFragment\">;\n};\n\nconst node: ReaderFragment = (function(){\nvar v0 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerLogModalFragment\",\n  \"selections\": [\n    (v0/*: any*/),\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": (v1/*: any*/),\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"access_key\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"KernelConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"kernel_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"KernelEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"KernelNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                (v0/*: any*/),\n                (v1/*: any*/),\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"container_id\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cluster_idx\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cluster_role\",\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"59dda81185d3d874cd635adcae2ae9d4\";\n\nexport default node;\n","/**\n * @generated SignedSource<<12ec2dff4c7eb7f4596c550e0ca60574>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type EditableSessionNameFragment$data = {\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly priority: number | null | undefined;\n  readonly \" $fragmentType\": \"EditableSessionNameFragment\";\n};\nexport type EditableSessionNameFragment$key = {\n  readonly \" $data\"?: EditableSessionNameFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"EditableSessionNameFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"EditableSessionNameFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"priority\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"c6b003f47f74148456a1d12e7ed8fba1\";\n\nexport default node;\n","/**\n * @generated SignedSource<<19ec3c0d04347418c016692bdba42836>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ModifyComputeSessionInput = {\n  clientMutationId?: string | null | undefined;\n  id: any;\n  name?: string | null | undefined;\n  priority?: number | null | undefined;\n};\nexport type EditableSessionNameMutation$variables = {\n  input: ModifyComputeSessionInput;\n};\nexport type EditableSessionNameMutation$data = {\n  readonly modify_compute_session: {\n    readonly item: {\n      readonly id: string;\n      readonly name: string | null | undefined;\n    } | null | undefined;\n  } | null | undefined;\n};\nexport type EditableSessionNameMutation = {\n  response: EditableSessionNameMutation$data;\n  variables: EditableSessionNameMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"input\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"input\",\n        \"variableName\": \"input\"\n      }\n    ],\n    \"concreteType\": \"ModifyComputeSessionPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_compute_session\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"item\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"name\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"EditableSessionNameMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"EditableSessionNameMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bea4b6405958ab3b9796129b5807d0fa\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"EditableSessionNameMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation EditableSessionNameMutation(\\n  $input: ModifyComputeSessionInput!\\n) {\\n  modify_compute_session(input: $input) {\\n    item {\\n      id\\n      name\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"92003994eaa19ceec71d4fe2efb299cd\";\n\nexport default node;\n","/**\n * @generated SignedSource<<e5a57ccc357d2f3f24ba87c89b7aa390>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionActionButtonsFragment$data = {\n  readonly access_key: string | null | undefined;\n  readonly commit_status: string | null | undefined;\n  readonly id: string;\n  readonly row_id: string;\n  readonly service_ports: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerLogModalFragment\" | \"TerminateSessionModalFragment\">;\n  readonly \" $fragmentType\": \"SessionActionButtonsFragment\";\n} | null | undefined;\nexport type SessionActionButtonsFragment$key = {\n  readonly \" $data\"?: SessionActionButtonsFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionActionButtonsFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionActionButtonsFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"row_id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"access_key\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"service_ports\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"commit_status\",\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"TerminateSessionModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"ContainerLogModalFragment\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"70c38dda1f1e788529d6bfd96bbef9f5\";\n\nexport default node;\n","/**\n * @generated SignedSource<<074352ad15961ea5f0a3431351c97797>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionReservationFragment$data = {\n  readonly created_at: string | null | undefined;\n  readonly id: string;\n  readonly terminated_at: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionReservationFragment\";\n};\nexport type SessionReservationFragment$key = {\n  readonly \" $data\"?: SessionReservationFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionReservationFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionReservationFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"created_at\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"terminated_at\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"73f2fc395c80c1bf672ef9d0fea66787\";\n\nexport default node;\n","/**\n * @generated SignedSource<<b4f4d1ab8957ce220ae8b55938b0f742>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionStatusTagFragment$data = {\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly status_info: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionStatusTagFragment\";\n};\nexport type SessionStatusTagFragment$key = {\n  readonly \" $data\"?: SessionStatusTagFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionStatusTagFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionStatusTagFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status_info\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"28d44a009b8d8ecc51f60af3fc9ef8c8\";\n\nexport default node;\n","/**\n * @generated SignedSource<<63fa395e8c9335222eada19d6129c0e5>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionTypeTagFragment$data = {\n  readonly type: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionTypeTagFragment\";\n};\nexport type SessionTypeTagFragment$key = {\n  readonly \" $data\"?: SessionTypeTagFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionTypeTagFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionTypeTagFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"type\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"6d4ab2b738125ee81d47483324695349\";\n\nexport default node;\n","/**\n * @generated SignedSource<<8239c8c8f6654cf4edb157dc030868c2>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type TerminateSessionModalFragment$data = ReadonlyArray<{\n  readonly id: string;\n  readonly kernel_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly agent_id: string | null | undefined;\n        readonly container_id: string | null | undefined;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly name: string | null | undefined;\n  readonly row_id: string | null | undefined;\n  readonly scaling_group: string;\n  readonly \" $fragmentType\": \"TerminateSessionModalFragment\";\n} | null | undefined>;\nexport type TerminateSessionModalFragment$key = ReadonlyArray<{\n  readonly \" $data\"?: TerminateSessionModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"TerminateSessionModalFragment\">;\n}>;\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"plural\": true\n  },\n  \"name\": \"TerminateSessionModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"scaling_group\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"scaling_group\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"KernelConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"kernel_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"KernelEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"KernelNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"container_id\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"agent_id\",\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"0987c567ddd892540d949ccabd005e2b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<816f3eecae241f4dab00312761810670>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type TerminateSessionModalRefetchQuery$variables = {\n  id: any;\n  project_id: string;\n};\nexport type TerminateSessionModalRefetchQuery$data = {\n  readonly compute_session_node: {\n    readonly id: string;\n    readonly status: string | null | undefined;\n  } | null | undefined;\n};\nexport type TerminateSessionModalRefetchQuery = {\n  response: TerminateSessionModalRefetchQuery$data;\n  variables: TerminateSessionModalRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"project_id\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"id\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"project_id\",\n        \"variableName\": \"project_id\"\n      }\n    ],\n    \"concreteType\": \"ComputeSessionNode\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"compute_session_node\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"status\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"TerminateSessionModalRefetchQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"TerminateSessionModalRefetchQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"42872ac8084736aaf26675f9531456db\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"TerminateSessionModalRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query TerminateSessionModalRefetchQuery(\\n  $id: GlobalIDField!\\n  $project_id: UUID!\\n) {\\n  compute_session_node(id: $id, project_id: $project_id) {\\n    id\\n    status\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"6c928af0802a6732e5237c3f6c46db99\";\n\nexport default node;\n","import SessionKernelTags from '../components/ImageTags';\nimport { toGlobalId } from '../helper';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { ResourceNumbersOfSession } from '../pages/SessionLauncherPage';\nimport EditableSessionName from './ComputeSessionNodeItems/EditableSessionName';\nimport SessionActionButtons from './ComputeSessionNodeItems/SessionActionButtons';\nimport SessionReservation from './ComputeSessionNodeItems/SessionReservation';\nimport SessionStatusTag from './ComputeSessionNodeItems/SessionStatusTag';\nimport SessionTypeTag from './ComputeSessionNodeItems/SessionTypeTag';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { SessionDetailContentLegacyQuery } from './__generated__/SessionDetailContentLegacyQuery.graphql';\nimport { SessionDetailContentQuery } from './__generated__/SessionDetailContentQuery.graphql';\nimport {\n  Alert,\n  Button,\n  Descriptions,\n  Grid,\n  Tag,\n  theme,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport Title from 'antd/es/typography/Title';\nimport graphql from 'babel-plugin-relay/macro';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nconst SessionDetailContent: React.FC<{\n  id: string;\n  fetchKey?: string;\n}> = ({ id, fetchKey = 'initial' }) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const currentProject = useCurrentProjectValue();\n  const userRole = useCurrentUserRole();\n\n  const { md } = Grid.useBreakpoint();\n  // TODO: remove and refactor this waterfall request after v24.12.0\n  // get the project id of the session for <= v24.12.0.\n  const { session_for_project_id } =\n    useLazyLoadQuery<SessionDetailContentLegacyQuery>(\n      graphql`\n        query SessionDetailContentLegacyQuery($uuid: UUID!) {\n          session_for_project_id: compute_session(id: $uuid) {\n            group_id\n          }\n        }\n      `,\n      {\n        uuid: id,\n      },\n      {\n        fetchPolicy: 'network-only',\n      },\n    );\n  const { session, legacy_session } =\n    useLazyLoadQuery<SessionDetailContentQuery>(\n      //  In compute_session_node, there are missing fields. We need to use `compute_session` to get the missing fields.\n      graphql`\n        query SessionDetailContentQuery(\n          $id: GlobalIDField!\n          $uuid: UUID!\n          $project_id: UUID!\n        ) {\n          session: compute_session_node(id: $id, project_id: $project_id) {\n            id\n            row_id\n            name\n            project_id\n            user_id\n            resource_opts\n            status\n            kernel_nodes {\n              edges {\n                node {\n                  id\n                  image {\n                    id\n                    name\n                    architecture\n                    tag\n                  }\n                }\n              }\n            }\n            vfolder_mounts\n            created_at @required(action: NONE)\n            terminated_at\n            scaling_group\n            agent_ids\n            requested_slots\n\n            ...SessionStatusTagFragment\n            ...SessionActionButtonsFragment\n            ...SessionTypeTagFragment\n            ...EditableSessionNameFragment\n            ...SessionReservationFragment\n            # fix: This fragment is not used in this component, but it is required by the SessionActionButtonsFragment.\n            # It might be a bug in relay\n            ...ContainerLogModalFragment\n          }\n          legacy_session: compute_session(id: $uuid) {\n            image\n            mounts\n            user_email\n            architecture\n          }\n        }\n      `,\n      {\n        id: toGlobalId('ComputeSessionNode', id),\n        uuid: id,\n        project_id: session_for_project_id?.group_id || currentProject.id,\n      },\n      {\n        fetchPolicy: 'network-only',\n        fetchKey: fetchKey,\n      },\n    );\n\n  const imageFullName =\n    legacy_session?.image &&\n    legacy_session?.architecture &&\n    legacy_session.image + '@' + legacy_session.architecture;\n  return session ? (\n    <Flex direction=\"column\" gap={'sm'} align=\"stretch\">\n      {session_for_project_id?.group_id !== currentProject.id && (\n        <Alert message={t('session.NotInProject')} type=\"warning\" showIcon />\n      )}\n      <Flex\n        direction=\"row\"\n        justify=\"between\"\n        align=\"start\"\n        style={{\n          alignSelf: 'stretch',\n        }}\n      >\n        <EditableSessionName\n          sessionFrgmt={session}\n          component={Title}\n          level={3}\n          style={{\n            margin: 0,\n            flex: 1,\n          }}\n          editable={false}\n        />\n        <Button.Group size=\"large\">\n          <SessionActionButtons sessionFrgmt={session} />\n        </Button.Group>\n      </Flex>\n\n      <Descriptions bordered column={md ? 2 : 1}>\n        <Descriptions.Item label={t('session.SessionId')} span={md ? 2 : 1}>\n          <Typography.Text copyable style={{ fontFamily: 'monospace' }}>\n            {session.row_id}\n          </Typography.Text>\n        </Descriptions.Item>\n        {(userRole === 'admin' || userRole === 'superadmin') && (\n          <Descriptions.Item label={t('credential.UserID')} span={md ? 2 : 1}>\n            {legacy_session?.user_email}\n          </Descriptions.Item>\n        )}\n        <Descriptions.Item\n          label={t('session.Status')}\n          contentStyle={{ display: 'flex', gap: token.marginSM }}\n        >\n          <SessionStatusTag sessionFrgmt={session} />\n          {/* <Button type=\"text\" icon={<TriangleAlertIcon />} /> */}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('session.SessionType')}>\n          <SessionTypeTag sessionFrgmt={session} />\n        </Descriptions.Item>\n        <Descriptions.Item label={t('session.launcher.Environments')}>\n          {imageFullName ? (\n            <Flex gap={'sm'}>\n              <ImageMetaIcon image={imageFullName} />\n              <Flex>\n                <SessionKernelTags image={imageFullName} />\n              </Flex>\n            </Flex>\n          ) : (\n            '-'\n          )}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('session.launcher.MountedFolders')}>\n          {legacy_session?.mounts?.join(', ')}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('session.launcher.ResourceAllocation')}>\n          <Flex gap={'sm'} wrap=\"wrap\">\n            <Tooltip title={t('session.ResourceGroup')}>\n              <Tag>{session.scaling_group}</Tag>\n            </Tooltip>\n            <ResourceNumbersOfSession\n              resource={JSON.parse(session.requested_slots || '{}')}\n            />\n          </Flex>\n        </Descriptions.Item>\n        <Descriptions.Item label={t('session.Agent')}>\n          {session.agent_ids || '-'}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('session.Reservation')}>\n          <Flex gap={'xs'} wrap={'wrap'}>\n            <SessionReservation sessionFrgmt={session} />\n          </Flex>\n        </Descriptions.Item>\n      </Descriptions>\n    </Flex>\n  ) : (\n    <Alert\n      showIcon\n      message={t('session.SessionNotFound')}\n      type=\"error\"\n      description={id}\n    ></Alert>\n  );\n};\n\nexport default SessionDetailContent;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport SessionDetailContent from './SessionDetailContent';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { Button, Drawer, Skeleton, Tooltip } from 'antd';\nimport { DrawerProps } from 'antd/lib';\nimport React, { Suspense, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\n\n// import { StringParam, useQueryParam } from 'use-query-params';\n\ninterface SessionDetailDrawerProps extends DrawerProps {\n  sessionId?: string;\n}\nconst SessionDetailDrawer: React.FC<SessionDetailDrawerProps> = ({\n  sessionId,\n  ...drawerProps\n}) => {\n  const { t } = useTranslation();\n  // const [sessionId, setSessionId] = useQueryParam('sessionDetail', StringParam);\n  useSuspendedBackendaiClient();\n\n  const [isPendingReload, startReloadTransition] = useTransition();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  return (\n    <Drawer\n      title={t('session.SessionInfo')}\n      width={800}\n      {...drawerProps}\n      open={!!sessionId}\n      onClose={(e) => {\n        drawerProps.onClose?.(e);\n        // setSessionId(null, 'pushIn');\n      }}\n      extra={\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingReload}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startReloadTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n      }\n    >\n      <Suspense fallback={<Skeleton />}>\n        {sessionId && (\n          <SessionDetailContent id={sessionId} fetchKey={fetchKey} />\n        )}\n      </Suspense>\n    </Drawer>\n  );\n};\n\nexport default SessionDetailDrawer;\n","/**\n * @generated SignedSource<<7704b96e01528e85cdc0f1230b0069c0>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionDetailContentLegacyQuery$variables = {\n  uuid: string;\n};\nexport type SessionDetailContentLegacyQuery$data = {\n  readonly session_for_project_id: {\n    readonly group_id: string | null | undefined;\n  } | null | undefined;\n};\nexport type SessionDetailContentLegacyQuery = {\n  response: SessionDetailContentLegacyQuery$data;\n  variables: SessionDetailContentLegacyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"uuid\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"group_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"1c0255a2836eb7e492954c7ab0212c7f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionDetailContentLegacyQuery(\\n  $uuid: UUID!\\n) {\\n  session_for_project_id: compute_session(id: $uuid) {\\n    group_id\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d6a0dfbccdec8393f1a058dab48a0757\";\n\nexport default node;\n","/**\n * @generated SignedSource<<eb7c561d2ad323293fa34203b5c53726>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionDetailContentQuery$variables = {\n  id: any;\n  project_id: string;\n  uuid: string;\n};\nexport type SessionDetailContentQuery$data = {\n  readonly legacy_session: {\n    readonly architecture: string | null | undefined;\n    readonly image: string | null | undefined;\n    readonly mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly user_email: string | null | undefined;\n  } | null | undefined;\n  readonly session: {\n    readonly agent_ids: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly created_at: string;\n    readonly id: string;\n    readonly kernel_nodes: {\n      readonly edges: ReadonlyArray<{\n        readonly node: {\n          readonly id: string;\n          readonly image: {\n            readonly architecture: string | null | undefined;\n            readonly id: string;\n            readonly name: string | null | undefined;\n            readonly tag: string | null | undefined;\n          } | null | undefined;\n        } | null | undefined;\n      } | null | undefined>;\n    } | null | undefined;\n    readonly name: string | null | undefined;\n    readonly project_id: string | null | undefined;\n    readonly requested_slots: string | null | undefined;\n    readonly resource_opts: string | null | undefined;\n    readonly row_id: string | null | undefined;\n    readonly scaling_group: string | null | undefined;\n    readonly status: string | null | undefined;\n    readonly terminated_at: string | null | undefined;\n    readonly user_id: string | null | undefined;\n    readonly vfolder_mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerLogModalFragment\" | \"EditableSessionNameFragment\" | \"SessionActionButtonsFragment\" | \"SessionReservationFragment\" | \"SessionStatusTagFragment\" | \"SessionTypeTagFragment\">;\n  } | null | undefined;\n};\nexport type SessionDetailContentQuery = {\n  response: SessionDetailContentQuery$data;\n  variables: SessionDetailContentQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"id\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"project_id\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"uuid\"\n},\nv3 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"id\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"project_id\",\n    \"variableName\": \"project_id\"\n  }\n],\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"project_id\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"user_id\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"resource_opts\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"ImageNode\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"image\",\n  \"plural\": false,\n  \"selections\": [\n    (v4/*: any*/),\n    (v6/*: any*/),\n    (v11/*: any*/),\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"tag\",\n      \"storageKey\": null\n    }\n  ],\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"vfolder_mounts\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"created_at\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"terminated_at\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"scaling_group\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"agent_ids\",\n  \"storageKey\": null\n},\nv18 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"requested_slots\",\n  \"storageKey\": null\n},\nv19 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mounts\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"user_email\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionDetailContentQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          (v5/*: any*/),\n          (v6/*: any*/),\n          (v7/*: any*/),\n          (v8/*: any*/),\n          (v9/*: any*/),\n          (v10/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"KernelConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"kernel_nodes\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"KernelEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v4/*: any*/),\n                      (v12/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v13/*: any*/),\n          {\n            \"kind\": \"RequiredField\",\n            \"field\": (v14/*: any*/),\n            \"action\": \"NONE\",\n            \"path\": \"session.created_at\"\n          },\n          (v15/*: any*/),\n          (v16/*: any*/),\n          (v17/*: any*/),\n          (v18/*: any*/),\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionStatusTagFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionActionButtonsFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionTypeTagFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"EditableSessionNameFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionReservationFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ContainerLogModalFragment\"\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v19/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v20/*: any*/),\n          (v21/*: any*/),\n          (v22/*: any*/),\n          (v11/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v2/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"SessionDetailContentQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          (v5/*: any*/),\n          (v6/*: any*/),\n          (v7/*: any*/),\n          (v8/*: any*/),\n          (v9/*: any*/),\n          (v10/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"KernelConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"kernel_nodes\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"KernelEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v4/*: any*/),\n                      (v12/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"container_id\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"agent_id\",\n                        \"storageKey\": null\n                      },\n                      (v5/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_idx\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_role\",\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v13/*: any*/),\n          (v14/*: any*/),\n          (v15/*: any*/),\n          (v16/*: any*/),\n          (v17/*: any*/),\n          (v18/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"status_info\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"access_key\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"service_ports\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"commit_status\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"type\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"priority\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v19/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v20/*: any*/),\n          (v21/*: any*/),\n          (v22/*: any*/),\n          (v11/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"baa240f530b7b96a3f423735a1c75c34\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionDetailContentQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionDetailContentQuery(\\n  $id: GlobalIDField!\\n  $uuid: UUID!\\n  $project_id: UUID!\\n) {\\n  session: compute_session_node(id: $id, project_id: $project_id) {\\n    id\\n    row_id\\n    name\\n    project_id\\n    user_id\\n    resource_opts\\n    status\\n    kernel_nodes {\\n      edges {\\n        node {\\n          id\\n          image {\\n            id\\n            name\\n            architecture\\n            tag\\n          }\\n        }\\n      }\\n    }\\n    vfolder_mounts\\n    created_at\\n    terminated_at\\n    scaling_group\\n    agent_ids\\n    requested_slots\\n    ...SessionStatusTagFragment\\n    ...SessionActionButtonsFragment\\n    ...SessionTypeTagFragment\\n    ...EditableSessionNameFragment\\n    ...SessionReservationFragment\\n    ...ContainerLogModalFragment\\n  }\\n  legacy_session: compute_session(id: $uuid) {\\n    image\\n    mounts\\n    user_email\\n    architecture\\n    id\\n  }\\n}\\n\\nfragment ContainerLogModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        id\\n        row_id\\n        container_id\\n        cluster_idx\\n        cluster_role\\n      }\\n    }\\n  }\\n}\\n\\nfragment EditableSessionNameFragment on ComputeSessionNode {\\n  id\\n  name\\n  priority\\n}\\n\\nfragment SessionActionButtonsFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  status\\n  access_key\\n  service_ports\\n  commit_status\\n  ...TerminateSessionModalFragment\\n  ...ContainerLogModalFragment\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  terminated_at\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  name\\n  status\\n  status_info\\n}\\n\\nfragment SessionTypeTagFragment on ComputeSessionNode {\\n  type\\n}\\n\\nfragment TerminateSessionModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  scaling_group\\n  kernel_nodes {\\n    edges {\\n      node {\\n        container_id\\n        agent_id\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"90f5988e556db928e962ee53e579f224\";\n\nexport default node;\n","import _ from 'lodash';\n\n/**\n * Escapes a value for CSV formatting.\n *\n * @param value - The value to escape.\n * @returns The escaped value.\n */\nfunction escapeCsvValue(value: any) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  if (typeof value === 'number' || typeof value === 'boolean') {\n    return String(value);\n  }\n\n  // Convert non-string values to string using JSON.stringify\n  value = _.isString(value) ? value : JSON.stringify(value);\n\n  // Replace double quotes within the value with two double quotes\n  return `\"${value.replace(/\"/g, '\"\"')}\"`;\n}\n\n/**\n * Converts an array of JSON objects to a CSV string.\n *\n * @param data - The array of JSON objects to convert.\n * @param format_rules - The formatting rules for each property in the JSON objects.\n * @returns The CSV string representation of the JSON objects.\n */\nexport const JSONToCSVBody = <T>(\n  data: T[],\n  format_rules?: {\n    [key in keyof T]?: (value: any) => any;\n  },\n) => {\n  const displayedData = _.map(data, (row) => {\n    return _.omit(row as object, '__fragments', '__fragmentOwner', '__id');\n  });\n\n  const CSVTitle = _.keys(displayedData[0]);\n  const CSVData = _.map(displayedData, (row) => {\n    return _.map(row, (value, key) => {\n      if (format_rules?.[key as keyof T]) {\n        return format_rules[key as keyof T]?.(value) || value;\n      }\n      return value;\n    });\n  });\n\n  const csvContent = CSVData.map((row) =>\n    row.map(escapeCsvValue).join(','),\n  ).join('\\n');\n  const csvBody = [CSVTitle.map(escapeCsvValue).join(','), csvContent].join(\n    '\\n',\n  );\n\n  return csvBody;\n};\n\n/**\n * Download a file from the given blob.\n * @param {Blob} blob - The file content.\n * @param {string} filename - The name of the file.\n */\n\nexport const downloadBlob = (blob: Blob, filename: string) => {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  URL.revokeObjectURL(url);\n};\n\nexport const exportCSVWithFormattingRules = <T>(\n  data: T[],\n  filename: string,\n  format_rules?: {\n    [key in keyof T]?: (value: any) => any;\n  },\n) => {\n  const bodyStr = JSONToCSVBody(data, format_rules);\n  const blob = new Blob([bodyStr], { type: 'text/csv' });\n  downloadBlob(blob, `${filename}.csv`);\n};\n","import { useTranslation } from 'react-i18next';\n\nconst errorMessageTable: {\n  [key: string]: string;\n} = {\n  \"Cannot read property 'map' of null\": 'error.APINotSupported',\n  'TypeError: NetworkError when attempting to fetch resource.':\n    'error.NetworkConnectionFailed', //_t('error.NetworkConnectionFailed')\n  // Login\n  'Login failed. Check login information.': 'error.LoginFailed', //_t('error.LoginFailed')\n  'User credential mismatch.': 'error.LoginFailed', //_t('error.LoginFailed')\n  'Authentication failed. Check information and manager status.':\n    'error.AuthenticationFailed', //_t('error.AuthenticationFailed')\n  'Too many failed login attempts': 'error.TooManyLoginFailures', //_t('error.TooManyLoginFailures')\n  // virtual folders\n  'server responded failure: 400 Bad Request - The virtual folder already exists with the same name.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  '400 Bad Request - The virtual folder already exists with the same name.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  'server responded failure: 400 Bad Request - One of your accessible vfolders already has the name you requested.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  'server responded failure: 400 Bad Request - You cannot create more vfolders.':\n    'error.MaximumVfolderCreation', //_t('error.MaximumVfolderCreation')\n  'server responded failure: 400 Bad Request - Missing or invalid API parameters. (You cannot create more vfolders.)':\n    'error.MaximumVfolderCreation', //_t('error.MaximumVfolderCreation')\n  'server responded failure: 400 Bad Request - Cannot change the options of a vfolder that is not owned by myself.':\n    'error.CannotChangeVirtualFolderOption', //_t('error.CannotChangeVirtualFolderOption')\n  'server responded failure: 403 Forbidden - Cannot share private dot-prefixed vfolders.':\n    'error.CannotSharePrivateAutomountFolder', //_t('error.CannotSharePrivateAutomountFolder')\n  'server responded failure: 404 Not Found - No such vfolder invitation.':\n    'error.FolderSharingNotAvailableToUser', //_t('error.FolderSharingNotAvailableToUser')\n  'server responded failure: 404 Not Found - No such user.':\n    'error.FolderSharingNotAvailableToUser', //_t('error.FolderSharingNotAvailableToUser')\n  // Resource\n  'server responded failure: 412 Precondition Failed - You have reached your resource limit.':\n    'error.ReachedResourceLimit', //_t('error.ReachedResourceLimit')\n  // User\n  \"Cannot read property 'split' of undefined\": 'error.UserHasNoGroup', //_t('error.UserHasNoGroup')\n};\nconst regexTable: {\n  [key: string]: string;\n} = {\n  '\\\\w*not found matched token with email\\\\w*': 'error.InvalidSignupToken', //_t('error.InvalidSignupToken')\n  '\\\\w*Access key not found\\\\w*': 'error.LoginInformationMismatch', //_t('error.LoginInformationMismatch')\n  '\\\\w*401 Unauthorized - Credential/signature mismatch\\\\w*':\n    'error.LoginInformationMismatch', //_t('error.LoginInformationMismatch')\n  'integrity error: duplicate key value violates unique constraint \"pk_resource_presets\"[\\\\n]DETAIL:  Key \\\\(name\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.ResourcePolicyAlreadyExist', //_t('error.ResourcePolicyAlreadyExist')\n  'integrity error: duplicate key value violates unique constraint \"pk_scaling_groups\"[\\\\n]DETAIL:  Key \\\\(name\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.ScalingGroupAlreadyExist', //_t('error.ScalingGroupAlreadyExist')\n  'integrity error: duplicate key value violates unique constraint \"uq_users_username\"[\\\\n]DETAIL:  Key \\\\(username\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.UserNameAlreadyExist', //_t('error.UserNameAlreadyExist')\n  'server responded failure: 400 Bad Request - Missing or invalid API parameters. (Your resource quota is exceeded. (cpu=24 mem=512g cuda.shares=80))':\n    'error.ResourceLimitExceed', //_t('error.ResourceLimitExceed')\n  '\\\\w*Key \\\\(name\\\\)=\\\\(.+\\\\) is still referenced from table \"keypairs\"\\\\.\\\\w*':\n    'error.ResourcePolicyStillReferenced', //_t('error.ResourcePolicyStillReferenced')\n  'Your resource request is smaller than the minimum required by the image. (\\\\w*)':\n    'error.SmallerResourceThenImageRequires', //_t('error.SmallerResourceThenImageRequires')\n};\n\nexport const usePainKiller = () => {\n  const { t } = useTranslation();\n  const relieve = (msg: string) => {\n    if (typeof msg === 'undefined') {\n      if (\n        // @ts-ignore\n        globalThis.backendaiclient === undefined ||\n        // @ts-ignore\n        globalThis.backendaiclient === null\n      ) {\n        return '_DISCONNECTED';\n      } else {\n        return 'Problem occurred.';\n      }\n    }\n    // @ts-ignore\n    if (globalThis.backendaiwebui.debug === true) {\n      return msg;\n    }\n    if ({}.hasOwnProperty.call(errorMessageTable, msg)) {\n      return t(errorMessageTable[msg]);\n    } else {\n      for (const regex of Object.keys(regexTable)) {\n        if (RegExp(regex).test(msg)) {\n          return t(regexTable[regex]);\n        }\n      }\n      return msg; // Bypass message. It will log on log panel\n    }\n  };\n  return { relieve };\n};\n"],"names":["_ref","_session$kernel_nodes","_session$kernel_nodes2","_$find","_kernelNodes$","_session$row_id$split","_session$kernel_nodes3","sessionFrgmt","modalProps","baiClient","useSuspendedBackendaiClient","token","theme","useToken","userRole","useCurrentUserRole","session","useFragment","_ContainerLogModalFragment","require","kernelNodes","kernel_nodes","edges","map","e","node","selectedKernelId","setSelectedKernelId","useState","_","cluster_role","row_id","useEffect","open","undefined","data","logs","refetch","isPending","isRefetching","dataUpdatedAt","useTanQuery","queryKey","access_key","queryFn","async","get_logs","then","req","result","staleTime","lastLineNumbers","resetPrevious","resetPreviousLineNumber","factory","deps","initialPrev","arguments","length","prevRef","useRef","prevResetKey","setPrevResetKey","current","useMemo","memoizedPrev","previous","useMemoWithPrevious","split","md","Grid","useBreakpoint","t","useTranslation","_jsx","BAIModal","title","_jsxs","Flex","style","maxWidth","gap","children","Typography","Title","level","margin","flexShrink","_Fragment","Text","fontWeight","ellipsis","name","fontFamily","copyable","text","tooltips","width","styles","header","body","height","maxHeight","footer","destroyOnClose","direction","align","wrap","BAISelect","value","onChange","autoSelectOption","options","sortBy","_e$node","_e$node2","cluster_idx","_e$node3","_e$node4","_e$node5","_e$node6","_e$node7","label","fontSize","fontSizeSM","type","substring","Divider","Tooltip","Button","size","icon","DownloadIcon","disabled","onClick","blob","Blob","downloadBlob","Date","toISOString","loading","ReloadOutlined","alignSelf","border","colorBorder","overflow","ScrollFollow","startFollowing","render","_ref2","follow","onScroll","LazyLog","enableLinks","caseInsensitive","enableSearch","enableSearchNavigation","selectableLines","highlight","extraLines","component","Component","otherProps","_EditableSessionNameFragment","optimisticName","setOptimisticName","commitEditMutation","isPendingEditMutation","useMutation","_EditableSessionNameMutation","editable","newName","variables","input","id","priority","onCompleted","response","errors","onError","error","triggerType","color","colorTextTertiary","useStyle","createStyles","css","custom","paddingMD","sendRequest","resp","rqst","method","fetch","uri","contentType","headers","get","ok","Error","startsWith","json","getProxyURL","resourceGroupIdOfSession","projectId","url","globalThis","__local_proxy","_config","proxyURL","wsproxyVersion","debug","_globalThis$appLaunch","_globalThis$appLaunch2","_globalThis$appLaunch3","_globalThis$appLaunch4","appLauncher","forceUseV1Proxy","checked","forceUseV2Proxy","isElectron","scalingGroup","getWsproxyVersion","wsproxy_version","getWSProxyVersion","URL","href","_sessions$2","sessionFrgmts","onRequestClose","sessions","_TerminateSessionModalFragment","isForce","setIsForce","currentProject","useCurrentProjectValue","terminateMutation","useTanMutation","mutationFn","accessKey","currentProjectId","scaling_group","localStorage","getItem","searchParams","set","code","credentials","mode","terminateApp","catch","err","message","statusCode","destroy","relayEvn","useRelayEnvironment","painKiller","usePainKiller","upsertNotification","useSetBAINotification","centered","confirmLoading","onOk","_sessions$","mutateAsync","relieve","description","finally","event","CustomEvent","detail","document","dispatchEvent","fetchQuery","_TerminateSessionModalRefetchQuery","project_id","toPromise","okText","okType","okButtonProps","onCancel","className","mark","Checkbox","target","Card","Paragraph","s","_s$kernel_nodes","flatten","groupBy","kernels","agentId","k","container_id","isActive","includes","status","props","runTerminal","sessionId","showLauncher","params","_SessionActionButtonsFragment","openTerminateModal","setOpenTerminateModal","openLogModal","setOpenLogModal","TerminalIcon","TerminateSessionModal","ScrollTextIcon","ContainerLogModal","PowerOffIcon","colorError","_SessionReservationFragment","dayjs","created_at","format","BAIIntervalView","callback","utils","elapsedTime","terminated_at","delay","intervalValue","DoubleTag","values","statusTagColor","RESTARTING","PREPARING","PREPARED","CREATING","PULLING","RUNNING","PENDING","SCHEDULED","ERROR","isTransitional","statusInfoTagColor","_SessionStatusTagFragment","status_info","Tag","LoadingOutlined","spin","zIndex","marginLeft","borderStyle","colorTextSecondary","typeTagColor","INTERACTIVE","BATCH","INFERENCE","_SessionTypeTagFragment","v0","v1","hash","_legacy_session$mount","fetchKey","session_for_project_id","useLazyLoadQuery","_SessionDetailContentLegacyQuery","uuid","fetchPolicy","legacy_session","_SessionDetailContentQuery","toGlobalId","group_id","imageFullName","image","architecture","Alert","showIcon","justify","EditableSessionName","flex","Group","SessionActionButtons","Descriptions","bordered","column","Item","span","user_email","contentStyle","display","marginSM","SessionStatusTag","SessionTypeTag","ImageMetaIcon","SessionKernelTags","mounts","join","ResourceNumbersOfSession","resource","JSON","parse","requested_slots","agent_ids","SessionReservation","drawerProps","isPendingReload","startReloadTransition","useTransition","updateFetchKey","useUpdatableState","Drawer","onClose","_drawerProps$onClose","call","extra","Suspense","fallback","Skeleton","SessionDetailContent","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","escapeCsvValue","String","stringify","replace","filename","createObjectURL","a","createElement","download","click","revokeObjectURL","exportCSVWithFormattingRules","format_rules","bodyStr","JSONToCSVBody","displayedData","row","CSVTitle","csvContent","key","_format_rules","errorMessageTable","regexTable","msg","backendaiclient","backendaiwebui","hasOwnProperty","regex","Object","keys","RegExp","test"],"sourceRoot":""}