{"version":3,"file":"static/js/436.a74e3d4e.chunk.js","mappings":"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","sources":["components/DatePickerISO.tsx","components/__generated__/VFolderPermissionTag_VFolder.graphql.ts","BAICard.tsx","components/EnvVarFormList.tsx","components/PortSelectFormItem.tsx","components/SessionNameFormItem.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerDateProps } from 'antd/es/date-picker/generatePicker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerDateProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO: React.FC<DatePickerISOProps> = ({\n  value,\n  onChange,\n  localFormat,\n  ...pickerProps\n}) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n};\n\nexport default DatePickerISO;\n","/**\n * @generated SignedSource<<222e47b344f8df1a33028dbc58a85a1a>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\ninterface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n              ? token.colorWarning\n              : status === 'success'\n                ? token.colorSuccess\n                : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          !_.isEmpty(variableName) &&\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                    onChange={() => {\n                      const fieldNames = fields.map((field, index) => [\n                        props.name,\n                        index,\n                        'variable',\n                      ]);\n                      form.validateFields(fieldNames);\n                    }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[{ required: true, message: 'Enter value' }]}\n                >\n                  <Input placeholder=\"Value\" />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                Add variable\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nexport default EnvVarFormList;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({ ...formItemProps }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name=\"ports\"\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        {\n          max: baiClient._config.maxCountForPreopenPorts,\n          type: 'array',\n          message: t('session.launcher.PreOpenPortMaxCountLimit', {\n            count: baiClient._config.maxCountForPreopenPorts,\n          }),\n        },\n        ({ getFieldValue }) => ({\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                const port = parseInt(v);\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          return (\n            <PortTag\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n}\nexport const PortTag: React.FC<PortTagProps> = ({ value, ...tagProps }) => {\n  const port = parseInt(value);\n  const isValid = port >= MIN_PORT && port <= MAX_PORT;\n  return <Tag color={isValid ? undefined : 'red'} {...tagProps} />;\n};\n\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { Form, FormItemProps, Input } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  name: string;\n}\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"name\"\n      rules={[\n        {\n          max: 64,\n          message: t('session.Validation.SessionNameTooLong64'),\n        },\n        {\n          pattern: /^(?:[a-zA-Z0-9][-a-zA-Z0-9._]{2,}[a-zA-Z0-9])?$/,\n          message: t(\n            'session.Validation.PleaseFollowSessionNameRule',\n          ).toString(),\n        },\n      ]}\n      {...formItemProps}\n    >\n      <Input allowClear />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport { VFolderPermissionTag_VFolder$key } from './__generated__/VFolderPermissionTag_VFolder.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useCurrentProjectValue, useUpdatableState } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport { useShadowRoot } from './DefaultProviders';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  Button,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string | number;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\nexport interface VFolderTableProps extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n}\n\nconst VFolderTable: React.FC<VFolderTableProps> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = '/home/work/',\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  ...tableProps\n}) => {\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableValue<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableValue<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey, currentProject.id],\n    queryFn: () => {\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?group_id=${currentProject.id}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 0,\n  });\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.filter(allFolderList, (vf) => {\n    // keep selected folders\n    if (selectedRowKeys.includes(getRowKey(vf))) {\n      return true;\n    }\n    // filter by search key\n    return (\n      (!filter || filter(vf)) && (!searchKey || vf.name.includes(searchKey))\n    );\n  });\n  // const { token } = theme.useToken();\n  // const searchInput = useRef<InputRef>(null);\n\n  // TODO: set defaults\n  // useUpdateEffect(() => {\n  //   setSelectedRowKeys(defaultSelectedKeys || []);\n  // }, [defaultSelectedKeys]);\n\n  const handleAliasUpdate = (e?: any) => {\n    e?.preventDefault();\n    internalForm\n      .validateFields()\n      .then((values) => {})\n      .catch(() => {})\n      .finally(() => {\n        setAliasMap(\n          _.mapValues(\n            _.pickBy(internalForm.getFieldsValue(), (v) => !!v), //remove empty\n            (v, k) => mapAliasToPath(k, v), // add alias base path\n          ),\n        );\n      });\n  };\n\n  const mapAliasToPath = (name: VFolderKey, input?: string) => {\n    if (_.isEmpty(input)) {\n      return `${aliasBasePath}${name}`;\n    } else if (input?.startsWith('/')) {\n      return input;\n    } else {\n      return `${aliasBasePath}${input}`;\n    }\n  };\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : undefined\n            }\n          >\n            <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || mapAliasToPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: /^[a-zA-Z0-9_/-]*$/,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    mapAliasToPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={mapAliasToPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        // onPressEnter={handleAliasUpdate}\n                        // onBlur={handleAliasUpdate}\n                        onChange={handleAliasUpdate}\n                        allowClear\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Button\n          loading={isPendingRefetch}\n          icon={<ReloadOutlined />}\n          onClick={() => {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Form form={internalForm}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import VFolderTable, { AliasMap, VFolderTableProps } from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFromItemProps extends Omit<FormItemProps, 'name'> {\n  filter?: VFolderTableProps['filter'];\n}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n}\n\nconst VFolderTableFromItem: React.FC<VFolderTableFromItemProps> = ({\n  filter,\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  Form.useWatch('vfoldersAliasMap', form);\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey=\"name\"\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n          filter={filter}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFromItem;\n","import BAICard from '../BAICard';\nimport DatePickerISO from '../components/DatePickerISO';\nimport { useWebComponentInfo } from '../components/DefaultProviders';\nimport EnvVarFormList, {\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  PortTag,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport VFolderTableFromItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from '../hooks';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  BlockOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n  SaveOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn } from 'ahooks';\nimport {\n  Affix,\n  Alert,\n  Breadcrumb,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Descriptions,\n  Form,\n  FormInstance,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Table,\n  Tag,\n  Typography,\n  message,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\nconst INITIAL_FORM_VALUES: SessionLauncherValue = {\n  sessionType: 'interactive',\n  allocationPreset: 'custom',\n  hpcOptimization: {\n    autoEnabled: true,\n    OMP_NUM_THREADS: '1',\n    OPENBLAS_NUM_THREADS: '1',\n  },\n  batch: {\n    enabled: false,\n    command: undefined,\n    scheduleDate: undefined,\n  },\n  envvars: [],\n  ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n};\nconst stepParam = withDefault(NumberParam, 0);\nconst formValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n}\n\ntype SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\nconst SessionLauncherPage = () => {\n  let sessionMode: SessionMode = 'normal';\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const [\n    { step: currentStep, formValues: formValuesFromQueryParams, redirectTo },\n    setQuery,\n  ] = useQueryParams({\n    step: stepParam,\n    formValues: formValuesParam,\n    redirectTo: StringParam,\n  });\n\n  const navigate = useNavigate();\n  const { moveTo } = useWebComponentInfo();\n  const baiClient = useSuspendedBackendaiClient();\n  const currentProject = useCurrentProjectValue();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.omit(form.getFieldsValue(), ['environments.image']),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  // After first render, set fields value using query params if it is NOT same as initial values\n  useEffect(() => {\n    if (\n      // if form is changed, validate it to show error on the first render\n      JSON.stringify(INITIAL_FORM_VALUES) !==\n      JSON.stringify(formValuesFromQueryParams)\n    ) {\n      form.setFieldsValue(formValuesFromQueryParams);\n      form.validateFields().catch((e) => {});\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // TODO: scroll to top\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: (\n          <PlayCircleFilled />\n          // <Flex\n          //   align=\"center\"\n          //   justify=\"center\"\n          //   style={{\n          //     // border: '1px solid gray',\n          //     backgroundColor: '#E8E7E7',\n          //     width: 24,\n          //     height: 24,\n          //     borderRadius: 12,\n          //     fontSize: 16,\n          //   }}\n          // >\n          //   <CaretRightOutlined />\n          // </Flex>\n        ),\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  // console.log(form.getFieldError(['resource', 'shmem']));\n  // console.log(form.getFieldValue(['resource']));\n\n  const moveToPreview = () => {\n    // TODO: if handling more async validations, required fetch, use `useTransition`\n    form\n      .validateFields()\n      .catch((e) => {})\n      .finally(() => {\n        setCurrentStep(steps.length - 1);\n      });\n  };\n\n  const startSession = () => {\n    // TODO: support inference mode\n    // TODO: support import mode\n    // TODO: session number\n\n    setIsStartingSession(true);\n    form\n      .validateFields()\n      .then(async (values) => {\n        const [kernelName, architecture] =\n          values.environments.version.split('@');\n        const sessionInfo: CreateSessionInfo = {\n          // TODO: allow_manual_image_name_for_session\n          kernelName,\n          architecture,\n          sessionName: _.isEmpty(values.name)\n            ? generateSessionId()\n            : values.name,\n          config: {\n            type: values.sessionType,\n\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            group_name: currentProject.name,\n            domain: baiClient._config.domainName,\n            scaling_group: values.resourceGroup,\n            ///////////////////////////\n\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            // TODO: CHECK: Convert to rule??? Automatically increase shared memory to 1GiB\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: _.map(values.ports, (v) => parseInt(v)),\n          },\n        };\n\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                20000,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  message.warning(t('session.launcher.SessionAlreadyExists'));\n                  // this.notification.text = _text(\n                  //   'session.launcher.SessionAlreadyExists',\n                  // );\n                  // this.notification.show();\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                console.log(err);\n                throw err;\n                // console.log(err);\n                // if (err && err.message) {\n                //   if ('statusCode' in err && err.statusCode === 408) {\n                //     this.notification.text = _text(\n                //       'session.launcher.sessionStillPreparing',\n                //     );\n                //   } else {\n                //     if (err.description) {\n                //       this.notification.text = PainKiller.relieve(err.description);\n                //     } else {\n                //       this.notification.text = PainKiller.relieve(err.message);\n                //     }\n                //   }\n                //   this.notification.detail = err.message;\n                //   this.notification.show(true, err);\n                // } else if (err && err.title) {\n                //   this.notification.text = PainKiller.relieve(err.title);\n                //   this.notification.show(true, err);\n                // }\n              });\n          },\n        );\n        // console.log('##', values.mounts);\n        // console.log(sessionInfo);\n\n        await Promise.all(sessionPromises)\n          .then(([firstSession]) => {\n            // console.log('##sessionPromises', firstSession);\n            if (\n              values.num_of_sessions === 1 &&\n              values.sessionType !== 'batch'\n            ) {\n              const res = firstSession;\n              let appOptions: {\n                [key in string]: any;\n              };\n              if ('kernelId' in res) {\n                // API v4\n                appOptions = {\n                  'session-name': res.kernelId,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              } else {\n                // API >= v5\n                appOptions = {\n                  'session-uuid': res.sessionId,\n                  'session-name': res.sessionName,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              }\n              const service_info = res.servicePorts;\n              if (Array.isArray(service_info) === true) {\n                appOptions['app-services'] = service_info.map(\n                  (a: { name: string }) => a.name,\n                );\n              } else {\n                appOptions['app-services'] = [];\n              }\n              // TODO: support import and inference\n              // if (sessionMode === 'import') {\n              //   appOptions['runtime'] = 'jupyter';\n              //   appOptions['filename'] = this.importFilename;\n              // }\n              // if (sessionMode === 'inference') {\n              //   appOptions['runtime'] = appOptions['app-services'].find(\n              //     (element: any) => !['ttyd', 'sshd'].includes(element),\n              //   );\n              // }\n\n              // only launch app when it has valid service ports\n              if (service_info.length > 0) {\n                // @ts-ignore\n                globalThis.appLauncher.showLauncher(appOptions);\n              }\n            }\n            navigate('/job', {\n              // replace: true,\n            });\n            moveTo('/job');\n          })\n          .catch(() => {\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        padding: token.paddingSM,\n        width: '100%',\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n    >\n      <style>{customCSS}</style>\n      {redirectTo && (\n        <Breadcrumb\n          items={[\n            {\n              title: t('webui.menu.Sessions'),\n              onClick: (e) => {\n                e.preventDefault();\n                moveTo(redirectTo);\n              },\n              href: redirectTo,\n            },\n            {\n              title: t('session.launcher.StartNewSession'),\n            },\n          ]}\n        />\n      )}\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={3} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Popconfirm\n                title={t('button.Reset')}\n                description={t('session.launcher.ResetFormConfirm')}\n                onConfirm={() => {\n                  form.resetFields();\n\n                  navigate('/session/start');\n                }}\n                icon={\n                  <QuestionCircleOutlined style={{ color: token.colorError }} />\n                }\n                okText={t('button.Reset')}\n                okButtonProps={{\n                  danger: true,\n                }}\n              >\n                <Button\n                  danger\n                  type=\"link\"\n                  style={{ paddingRight: 0, paddingLeft: 0 }}\n                >\n                  {t('button.Reset')}\n                </Button>\n              </Popconfirm>\n              <Button\n                type=\"link\"\n                icon={<BlockOutlined />}\n                disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n              >\n                {t('session.launcher.TemplateAndHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={INITIAL_FORM_VALUES}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      className=\"session-type-radio-group\"\n                      options={[\n                        {\n                          label: (\n                            <Flex\n                              direction=\"column\"\n                              align=\"start\"\n                              style={{ marginBottom: token.marginXS }}\n                            >\n                              <Typography.Text strong>\n                                🏃‍♀️ Make, test and run\n                              </Typography.Text>\n                              <Typography.Text type=\"secondary\">\n                                <Typography.Text code>\n                                  Interactive mode\n                                </Typography.Text>{' '}\n                                allows you to create, test and run code\n                                interactively via jupyter notebook, visual\n                                studio code, etc.\n                              </Typography.Text>\n                            </Flex>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <Flex direction=\"column\" align=\"start\">\n                              <Typography.Text strong>\n                                ⌚️ Start an long-running task\n                              </Typography.Text>\n                              <Typography.Text type=\"secondary\">\n                                <Typography.Text code>\n                                  Batch mode\n                                </Typography.Text>{' '}\n                                runs your code with multiple node & clusters to\n                                scale your idea\n                              </Typography.Text>\n                            </Flex>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item label={t('session.launcher.SessionStartTime')}>\n                      <Flex direction=\"row\" gap={'xs'}>\n                        <Form.Item\n                          noStyle\n                          name={['batch', 'enabled']}\n                          valuePropName=\"checked\"\n                        >\n                          <Checkbox\n                            onChange={(e) => {\n                              if (\n                                e.target.checked &&\n                                _.isEmpty(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                )\n                              ) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  dayjs().add(2, 'minutes').toISOString(),\n                                );\n                              } else if (e.target.checked === false) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  undefined,\n                                );\n                              }\n                            }}\n                          >\n                            {t('session.launcher.Enable')}\n                          </Checkbox>\n                        </Form.Item>\n                        <Form.Item\n                          noStyle\n                          // dependencies={[['batch', 'enabled']]}\n                          shouldUpdate={(prev, next) => {\n                            return (\n                              // @ts-ignore\n                              prev.batch?.enabled !== next.batch?.enabled\n                            );\n                          }}\n                        >\n                          {() => {\n                            const disabled =\n                              form.getFieldValue('batch')?.enabled !== true;\n                            return (\n                              <>\n                                <Form.Item\n                                  name={['batch', 'scheduleDate']}\n                                  noStyle\n                                  rules={[\n                                    {\n                                      // required: true,\n                                      validator: async (rule, value) => {\n                                        if (\n                                          value &&\n                                          dayjs(value).isBefore(dayjs())\n                                        ) {\n                                          return Promise.reject(\n                                            t(\n                                              'session.launcher.StartTimeMustBeInTheFuture',\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <DatePickerISO\n                                    disabled={disabled}\n                                    showTime\n                                    localFormat\n                                    disabledDate={(value) => {\n                                      return value.isBefore(\n                                        dayjs().startOf('day'),\n                                      );\n                                    }}\n                                  />\n                                </Form.Item>\n                                {/* <Form.Item\n                                      noStyle\n                                      name={['batch', 'scheduleTime']}\n                                    >\n                                      <TimePicker disabled={disabled} />\n                                    </Form.Item> */}\n                              </>\n                            );\n                          }}\n                        </Form.Item>\n                      </Flex>\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label=\"Environment Variables\">\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems enableNumOfSessions />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFromItem\n                    filter={(vfolder) => {\n                      return vfolder.status === 'ready';\n                    }}\n                  />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('name').length > 0 ||\n                        form.getFieldError(['batch', 'command']).length > 0 ||\n                        form.getFieldError(['batch', 'scheduleDate']).length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.SessionType')}\n                          span={24}\n                        >\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        {!_.isEmpty(form.getFieldValue('name')) && (\n                          <Descriptions.Item\n                            label={t('session.launcher.SessionName')}\n                            span={24}\n                          >\n                            {form.getFieldValue('name')}\n                          </Descriptions.Item>\n                        )}\n                        {sessionType === 'batch' && (\n                          <>\n                            <Descriptions.Item\n                              label={t('session.launcher.StartUpCommand')}\n                              span={24}\n                            >\n                              <Input.TextArea\n                                readOnly\n                                autoSize\n                                value={form.getFieldValue(['batch', 'command'])}\n                              ></Input.TextArea>\n                            </Descriptions.Item>\n                            <Descriptions.Item\n                              label={t('session.launcher.ScheduleTimeSimple')}\n                              span={24}\n                            >\n                              {dayjs(\n                                form.getFieldValue(['batch', 'scheduleDate']),\n                              ).format('LLL (Z)')}\n                            </Descriptions.Item>\n                          </>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(form.getFieldValue('envvars'), (v, idx) => {\n                          return (\n                            form.getFieldError(['envvars', idx, 'variable'])\n                              .length > 0 ||\n                            form.getFieldError(['envvars', idx, 'value'])\n                              .length > 0\n                          );\n                        })\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" column={2}>\n                        <Descriptions.Item\n                          label={t('session.launcher.Project')}\n                        >\n                          {currentProject.name}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.ResourceGroup')}>\n                          {form.getFieldValue('resourceGroup')}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.Image')} span={2}>\n                          <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }}>\n                            <ImageMetaIcon\n                              image={\n                                form.getFieldValue('environments')?.version\n                              }\n                            />\n                            {/* {form.getFieldValue('environments').image} */}\n                            <Typography.Text copyable code>\n                              {form.getFieldValue('environments')?.version}\n                            </Typography.Text>\n                          </Flex>\n                        </Descriptions.Item>\n                        {form.getFieldValue('envvars')?.length > 0 && (\n                          <Descriptions.Item\n                            label={t('session.launcher.EnvironmentVariable')}\n                          >\n                            {form.getFieldValue('envvars')?.length ? (\n                              <SyntaxHighlighter\n                                style={darcula}\n                                codeTagProps={{\n                                  style: {\n                                    // fontFamily: 'monospace',\n                                  },\n                                }}\n                                // showLineNumbers\n                                customStyle={{\n                                  margin: 0,\n                                  width: '100%',\n                                }}\n                              >\n                                {_.map(\n                                  form.getFieldValue('envvars'),\n                                  (v: { variable: string; value: string }) =>\n                                    `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                                ).join('\\n')}\n                              </SyntaxHighlighter>\n                            ) : (\n                              <Typography.Text type=\"secondary\">\n                                -\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.ResourceAllocation')}\n                      status={\n                        _.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldError(['resource', key]).length > 0\n                          );\n                        })\n                          ? 'error'\n                          : // : _.some(form.getFieldValue('resource'), (v, key) => {\n                            //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n                            //     // console.log(form.getFieldValue(['resource']));\n                            //     return (\n                            //       form.getFieldWarning(['resource', key]).length >\n                            //       0\n                            //     );\n                            //   })\n                            // ? 'warning'\n                            undefined\n                      }\n                      size=\"small\"\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Flex direction=\"column\" align=\"stretch\">\n                        {_.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldWarning(['resource', key]).length > 0\n                          );\n                        }) && (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t(\n                              'session.launcher.EnqueueComputeSessionWarning',\n                            )}\n                          />\n                        )}\n\n                        <Descriptions column={2}>\n                          <Descriptions.Item\n                            label={t(\n                              'session.launcher.ResourceAllocationPerContainer',\n                            )}\n                            span={2}\n                          >\n                            <Flex\n                              direction=\"row\"\n                              align=\"start\"\n                              gap={'sm'}\n                              wrap=\"wrap\"\n                              style={{ flex: 1 }}\n                            >\n                              {form.getFieldValue('allocationPreset') ===\n                              'custom' ? (\n                                // t('session.launcher.CustomAllocation')\n                                ''\n                              ) : (\n                                <Tag>\n                                  {form.getFieldValue('allocationPreset')}\n                                </Tag>\n                              )}\n\n                              <FormResourceNumbers form={form} />\n                              {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                            </Flex>\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.NumberOfContainer')}\n                          >\n                            {form.getFieldValue('cluster_size') === 1\n                              ? form.getFieldValue('num_of_sessions')\n                              : form.getFieldValue('cluster_size')}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.ClusterMode')}\n                          >\n                            {form.getFieldValue('cluster_mode') ===\n                            'single-node'\n                              ? t('session.launcher.SingleNode')\n                              : t('session.launcher.MultiNode')}\n                          </Descriptions.Item>\n                        </Descriptions>\n                        <Card\n                          size=\"small\"\n                          type=\"inner\"\n                          title={t('session.launcher.TotalAllocation')}\n                        >\n                          <Flex direction=\"row\" gap=\"xxs\">\n                            <FormResourceNumbers\n                              form={form}\n                              containerCount={\n                                form.getFieldValue('cluster_size') === 1\n                                  ? form.getFieldValue('num_of_sessions')\n                                  : form.getFieldValue('cluster_size')\n                              }\n                            />\n                          </Flex>\n                        </Card>\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {form.getFieldValue('mounts')?.length > 0 ? (\n                        <Table\n                          rowKey=\"name\"\n                          size=\"small\"\n                          pagination={false}\n                          columns={[\n                            {\n                              dataIndex: 'name',\n                              title: t('data.folders.Name'),\n                            },\n                            {\n                              dataIndex: 'alias',\n                              title: t('session.launcher.FolderAlias'),\n                              render: (value, record) => {\n                                return _.isEmpty(value) ? (\n                                  <Typography.Text\n                                    type=\"secondary\"\n                                    style={{\n                                      opacity: 0.7,\n                                    }}\n                                  >\n                                    {`/home/work/${record.name}`}\n                                  </Typography.Text>\n                                ) : (\n                                  value\n                                );\n                              },\n                            },\n                          ]}\n                          dataSource={_.map(\n                            form.getFieldValue('mounts'),\n                            (v) => {\n                              return {\n                                name: v,\n                                alias:\n                                  form.getFieldValue('vfoldersAliasMap')?.[v],\n                              };\n                            },\n                          )}\n                        ></Table>\n                      ) : (\n                        <Alert\n                          type=\"warning\"\n                          showIcon\n                          message={t('session.launcher.NoFolderMounted')}\n                        />\n                      )}\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n\n                            {!_.isArray(form.getFieldValue('ports')) ||\n                            form.getFieldValue('ports')?.length === 0 ? (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            ) : null}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    {/* <Popconfirm\n                    title={t('session.CheckAgainDialog')}\n                    placement=\"topLeft\"\n                    okButtonProps={{\n                      danger: true,\n                    }}\n                    okText={t('button.Reset')}\n                    onConfirm={() => {\n                      // @ts-ignore\n                      form.resetFields({\n\n                      });\n                    }}\n                  >\n                    <Button ghost danger>\n                      {t('button.Reset')}\n                    </Button>\n                  </Popconfirm> */}\n                    {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )}\n                  </Flex>\n                  <Flex direction=\"row\" gap=\"sm\">\n                    {currentStep !== steps.length - 1 && (\n                      <Button onClick={moveToPreview}>Skip to Review</Button>\n                    )}\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        Previous\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Button\n                        type=\"primary\"\n                        icon={<PlayCircleOutlined />}\n                        disabled={hasError}\n                        onClick={startSession}\n                        loading={isStartingSession}\n                      >\n                        {t('session.launcher.Launch')}\n                      </Button>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        Next <RightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Affix\n            offsetTop={150}\n            // direction=\"column\"\n            style={{ zIndex: 2 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                // handle \"skip to review\" step specifically, because validation\n                if (nextCurrent === steps.length - 1) {\n                  moveToPreview();\n                } else {\n                  setCurrentStep(nextCurrent);\n                }\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Affix>\n        )}\n      </Flex>\n      {/* <FolderExplorer\n        folderName={selectedFolderName}\n        open={!!selectedFolderName}\n        onRequestClose={() => {\n          setSelectedFolderName(undefined);\n        }}\n      /> */}\n    </Flex>\n  );\n};\n\nconst FormResourceNumbers: React.FC<{\n  form: FormInstance;\n  containerCount?: number;\n}> = ({ form, containerCount = 1 }) => {\n  return (\n    <>\n      {_.map(\n        _.omit(\n          form.getFieldValue('resource'),\n          'shmem',\n          'accelerator',\n          'acceleratorType',\n        ),\n        (value, type) => {\n          return (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (iSizeToSize(value, 'b')?.number || 0) * containerCount + ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: form.getFieldValue('resource').shmem\n                  ? (iSizeToSize(form.getFieldValue('resource').shmem, 'b')\n                      ?.number || 0) * containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {_.isNumber(form.getFieldValue(['resource', 'accelerator'])) && (\n        <ResourceNumber\n          // @ts-ignore\n          type={form.getFieldValue(['resource', 'acceleratorType'])}\n          value={_.toString(\n            form.getFieldValue(['resource', 'accelerator']) * containerCount,\n          )}\n        />\n      )}\n    </>\n  );\n};\n// const SessionTypeItem: React.FC<{\n//   title: string;\n//   description?: string;\n// }> = ({ title, description }) => {\n//   const { token } = theme.useToken();\n//   return (\n//     <Flex\n//       direction=\"column\"\n//       style={{ padding: token.paddingXS }}\n//       align=\"stretch\"\n//     >\n//       <Typography.Title level={5}>{title}</Typography.Title>\n//       <Typography.Text\n//         type=\"secondary\"\n//         // @ts-ignore\n//         style={{ textWrap: 'wrap' }}\n//       >\n//         {description}\n//       </Typography.Text>\n//     </Flex>\n//   );\n// };\n\n// interface StepContentProps extends FlexProps{\n\n// }\n// const StepContent: React.FC<{}> = () => {\n//   return <Flex>\n\n//   </Flex>\n// }\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nconst generateRandomString = () => {\n  let randNum = Math.floor(Math.random() * 52 * 52 * 52);\n\n  const parseNum = (num: number) => {\n    if (num < 26) return String.fromCharCode(65 + num);\n    else return String.fromCharCode(97 + num - 26);\n  };\n\n  let randStr = '';\n\n  for (let i = 0; i < 3; i++) {\n    randStr += parseNum(randNum % 52);\n    randNum = Math.floor(randNum / 52);\n  }\n\n  return randStr;\n};\n\nexport default SessionLauncherPage;\n"],"names":["_ref","value","onChange","localFormat","pickerProps","_objectWithoutProperties","_excluded","_useControllableValue","useControllableValue","setControllableValue","_slicedToArray","_jsx","DatePicker","_objectSpread","dayjs","undefined","_value$tz","newValue","format","tz","toISOString","node","_ref$status","status","extraButtonTitle","onClickExtraButton","extra","style","cardProps","token","theme","useToken","_extra","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","onClick","children","Card","_","borderColor","colorSuccess","formItemProps","props","inputRef","useRef","t","useTranslation","form","Form","useFormInstance","List","fields","_ref2","add","remove","_jsxs","Flex","direction","gap","align","map","_ref3","index","key","name","restField","_excluded2","Item","marginBottom","flex","rules","required","message","pattern","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","variable","length","Promise","reject","resolve","Input","ref","placeholder","fieldNames","field","validateFields","MinusCircleOutlined","noStyle","setTimeout","current","focus","PlusOutlined","block","PortTag","tagProps","port","parseInt","isValid","Tag","color","Object","assign","_objectDestructuringEmpty","baiClient","useSuspendedBackendaiClient","label","tooltip","Trans","i18nKey","max","_config","maxCountForPreopenPorts","count","values","v","Error","Select","mode","tagRender","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","toString","allowClear","_ref$vFolderFrgmt","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","require","tagValues","r","w","d","perm","includes","hasPermission","toUpperCase","compact","DoubleTag","filter","_ref$showAliasInput","showAliasInput","_ref$selectedRowKeys","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","_ref$aliasBasePath","aliasBasePath","controlledAliasMap","aliasMap","onChangeAliasMap","_ref$rowKey","rowKey","tableProps","getRowKey","React","record","defaultValue","_useControllableValue2","setSelectedRowKeys","_useControllableValue3","_useControllableValue4","setAliasMap","_Form$useForm","useForm","internalForm","useEffect","setFieldsValue","startsWith","slice","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","_useUpdatableState","useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","_useTransition","useTransition","_useTransition2","isPendingRefetch","startRefetchTransition","allFolderList","useTanQuery","queryKey","id","queryFn","method","url","concat","staleTime","data","_useState","useState","_useState2","searchKey","setSearchKey","displayingFolders","vf","handleAliasUpdate","then","catch","finally","getFieldsValue","k","mapAliasToPath","input","shadowRoot","useShadowRoot","columns","title","Typography","Text","_Fragment","fontWeight","Tooltip","getPopupContainer","QuestionCircleOutlined","dataIndex","sorter","a","b","localeCompare","render","isCurrentRowSelected","display","height","TextHighlighter","keyword","shouldUpdate","prev","cur","allAliasPathMap","reduce","result","_validator","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","path","abrupt","stop","_x","_x2","apply","arguments","usage_mode","UserOutlined","group_name","row","VFolderPermissionTag","created_at","justify","target","loading","ReloadOutlined","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","_toConsumableArray","useWatch","hidden","arr","valuePropName","trigger","VFolderTable","setFieldValue","pagination","INITIAL_FORM_VALUES","sessionType","allocationPreset","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","enabled","command","scheduleDate","envvars","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","stepParam","withDefault","NumberParam","formValuesParam","JsonParam","FormResourceNumbers","_ref5","_ref5$containerCount","containerCount","_iSizeToSize","_iSizeToSize2","ResourceNumber","iSizeToSize","number","opts","shmem","generateSessionId","text","possible","charAt","Math","floor","random","generateRandomString","num","randNum","randStr","String","fromCharCode","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue8","sessionMode","isStartingSession","setIsStartingSession","_useQueryParams","useQueryParams","step","formValues","redirectTo","StringParam","_useQueryParams2","_useQueryParams2$","currentStep","formValuesFromQueryParams","setQuery","navigate","useNavigate","moveTo","useWebComponentInfo","syncFormToURLWithDebounce","useDebounceFn","console","log","leading","wait","trailing","run","setCurrentStep","nextStep","screens","Grid","useBreakpoint","JSON","stringify","preserve","steps","PlayCircleFilled","currentStepKey","hasError","getFieldsError","item","errors","moveToPreview","padding","paddingSM","justifyContent","Breadcrumb","items","href","maxWidth","Title","level","marginTop","Popconfirm","description","onConfirm","resetFields","okText","okButtonProps","danger","paddingRight","paddingLeft","BlockOutlined","disabled","Provider","onFormChange","info","layout","requiredMark","initialValues","Radio","className","options","marginXS","strong","code","SessionNameFormItem","TextArea","autoSize","Checkbox","checked","_prev$batch","_next$batch","_form$getFieldValue","_callee2","_context2","isBefore","_x3","DatePickerISO","showTime","disabledDate","startOf","ErrorBoundary","fallbackRender","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableNumOfSessions","Switch","checkedChildren","unCheckedChildren","_prev$hpcOptimization","_next$hpcOptimization","Row","gutter","marginMD","Col","xs","sm","InputNumber","min","stringMode","VFolderTableFromItem","vfolder","PortSelectFormItem","BAICard","size","getFieldError","findIndex","Descriptions","span","readOnly","idx","column","ImageMetaIcon","image","version","copyable","SyntaxHighlighter","darcula","codeTagProps","customStyle","margin","join","getFieldWarning","Alert","showIcon","opacity","_form$getFieldValue7","alias","SaveOutlined","LeftOutlined","PlayCircleOutlined","_values$environments$","_values$environments$2","kernelName","architecture","sessionInfo","sessionPromises","environments","split","sessionName","config","startsAt","startupCommand","domain","domainName","scaling_group","resourceGroup","cluster_mode","cluster_size","maxWaitSeconds","cpu","resource","mem","compareNumberWithUnits","accelerator","_defineProperty","acceleratorType","mounts","mount_map","vfoldersAliasMap","env","preopen_ports","ports","num_of_sessions","formattedSessionName","createIfNotExists","res","created","warning","err","all","firstSession","appOptions","kernelId","sessionId","service_info","servicePorts","Array","isArray","globalThis","appLauncher","showLauncher","ghost","RightOutlined","lg","Affix","offsetTop","zIndex","Steps","nextCurrent","s"],"sourceRoot":""}