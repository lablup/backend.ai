{"version":3,"file":"static/js/424.a04604de.chunk.js","mappings":"sPAYA,MA8CA,EA9CwCA,IAOjC,IAPkC,OACvCC,EAAS,UAAS,iBAClBC,EAAgB,mBAChBC,EAAkB,MAClBC,EAAK,MACLC,KACGC,GACJN,EACC,MAAM,MAAEO,GAAUC,EAAAA,EAAMC,WAClBC,EACJN,GACCF,IACCS,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,KAAK,OACLC,KACa,UAAXb,GACEU,EAAAA,EAAAA,KAACI,EAAAA,EAAkB,CAACC,aAAcT,EAAMU,aAC3B,YAAXhB,GACFU,EAAAA,EAAAA,KAACO,EAAAA,EAAc,CAACF,aAAcT,EAAMY,oBAClCC,EAENC,QAASlB,EAAmBmB,SAE3BpB,UAGLkB,EACF,OACET,EAAAA,EAAAA,KAACY,EAAAA,EAAI,CACHC,UAAsB,UAAXvB,EAAqB,iBAAmB,GACnDI,MAAOoB,IAAAA,OAASpB,EAAO,CACrBqB,YACa,UAAXzB,EACIM,EAAMU,WACK,YAAXhB,EACEM,EAAMY,aACK,YAAXlB,EACEM,EAAMoB,aACD,OAALtB,QAAK,IAALA,OAAK,EAALA,EAAOqB,cAEnBtB,MAAOM,KACHJ,GACJ,C,0HCxCN,MA4BA,EA5BsBsB,EAAAA,YAGpB,CAAA5B,EAAmD6B,KAAS,IAA3D,MAAEC,EAAK,SAAEC,EAAQ,YAAEC,KAAgBC,GAAajC,EACjD,MAAO,CAAEkC,IAAwBC,EAAAA,EAAAA,GAAqB,CACpDL,QACAC,aAGF,OACEpB,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CACTP,IAAKA,EACLC,MAAOA,EAAQO,IAAMP,QAASV,EAC9BW,SAAWD,IAAW,IAADQ,EAAAC,EAAAC,EACff,IAAAA,QAAUK,KACZA,EAAQA,EAAM,IAEhB,MAAMW,EAAWT,EACR,QADmBM,EACxBR,SAAK,IAAAQ,OAAA,EAALA,EAAOI,SACF,QADUH,EACfT,SAAK,IAAAS,GAAM,QAANC,EAALD,EAAOI,YAAI,IAAAH,OAAN,EAALA,EAAaI,cAEjBV,EAAqBO,EAAS,KAE5BR,GACJ,G,uEChCN,MAQA,EARsDjC,IAA0B,IAAzB,MAAE8B,KAAUe,GAAO7C,EACxE,MAAM8C,EAAOC,EAAAA,EAAKC,kBAIlB,OAHAC,EAAAA,EAAAA,YAAU,KACRH,EAAKI,cAAcL,EAAMM,KAAMrB,EAAM,GACpC,CAACA,EAAOgB,EAAMD,EAAMM,QAChBxC,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,IAAKP,EAAOQ,QAAM,GAAG,C,2JCExC,MAAMC,EAAW,KACXC,EAAW,MAyHJC,EAAkCC,IAIxC,IAJyC,QAC9CC,EAAO,MACP5B,KACG6B,GACJF,EACC,OACE9C,EAAAA,EAAAA,KAACiD,EAAAA,EAAG,CACFC,OAAQH,GAAWI,EAAehC,QAASV,EAAY,SACnDuC,GACJ,EAIOG,EAAkBC,IAE7B,GAAIC,EAAeD,GAAU,CAC3B,MAAME,EAAiBF,EAAQG,MAAM,MAC9BC,EAAOC,GAAOH,EAAeI,KAAKC,GAAMC,SAASD,KACxD,OAAOH,GAASb,GAAYc,GAAOb,CACrC,CAAO,OACLQ,IAAYQ,SAASR,GAASS,YAC9BD,SAASR,IAAYT,GACrBiB,SAASR,IAAYR,CAIX,EAGDS,EAAkBS,IAC7B,MAAMR,EAAiBQ,EAAUP,MAAM,KACvC,GAA8B,IAA1BD,EAAeS,OAAc,CAC/B,MAAOP,EAAOC,GAAOH,EAAeI,KAAKC,GAAMC,SAASD,KACxD,OAAOH,GAASC,CAClB,CACA,OAAO,CAAK,EAQDO,EACXC,GAEOnD,IAAAA,QACLA,IAAAA,IAAMmD,GAASN,GACbN,EAAeM,GAVmBG,KACtC,MAAON,EAAOC,GAAOK,EAAUP,MAAM,KAAKG,KAAKC,GAAMC,SAASD,KAC9D,OAAO7C,IAAAA,MAAQ0C,EAAOC,EAAM,EAAE,EAQNS,CAAwBP,GAAKC,SAASD,MAwChE,EAhN4CtE,IAGrC,IAHsC,KAC3CmD,EAAO,WACJ2B,GACJ9E,EACC,MAAM,EAAE+E,IAAMC,EAAAA,EAAAA,MACRC,GAAYC,EAAAA,EAAAA,MACZpC,EAAOC,EAAAA,EAAKC,kBAClB,OACErC,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,EAAE,qCACT5B,KAAMA,EACNiC,SAASzE,EAAAA,EAAAA,KAAC0E,EAAAA,GAAK,CAACC,QAAQ,wCACxBlF,MAAO2E,EAAE,0CACTQ,MAAO,CACL,MACEC,UAASA,CAACC,EAAMb,IAEZD,EAA6BC,GAAQF,QACrCO,EAAUS,QAAQC,wBAEXC,QAAQC,UAERD,QAAQE,OACb,IAAIC,MACFhB,EAAE,4CAA6C,CAC7CiB,MAAOf,EAAUS,QAAQC,8BAOrC,MAEEH,UAASA,CAACC,EAAMb,IAEZnD,IAAAA,MAAQmD,GAASN,GACRC,SAASD,GAAGE,aAAeF,GAAKN,EAAeM,KAGjDsB,QAAQC,UAERD,QAAQE,OACb,IAAIC,MAAMhB,EAAE,0CAKpB,MACES,SAAAA,CAAUC,EAAMb,GACd,MAAMqB,EAAWtB,EAA6BC,GAC9C,OACEnD,IAAAA,MAAQwE,GAAWC,GACVA,GAAQ5C,GAAY4C,GAAQ3C,IAG9BqC,QAAQC,UAEVD,QAAQE,OACb,IAAIC,MAAMhB,EAAE,sCAEhB,IAEF,MACES,SAAAA,CAAUC,EAAMb,GAEd,MAAMqB,EAAWtB,EAA6BC,GAC9C,OAAInD,IAAAA,KAAOwE,GAAUvB,SAAWuB,EAASvB,OAChCkB,QAAQC,UAEVD,QAAQE,OACb,IAAIC,MAAMhB,EAAE,oCAEhB,QAGAD,EAAaxD,UAEjBX,EAAAA,EAAAA,KAACwF,EAAAA,EAAM,CACLC,KAAK,OACLC,UAAYxD,IACV,MAAMyD,EACJ7E,IAAAA,OACEkD,EAA6B7B,EAAKyD,cAAcpD,KAC/CmB,GAAMA,IAAMC,SAAS1B,EAAMf,SAC5B4C,OAAS,EACb,OACE/D,EAAAA,EAAAA,KAAC6C,EAAO,CACNE,QAAS4C,EACTE,SAAU3D,EAAM2D,SAChBC,QAAS5D,EAAM4D,QACfC,YAAcC,IACZA,EAAEC,iBACFD,EAAEE,iBAAiB,EAErB/E,MAAOe,EAAMf,MAAMR,SAElBuB,EAAMsC,OACC,EAGd9E,MAAO,CAAEyG,MAAO,QAMhBC,WAAY,KACZC,MAAM,EACNC,gBAAiB,CAAC,IAAK,QAEf,C,2JCxHhB,MA8CA,EA5CIjH,IAAuC,IAAtC,KAAEgH,EAAI,QAAEP,KAAYS,GAAYlH,EACnC,MAAM,EAAE+E,IAAMC,EAAAA,EAAAA,OACPmC,EAAyBC,IAC9BC,EAAAA,EAAAA,GAAuB,0CAEnBC,EAAQ,CACZ,CACEC,MAAOxC,EAAE,qDACTyC,YAAazC,EAAE,oDACf0C,OAAQA,KAAA,IAAAC,EAAA,OAC2C,QAD3CA,EACNC,SAASC,uBAAuB,yBAAiB,IAAAF,OAAA,EAAjDA,EAAoD,EAAE,GAE1D,CACEH,MAAOxC,EAAE,qDACTyC,YAAazC,EACX,4DAEF0C,OAAQA,KAAA,IAAAI,EAAAC,EAAA,OAE6C,QAF7CD,EAEJF,SAASC,uBAAuB,yBAAiB,IAAAC,GAAK,QAALC,EAAjDD,EAAoD,UAAE,IAAAC,OAAL,EADnDA,EAEGC,cAAc,kBAAkB,GAEvC,CACER,MAAOxC,EAAE,qDACTyC,YAAazC,EAAE,wDACf0C,OAAQA,IACNE,SAASI,cACP,gEAIR,OACEpH,EAAAA,EAAAA,KAACqH,EAAAA,EAAI,CACHV,MAAOA,EACPb,QAAUE,IACD,OAAPF,QAAO,IAAPA,GAAAA,EAAUE,GACVS,GAA2B,EAAK,EAElCJ,MAAOG,GAA2BH,KAC9BE,GACJ,E,odCTN,MAskBA,EApkBKlH,IAA0B,IAADiI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAA,IAAxB,gBAAEC,IAAiBrK,EACvB,MAAM,EAAE+E,KAAMC,EAAAA,EAAAA,MACRlC,GAAOC,EAAAA,EAAKC,mBACZ,MAAEzC,IAAUC,EAAAA,EAAMC,WAClBwE,IAAYC,EAAAA,EAAAA,MACZoF,GAAcvH,EAAAA,EAAKwH,SAAS,cAAe,CAAEzH,QAAM0H,UAAU,IAC7DC,GAA0D,QAAvCxC,EAAY,OAAThD,SAAS,IAATA,QAAS,EAATA,GAAWyF,SAAS,wBAAgB,IAAAzC,GAAAA,EAC1D0C,GACsC,QADdzC,EACnB,OAATjD,SAAS,IAATA,QAAS,EAATA,GAAWyF,SAAS,8BAAsB,IAAAxC,GAAAA,EACtC0C,IAAiBC,EAAAA,EAAAA,OAChB,EAAE,eAAEC,GAAc,aAAEC,GAAY,SAAEC,MACvCC,EAAAA,EAAAA,OACI,WAAEC,KAAeC,EAAAA,EAAAA,KAEvB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CACN/D,MAAOxC,GAAE,gCACTwG,KAAK,QACLtL,OACE6C,GAAK0I,cAAc,eAAe9G,OAAS,GAC3C5B,GAAK0I,cAAc,CAAC,QAAS,YAAY9G,OAAS,GAClD5B,GAAK0I,cAAc,CAAC,QAAS,iBAAiB9G,OAAS,EACnD,aACAtD,EAENlB,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBkK,GAAgB,cAAc,EAC9B/I,UAEF8J,EAAAA,EAAAA,MAACK,EAAAA,EAAY,CAACF,KAAK,QAAQG,OAAQ,EAAEpK,SAAA,EACnCX,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,uBAAuBzD,SAChDwB,GAAKyD,cAAc,kBAEpB9E,IAAAA,QAAUqB,GAAKyD,cAAc,kBAC7B5F,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,gCAAgCzD,SACzDwB,GAAKyD,cAAc,iBAGP,UAAhB+D,KACCc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAChB+B,MAAOJ,GAAE,mCACT4G,WAAY,CAAEC,WAAY,UAC1BC,aAAc,CACZC,SAAU,QACVxK,SAEDwB,GAAKyD,cAAc,CAAC,QAAS,aAC5B5F,EAAAA,EAAAA,KAACoL,EAAAA,EAAgB,CAACC,SAAS,QAAO1K,SAC/BwB,GAAKyD,cAAc,CAAC,QAAS,eAGhC5F,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACrL,KAAK,YAAWS,SAC9ByD,GAAE,qBAITpE,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,qCAAqCzD,SAC9DwB,GAAKyD,cAAc,CAAC,QAAS,iBAC5BlE,IAAMS,GAAKyD,cAAc,CAAC,QAAS,kBAAkB7D,OACnD,YAGF/B,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACrL,KAAK,YAAWS,SAC9ByD,GAAE,oBAIR0F,IACC9J,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAChB+B,MAAOJ,GAAE,4CAA4CzD,SAEpDwB,GAAKyD,cAAc,CAAC,QAAS,aAC5B6E,EAAAA,EAAAA,MAACa,EAAAA,EAAWC,KAAI,CAAA5K,SAAA,CACbwB,GAAKyD,cAAc,CAAC,QAAS,YAC7BzD,GAAKyD,cAAc,CAAC,QAAS,iBAAmB,QAGnD5F,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACrL,KAAK,YAAWS,SAC9ByD,GAAE,oBAIP,cAKZpE,EAAAA,EAAAA,KAACwL,EAAAA,EAA6B,CAC5BhM,mBAAoBA,KAClBkK,GAAgB,cAAc,KAGlC1J,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CACN/D,MAAOxC,GAAE,iCACTwG,KAAK,QACLtL,OACEwB,IAAAA,KACEqB,GAAKyD,cACH,YAEF,CAACjC,EAAG8H,IAEAtJ,GAAK0I,cAAc,CAAC,UAAWY,EAAK,aAAa1H,OAAS,GAC1D5B,GAAK0I,cAAc,CAAC,UAAWY,EAAK,UAAU1H,OAAS,IAIzD,aACAtD,EAENlB,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBkK,GAAgB,cAAc,EAC9B/I,UAEF8J,EAAAA,EAAAA,MAACK,EAAAA,EAAY,CAACF,KAAK,QAAQG,OAAQ,EAAEpK,SAAA,EACnCX,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,4BAA4BzD,SACrDsJ,GAAezH,QAElBxC,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,iBAAiBzD,SAC1CqJ,IACCS,EAAAA,EAAAA,MAACiB,EAAAA,EAAG,CAAChM,MAAO,CAAEiM,SAAU,UAAWhL,SAAA,EACjCX,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAAAjL,UACFX,EAAAA,EAAAA,KAAC6L,EAAAA,EAAa,CACZC,OACoC,QAAlCtE,EAAArF,GAAKyD,cAAc,uBAAe,IAAA4B,OAAA,EAAlCA,EAAoCuE,WACF,QADStE,EAC3CtF,GAAKyD,cAAc,uBAAe,IAAA6B,OAAA,EAAlCA,EAAoCuE,QAEtCtM,MAAO,CAAEuM,YAAarM,GAAMsM,eAGhClM,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAAAjL,UACFX,EAAAA,EAAAA,KAACmM,EAAAA,EAAI,CAACC,UAAU,MAAMC,KAAK,OAAM1L,SACI,QAAlC+G,EAAAvF,GAAKyD,cAAc,uBAAe,IAAA8B,GAAlCA,EAAoCsE,QACnChM,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CACde,MAAI,EACJ5M,MAAO,CAAE6M,UAAW,aACpBC,SAAU,CACRC,KAAwC,QAApC9E,EAAExF,GAAKyD,cAAc,uBAAe,IAAA+B,OAAA,EAAlCA,EAAoCqE,QAC1CrL,SAEiC,QAFjCiH,EAEDzF,GAAKyD,cAAc,uBAAe,IAAAgC,OAAA,EAAlCA,EAAoCoE,UAGvCvB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SACb0J,GACmC,QAD3BxC,EACP1F,GAAKyD,cAAc,uBAAe,IAAAiC,GAAO,QAAPC,EAAlCD,EAAoCiE,aAAK,IAAAhE,OAAP,EAAlCA,EACI4E,oBAGR1M,EAAAA,EAAAA,KAAC2M,EAAAA,EAAO,CAACzM,KAAK,cACdF,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SACqB,QADrBoH,EACb5F,GAAKyD,cAAc,uBAAe,IAAAmC,GAAO,QAAPC,EAAlCD,EAAoC+D,aAAK,IAAA9D,OAAP,EAAlCA,EAA2C+D,WAE9C/L,EAAAA,EAAAA,KAAC2M,EAAAA,EAAO,CAACzM,KAAK,cACdF,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SAEsB,QAFtBsH,EAEZ9F,GAAKyD,cAAc,uBAAe,IAAAqC,GAAO,QAAPC,EAAlCD,EAAoC6D,aAAK,IAAA5D,OAAP,EAAlCA,EACI0E,gBAGR5M,EAAAA,EAAAA,KAAC2M,EAAAA,EAAO,CAACzM,KAAK,aAEbY,IAAAA,IACmC,QAD9BqH,EACJhG,GAAKyD,cAAc,uBAAe,IAAAuC,GAAO,QAAPC,EAAlCD,EAAoC2D,aAAK,IAAA1D,OAAP,EAAlCA,EAA2CyE,MAC1CC,IAAyC,IAADC,EAAAC,EAAAC,EACvC,MAAMC,EAAepM,IAAAA,SACnBgM,EAAIK,IACJ,eAEIC,EAAWF,EAOZ,QAPwBH,EACzBjM,IAAAA,KACoC,QAD9BkM,EACJ7K,GAAKyD,cAAc,uBAAe,IAAAoH,GAAO,QAAPC,EAAlCD,EAAoClB,aAAK,IAAAmB,OAAP,EAAlCA,EACII,OACJ,CACEF,IAAK,4CAER,IAAAJ,OAAA,EANDA,EAMG5L,MACH2L,EAAI3L,MACFmM,EAAajD,GAASyC,EAAIK,IAAMC,GACtC,OAAOtM,IAAAA,QACLwM,GACAC,EAAAA,EAAAA,IAAqBT,EAAIK,IAAMC,KAE/BpN,EAAAA,EAAAA,KAACwN,EAAAA,EAAS,CAERvJ,OAAQ,CACN,CACEO,MAAO6F,GAASyC,EAAIK,KACpBjK,MAAOgK,EAAe,OAAS,QAEjC,CACE1I,MAAO4I,EACPlK,MAAOgK,EAAe,OAAS,UAR9BJ,EAAIK,MAaXnN,EAAAA,EAAAA,KAACiD,EAAAA,EAAG,CAEFC,MAAOgK,EAAe,OAAS,OAAOvM,SAErC2M,GAHIR,EAAIK,IAKZ,KAGLnN,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CACd7L,MAAO,CAAEwD,MAAOtD,GAAM6N,cACtBjB,SAAU,CACRC,MACEiB,EAAAA,EAAAA,IACoC,QADpBrF,EACdlG,GAAKyD,cAAc,uBAAe,IAAAyC,OAAA,EAAlCA,EAAoCyD,SACC,QAAtCxD,EAAInG,GAAKyD,cAAc,uBAAe,IAAA0C,OAAA,EAAlCA,EAAoCyD,uBASzDtB,EAAAA,EAAAA,MAACiB,EAAAA,EAAG,CAAChM,MAAO,CAAEiM,SAAU,SAAUgC,IAAK/N,GAAMgO,QAASjN,SAAA,EACpDX,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAAAjL,UACFX,EAAAA,EAAAA,KAAC6L,EAAAA,EAAa,CACZC,OACoC,QAAlCvD,EAAApG,GAAKyD,cAAc,uBAAe,IAAA2C,OAAA,EAAlCA,EAAoCwD,WACF,QADSvD,EAC3CrG,GAAKyD,cAAc,uBAAe,IAAA4C,OAAA,EAAlCA,EAAoCwD,aAI1ChM,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAAAjL,UAEFX,EAAAA,EAAAA,KAACmM,EAAAA,EAAI,CAACC,UAAU,MAAMC,KAAK,OAAM1L,SACI,QAAlC8H,EAAAtG,GAAKyD,cAAc,uBAAe,IAAA6C,GAAlCA,EAAoCuD,QACnChM,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CACde,MAAI,EACJ5M,MAAO,CAAE6M,UAAW,aACpBC,SAAU,CACRC,KAAwC,QAApC/D,EAAEvG,GAAKyD,cAAc,uBAAe,IAAA8C,OAAA,EAAlCA,EAAoCsD,QAC1CrL,SAEiC,QAFjCgI,EAEDxG,GAAKyD,cAAc,uBAAe,IAAA+C,OAAA,EAAlCA,EAAoCqD,UAGvCvB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SACb0J,GACCD,GACoC,QADxBxB,EACVzG,GAAKyD,cAAc,uBAAe,IAAAgD,OAAA,EAAlCA,EAAoCmD,aAI1C/L,EAAAA,EAAAA,KAAC2M,EAAAA,EAAO,CAACzM,KAAK,cACdF,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SACbwJ,GACmC,QADrBtB,GACb1G,GAAKyD,cAAc,uBAAe,IAAAiD,QAAA,EAAlCA,GAAoCkD,YAGxC/L,EAAAA,EAAAA,KAAC2M,EAAAA,EAAO,CAACzM,KAAK,cACdF,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SAEsB,QAFtBmI,GAEZ3G,GAAKyD,cAAc,uBAAe,IAAAkD,IAAO,QAAPC,GAAlCD,GAAoCgD,aAAK,IAAA/C,QAAP,EAAlCA,GACI6D,gBAGR5M,EAAAA,EAAAA,KAAC2M,EAAAA,EAAO,CAACzM,KAAK,cACdF,EAAAA,EAAAA,KAAC6N,EAAAA,GAAS,CACRf,IAAK3K,GAAKyD,cAAc,CACtB,eACA,QACA,QAEFyH,OACoC,QAD9BrE,GACJ7G,GAAKyD,cAAc,uBAAe,IAAAoD,IAAO,QAAPC,GAAlCD,GAAoC8C,aAAK,IAAA7C,QAAP,EAAlCA,GACIoE,UAMRrN,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CACd7L,MAAO,CAAEwD,MAAOtD,GAAM6N,cACtBjB,SAAU,CACRC,MACEiB,EAAAA,EAAAA,IACoC,QADpBxE,GACd/G,GAAKyD,cAAc,uBAAe,IAAAsD,QAAA,EAAlCA,GAAoC4C,SACC,QAAtC3C,GAAIhH,GAAKyD,cAAc,uBAAe,IAAAuD,QAAA,EAAlCA,GAAoC4C,yBAU/B,QAA7B3C,GAAAjH,GAAKyD,cAAc,kBAAU,IAAAwD,QAAA,EAA7BA,GAA+BrF,QAAS,IACvC/D,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAChB+B,MAAOJ,GAAE,wCAAwCzD,SAEnB,QAA7B0I,GAAAlH,GAAKyD,cAAc,kBAAU,IAAAyD,IAA7BA,GAA+BtF,QAC9B/D,EAAAA,EAAAA,KAAC8N,EAAAA,EAAiB,CAChBpO,MAAO6K,GAAawD,EAAAA,OAAOtN,EAC3BuN,aAAc,CACZtO,MAAO,CACL,GAIJuO,YAAa,CACXC,OAAQ,EACR/H,MAAO,QACPxF,SAEDG,IAAAA,IACCqB,GAAKyD,cAAc,YAClBjC,GACC,IAAI,OAADA,QAAC,IAADA,OAAC,EAADA,EAAGwK,WAAY,QAAQ,OAADxK,QAAC,IAADA,OAAC,EAADA,EAAGxC,QAAS,QACvCiN,KAAK,SAGTpO,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACrL,KAAK,YAAWS,SAAC,cAM5CX,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CACN/D,MAAOxC,GAAE,uCACT9E,OACEwB,IAAAA,KAAOqB,GAAKyD,cAAc,aAAa,CAACjC,EAAGwJ,IAGvChL,GAAK0I,cAAc,CAAC,WAAYsC,IAAMpJ,OAAS,KAGnD5B,GAAK0I,cAAc,CAAC,oBAAoB9G,OAAS,GACjD5B,GAAK0I,cAAc,iBAAiB9G,OAAS,EACzC,aAUAtD,EAENmK,KAAK,QACLrL,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBkK,GAAgB,cAAc,EAC9B/I,UAEF8J,EAAAA,EAAAA,MAAC0B,EAAAA,EAAI,CAACC,UAAU,SAASiC,MAAM,UAAS1N,SAAA,CACrCG,IAAAA,KACCqB,GAAKyD,cAAc,aACnB,CAACjC,EAAGwJ,IAGAhL,GAAKmM,gBAAgB,CAAC,WAAYnB,IAAMpJ,OAAS,MAIrD/D,EAAAA,EAAAA,KAACuO,EAAAA,EAAK,CACJrO,KAAK,UACLsO,UAAQ,EACRC,QAASrK,GAAE,oDAIfqG,EAAAA,EAAAA,MAACK,EAAAA,EAAY,CAACC,OAAQ,EAAEpK,SAAA,EACtBX,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,yBAA0BsK,KAAM,EAAE/N,SAC3DwB,GAAKyD,cAAc,mBAClB5F,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACrL,KAAK,YAAWS,SAC9ByD,GAAE,qBAITpE,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAChB+B,MAAOJ,GAAE,mDACTsK,KAAM,EAAE/N,UAER8J,EAAAA,EAAAA,MAAC0B,EAAAA,EAAI,CACHC,UAAU,MACViC,MAAM,QACNV,IAAK,KACLtB,KAAK,OACL3M,MAAO,CAAEiP,KAAM,GAAIhO,SAAA,CAEyB,WAA3CwB,GAAKyD,cAAc,oBAElB,IAEA5F,EAAAA,EAAAA,KAACiD,EAAAA,EAAG,CAAAtC,SAAEwB,GAAKyD,cAAc,uBAG3B5F,EAAAA,EAAAA,KAAC4O,EAAAA,yBAAwB,CACvBC,SAAU1M,GAAKyD,cAAc,mBAkClCtB,GAAUyF,SAAS,mBACR,OAATzF,SAAS,IAATA,IAAkB,QAATgF,GAAThF,GAAWS,eAAO,IAAAuE,IAAlBA,GAAoBwF,cACnB9O,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,8BAA8BzD,SACvDwB,GAAKyD,cAAc,UAClBxB,GAAE,kCAGVpE,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,sCAAsCzD,SACxB,IAAvCwB,GAAKyD,cAAc,gBAChBzD,GAAKyD,cAAc,mBACnBzD,GAAKyD,cAAc,mBAEzB5F,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,gCAAgCzD,SAClB,gBAAvCwB,GAAKyD,cAAc,gBAChBxB,GAAE,+BACFA,GAAE,oCAGVpE,EAAAA,EAAAA,KAACY,EAAAA,EAAI,CACHgK,KAAK,QACL1K,KAAK,QACL0G,MAAOxC,GAAE,oCAAoCzD,UAE7CX,EAAAA,EAAAA,KAACmM,EAAAA,EAAI,CAACC,UAAU,MAAMuB,IAAI,MAAKhN,UAC7BX,EAAAA,EAAAA,KAAC4O,EAAAA,yBAAwB,CACvBC,SAAU1M,GAAKyD,cAAc,YAC7BmJ,eACyC,IAAvC5M,GAAKyD,cAAc,gBACfzD,GAAKyD,cAAc,mBACnBzD,GAAKyD,cAAc,4BAOnC5F,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CACN/D,MAAOxC,GAAE,2BACTwG,KAAK,QACLtL,OACE6C,GAAK0I,cAAc,oBAAoB9G,OAAS,EAC5C,aACAtD,EAENlB,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBkK,GAAgB,UAAU,EAC1B/I,UAIF8J,EAAAA,EAAAA,MAAC0B,EAAAA,EAAI,CAACC,UAAU,SAASiC,MAAM,UAAUV,IAAK,KAAKhN,SAAA,EACpB,QAA5B4I,GAAApH,GAAKyD,cAAc,iBAAS,IAAA2D,QAAA,EAA5BA,GAA8BxF,QAAS,GACtC/D,EAAAA,EAAAA,KAACgP,EAAAA,EAAK,CACJC,OAAO,OACPrE,KAAK,QACLsE,YAAY,EACZC,QAAS,CACP,CACEC,UAAW,OACXxI,MAAOxC,GAAE,sBAEX,CACEgL,UAAW,QACXxI,MAAOxC,GAAE,gCACTiL,OAAQA,CAAClO,EAAOmO,IACPxO,IAAAA,QAAUK,IACfnB,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CACdrL,KAAK,YACLR,MAAO,CACL6P,QAAS,IACT5O,SAED,cAAc2O,EAAO9M,SAGxBrB,IAKRqO,WAAY1O,IAAAA,IAAMqB,GAAKyD,cAAc,WAAYjC,IAAO,IAAD8L,EACrD,MAAO,CACLjN,KAAMmB,EACN+L,MAA6C,QAAxCD,EAAEtN,GAAKyD,cAAc,2BAAmB,IAAA6J,OAAA,EAAtCA,EAAyC9L,GACjD,OAIL3D,EAAAA,EAAAA,KAACuO,EAAAA,EAAK,CACJrO,KAAK,UACLsO,UAAQ,EACRC,QAASrK,GAAE,uCAG8B,QAA5CoF,GAAArH,GAAKyD,cAAc,iCAAyB,IAAA4D,QAAA,EAA5CA,GAA8CzF,QAAS,GACtD/D,EAAAA,EAAAA,KAAC8K,EAAAA,EAAY,CAACF,KAAK,QAAOjK,UACxBX,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,yBAAyBzD,SAClDG,IAAAA,IAAMqB,GAAKyD,cAAc,2BAA4BpD,IAC7CxC,EAAAA,EAAAA,KAACiD,EAAAA,EAAG,CAAAtC,SAAE6B,UAIjB,WAGRxC,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CACN/D,MAAM,UACNgE,KAAK,QACLtL,OAAQ6C,GAAK0I,cAAc,SAAS9G,OAAS,EAAI,aAAUtD,EAC3DlB,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBkK,GAAgB,UAAU,EAC1B/I,UAEFX,EAAAA,EAAAA,KAAC8K,EAAAA,EAAY,CAACF,KAAK,QAAOjK,UACxBX,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,GAAE,qCAAqCzD,UAC/D8J,EAAAA,EAAAA,MAAC0B,EAAAA,EAAI,CAACC,UAAU,MAAMuB,IAAI,KAAKjO,MAAO,CAAEiP,KAAM,GAAKtC,KAAK,OAAM1L,SAAA,CAE3DG,IAAAA,OAASqB,GAAKyD,cAAc,UAAWjC,GAAMC,SAASD,KAAID,KACxDC,IACC3D,EAAAA,EAAAA,KAAC6C,EAAAA,GAAO,CAAC1B,MAAOwC,EAAGjE,MAAO,CAAEwO,OAAQ,GAAIvN,SACrCgD,MAKL7C,IAAAA,QAAUqB,GAAKyD,cAAc,WACS,KAAb,QAA3B6D,GAAAtH,GAAKyD,cAAc,gBAAQ,IAAA6D,QAAA,EAA3BA,GAA6B1F,QAIzB,MAHF/D,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACrL,KAAK,YAAWS,SAC9ByD,GAAE,6BAOd,E,8IC7lBA,MAAMuL,EAAuBvL,GAAyC,CAC3E,CACEwL,IAAK,EACLnB,QAASrK,EAAE,2CAEb,CACEyL,IAAK,GACLpB,QAASrK,EAAE,4CAEb,CACES,UAASA,CAACiL,EAAG3O,IACPL,IAAAA,QAAUK,GACL8D,QAAQC,UAEZ,MAAM6K,KAAK5O,GAMX,YAAY4O,KAAK5O,IAMjB,MAAM4O,KAAK5O,IAAUA,EAAM4C,QAAU,EACjCkB,QAAQE,OAAOf,EAAE,gDAEnBa,QAAQC,UARND,QAAQE,OACbf,EAAE,mDAPGa,QAAQE,OACbf,EAAE,oDAqCZ,EAnBgE/E,IAEzD,OADF8E,GACJ9E,EAEC,MAAM,EAAE+E,IAAMC,EAAAA,EAAAA,MACd,OACErE,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,EAAE,gCACT5B,KAAK,cAGLoC,MAAO+K,EAAoBvL,MACvBD,EAAaxD,UAEjBX,EAAAA,EAAAA,KAACgQ,EAAAA,EAAK,CAACC,YAAU,EAACC,aAAa,SACrB,C,oTCbhB,MAiOa1E,EACXtJ,IAEA,MAAM,EAAEkC,IAAMC,EAAAA,EAAAA,MACRlC,EAAOC,EAAAA,EAAKC,kBACZ8N,EAAW/N,EAAAA,EAAKwH,SAAS,CAAC,QAAS,WAAYzH,GAC/CiO,GAAkBC,EAAAA,EAAAA,MACxB,OACuB,UAApBD,GAAmD,eAApBA,IAChCD,IACEnQ,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CACN/D,MAAOxC,EAAE,oCACTwG,KAAK,QACLtL,OACE6C,EAAK0I,cAAc,CAAC,QAAS,UAAU9G,OAAS,GAChD5B,EAAK0I,cAAc,CAAC,QAAS,cAAc9G,OAAS,GACpD5B,EAAK0I,cAAc,CAAC,QAAS,YAAY9G,OAAS,GAClD5B,EAAK0I,cAAc,CAAC,QAAS,kBAAkB9G,OAAS,EACpD,aACAtD,EAENlB,iBAAkB6E,EAAE,kBAChBlC,EAAKvB,UAET8J,EAAAA,EAAAA,MAACK,EAAAA,EAAY,CAACF,KAAK,QAAQG,OAAQ,EAAEpK,SAAA,EACnCX,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,EAAE,+BAA+BzD,SACxDwB,EAAKyD,cAAc,CAAC,QAAS,aAEhC5F,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,EAAE,mCAAmCzD,SAC5DwB,EAAKyD,cAAc,CAAC,QAAS,iBAEhC5F,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,EAAE,+BAA+BzD,SACxDwB,EAAKyD,cAAc,CAAC,QAAS,eAEhC5F,EAAAA,EAAAA,KAAC8K,EAAAA,EAAarI,KAAI,CAAC+B,MAAOJ,EAAE,uCAAuCzD,SAChEwB,EAAKyD,cAAc,CAAC,QAAS,wBAIrC,EAIL,EA5QqD1D,IACnD,MAAM,EAAEkC,IAAMC,EAAAA,EAAAA,OACR,MAAEzE,GAAUC,EAAAA,EAAMC,WAClBqC,EAAOC,EAAAA,EAAKC,kBAEZ8N,EAAW/N,EAAAA,EAAKwH,SAAS,CAAC,QAAS,WAAYzH,IAE9CmO,EAAeC,IAAoBC,EAAAA,EAAAA,YACpCC,GAAWC,EAAAA,EAAAA,wBAEX,KAAEC,EAAI,WAAEC,IAAeC,EAAAA,EAAAA,IAAY,CACvCC,SAAU,CAAC,yBAA0B,YAAaR,GAClDS,QAASA,KACP,MAAMC,EAAQ7O,EAAKyD,cAAc,CAAC,QAAS,UAC3C,IAAKoL,EAAO,OAEZ,MAAMC,OAAK,IAAAC,EAAAA,EAAAA,EAAAC,EAAA,OAcX,OAAOC,EAAAA,EAAAA,YAAwCX,EAAUQ,EAAO,CAC9DD,UACCK,WAAW,EAEhBC,UAAWhB,IAGPiB,EAAgBpP,EAAKyD,cAAc,CAAC,QAAS,UAC3C,OAAJ+K,QAAI,IAAJA,OAAI,EAAJA,EAAMa,cACN/Q,EACEgR,EAAQtP,EAAKyD,cAAc,CAAC,QAAS,UAAgB,OAAJ+K,QAAI,IAAJA,OAAI,EAAJA,EAAMe,UAAOjR,EAE9DkR,GAAoBf,GAAcN,IAAkBmB,EAC1D,OACEhH,EAAAA,EAAAA,MAAC7J,EAAAA,EAAI,CACHgG,MAAOxC,EAAE,oCACT3E,OACEO,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAACD,KAAM,CAAC,QAAS,WAAYoP,cAAc,UAAUC,SAAO,EAAAlR,UACpEX,EAAAA,EAAAA,KAAC8R,EAAAA,EAAM,MAGXC,OACE5B,OACI1P,EACA,CACEuR,OAAQ,CACNC,aAAc,QAEhBC,KAAM,CACJC,QAAShC,EAAW,QAAU,YAIpCjO,EAAKvB,SAAA,EAETX,EAAAA,EAAAA,KAACoS,EAAAA,EAAc,CACb5P,KAAM,CAAC,QAAS,cAChBrB,MAAY,OAALsQ,QAAK,IAALA,OAAK,EAALA,EAAOY,eAEhBrS,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAAC6P,aAAc,CAAC,CAAC,QAAS,YAAaT,SAAO,EAAAlR,SACrDtB,IAAwB,IAAvB,cAAEuG,GAAevG,EACjB,OACEoL,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,EAAAA,KAACmM,EAAAA,EAAI,CAAAxL,UACHX,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,SAChBgC,MAAOJ,EAAE,+BACTQ,MAAO,CACL,CACE2N,SAAUpC,GAEZ,CACEjQ,KAAM,QACNuO,QAASrK,EAAE,+CAGf1E,MAAO,CAAEiP,KAAM,GACf6D,eAAgBb,EAAmB,aAAUlR,EAC7CgS,KACEd,EACIvN,EAAE,mCACF3D,EACLE,UAEDX,EAAAA,EAAAA,KAACgQ,EAAAA,EAAM0C,OAAM,CACXC,SAAWhP,IAGTxB,EACGyQ,eAAe,CAAC,CAAC,QAAS,WAC1BC,MAAK,KACJtC,EAAiB5M,EAAE,IAEpBmP,OAAM,QAAS,EAGpB1R,SAAUA,KACRmP,EAAiB,IACjBpO,EAAK4Q,eAAe,CAClBtB,MAAO,CACLuB,UAAW,GACXC,aAASxS,EACTyS,mBAAezS,IAEjB,EAEJ0S,QAASvC,EACTwC,aACGxC,GAAca,GACbzR,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACE,MAAMH,EAAAA,EAAAA,KAACqT,EAAAA,EAAS,WACtB5S,SAKZT,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,aAChBgC,MAAOJ,EAAE,mCACTQ,MAAO,CACL,CACE2N,SAAU3M,EAAc,CAAC,QAAS,cAEpCjF,UAEFX,EAAAA,EAAAA,KAACsT,EAAAA,EAAS,CACRC,QAASzS,IAAAA,IAAMyQ,GAAgBiC,IACtB,CACLhP,MAAQ,OAADgP,QAAC,IAADA,OAAC,EAADA,EAAGC,WACVtS,MAAQ,OAADqS,QAAC,IAADA,OAAC,EAADA,EAAGC,eAGdC,kBAAgB,EAChBC,SAAU7S,IAAAA,QAAUwP,IAAkBM,OAI1CnG,EAAAA,EAAAA,MAACiB,EAAAA,EAAG,CAACkI,OAAQhU,EAAMiU,SAASlT,SAAA,EAC1BX,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAAC8C,KAAM,GAAG/N,UACZX,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,WAChBgC,MAAOJ,EAAE,+BACTQ,MAAO,CACL,CACE2N,SAAU3M,EAAc,CAAC,QAAS,cAEpCjF,UAEFX,EAAAA,EAAAA,KAACsT,EAAAA,EAAS,CACRC,QAASzS,IAAAA,IAAW,OAAL2Q,QAAK,IAALA,OAAK,EAALA,EAAOqC,QAASC,IACtB,CACLvP,MAAQ,OAADuP,QAAC,IAADA,OAAC,EAADA,EAAGvR,KACVrB,MAAQ,OAAD4S,QAAC,IAADA,OAAC,EAADA,EAAGvR,SAGdkR,kBAAgB,EAChBC,SAAU7S,IAAAA,QAAUwP,IAAkBM,SAI5C5Q,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAAC8C,KAAM,GAAG/N,UACZX,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAAC6P,aAAc,CAAC,CAAC,QAAS,YAAaT,SAAO,EAAAlR,SACrDmC,IAAwB,IAAvB,cAAE8C,GAAe9C,EACjB,OACE9C,EAAAA,EAAAA,KAACgU,EAAAA,SAAQ,CACPC,UACEjU,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,EAAE,uCACTQ,MAAO,CACL,CACE2N,SAAU3M,EAAc,CAAC,QAAS,cAEpCjF,UAEFX,EAAAA,EAAAA,KAACwF,EAAAA,EAAM,CAAC2N,SAAO,MAElBxS,UAEDX,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,iBAChBgC,MAAOJ,EAAE,uCACTQ,MAAO,CACL,CACE2N,SAAU3M,EAAc,CAAC,QAAS,cAEpCjF,SAEDiF,EAAc,CAAC,QAAS,aACvB5F,EAAAA,EAAAA,KAACkU,EAAAA,EAAmB,CAClBC,YAAavO,EAAc,CACzB,QACA,YAEF+N,SACE7S,IAAAA,QAAUwP,IAAkBM,EAE9BwD,mBAAiB,KAGnBpU,EAAAA,EAAAA,KAACwF,EAAAA,EAAM,CAACmO,UAAQ,OAGX,WAMpB,MAIJ,C,gRC1PX,MAmJA,EAnJkEtU,IAE3D,OADFgV,GACJhV,EACC,MAAM,EAAE+E,IAAMC,EAAAA,EAAAA,OACPiQ,IAAkBC,EAAAA,EAAAA,MAElB,EAAE,kBAAEC,EAAiB,eAAErK,KAAoBG,EAAAA,EAAAA,OAE3CmK,EAAmBC,IAAwBlE,EAAAA,EAAAA,YAE5CmE,GAAuBC,EAAAA,EAAAA,UAAQ,IAC5B9T,IAAAA,IAAMwT,GAAiBO,IAC5B,MAAMC,EAAS,IAAIC,gBAAgBF,EAAQC,QACrCE,EAAuCC,KAAKC,MAChDJ,EAAOK,IAAI,eAAiB,MAE9B,MAAO,IACFN,KACAG,EAEJ,KAEF,CAACV,IAEJ,OACE7J,EAAAA,EAAAA,MAAC2K,EAAAA,EAAQ,CACPjP,MAAO,IACPS,MAAOxC,EAAE,kCACTiR,cAAe,CAAE1B,UAAWc,GAC5Ba,OAAQlR,EAAE,mBACNiQ,EACJkB,KAAOvP,IAAO,IAAD+G,EAAAyI,EACX,MAAMV,EAEJ,QAFU/H,EAAGjM,IAAAA,KAAOwT,EAAgB,CACpCmB,GAAIhB,WACJ,IAAA1H,OAAA,EAFaA,EAEX+H,OACqB,QAAzBU,EAAAnB,EAAWqB,sBAAc,IAAAF,GAAzBA,EAAAG,KAAAtB,EACEY,KAAKC,MAAM,IAAIH,gBAAgBD,GAAQK,IAAI,eAAiB,MAC7D,EAEHS,SAAUA,KAERlB,OAAqBjU,GACrB4T,EAAWqB,gBAAgB,EAC3B/U,SAAA,EAEFX,EAAAA,EAAAA,KAAC2M,EAAAA,EAAO,CAACjN,MAAO,CAAEwO,OAAQ,MAC1BlO,EAAAA,EAAAA,KAACgP,EAAAA,EAAK,CACJ6G,YAAY,EACZC,OAAQ,CAAEC,EAAG,eACbvG,WAAYmF,EACZzF,YAAY,EACZ8G,aAAc,CACZ9V,KAAM,QACN+V,gBAAiBxB,EAAoB,CAACA,GAAqB,GAC3DyB,SAAW5G,IACToF,EAAqBpF,EAAOmG,GAAG,GAGnCU,MAAQ7G,IAAM,CACZ5O,QAASA,KACPgU,EAAqBpF,EAAOmG,GAAG,IAGnCxG,OAASK,GAAWA,EAAOmG,GAC3BtG,QAAS,CAQP,CACEvI,MAAOxC,EAAE,iBACTgL,UAAW,CAAC,eAAgB,WAC5BC,OAAQA,CAACtD,EAASuD,KAChB,MAAM8G,EACJ9G,EAAO+G,aAAatK,SAAWuD,EAAO+G,aAAarK,OACrD,QACIoK,IACA3L,EAAAA,EAAAA,MAAC0B,EAAAA,EAAI,CAACwB,IAAK,KAAKhN,SAAA,EACdX,EAAAA,EAAAA,KAAC6L,EAAAA,EAAa,CAACC,MAAOsK,KACtBpW,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SACb6T,EAAkB4B,MAErBpW,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SACbwJ,EAAeiM,MAElBpW,EAAAA,EAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SACb2O,EAAOgH,YAAc,IAAIhH,EAAOgH,eAAiB,SAGvD,GAOP,CACE1P,MAAOxC,EAAE,uCACTgL,UAAW,WACXC,OAASR,IAGL7O,EAAAA,EAAAA,KAACmM,EAAAA,EAAI,CAAAxL,UACHX,EAAAA,EAAAA,KAAC4O,EAAAA,yBAAwB,CAACC,SAAUA,OAW5C,CACEjI,MAAOxC,EAAE,8BACTgL,UAAW,YACXC,OAASkH,GACA7U,IAAM6U,GAAWC,gBAsBvB,E,qECnIf,MAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,UAGZC,EAAK,CACH,CACE,KAAQ,WACR,KAAQ,QACR,aAAgB,UAGpBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,cACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,aAAgB,YAChB,KAAQ,cACR,KAAQ,SACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEfD,GAEH,WAAc,MAEhB,MAAO,CACL,SAAY,CACV,oBAAwBJ,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,8BACR,WAAc,CACZ,CACE,MAAS,KACT,KAASC,EACT,aAAgB,UAChB,KAAQ,cACR,KAAQ,WACR,QAAU,EACV,WAAc,CACXC,GAEH,WAAc,MAEhB,CACE,MAAS,KACT,KAASD,EACT,aAAgB,OAChB,KAAQ,cACR,KAAQ,OACR,QAAU,EACV,WAAc,CACXE,EACAE,GAEH,WAAc,OAGlB,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBL,EACxB,KAAQ,YACR,KAAQ,8BACR,WAAc,CACZ,CACE,MAAS,KACT,KAASC,EACT,aAAgB,UAChB,KAAQ,cACR,KAAQ,WACR,QAAU,EACV,WAAc,CACXC,EACAE,GAEH,WAAc,MAEhB,CACE,MAAS,KACT,KAASH,EACT,aAAgB,OAChB,KAAQ,cACR,KAAQ,OACR,QAAU,EACV,WAAc,CACXE,EACAE,EACAD,GAEH,WAAc,QAIpB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,8BACR,cAAiB,QACjB,KAAQ,+NAGZ,CAvI+B,GAyI9BL,EAAaO,KAAO,mCAErB,S,qICtKO,MAAMzC,EAA0BA,KACrC,MAAO0C,EAAsBC,IAC3BxQ,EAAAA,EAAAA,GAAuB,wBAEnByQ,GAAOC,EAAAA,EAAAA,IACX/X,IAI6D,IAJ5D,GACCoW,EAAE,OACFX,EAAM,UACNyB,GACqDlX,EACrD,MAMMgY,EAA0B,CANG,CACjC5B,GAAM,OAAFA,QAAE,IAAFA,EAAAA,GAAM6B,EAAAA,EAAAA,IAAqB,GAC/BxC,SACAyB,UAAoB,OAATA,QAAS,IAATA,EAAAA,GAAa,IAAIgB,MAAOtV,kBAK/BgV,GAAwB,IAC5BO,MAAM,EAAG,GACXN,EAAwBG,EAAwB,IAG9CI,GAAQL,EAAAA,EAAAA,IAAkB,IAAMF,EAAwB,MACxDQ,GAASN,EAAAA,EAAAA,IAAmB3B,IAChC,MAAM4B,GAA2BJ,GAAwB,IAAIU,QAC1DC,GAASA,EAAKnC,KAAOA,IAExByB,EAAwBG,EAAwB,IAElD,MAAO,CACLJ,EACA,CACEE,OACAM,QACAC,UAEH,E,m0BC6IH,MAAMG,GAAsBA,KAAO,IAADvQ,EAAAwQ,EAAAC,EAChC,MAAMC,EAAMC,EAAAA,EAAIC,SAChB,IAAIC,EAA2B,SAE/B,MAAMC,GAAoBC,EAAAA,GAAAA,IAAaC,EAAAA,IACjChU,IAAYC,EAAAA,EAAAA,MACZ6L,IAAkBC,EAAAA,EAAAA,OACjBkI,GAA4BC,KACjCC,EAAAA,EAAAA,MAEI3O,GAA0D,QAAvCxC,EAAY,OAAThD,SAAS,IAATA,QAAS,EAATA,GAAWyF,SAAS,wBAAgB,IAAAzC,GAAAA,GAEzDoR,GAAmBC,KAAwBnI,EAAAA,GAAAA,WAAS,GACrDoI,IAA6DhE,EAAAA,GAAAA,UACjE,SAAAtL,EAAAuP,EAAA,MAAO,CACLlP,YAAa,cAEbmP,iBAAkB,cAClBC,gBAAiB,CACfC,aAAa,EACbC,gBAAiB,IACjBC,qBAAsB,KAExBC,MAAO,CACL7H,SAAS,EACT8H,aAAS3Y,EACT4Y,kBAAc5Y,KACVqJ,IAAuB,CACzBwP,gBAAgB,EAChBC,aAAS9Y,EACT+Y,YAAa,MAGjBC,QAAS,OAEY,QAAjBnQ,EAAAhF,GAAUS,eAAO,IAAAuE,OAAA,EAAjBA,EAAmBoQ,8BAA+B,CACpDrD,aAAc,CACZsD,YAA8B,QAAnBd,EAAEvU,GAAUS,eAAO,IAAA8T,OAAA,EAAjBA,EAAmBa,iCAGjCE,EAAAA,GACH1G,cAAeqF,SAA8B9X,EAC9C,GACD,CACmB,QADnBqX,EACExT,GAAUS,eAAO,IAAA+S,OAAA,EAAjBA,EAAmB4B,4BACnBnB,GACAzO,KAGE+P,IAAYC,EAAAA,GAAAA,aAAYC,GAAAA,YAAa,GACrCC,IAAkBF,EAAAA,GAAAA,aAAYG,GAAAA,UAAWrB,IACzCsB,IAAiBJ,EAAAA,GAAAA,aAAYG,GAAAA,UAAW,CAAC,KAG3CE,KAAMC,GACNpF,WAAYqF,GAAyB,WACrCC,GACAC,UAAWC,IAEbC,KACEC,EAAAA,GAAAA,gBAAe,CACjBP,KAAMN,GACN7E,WAAYgF,GACZM,WAAYK,GAAAA,YACZJ,UAAWL,MAEP,OAAEU,KAAWC,EAAAA,GAAAA,MAGbC,IAAgBC,EAAAA,EAAAA,MAChB9Q,IAAiBC,EAAAA,EAAAA,OAEhB8Q,IAAuBC,OAAQC,MACpCC,EAAAA,EAAAA,MACI,mBAAEC,KAAuBC,EAAAA,EAAAA,OACxB,EAAIlE,KAAMmE,MAAwB/G,EAAAA,EAAAA,MAEjCgH,IAAKC,KAA8BC,EAAAA,EAAAA,IACzC,KAIE,MAAMC,EAAevZ,GAAKwZ,iBAC1BlB,GACE,CAEEzF,WAAYlU,KAAAA,OACVA,KAAAA,KACEqB,GAAKwZ,iBACL,CAAC,sBACD,CAAC,8BACD,CAAC,0BACD,CAAC,SACD,CAAC,YAEH,CACElC,SAASmC,EAAAA,EAAAA,IAAqBF,EAAajC,YAIjD,YACD,GAEH,CACEoC,SAAS,EACTC,KAAM,IACNC,UAAU,IAIRC,GAAkBC,IACtBxB,GACE,CACEN,KAAM8B,GAER,SACD,GAEG,MAAErc,IAAUC,EAAAA,EAAMC,YAElB,EAAEsE,KAAMC,EAAAA,GAAAA,MAER6X,GAAUC,EAAAA,GAAKC,iBAEdja,IAAQC,EAAAA,EAAKia,WAEpB/Z,EAAAA,GAAAA,YAAU,KACHxB,KAAAA,QAAUuZ,KACblY,GAAKyQ,iBAAiBE,OAAO9M,OAC/B,GAGC,IAEH,MAAMsW,IAAsB1H,EAAAA,GAAAA,UAAQ,IAC3B9T,KAAAA,MAAQ,CAAC,EAAG8X,GAAqByB,KACvC,CAACzB,GAAqByB,MAGzB/X,EAAAA,GAAAA,YAAU,KAAO,IAADia,EACW,QAAzBA,EAAAnE,EAAkBoE,eAAO,IAAAD,GAAzBA,EAA2BE,SAAS,EAAG,EAAE,GAExC,CAACrC,KAGJ,MAAMzQ,GACJvH,EAAAA,EAAKwH,SAAS,cAAe,CAAEzH,QAAM0H,UAAU,KAC/C1H,GAAKyD,cAAc,gBACnByU,GAA0B1Q,YAEtBhD,IAAiC+V,EAAAA,EAAAA,IAAgB,CACrD,CACE9V,MAAOxC,GAAE,gCACT+I,IAAK,eAGP,CACEvG,MAAO,GAAGxC,GAAE,sCAAsCA,GAChD,0CAEF+I,IAAK,eAES,cAAhBxD,IAA+B,CAC7B/C,MAAOxC,GAAE,2BACT+I,IAAK,WAEP,CACEvG,MAAOxC,GAAE,4BACT+I,IAAK,WAEP,CACEvG,MAAOxC,GAAE,qCACTjE,MAAMH,EAAAA,GAAAA,KAAC2c,EAAAA,EAAgB,IAEvBxP,IAAK,YAIHyP,GAAmC,QAArB7E,EAAGpR,GAAMyT,WAAY,IAAArC,OAAA,EAAlBA,EAAoB5K,IAErC0P,GAAW/b,KAAAA,KACfqB,GAAK2a,kBACJlF,GAASA,EAAKmF,OAAOhZ,OAAS,KAG1BiZ,GAA2BC,KAChCC,EAAAA,EAAAA,IAAkB,UAEpB5a,EAAAA,GAAAA,YAAU,KACJ8X,KAAgBzT,GAAM5C,OAAS,GACjC5B,GACGyQ,iBACAE,OAAOqK,QACPC,SAAQ,IAAMH,MACnB,GAEC,CAAC7C,GAAajY,GAAM8a,GAA8BtW,GAAM5C,UAE3DzB,EAAAA,GAAAA,YAAU,KAC0B,UAA9B0a,IAEAK,KADER,GAKN,GACC,CAACG,GAA2BH,KAE/B,MA4SOS,GAAoBD,KAAyB7M,EAAAA,GAAAA,WAAS,IAEtD+M,GAAcC,KAAmBhN,EAAAA,GAAAA,WAAS,GAQjD,OAPAiN,EAAAA,GAAAA,kBAAgB,KACVF,KACFpb,GAAKub,cACLF,IAAgB,GAClB,GACC,CAACD,GAAcpb,MAGhBsI,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CACHC,UAAU,SACViC,MAAM,UACN3O,MAAO,CACLie,eAAgB,UAIlBhQ,IAAK,KAAKhN,SAAA,EAEVX,EAAAA,GAAAA,KAAA,SAAAW,SAAQid,KACRnT,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CAACC,UAAU,MAAMuB,IAAI,KAAKU,MAAM,QAAO1N,SAAA,EAC1C8J,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CACHC,UAAU,SACViC,MAAM,UACN3O,MAAO,CAAEiP,KAAM,EAAGkP,SAAU,KAAMld,SAAA,EAElC8J,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CAACC,UAAU,MAAM0R,QAAQ,UAASnd,SAAA,EACrCX,EAAAA,GAAAA,KAACsL,EAAAA,EAAWyS,MAAK,CAACC,MAAO,EAAGte,MAAO,CAAEue,UAAW,GAAItd,SACjDyD,GAAE,uCAELpE,EAAAA,GAAAA,KAACmM,EAAAA,EAAI,CAACC,UAAU,MAAMuB,IAAK,KAAKhN,UAC9BX,EAAAA,GAAAA,KAACC,EAAAA,GAAM,CACLC,KAAK,OAGLR,MAAO,CAAEwe,aAAc,EAAGC,YAAa,GACvCzd,QAASA,IAAMwa,KAA4Bva,SAE1CyD,GAAE,0CAKTpE,EAAAA,GAAAA,KAACoC,EAAAA,EAAKgc,SAAQ,CACZC,aAAcA,CAAC7b,EAAM8b,KAInB9C,IAA2B,EAC3B7a,UAEFX,EAAAA,GAAAA,KAACoC,EAAAA,EAAI,CACHD,KAAMA,GACNoc,OAAO,WACPC,aAAa,WACbC,cAAenC,GAAoB3b,UAEnC8J,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CACHC,UAAU,SACViC,MAAM,UACNV,IAAI,KACJhN,SAAA,EAGA8J,EAAAA,GAAAA,MAAC7J,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,gCACT1E,MAAO,CACLyS,QACqB,gBAAnByK,GAAmC,QAAU,QAC/Cjc,SAAA,EAEFX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAACD,KAAK,cAAa7B,UAC3BX,EAAAA,GAAAA,KAAC0e,EAAAA,GAAAA,MAAW,CACVnL,QAAS,CACP,CACE/O,OACEiG,EAAAA,GAAAA,MAAAC,GAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,GAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACe,MAAI,EAAA3L,SAClByD,GAAE,sCACc,KACnBpE,EAAAA,GAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACrL,KAAK,YAAWS,SAC9ByD,GAAE,6CAITjD,MAAO,eAET,CACEqD,OACEiG,EAAAA,GAAAA,MAAAC,GAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,GAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACe,MAAI,EAAA3L,SAClByD,GAAE,gCACc,KACnBpE,EAAAA,GAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAACrL,KAAK,YAAWS,SAC9ByD,GAAE,uCAITjD,MAAO,eAqCfnB,EAAAA,GAAAA,KAAC2e,EAAAA,EAAmB,KACpB3e,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAK,mBACLgC,MAAM,mBACN9B,QAAM,EAAA/B,UAENX,EAAAA,GAAAA,KAACgQ,EAAAA,EAAK,SAIO,UAAhBrG,KACCc,EAAAA,GAAAA,MAAC7J,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,oCACT1E,MAAO,CACLyS,QACqB,gBAAnByK,GAAmC,QAAU,QAC/Cjc,SAAA,EAEFX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,GAAE,mCACT5B,KAAM,CAAC,QAAS,WAChBoC,MAAO,CACL,CACE2N,UAAU,EACVrS,KAAM,WAERS,UAEFX,EAAAA,GAAAA,KAACgQ,EAAAA,EAAM4O,SAAQ,CAACC,UAAQ,OAE1B7e,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRoP,SAAO,EACPS,aAAc,CAAC,CAAC,QAAS,iBAAiB3R,SAEzCA,KACC,MAAM0Y,EAAelX,GAAKyD,cAAc,CACtC,QACA,iBAEF,OACE5F,EAAAA,GAAAA,KAAC8e,EAAAA,EAAe,CACdC,MAAO,IACPC,SAAUA,KACR,MAAM3F,EAAelX,GAAKyD,cAAc,CACtC,QACA,iBAEF,OAAIyT,EACE3X,IAAM2X,GAAc4F,SAASvd,YAKf,IAHdS,GAAK0I,cAAc,CACjB,QACA,iBACC9G,QAEH5B,GAAKyQ,eAAe,CAClB,CAAC,QAAS,mBAKPlR,IAAM2X,GAAc7C,eAG7B,CACF,EAEF0I,WAAY7F,GAA8B,OAC1ChK,OAAS8P,IAELnf,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,GAAE,qCACT3E,MAAO0f,EAAKxe,UAEZ8J,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CAACC,UAAU,MAAMuB,IAAK,KAAKhN,SAAA,EAC9BX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRoP,SAAO,EACPrP,KAAM,CAAC,QAAS,WAChBoP,cAAc,UAASjR,UAEvBX,EAAAA,GAAAA,KAACof,EAAAA,EAAQ,CACPhe,SAAW4E,IAEPA,EAAEc,OAAOuY,SACTve,KAAAA,QACEqB,GAAKyD,cAAc,CACjB,QACA,kBAIJzD,GAAKI,cACH,CAAC,QAAS,gBACVb,MACG4d,IAAI,EAAG,WACPrd,gBAGgB,IAArB+D,EAAEc,OAAOuY,SAETld,GAAKI,cACH,CAAC,QAAS,qBACV9B,GAGJ0B,GAAKyQ,eAAe,CAClB,CAAC,QAAS,iBACV,EACFjS,SAEDyD,GAAE,gCAGPpE,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRoP,SAAO,EAEP0N,aAAcA,CAACC,EAAMC,KAAU,IAADC,EAAAC,EAC5B,OAEY,QAAVD,EAAAF,EAAKrG,aAAK,IAAAuG,OAAA,EAAVA,EAAYpO,YACF,QADSqO,EACnBF,EAAKtG,aAAK,IAAAwG,OAAA,EAAVA,EAAYrO,QAAO,EAErB3Q,SAEDA,KAAO,IAAD6G,EACL,MAAMmM,GAEY,KADW,QAA3BnM,EAAArF,GAAKyD,cAAc,gBAAQ,IAAA4B,OAAA,EAA3BA,EACI8J,SACN,OACEtR,EAAAA,GAAAA,KAAA0K,GAAAA,SAAA,CAAA/J,UACEX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,gBAChBqP,SAAO,EACPjN,MAAO,CACL,CAEEC,UAAW+a,MACT9a,EACA3D,IAGEA,GACAO,IAAMP,GAAO8d,SACXvd,OAGKuD,QAAQE,OACbf,GACE,gDAICa,QAAQC,YAGnBvE,UAEFX,EAAAA,GAAAA,KAAC6f,EAAAA,EAAa,CACZlM,SAAUA,EACVmM,UAAQ,EACRze,aAAW,EACX0e,aAAe5e,GACNA,EAAM8d,SACXvd,MAAQse,QAAQ,aAWvB,UAQjB,IAKPlW,IACC9J,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRoP,SAAO,EACPS,aAAc,CACZ,CAAC,QAAS,kBACV,CAAC,QAAS,gBACV3R,SAEDA,KACC,MAAM4Y,EAAUpX,GAAKyD,cAAc,CACjC,QACA,YAEIqa,EAAO9d,GAAKyD,cAAc,CAC9B,QACA,gBAGIsa,EAAexe,IAAAA,SACnB6X,EACI,OAAJ0G,QAAI,IAAJA,EAAAA,EAAQ,KAGJE,GAAoBC,EAAAA,EAAAA,IACxBF,EACA9b,IAGIic,GACHvf,KAAAA,OAASyY,IAAYzY,KAAAA,SAAWyY,GAAW,EACxC4G,EACA,KACN,OACEngB,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,GACL,4CAEFK,QAASL,GACP,gDAGFqO,KAAM4N,EAAa1f,UAEnB8J,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CAACC,UAAU,MAAMuB,IAAK,KAAKhN,SAAA,EAC9BX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRoP,SAAO,EACPrP,KAAM,CAAC,QAAS,kBAChBoP,cAAc,UAASjR,UAEvBX,EAAAA,GAAAA,KAACof,EAAAA,EAAQ,CACPhe,SAAW4E,KACgB,IAArBA,EAAEc,OAAOuY,SACXld,GAAKI,cACH,CAAC,QAAS,gBACV9B,GAGJ0B,GAAKyQ,eAAe,CAClB,CAAC,QAAS,YACV,EACFjS,SAEDyD,GAAE,gCAGPpE,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRoP,SAAO,EACPS,aAAc,CAAC,CAAC,QAAS,mBAAmB3R,SAE3CA,KACC,MAAMgT,GAIG,IAHPxR,GAAKyD,cAAc,CACjB,QACA,mBAEJ,OACE5F,EAAAA,GAAAA,KAAA0K,GAAAA,SAAA,CAAA/J,UACEX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,WAChBgC,MAAOJ,GACL,4CAEFyN,SAAO,EACPjN,MAAO,CACL,CACEgL,IAAK,EACL1P,KAAM,SACNuO,QAASrK,GACP,mCAGJ,CACEmO,UAAWoB,IAEbhT,UAEFX,EAAAA,GAAAA,KAACsgB,EAAAA,EAAW,CACV3M,SAAUA,EACV/D,IAAK,EACL2Q,YACEvgB,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRoP,SAAO,EACPrP,KAAM,CAAC,QAAS,eAAe7B,UAE/BX,EAAAA,GAAAA,KAACwF,EAAAA,EAAM,CACLgb,UAAW,EACX9gB,MAAO,CAAE+gB,SAAU,IACnBlN,QAAS,CACP,CACE/O,MAAOJ,GAAE,YACTjD,MAAO,KAET,CACEqD,MAAOJ,GAAE,YACTjD,MAAO,KAET,CACEqD,MAAOJ,GAAE,aACTjD,MAAO,KAET,CACEqD,MAAOJ,GAAE,YACTjD,MAAO,KAET,CACEqD,MAAOJ,GAAE,aACTjD,MAAO,eAQpB,QAKD,IAIhB,SAIc,UAApBiP,IACoB,eAApBA,MACApQ,EAAAA,GAAAA,KAAC0gB,EAAAA,EAAsB,CACrBhhB,MAAO,CACLyS,QACqB,gBAAnByK,GAAmC,QAAU,UAKpC,cAAhBjT,KACC3J,EAAAA,GAAAA,KAACY,EAAAA,EAAI,CAACgG,MAAM,+BAA8BjG,UACxCX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,YAAa,eACpBgC,MAAOJ,GAAE,wCACTQ,MAAO,CACL,CACE2N,UAAU,IAEZ5R,UAEFX,EAAAA,GAAAA,KAACwF,EAAAA,EAAM,SAUbiF,EAAAA,GAAAA,MAAC7J,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,iCACT1E,MAAO,CACLyS,QACqB,gBAAnByK,GAAmC,QAAU,QAC/Cjc,SAAA,EAEFX,EAAAA,GAAAA,KAAC2gB,GAAAA,GAAa,CACZC,eAAiB5a,IACf6a,QAAQC,IAAI9a,GACL,MACPrF,UAEFX,EAAAA,GAAAA,KAAC+gB,EAAAA,EAA+B,OAElC/gB,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAAC+B,MAAOJ,GAAE,wCAAwCzD,UAC1DX,EAAAA,GAAAA,KAACghB,EAAAA,GAAc,CACbxe,KAAM,UACN2B,cAAe,CACb8c,gBAAiB,CAAC,WAAY,mBAKtCjhB,EAAAA,GAAAA,KAACY,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,uCACT1E,MAAO,CACLyS,QACqB,gBAAnByK,GAAmC,QAAU,QAC/Cjc,UAEFX,EAAAA,GAAAA,KAACkhB,EAAAA,GAA2B,CAC1BC,mBACG7c,GAAUS,QAAQ+J,YACnBxK,GAAUyF,SAAS,gBAErBqX,qBAAmB,EACnBC,uBAAqB,EACrBC,sBAAoB,OAGxB7W,EAAAA,GAAAA,MAAC7J,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,oCACT1E,MAAO,CACLyS,QACqB,gBAAnByK,GAAmC,QAAU,QAC/Cjc,SAAA,EAEFX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAACoP,SAAO,EAAAlR,UAChB8J,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CAACC,UAAU,MAAMuB,IAAK,KAAKhN,SAAA,EAC9BX,EAAAA,GAAAA,KAACsL,EAAAA,EAAWC,KAAI,CAAA5K,SACbyD,GAAE,gDAELpE,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,GAAE,6CACT5B,KAAM,CAAC,kBAAmB,eAC1BoP,cAAc,UACdW,UAAQ,EACRV,SAAO,EAAAlR,UAEPX,EAAAA,GAAAA,KAAC8R,EAAAA,EAAM,CACLyP,gBAAiB,KACjBC,kBAAmB,MACnBpgB,SAAWie,IACLA,GACFld,GAAK4Q,eACHjS,KAAAA,KAAO8X,GAAqB,CAC1B,oBAGN,YAMV5Y,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRoP,SAAO,EACP0N,aAAcA,CAACC,EAAMC,KAAU,IAADgC,EAAAC,EAC5B,OACsB,QAApBD,EAAAjC,EAAKzG,uBAAe,IAAA0I,OAAA,EAApBA,EAAsBzI,gBACF,QADa0I,EACjCjC,EAAK1G,uBAAe,IAAA2I,OAAA,EAApBA,EAAsB1I,YAAW,EAEnCrY,SAEDA,KACC,MAAM2Q,EAAUnP,GAAKyD,cAAc,CACjC,kBACA,gBAEF,OACE6E,EAAAA,GAAAA,MAACiB,EAAAA,EAAG,CACFkI,OAAQhU,GAAM+hB,SACdjiB,MAAO,CACLyS,QAASb,EAAU,YAAS7Q,EAC5Bwd,UAAWre,GAAM+hB,UACjBhhB,SAAA,EAEFX,EAAAA,GAAAA,KAAC4L,EAAAA,EAAG,CAACgW,GAAI,GAAIC,GAAI,GAAGlhB,UAClBX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR/C,MAAO,CAAEiP,KAAM,GACfnK,MAAOJ,GAAE,qCACT5B,KAAM,CAAC,kBAAmB,mBAC1BiC,SACEgG,EAAAA,GAAAA,MAAAC,GAAAA,SAAA,CAAA/J,SAAA,CACGyD,GAAE,wCACHpE,EAAAA,GAAAA,KAAC0E,GAAAA,GAAK,CACJC,QACE,+CAKR4N,UAAQ,EAAA5R,UAERX,EAAAA,GAAAA,KAACsgB,EAAAA,EAAW,CACV1Q,IAAK,EACLC,IAAK,IACLsK,KAAM,EACN2H,YAAU,EACVpiB,MAAO,CAAEyG,MAAO,eAItBnG,EAAAA,GAAAA,KAAC4L,EAAAA,EAAG,CAACgW,GAAI,GAAIC,GAAI,GAAGlhB,UAClBX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR/C,MAAO,CAAEiP,KAAM,GACfnK,MAAOJ,GAAE,uCACT5B,KAAM,CAAC,kBAAmB,wBAC1BiC,SACEgG,EAAAA,GAAAA,MAAAC,GAAAA,SAAA,CAAA/J,SAAA,CACGyD,GAAE,wCACHpE,EAAAA,GAAAA,KAAC0E,GAAAA,GAAK,CACJC,QACE,+CAKR4N,UAAQ,EAAA5R,UAERX,EAAAA,GAAAA,KAACsgB,EAAAA,EAAW,CACV1Q,IAAK,EACLC,IAAK,IACLsK,KAAM,EACN2H,YAAU,EACVpiB,MAAO,CAAEyG,MAAO,gBAIlB,QAMdnG,EAAAA,GAAAA,KAACY,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,2BACT1E,MAAO,CACLyS,QAA4B,YAAnByK,GAA+B,QAAU,QAClDjc,UAEFX,EAAAA,GAAAA,KAAC+hB,EAAAA,EAAoB,CACnBpK,OAASqK,IAAa,IAADC,EACnB,MACqB,UAAnBD,EAAQ1iB,UACK,QAAb2iB,EAACD,EAAQxf,YAAI,IAAAyf,GAAZA,EAAcC,WAAW,KAAI,OAQtCliB,EAAAA,GAAAA,KAACY,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,4BACT1E,MAAO,CACLyS,QAA4B,YAAnByK,GAA+B,QAAU,QAClDjc,UAEFX,EAAAA,GAAAA,KAACmiB,EAAAA,GAAkB,MAID,WAAnBvF,KACC5c,EAAAA,GAAAA,KAACoiB,EAAAA,EAAsB,CACrB1Y,gBAAkB2Y,IAChB,MAAMpG,EAAWnb,KAAAA,UAAY6F,GAAO,CAAEwG,IAAKkV,IAC3CrG,GAAeC,EAAS,KAK9BxR,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CAACC,UAAU,MAAM0R,QAAQ,UAASnd,SAAA,EACrCX,EAAAA,GAAAA,KAACmM,EAAAA,EAAI,CAACwB,IAAK,KAAKhN,UACdX,EAAAA,GAAAA,KAACsiB,EAAAA,EAAU,CACT1b,MAAOxC,GAAE,gBACTyC,YAAazC,GAAE,qCACfme,UAAWA,KACT9H,GAAS,CAAC,EAAG,WACb+C,IAAgB,EAAK,EAEvBrd,MACEH,EAAAA,GAAAA,KAACwiB,EAAAA,EAAsB,CACrB9iB,MAAO,CAAEwD,MAAOtD,GAAMU,cAG1BgV,OAAQlR,GAAE,gBACViR,cAAe,CACboN,QAAQ,GACR9hB,UAEFX,EAAAA,GAAAA,KAACC,EAAAA,GAAM,CACLwiB,QAAM,EACNviB,KAAK,OACLR,MAAO,CAAEwe,aAAc,EAAGC,YAAa,GAAIxd,SAE1CyD,GAAE,uBAiBTqG,EAAAA,GAAAA,MAAC0B,EAAAA,EAAI,CACH,eAAa,4CACbC,UAAU,MACVuB,IAAI,KAAIhN,SAAA,CAEPyZ,GAAc,IACbpa,EAAAA,GAAAA,KAACC,EAAAA,GAAM,CACLS,QAASA,KACPsb,GAAe5B,GAAc,EAAE,EAEjCja,MAAMH,EAAAA,GAAAA,KAAC0iB,EAAAA,EAAY,IACnB/O,SAAU+E,GAAkB/X,SAE3ByD,GAAE,qBAGNgW,KAAgBzT,GAAM5C,OAAS,GAC9B/D,EAAAA,GAAAA,KAAC2iB,EAAAA,EAAO,CACN/b,MACEiW,GACIzY,GAAE,4CACF3D,EACLE,UAEDX,EAAAA,GAAAA,KAACC,EAAAA,GAAM,CACLC,KAAK,UACLC,MAAMH,EAAAA,GAAAA,KAAC4iB,EAAAA,EAAkB,IACzBjP,SAAUkJ,GACVnc,QAxiCHmiB,KAEnBlK,IAAqB,GACrB,MAAMmK,EAAmBlI,GACzBzY,GACGyQ,iBACAC,MAAK+M,UAAmB,IAADmD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACtB,GAAItiB,KAAAA,QAAUmD,EAAOof,SAAoC,IAAzBpf,EAAOof,OAAOtf,OAAc,CAyB1D,UAxB0B,IAAIkB,SAASC,IACrC8S,EAAIsL,MAAMC,QAAQ,CAChB3c,MAAOxC,GAAE,oCACTof,SACE/Y,EAAAA,GAAAA,MAAAC,GAAAA,SAAA,CAAA/J,SAAA,CACGyD,GAAE,iDACHpE,EAAAA,GAAAA,KAAA,UACAA,EAAAA,GAAAA,KAAA,SACCoE,GAAE,8CACHpE,EAAAA,GAAAA,KAAA,UACAA,EAAAA,GAAAA,KAAA,SACCoE,GAAE,oCAGPmR,KAAMA,KACJrQ,GAAQ,EAAK,EAEfoQ,OAAQlR,GAAE,0BACVwR,SAAUA,KACR1Q,GAAQ,EAAM,EAEhBW,UAAU,GACV,IAEc,MACpB,CAGA,MAAM4d,EACJxf,EAAOoS,aAAarK,QAAU/H,EAAOoS,aAAatK,QACpD,IAAK2X,EAAY9W,GAAgB6W,EAC7BA,EAAclgB,MAAM,KACpB,CAAC,GAAI,IAET,MAAM+S,EAAcxV,KAAAA,QAAUmD,EAAOqS,aACjCqN,KACA1f,EAAOqS,YAELsN,EAAiC,CACrCF,aACA9W,eACA0J,YAAaA,KACTxM,IACE,OAAN7F,QAAM,IAANA,GAAa,QAAP8e,EAAN9e,EAAQkV,aAAK,IAAA4J,GAAbA,EAAezJ,iBACdxY,KAAAA,YAAoB,OAANmD,QAAM,IAANA,GAAa,QAAP+e,EAAN/e,EAAQkV,aAAK,IAAA6J,OAAP,EAANA,EAAezJ,SAC1B,CACEsK,aACE/iB,KAAAA,SAAWmD,EAAOkV,MAAMI,UAAiB,OAANtV,QAAM,IAANA,GAAa,QAAPgf,EAANhf,EAAQkV,aAAK,IAAA8J,OAAP,EAANA,EAAezJ,mBAEtD/Y,EACJqjB,OAAQ,KACFxf,GAAUyF,SAAS,iBACb,OAATzF,SAAS,IAATA,IAAkB,QAAT4e,EAAT5e,GAAWS,eAAO,IAAAme,GAAlBA,EAAoBpU,YACJ,SAAjB7K,EAAO8f,WAMHtjB,EALA,CACEujB,WAAY,CAAC/f,EAAO8f,OAAOpM,QACxBoM,KAA6BA,KAItC7jB,KAAM+D,EAAO0F,eACT7I,KAAAA,QAAUmD,EAAOggB,kBACjB,CAAC,EACD,CACEA,iBAAkBhgB,EAAOggB,qBAEJ,UAAvBhgB,EAAO0F,YACP,CACEua,SAAUjgB,EAAOkV,MAAM7H,QACnBrN,EAAOkV,MAAME,kBACb5Y,EACJ0jB,eAAgBlgB,EAAOkV,MAAMC,SAE/B,CAAC,KAGW,QAAZ+J,EAAAlf,EAAOwN,aAAK,IAAA0R,GAAZA,EAAc7R,QACd,CACE8S,WAAYngB,EAAOwN,MAAMwB,QACzBoR,OAAQpgB,EAAOwN,MAAM6S,WACrBC,cAAetgB,EAAOwN,MAAMwB,QAC5BuR,iBAAkBvgB,EAAOwN,MAAMuB,WAEjC,CACEoR,WAAYna,GAAezH,KAC3B6hB,OAAQ/f,GAAUS,QAAQuf,WAC1BC,cAAetgB,EAAOiP,eAE5BuR,aAAcxgB,EAAOwgB,aACrBC,aAAczgB,EAAOygB,aACrBC,eAAgB,GAChBC,IAAK3gB,EAAO4K,SAAS+V,IACrBC,IAAK5gB,EAAO4K,SAASgW,IACrBC,OACEC,EAAAA,EAAAA,IAAuB9gB,EAAO4K,SAASgW,IAAK,MAAQ,IACpDE,EAAAA,EAAAA,IAAuB9gB,EAAO4K,SAASiW,MAAO,MAAQ,EAClD,KACA7gB,EAAO4K,SAASiW,SAClB7gB,EAAO4K,SAASmW,YAAc,EAC9B,CACE,CAAC/gB,EAAO4K,SAASoW,iBACfhhB,EAAO4K,SAASmW,kBAEpBvkB,EACJ4iB,OAAQpf,EAAOof,OACf6B,UAAWjhB,EAAOkhB,iBAElBC,IAAK,IACAtkB,KAAAA,UAAYmD,EAAOwV,QAAQ/V,KAAKC,GAAM,CAACA,EAAEwK,SAAUxK,EAAExC,aAErDL,KAAAA,KAAOmD,EAAO8U,gBAAiB,gBAEpCsM,eAAerhB,EAAAA,EAAAA,IAA6BC,EAAOqhB,WAC/ChhB,GAAUyF,SAAS,iBACb,OAATzF,SAAS,IAATA,IAAkB,QAAT8e,EAAT9e,GAAWS,eAAO,IAAAqe,GAAlBA,EAAoBtU,YACJ,SAAjB7K,EAAO8f,WAMHtjB,EALA,CACEujB,WAAY,CAAC/f,EAAO8f,OAAOpM,QACxBoM,KAA6BA,OAMpCwB,EAAkBzkB,KAAAA,IACtBA,KAAAA,MAAQmD,EAAOuhB,iBAAmB,IACjCC,IACC,MAAMC,GACHzhB,EAAOuhB,iBAAmB,GAAK,EAC5B,GAAG5B,EAAYtN,gBAAegB,EAAAA,EAAAA,SAA0BmO,IACxD7B,EAAYtN,YAClB,OAAOhS,GACJqhB,kBACC/B,EAAYF,WACZgC,EACA9B,EAAYE,OACZ,IACAF,EAAYhX,aACZgX,EAAYC,cAEbhR,MAAM+S,IAIL,GAAQ,OAAHA,QAAG,IAAHA,IAAAA,EAAKC,QAER,MAAM,IAAIzgB,MAAMhB,GAAE,0CAEpB,GAAoB,eAAb,OAAHwhB,QAAG,IAAHA,OAAG,EAAHA,EAAKtmB,QAEP,MAAM,IAAI8F,MACRhB,GAAE,6CAGN,OAAOwhB,CAAG,IAEX9S,OAAOgT,IAAc,IAADC,EACnB,MAAO,OAAHD,QAAG,IAAHA,GAAY,QAATC,EAAHD,EAAKrX,eAAO,IAAAsX,GAAZA,EAAcC,SAAS,8BACnB,IAAI5gB,MAAMhB,GAAE,0CAEZ0hB,CACR,GACA,IAIRtN,GAA8BvU,EAAOiP,eACrC,MAAM+S,EAAWC,OAAOC,SAASC,SAAWF,OAAOC,SAASvL,OAC5DE,GAAcR,IAAc,QAC5Bc,GAAmB,CACjBjO,IAAK,oBAAsBmJ,EAC3B+P,eAAgB,CACdC,QAASrhB,QAAQshB,IAAIhB,GACrBjmB,OAAQ,UACRknB,mBAAoB,CAClBC,QAASriB,GAAE,4BACXsiB,SAAUtiB,GAAE,mCAGhBuiB,SAAU,EACVlY,QAASrK,GAAE,mBAAqB,KAAOkS,EACvCjQ,MAAM,UAEFpB,QAAQshB,IAAIhB,GACf1S,MACCxT,IAKQ,IALNunB,GAKAvnB,EAWA,GATA+b,GAAmB,CACjBjO,IAAK,oBAAsBmJ,EAC3BuQ,GAAI,0BAA0BD,EAAaE,cAE7CxL,GAAmB,CACjB7F,GAAImR,EAAaE,UACjBhS,OAAQgO,EACRtgB,KAAMokB,EAAatQ,cAGQ,IAA3BrS,EAAOuhB,iBACgB,UAAvBvhB,EAAO0F,YACP,CACA,MAAMic,EAAMgB,EACZ,IAAIG,EAAwBjmB,KAAAA,UAC1B0Z,IAIAuM,EAFE,aAAcnB,EAEH9kB,KAAAA,OAASimB,EAAY,CAChC,eAAgBnB,EAAIoB,SACpB,aAAc,GACdvhB,KAAM0S,IAKKrX,KAAAA,OAASimB,EAAY,CAChC,eAAgBnB,EAAIkB,UACpB,eAAgBlB,EAAItP,YACpB,aAAc,GACd7Q,KAAM0S,IAIV,MAAM8O,EAAerB,EAAIsB,cACW,IAAhCC,MAAMC,QAAQH,GAChBF,EAAW,gBAAkBE,EAAavjB,KACvC2jB,GAAwBA,EAAE7kB,OAG7BukB,EAAW,gBAAkB,GAc3BE,EAAaljB,OAAS,GAExBujB,WAAWC,YAAYC,aAAaT,EAExC,KAGHjU,OAAM,KACLsI,GAAmB,CACjBjO,IAAK,oBAAsBmJ,EAC3BuQ,GAAIZ,EACJwB,OAAQrjB,GAAE,gBACV,GAuBF,IAEL0O,OAAO9M,IACN6a,QAAQC,IAAI,oBAAqB9a,EAAE,IAEpCoX,SAAQ,KACPzE,IAAqB,EAAM,GAC3B,EAgwBkBxF,QAASuF,GAAkB/X,SAE1ByD,GAAE,gCAIPqG,EAAAA,GAAAA,MAACxK,EAAAA,GAAM,CACLC,KAAK,UACLwnB,OAAK,EACLhnB,QAASA,KACPsb,GAAe5B,GAAc,EAAE,EAC/BzZ,SAAA,CAEDyD,GAAE,eAAe,KAACpE,EAAAA,GAAAA,KAAC2nB,EAAAA,EAAa,OAGpCvN,KAAgBzT,GAAM5C,OAAS,IAC9B0G,EAAAA,GAAAA,MAACxK,EAAAA,GAAM,CACLS,QAASA,KACPsb,GAAerV,GAAM5C,OAAS,EAAE,EAChCpD,SAAA,CAEDyD,GAAE,4CACHpE,EAAAA,GAAAA,KAAC4nB,EAAAA,EAAmB,uBAUnC1L,GAAQ2L,KACP7nB,EAAAA,GAAAA,KAACmM,EAAAA,EAAI,CACH,eAAa,iCACbzM,MAAO,CAAEooB,SAAU,SAAUC,IAAK,IAAKpnB,UAEvCX,EAAAA,GAAAA,KAACgoB,EAAAA,EAAK,CACJpd,KAAK,QACLwB,UAAU,WACVoQ,QAASpC,GACThZ,SAAW6mB,IACTjM,GAAeiM,EAAY,EAE7BC,MAAOpnB,KAAAA,IAAM6F,IAAO,CAACwhB,EAAG1c,KAAG,IACtB0c,EACH7oB,OAAQmM,IAAQ2O,GAAc,UAAY,mBAMpDpa,EAAAA,GAAAA,KAACooB,EAAAA,EAAoB,CACnB1S,eAAiB2S,IACf,GAAIA,EAAW,CACb,MAAMC,EAAcxnB,KAAAA,MAClB,CAEEwV,YAAa,GACbgP,MAAO,GACPjC,OAAQ,GACR8B,iBAAkB,CAAC,EACnBlB,iBAAkB,GAClBuB,gBAAiB,EACjB/T,MAAO,CACLH,SAAS,EACT0B,UAAW,GACXsR,WAAY,GACZtT,WAAOvQ,EACPwS,QAAS,GACTC,cAAe,IAEjBmD,aAAc,CACZrK,OAAQ,IAEVmN,MAAO,CACL7H,SAAS,EACT8H,aAAS3Y,EACT4Y,kBAAc5Y,GAEhBsjB,MAAO,QAKTsE,GAGGvnB,KAAAA,QAAUwnB,EAAYhS,eACzBgS,EAAYhS,YACVgS,EAAYhS,YAAc,KAAMgB,EAAAA,EAAAA,IAAqB,IAEzDnV,GAAK4Q,eAAeuV,GACpBtM,GAAerV,GAAM5C,OAAS,GAC9B5B,GAAKyQ,iBAAiBE,OAAM,QAC9B,CACAoI,IAA2B,EAE7B7U,KAAM2U,KAEPZ,KAAgBzT,GAAM5C,OAAS,GAC9B/D,EAAAA,GAAAA,KAAC2gB,GAAAA,GAAa,CAAC1M,SAAU,KAAKtT,UAC5BX,EAAAA,GAAAA,KAACuoB,EAAAA,EAA6B,CAC5BliB,KAAMiX,GACNxX,QAASA,KACPuX,IAAsB,EAAM,EAE9BmL,uBAAqB,WAGvB/nB,IACC,EASEmO,GAA6D9L,IAGnE,IAHoE,SACzE+L,EAAQ,eACRE,EAAiB,GAClBjM,EACC,OACE2H,EAAAA,GAAAA,MAAAC,GAAAA,SAAA,CAAA/J,SAAA,CACGG,KAAAA,IACCA,KAAAA,KAAO+N,EAAU,QAAS,cAAe,oBACzC,CAAC1N,EAAOjB,KAAU,IAADuoB,EAAAC,EACf,MAAiB,MAAVvnB,EAAgB,MACrBnB,EAAAA,GAAAA,KAAC2oB,EAAAA,EAAc,CAGbzoB,KAAMA,EACNiB,MACW,QAATjB,IACiD,QAA5CuoB,GAAAG,EAAAA,EAAAA,IAAsBznB,EAAM0C,WAAY,YAAI,IAAA4kB,OAAA,EAA5CA,EAA8CI,SAC7C,GACA9Z,EACF,GACAjO,KAAAA,SAAWK,GAAS4N,EAAiB,GAE3C+Z,KAAM,CACJhE,MAAOjW,EAASiW,QAC+B,QAA1C4D,GAAAE,EAAAA,EAAAA,IAAsB/Z,EAASiW,MAAO,YAAI,IAAA4D,OAAA,EAA1CA,EAA4CG,SAAU,GACvD9Z,OACAtO,IAfDP,EAkBR,IAGJ2O,GACDA,EAASmW,aACTnW,EAASoW,iBACTnkB,KAAAA,SAAW+N,EAASmW,cAClBhlB,EAAAA,GAAAA,KAAC2oB,EAAAA,EACC,CACAzoB,KAAM2O,EAASoW,gBACf9jB,MAAOL,KAAAA,SAAW+N,EAASmW,YAAcjW,KAEzC,OACH,EAID4U,GAAoBA,KACxB,IAAIlX,EAAO,GACX,MAAMsc,EACJ,iEACF,IAAK,IAAItD,EAAI,EAAGA,EAAI,EAAGA,IACrBhZ,GAAQsc,EAASC,OAAOC,KAAKC,MAAsBH,GAAhBE,KAAKE,WAE1C,OAAO1c,EAAO,UAAU,EAG1B,M","sources":["components/BAICard.tsx","components/DatePickerISO.tsx","components/HiddenFormItem.tsx","components/PortSelectFormItem.tsx","components/SessionLauncherErrorTourProps.tsx","components/SessionLauncherPreview.tsx","components/SessionNameFormItem.tsx","components/SessionOwnerSetterCard.tsx","components/SessionTemplateModal.tsx","components/__generated__/SessionOwnerSetterCardQuery.graphql.ts","hooks/useRecentSessionHistory.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\nexport interface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n  ref?: React.LegacyRef<HTMLDivElement> | undefined;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      className={status === 'error' ? 'bai-card-error' : ''}\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n              ? token.colorWarning\n              : status === 'success'\n                ? token.colorSuccess\n                : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport { GetRef } from 'antd/lib';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO = React.forwardRef<\n  GetRef<typeof DatePicker>,\n  DatePickerISOProps\n>(({ value, onChange, localFormat, ...pickerProps }, ref) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      ref={ref}\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n});\n\nexport default DatePickerISO;\n","import { Form, FormItemProps } from 'antd';\nimport React, { useEffect } from 'react';\n\ninterface HiddenFormItemProps extends Omit<FormItemProps, 'children'> {\n  value: any;\n}\nconst HiddenFormItem: React.FC<HiddenFormItemProps> = ({ value, ...props }) => {\n  const form = Form.useFormInstance();\n  useEffect(() => {\n    form.setFieldValue(props.name, value);\n  }, [value, form, props.name]);\n  return <Form.Item {...props} hidden />;\n};\n\nexport default HiddenFormItem;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({\n  name = 'ports',\n  ...formItemProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const form = Form.useFormInstance();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name={name}\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        () => ({\n          validator(rule, values) {\n            if (\n              transformPortValuesToNumbers(values).length <=\n              baiClient._config.maxCountForPreopenPorts\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(\n                  t('session.launcher.PreOpenPortMaxCountLimit', {\n                    count: baiClient._config.maxCountForPreopenPorts,\n                  }),\n                ),\n              );\n            }\n          },\n        }),\n        () => ({\n          // To check if the port range is not start <= end\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                return parseInt(v).toString() === v || isPortRangeStr(v);\n              })\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(t('session.launcher.InvalidPortFormat')),\n              );\n            }\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            const allPorts = transformPortValuesToNumbers(values);\n            if (\n              _.every(allPorts, (port) => {\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            // To check if the port is duplicated\n            const allPorts = transformPortValuesToNumbers(values);\n            if (_.uniq(allPorts).length === allPorts.length) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.DuplicatedPort')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          const hasDuplicated =\n            _.filter(\n              transformPortValuesToNumbers(form.getFieldValue(name)),\n              (v) => v === parseInt(props.value),\n            ).length > 1;\n          return (\n            <PortTag\n              inValid={hasDuplicated}\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.PreOpen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n  inValid?: boolean;\n}\n\nexport const PortTag: React.FC<PortTagProps> = ({\n  inValid,\n  value,\n  ...tagProps\n}) => {\n  return (\n    <Tag\n      color={!inValid && isValidPortStr(value) ? undefined : 'red'}\n      {...tagProps}\n    />\n  );\n};\n\nexport const isValidPortStr = (portStr: string) => {\n  // consider range as valid\n  if (isPortRangeStr(portStr)) {\n    const splitPortRange = portStr.split(':');\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start >= MIN_PORT && end <= MAX_PORT;\n  } else if (\n    portStr === parseInt(portStr).toString() &&\n    parseInt(portStr) >= MIN_PORT &&\n    parseInt(portStr) <= MAX_PORT\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const isPortRangeStr = (portRange: string) => {\n  const splitPortRange = portRange.split(':');\n  if (splitPortRange.length === 2) {\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start <= end;\n  }\n  return false;\n};\n\nexport const parsePortRangeToNumbers = (portRange: string) => {\n  const [start, end] = portRange.split(':').map((v) => parseInt(v));\n  return _.range(start, end + 1);\n};\n\nexport const transformPortValuesToNumbers = (\n  values: PortSelectFormValues['ports'],\n) => {\n  return _.flatten(\n    _.map(values, (v) =>\n      isPortRangeStr(v) ? parsePortRangeToNumbers(v) : parseInt(v),\n    ),\n  );\n};\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useBAISettingUserState } from '../hooks/useBAISetting';\nimport { Tour, TourProps } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionLauncherValidationTourProps extends Omit<TourProps, 'steps'> {}\nconst SessionLauncherValidationTour: React.FC<\n  SessionLauncherValidationTourProps\n> = ({ open, onClose, ...otherProps }) => {\n  const { t } = useTranslation();\n  const [hasOpenedValidationTour, setHasOpenedValidationTour] =\n    useBAISettingUserState('has_opened_tour_neo_session_validation');\n\n  const steps = [\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.ValidationErrorText'),\n      target: () =>\n        document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t(\n        'tourGuide.neoSessionLauncher.FixErrorFieldByModifyButton',\n      ),\n      target: () =>\n        (\n          document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement\n        )?.querySelector('.ant-card-extra') as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.FixErrorAndTryAgainText'),\n      target: () =>\n        document.querySelector(\n          '[data-test-id=\"neo-session-launcher-tour-step-navigation\"]',\n        ) as HTMLElement,\n    },\n  ];\n  return (\n    <Tour\n      steps={steps}\n      onClose={(e) => {\n        onClose?.(e);\n        setHasOpenedValidationTour(true);\n      }}\n      open={!hasOpenedValidationTour && open}\n      {...otherProps}\n    />\n  );\n};\n\nexport default SessionLauncherValidationTour;\n","import { preserveDotStartCase, getImageFullName } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport {\n  SessionLauncherFormValue,\n  ResourceNumbersOfSession,\n  SessionLauncherStepKey,\n} from '../pages/SessionLauncherPage';\nimport BAICard from './BAICard';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { ImageTags } from './ImageTags';\nimport { PortTag } from './PortSelectFormItem';\nimport { SessionOwnerSetterPreviewCard } from './SessionOwnerSetterCard';\nimport SourceCodeViewer from './SourceCodeViewer';\nimport {\n  Descriptions,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  Tag,\n  Alert,\n  Card,\n  Table,\n  Form,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst SessionLauncherPreview: React.FC<{\n  onClickEditStep: (stepKey: SessionLauncherStepKey) => void;\n}> = ({ onClickEditStep }) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance<SessionLauncherFormValue>();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  const sessionType = Form.useWatch('sessionType', { form, preserve: true });\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n  const supportExtendedImageInfo =\n    baiClient?.supports('extended-image-info') ?? false;\n  const currentProject = useCurrentProjectValue();\n  const [, { getBaseVersion, getBaseImage, tagAlias }] =\n    useBackendAIImageMetaData();\n  const { isDarkMode } = useThemeMode();\n\n  return (\n    <>\n      <BAICard\n        title={t('session.launcher.SessionType')}\n        size=\"small\"\n        status={\n          form.getFieldError('sessionName').length > 0 ||\n          form.getFieldError(['batch', 'command']).length > 0 ||\n          form.getFieldError(['batch', 'scheduleDate']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.SessionType')}>\n            {form.getFieldValue('sessionType')}\n          </Descriptions.Item>\n          {!_.isEmpty(form.getFieldValue('sessionName')) && (\n            <Descriptions.Item label={t('session.launcher.SessionName')}>\n              {form.getFieldValue('sessionName')}\n            </Descriptions.Item>\n          )}\n          {sessionType === 'batch' && (\n            <>\n              <Descriptions.Item\n                label={t('session.launcher.StartUpCommand')}\n                labelStyle={{ whiteSpace: 'nowrap' }}\n                contentStyle={{\n                  overflow: 'auto',\n                }}\n              >\n                {form.getFieldValue(['batch', 'command']) ? (\n                  <SourceCodeViewer language=\"shell\">\n                    {form.getFieldValue(['batch', 'command'])}\n                  </SourceCodeViewer>\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('session.launcher.SessionStartTime')}>\n                {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                  dayjs(form.getFieldValue(['batch', 'scheduleDate'])).format(\n                    'LLL (Z)',\n                  )\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              {supportBatchTimeout ? (\n                <Descriptions.Item\n                  label={t('session.launcher.BatchJobTimeoutDuration')}\n                >\n                  {form.getFieldValue(['batch', 'timeout']) ? (\n                    <Typography.Text>\n                      {form.getFieldValue(['batch', 'timeout'])}\n                      {form.getFieldValue(['batch', 'timeoutUnit']) || 's'}\n                    </Typography.Text>\n                  ) : (\n                    <Typography.Text type=\"secondary\">\n                      {t('general.None')}\n                    </Typography.Text>\n                  )}\n                </Descriptions.Item>\n              ) : null}\n            </>\n          )}\n        </Descriptions>\n      </BAICard>\n      <SessionOwnerSetterPreviewCard\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      />\n      <BAICard\n        title={t('session.launcher.Environments')}\n        size=\"small\"\n        status={\n          _.some(\n            form.getFieldValue(\n              'envvars',\n            ) as SessionLauncherFormValue['envvars'],\n            (v, idx) => {\n              return (\n                form.getFieldError(['envvars', idx, 'variable']).length > 0 ||\n                form.getFieldError(['envvars', idx, 'value']).length > 0\n              );\n            },\n          )\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.Project')}>\n            {currentProject.name}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('general.Image')}>\n            {supportExtendedImageInfo ? (\n              <Row style={{ flexFlow: 'nowrap' }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                    style={{ marginRight: token.marginXS }}\n                  />\n                </Col>\n                <Col>\n                  <Flex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            form.getFieldValue('environments')?.image\n                              ?.base_image_name,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {form.getFieldValue('environments')?.image?.version}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                        {_.map(\n                          form.getFieldValue('environments')?.image?.tags,\n                          (tag: { key: string; value: string }) => {\n                            const isCustomized = _.includes(\n                              tag.key,\n                              'customized_',\n                            );\n                            const tagValue = isCustomized\n                              ? _.find(\n                                  form.getFieldValue('environments')?.image\n                                    ?.labels,\n                                  {\n                                    key: 'ai.backend.customized-image.name',\n                                  },\n                                )?.value\n                              : tag.value;\n                            const aliasedTag = tagAlias(tag.key + tagValue);\n                            return _.isEqual(\n                              aliasedTag,\n                              preserveDotStartCase(tag.key + tagValue),\n                            ) ? (\n                              <DoubleTag\n                                key={tag.key}\n                                values={[\n                                  {\n                                    label: tagAlias(tag.key),\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                  {\n                                    label: tagValue,\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                ]}\n                              />\n                            ) : (\n                              <Tag\n                                key={tag.key}\n                                color={isCustomized ? 'cyan' : 'blue'}\n                              >\n                                {aliasedTag}\n                              </Tag>\n                            );\n                          },\n                        )}\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </Flex>\n                </Col>\n              </Row>\n            ) : (\n              <Row style={{ flexFlow: 'nowrap', gap: token.sizeXS }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                  />\n                </Col>\n                <Col>\n                  {/* {form.getFieldValue('environments').image} */}\n                  <Flex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            getBaseImage(\n                              form.getFieldValue('environments')?.version,\n                            ),\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {getBaseVersion(\n                            form.getFieldValue('environments')?.version,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <ImageTags\n                          tag={form.getFieldValue([\n                            'environments',\n                            'image',\n                            'tag',\n                          ])}\n                          labels={\n                            form.getFieldValue('environments')?.image\n                              ?.labels as Array<{\n                              key: string;\n                              value: string;\n                            }>\n                          }\n                        />\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </Flex>\n                </Col>\n              </Row>\n            )}\n          </Descriptions.Item>\n          {form.getFieldValue('envvars')?.length > 0 && (\n            <Descriptions.Item\n              label={t('session.launcher.EnvironmentVariable')}\n            >\n              {form.getFieldValue('envvars')?.length ? (\n                <SyntaxHighlighter\n                  style={isDarkMode ? dark : undefined}\n                  codeTagProps={{\n                    style: {\n                      // fontFamily: 'monospace',\n                    },\n                  }}\n                  // showLineNumbers\n                  customStyle={{\n                    margin: 0,\n                    width: '100%',\n                  }}\n                >\n                  {_.map(\n                    form.getFieldValue('envvars'),\n                    (v: { variable: string; value: string }) =>\n                      `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                  ).join('\\n')}\n                </SyntaxHighlighter>\n              ) : (\n                <Typography.Text type=\"secondary\">-</Typography.Text>\n              )}\n            </Descriptions.Item>\n          )}\n        </Descriptions>\n      </BAICard>\n      <BAICard\n        title={t('session.launcher.ResourceAllocation')}\n        status={\n          _.some(form.getFieldValue('resource'), (v, key) => {\n            return (\n              // @ts-ignore\n              form.getFieldError(['resource', key]).length > 0\n            );\n          }) ||\n          form.getFieldError(['num_of_sessions']).length > 0 ||\n          form.getFieldError('resourceGroup').length > 0\n            ? 'error'\n            : // : _.some(form.getFieldValue('resource'), (v, key) => {\n              //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n              //     // console.log(form.getFieldValue(['resource']));\n              //     return (\n              //       form.getFieldWarning(['resource', key]).length >\n              //       0\n              //     );\n              //   })\n              // ? 'warning'\n              undefined\n        }\n        size=\"small\"\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {_.some(\n            form.getFieldValue('resource'),\n            (v, key: keyof SessionLauncherFormValue['resource']) => {\n              return (\n                // @ts-ignore\n                form.getFieldWarning(['resource', key]).length > 0\n              );\n            },\n          ) && (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.EnqueueComputeSessionWarning')}\n            />\n          )}\n\n          <Descriptions column={2}>\n            <Descriptions.Item label={t('general.ResourceGroup')} span={2}>\n              {form.getFieldValue('resourceGroup') || (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              )}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={t('session.launcher.ResourceAllocationPerContainer')}\n              span={2}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"start\"\n                gap={'sm'}\n                wrap=\"wrap\"\n                style={{ flex: 1 }}\n              >\n                {form.getFieldValue('allocationPreset') === 'custom' ? (\n                  // t('session.launcher.CustomAllocation')\n                  ''\n                ) : (\n                  <Tag>{form.getFieldValue('allocationPreset')}</Tag>\n                )}\n\n                <ResourceNumbersOfSession\n                  resource={form.getFieldValue('resource')}\n                />\n                {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n              </Flex>\n            </Descriptions.Item>\n            {baiClient.supports('agent-select') &&\n              !baiClient?._config?.hideAgents && (\n                <Descriptions.Item label={t('session.launcher.AgentNode')}>\n                  {form.getFieldValue('agent') ||\n                    t('session.launcher.AutoSelect')}\n                </Descriptions.Item>\n              )}\n            <Descriptions.Item label={t('session.launcher.NumberOfContainer')}>\n              {form.getFieldValue('cluster_size') === 1\n                ? form.getFieldValue('num_of_sessions')\n                : form.getFieldValue('cluster_size')}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('session.launcher.ClusterMode')}>\n              {form.getFieldValue('cluster_mode') === 'single-node'\n                ? t('session.launcher.SingleNode')\n                : t('session.launcher.MultiNode')}\n            </Descriptions.Item>\n          </Descriptions>\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={t('session.launcher.TotalAllocation')}\n          >\n            <Flex direction=\"row\" gap=\"xxs\">\n              <ResourceNumbersOfSession\n                resource={form.getFieldValue('resource')}\n                containerCount={\n                  form.getFieldValue('cluster_size') === 1\n                    ? form.getFieldValue('num_of_sessions')\n                    : form.getFieldValue('cluster_size')\n                }\n              />\n            </Flex>\n          </Card>\n        </Flex>\n      </BAICard>\n      <BAICard\n        title={t('webui.menu.Data&Storage')}\n        size=\"small\"\n        status={\n          form.getFieldError('vfoldersAliasMap').length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('storage');\n        }}\n      >\n        {/* {console.log(_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames')]))} */}\n        {/* {_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames').length]) > 0 ? ( */}\n        <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n          {form.getFieldValue('mounts')?.length > 0 ? (\n            <Table\n              rowKey=\"name\"\n              size=\"small\"\n              pagination={false}\n              columns={[\n                {\n                  dataIndex: 'name',\n                  title: t('data.folders.Name'),\n                },\n                {\n                  dataIndex: 'alias',\n                  title: t('session.launcher.FolderAlias'),\n                  render: (value, record) => {\n                    return _.isEmpty(value) ? (\n                      <Typography.Text\n                        type=\"secondary\"\n                        style={{\n                          opacity: 0.7,\n                        }}\n                      >\n                        {`/home/work/${record.name}`}\n                      </Typography.Text>\n                    ) : (\n                      value\n                    );\n                  },\n                },\n              ]}\n              dataSource={_.map(form.getFieldValue('mounts'), (v) => {\n                return {\n                  name: v,\n                  alias: form.getFieldValue('vfoldersAliasMap')?.[v],\n                };\n              })}\n            ></Table>\n          ) : (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.NoFolderMounted')}\n            />\n          )}\n          {form.getFieldValue('autoMountedFolderNames')?.length > 0 ? (\n            <Descriptions size=\"small\">\n              <Descriptions.Item label={t('data.AutomountFolders')}>\n                {_.map(form.getFieldValue('autoMountedFolderNames'), (name) => {\n                  return <Tag>{name}</Tag>;\n                })}\n              </Descriptions.Item>\n            </Descriptions>\n          ) : null}\n        </Flex>\n      </BAICard>\n      <BAICard\n        title=\"Network\"\n        size=\"small\"\n        status={form.getFieldError('ports').length > 0 ? 'error' : undefined}\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('network');\n        }}\n      >\n        <Descriptions size=\"small\">\n          <Descriptions.Item label={t('session.launcher.PreOpenPortTitle')}>\n            <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }} wrap=\"wrap\">\n              {/* {form.getFieldValue('environments').image} */}\n              {_.sortBy(form.getFieldValue('ports'), (v) => parseInt(v)).map(\n                (v) => (\n                  <PortTag value={v} style={{ margin: 0 }}>\n                    {v}\n                  </PortTag>\n                ),\n              )}\n\n              {!_.isArray(form.getFieldValue('ports')) ||\n              form.getFieldValue('ports')?.length === 0 ? (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              ) : null}\n            </Flex>\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    </>\n  );\n};\n\nexport default SessionLauncherPreview;\n","import { Form, FormItemProps, Input } from 'antd';\nimport { TFunction } from 'i18next';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\n\nexport const getSessionNameRules = (t: TFunction): FormItemProps['rules'] => [\n  {\n    min: 4,\n    message: t('session.validation.SessionNameTooShort'),\n  },\n  {\n    max: 64,\n    message: t('session.validation.SessionNameTooLong64'),\n  },\n  {\n    validator(f, value) {\n      if (_.isEmpty(value)) {\n        return Promise.resolve();\n      }\n      if (!/^\\w/.test(value)) {\n        return Promise.reject(\n          t('session.validation.SessionNameShouldStartWith'),\n        );\n      }\n\n      if (!/^[\\w.-]*$/.test(value)) {\n        return Promise.reject(\n          t('session.validation.SessionNameInvalidCharacter'),\n        );\n      }\n\n      if (!/\\w$/.test(value) && value.length >= 4) {\n        return Promise.reject(t('session.validation.SessionNameShouldEndWith'));\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={getSessionNameRules(t)}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import { useCurrentUserRole } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAICard, { BAICardProps } from './BAICard';\nimport BAISelect from './BAISelect';\nimport Flex from './Flex';\nimport HiddenFormItem from './HiddenFormItem';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { SessionOwnerSetterCardQuery } from './__generated__/SessionOwnerSetterCardQuery.graphql';\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Form,\n  Input,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport { CardProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { CheckIcon } from 'lucide-react';\nimport React, { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { fetchQuery, useRelayEnvironment } from 'react-relay';\n\nexport interface SessionOwnerSetterFormValues {\n  owner?:\n    | {\n        email: string;\n        accesskey: string;\n        project: string;\n        resourceGroup: string;\n        enabled: true;\n        domainName: string;\n      }\n    | {\n        email?: string;\n        accesskey?: string;\n        project?: string;\n        resourceGroup?: string;\n        enabled: false;\n        domainName?: string;\n      };\n}\n\nconst SessionOwnerSetterCard: React.FC<CardProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const form = Form.useFormInstance<SessionOwnerSetterFormValues>();\n\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n\n  const [fetchingEmail, setFetchingEmail] = useState<string>();\n  const relayEvn = useRelayEnvironment();\n\n  const { data, isFetching } = useTanQuery({\n    queryKey: ['SessionOwnerSetterCard', 'ownerInfo', fetchingEmail],\n    queryFn: () => {\n      const email = form.getFieldValue(['owner', 'email']);\n      if (!email) return;\n\n      const query = graphql`\n        query SessionOwnerSetterCardQuery($email: String!) {\n          keypairs(email: $email) {\n            access_key\n          }\n          user(email: $email) {\n            domain_name\n            groups {\n              name\n              id\n            }\n          }\n        }\n      `;\n      return fetchQuery<SessionOwnerSetterCardQuery>(relayEvn, query, {\n        email,\n      }).toPromise();\n    },\n    enabled: !!fetchingEmail,\n  });\n\n  const ownerKeypairs = form.getFieldValue(['owner', 'email'])\n    ? data?.keypairs\n    : undefined;\n  const owner = form.getFieldValue(['owner', 'email']) ? data?.user : undefined;\n\n  const nonExistentOwner = !isFetching && fetchingEmail && !owner;\n  return (\n    <Card\n      title={t('session.launcher.SetSessionOwner')}\n      extra={\n        <Form.Item name={['owner', 'enabled']} valuePropName=\"checked\" noStyle>\n          <Switch />\n        </Form.Item>\n      }\n      styles={\n        isActive\n          ? undefined\n          : {\n              header: {\n                borderBottom: 'none',\n              },\n              body: {\n                display: isActive ? 'block' : 'none',\n              },\n            }\n      }\n      {...props}\n    >\n      <HiddenFormItem\n        name={['owner', 'domainName']}\n        value={owner?.domain_name}\n      />\n      <Form.Item dependencies={[['owner', 'enabled']]} noStyle>\n        {({ getFieldValue }) => {\n          return (\n            <>\n              <Flex>\n                <Form.Item\n                  name={['owner', 'email']}\n                  label={t('session.launcher.OwnerEmail')}\n                  rules={[\n                    {\n                      required: isActive,\n                    },\n                    {\n                      type: 'email',\n                      message: t('credential.validation.InvalidEmailAddress'),\n                    },\n                  ]}\n                  style={{ flex: 1 }}\n                  validateStatus={nonExistentOwner ? 'error' : undefined}\n                  help={\n                    nonExistentOwner\n                      ? t('credential.NoUserToDisplay')\n                      : undefined\n                  }\n                >\n                  <Input.Search\n                    onSearch={(v) => {\n                      // startTransition(()=>{\n\n                      form\n                        .validateFields([['owner', 'email']])\n                        .then(() => {\n                          setFetchingEmail(v);\n                        })\n                        .catch(() => {});\n                      // })\n                    }}\n                    onChange={() => {\n                      setFetchingEmail('');\n                      form.setFieldsValue({\n                        owner: {\n                          accesskey: '',\n                          project: undefined,\n                          resourceGroup: undefined,\n                        },\n                      });\n                    }}\n                    loading={isFetching}\n                    enterButton={\n                      !isFetching && owner ? (\n                        <Button icon={<CheckIcon />} />\n                      ) : undefined\n                    }\n                  />\n                </Form.Item>\n              </Flex>\n              <Form.Item\n                name={['owner', 'accesskey']}\n                label={t('session.launcher.OwnerAccessKey')}\n                rules={[\n                  {\n                    required: getFieldValue(['owner', 'enabled']),\n                  },\n                ]}\n              >\n                <BAISelect\n                  options={_.map(ownerKeypairs, (k) => {\n                    return {\n                      label: k?.access_key,\n                      value: k?.access_key,\n                    };\n                  })}\n                  autoSelectOption\n                  disabled={_.isEmpty(fetchingEmail) || isFetching}\n                  // defaultActiveFirstOption\n                />\n              </Form.Item>\n              <Row gutter={token.marginSM}>\n                <Col span={12}>\n                  <Form.Item\n                    name={['owner', 'project']}\n                    label={t('session.launcher.OwnerGroup')}\n                    rules={[\n                      {\n                        required: getFieldValue(['owner', 'enabled']),\n                      },\n                    ]}\n                  >\n                    <BAISelect\n                      options={_.map(owner?.groups, (g) => {\n                        return {\n                          label: g?.name,\n                          value: g?.name,\n                        };\n                      })}\n                      autoSelectOption\n                      disabled={_.isEmpty(fetchingEmail) || isFetching}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item dependencies={[['owner', 'project']]} noStyle>\n                    {({ getFieldValue }) => {\n                      return (\n                        <Suspense\n                          fallback={\n                            <Form.Item\n                              label={t('session.launcher.OwnerResourceGroup')}\n                              rules={[\n                                {\n                                  required: getFieldValue(['owner', 'enabled']),\n                                },\n                              ]}\n                            >\n                              <Select loading />\n                            </Form.Item>\n                          }\n                        >\n                          <Form.Item\n                            name={['owner', 'resourceGroup']}\n                            label={t('session.launcher.OwnerResourceGroup')}\n                            rules={[\n                              {\n                                required: getFieldValue(['owner', 'enabled']),\n                              },\n                            ]}\n                          >\n                            {getFieldValue(['owner', 'project']) ? (\n                              <ResourceGroupSelect\n                                projectName={getFieldValue([\n                                  'owner',\n                                  'project',\n                                ])}\n                                disabled={\n                                  _.isEmpty(fetchingEmail) || isFetching\n                                }\n                                autoSelectDefault\n                              />\n                            ) : (\n                              <Select disabled />\n                            )}\n                          </Form.Item>\n                        </Suspense>\n                      );\n                    }}\n                  </Form.Item>\n                </Col>\n              </Row>\n            </>\n          );\n        }}\n      </Form.Item>\n    </Card>\n  );\n};\n\nexport const SessionOwnerSetterPreviewCard: React.FC<BAICardProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n  const currentUserRole = useCurrentUserRole();\n  return (\n    (currentUserRole === 'admin' || currentUserRole === 'superadmin') &&\n    isActive && (\n      <BAICard\n        title={t('session.launcher.SetSessionOwner')}\n        size=\"small\"\n        status={\n          form.getFieldError(['owner', 'email']).length > 0 ||\n          form.getFieldError(['owner', 'accesskey']).length > 0 ||\n          form.getFieldError(['owner', 'project']).length > 0 ||\n          form.getFieldError(['owner', 'resourceGroup']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        {...props}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.OwnerEmail')}>\n            {form.getFieldValue(['owner', 'email'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerAccessKey')}>\n            {form.getFieldValue(['owner', 'accesskey'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerGroup')}>\n            {form.getFieldValue(['owner', 'project'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerResourceGroup')}>\n            {form.getFieldValue(['owner', 'resourceGroup'])}\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    )\n  );\n};\n\nexport default SessionOwnerSetterCard;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\nimport {\n  ResourceNumbersOfSession,\n  SessionLauncherFormValue,\n} from '../pages/SessionLauncherPage';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { Divider, Table, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionTemplateModalProps\n  extends Omit<BAIModalProps, 'onOk' | 'onCancel'> {\n  onRequestClose: (formValue?: SessionLauncherFormValue) => void;\n}\nconst SessionTemplateModal: React.FC<SessionTemplateModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const [sessionHistory] = useRecentSessionHistory();\n\n  const [, { getImageAliasName, getBaseVersion }] = useBackendAIImageMetaData();\n\n  const [selectedHistoryId, setSelectedHistoryId] = useState<string>();\n\n  const parsedSessionHistory = useMemo(() => {\n    return _.map(sessionHistory, (history) => {\n      const params = new URLSearchParams(history.params);\n      const formValues: SessionLauncherFormValue = JSON.parse(\n        params.get('formValues') || '{}',\n      );\n      return {\n        ...history,\n        ...formValues,\n        // resourceAllocation: `${history.cpu}CPU ${history.memory}GB`,\n      };\n    });\n  }, [sessionHistory]);\n\n  return (\n    <BAIModal\n      width={800}\n      title={t('session.launcher.RecentHistory')}\n      okButtonProps={{ disabled: !selectedHistoryId }}\n      okText={t('button.Apply')}\n      {...modalProps}\n      onOk={(e) => {\n        const params = _.find(sessionHistory, {\n          id: selectedHistoryId,\n        })?.params;\n        modalProps.onRequestClose?.(\n          JSON.parse(new URLSearchParams(params).get('formValues') || '{}'),\n        );\n      }}\n      onCancel={() => {\n        // reset\n        setSelectedHistoryId(undefined);\n        modalProps.onRequestClose();\n      }}\n    >\n      <Divider style={{ margin: 0 }} />\n      <Table\n        showHeader={false}\n        scroll={{ x: 'max-content' }}\n        dataSource={parsedSessionHistory}\n        pagination={false}\n        rowSelection={{\n          type: 'radio',\n          selectedRowKeys: selectedHistoryId ? [selectedHistoryId] : [],\n          onSelect: (record) => {\n            setSelectedHistoryId(record.id);\n          },\n        }}\n        onRow={(record) => ({\n          onClick: () => {\n            setSelectedHistoryId(record.id);\n          },\n        })}\n        rowKey={(record) => record.id}\n        columns={[\n          // {\n          //   title: t('session.launcher.SessionName'),\n          //   dataIndex: 'sessionName',\n          //   render: (sessionName, record) => {\n          //     return sessionName ?? '-';\n          //   },\n          // },\n          {\n            title: t('general.Image'),\n            dataIndex: ['environments', 'version'],\n            render: (version, record) => {\n              const imageStr =\n                record.environments.version || record.environments.manual;\n              return (\n                !!imageStr && (\n                  <Flex gap={'xs'}>\n                    <ImageMetaIcon image={imageStr} />\n                    <Typography.Text>\n                      {getImageAliasName(imageStr)}\n                    </Typography.Text>\n                    <Typography.Text>\n                      {getBaseVersion(imageStr)}\n                    </Typography.Text>\n                    <Typography.Text>\n                      {record.sessionName ? `(${record.sessionName})` : null}\n                    </Typography.Text>\n                  </Flex>\n                )\n              );\n            },\n            // onCell: () => ({\n            //   style: { maxWidth: 250, textOverflow: 'ellipsis' },\n            // }),\n          },\n          {\n            title: t('session.launcher.ResourceAllocation'),\n            dataIndex: 'resource',\n            render: (resource) => {\n              // return JSON.stringify(resource)\n              return (\n                <Flex>\n                  <ResourceNumbersOfSession resource={resource} />\n                </Flex>\n              );\n            },\n          },\n          // {\n          //   dataIndex: 'mounts',\n          //   render: (value, record) => {\n          //     record.mou\n          //   }\n          // },\n          {\n            title: t('session.launcher.CreatedAt'),\n            dataIndex: 'createdAt',\n            render: (createdAt: string) => {\n              return dayjs(createdAt).fromNow();\n            },\n          },\n        ]}\n      />\n      {/* <Tabs\n        defaultActiveKey=\"history\"\n        items={[\n          {\n            key: 'template',\n            label: t('session.launcher.Template'),\n            children: <div>Template</div>,\n          },\n          {\n            key: 'history',\n            label: t('session.launcher.RecentHistory'),\n            children: (\n              \n            ),\n          },\n        ]}\n      /> */}\n    </BAIModal>\n  );\n};\n\nexport default SessionTemplateModal;\n","/**\n * @generated SignedSource<<d19e05501e2f8044559e0684fe36364e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionOwnerSetterCardQuery$variables = {\n  email: string;\n};\nexport type SessionOwnerSetterCardQuery$data = {\n  readonly keypairs: ReadonlyArray<{\n    readonly access_key: string | null | undefined;\n  } | null | undefined> | null | undefined;\n  readonly user: {\n    readonly domain_name: string | null | undefined;\n    readonly groups: ReadonlyArray<{\n      readonly id: string | null | undefined;\n      readonly name: string | null | undefined;\n    } | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type SessionOwnerSetterCardQuery = {\n  response: SessionOwnerSetterCardQuery$data;\n  variables: SessionOwnerSetterCardQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"domain_name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"UserGroup\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"groups\",\n  \"plural\": true,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    (v4/*: any*/)\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"a8de553c14d6730a6825cba2f409be0d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionOwnerSetterCardQuery(\\n  $email: String!\\n) {\\n  keypairs(email: $email) {\\n    access_key\\n    id\\n  }\\n  user(email: $email) {\\n    domain_name\\n    groups {\\n      name\\n      id\\n    }\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ba086835ea654ab889e0e6aaefa0abfe\";\n\nexport default node;\n","import { generateRandomString } from '../helper';\nimport { SessionHistory, useBAISettingUserState } from './useBAISetting';\nimport { useEventNotStable } from './useEventNotStable';\n\nexport const useRecentSessionHistory = () => {\n  const [recentSessionHistory, setRecentSessionHistory] =\n    useBAISettingUserState('recentSessionHistory');\n\n  const push = useEventNotStable(\n    ({\n      id,\n      params,\n      createdAt,\n    }: SelectivePartial<SessionHistory, 'id' | 'createdAt'>) => {\n      const newHistory: SessionHistory = {\n        id: id ?? generateRandomString(8),\n        params,\n        createdAt: createdAt ?? new Date().toISOString(),\n      };\n      // push new history to the top of recentSessionHistory and keep it up to 5\n      const newRecentSessionHistory = [\n        newHistory,\n        ...(recentSessionHistory || []),\n      ].slice(0, 5);\n      setRecentSessionHistory(newRecentSessionHistory);\n    },\n  );\n  const clear = useEventNotStable(() => setRecentSessionHistory([]));\n  const remove = useEventNotStable((id: string) => {\n    const newRecentSessionHistory = (recentSessionHistory || []).filter(\n      (item) => item.id !== id,\n    );\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n  return [\n    recentSessionHistory,\n    {\n      push,\n      clear,\n      remove,\n    },\n  ] as const;\n};\n","import BAIIntervalView from '../components/BAIIntervalView';\nimport DatePickerISO from '../components/DatePickerISO';\nimport EnvVarFormList, {\n  sanitizeSensitiveEnv,\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  transformPortValuesToNumbers,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionLauncherValidationTour from '../components/SessionLauncherErrorTourProps';\nimport SessionLauncherPreview from '../components/SessionLauncherPreview';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport SessionOwnerSetterCard, {\n  SessionOwnerSetterFormValues,\n} from '../components/SessionOwnerSetterCard';\nimport SessionTemplateModal from '../components/SessionTemplateModal';\nimport VFolderTableFormItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport {\n  compareNumberWithUnits,\n  formatDuration,\n  generateRandomString,\n  convertBinarySizeUnit,\n  filterEmptyItem,\n} from '../helper';\nimport {\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n  useWebUINavigate,\n} from '../hooks';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupState,\n} from '../hooks/useCurrentProject';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn, useToggle } from 'ahooks';\nimport {\n  App,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Form,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport _ from 'lodash';\nimport React, { useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n  bootstrap_script?: string;\n  agent_list?: string[];\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  batchTimeout?: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n    timeoutEnabled?: boolean;\n    timeout?: string;\n    timeoutUnit?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n  bootstrap_script?: string;\n}\n\nexport type SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues &\n  SessionOwnerSetterFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\n\nexport type AppOption = {\n  'session-name'?: string;\n  'session-uuid'?: string;\n  'access-key'?: string;\n  mode?: SessionMode;\n  'app-services'?: Array<string>;\n  runtime?: string;\n  filename?: string;\n  // [key in string]: any;\n};\n\nexport type SessionLauncherStepKey =\n  | 'sessionType'\n  | 'environment'\n  | 'storage'\n  | 'network'\n  | 'review';\ninterface StepPropsWithKey extends StepProps {\n  key: SessionLauncherStepKey;\n}\n\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n  let sessionMode: SessionMode = 'normal';\n\n  const mainContentDivRef = useAtomValue(mainContentDivRefState);\n  const baiClient = useSuspendedBackendaiClient();\n  const currentUserRole = useCurrentUserRole();\n  const [currentGlobalResourceGroup, setCurrentGlobalResourceGroup] =\n    useCurrentResourceGroupState();\n\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const INITIAL_FORM_VALUES: DeepPartial<SessionLauncherFormValue> = useMemo(\n    () => ({\n      sessionType: 'interactive',\n      // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n      allocationPreset: 'auto-select',\n      hpcOptimization: {\n        autoEnabled: true,\n        OMP_NUM_THREADS: '1',\n        OPENBLAS_NUM_THREADS: '1',\n      },\n      batch: {\n        enabled: false,\n        command: undefined,\n        scheduleDate: undefined,\n        ...(supportBatchTimeout && {\n          timeoutEnabled: false,\n          timeout: undefined,\n          timeoutUnit: 's',\n        }),\n      },\n      envvars: [],\n      // set default_session_environment only if set\n      ...(baiClient._config?.default_session_environment && {\n        environments: {\n          environment: baiClient._config?.default_session_environment,\n        },\n      }),\n      ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n      resourceGroup: currentGlobalResourceGroup || undefined,\n    }),\n    [\n      baiClient._config?.default_session_environment,\n      currentGlobalResourceGroup,\n      supportBatchTimeout,\n    ],\n  );\n  const StepParam = withDefault(NumberParam, 0);\n  const FormValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n  const AppOptionParam = withDefault(JsonParam, {});\n  const [\n    {\n      step: currentStep,\n      formValues: formValuesFromQueryParams,\n      redirectTo,\n      appOption: appOptionFromQueryParams,\n    },\n    setQuery,\n  ] = useQueryParams({\n    step: StepParam,\n    formValues: FormValuesParam,\n    redirectTo: StringParam,\n    appOption: AppOptionParam,\n  });\n  const { search } = useLocation();\n\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const currentProject = useCurrentProjectValue();\n\n  const [isOpenTemplateModal, { toggle: toggleIsOpenTemplateModal }] =\n    useToggle();\n  const { upsertNotification } = useSetBAINotification();\n  const [, { push: pushSessionHistory }] = useRecentSessionHistory();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      const currentValue = form.getFieldsValue();\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.extend(\n            _.omit(\n              form.getFieldsValue(),\n              ['environments.image'],\n              ['environments.customizedTag'],\n              ['autoMountedFolderNames'],\n              ['owner'],\n              ['envvars'],\n            ),\n            {\n              envvars: sanitizeSensitiveEnv(currentValue.envvars),\n            },\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  useEffect(() => {\n    if (!_.isEmpty(formValuesFromQueryParams)) {\n      form.validateFields().catch((e) => {});\n    }\n    // Run this memo only for the first time\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const mergedInitialValues = useMemo(() => {\n    return _.merge({}, INITIAL_FORM_VALUES, formValuesFromQueryParams);\n  }, [INITIAL_FORM_VALUES, formValuesFromQueryParams]);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps: Array<StepPropsWithKey> = filterEmptyItem([\n    {\n      title: t('session.launcher.SessionType'),\n      key: 'sessionType',\n      // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n    },\n    {\n      title: `${t('session.launcher.Environments')} & ${t(\n        'session.launcher.ResourceAllocation',\n      )} `,\n      key: 'environment',\n    },\n    sessionType !== 'inference' && {\n      title: t('webui.menu.Data&Storage'),\n      key: 'storage',\n    },\n    {\n      title: t('session.launcher.Network'),\n      key: 'network',\n    },\n    {\n      title: t('session.launcher.ConfirmAndLaunch'),\n      icon: <PlayCircleFilled />,\n      // @ts-ignore\n      key: 'review',\n    },\n  ]);\n\n  const currentStepKey = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  const [finalStepLastValidateTime, setFinalStepLastValidateTime] =\n    useUpdatableState('first'); // Force re-render after validation in final step.\n\n  useEffect(() => {\n    if (currentStep === steps.length - 1) {\n      form\n        .validateFields()\n        .catch((error) => {})\n        .finally(() => setFinalStepLastValidateTime());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep, form, setFinalStepLastValidateTime, steps.length]);\n\n  useEffect(() => {\n    if (finalStepLastValidateTime !== 'first') {\n      if (hasError) {\n        setValidationTourOpen(true);\n      } else {\n        setValidationTourOpen(false);\n      }\n    }\n  }, [finalStepLastValidateTime, hasError]);\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n    setIsStartingSession(true);\n    const usedSearchParams = search;\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mounts) || values.mounts.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          kernelName,\n          architecture,\n          sessionName: sessionName,\n          ...(supportBatchTimeout &&\n          values?.batch?.timeoutEnabled &&\n          !_.isUndefined(values?.batch?.timeout)\n            ? {\n                batchTimeout:\n                  _.toString(values.batch.timeout) + values?.batch?.timeoutUnit,\n              }\n            : undefined),\n          config: {\n            ...(baiClient.supports('agent-select') &&\n            !baiClient?._config?.hideAgents &&\n            values.agent !== 'auto'\n              ? {\n                  agent_list: [values.agent].filter(\n                    (agent): agent is string => !!agent,\n                  ),\n                } // Filter out undefined values\n              : undefined),\n            type: values.sessionType,\n            ...(_.isEmpty(values.bootstrap_script)\n              ? {}\n              : {\n                  bootstrap_script: values.bootstrap_script,\n                }),\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            ...(values.owner?.enabled\n              ? {\n                  group_name: values.owner.project,\n                  domain: values.owner.domainName,\n                  scaling_group: values.owner.project,\n                  owner_access_key: values.owner.accesskey,\n                }\n              : {\n                  group_name: currentProject.name,\n                  domain: baiClient._config.domainName,\n                  scaling_group: values.resourceGroup,\n                }),\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: transformPortValuesToNumbers(values.ports),\n            ...(baiClient.supports('agent-select') &&\n            !baiClient?._config?.hideAgents &&\n            values.agent !== 'auto'\n              ? {\n                  agent_list: [values.agent].filter(\n                    (agent): agent is string => !!agent,\n                  ),\n                } // Filter out undefined values\n              : undefined),\n          },\n        };\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                30000,\n                sessionInfo.architecture,\n                sessionInfo.batchTimeout,\n              )\n              .then((res: { created: boolean; status: string }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                if (res?.status === 'CANCELLED') {\n                  // Case about failed to start new session kind of \"docker image not found\" or etc.\n                  throw new Error(\n                    t('session.launcher.FailedToStartNewSession'),\n                  );\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                if (err?.message?.includes('The session already exists')) {\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                } else {\n                  throw err;\n                }\n              });\n          },\n        );\n        // After sending a create request, navigate to job page and set current resource group\n        setCurrentGlobalResourceGroup(values.resourceGroup);\n        const backupTo = window.location.pathname + window.location.search;\n        webuiNavigate(redirectTo || '/job');\n        upsertNotification({\n          key: 'session-launcher:' + sessionName,\n          backgroundTask: {\n            promise: Promise.all(sessionPromises),\n            status: 'pending',\n            statusDescriptions: {\n              pending: t('session.PreparingSession'),\n              resolved: t('eduapi.ComputeSessionPrepared'),\n            },\n          },\n          duration: 0,\n          message: t('general.Session') + ': ' + sessionName,\n          open: true,\n        });\n        await Promise.all(sessionPromises)\n          .then(\n            ([firstSession]: Array<{\n              kernelId?: string;\n              sessionId: string;\n              sessionName: string;\n              servicePorts: Array<{ name: string }>;\n            }>) => {\n              // After the session is created, add a \"See Details\" button to navigate to the session page.\n              upsertNotification({\n                key: 'session-launcher:' + sessionName,\n                to: `/session?sessionDetail=${firstSession.sessionId}`,\n              });\n              pushSessionHistory({\n                id: firstSession.sessionId,\n                params: usedSearchParams,\n                name: firstSession.sessionName,\n              });\n              if (\n                values.num_of_sessions === 1 &&\n                values.sessionType !== 'batch'\n              ) {\n                const res = firstSession;\n                let appOptions: AppOption = _.cloneDeep(\n                  appOptionFromQueryParams,\n                );\n                if ('kernelId' in res) {\n                  // API v4\n                  appOptions = _.extend(appOptions, {\n                    'session-name': res.kernelId,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                } else {\n                  // API >= v5\n                  appOptions = _.extend(appOptions, {\n                    'session-uuid': res.sessionId,\n                    'session-name': res.sessionName,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                }\n                const service_info = res.servicePorts;\n                if (Array.isArray(service_info) === true) {\n                  appOptions['app-services'] = service_info.map(\n                    (a: { name: string }) => a.name,\n                  );\n                } else {\n                  appOptions['app-services'] = [];\n                }\n                // TODO: support import and inference\n                // if (sessionMode === 'import') {\n                //   appOptions['runtime'] = 'jupyter';\n                //   appOptions['filename'] = this.importFilename;\n                // }\n                // if (sessionMode === 'inference') {\n                //   appOptions['runtime'] = appOptions['app-services'].find(\n                //     (element: any) => !['ttyd', 'sshd'].includes(element),\n                //   );\n                // }\n\n                // only launch app when it has valid service ports\n                if (service_info.length > 0) {\n                  // @ts-ignore\n                  globalThis.appLauncher.showLauncher(appOptions);\n                }\n              }\n            },\n          )\n          .catch(() => {\n            upsertNotification({\n              key: 'session-launcher:' + sessionName,\n              to: backupTo,\n              toText: t('button.Edit'),\n            });\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n\n  const [validationTourOpen, setValidationTourOpen] = useState(false);\n\n  const [isQueryReset, setIsQueryReset] = useState(false);\n  useLayoutEffect(() => {\n    if (isQueryReset) {\n      form.resetFields();\n      setIsQueryReset(false);\n    }\n  }, [isQueryReset, form]);\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={4} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                // icon={<BlockOutlined />}\n                // disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n                onClick={() => toggleIsOpenTemplateModal()}\n              >\n                {t('session.launcher.RecentHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={mergedInitialValues}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                  <Form.Item\n                    name=\"bootstrap_script\"\n                    label=\"Bootstrap Script\"\n                    hidden\n                  >\n                    <Input />\n                  </Form.Item>\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      noStyle\n                      dependencies={[['batch', 'scheduleDate']]}\n                    >\n                      {() => {\n                        const scheduleDate = form.getFieldValue([\n                          'batch',\n                          'scheduleDate',\n                        ]);\n                        return (\n                          <BAIIntervalView\n                            delay={1000}\n                            callback={() => {\n                              const scheduleDate = form.getFieldValue([\n                                'batch',\n                                'scheduleDate',\n                              ]);\n                              if (scheduleDate) {\n                                if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                  if (\n                                    form.getFieldError([\n                                      'batch',\n                                      'scheduleDate',\n                                    ]).length === 0\n                                  ) {\n                                    form.validateFields([\n                                      ['batch', 'scheduleDate'],\n                                    ]);\n                                  }\n                                  return undefined;\n                                } else {\n                                  return dayjs(scheduleDate).fromNow();\n                                }\n                              } else {\n                                return undefined;\n                              }\n                            }}\n                            triggerKey={scheduleDate ? scheduleDate : 'none'}\n                            render={(time) => {\n                              return (\n                                <Form.Item\n                                  label={t('session.launcher.SessionStartTime')}\n                                  extra={time}\n                                >\n                                  <Flex direction=\"row\" gap={'xs'}>\n                                    <Form.Item\n                                      noStyle\n                                      name={['batch', 'enabled']}\n                                      valuePropName=\"checked\"\n                                    >\n                                      <Checkbox\n                                        onChange={(e) => {\n                                          if (\n                                            e.target.checked &&\n                                            _.isEmpty(\n                                              form.getFieldValue([\n                                                'batch',\n                                                'scheduleDate',\n                                              ]),\n                                            )\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              dayjs()\n                                                .add(2, 'minutes')\n                                                .toISOString(),\n                                            );\n                                          } else if (\n                                            e.target.checked === false\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              undefined,\n                                            );\n                                          }\n                                          form.validateFields([\n                                            ['batch', 'scheduleDate'],\n                                          ]);\n                                        }}\n                                      >\n                                        {t('session.launcher.Enable')}\n                                      </Checkbox>\n                                    </Form.Item>\n                                    <Form.Item\n                                      noStyle\n                                      // dependencies={[['batch', 'enabled']]}\n                                      shouldUpdate={(prev, next) => {\n                                        return (\n                                          // @ts-ignore\n                                          prev.batch?.enabled !==\n                                          next.batch?.enabled\n                                        );\n                                      }}\n                                    >\n                                      {() => {\n                                        const disabled =\n                                          form.getFieldValue('batch')\n                                            ?.enabled !== true;\n                                        return (\n                                          <>\n                                            <Form.Item\n                                              name={['batch', 'scheduleDate']}\n                                              noStyle\n                                              rules={[\n                                                {\n                                                  // required: true,\n                                                  validator: async (\n                                                    rule,\n                                                    value,\n                                                  ) => {\n                                                    if (\n                                                      value &&\n                                                      dayjs(value).isBefore(\n                                                        dayjs(),\n                                                      )\n                                                    ) {\n                                                      return Promise.reject(\n                                                        t(\n                                                          'session.launcher.StartTimeMustBeInTheFuture',\n                                                        ),\n                                                      );\n                                                    }\n                                                    return Promise.resolve();\n                                                  },\n                                                },\n                                              ]}\n                                            >\n                                              <DatePickerISO\n                                                disabled={disabled}\n                                                showTime\n                                                localFormat\n                                                disabledDate={(value) => {\n                                                  return value.isBefore(\n                                                    dayjs().startOf('day'),\n                                                  );\n                                                }}\n                                              />\n                                            </Form.Item>\n                                            {/* <Form.Item\n                                              noStyle\n                                              name={['batch', 'scheduleTime']}\n                                            >\n                                              <TimePicker disabled={disabled} />\n                                            </Form.Item> */}\n                                          </>\n                                        );\n                                      }}\n                                    </Form.Item>\n                                  </Flex>\n                                </Form.Item>\n                              );\n                            }}\n                          />\n                        );\n                      }}\n                    </Form.Item>\n\n                    {supportBatchTimeout ? (\n                      <Form.Item\n                        noStyle\n                        dependencies={[\n                          ['batch', 'timeoutEnabled'],\n                          ['batch', 'timeoutUnit'],\n                        ]}\n                      >\n                        {() => {\n                          const timeout = form.getFieldValue([\n                            'batch',\n                            'timeout',\n                          ]);\n                          const unit = form.getFieldValue([\n                            'batch',\n                            'timeoutUnit',\n                          ]);\n\n                          const timeDuration = dayjs.duration(\n                            timeout,\n                            unit ?? 's',\n                          );\n\n                          const formattedDuration = formatDuration(\n                            timeDuration,\n                            t,\n                          );\n\n                          const durationText =\n                            !_.isNull(timeout) && _.toFinite(timeout) > 0\n                              ? formattedDuration\n                              : null;\n                          return (\n                            <Form.Item\n                              label={t(\n                                'session.launcher.BatchJobTimeoutDuration',\n                              )}\n                              tooltip={t(\n                                'session.launcher.BatchJobTimeoutDurationDesc',\n                              )}\n                              // extra={durationText}\n                              help={durationText}\n                            >\n                              <Flex direction=\"row\" gap={'xs'}>\n                                <Form.Item\n                                  noStyle\n                                  name={['batch', 'timeoutEnabled']}\n                                  valuePropName=\"checked\"\n                                >\n                                  <Checkbox\n                                    onChange={(e) => {\n                                      if (e.target.checked === false) {\n                                        form.setFieldValue(\n                                          ['batch', 'timeout'],\n                                          undefined,\n                                        );\n                                      }\n                                      form.validateFields([\n                                        ['batch', 'timeout'],\n                                      ]);\n                                    }}\n                                  >\n                                    {t('session.launcher.Enable')}\n                                  </Checkbox>\n                                </Form.Item>\n                                <Form.Item\n                                  noStyle\n                                  dependencies={[['batch', 'timeoutEnabled']]}\n                                >\n                                  {() => {\n                                    const disabled =\n                                      form.getFieldValue([\n                                        'batch',\n                                        'timeoutEnabled',\n                                      ]) !== true;\n                                    return (\n                                      <>\n                                        <Form.Item\n                                          name={['batch', 'timeout']}\n                                          label={t(\n                                            'session.launcher.BatchJobTimeoutDuration',\n                                          )}\n                                          noStyle\n                                          rules={[\n                                            {\n                                              min: 0,\n                                              type: 'number',\n                                              message: t(\n                                                'error.AllowsPositiveNumberOnly',\n                                              ),\n                                            },\n                                            {\n                                              required: !disabled,\n                                            },\n                                          ]}\n                                        >\n                                          <InputNumber\n                                            disabled={disabled}\n                                            min={1}\n                                            addonAfter={\n                                              <Form.Item\n                                                noStyle\n                                                name={['batch', 'timeoutUnit']}\n                                              >\n                                                <Select\n                                                  tabIndex={-1}\n                                                  style={{ minWidth: 75 }}\n                                                  options={[\n                                                    {\n                                                      label: t('time.Sec'),\n                                                      value: 's',\n                                                    },\n                                                    {\n                                                      label: t('time.Min'),\n                                                      value: 'm',\n                                                    },\n                                                    {\n                                                      label: t('time.Hour'),\n                                                      value: 'h',\n                                                    },\n                                                    {\n                                                      label: t('time.Day'),\n                                                      value: 'd',\n                                                    },\n                                                    {\n                                                      label: t('time.Week'),\n                                                      value: 'w',\n                                                    },\n                                                  ]}\n                                                />\n                                              </Form.Item>\n                                            }\n                                          />\n                                        </Form.Item>\n                                      </>\n                                    );\n                                  }}\n                                </Form.Item>\n                              </Flex>\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    ) : null}\n                  </Card>\n                )}\n\n                {(currentUserRole === 'admin' ||\n                  currentUserRole === 'superadmin') && (\n                  <SessionOwnerSetterCard\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  />\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableAgentSelect={\n                      !baiClient._config.hideAgents &&\n                      baiClient.supports('agent-select')\n                    }\n                    enableNumOfSessions\n                    enableResourcePresets\n                    showRemainingWarning\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFormItem\n                    filter={(vfolder) => {\n                      return (\n                        vfolder.status === 'ready' &&\n                        !vfolder.name?.startsWith('.')\n                      );\n                    }}\n                  />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <SessionLauncherPreview\n                    onClickEditStep={(stepKey) => {\n                      const nextStep = _.findIndex(steps, { key: stepKey });\n                      setCurrentStep(nextStep);\n                    }}\n                  />\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        setQuery({}, 'replace');\n                        setIsQueryReset(true);\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </Flex>\n                  <Flex\n                    data-test-id=\"neo-session-launcher-tour-step-navigation\"\n                    direction=\"row\"\n                    gap=\"sm\"\n                  >\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Flex\n            data-test-id=\"neo-session-launcher-tour-step\"\n            style={{ position: 'sticky', top: 80 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Flex>\n        )}\n      </Flex>\n      <SessionTemplateModal\n        onRequestClose={(formValue) => {\n          if (formValue) {\n            const fieldsValue = _.merge(\n              {\n                // reset fields related to optional and nested fields\n                sessionName: '',\n                ports: [],\n                mounts: [],\n                vfoldersAliasMap: {},\n                bootstrap_script: '',\n                num_of_sessions: 1,\n                owner: {\n                  enabled: false,\n                  accesskey: '',\n                  domainName: '',\n                  email: undefined,\n                  project: '',\n                  resourceGroup: '',\n                },\n                environments: {\n                  manual: '',\n                },\n                batch: {\n                  enabled: false,\n                  command: undefined,\n                  scheduleDate: undefined,\n                },\n                agent: 'auto', // Add the missing 'agent' property\n              } as Omit<\n                Required<OptionalFieldsOnly<SessionLauncherFormValue>>,\n                'autoMountedFolderNames'\n              >,\n              formValue,\n            );\n\n            if (!_.isEmpty(fieldsValue.sessionName)) {\n              fieldsValue.sessionName =\n                fieldsValue.sessionName + '-' + generateRandomString(4);\n            }\n            form.setFieldsValue(fieldsValue);\n            setCurrentStep(steps.length - 1);\n            form.validateFields().catch(() => {});\n          }\n          toggleIsOpenTemplateModal();\n        }}\n        open={isOpenTemplateModal}\n      />\n      {currentStep === steps.length - 1 ? (\n        <ErrorBoundary fallback={null}>\n          <SessionLauncherValidationTour\n            open={validationTourOpen}\n            onClose={() => {\n              setValidationTourOpen(false);\n            }}\n            scrollIntoViewOptions\n          />\n        </ErrorBoundary>\n      ) : undefined}\n    </Flex>\n  );\n};\n\ntype FormOrResourceRequired = {\n  resource: ResourceAllocationFormValue['resource'];\n  containerCount?: number;\n};\n\nexport const ResourceNumbersOfSession: React.FC<FormOrResourceRequired> = ({\n  resource,\n  containerCount = 1,\n}) => {\n  return (\n    <>\n      {_.map(\n        _.omit(resource, 'shmem', 'accelerator', 'acceleratorType'),\n        (value, type) => {\n          return value === '0' ? null : (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (convertBinarySizeUnit(value.toString(), 'b')?.number ||\n                      0) *\n                      containerCount +\n                    ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: resource.shmem\n                  ? (convertBinarySizeUnit(resource.shmem, 'b')?.number || 0) *\n                    containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {resource &&\n      resource.accelerator &&\n      resource.acceleratorType &&\n      _.isNumber(resource.accelerator) ? (\n        <ResourceNumber\n          // @ts-ignore\n          type={resource.acceleratorType}\n          value={_.toString(resource.accelerator * containerCount)}\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nexport default SessionLauncherPage;\n"],"names":["_ref","status","extraButtonTitle","onClickExtraButton","extra","style","cardProps","token","theme","useToken","_extra","_jsx","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","undefined","onClick","children","Card","className","_","borderColor","colorSuccess","React","ref","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","DatePicker","dayjs","_value","_value2","_value2$tz","newValue","format","tz","toISOString","props","form","Form","useFormInstance","useEffect","setFieldValue","name","Item","hidden","MIN_PORT","MAX_PORT","PortTag","_ref2","inValid","tagProps","Tag","color","isValidPortStr","portStr","isPortRangeStr","splitPortRange","split","start","end","map","v","parseInt","toString","portRange","length","transformPortValuesToNumbers","values","parsePortRangeToNumbers","formItemProps","t","useTranslation","baiClient","useSuspendedBackendaiClient","label","tooltip","Trans","i18nKey","rules","validator","rule","_config","maxCountForPreopenPorts","Promise","resolve","reject","Error","count","allPorts","port","Select","mode","tagRender","hasDuplicated","getFieldValue","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","otherProps","hasOpenedValidationTour","setHasOpenedValidationTour","useBAISettingUserState","steps","title","description","target","_document$getElements","document","getElementsByClassName","_document$getElements2","_document$getElements3","querySelector","Tour","_baiClient$supports","_baiClient$supports2","_form$getFieldValue","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue6$","_form$getFieldValue7","_form$getFieldValue7$","_form$getFieldValue8","_form$getFieldValue8$","_form$getFieldValue9","_form$getFieldValue9$","_form$getFieldValue12","_form$getFieldValue13","_form$getFieldValue14","_form$getFieldValue15","_form$getFieldValue16","_form$getFieldValue17","_form$getFieldValue18","_form$getFieldValue19","_form$getFieldValue20","_form$getFieldValue21","_form$getFieldValue22","_form$getFieldValue23","_form$getFieldValue24","_form$getFieldValue25","_form$getFieldValue26","_form$getFieldValue27","_form$getFieldValue28","_baiClient$_config","_form$getFieldValue29","_form$getFieldValue31","_form$getFieldValue32","onClickEditStep","sessionType","useWatch","preserve","supportBatchTimeout","supports","supportExtendedImageInfo","currentProject","useCurrentProjectValue","getBaseVersion","getBaseImage","tagAlias","useBackendAIImageMetaData","isDarkMode","useThemeMode","_jsxs","_Fragment","BAICard","size","getFieldError","Descriptions","column","labelStyle","whiteSpace","contentStyle","overflow","SourceCodeViewer","language","Typography","Text","SessionOwnerSetterPreviewCard","idx","Row","flexFlow","Col","ImageMetaIcon","image","version","manual","marginRight","marginXS","Flex","direction","wrap","code","wordBreak","copyable","text","base_image_name","Divider","architecture","tags","tag","_$find","_form$getFieldValue10","_form$getFieldValue11","isCustomized","key","tagValue","labels","aliasedTag","preserveDotStartCase","DoubleTag","colorPrimary","getImageFullName","gap","sizeXS","ImageTags","SyntaxHighlighter","dark","codeTagProps","customStyle","margin","variable","join","align","getFieldWarning","Alert","showIcon","message","span","flex","ResourceNumbersOfSession","resource","hideAgents","containerCount","Table","rowKey","pagination","columns","dataIndex","render","record","opacity","dataSource","_form$getFieldValue30","alias","getSessionNameRules","min","max","f","test","Input","allowClear","autoComplete","isActive","currentUserRole","useCurrentUserRole","fetchingEmail","setFetchingEmail","useState","relayEvn","useRelayEnvironment","data","isFetching","useTanQuery","queryKey","queryFn","email","query","_SessionOwnerSetterCardQuery","require","fetchQuery","toPromise","enabled","ownerKeypairs","keypairs","owner","user","nonExistentOwner","valuePropName","noStyle","Switch","styles","header","borderBottom","body","display","HiddenFormItem","domain_name","dependencies","required","validateStatus","help","Search","onSearch","validateFields","then","catch","setFieldsValue","accesskey","project","resourceGroup","loading","enterButton","CheckIcon","BAISelect","options","k","access_key","autoSelectOption","disabled","gutter","marginSM","groups","g","Suspense","fallback","ResourceGroupSelect","projectName","autoSelectDefault","modalProps","sessionHistory","useRecentSessionHistory","getImageAliasName","selectedHistoryId","setSelectedHistoryId","parsedSessionHistory","useMemo","history","params","URLSearchParams","formValues","JSON","parse","get","BAIModal","okButtonProps","okText","onOk","_modalProps$onRequest","id","onRequestClose","call","onCancel","showHeader","scroll","x","rowSelection","selectedRowKeys","onSelect","onRow","imageStr","environments","sessionName","createdAt","fromNow","node","v0","v1","v2","v3","v4","v5","hash","recentSessionHistory","setRecentSessionHistory","push","useEventNotStable","newRecentSessionHistory","generateRandomString","Date","slice","clear","remove","filter","item","SessionLauncherPage","_baiClient$_config3","_steps$currentStep","app","App","useApp","sessionMode","mainContentDivRef","useAtomValue","mainContentDivRefState","currentGlobalResourceGroup","setCurrentGlobalResourceGroup","useCurrentResourceGroupState","isStartingSession","setIsStartingSession","INITIAL_FORM_VALUES","_baiClient$_config2","allocationPreset","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","command","scheduleDate","timeoutEnabled","timeout","timeoutUnit","envvars","default_session_environment","environment","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","StepParam","withDefault","NumberParam","FormValuesParam","JsonParam","AppOptionParam","step","currentStep","formValuesFromQueryParams","redirectTo","appOption","appOptionFromQueryParams","setQuery","useQueryParams","StringParam","search","useLocation","webuiNavigate","useWebUINavigate","isOpenTemplateModal","toggle","toggleIsOpenTemplateModal","useToggle","upsertNotification","useSetBAINotification","pushSessionHistory","run","syncFormToURLWithDebounce","useDebounceFn","currentValue","getFieldsValue","sanitizeSensitiveEnv","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","useForm","mergedInitialValues","_mainContentDivRef$cu","current","scrollTo","filterEmptyItem","PlayCircleFilled","currentStepKey","hasError","getFieldsError","errors","finalStepLastValidateTime","setFinalStepLastValidateTime","useUpdatableState","error","finally","setValidationTourOpen","validationTourOpen","isQueryReset","setIsQueryReset","useLayoutEffect","resetFields","justifyContent","customCSS","maxWidth","justify","Title","level","marginTop","paddingRight","paddingLeft","Provider","onFormChange","info","layout","requiredMark","initialValues","Radio","SessionNameFormItem","TextArea","autoSize","BAIIntervalView","delay","callback","isBefore","triggerKey","time","Checkbox","checked","add","shouldUpdate","prev","next","_prev$batch","_next$batch","async","DatePickerISO","showTime","disabledDate","startOf","unit","timeDuration","formattedDuration","formatDuration","durationText","InputNumber","addonAfter","tabIndex","minWidth","SessionOwnerSetterCard","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableAgentSelect","enableNumOfSessions","enableResourcePresets","showRemainingWarning","checkedChildren","unCheckedChildren","_prev$hpcOptimization","_next$hpcOptimization","marginMD","xs","sm","stringMode","VFolderTableFormItem","vfolder","_vfolder$name","startsWith","PortSelectFormItem","SessionLauncherPreview","stepKey","Popconfirm","onConfirm","QuestionCircleOutlined","danger","LeftOutlined","Tooltip","PlayCircleOutlined","startSession","usedSearchParams","_values$batch","_values$batch2","_values$batch3","_baiClient$_config4","_values$owner","_baiClient$_config5","mounts","modal","confirm","content","imageFullName","kernelName","generateSessionId","sessionInfo","batchTimeout","config","agent","agent_list","bootstrap_script","startsAt","startupCommand","group_name","domain","domainName","scaling_group","owner_access_key","cluster_mode","cluster_size","maxWaitSeconds","cpu","mem","shmem","compareNumberWithUnits","accelerator","acceleratorType","mount_map","vfoldersAliasMap","env","preopen_ports","ports","sessionPromises","num_of_sessions","i","formattedSessionName","createIfNotExists","res","created","err","_err$message","includes","backupTo","window","location","pathname","backgroundTask","promise","all","statusDescriptions","pending","resolved","duration","firstSession","to","sessionId","appOptions","kernelId","service_info","servicePorts","Array","isArray","a","globalThis","appLauncher","showLauncher","toText","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","items","s","SessionTemplateModal","formValue","fieldsValue","SessionLauncherValidationTour","scrollIntoViewOptions","_convertBinarySizeUni","_convertBinarySizeUni2","ResourceNumber","convertBinarySizeUnit","number","opts","possible","charAt","Math","floor","random"],"sourceRoot":""}