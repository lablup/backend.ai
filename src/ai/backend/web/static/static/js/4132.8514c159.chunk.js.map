{"version":3,"file":"static/js/4132.8514c159.chunk.js","mappings":"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","sources":["components/BAICard.tsx","components/DatePickerISO.tsx","components/HiddenFormItem.tsx","components/SessionNameFormItem.tsx","components/__generated__/SessionOwnerSetterCardQuery.graphql.ts","components/PortSelectFormItem.tsx","components/SessionLauncherErrorTourProps.tsx","components/SessionOwnerSetterCard.tsx","components/SessionLauncherPreview.tsx","hooks/useRecentSessionHistory.tsx","components/SessionTemplateModal.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\nexport interface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  showDivider?: boolean;\n  onClickExtraButton?: () => void;\n  ref?: React.LegacyRef<HTMLDivElement> | undefined;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  styles,\n  showDivider,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      className={status === 'error' ? 'bai-card-error' : ''}\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n              ? token.colorWarning\n              : status === 'success'\n                ? token.colorSuccess\n                : style?.borderColor, // default\n      })}\n      styles={_.merge(\n        showDivider\n          ? {}\n          : {\n              header: {\n                borderBottom: 'none',\n              },\n              body: {\n                paddingTop: token.marginXS,\n              },\n            },\n        styles,\n      )}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport { GetRef } from 'antd/lib';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO = React.forwardRef<\n  GetRef<typeof DatePicker>,\n  DatePickerISOProps\n>(({ value, onChange, localFormat, ...pickerProps }, ref) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      ref={ref}\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n});\n\nexport default DatePickerISO;\n","import { Form, FormItemProps } from 'antd';\nimport React, { useEffect } from 'react';\n\ninterface HiddenFormItemProps extends Omit<FormItemProps, 'children'> {\n  value: any;\n}\nconst HiddenFormItem: React.FC<HiddenFormItemProps> = ({ value, ...props }) => {\n  const form = Form.useFormInstance();\n  useEffect(() => {\n    form.setFieldValue(props.name, value);\n  }, [value, form, props.name]);\n  return <Form.Item {...props} hidden />;\n};\n\nexport default HiddenFormItem;\n","import { Form, FormItemProps, Input } from 'antd';\nimport { TFunction } from 'i18next';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\n\nexport const getSessionNameRules = (t: TFunction): FormItemProps['rules'] => [\n  {\n    min: 4,\n    message: t('session.validation.SessionNameTooShort'),\n  },\n  {\n    max: 64,\n    message: t('session.validation.SessionNameTooLong64'),\n  },\n  {\n    validator(f, value) {\n      if (_.isEmpty(value)) {\n        return Promise.resolve();\n      }\n      if (!/^\\w/.test(value)) {\n        return Promise.reject(\n          t('session.validation.SessionNameShouldStartWith'),\n        );\n      }\n\n      if (!/^[\\w.-]*$/.test(value)) {\n        return Promise.reject(\n          t('session.validation.SessionNameInvalidCharacter'),\n        );\n      }\n\n      if (!/\\w$/.test(value) && value.length >= 4) {\n        return Promise.reject(t('session.validation.SessionNameShouldEndWith'));\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={getSessionNameRules(t)}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","/**\n * @generated SignedSource<<d19e05501e2f8044559e0684fe36364e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionOwnerSetterCardQuery$variables = {\n  email: string;\n};\nexport type SessionOwnerSetterCardQuery$data = {\n  readonly keypairs: ReadonlyArray<{\n    readonly access_key: string | null | undefined;\n  } | null | undefined> | null | undefined;\n  readonly user: {\n    readonly domain_name: string | null | undefined;\n    readonly groups: ReadonlyArray<{\n      readonly id: string | null | undefined;\n      readonly name: string | null | undefined;\n    } | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type SessionOwnerSetterCardQuery = {\n  response: SessionOwnerSetterCardQuery$data;\n  variables: SessionOwnerSetterCardQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"domain_name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"UserGroup\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"groups\",\n  \"plural\": true,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    (v4/*: any*/)\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"a8de553c14d6730a6825cba2f409be0d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionOwnerSetterCardQuery(\\n  $email: String!\\n) {\\n  keypairs(email: $email) {\\n    access_key\\n    id\\n  }\\n  user(email: $email) {\\n    domain_name\\n    groups {\\n      name\\n      id\\n    }\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ba086835ea654ab889e0e6aaefa0abfe\";\n\nexport default node;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({\n  name = 'ports',\n  ...formItemProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const form = Form.useFormInstance();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name={name}\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        () => ({\n          validator(rule, values) {\n            if (\n              transformPortValuesToNumbers(values).length <=\n              baiClient._config.maxCountForPreopenPorts\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(\n                  t('session.launcher.PreOpenPortMaxCountLimit', {\n                    count: baiClient._config.maxCountForPreopenPorts,\n                  }),\n                ),\n              );\n            }\n          },\n        }),\n        () => ({\n          // To check if the port range is not start <= end\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                return parseInt(v).toString() === v || isPortRangeStr(v);\n              })\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(t('session.launcher.InvalidPortFormat')),\n              );\n            }\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            const allPorts = transformPortValuesToNumbers(values);\n            if (\n              _.every(allPorts, (port) => {\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            // To check if the port is duplicated\n            const allPorts = transformPortValuesToNumbers(values);\n            if (_.uniq(allPorts).length === allPorts.length) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.DuplicatedPort')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          const hasDuplicated =\n            _.filter(\n              transformPortValuesToNumbers(form.getFieldValue(name)),\n              (v) => v === parseInt(props.value),\n            ).length > 1;\n          return (\n            <PortTag\n              inValid={hasDuplicated}\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.PreOpen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n  inValid?: boolean;\n}\n\nexport const PortTag: React.FC<PortTagProps> = ({\n  inValid,\n  value,\n  ...tagProps\n}) => {\n  return (\n    <Tag\n      color={!inValid && isValidPortStr(value) ? undefined : 'red'}\n      {...tagProps}\n    />\n  );\n};\n\nexport const isValidPortStr = (portStr: string) => {\n  // consider range as valid\n  if (isPortRangeStr(portStr)) {\n    const splitPortRange = portStr.split(':');\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start >= MIN_PORT && end <= MAX_PORT;\n  } else if (\n    portStr === parseInt(portStr).toString() &&\n    parseInt(portStr) >= MIN_PORT &&\n    parseInt(portStr) <= MAX_PORT\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const isPortRangeStr = (portRange: string) => {\n  const splitPortRange = portRange.split(':');\n  if (splitPortRange.length === 2) {\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start <= end;\n  }\n  return false;\n};\n\nexport const parsePortRangeToNumbers = (portRange: string) => {\n  const [start, end] = portRange.split(':').map((v) => parseInt(v));\n  return _.range(start, end + 1);\n};\n\nexport const transformPortValuesToNumbers = (\n  values: PortSelectFormValues['ports'],\n) => {\n  return _.flatten(\n    _.map(values, (v) =>\n      isPortRangeStr(v) ? parsePortRangeToNumbers(v) : parseInt(v),\n    ),\n  );\n};\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useBAISettingUserState } from '../hooks/useBAISetting';\nimport { Tour, TourProps } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionLauncherValidationTourProps extends Omit<TourProps, 'steps'> {}\nconst SessionLauncherValidationTour: React.FC<\n  SessionLauncherValidationTourProps\n> = ({ open, onClose, ...otherProps }) => {\n  const { t } = useTranslation();\n  const [hasOpenedValidationTour, setHasOpenedValidationTour] =\n    useBAISettingUserState('has_opened_tour_neo_session_validation');\n\n  const steps = [\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.ValidationErrorText'),\n      target: () =>\n        document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t(\n        'tourGuide.neoSessionLauncher.FixErrorFieldByModifyButton',\n      ),\n      target: () =>\n        (\n          document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement\n        )?.querySelector('.ant-card-extra') as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.FixErrorAndTryAgainText'),\n      target: () =>\n        document.querySelector(\n          '[data-test-id=\"neo-session-launcher-tour-step-navigation\"]',\n        ) as HTMLElement,\n    },\n  ];\n  return (\n    <Tour\n      steps={steps}\n      onClose={(e) => {\n        onClose?.(e);\n        setHasOpenedValidationTour(true);\n      }}\n      open={!hasOpenedValidationTour && open}\n      {...otherProps}\n    />\n  );\n};\n\nexport default SessionLauncherValidationTour;\n","import { useCurrentUserRole } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAICard, { BAICardProps } from './BAICard';\nimport BAISelect from './BAISelect';\nimport Flex from './Flex';\nimport HiddenFormItem from './HiddenFormItem';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { SessionOwnerSetterCardQuery } from './__generated__/SessionOwnerSetterCardQuery.graphql';\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Form,\n  Input,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport { CardProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { CheckIcon } from 'lucide-react';\nimport React, { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { fetchQuery, useRelayEnvironment } from 'react-relay';\n\nexport interface SessionOwnerSetterFormValues {\n  owner?:\n    | {\n        email: string;\n        accesskey: string;\n        project: string;\n        resourceGroup: string;\n        enabled: true;\n        domainName: string;\n      }\n    | {\n        email?: string;\n        accesskey?: string;\n        project?: string;\n        resourceGroup?: string;\n        enabled: false;\n        domainName?: string;\n      };\n}\n\nconst SessionOwnerSetterCard: React.FC<CardProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const form = Form.useFormInstance<SessionOwnerSetterFormValues>();\n\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n\n  const [fetchingEmail, setFetchingEmail] = useState<string>();\n  const relayEvn = useRelayEnvironment();\n\n  const { data, isFetching } = useTanQuery({\n    queryKey: ['SessionOwnerSetterCard', 'ownerInfo', fetchingEmail],\n    queryFn: () => {\n      const email = form.getFieldValue(['owner', 'email']);\n      if (!email) return;\n\n      const query = graphql`\n        query SessionOwnerSetterCardQuery($email: String!) {\n          keypairs(email: $email) {\n            access_key\n          }\n          user(email: $email) {\n            domain_name\n            groups {\n              name\n              id\n            }\n          }\n        }\n      `;\n      return fetchQuery<SessionOwnerSetterCardQuery>(relayEvn, query, {\n        email,\n      }).toPromise();\n    },\n    enabled: !!fetchingEmail,\n  });\n\n  const ownerKeypairs = form.getFieldValue(['owner', 'email'])\n    ? data?.keypairs\n    : undefined;\n  const owner = form.getFieldValue(['owner', 'email']) ? data?.user : undefined;\n\n  const nonExistentOwner = !isFetching && fetchingEmail && !owner;\n  return (\n    <Card\n      title={t('session.launcher.SetSessionOwner')}\n      extra={\n        <Form.Item name={['owner', 'enabled']} valuePropName=\"checked\" noStyle>\n          <Switch />\n        </Form.Item>\n      }\n      styles={\n        isActive\n          ? undefined\n          : {\n              header: {\n                borderBottom: 'none',\n              },\n              body: {\n                display: isActive ? 'block' : 'none',\n              },\n            }\n      }\n      {...props}\n    >\n      <HiddenFormItem\n        name={['owner', 'domainName']}\n        value={owner?.domain_name}\n      />\n      <Form.Item dependencies={[['owner', 'enabled']]} noStyle>\n        {({ getFieldValue }) => {\n          return (\n            <>\n              <Flex>\n                <Form.Item\n                  name={['owner', 'email']}\n                  label={t('session.launcher.OwnerEmail')}\n                  rules={[\n                    {\n                      required: isActive,\n                    },\n                    {\n                      type: 'email',\n                      message: t('credential.validation.InvalidEmailAddress'),\n                    },\n                  ]}\n                  style={{ flex: 1 }}\n                  validateStatus={nonExistentOwner ? 'error' : undefined}\n                  help={\n                    nonExistentOwner\n                      ? t('credential.NoUserToDisplay')\n                      : undefined\n                  }\n                >\n                  <Input.Search\n                    onSearch={(v) => {\n                      // startTransition(()=>{\n\n                      form\n                        .validateFields([['owner', 'email']])\n                        .then(() => {\n                          setFetchingEmail(v);\n                        })\n                        .catch(() => {});\n                      // })\n                    }}\n                    onChange={() => {\n                      setFetchingEmail('');\n                      form.setFieldsValue({\n                        owner: {\n                          accesskey: '',\n                          project: undefined,\n                          resourceGroup: undefined,\n                        },\n                      });\n                    }}\n                    loading={isFetching}\n                    enterButton={\n                      !isFetching && owner ? (\n                        <Button icon={<CheckIcon />} />\n                      ) : undefined\n                    }\n                  />\n                </Form.Item>\n              </Flex>\n              <Form.Item\n                name={['owner', 'accesskey']}\n                label={t('session.launcher.OwnerAccessKey')}\n                rules={[\n                  {\n                    required: getFieldValue(['owner', 'enabled']),\n                  },\n                ]}\n              >\n                <BAISelect\n                  options={_.map(ownerKeypairs, (k) => {\n                    return {\n                      label: k?.access_key,\n                      value: k?.access_key,\n                    };\n                  })}\n                  autoSelectOption\n                  disabled={_.isEmpty(fetchingEmail) || isFetching}\n                  // defaultActiveFirstOption\n                />\n              </Form.Item>\n              <Row gutter={token.marginSM}>\n                <Col span={12}>\n                  <Form.Item\n                    name={['owner', 'project']}\n                    label={t('session.launcher.OwnerGroup')}\n                    rules={[\n                      {\n                        required: getFieldValue(['owner', 'enabled']),\n                      },\n                    ]}\n                  >\n                    <BAISelect\n                      options={_.map(owner?.groups, (g) => {\n                        return {\n                          label: g?.name,\n                          value: g?.name,\n                        };\n                      })}\n                      autoSelectOption\n                      disabled={_.isEmpty(fetchingEmail) || isFetching}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item dependencies={[['owner', 'project']]} noStyle>\n                    {({ getFieldValue }) => {\n                      return (\n                        <Suspense\n                          fallback={\n                            <Form.Item\n                              label={t('session.launcher.OwnerResourceGroup')}\n                              rules={[\n                                {\n                                  required: getFieldValue(['owner', 'enabled']),\n                                },\n                              ]}\n                            >\n                              <Select loading />\n                            </Form.Item>\n                          }\n                        >\n                          <Form.Item\n                            name={['owner', 'resourceGroup']}\n                            label={t('session.launcher.OwnerResourceGroup')}\n                            rules={[\n                              {\n                                required: getFieldValue(['owner', 'enabled']),\n                              },\n                            ]}\n                          >\n                            {getFieldValue(['owner', 'project']) ? (\n                              <ResourceGroupSelect\n                                projectName={getFieldValue([\n                                  'owner',\n                                  'project',\n                                ])}\n                                disabled={\n                                  _.isEmpty(fetchingEmail) || isFetching\n                                }\n                                autoSelectDefault\n                              />\n                            ) : (\n                              <Select disabled />\n                            )}\n                          </Form.Item>\n                        </Suspense>\n                      );\n                    }}\n                  </Form.Item>\n                </Col>\n              </Row>\n            </>\n          );\n        }}\n      </Form.Item>\n    </Card>\n  );\n};\n\nexport const SessionOwnerSetterPreviewCard: React.FC<BAICardProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n  const currentUserRole = useCurrentUserRole();\n  return (\n    (currentUserRole === 'admin' || currentUserRole === 'superadmin') &&\n    isActive && (\n      <BAICard\n        title={t('session.launcher.SetSessionOwner')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError(['owner', 'email']).length > 0 ||\n          form.getFieldError(['owner', 'accesskey']).length > 0 ||\n          form.getFieldError(['owner', 'project']).length > 0 ||\n          form.getFieldError(['owner', 'resourceGroup']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        {...props}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.OwnerEmail')}>\n            {form.getFieldValue(['owner', 'email'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerAccessKey')}>\n            {form.getFieldValue(['owner', 'accesskey'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerGroup')}>\n            {form.getFieldValue(['owner', 'project'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerResourceGroup')}>\n            {form.getFieldValue(['owner', 'resourceGroup'])}\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    )\n  );\n};\n\nexport default SessionOwnerSetterCard;\n","import { preserveDotStartCase, getImageFullName } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport {\n  SessionLauncherFormValue,\n  ResourceNumbersOfSession,\n  SessionLauncherStepKey,\n} from '../pages/SessionLauncherPage';\nimport BAICard from './BAICard';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { ImageTags } from './ImageTags';\nimport { PortTag } from './PortSelectFormItem';\nimport { SessionOwnerSetterPreviewCard } from './SessionOwnerSetterCard';\nimport SourceCodeViewer from './SourceCodeViewer';\nimport {\n  Descriptions,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  Tag,\n  Alert,\n  Card,\n  Table,\n  Form,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst SessionLauncherPreview: React.FC<{\n  onClickEditStep: (stepKey: SessionLauncherStepKey) => void;\n}> = ({ onClickEditStep }) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance<SessionLauncherFormValue>();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  const sessionType = Form.useWatch('sessionType', { form, preserve: true });\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n  const supportExtendedImageInfo =\n    baiClient?.supports('extended-image-info') ?? false;\n  const currentProject = useCurrentProjectValue();\n  const [, { getBaseVersion, getBaseImage, tagAlias }] =\n    useBackendAIImageMetaData();\n  const { isDarkMode } = useThemeMode();\n\n  return (\n    <>\n      <BAICard\n        title={t('session.launcher.SessionType')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError('sessionName').length > 0 ||\n          form.getFieldError(['batch', 'command']).length > 0 ||\n          form.getFieldError(['batch', 'scheduleDate']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.SessionType')}>\n            {form.getFieldValue('sessionType')}\n          </Descriptions.Item>\n          {!_.isEmpty(form.getFieldValue('sessionName')) && (\n            <Descriptions.Item label={t('session.launcher.SessionName')}>\n              {form.getFieldValue('sessionName')}\n            </Descriptions.Item>\n          )}\n          {sessionType === 'batch' && (\n            <>\n              <Descriptions.Item\n                label={t('session.launcher.StartUpCommand')}\n                labelStyle={{ whiteSpace: 'nowrap' }}\n                contentStyle={{\n                  overflow: 'auto',\n                }}\n              >\n                {form.getFieldValue(['batch', 'command']) ? (\n                  <SourceCodeViewer language=\"shell\">\n                    {form.getFieldValue(['batch', 'command'])}\n                  </SourceCodeViewer>\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('session.launcher.SessionStartTime')}>\n                {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                  dayjs(form.getFieldValue(['batch', 'scheduleDate'])).format(\n                    'LLL (Z)',\n                  )\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              {supportBatchTimeout ? (\n                <Descriptions.Item\n                  label={t('session.launcher.BatchJobTimeoutDuration')}\n                >\n                  {form.getFieldValue(['batch', 'timeout']) ? (\n                    <Typography.Text>\n                      {form.getFieldValue(['batch', 'timeout'])}\n                      {form.getFieldValue(['batch', 'timeoutUnit']) || 's'}\n                    </Typography.Text>\n                  ) : (\n                    <Typography.Text type=\"secondary\">\n                      {t('general.None')}\n                    </Typography.Text>\n                  )}\n                </Descriptions.Item>\n              ) : null}\n            </>\n          )}\n        </Descriptions>\n      </BAICard>\n      <SessionOwnerSetterPreviewCard\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      />\n      <BAICard\n        title={t('session.launcher.Environments')}\n        showDivider\n        size=\"small\"\n        status={\n          _.some(\n            form.getFieldValue(\n              'envvars',\n            ) as SessionLauncherFormValue['envvars'],\n            (v, idx) => {\n              return (\n                form.getFieldError(['envvars', idx, 'variable']).length > 0 ||\n                form.getFieldError(['envvars', idx, 'value']).length > 0\n              );\n            },\n          )\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.Project')}>\n            {currentProject.name}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('general.Image')}>\n            {supportExtendedImageInfo ? (\n              <Row style={{ flexFlow: 'nowrap' }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                    style={{ marginRight: token.marginXS }}\n                  />\n                </Col>\n                <Col>\n                  <Flex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            form.getFieldValue('environments')?.image\n                              ?.base_image_name,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {form.getFieldValue('environments')?.image?.version}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                        {_.map(\n                          form.getFieldValue('environments')?.image?.tags,\n                          (tag: { key: string; value: string }) => {\n                            const isCustomized = _.includes(\n                              tag.key,\n                              'customized_',\n                            );\n                            const tagValue = isCustomized\n                              ? _.find(\n                                  form.getFieldValue('environments')?.image\n                                    ?.labels,\n                                  {\n                                    key: 'ai.backend.customized-image.name',\n                                  },\n                                )?.value\n                              : tag.value;\n                            const aliasedTag = tagAlias(tag.key + tagValue);\n                            return _.isEqual(\n                              aliasedTag,\n                              preserveDotStartCase(tag.key + tagValue),\n                            ) ? (\n                              <DoubleTag\n                                key={tag.key}\n                                values={[\n                                  {\n                                    label: tagAlias(tag.key),\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                  {\n                                    label: tagValue,\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                ]}\n                              />\n                            ) : (\n                              <Tag\n                                key={tag.key}\n                                color={isCustomized ? 'cyan' : 'blue'}\n                              >\n                                {aliasedTag}\n                              </Tag>\n                            );\n                          },\n                        )}\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </Flex>\n                </Col>\n              </Row>\n            ) : (\n              <Row style={{ flexFlow: 'nowrap', gap: token.sizeXS }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                  />\n                </Col>\n                <Col>\n                  {/* {form.getFieldValue('environments').image} */}\n                  <Flex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            getBaseImage(\n                              form.getFieldValue('environments')?.version,\n                            ),\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {getBaseVersion(\n                            form.getFieldValue('environments')?.version,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <ImageTags\n                          tag={form.getFieldValue([\n                            'environments',\n                            'image',\n                            'tag',\n                          ])}\n                          labels={\n                            form.getFieldValue('environments')?.image\n                              ?.labels as Array<{\n                              key: string;\n                              value: string;\n                            }>\n                          }\n                        />\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </Flex>\n                </Col>\n              </Row>\n            )}\n          </Descriptions.Item>\n          {form.getFieldValue('envvars')?.length > 0 && (\n            <Descriptions.Item\n              label={t('session.launcher.EnvironmentVariable')}\n            >\n              {form.getFieldValue('envvars')?.length ? (\n                <SyntaxHighlighter\n                  style={isDarkMode ? dark : undefined}\n                  codeTagProps={{\n                    style: {\n                      // fontFamily: 'monospace',\n                    },\n                  }}\n                  // showLineNumbers\n                  customStyle={{\n                    margin: 0,\n                    width: '100%',\n                  }}\n                >\n                  {_.map(\n                    form.getFieldValue('envvars'),\n                    (v: { variable: string; value: string }) =>\n                      `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                  ).join('\\n')}\n                </SyntaxHighlighter>\n              ) : (\n                <Typography.Text type=\"secondary\">-</Typography.Text>\n              )}\n            </Descriptions.Item>\n          )}\n        </Descriptions>\n      </BAICard>\n      <BAICard\n        title={t('session.launcher.ResourceAllocation')}\n        showDivider\n        status={\n          _.some(form.getFieldValue('resource'), (v, key) => {\n            return (\n              // @ts-ignore\n              form.getFieldError(['resource', key]).length > 0\n            );\n          }) ||\n          form.getFieldError(['num_of_sessions']).length > 0 ||\n          form.getFieldError('resourceGroup').length > 0\n            ? 'error'\n            : // : _.some(form.getFieldValue('resource'), (v, key) => {\n              //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n              //     // console.log(form.getFieldValue(['resource']));\n              //     return (\n              //       form.getFieldWarning(['resource', key]).length >\n              //       0\n              //     );\n              //   })\n              // ? 'warning'\n              undefined\n        }\n        size=\"small\"\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {_.some(\n            form.getFieldValue('resource'),\n            (v, key: keyof SessionLauncherFormValue['resource']) => {\n              return (\n                // @ts-ignore\n                form.getFieldWarning(['resource', key]).length > 0\n              );\n            },\n          ) && (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.EnqueueComputeSessionWarning')}\n            />\n          )}\n\n          <Descriptions column={2}>\n            <Descriptions.Item label={t('general.ResourceGroup')} span={2}>\n              {form.getFieldValue('resourceGroup') || (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              )}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={t('session.launcher.ResourceAllocationPerContainer')}\n              span={2}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"start\"\n                gap={'sm'}\n                wrap=\"wrap\"\n                style={{ flex: 1 }}\n              >\n                {form.getFieldValue('allocationPreset') === 'custom' ? (\n                  // t('session.launcher.CustomAllocation')\n                  ''\n                ) : (\n                  <Tag>{form.getFieldValue('allocationPreset')}</Tag>\n                )}\n\n                <ResourceNumbersOfSession\n                  resource={form.getFieldValue('resource')}\n                />\n                {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n              </Flex>\n            </Descriptions.Item>\n            {baiClient.supports('agent-select') &&\n              !baiClient?._config?.hideAgents && (\n                <Descriptions.Item label={t('session.launcher.AgentNode')}>\n                  {form.getFieldValue('agent') ||\n                    t('session.launcher.AutoSelect')}\n                </Descriptions.Item>\n              )}\n            <Descriptions.Item label={t('session.launcher.NumberOfContainer')}>\n              {form.getFieldValue('cluster_size') === 1\n                ? form.getFieldValue('num_of_sessions')\n                : form.getFieldValue('cluster_size')}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('session.launcher.ClusterMode')}>\n              {form.getFieldValue('cluster_mode') === 'single-node'\n                ? t('session.launcher.SingleNode')\n                : t('session.launcher.MultiNode')}\n            </Descriptions.Item>\n          </Descriptions>\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={t('session.launcher.TotalAllocation')}\n          >\n            <Flex direction=\"row\" gap=\"xxs\">\n              <ResourceNumbersOfSession\n                resource={form.getFieldValue('resource')}\n                containerCount={\n                  form.getFieldValue('cluster_size') === 1\n                    ? form.getFieldValue('num_of_sessions')\n                    : form.getFieldValue('cluster_size')\n                }\n              />\n            </Flex>\n          </Card>\n        </Flex>\n      </BAICard>\n      <BAICard\n        title={t('webui.menu.Data&Storage')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError('vfoldersAliasMap').length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('storage');\n        }}\n      >\n        {/* {console.log(_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames')]))} */}\n        {/* {_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames').length]) > 0 ? ( */}\n        <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n          {form.getFieldValue('mounts')?.length > 0 ? (\n            <Table\n              rowKey=\"name\"\n              size=\"small\"\n              pagination={false}\n              columns={[\n                {\n                  dataIndex: 'name',\n                  title: t('data.folders.Name'),\n                },\n                {\n                  dataIndex: 'alias',\n                  title: t('session.launcher.FolderAlias'),\n                  render: (value, record) => {\n                    return _.isEmpty(value) ? (\n                      <Typography.Text\n                        type=\"secondary\"\n                        style={{\n                          opacity: 0.7,\n                        }}\n                      >\n                        {`/home/work/${record.name}`}\n                      </Typography.Text>\n                    ) : (\n                      value\n                    );\n                  },\n                },\n              ]}\n              dataSource={_.map(form.getFieldValue('mounts'), (v) => {\n                return {\n                  name: v,\n                  alias: form.getFieldValue('vfoldersAliasMap')?.[v],\n                };\n              })}\n            ></Table>\n          ) : (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.NoFolderMounted')}\n            />\n          )}\n          {form.getFieldValue('autoMountedFolderNames')?.length > 0 ? (\n            <Descriptions size=\"small\">\n              <Descriptions.Item label={t('data.AutomountFolders')}>\n                {_.map(form.getFieldValue('autoMountedFolderNames'), (name) => {\n                  return <Tag>{name}</Tag>;\n                })}\n              </Descriptions.Item>\n            </Descriptions>\n          ) : null}\n        </Flex>\n      </BAICard>\n      <BAICard\n        title=\"Network\"\n        showDivider\n        size=\"small\"\n        status={form.getFieldError('ports').length > 0 ? 'error' : undefined}\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('network');\n        }}\n      >\n        <Descriptions size=\"small\">\n          <Descriptions.Item label={t('session.launcher.PreOpenPortTitle')}>\n            <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }} wrap=\"wrap\">\n              {/* {form.getFieldValue('environments').image} */}\n              {_.sortBy(form.getFieldValue('ports'), (v) => parseInt(v)).map(\n                (v) => (\n                  <PortTag value={v} style={{ margin: 0 }}>\n                    {v}\n                  </PortTag>\n                ),\n              )}\n\n              {!_.isArray(form.getFieldValue('ports')) ||\n              form.getFieldValue('ports')?.length === 0 ? (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              ) : null}\n            </Flex>\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    </>\n  );\n};\n\nexport default SessionLauncherPreview;\n","import { generateRandomString } from '../helper';\nimport { SessionHistory, useBAISettingUserState } from './useBAISetting';\nimport { useEventNotStable } from './useEventNotStable';\n\nexport const useRecentSessionHistory = () => {\n  const [recentSessionHistory, setRecentSessionHistory] =\n    useBAISettingUserState('recentSessionHistory');\n\n  const push = useEventNotStable(\n    ({\n      id,\n      params,\n      createdAt,\n    }: SelectivePartial<SessionHistory, 'id' | 'createdAt'>) => {\n      const newHistory: SessionHistory = {\n        id: id ?? generateRandomString(8),\n        params,\n        createdAt: createdAt ?? new Date().toISOString(),\n      };\n      // push new history to the top of recentSessionHistory and keep it up to 5\n      const newRecentSessionHistory = [\n        newHistory,\n        ...(recentSessionHistory || []),\n      ].slice(0, 5);\n      setRecentSessionHistory(newRecentSessionHistory);\n    },\n  );\n  const clear = useEventNotStable(() => setRecentSessionHistory([]));\n  const remove = useEventNotStable((id: string) => {\n    const newRecentSessionHistory = (recentSessionHistory || []).filter(\n      (item) => item.id !== id,\n    );\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n  return [\n    recentSessionHistory,\n    {\n      push,\n      clear,\n      remove,\n    },\n  ] as const;\n};\n","import { useBackendAIImageMetaData } from '../hooks';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\nimport {\n  ResourceNumbersOfSession,\n  SessionLauncherFormValue,\n} from '../pages/SessionLauncherPage';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { Divider, Table, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionTemplateModalProps\n  extends Omit<BAIModalProps, 'onOk' | 'onCancel'> {\n  onRequestClose: (formValue?: SessionLauncherFormValue) => void;\n}\nconst SessionTemplateModal: React.FC<SessionTemplateModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const [sessionHistory] = useRecentSessionHistory();\n\n  const [, { getImageAliasName, getBaseVersion }] = useBackendAIImageMetaData();\n\n  const [selectedHistoryId, setSelectedHistoryId] = useState<string>();\n\n  const parsedSessionHistory = useMemo(() => {\n    return _.map(sessionHistory, (history) => {\n      const params = new URLSearchParams(history.params);\n      const formValues: SessionLauncherFormValue = JSON.parse(\n        params.get('formValues') || '{}',\n      );\n      return {\n        ...history,\n        ...formValues,\n        // resourceAllocation: `${history.cpu}CPU ${history.memory}GB`,\n      };\n    });\n  }, [sessionHistory]);\n\n  return (\n    <BAIModal\n      width={800}\n      title={t('session.launcher.RecentHistory')}\n      okButtonProps={{ disabled: !selectedHistoryId }}\n      okText={t('button.Apply')}\n      {...modalProps}\n      onOk={(e) => {\n        const params = _.find(sessionHistory, {\n          id: selectedHistoryId,\n        })?.params;\n        modalProps.onRequestClose?.(\n          JSON.parse(new URLSearchParams(params).get('formValues') || '{}'),\n        );\n      }}\n      onCancel={() => {\n        // reset\n        setSelectedHistoryId(undefined);\n        modalProps.onRequestClose();\n      }}\n    >\n      <Divider style={{ margin: 0 }} />\n      <Table\n        showHeader={false}\n        scroll={{ x: 'max-content' }}\n        dataSource={parsedSessionHistory}\n        pagination={false}\n        rowSelection={{\n          type: 'radio',\n          selectedRowKeys: selectedHistoryId ? [selectedHistoryId] : [],\n          onSelect: (record) => {\n            setSelectedHistoryId(record.id);\n          },\n        }}\n        onRow={(record) => ({\n          onClick: () => {\n            setSelectedHistoryId(record.id);\n          },\n        })}\n        rowKey={(record) => record.id}\n        columns={[\n          // {\n          //   title: t('session.launcher.SessionName'),\n          //   dataIndex: 'sessionName',\n          //   render: (sessionName, record) => {\n          //     return sessionName ?? '-';\n          //   },\n          // },\n          {\n            title: t('general.Image'),\n            dataIndex: ['environments', 'version'],\n            render: (version, record) => {\n              const imageStr =\n                record.environments.version || record.environments.manual;\n              return (\n                !!imageStr && (\n                  <Flex gap={'xs'}>\n                    <ImageMetaIcon image={imageStr} />\n                    <Typography.Text>\n                      {getImageAliasName(imageStr)}\n                    </Typography.Text>\n                    <Typography.Text>\n                      {getBaseVersion(imageStr)}\n                    </Typography.Text>\n                    <Typography.Text>\n                      {record.sessionName ? `(${record.sessionName})` : null}\n                    </Typography.Text>\n                  </Flex>\n                )\n              );\n            },\n            // onCell: () => ({\n            //   style: { maxWidth: 250, textOverflow: 'ellipsis' },\n            // }),\n          },\n          {\n            title: t('session.launcher.ResourceAllocation'),\n            dataIndex: 'resource',\n            render: (resource) => {\n              // return JSON.stringify(resource)\n              return (\n                <Flex>\n                  <ResourceNumbersOfSession resource={resource} />\n                </Flex>\n              );\n            },\n          },\n          // {\n          //   dataIndex: 'mounts',\n          //   render: (value, record) => {\n          //     record.mou\n          //   }\n          // },\n          {\n            title: t('session.launcher.CreatedAt'),\n            dataIndex: 'createdAt',\n            render: (createdAt: string) => {\n              return dayjs(createdAt).fromNow();\n            },\n          },\n        ]}\n      />\n      {/* <Tabs\n        defaultActiveKey=\"history\"\n        items={[\n          {\n            key: 'template',\n            label: t('session.launcher.Template'),\n            children: <div>Template</div>,\n          },\n          {\n            key: 'history',\n            label: t('session.launcher.RecentHistory'),\n            children: (\n              \n            ),\n          },\n        ]}\n      /> */}\n    </BAIModal>\n  );\n};\n\nexport default SessionTemplateModal;\n","import BAIIntervalView from '../components/BAIIntervalView';\nimport DatePickerISO from '../components/DatePickerISO';\nimport EnvVarFormList, {\n  sanitizeSensitiveEnv,\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  transformPortValuesToNumbers,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionLauncherValidationTour from '../components/SessionLauncherErrorTourProps';\nimport SessionLauncherPreview from '../components/SessionLauncherPreview';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport SessionOwnerSetterCard, {\n  SessionOwnerSetterFormValues,\n} from '../components/SessionOwnerSetterCard';\nimport SessionTemplateModal from '../components/SessionTemplateModal';\nimport VFolderTableFormItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport {\n  compareNumberWithUnits,\n  formatDuration,\n  generateRandomString,\n  convertBinarySizeUnit,\n  filterEmptyItem,\n} from '../helper';\nimport {\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n  useWebUINavigate,\n} from '../hooks';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupState,\n} from '../hooks/useCurrentProject';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn, useToggle } from 'ahooks';\nimport {\n  App,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Form,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport _ from 'lodash';\nimport React, { useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n  bootstrap_script?: string;\n  agent_list?: string[];\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  batchTimeout?: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n    timeoutEnabled?: boolean;\n    timeout?: string;\n    timeoutUnit?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n  bootstrap_script?: string;\n}\n\nexport type SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues &\n  SessionOwnerSetterFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\n\nexport type AppOption = {\n  'session-name'?: string;\n  'session-uuid'?: string;\n  'access-key'?: string;\n  mode?: SessionMode;\n  'app-services'?: Array<string>;\n  runtime?: string;\n  filename?: string;\n  // [key in string]: any;\n};\n\nexport type SessionLauncherStepKey =\n  | 'sessionType'\n  | 'environment'\n  | 'storage'\n  | 'network'\n  | 'review';\ninterface StepPropsWithKey extends StepProps {\n  key: SessionLauncherStepKey;\n}\n\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n  let sessionMode: SessionMode = 'normal';\n\n  const mainContentDivRef = useAtomValue(mainContentDivRefState);\n  const baiClient = useSuspendedBackendaiClient();\n  const currentUserRole = useCurrentUserRole();\n  const [currentGlobalResourceGroup, setCurrentGlobalResourceGroup] =\n    useCurrentResourceGroupState();\n\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const INITIAL_FORM_VALUES: DeepPartial<SessionLauncherFormValue> = useMemo(\n    () => ({\n      sessionType: 'interactive',\n      // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n      allocationPreset: 'auto-select',\n      hpcOptimization: {\n        autoEnabled: true,\n        OMP_NUM_THREADS: '1',\n        OPENBLAS_NUM_THREADS: '1',\n      },\n      batch: {\n        enabled: false,\n        command: undefined,\n        scheduleDate: undefined,\n        ...(supportBatchTimeout && {\n          timeoutEnabled: false,\n          timeout: undefined,\n          timeoutUnit: 's',\n        }),\n      },\n      envvars: [],\n      // set default_session_environment only if set\n      ...(baiClient._config?.default_session_environment && {\n        environments: {\n          environment: baiClient._config?.default_session_environment,\n        },\n      }),\n      ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n      resourceGroup: currentGlobalResourceGroup || undefined,\n    }),\n    [\n      baiClient._config?.default_session_environment,\n      currentGlobalResourceGroup,\n      supportBatchTimeout,\n    ],\n  );\n  const StepParam = withDefault(NumberParam, 0);\n  const FormValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n  const AppOptionParam = withDefault(JsonParam, {});\n  const [\n    {\n      step: currentStep,\n      formValues: formValuesFromQueryParams,\n      redirectTo,\n      appOption: appOptionFromQueryParams,\n    },\n    setQuery,\n  ] = useQueryParams({\n    step: StepParam,\n    formValues: FormValuesParam,\n    redirectTo: StringParam,\n    appOption: AppOptionParam,\n  });\n  const { search } = useLocation();\n\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const currentProject = useCurrentProjectValue();\n\n  const [isOpenTemplateModal, { toggle: toggleIsOpenTemplateModal }] =\n    useToggle();\n  const { upsertNotification } = useSetBAINotification();\n  const [, { push: pushSessionHistory }] = useRecentSessionHistory();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      const currentValue = form.getFieldsValue();\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.extend(\n            _.omit(\n              form.getFieldsValue(),\n              ['environments.image'],\n              ['environments.customizedTag'],\n              ['autoMountedFolderNames'],\n              ['owner'],\n              ['envvars'],\n            ),\n            {\n              envvars: sanitizeSensitiveEnv(currentValue.envvars),\n            },\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  useEffect(() => {\n    if (!_.isEmpty(formValuesFromQueryParams)) {\n      form.validateFields().catch((e) => {});\n    }\n    // Run this memo only for the first time\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const mergedInitialValues = useMemo(() => {\n    return _.merge({}, INITIAL_FORM_VALUES, formValuesFromQueryParams);\n  }, [INITIAL_FORM_VALUES, formValuesFromQueryParams]);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps: Array<StepPropsWithKey> = filterEmptyItem([\n    {\n      title: t('session.launcher.SessionType'),\n      key: 'sessionType',\n      // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n    },\n    {\n      title: `${t('session.launcher.Environments')} & ${t(\n        'session.launcher.ResourceAllocation',\n      )} `,\n      key: 'environment',\n    },\n    sessionType !== 'inference' && {\n      title: t('webui.menu.Data&Storage'),\n      key: 'storage',\n    },\n    {\n      title: t('session.launcher.Network'),\n      key: 'network',\n    },\n    {\n      title: t('session.launcher.ConfirmAndLaunch'),\n      icon: <PlayCircleFilled />,\n      // @ts-ignore\n      key: 'review',\n    },\n  ]);\n\n  const currentStepKey = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  const [finalStepLastValidateTime, setFinalStepLastValidateTime] =\n    useUpdatableState('first'); // Force re-render after validation in final step.\n\n  useEffect(() => {\n    if (currentStep === steps.length - 1) {\n      form\n        .validateFields()\n        .catch((error) => {})\n        .finally(() => setFinalStepLastValidateTime());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep, form, setFinalStepLastValidateTime, steps.length]);\n\n  useEffect(() => {\n    if (finalStepLastValidateTime !== 'first') {\n      if (hasError) {\n        setValidationTourOpen(true);\n      } else {\n        setValidationTourOpen(false);\n      }\n    }\n  }, [finalStepLastValidateTime, hasError]);\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n    setIsStartingSession(true);\n    const usedSearchParams = search;\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mounts) || values.mounts.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          kernelName,\n          architecture,\n          sessionName: sessionName,\n          ...(supportBatchTimeout &&\n          values?.batch?.timeoutEnabled &&\n          !_.isUndefined(values?.batch?.timeout)\n            ? {\n                batchTimeout:\n                  _.toString(values.batch.timeout) + values?.batch?.timeoutUnit,\n              }\n            : undefined),\n          config: {\n            ...(baiClient.supports('agent-select') &&\n            !baiClient?._config?.hideAgents &&\n            values.agent !== 'auto'\n              ? {\n                  agent_list: [values.agent].filter(\n                    (agent): agent is string => !!agent,\n                  ),\n                } // Filter out undefined values\n              : undefined),\n            type: values.sessionType,\n            ...(_.isEmpty(values.bootstrap_script)\n              ? {}\n              : {\n                  bootstrap_script: values.bootstrap_script,\n                }),\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            ...(values.owner?.enabled\n              ? {\n                  group_name: values.owner.project,\n                  domain: values.owner.domainName,\n                  scaling_group: values.owner.project,\n                  owner_access_key: values.owner.accesskey,\n                }\n              : {\n                  group_name: currentProject.name,\n                  domain: baiClient._config.domainName,\n                  scaling_group: values.resourceGroup,\n                }),\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: transformPortValuesToNumbers(values.ports),\n            ...(baiClient.supports('agent-select') &&\n            !baiClient?._config?.hideAgents &&\n            values.agent !== 'auto'\n              ? {\n                  agent_list: [values.agent].filter(\n                    (agent): agent is string => !!agent,\n                  ),\n                } // Filter out undefined values\n              : undefined),\n          },\n        };\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                undefined,\n                sessionInfo.architecture,\n                sessionInfo.batchTimeout,\n              )\n              .then((res: { created: boolean; status: string }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                if (res?.status === 'CANCELLED') {\n                  // Case about failed to start new session kind of \"docker image not found\" or etc.\n                  throw new Error(\n                    t('session.launcher.FailedToStartNewSession'),\n                  );\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                if (err?.message?.includes('The session already exists')) {\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                } else {\n                  throw err;\n                }\n              });\n          },\n        );\n        // After sending a create request, navigate to job page and set current resource group\n        setCurrentGlobalResourceGroup(values.resourceGroup);\n        const backupTo = window.location.pathname + window.location.search;\n        webuiNavigate(redirectTo || '/job');\n        upsertNotification({\n          key: 'session-launcher:' + sessionName,\n          backgroundTask: {\n            promise: Promise.all(sessionPromises),\n            status: 'pending',\n            onChange: {\n              pending: t('session.PreparingSession'),\n              resolved: t('eduapi.ComputeSessionPrepared'),\n            },\n          },\n          duration: 0,\n          message: t('general.Session') + ': ' + sessionName,\n          open: true,\n        });\n        await Promise.all(sessionPromises)\n          .then(\n            ([firstSession]: Array<{\n              kernelId?: string;\n              sessionId: string;\n              sessionName: string;\n              servicePorts: Array<{ name: string }>;\n            }>) => {\n              // After the session is created, add a \"See Details\" button to navigate to the session page.\n              upsertNotification({\n                key: 'session-launcher:' + sessionName,\n                to: `/session?sessionDetail=${firstSession.sessionId}`,\n              });\n              pushSessionHistory({\n                id: firstSession.sessionId,\n                params: usedSearchParams,\n                name: firstSession.sessionName,\n              });\n              if (\n                values.num_of_sessions === 1 &&\n                values.sessionType !== 'batch'\n              ) {\n                const res = firstSession;\n                let appOptions: AppOption = _.cloneDeep(\n                  appOptionFromQueryParams,\n                );\n                if ('kernelId' in res) {\n                  // API v4\n                  appOptions = _.extend(appOptions, {\n                    'session-name': res.kernelId,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                } else {\n                  // API >= v5\n                  appOptions = _.extend(appOptions, {\n                    'session-uuid': res.sessionId,\n                    'session-name': res.sessionName,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                }\n                const service_info = res.servicePorts;\n                if (Array.isArray(service_info) === true) {\n                  appOptions['app-services'] = service_info.map(\n                    (a: { name: string }) => a.name,\n                  );\n                } else {\n                  appOptions['app-services'] = [];\n                }\n                // TODO: support import and inference\n                // if (sessionMode === 'import') {\n                //   appOptions['runtime'] = 'jupyter';\n                //   appOptions['filename'] = this.importFilename;\n                // }\n                // if (sessionMode === 'inference') {\n                //   appOptions['runtime'] = appOptions['app-services'].find(\n                //     (element: any) => !['ttyd', 'sshd'].includes(element),\n                //   );\n                // }\n\n                // only launch app when it has valid service ports\n                if (service_info.length > 0) {\n                  // @ts-ignore\n                  globalThis.appLauncher.showLauncher(appOptions);\n                }\n              }\n            },\n          )\n          .catch(() => {\n            upsertNotification({\n              key: 'session-launcher:' + sessionName,\n              to: backupTo,\n              toText: t('button.Edit'),\n            });\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n\n  const [validationTourOpen, setValidationTourOpen] = useState(false);\n\n  const [isQueryReset, setIsQueryReset] = useState(false);\n  useLayoutEffect(() => {\n    if (isQueryReset) {\n      form.resetFields();\n      setIsQueryReset(false);\n    }\n  }, [isQueryReset, form]);\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={4} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                // icon={<BlockOutlined />}\n                // disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n                onClick={() => toggleIsOpenTemplateModal()}\n              >\n                {t('session.launcher.RecentHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={mergedInitialValues}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                  <Form.Item\n                    name=\"bootstrap_script\"\n                    label=\"Bootstrap Script\"\n                    hidden\n                  >\n                    <Input />\n                  </Form.Item>\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      noStyle\n                      dependencies={[['batch', 'scheduleDate']]}\n                    >\n                      {() => {\n                        const scheduleDate = form.getFieldValue([\n                          'batch',\n                          'scheduleDate',\n                        ]);\n                        return (\n                          <BAIIntervalView\n                            delay={1000}\n                            callback={() => {\n                              const scheduleDate = form.getFieldValue([\n                                'batch',\n                                'scheduleDate',\n                              ]);\n                              if (scheduleDate) {\n                                if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                  if (\n                                    form.getFieldError([\n                                      'batch',\n                                      'scheduleDate',\n                                    ]).length === 0\n                                  ) {\n                                    form.validateFields([\n                                      ['batch', 'scheduleDate'],\n                                    ]);\n                                  }\n                                  return undefined;\n                                } else {\n                                  return dayjs(scheduleDate).fromNow();\n                                }\n                              } else {\n                                return undefined;\n                              }\n                            }}\n                            triggerKey={scheduleDate ? scheduleDate : 'none'}\n                            render={(time) => {\n                              return (\n                                <Form.Item\n                                  label={t('session.launcher.SessionStartTime')}\n                                  extra={time}\n                                >\n                                  <Flex direction=\"row\" gap={'xs'}>\n                                    <Form.Item\n                                      noStyle\n                                      name={['batch', 'enabled']}\n                                      valuePropName=\"checked\"\n                                    >\n                                      <Checkbox\n                                        onChange={(e) => {\n                                          if (\n                                            e.target.checked &&\n                                            _.isEmpty(\n                                              form.getFieldValue([\n                                                'batch',\n                                                'scheduleDate',\n                                              ]),\n                                            )\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              dayjs()\n                                                .add(2, 'minutes')\n                                                .toISOString(),\n                                            );\n                                          } else if (\n                                            e.target.checked === false\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              undefined,\n                                            );\n                                          }\n                                          form.validateFields([\n                                            ['batch', 'scheduleDate'],\n                                          ]);\n                                        }}\n                                      >\n                                        {t('session.launcher.Enable')}\n                                      </Checkbox>\n                                    </Form.Item>\n                                    <Form.Item\n                                      noStyle\n                                      // dependencies={[['batch', 'enabled']]}\n                                      shouldUpdate={(prev, next) => {\n                                        return (\n                                          // @ts-ignore\n                                          prev.batch?.enabled !==\n                                          next.batch?.enabled\n                                        );\n                                      }}\n                                    >\n                                      {() => {\n                                        const disabled =\n                                          form.getFieldValue('batch')\n                                            ?.enabled !== true;\n                                        return (\n                                          <>\n                                            <Form.Item\n                                              name={['batch', 'scheduleDate']}\n                                              noStyle\n                                              rules={[\n                                                {\n                                                  // required: true,\n                                                  validator: async (\n                                                    rule,\n                                                    value,\n                                                  ) => {\n                                                    if (\n                                                      value &&\n                                                      dayjs(value).isBefore(\n                                                        dayjs(),\n                                                      )\n                                                    ) {\n                                                      return Promise.reject(\n                                                        t(\n                                                          'session.launcher.StartTimeMustBeInTheFuture',\n                                                        ),\n                                                      );\n                                                    }\n                                                    return Promise.resolve();\n                                                  },\n                                                },\n                                              ]}\n                                            >\n                                              <DatePickerISO\n                                                disabled={disabled}\n                                                showTime\n                                                localFormat\n                                                disabledDate={(value) => {\n                                                  return value.isBefore(\n                                                    dayjs().startOf('day'),\n                                                  );\n                                                }}\n                                              />\n                                            </Form.Item>\n                                            {/* <Form.Item\n                                              noStyle\n                                              name={['batch', 'scheduleTime']}\n                                            >\n                                              <TimePicker disabled={disabled} />\n                                            </Form.Item> */}\n                                          </>\n                                        );\n                                      }}\n                                    </Form.Item>\n                                  </Flex>\n                                </Form.Item>\n                              );\n                            }}\n                          />\n                        );\n                      }}\n                    </Form.Item>\n\n                    {supportBatchTimeout ? (\n                      <Form.Item\n                        noStyle\n                        dependencies={[\n                          ['batch', 'timeoutEnabled'],\n                          ['batch', 'timeoutUnit'],\n                        ]}\n                      >\n                        {() => {\n                          const timeout = form.getFieldValue([\n                            'batch',\n                            'timeout',\n                          ]);\n                          const unit = form.getFieldValue([\n                            'batch',\n                            'timeoutUnit',\n                          ]);\n\n                          const timeDuration = dayjs.duration(\n                            timeout,\n                            unit ?? 's',\n                          );\n\n                          const formattedDuration = formatDuration(\n                            timeDuration,\n                            t,\n                          );\n\n                          const durationText =\n                            !_.isNull(timeout) && _.toFinite(timeout) > 0\n                              ? formattedDuration\n                              : null;\n                          return (\n                            <Form.Item\n                              label={t(\n                                'session.launcher.BatchJobTimeoutDuration',\n                              )}\n                              tooltip={t(\n                                'session.launcher.BatchJobTimeoutDurationDesc',\n                              )}\n                              // extra={durationText}\n                              help={durationText}\n                            >\n                              <Flex direction=\"row\" gap={'xs'}>\n                                <Form.Item\n                                  noStyle\n                                  name={['batch', 'timeoutEnabled']}\n                                  valuePropName=\"checked\"\n                                >\n                                  <Checkbox\n                                    onChange={(e) => {\n                                      if (e.target.checked === false) {\n                                        form.setFieldValue(\n                                          ['batch', 'timeout'],\n                                          undefined,\n                                        );\n                                      }\n                                      form.validateFields([\n                                        ['batch', 'timeout'],\n                                      ]);\n                                    }}\n                                  >\n                                    {t('session.launcher.Enable')}\n                                  </Checkbox>\n                                </Form.Item>\n                                <Form.Item\n                                  noStyle\n                                  dependencies={[['batch', 'timeoutEnabled']]}\n                                >\n                                  {() => {\n                                    const disabled =\n                                      form.getFieldValue([\n                                        'batch',\n                                        'timeoutEnabled',\n                                      ]) !== true;\n                                    return (\n                                      <>\n                                        <Form.Item\n                                          name={['batch', 'timeout']}\n                                          label={t(\n                                            'session.launcher.BatchJobTimeoutDuration',\n                                          )}\n                                          noStyle\n                                          rules={[\n                                            {\n                                              min: 0,\n                                              type: 'number',\n                                              message: t(\n                                                'error.AllowsPositiveNumberOnly',\n                                              ),\n                                            },\n                                            {\n                                              required: !disabled,\n                                            },\n                                          ]}\n                                        >\n                                          <InputNumber\n                                            disabled={disabled}\n                                            min={1}\n                                            addonAfter={\n                                              <Form.Item\n                                                noStyle\n                                                name={['batch', 'timeoutUnit']}\n                                              >\n                                                <Select\n                                                  tabIndex={-1}\n                                                  style={{ minWidth: 75 }}\n                                                  options={[\n                                                    {\n                                                      label: t('time.Sec'),\n                                                      value: 's',\n                                                    },\n                                                    {\n                                                      label: t('time.Min'),\n                                                      value: 'm',\n                                                    },\n                                                    {\n                                                      label: t('time.Hour'),\n                                                      value: 'h',\n                                                    },\n                                                    {\n                                                      label: t('time.Day'),\n                                                      value: 'd',\n                                                    },\n                                                    {\n                                                      label: t('time.Week'),\n                                                      value: 'w',\n                                                    },\n                                                  ]}\n                                                />\n                                              </Form.Item>\n                                            }\n                                          />\n                                        </Form.Item>\n                                      </>\n                                    );\n                                  }}\n                                </Form.Item>\n                              </Flex>\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    ) : null}\n                  </Card>\n                )}\n\n                {(currentUserRole === 'admin' ||\n                  currentUserRole === 'superadmin') && (\n                  <SessionOwnerSetterCard\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  />\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableAgentSelect={\n                      !baiClient._config.hideAgents &&\n                      baiClient.supports('agent-select')\n                    }\n                    enableNumOfSessions\n                    enableResourcePresets\n                    showRemainingWarning\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFormItem\n                    filter={(vfolder) => {\n                      return (\n                        vfolder.status === 'ready' &&\n                        !vfolder.name?.startsWith('.')\n                      );\n                    }}\n                  />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <SessionLauncherPreview\n                    onClickEditStep={(stepKey) => {\n                      const nextStep = _.findIndex(steps, { key: stepKey });\n                      setCurrentStep(nextStep);\n                    }}\n                  />\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        setQuery({}, 'replace');\n                        setIsQueryReset(true);\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </Flex>\n                  <Flex\n                    data-test-id=\"neo-session-launcher-tour-step-navigation\"\n                    direction=\"row\"\n                    gap=\"sm\"\n                  >\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Flex\n            data-test-id=\"neo-session-launcher-tour-step\"\n            style={{ position: 'sticky', top: 80 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Flex>\n        )}\n      </Flex>\n      <SessionTemplateModal\n        onRequestClose={(formValue) => {\n          if (formValue) {\n            const fieldsValue = _.merge(\n              {\n                // reset fields related to optional and nested fields\n                sessionName: '',\n                ports: [],\n                mounts: [],\n                vfoldersAliasMap: {},\n                bootstrap_script: '',\n                num_of_sessions: 1,\n                owner: {\n                  enabled: false,\n                  accesskey: '',\n                  domainName: '',\n                  email: undefined,\n                  project: '',\n                  resourceGroup: '',\n                },\n                environments: {\n                  manual: '',\n                },\n                batch: {\n                  enabled: false,\n                  command: undefined,\n                  scheduleDate: undefined,\n                },\n                agent: 'auto', // Add the missing 'agent' property\n              } as Omit<\n                Required<OptionalFieldsOnly<SessionLauncherFormValue>>,\n                'autoMountedFolderNames'\n              >,\n              formValue,\n            );\n\n            if (!_.isEmpty(fieldsValue.sessionName)) {\n              fieldsValue.sessionName =\n                fieldsValue.sessionName + '-' + generateRandomString(4);\n            }\n            form.setFieldsValue(fieldsValue);\n            setCurrentStep(steps.length - 1);\n            form.validateFields().catch(() => {});\n          }\n          toggleIsOpenTemplateModal();\n        }}\n        open={isOpenTemplateModal}\n      />\n      {currentStep === steps.length - 1 ? (\n        <ErrorBoundary fallback={null}>\n          <SessionLauncherValidationTour\n            open={validationTourOpen}\n            onClose={() => {\n              setValidationTourOpen(false);\n            }}\n            scrollIntoViewOptions\n          />\n        </ErrorBoundary>\n      ) : undefined}\n    </Flex>\n  );\n};\n\ntype FormOrResourceRequired = {\n  resource: ResourceAllocationFormValue['resource'];\n  containerCount?: number;\n};\n\nexport const ResourceNumbersOfSession: React.FC<FormOrResourceRequired> = ({\n  resource,\n  containerCount = 1,\n}) => {\n  return (\n    <>\n      {_.map(\n        _.omit(resource, 'shmem', 'accelerator', 'acceleratorType'),\n        (value, type) => {\n          return value === '0' ? null : (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (convertBinarySizeUnit(value.toString(), 'b')?.number ||\n                      0) *\n                      containerCount +\n                    ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: resource.shmem\n                  ? (convertBinarySizeUnit(resource.shmem, 'b')?.number || 0) *\n                    containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {resource &&\n      resource.accelerator &&\n      resource.acceleratorType &&\n      _.isNumber(resource.accelerator) ? (\n        <ResourceNumber\n          // @ts-ignore\n          type={resource.acceleratorType}\n          value={_.toString(resource.accelerator * containerCount)}\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nexport default SessionLauncherPage;\n"],"names":["_ref","status","extraButtonTitle","onClickExtraButton","extra","style","styles","showDivider","cardProps","token","theme","useToken","_extra","_jsx","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","undefined","onClick","children","Card","className","_","borderColor","colorSuccess","header","borderBottom","body","paddingTop","marginXS","React","ref","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","DatePicker","dayjs","_value","_value2","_value2$tz","newValue","format","tz","toISOString","props","form","Form","useFormInstance","useEffect","setFieldValue","name","Item","hidden","getSessionNameRules","t","min","message","max","validator","f","Promise","resolve","test","length","reject","formItemProps","useTranslation","label","rules","Input","allowClear","autoComplete","node","v0","v1","v2","v3","v4","v5","hash","MIN_PORT","MAX_PORT","PortTag","_ref2","inValid","tagProps","Tag","color","isValidPortStr","portStr","isPortRangeStr","splitPortRange","split","start","end","map","v","parseInt","toString","portRange","transformPortValuesToNumbers","values","parsePortRangeToNumbers","baiClient","useSuspendedBackendaiClient","tooltip","Trans","i18nKey","rule","_config","maxCountForPreopenPorts","Error","count","allPorts","port","Select","mode","tagRender","hasDuplicated","getFieldValue","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","otherProps","hasOpenedValidationTour","setHasOpenedValidationTour","useBAISettingUserState","steps","title","description","target","_document$getElements","document","getElementsByClassName","_document$getElements2","_document$getElements3","querySelector","Tour","SessionOwnerSetterPreviewCard","isActive","useWatch","currentUserRole","useCurrentUserRole","BAICard","size","getFieldError","_jsxs","Descriptions","column","fetchingEmail","setFetchingEmail","useState","relayEvn","useRelayEnvironment","data","isFetching","useTanQuery","queryKey","queryFn","email","query","_SessionOwnerSetterCardQuery","require","fetchQuery","toPromise","enabled","ownerKeypairs","keypairs","owner","user","nonExistentOwner","valuePropName","noStyle","Switch","display","HiddenFormItem","domain_name","dependencies","_Fragment","Flex","required","flex","validateStatus","help","Search","onSearch","validateFields","then","catch","setFieldsValue","accesskey","project","resourceGroup","loading","enterButton","CheckIcon","BAISelect","options","k","access_key","autoSelectOption","disabled","Row","gutter","marginSM","Col","span","groups","g","Suspense","fallback","ResourceGroupSelect","projectName","autoSelectDefault","_baiClient$supports","_baiClient$supports2","_form$getFieldValue","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue6$","_form$getFieldValue7","_form$getFieldValue7$","_form$getFieldValue8","_form$getFieldValue8$","_form$getFieldValue9","_form$getFieldValue9$","_form$getFieldValue12","_form$getFieldValue13","_form$getFieldValue14","_form$getFieldValue15","_form$getFieldValue16","_form$getFieldValue17","_form$getFieldValue18","_form$getFieldValue19","_form$getFieldValue20","_form$getFieldValue21","_form$getFieldValue22","_form$getFieldValue23","_form$getFieldValue24","_form$getFieldValue25","_form$getFieldValue26","_form$getFieldValue27","_form$getFieldValue28","_baiClient$_config","_form$getFieldValue29","_form$getFieldValue31","_form$getFieldValue32","onClickEditStep","sessionType","preserve","supportBatchTimeout","supports","supportExtendedImageInfo","currentProject","useCurrentProjectValue","getBaseVersion","getBaseImage","tagAlias","useBackendAIImageMetaData","isDarkMode","useThemeMode","labelStyle","whiteSpace","contentStyle","overflow","SourceCodeViewer","language","Typography","Text","idx","flexFlow","ImageMetaIcon","image","version","manual","marginRight","direction","wrap","code","wordBreak","copyable","text","base_image_name","Divider","architecture","tags","tag","_$find","_form$getFieldValue10","_form$getFieldValue11","isCustomized","key","tagValue","labels","aliasedTag","preserveDotStartCase","DoubleTag","colorPrimary","getImageFullName","gap","sizeXS","ImageTags","SyntaxHighlighter","dark","codeTagProps","customStyle","margin","variable","join","align","getFieldWarning","Alert","showIcon","ResourceNumbersOfSession","resource","hideAgents","containerCount","Table","rowKey","pagination","columns","dataIndex","render","record","opacity","dataSource","_form$getFieldValue30","alias","useRecentSessionHistory","recentSessionHistory","setRecentSessionHistory","push","useEventNotStable","id","params","createdAt","newRecentSessionHistory","generateRandomString","Date","slice","clear","remove","filter","item","modalProps","sessionHistory","getImageAliasName","selectedHistoryId","setSelectedHistoryId","parsedSessionHistory","useMemo","history","URLSearchParams","formValues","JSON","parse","get","BAIModal","okButtonProps","okText","onOk","_modalProps$onRequest","onRequestClose","call","onCancel","showHeader","scroll","x","rowSelection","selectedRowKeys","onSelect","onRow","imageStr","environments","sessionName","fromNow","_convertBinarySizeUni","_convertBinarySizeUni2","ResourceNumber","convertBinarySizeUnit","number","opts","shmem","accelerator","acceleratorType","generateSessionId","possible","i","charAt","Math","floor","random","SessionLauncherPage","_baiClient$_config3","_steps$currentStep","app","App","useApp","sessionMode","mainContentDivRef","useAtomValue","mainContentDivRefState","currentGlobalResourceGroup","setCurrentGlobalResourceGroup","useCurrentResourceGroupState","isStartingSession","setIsStartingSession","INITIAL_FORM_VALUES","_baiClient$_config2","allocationPreset","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","command","scheduleDate","timeoutEnabled","timeout","timeoutUnit","envvars","default_session_environment","environment","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","StepParam","withDefault","NumberParam","FormValuesParam","JsonParam","AppOptionParam","step","currentStep","formValuesFromQueryParams","redirectTo","appOption","appOptionFromQueryParams","setQuery","useQueryParams","StringParam","search","useLocation","webuiNavigate","useWebUINavigate","isOpenTemplateModal","toggle","toggleIsOpenTemplateModal","useToggle","upsertNotification","useSetBAINotification","pushSessionHistory","run","syncFormToURLWithDebounce","useDebounceFn","currentValue","getFieldsValue","sanitizeSensitiveEnv","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","useForm","mergedInitialValues","_mainContentDivRef$cu","current","scrollTo","filterEmptyItem","PlayCircleFilled","currentStepKey","hasError","getFieldsError","errors","finalStepLastValidateTime","setFinalStepLastValidateTime","useUpdatableState","error","finally","setValidationTourOpen","validationTourOpen","isQueryReset","setIsQueryReset","useLayoutEffect","resetFields","justifyContent","maxWidth","justify","Title","level","marginTop","paddingRight","paddingLeft","Provider","onFormChange","info","layout","requiredMark","initialValues","Radio","SessionNameFormItem","TextArea","autoSize","BAIIntervalView","delay","callback","isBefore","triggerKey","time","Checkbox","checked","add","shouldUpdate","prev","next","_prev$batch","_next$batch","async","DatePickerISO","showTime","disabledDate","startOf","unit","timeDuration","formattedDuration","formatDuration","durationText","InputNumber","addonAfter","tabIndex","minWidth","SessionOwnerSetterCard","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableAgentSelect","enableNumOfSessions","enableResourcePresets","showRemainingWarning","checkedChildren","unCheckedChildren","_prev$hpcOptimization","_next$hpcOptimization","marginMD","xs","sm","stringMode","VFolderTableFormItem","vfolder","_vfolder$name","startsWith","PortSelectFormItem","SessionLauncherPreview","stepKey","Popconfirm","onConfirm","QuestionCircleOutlined","danger","LeftOutlined","Tooltip","PlayCircleOutlined","startSession","usedSearchParams","_values$batch","_values$batch2","_values$batch3","_baiClient$_config4","_values$owner","_baiClient$_config5","mounts","modal","confirm","content","imageFullName","kernelName","sessionInfo","batchTimeout","config","agent","agent_list","bootstrap_script","startsAt","startupCommand","group_name","domain","domainName","scaling_group","owner_access_key","cluster_mode","cluster_size","maxWaitSeconds","cpu","mem","compareNumberWithUnits","mount_map","vfoldersAliasMap","env","preopen_ports","ports","sessionPromises","num_of_sessions","formattedSessionName","createIfNotExists","res","created","err","_err$message","includes","backupTo","window","location","pathname","backgroundTask","promise","all","pending","resolved","duration","firstSession","to","sessionId","appOptions","kernelId","service_info","servicePorts","Array","isArray","a","globalThis","appLauncher","showLauncher","toText","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","items","s","SessionTemplateModal","formValue","fieldsValue","SessionLauncherValidationTour","scrollIntoViewOptions"],"sourceRoot":""}