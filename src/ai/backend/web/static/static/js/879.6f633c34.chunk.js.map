{"version":3,"file":"static/js/879.6f633c34.chunk.js","mappings":"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","sources":["components/ContainerRegistryEditorModal.tsx","../node_modules/@ant-design/icons-svg/es/asn/SyncOutlined.js","../node_modules/@ant-design/icons/es/icons/SyncOutlined.js","components/ContainerRegistryList.tsx","components/__generated__/ContainerRegistryEditorModalCreateMutation.graphql.ts","components/__generated__/ContainerRegistryEditorModalFragment.graphql.ts","components/__generated__/ContainerRegistryEditorModalModifyMutation.graphql.ts","components/__generated__/ContainerRegistryListDeleteMutation.graphql.ts","components/__generated__/ContainerRegistryListDomainMutation.graphql.ts","components/__generated__/ContainerRegistryListQuery.graphql.ts","pages/EnvironmentPage.tsx","../node_modules/@ant-design/icons-svg/es/asn/DeleteOutlined.js","../node_modules/@ant-design/icons/es/icons/DeleteOutlined.js"],"sourcesContent":["import BAIModal, { BAIModalProps } from './BAIModal';\nimport { ContainerRegistryEditorModalCreateMutation } from './__generated__/ContainerRegistryEditorModalCreateMutation.graphql';\nimport { ContainerRegistryEditorModalFragment$key } from './__generated__/ContainerRegistryEditorModalFragment.graphql';\nimport { ContainerRegistryEditorModalModifyMutation } from './__generated__/ContainerRegistryEditorModalModifyMutation.graphql';\nimport {\n  message,\n  Form,\n  Input,\n  Select,\n  Modal,\n  Checkbox,\n  FormInstance,\n} from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment, useMutation } from 'react-relay';\n\ninterface ContainerRegistryEditorModalProps\n  extends Omit<BAIModalProps, 'onOk'> {\n  existingHostnames?: string[];\n  onOk: (type: 'create' | 'modify') => void;\n  containerRegistryFrgmt?: ContainerRegistryEditorModalFragment$key | null;\n}\nconst ContainerRegistryEditorModal: React.FC<\n  ContainerRegistryEditorModalProps\n> = ({\n  existingHostnames,\n  containerRegistryFrgmt = null,\n  onOk,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const formRef = useRef<FormInstance>(null);\n\n  const [messageAPI, contextHolder] = message.useMessage();\n  const [modal, modalContextHolder] = Modal.useModal();\n\n  const containerRegistry = useFragment(\n    graphql`\n      fragment ContainerRegistryEditorModalFragment on ContainerRegistry {\n        id\n        hostname\n        config {\n          url\n          type\n          project\n          username\n          ssl_verify\n        }\n      }\n    `,\n    containerRegistryFrgmt,\n  );\n  const [commitCreateRegistry, isInflightCreateRegistry] =\n    useMutation<ContainerRegistryEditorModalCreateMutation>(graphql`\n      mutation ContainerRegistryEditorModalCreateMutation(\n        $hostname: String!\n        $props: CreateContainerRegistryInput!\n      ) {\n        create_container_registry(hostname: $hostname, props: $props) {\n          container_registry {\n            id\n            hostname\n            config {\n              url\n              type\n              project\n              username\n              password\n              ssl_verify\n            }\n          }\n        }\n      }\n    `);\n\n  const [commitModifyRegistry, isInflightModifyRegistry] =\n    useMutation<ContainerRegistryEditorModalModifyMutation>(graphql`\n      mutation ContainerRegistryEditorModalModifyMutation(\n        $hostname: String!\n        $props: ModifyContainerRegistryInput!\n      ) {\n        modify_container_registry(hostname: $hostname, props: $props) {\n          container_registry {\n            id\n            hostname\n            config {\n              url\n              type\n              project\n              username\n              password\n              ssl_verify\n            }\n          }\n        }\n      }\n    `);\n\n  const handleSave = async () => {\n    return formRef.current\n      ?.validateFields()\n      .then((values) => {\n        const mutationVariables = {\n          hostname: values.hostname,\n          props: {\n            url: values.config.url,\n            type: values.config.type,\n            project:\n              values.config.project === 'docker'\n                ? undefined\n                : values.config.project,\n            username: _.isEmpty(values.config.username)\n              ? null\n              : values.config.username,\n            password: values.isChangedPassword\n              ? _.isEmpty(values.config.password)\n                ? null // unset\n                : values.config.password\n              : undefined, // no change\n          },\n        };\n        if (containerRegistry) {\n          if (!values.isChangedPassword) {\n            delete mutationVariables.props.password;\n          }\n          commitModifyRegistry({\n            variables: mutationVariables,\n            onCompleted: (res, error) => {\n              if (error) {\n                messageAPI.error(t('dialog.ErrorOccurred'));\n              } else {\n                onOk && onOk('modify');\n              }\n            },\n            onError: (error) => {\n              messageAPI.error(t('dialog.ErrorOccurred'));\n            },\n          });\n        } else {\n          commitCreateRegistry({\n            variables: mutationVariables,\n            onCompleted: (res, error) => {\n              if (error) {\n                messageAPI.error(t('dialog.ErrorOccurred'));\n              } else {\n                onOk && onOk('create');\n              }\n            },\n            onError(error) {\n              messageAPI.error(t('dialog.ErrorOccurred'));\n            },\n          });\n        }\n      })\n      .catch((error) => {});\n  };\n  return (\n    <BAIModal\n      title={\n        containerRegistry\n          ? t('registry.ModifyRegistry')\n          : t('registry.AddRegistry')\n      }\n      okText={containerRegistry ? t('button.Save') : t('button.Add')}\n      confirmLoading={isInflightCreateRegistry || isInflightModifyRegistry}\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            if (\n              _.includes(values.config?.type, 'harbor') &&\n              (_.isEmpty(values.config.username) ||\n                (containerRegistry\n                  ? values.isChangedPassword &&\n                    _.isEmpty(values.config.password)\n                  : _.isEmpty(values.config.password)))\n            ) {\n              modal.confirm({\n                title: t('button.Confirm'),\n                content: t('registry.ConfirmNoUserName'),\n                onOk: () => {\n                  handleSave();\n                },\n              });\n            } else {\n              handleSave();\n            }\n          })\n          .catch(() => {});\n      }}\n      {...modalProps}\n      destroyOnClose\n    >\n      {contextHolder}\n      {modalContextHolder}\n      <Form\n        ref={formRef}\n        layout=\"vertical\"\n        requiredMark=\"optional\"\n        initialValues={\n          containerRegistry\n            ? {\n                ...containerRegistry,\n                config: {\n                  ...containerRegistry.config,\n                  project: containerRegistry.config?.project || undefined,\n                },\n              }\n            : {\n                config: {\n                  type: 'docker',\n                },\n              }\n        }\n        preserve={false}\n      >\n        <Form.Item\n          label={t('registry.Hostname')}\n          name=\"hostname\"\n          required\n          rules={[\n            {\n              required: true,\n              message: t('registry.DescHostnameIsEmpty'),\n              pattern: new RegExp('^.+$'),\n            },\n            {\n              validator: (_, value) => {\n                if (!containerRegistry && existingHostnames?.includes(value)) {\n                  return Promise.reject(\n                    t('registry.RegistryHostnameAlreadyExists'),\n                  );\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input\n            disabled={!!containerRegistry}\n            // placeholder={t('registry.Hostname')}\n            value={containerRegistry?.hostname || undefined}\n          />\n        </Form.Item>\n        <Form.Item\n          name={['config', 'url']}\n          label={t('registry.RegistryURL')}\n          required\n          rules={[\n            {\n              required: true,\n            },\n            {\n              validator: (_, value) => {\n                if (value) {\n                  if (\n                    !value.startsWith('http://') &&\n                    !value.startsWith('https://')\n                  )\n                    return Promise.reject(t('registry.DescURLStartString'));\n                  try {\n                    new URL(value);\n                  } catch (e) {\n                    return Promise.reject(t('registry.DescURLFormat'));\n                  }\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          noStyle\n          shouldUpdate={(prev, next) =>\n            _.isEmpty(prev.config?.password) !==\n            _.isEmpty(next.config?.password)\n          }\n        >\n          {({ validateFields, getFieldValue }) => {\n            validateFields([['config', 'username']]);\n            return (\n              <Form.Item\n                name={['config', 'username']}\n                label={t('registry.Username')}\n                rules={[\n                  {\n                    required: !_.isEmpty(getFieldValue(['config', 'password'])),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            );\n          }}\n        </Form.Item>\n\n        <Form.Item label={t('registry.Password')}>\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.isChangedPassword !== next.isChangedPassword\n            }\n          >\n            {({ getFieldValue }) => (\n              <Form.Item noStyle name={['config', 'password']}>\n                <Input.Password\n                  disabled={\n                    !_.isEmpty(containerRegistry) &&\n                    !getFieldValue('isChangedPassword')\n                  }\n                />\n              </Form.Item>\n            )}\n          </Form.Item>\n          {!_.isEmpty(containerRegistry) && (\n            <Form.Item noStyle name=\"isChangedPassword\" valuePropName=\"checked\">\n              <Checkbox\n                onChange={(e) => {\n                  if (!e.target.checked) {\n                    formRef.current?.setFieldValue(['config', 'password'], '');\n                  }\n                }}\n              >\n                {t('webui.menu.ChangePassword')}\n              </Checkbox>\n            </Form.Item>\n          )}\n        </Form.Item>\n        <Form.Item\n          name={['config', 'type']}\n          label={t('registry.RegistryType')}\n          required\n          rules={[\n            {\n              required: true,\n              message: t('registry.PleaseSelectOption'),\n            },\n          ]}\n        >\n          <Select\n            options={[\n              {\n                value: 'docker',\n              },\n              {\n                value: 'harbor',\n              },\n              {\n                value: 'harbor2',\n              },\n            ]}\n            onChange={() => {\n              // form.validateFields();\n            }}\n          ></Select>\n        </Form.Item>\n        <Form.Item\n          shouldUpdate={(prev, next) =>\n            prev?.config?.type !== next?.config?.type\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              getFieldValue(['config', 'type']) !== 'docker' && (\n                <Form.Item\n                  name={['config', 'project']}\n                  label={t('registry.ProjectName')}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                      message: t('registry.ProjectNameIsRequired'),\n                    },\n                  ]}\n                >\n                  {/* <Input\n                  // disabled={\n                  //   form.getFieldValue(['config', 'type']) === 'docker'\n                  // }\n                  /> */}\n                  <Select\n                    mode=\"tags\"\n                    open={false}\n                    tokenSeparators={[',', ' ']}\n                    suffixIcon={null}\n                  />\n                </Form.Item>\n              )\n            );\n          }}\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default ContainerRegistryEditorModal;\n","// This icon file is generated automatically.\nvar SyncOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M168 504.2c1-43.7 10-86.1 26.9-126 17.3-41 42.1-77.7 73.7-109.4S337 212.3 378 195c42.4-17.9 87.4-27 133.9-27s91.5 9.1 133.8 27A341.5 341.5 0 01755 268.8c9.9 9.9 19.2 20.4 27.8 31.4l-60.2 47a8 8 0 003 14.1l175.7 43c5 1.2 9.9-2.6 9.9-7.7l.8-180.9c0-6.7-7.7-10.5-12.9-6.3l-56.4 44.1C765.8 155.1 646.2 92 511.8 92 282.7 92 96.3 275.6 92 503.8a8 8 0 008 8.2h60c4.4 0 7.9-3.5 8-7.8zm756 7.8h-60c-4.4 0-7.9 3.5-8 7.8-1 43.7-10 86.1-26.9 126-17.3 41-42.1 77.8-73.7 109.4A342.45 342.45 0 01512.1 856a342.24 342.24 0 01-243.2-100.8c-9.9-9.9-19.2-20.4-27.8-31.4l60.2-47a8 8 0 00-3-14.1l-175.7-43c-5-1.2-9.9 2.6-9.9 7.7l-.7 181c0 6.7 7.7 10.5 12.9 6.3l56.4-44.1C258.2 868.9 377.8 932 512.2 932c229.2 0 415.5-183.7 419.8-411.8a8 8 0 00-8-8.2z\" } }] }, \"name\": \"sync\", \"theme\": \"outlined\" };\nexport default SyncOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport SyncOutlinedSvg from \"@ant-design/icons-svg/es/asn/SyncOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar SyncOutlined = function SyncOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: SyncOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  SyncOutlined.displayName = 'SyncOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(SyncOutlined);","import { filterNonNullItems } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useBAINotification } from '../hooks/useBAINotification';\nimport { usePainKiller } from '../hooks/usePainKiller';\nimport BAIModal from './BAIModal';\nimport ContainerRegistryEditorModal from './ContainerRegistryEditorModal';\nimport Flex from './Flex';\nimport { ContainerRegistryListDeleteMutation } from './__generated__/ContainerRegistryListDeleteMutation.graphql';\nimport { ContainerRegistryListDomainMutation } from './__generated__/ContainerRegistryListDomainMutation.graphql';\nimport {\n  ContainerRegistryListQuery,\n  ContainerRegistryListQuery$data,\n} from './__generated__/ContainerRegistryListQuery.graphql';\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  PlusOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n  SyncOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Form,\n  Input,\n  Switch,\n  Table,\n  Tag,\n  Tooltip,\n  Typography,\n  theme,\n  message,\n} from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useState, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery, useMutation } from 'react-relay';\n\nexport type ContainerRegistry = NonNullable<\n  NonNullable<\n    NonNullable<ContainerRegistryListQuery$data>['container_registries']\n  >\n>[0];\n\nconst ContainerRegistryList: React.FC<{\n  style?: React.CSSProperties;\n}> = ({ style }) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [fetchKey, updateFetchKey] = useUpdatableState('initial-fetch');\n  const [isPendingReload, startReloadTransition] = useTransition();\n  const painKiller = usePainKiller();\n  const [messageAPI, contextHolder] = message.useMessage();\n  const [, { upsertNotification }] = useBAINotification();\n  const { container_registries, domain } =\n    useLazyLoadQuery<ContainerRegistryListQuery>(\n      graphql`\n        query ContainerRegistryListQuery($domain: String!) {\n          container_registries {\n            ...ContainerRegistryEditorModalFragment\n            id\n            hostname\n            config {\n              url\n              type\n              project\n              username\n              password\n              ssl_verify\n            }\n          }\n          domain(name: $domain) {\n            name\n            allowed_docker_registries\n          }\n        }\n      `,\n      {\n        domain: baiClient._config.domainName,\n      },\n      {\n        fetchPolicy: 'store-and-network',\n        fetchKey,\n      },\n    );\n\n  const [commitDeleteMutation, isInFlightDeleteMutation] =\n    useMutation<ContainerRegistryListDeleteMutation>(graphql`\n      mutation ContainerRegistryListDeleteMutation($hostname: String!) {\n        delete_container_registry(hostname: $hostname) {\n          container_registry {\n            id\n          }\n        }\n      }\n    `);\n\n  const [commitDomainMutation, isInFlightDomationMutation] =\n    useMutation<ContainerRegistryListDomainMutation>(graphql`\n      mutation ContainerRegistryListDomainMutation(\n        $domain: String!\n        $allowed_docker_registries: [String]!\n      ) {\n        modify_domain(\n          name: $domain\n          props: { allowed_docker_registries: $allowed_docker_registries }\n        ) {\n          ok\n          # TODO: update domain when it supports relay global id\n          # domain {\n          #   name\n          #   allowed_vfolder_hosts\n          # }\n        }\n      }\n    `);\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [editingRegistry, setEditingRegistry] =\n    useState<ContainerRegistry>(null);\n  const [deletingRegistry, setDeletingRegistry] =\n    useState<ContainerRegistry>(null);\n  const [deletingConfirmText, setDeletingConfirmText] = useState('');\n  const [isNewModalOpen, setIsNewModalOpen] = useState(false);\n\n  const [inFlightHostName, setInFlightHostName] = useState<string>();\n\n  // const deferredInFlightDomainName = useDeferredValue(inFlightDomainName);\n\n  const rescanImage = async (hostname: string) => {\n    // const indicator: any =\n    //   // @ts-ignore\n    //   await globalThis.lablupIndicator.start('indeterminate');\n\n    // indicator.set(10, t('registry.UpdatingRegistryInfo'));\n    const notiKey = upsertNotification({\n      // key: notiKey,\n      message: `${hostname} ${t('maintenance.RescanImages')}`,\n      description: t('registry.UpdatingRegistryInfo'),\n      open: true,\n      backgroundTask: {\n        status: 'pending',\n      },\n      duration: 0,\n    });\n    const handleReScanError = (err: any) => {\n      console.log(err);\n      upsertNotification({\n        key: notiKey,\n        backgroundTask: {\n          status: 'rejected',\n        },\n        duration: 1,\n      });\n      if (err && err.message) {\n        // @ts-ignore\n        globalThis.lablupNotification.text = painKiller.relieve(err.title);\n        // @ts-ignore\n        globalThis.lablupNotification.detail = err.message;\n        // @ts-ignore\n        globalThis.lablupNotification.show(true, err);\n      }\n    };\n    baiClient.maintenance\n      .rescan_images(hostname)\n      .then(({ rescan_images }: any) => {\n        if (rescan_images.ok) {\n          upsertNotification({\n            key: notiKey,\n            backgroundTask: {\n              status: 'pending',\n              percent: 0,\n              taskId: rescan_images.task_id,\n              statusDescriptions: {\n                pending: t('registry.RescanImages'),\n                resolved: t('registry.RegistryUpdateFinished'),\n                rejected: t('registry.RegistryUpdateFailed'),\n              },\n            },\n          });\n          // indicator.set(0, t('registry.RescanImages'));\n          // const sse: EventSource = baiClient.maintenance.attach_background_task(\n          //   rescan_images.task_id,\n          // );\n          // sse.addEventListener('bgtask_updated', (e) => {\n          //   const data = JSON.parse(e['data']);\n          //   const ratio = data.current_progress / data.total_progress;\n          //   indicator.set(100 * ratio, t('registry.RescanImages'));\n          // });\n          // sse.addEventListener('bgtask_done', () => {\n          //   const event = new CustomEvent('image-rescanned');\n          //   document.dispatchEvent(event);\n          //   indicator.set(100, t('registry.RegistryUpdateFinished'));\n          //   sse.close();\n          // });\n          // sse.addEventListener('bgtask_failed', (e) => {\n          //   console.log('bgtask_failed', e['data']);\n          //   sse.close();\n          //   handleReScanError(\n          //     new Error('Background Image scanning task has failed'),\n          //   );\n          // });\n          // sse.addEventListener('bgtask_cancelled', () => {\n          //   sse.close();\n          //   handleReScanError(\n          //     new Error('Background Image scanning task has been cancelled'),\n          //   );\n          // });\n        } else {\n          upsertNotification({\n            key: notiKey,\n            backgroundTask: {\n              status: 'rejected',\n            },\n            duration: 1,\n          });\n          // indicator.set(50, t('registry.RegistryUpdateFailed'));\n          // indicator.end(1000);\n          // TODO: handle notification in react side\n          // @ts-ignore\n          // globalThis.lablupNotification.text = painKiller.relieve(\n          //   rescan_images.msg,\n          // );\n          // @ts-ignore\n          // globalThis.lablupNotification.detail = rescan_images.msg;\n          // @ts-ignore\n          // globalThis.lablupNotification.show();\n        }\n      })\n      .catch(handleReScanError);\n  };\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        flex: 1,\n        ...style,\n        // height: 'calc(100vh - 183px)',\n      }}\n    >\n      {contextHolder}\n      <Flex\n        direction=\"row\"\n        justify=\"end\"\n        gap={'sm'}\n        style={{ padding: token.paddingSM }}\n      >\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingReload}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startReloadTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n        <Button\n          type=\"primary\"\n          icon={<PlusOutlined />}\n          onClick={() => {\n            setIsNewModalOpen(true);\n          }}\n        >\n          {t('registry.AddRegistry')}\n        </Button>\n      </Flex>\n      <Table\n        rowKey={(record) => record.id}\n        scroll={{ x: 'max-content' }}\n        pagination={false}\n        columns={[\n          // {\n          //   title: '#',\n          //   dataIndex: 'id',\n          // },\n          {\n            title: t('registry.Hostname'),\n            dataIndex: 'hostname',\n            // fixed: 'left',\n          },\n          {\n            title: t('registry.RegistryURL'),\n            dataIndex: ['config', 'url'],\n          },\n          {\n            title: t('registry.Type'),\n            dataIndex: ['config', 'type'],\n          },\n          {\n            title: t('registry.HarborProject'),\n            render: (value, record) => {\n              return _.map(record.config?.project, (prjName) => {\n                return <Tag key={prjName}>{prjName || ''}</Tag>;\n              });\n            },\n          },\n          {\n            title: t('registry.Username'),\n            dataIndex: ['config', 'username'],\n          },\n          {\n            title: t('registry.Password'),\n            dataIndex: ['config', 'password'],\n          },\n          {\n            title: t('general.Enabled'),\n            render: (value, record) => {\n              const isEnabled = _.includes(\n                domain?.allowed_docker_registries,\n                record.hostname,\n              );\n              return (\n                <Switch\n                  checked={\n                    inFlightHostName === record.hostname + fetchKey\n                      ? !isEnabled\n                      : isEnabled\n                  }\n                  disabled={isPendingReload || isInFlightDomationMutation}\n                  loading={inFlightHostName === record.hostname + fetchKey}\n                  onChange={(isOn) => {\n                    if (!_.isString(record.hostname)) return;\n                    let newAllowedDockerRegistries = _.clone(\n                      domain?.allowed_docker_registries || [],\n                    ) as string[];\n                    if (isOn) {\n                      newAllowedDockerRegistries.push(record.hostname);\n                    } else {\n                      newAllowedDockerRegistries = _.without(\n                        newAllowedDockerRegistries,\n                        record.hostname,\n                      );\n                    }\n\n                    setInFlightHostName(record.hostname + fetchKey);\n                    commitDomainMutation({\n                      variables: {\n                        domain: baiClient._config.domainName,\n                        allowed_docker_registries: newAllowedDockerRegistries,\n                      },\n                      onCompleted: (data) => {\n                        startReloadTransition(() => {\n                          updateFetchKey();\n                        });\n\n                        messageAPI.info({\n                          key: 'registry-enabled',\n                          content: isOn\n                            ? t('registry.RegistryTurnedOn')\n                            : t('registry.RegistryTurnedOff'),\n                        });\n                      },\n                    });\n                  }}\n                />\n                // <Button type=\"primary\">\n                //   {record?.config?.ssl_verify ? 'Yes' : 'No'}\n                // </Button>\n              );\n            },\n          },\n          {\n            title: t('general.Control'),\n            fixed: 'right',\n            render(value, record, index) {\n              return (\n                <Flex>\n                  <Tooltip title={t('button.Edit')}>\n                    <Button\n                      size=\"large\"\n                      style={{\n                        color: token.colorInfo,\n                      }}\n                      type=\"text\"\n                      icon={<SettingOutlined />}\n                      onClick={() => {\n                        setEditingRegistry(record);\n                      }}\n                    />\n                  </Tooltip>\n                  <Tooltip title={t('button.Delete')}>\n                    <Button\n                      size=\"large\"\n                      danger\n                      type=\"text\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => {\n                        setDeletingRegistry(record);\n                      }}\n                    />\n                  </Tooltip>\n                  <Tooltip title={t('maintenance.RescanImages')}>\n                    <Button\n                      size=\"large\"\n                      type=\"text\"\n                      icon={\n                        <SyncOutlined\n                          onClick={() => {\n                            record.hostname && rescanImage(record.hostname);\n                          }}\n                        />\n                      }\n                    />\n                  </Tooltip>\n                </Flex>\n              );\n            },\n          },\n        ]}\n        dataSource={filterNonNullItems(container_registries)}\n      />\n      <ContainerRegistryEditorModal\n        containerRegistryFrgmt={editingRegistry}\n        existingHostnames={_.map(\n          container_registries,\n          (r) => r?.hostname || '',\n        )}\n        open={!!editingRegistry || isNewModalOpen}\n        onOk={(type) => {\n          if (type === 'create') {\n            updateFetchKey();\n            messageAPI.info(t('registry.RegistrySuccessfullyAdded'));\n          } else if (type === 'modify') {\n            messageAPI.info(t('registry.RegistrySuccessfullyModified'));\n          }\n          setEditingRegistry(null);\n          setIsNewModalOpen(false);\n        }}\n        onCancel={() => {\n          setEditingRegistry(null);\n          setIsNewModalOpen(false);\n        }}\n        centered={false}\n      />\n      <BAIModal\n        title={\n          <>\n            <ExclamationCircleOutlined\n              style={{\n                color: token.colorWarning,\n              }}\n            />{' '}\n            {t('dialog.warning.CannotBeUndone')}\n          </>\n        }\n        okText={t('button.Delete')}\n        okButtonProps={{\n          danger: true,\n          disabled: deletingConfirmText !== deletingRegistry?.hostname,\n        }}\n        onOk={() => {\n          if (deletingRegistry) {\n            commitDeleteMutation({\n              variables: {\n                hostname: deletingRegistry.hostname || '',\n              },\n              onCompleted: (response, error) => {\n                if (error) {\n                  setDeletingRegistry(null);\n                  messageAPI.error({\n                    key: 'registry-deletion-failed',\n                    content: t('dialog.ErrorOccurred'),\n                  });\n                } else {\n                  startReloadTransition(() => {\n                    updateFetchKey();\n                  });\n                  messageAPI.info({\n                    key: 'registry-deleted',\n                    content: t('registry.RegistrySuccessfullyDeleted'),\n                  });\n                  setDeletingRegistry(null);\n                }\n              },\n              onError: (error) => {\n                messageAPI.error({\n                  key: 'registry-deletion-failed',\n                  content: t('dialog.ErrorOccurred'),\n                });\n              },\n            });\n          } else {\n            setDeletingRegistry(null);\n          }\n        }}\n        confirmLoading={isInFlightDeleteMutation}\n        onCancel={() => {\n          setDeletingRegistry(null);\n        }}\n        destroyOnClose\n        open={!!deletingRegistry}\n      >\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          gap=\"sm\"\n          style={{\n            marginTop: token.marginMD,\n          }}\n        >\n          <Typography.Text>\n            <Typography.Text code>{deletingRegistry?.hostname}</Typography.Text>{' '}\n            {t('registry.TypeRegistryNameToDelete')}\n          </Typography.Text>\n          <Form>\n            <Form.Item\n              name={'confirmText'}\n              // help=\"asdf\"\n              // validateStatus={\n              //   deletingConfirmText &&\n              //   deletingConfirmText !== deletingRegistry?.hostname\n              //     ? 'error'\n              //     : undefined\n              // }\n              rules={[\n                {\n                  required: true,\n                  message: t('registry.HostnameDoesNotMatch'),\n                  validator: async () => {\n                    if (deletingConfirmText === deletingRegistry?.hostname) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject();\n                  },\n                },\n              ]}\n            >\n              <Input\n                autoComplete=\"off\"\n                value={deletingConfirmText}\n                onChange={(e) => setDeletingConfirmText(e.target.value)}\n              />\n            </Form.Item>\n          </Form>\n        </Flex>\n      </BAIModal>\n    </Flex>\n  );\n};\n\nexport default ContainerRegistryList;\n","/**\n * @generated SignedSource<<6b43f0cb806de0ee3c3c1e66e826d277>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type CreateContainerRegistryInput = {\n  password?: string | null;\n  project?: ReadonlyArray<string | null> | null;\n  ssl_verify?: boolean | null;\n  type: string;\n  url: string;\n  username?: string | null;\n};\nexport type ContainerRegistryEditorModalCreateMutation$variables = {\n  hostname: string;\n  props: CreateContainerRegistryInput;\n};\nexport type ContainerRegistryEditorModalCreateMutation$data = {\n  readonly create_container_registry: {\n    readonly container_registry: {\n      readonly config: {\n        readonly password: string | null;\n        readonly project: ReadonlyArray<string | null> | null;\n        readonly ssl_verify: boolean | null;\n        readonly type: string;\n        readonly url: string;\n        readonly username: string | null;\n      } | null;\n      readonly hostname: string | null;\n      readonly id: string;\n    } | null;\n  } | null;\n};\nexport type ContainerRegistryEditorModalCreateMutation = {\n  response: ContainerRegistryEditorModalCreateMutation$data;\n  variables: ContainerRegistryEditorModalCreateMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"hostname\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"props\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"hostname\",\n        \"variableName\": \"hostname\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"props\"\n      }\n    ],\n    \"concreteType\": \"CreateContainerRegistry\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"create_container_registry\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registry\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"hostname\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"url\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"type\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"project\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"username\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"password\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"ssl_verify\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryEditorModalCreateMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryEditorModalCreateMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"f076fed995ef5122c04aaba2b76d22d5\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryEditorModalCreateMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryEditorModalCreateMutation(\\n  $hostname: String!\\n  $props: CreateContainerRegistryInput!\\n) {\\n  create_container_registry(hostname: $hostname, props: $props) {\\n    container_registry {\\n      id\\n      hostname\\n      config {\\n        url\\n        type\\n        project\\n        username\\n        password\\n        ssl_verify\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"547863dc03f9faf465e8a26175e5a101\";\n\nexport default node;\n","/**\n * @generated SignedSource<<da5f88cb0510adba64bff3a06549f145>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerRegistryEditorModalFragment$data = {\n  readonly config: {\n    readonly project: ReadonlyArray<string | null> | null;\n    readonly ssl_verify: boolean | null;\n    readonly type: string;\n    readonly url: string;\n    readonly username: string | null;\n  } | null;\n  readonly hostname: string | null;\n  readonly id: string;\n  readonly \" $fragmentType\": \"ContainerRegistryEditorModalFragment\";\n};\nexport type ContainerRegistryEditorModalFragment$key = {\n  readonly \" $data\"?: ContainerRegistryEditorModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerRegistryEditorModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerRegistryEditorModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"hostname\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"ContainerRegistryConfig\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"config\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"url\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"type\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"project\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"username\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"ssl_verify\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ContainerRegistry\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"57f748e00ec698f8b3e133570e377c71\";\n\nexport default node;\n","/**\n * @generated SignedSource<<0c8fab778c9e3da8a9fa75a7ebb37d35>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ModifyContainerRegistryInput = {\n  password?: string | null;\n  project?: ReadonlyArray<string | null> | null;\n  ssl_verify?: boolean | null;\n  type?: string | null;\n  url?: string | null;\n  username?: string | null;\n};\nexport type ContainerRegistryEditorModalModifyMutation$variables = {\n  hostname: string;\n  props: ModifyContainerRegistryInput;\n};\nexport type ContainerRegistryEditorModalModifyMutation$data = {\n  readonly modify_container_registry: {\n    readonly container_registry: {\n      readonly config: {\n        readonly password: string | null;\n        readonly project: ReadonlyArray<string | null> | null;\n        readonly ssl_verify: boolean | null;\n        readonly type: string;\n        readonly url: string;\n        readonly username: string | null;\n      } | null;\n      readonly hostname: string | null;\n      readonly id: string;\n    } | null;\n  } | null;\n};\nexport type ContainerRegistryEditorModalModifyMutation = {\n  response: ContainerRegistryEditorModalModifyMutation$data;\n  variables: ContainerRegistryEditorModalModifyMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"hostname\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"props\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"hostname\",\n        \"variableName\": \"hostname\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"props\"\n      }\n    ],\n    \"concreteType\": \"ModifyContainerRegistry\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_container_registry\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registry\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"hostname\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"url\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"type\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"project\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"username\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"password\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"ssl_verify\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryEditorModalModifyMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryEditorModalModifyMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"5157cbd573b855028a9856c295dab17c\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryEditorModalModifyMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryEditorModalModifyMutation(\\n  $hostname: String!\\n  $props: ModifyContainerRegistryInput!\\n) {\\n  modify_container_registry(hostname: $hostname, props: $props) {\\n    container_registry {\\n      id\\n      hostname\\n      config {\\n        url\\n        type\\n        project\\n        username\\n        password\\n        ssl_verify\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"0fe59a8682e5d7c502bc48da7cc3320a\";\n\nexport default node;\n","/**\n * @generated SignedSource<<55d0f768ece6af02582233662ba64396>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ContainerRegistryListDeleteMutation$variables = {\n  hostname: string;\n};\nexport type ContainerRegistryListDeleteMutation$data = {\n  readonly delete_container_registry: {\n    readonly container_registry: {\n      readonly id: string;\n    } | null;\n  } | null;\n};\nexport type ContainerRegistryListDeleteMutation = {\n  response: ContainerRegistryListDeleteMutation$data;\n  variables: ContainerRegistryListDeleteMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"hostname\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"hostname\",\n        \"variableName\": \"hostname\"\n      }\n    ],\n    \"concreteType\": \"DeleteContainerRegistry\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"delete_container_registry\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registry\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryListDeleteMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryListDeleteMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"4482108b7e256e27225f91b432f0a856\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryListDeleteMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryListDeleteMutation(\\n  $hostname: String!\\n) {\\n  delete_container_registry(hostname: $hostname) {\\n    container_registry {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"131801c7f9561f645743bbbe4b464676\";\n\nexport default node;\n","/**\n * @generated SignedSource<<92bcd8c8585065616500e3e90ed713d0>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ContainerRegistryListDomainMutation$variables = {\n  allowed_docker_registries: ReadonlyArray<string | null>;\n  domain: string;\n};\nexport type ContainerRegistryListDomainMutation$data = {\n  readonly modify_domain: {\n    readonly ok: boolean | null;\n  } | null;\n};\nexport type ContainerRegistryListDomainMutation = {\n  response: ContainerRegistryListDomainMutation$data;\n  variables: ContainerRegistryListDomainMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"allowed_docker_registries\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"domain\"\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"domain\"\n      },\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"allowed_docker_registries\",\n            \"variableName\": \"allowed_docker_registries\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"props\"\n      }\n    ],\n    \"concreteType\": \"ModifyDomain\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_domain\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"ok\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryListDomainMutation\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v0/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryListDomainMutation\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"569e278934331792cc007f79e8e4c44c\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryListDomainMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryListDomainMutation(\\n  $domain: String!\\n  $allowed_docker_registries: [String]!\\n) {\\n  modify_domain(name: $domain, props: {allowed_docker_registries: $allowed_docker_registries}) {\\n    ok\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8730f4ae61e895ec64fb03e53998b97\";\n\nexport default node;\n","/**\n * @generated SignedSource<<b1047b7db4722f3b93754a8aa0472272>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerRegistryListQuery$variables = {\n  domain: string;\n};\nexport type ContainerRegistryListQuery$data = {\n  readonly container_registries: ReadonlyArray<{\n    readonly config: {\n      readonly password: string | null;\n      readonly project: ReadonlyArray<string | null> | null;\n      readonly ssl_verify: boolean | null;\n      readonly type: string;\n      readonly url: string;\n      readonly username: string | null;\n    } | null;\n    readonly hostname: string | null;\n    readonly id: string;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerRegistryEditorModalFragment\">;\n  } | null> | null;\n  readonly domain: {\n    readonly allowed_docker_registries: ReadonlyArray<string | null> | null;\n    readonly name: string | null;\n  } | null;\n};\nexport type ContainerRegistryListQuery = {\n  response: ContainerRegistryListQuery$data;\n  variables: ContainerRegistryListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"domain\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"hostname\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"url\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"type\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"project\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"username\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"password\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"ssl_verify\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": [\n    {\n      \"kind\": \"Variable\",\n      \"name\": \"name\",\n      \"variableName\": \"domain\"\n    }\n  ],\n  \"concreteType\": \"Domain\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"domain\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"allowed_docker_registries\",\n      \"storageKey\": null\n    }\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registries\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ContainerRegistryEditorModalFragment\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              (v3/*: any*/),\n              (v4/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/)\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      (v9/*: any*/)\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registries\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              (v3/*: any*/),\n              (v4/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/),\n              (v8/*: any*/),\n              (v7/*: any*/)\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      (v9/*: any*/)\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"9f9e16fde586191ea3e0ae553f834b51\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ContainerRegistryListQuery(\\n  $domain: String!\\n) {\\n  container_registries {\\n    ...ContainerRegistryEditorModalFragment\\n    id\\n    hostname\\n    config {\\n      url\\n      type\\n      project\\n      username\\n      password\\n      ssl_verify\\n    }\\n  }\\n  domain(name: $domain) {\\n    name\\n    allowed_docker_registries\\n  }\\n}\\n\\nfragment ContainerRegistryEditorModalFragment on ContainerRegistry {\\n  id\\n  hostname\\n  config {\\n    url\\n    type\\n    project\\n    username\\n    ssl_verify\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"0f4709e3ecfb8366c214098902385269\";\n\nexport default node;\n","import ContainerRegistryList from '../components/ContainerRegistryList';\nimport Flex from '../components/Flex';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { theme } from 'antd';\nimport Card from 'antd/es/card/Card';\nimport { useState, Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ntype TabKey = 'imageList' | 'presetList' | 'registryList';\nconst EnvironmentPage = () => {\n  const { t } = useTranslation();\n  const [curTabKey, setCurTabKey] = useState<TabKey>('imageList');\n  const baiClient = useSuspendedBackendaiClient();\n  const isSupportContainerRegistryGraphQL = baiClient.supports(\n    'container-registry-gql',\n  );\n  const { token } = theme.useToken();\n  return (\n    <Card\n      activeTabKey={curTabKey}\n      onTabChange={(key) => setCurTabKey(key as TabKey)}\n      tabList={[\n        {\n          key: 'imageList',\n          label: t('environment.Images'),\n        },\n        {\n          key: 'presetList',\n          label: t('environment.ResourcePresets'),\n        },\n        ...(baiClient.is_superadmin\n          ? [\n              {\n                key: 'registryList',\n                label: t('environment.Registries'),\n              },\n            ]\n          : []),\n      ]}\n      bodyStyle={{\n        padding: 0,\n        paddingTop: 1,\n        overflow: 'hidden',\n      }}\n      // styles={{\n      //   body: {\n      //     padding: 0,\n      //     paddingTop: 1,\n      //     overflow: 'hidden',\n      //   },\n      // }}\n    >\n      <Flex\n        style={{\n          display: curTabKey === 'imageList' ? 'block' : 'none',\n          paddingTop: token.paddingContentVerticalSM,\n        }}\n      >\n        {/* @ts-ignore */}\n        <backend-ai-environment-list active={curTabKey === 'imageList'} />\n      </Flex>\n      <Flex\n        style={{\n          display: curTabKey === 'presetList' ? 'block' : 'none',\n          paddingTop: token.paddingContentVerticalSM,\n        }}\n      >\n        {/* @ts-ignore */}\n        <backend-ai-resource-preset-list active={curTabKey === 'presetList'} />\n      </Flex>\n\n      <Flex\n        style={{\n          display: curTabKey === 'registryList' ? 'block' : 'none',\n          height: 'calc(100vh - 145px)',\n          // height: 'calc(100vh - 175px)',\n        }}\n      >\n        {isSupportContainerRegistryGraphQL ? (\n          curTabKey === 'registryList' ? (\n            <Suspense>\n              <ContainerRegistryList />\n            </Suspense>\n          ) : null\n        ) : (\n          // @ts-ignore\n          <backend-ai-registry-list active={curTabKey === 'registryList'} />\n        )}\n      </Flex>\n    </Card>\n  );\n};\n\nexport default EnvironmentPage;\n","// This icon file is generated automatically.\nvar DeleteOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z\" } }] }, \"name\": \"delete\", \"theme\": \"outlined\" };\nexport default DeleteOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport DeleteOutlinedSvg from \"@ant-design/icons-svg/es/asn/DeleteOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar DeleteOutlined = function DeleteOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: DeleteOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  DeleteOutlined.displayName = 'DeleteOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(DeleteOutlined);"],"names":["_ref","_containerRegistry$co","existingHostnames","_ref$containerRegistr","containerRegistryFrgmt","onOk","modalProps","_objectWithoutProperties","_excluded","t","useTranslation","formRef","useRef","_message$useMessage","message","useMessage","_message$useMessage2","_slicedToArray","messageAPI","contextHolder","_Modal$useModal","Modal","useModal","_Modal$useModal2","modal","modalContextHolder","containerRegistry","useFragment","_ContainerRegistryEditorModalFragment","require","_useMutation","useMutation","_ContainerRegistryEditorModalCreateMutation","_useMutation2","commitCreateRegistry","isInflightCreateRegistry","_useMutation3","_ContainerRegistryEditorModalModifyMutation","_useMutation4","commitModifyRegistry","isInflightModifyRegistry","handleSave","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_formRef$current","wrap","_context","prev","next","abrupt","current","validateFields","then","values","mutationVariables","hostname","props","url","config","type","project","undefined","username","_","password","isChangedPassword","variables","onCompleted","res","error","onError","catch","stop","apply","arguments","_jsxs","BAIModal","_objectSpread","title","okText","confirmLoading","_formRef$current2","_values$config","confirm","content","destroyOnClose","children","Form","ref","layout","requiredMark","initialValues","preserve","_jsx","Item","label","name","required","rules","pattern","RegExp","validator","value","includes","Promise","reject","resolve","Input","disabled","startsWith","URL","e","noStyle","shouldUpdate","_prev$config","_next$config","_ref3","getFieldValue","_ref4","Password","valuePropName","Checkbox","onChange","_formRef$current3","target","checked","setFieldValue","Select","options","_prev$config2","_next$config2","_ref5","mode","open","tokenSeparators","suffixIcon","SyncOutlined","React","AntdIcon","_extends","icon","SyncOutlinedSvg","style","baiClient","useSuspendedBackendaiClient","_useUpdatableState","useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","_useTransition","useTransition","_useTransition2","isPendingReload","startReloadTransition","painKiller","usePainKiller","_useBAINotification","useBAINotification","upsertNotification","_useLazyLoadQuery","useLazyLoadQuery","_ContainerRegistryListQuery","domain","_config","domainName","fetchPolicy","container_registries","_ContainerRegistryListDeleteMutation","commitDeleteMutation","isInFlightDeleteMutation","_ContainerRegistryListDomainMutation","commitDomainMutation","isInFlightDomationMutation","token","theme","useToken","_useState","useState","_useState2","editingRegistry","setEditingRegistry","_useState3","_useState4","deletingRegistry","setDeletingRegistry","_useState5","_useState6","deletingConfirmText","setDeletingConfirmText","_useState7","_useState8","isNewModalOpen","setIsNewModalOpen","_useState9","_useState10","inFlightHostName","setInFlightHostName","rescanImage","notiKey","handleReScanError","concat","description","backgroundTask","status","duration","err","console","log","key","globalThis","lablupNotification","text","relieve","detail","show","maintenance","rescan_images","ok","percent","taskId","task_id","statusDescriptions","pending","resolved","rejected","_x","Flex","direction","align","flex","justify","gap","padding","paddingSM","Tooltip","Button","loading","ReloadOutlined","onClick","PlusOutlined","Table","rowKey","record","id","scroll","x","pagination","columns","dataIndex","render","_record$config","prjName","Tag","isEnabled","allowed_docker_registries","Switch","isOn","newAllowedDockerRegistries","push","data","info","fixed","index","size","color","colorInfo","SettingOutlined","danger","DeleteOutlined","dataSource","filterNonNullItems","ContainerRegistryEditorModal","r","onCancel","centered","_Fragment","ExclamationCircleOutlined","colorWarning","okButtonProps","response","marginTop","marginMD","Typography","Text","code","_validator","_callee2","_context2","autoComplete","node","v0","v1","hash","v2","v3","v4","v5","v6","v7","v8","v9","curTabKey","setCurTabKey","isSupportContainerRegistryGraphQL","supports","Card","activeTabKey","onTabChange","tabList","_toConsumableArray","is_superadmin","bodyStyle","paddingTop","overflow","display","paddingContentVerticalSM","active","height","Suspense","ContainerRegistryList","DeleteOutlinedSvg"],"sourceRoot":""}