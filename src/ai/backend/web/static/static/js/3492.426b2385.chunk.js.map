{"version":3,"file":"static/js/3492.426b2385.chunk.js","mappings":"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","sources":["components/BAIProgressWithLabel.tsx","components/BAITable.tsx","components/ComputeSessionNodeItems/ContainerLogModal.tsx","hooks/useMemoWithPrevious.tsx","components/ComputeSessionNodeItems/SessionReservation.tsx","components/ComputeSessionNodeItems/SessionStatusTag.tsx","components/ComputeSessionNodeItems/__generated__/ConnectedKernelListLegacyQuery.graphql.ts","components/ComputeSessionNodeItems/__generated__/ConnectedKernelListQuery.graphql.ts","components/ComputeSessionNodeItems/__generated__/ContainerCommitModalFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/ContainerLogModalFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/EditableSessionNameFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/EditableSessionNameMutation.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionActionButtonsFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionIdleChecksFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionIdleChecksNodeFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionReservationFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionStatusTagFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/SessionTypeTagFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/TerminateSessionModalFragment.graphql.ts","components/ComputeSessionNodeItems/__generated__/TerminateSessionModalRefetchQuery.graphql.ts","components/ComputeSessionNodeItems/ConnectedKernelList.tsx","components/ComputeSessionNodeItems/EditableSessionName.tsx","components/ComputeSessionNodeItems/ContainerCommitModal.tsx","components/ComputeSessionNodeItems/TerminateSessionModal.tsx","components/ComputeSessionNodeItems/SessionActionButtons.tsx","hooks/useBackendAIAppLauncher.tsx","components/ComputeSessionNodeItems/SessionIdleChecks.tsx","components/ComputeSessionNodeItems/SessionTypeTag.tsx","components/IdleCheckDescriptionModal.tsx","components/SessionDetailContent.tsx","components/SessionDetailDrawer.tsx","components/SessionUsageMonitor.tsx","components/__generated__/SessionDetailContentLegacyQuery.graphql.ts","components/__generated__/SessionDetailContentQuery.graphql.ts","components/__generated__/SessionUsageMonitorFragment.graphql.ts","helper/csv-util.ts","hooks/usePainKiller.tsx"],"sourcesContent":["import Flex from './Flex';\nimport { ProgressProps, Typography, theme } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface BAIProgressWithLabelProps\n  extends Omit<ProgressProps, 'width' | 'size'> {\n  title?: React.ReactNode;\n  valueLabel?: React.ReactNode;\n  percent?: number;\n  width?: React.CSSProperties['width'];\n  strokeColor?: string;\n  labelStyle?: React.CSSProperties;\n  progressStyle?: React.CSSProperties;\n  size?: 'small' | 'middle' | 'large';\n}\nconst BAIProgressWithLabel: React.FC<BAIProgressWithLabelProps> = ({\n  title,\n  valueLabel,\n  percent,\n  width,\n  strokeColor,\n  labelStyle,\n  progressStyle,\n  size = 'small',\n}) => {\n  const { token } = theme.useToken();\n\n  const fontSize =\n    size === 'small'\n      ? token.fontSizeSM\n      : size === 'middle'\n        ? token.fontSize\n        : token.fontSizeLG;\n  return (\n    <Flex\n      style={{\n        padding: 1,\n        border: `1px solid ${token.colorBorder}`,\n        borderRadius: 3,\n        backgroundColor: token.colorBgContainerDisabled,\n        ...(_.isNumber(width) || _.isString(width)\n          ? { width: width }\n          : { flex: 1 }),\n        ...progressStyle,\n      }}\n      direction=\"column\"\n      align=\"stretch\"\n    >\n      <Flex\n        style={{\n          height: '100%',\n          width: `${!percent || _.isNaN(percent) ? 0 : _.min([percent, 100])}%`,\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          backgroundColor: strokeColor ?? token.colorSuccess,\n          opacity: 0.7,\n          zIndex: 0,\n          overflow: 'hidden',\n        }}\n      ></Flex>\n      <Flex direction=\"row\" justify=\"between\">\n        <Typography.Text style={{ fontSize, ...labelStyle }}>\n          {title}\n        </Typography.Text>\n        <Typography.Text\n          style={{\n            fontSize,\n            color:\n              _.isNaN(percent) || _.isUndefined(percent)\n                ? token.colorTextDisabled\n                : undefined,\n            ...labelStyle,\n          }}\n        >\n          {valueLabel}\n        </Typography.Text>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default BAIProgressWithLabel;\n","import { useThemeMode } from '../hooks/useThemeMode';\nimport { useDebounce } from 'ahooks';\nimport { ConfigProvider, GetProps, Table } from 'antd';\nimport { createStyles } from 'antd-style';\nimport { ColumnsType, ColumnType } from 'antd/es/table';\nimport { TableProps } from 'antd/lib';\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { Resizable, ResizeCallbackData } from 'react-resizable';\n\nconst useStyles = createStyles(({ token, css }) => ({\n  resizableTable: css`\n    .react-resizable-handle {\n      position: absolute;\n      inset-inline-end: 0px;\n      bottom: 0;\n      z-index: 1;\n      width: 10px;\n      height: 100%;\n      cursor: col-resize;\n    }\n    .ant-table-cell {\n      overflow: hidden;\n      whitespace: 'pre';\n      wordwrap: 'break-word';\n    }\n  `,\n  neoHeader: css`\n    thead.ant-table-thead > tr > th.ant-table-cell {\n      font-weight: 500;\n      color: ${token.colorTextTertiary};\n    }\n  `,\n}));\n\nconst ResizableTitle = (\n  props: React.HTMLAttributes<any> & {\n    onResize: (\n      e: React.SyntheticEvent<Element> | undefined,\n      data: ResizeCallbackData,\n    ) => void;\n    width: number;\n  },\n) => {\n  const { onResize, width, onClick, ...restProps } = props;\n  const wrapRef = useRef<HTMLTableCellElement>(null);\n  const [isResizing, setIsResizing] = useState(false);\n  const debouncedIsResizing = useDebounce(isResizing, { wait: 100 });\n\n  // This is a workaround for the initial width of resizable columns if the width is not specified\n  useEffect(() => {\n    if (wrapRef.current && _.isUndefined(width)) {\n      onResize?.(undefined, {\n        size: {\n          width: wrapRef.current.offsetWidth,\n          height: wrapRef.current.offsetHeight,\n        },\n        node: wrapRef.current,\n        handle: 'e',\n      });\n    }\n  });\n\n  return _.isUndefined(width) ? (\n    <th ref={wrapRef} {...restProps} />\n  ) : (\n    <Resizable\n      width={width}\n      height={0}\n      handle={\n        <span\n          className=\"react-resizable-handle\"\n          onClick={(e) => {\n            e.stopPropagation();\n          }}\n        />\n      }\n      onResize={onResize}\n      onResizeStart={() => {\n        setIsResizing(true);\n      }}\n      onResizeStop={() => {\n        setIsResizing(false);\n      }}\n      draggableOpts={{ enableUserSelectHack: false }}\n    >\n      <th\n        onClick={(e) => {\n          if (debouncedIsResizing) {\n            e.preventDefault();\n          } else {\n            onClick?.(e);\n          }\n        }}\n        {...restProps}\n      />\n    </Resizable>\n  );\n};\n\ninterface BAITableProps<RecordType extends object = any>\n  extends TableProps<RecordType> {\n  resizable?: boolean;\n  neoStyle?: boolean;\n}\n\nconst columnKeyOrIndexKey = (column: any, index: number) =>\n  column.key || `index_${index}`;\nconst generateResizedColumnWidths = (columns?: ColumnsType<any>) => {\n  const widths: Record<string, number> = {};\n  _.each(columns, (column, index) => {\n    widths[columnKeyOrIndexKey(column, index)] = column.width as number;\n  });\n  return widths;\n};\n\nconst BAITable = <RecordType extends object = any>({\n  resizable = false,\n  columns,\n  components,\n  neoStyle,\n  ...tableProps\n}: BAITableProps<RecordType>) => {\n  const { styles } = useStyles();\n  const { isDarkMode } = useThemeMode();\n  const [resizedColumnWidths, setResizedColumnWidths] = useState<\n    Record<string, number>\n  >(generateResizedColumnWidths(columns));\n\n  const mergedColumns = useMemo(() => {\n    return !resizable\n      ? columns\n      : _.map(\n          columns,\n          (column, index) =>\n            ({\n              ...column,\n              width:\n                resizedColumnWidths[columnKeyOrIndexKey(column, index)] ||\n                column.width,\n              onHeaderCell: (column: ColumnType<RecordType>) => {\n                return {\n                  width: column.width,\n                  onResize: (e, { size }) => {\n                    setResizedColumnWidths((prev) => ({\n                      ...prev,\n                      [columnKeyOrIndexKey(column, index)]: size.width,\n                    }));\n                  },\n                } as GetProps<typeof ResizableTitle>;\n              },\n            }) as ColumnType<RecordType>,\n        );\n  }, [resizable, columns, resizedColumnWidths]);\n\n  return (\n    <ConfigProvider\n      theme={{\n        components: {\n          Table:\n            !isDarkMode && neoStyle\n              ? {\n                  headerBg: '#E3E3E3',\n                }\n              : undefined,\n        },\n      }}\n    >\n      <Table\n        sortDirections={['descend', 'ascend', 'descend']}\n        showSorterTooltip={false}\n        className={classNames(\n          resizable && styles.resizableTable,\n          neoStyle && styles.neoHeader,\n        )}\n        components={\n          resizable\n            ? _.merge(components || {}, {\n                header: {\n                  cell: ResizableTitle,\n                },\n              })\n            : components\n        }\n        columns={mergedColumns}\n        {...tableProps}\n      />\n    </ConfigProvider>\n  );\n};\n\nexport default BAITable;\n","import { downloadBlob } from '../../helper/csv-util';\nimport { useSuspendedBackendaiClient } from '../../hooks';\nimport { useCurrentUserRole } from '../../hooks/backendai';\nimport { useTanQuery } from '../../hooks/reactQueryAlias';\nimport { useMemoWithPrevious } from '../../hooks/useMemoWithPrevious';\nimport BAIModal, { BAIModalProps } from '../BAIModal';\nimport BAISelect from '../BAISelect';\nimport Flex from '../Flex';\nimport { ContainerLogModalFragment$key } from './__generated__/ContainerLogModalFragment.graphql';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { LazyLog, ScrollFollow } from '@melloware/react-logviewer';\nimport { Button, Divider, Grid, theme, Tooltip, Typography } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { DownloadIcon } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface ContainerLogModalProps extends BAIModalProps {\n  sessionFrgmt: ContainerLogModalFragment$key | null;\n}\n\nconst ContainerLogModal: React.FC<ContainerLogModalProps> = ({\n  sessionFrgmt,\n  ...modalProps\n}) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const userRole = useCurrentUserRole();\n\n  const session = useFragment(\n    graphql`\n      fragment ContainerLogModalFragment on ComputeSessionNode {\n        id\n        row_id @required(action: NONE)\n        name\n        status\n        access_key\n        kernel_nodes {\n          edges {\n            node {\n              id\n              row_id\n              container_id\n              cluster_idx\n              cluster_role\n            }\n          }\n        }\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const kernelNodes = session?.kernel_nodes?.edges?.map((e) => e?.node) || [];\n  const [selectedKernelId, setSelectedKernelId] = useState(\n    _.find(kernelNodes, (e) => e?.cluster_role === 'main')?.row_id ||\n      kernelNodes[0]?.row_id,\n  );\n\n  useEffect(() => {\n    if (modalProps.open === false) {\n      setSelectedKernelId(undefined);\n    }\n  }, [modalProps.open]);\n\n  // Currently we can only fetch full logs\n  // const [logSize, setLogSize] = useState<100|'full'>('full');\n  const {\n    data: logs,\n    refetch,\n    isPending,\n    isRefetching,\n    dataUpdatedAt,\n  } = useTanQuery<string>({\n    queryKey: [\n      'containerLog',\n      session?.row_id,\n      session?.access_key,\n      selectedKernelId,\n      modalProps.open,\n    ],\n    queryFn: async () => {\n      if (\n        !modalProps.open ||\n        !session?.row_id ||\n        !session?.access_key ||\n        !selectedKernelId\n      ) {\n        return '';\n      }\n      return await baiClient\n        .get_logs(session?.row_id, session?.access_key, selectedKernelId, 15000)\n        .then((req: any) => req.result.logs);\n    },\n    staleTime: 5000,\n  });\n\n  // let queryParams: Array<string> = [];\n  // if (session?.access_key != null) {\n  //   queryParams.push(`owner_access_key=${session.access_key}`);\n  // }\n  // if (baiClient.supports('per-kernel-logs') && selectedKernelId !== null) {\n  //   queryParams.push(`kernel_id=${selectedKernelId}`);\n  // }\n  // let queryString = `/session/${session?.row_id}/logs`;\n  // if (queryParams.length > 0) {\n  //   queryString += `?${queryParams.join('&')}`;\n  // }\n  // // const url = `${baiClient._endpoint}${queryString}`\n\n  // const signed = baiClient.newSignedRequest('GET', queryString, null);\n  // console.log(signed)\n  // console.log(signed.uri);\n\n  const [lastLineNumbers, { resetPrevious: resetPreviousLineNumber }] =\n    useMemoWithPrevious(() => logs?.split('\\n').length || 0, [logs]);\n\n  const { md } = Grid.useBreakpoint();\n  const { t } = useTranslation();\n\n  return (\n    <BAIModal\n      title={\n        <Flex style={{ maxWidth: '100%' }} gap={'sm'}>\n          <Typography.Title level={4} style={{ margin: 0, flexShrink: 0 }}>\n            Logs\n          </Typography.Title>\n          {session ? (\n            <>\n              <Typography.Text style={{ fontWeight: 'normal' }} ellipsis>\n                {session?.name}\n              </Typography.Text>\n              <Typography.Text\n                style={{ fontWeight: 'normal', fontFamily: 'monospace' }}\n                copyable={{\n                  text: session?.row_id,\n                  tooltips: t('button.CopySomething', {\n                    name: t('session.SessionId'),\n                  }),\n                }}\n              >\n                ({md ? session?.row_id : session?.row_id.split('-')?.[0]})\n              </Typography.Text>\n            </>\n          ) : null}\n        </Flex>\n      }\n      width={'100%'}\n      styles={{\n        header: {\n          width: '100%',\n        },\n        body: {\n          height: 'calc(100vh - 100px)',\n          maxHeight: 'calc(100vh - 100px)',\n        },\n      }}\n      {...modalProps}\n      footer={null}\n      destroyOnClose\n    >\n      <Flex\n        direction=\"column\"\n        align=\"start\"\n        style={{ height: '100%' }}\n        gap={'sm'}\n      >\n        <Flex gap=\"sm\" wrap=\"wrap\">\n          Kernel Role\n          <BAISelect\n            value={selectedKernelId}\n            onChange={(value) => {\n              setSelectedKernelId(value);\n              resetPreviousLineNumber();\n            }}\n            autoSelectOption\n            options={_.chain(session?.kernel_nodes?.edges)\n              .sortBy((e) => `${e?.node?.cluster_role} ${e?.node?.cluster_idx}`)\n              .map((e) => {\n                return {\n                  label: (\n                    <>\n                      {e?.node?.cluster_role}\n                      {e?.node?.cluster_role !== 'main'\n                        ? e?.node?.cluster_idx\n                        : ''}\n                      {userRole === 'admin' || userRole === 'superadmin' ? (\n                        <Typography.Text\n                          style={{\n                            fontFamily: 'monospace',\n                            fontSize: token.fontSizeSM,\n                          }}\n                          type=\"secondary\"\n                        >\n                          ({(e?.node?.row_id || '').substring(0, 5)})\n                        </Typography.Text>\n                      ) : null}\n                    </>\n                  ),\n                  value: e?.node?.row_id,\n                };\n              })\n              .value()}\n          />\n          <Divider type=\"vertical\" />\n          {/* Request logs\n          <Select\n            value={logSize}\n            options={[\n              {\n                label: 'last 100 lines',\n                value: 100,\n              },\n              {\n                label: 'Full logs',\n                value: 'full',\n              },\n            ]}\n            onChange={(value) => { \n              setLogSize(value);\n              if(value!=='full'){\n                resetPreviousLineNumber();\n              }\n              refetch();\n            }}\n          ></Select> */}\n          <Tooltip title={t('button.Download')}>\n            <Button\n              size=\"middle\"\n              icon={<DownloadIcon />}\n              disabled={isPending || isRefetching}\n              onClick={() => {\n                const blob = new Blob([logs || ''], { type: 'text/plain' });\n                downloadBlob(\n                  blob,\n                  `${session?.name || 'session'}-logs-${selectedKernelId}-${new Date().toISOString()}.txt`,\n                );\n              }}\n            />\n          </Tooltip>\n          <Tooltip title={t('button.Refresh')}>\n            <Button\n              size=\"middle\"\n              loading={isPending || isRefetching}\n              icon={<ReloadOutlined />}\n              onClick={() => refetch()}\n            />\n          </Tooltip>\n        </Flex>\n\n        <div\n          style={{\n            height: 'calc(100% - 50px)',\n            alignSelf: 'stretch',\n\n            border: `1px solid ${token.colorBorder}`,\n            overflow: 'hidden',\n          }}\n        >\n          <ScrollFollow\n            key={dataUpdatedAt} // to scroll to bottom on new data\n            startFollowing={true}\n            render={({ follow, onScroll }) => (\n              <LazyLog\n                caseInsensitive\n                enableSearch\n                enableSearchNavigation\n                selectableLines\n                text={logs || ''}\n                highlight={lastLineNumbers.previous}\n                extraLines={1}\n                // url={signed.uri}\n                // fetchOptions={\n                //   {\n                //     headers: signed.headers\n                //   }\n                // }\n                // stream\n                follow={follow}\n                onScroll={onScroll}\n              />\n            )}\n          />\n        </div>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default ContainerLogModal;\n","import { DependencyList, useEffect, useMemo, useRef, useState } from 'react';\n\nexport const useMemoWithPrevious = <T,>(\n  factory: () => T,\n  deps: DependencyList,\n  { initialPrev }: { initialPrev?: T } | undefined = {},\n) => {\n  const prevRef = useRef(initialPrev);\n  const [prevResetKey, setPrevResetKey] = useState({});\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const current = useMemo(factory, deps);\n  const memoizedPrev = useMemo(() => {\n    return prevRef.current;\n    // Only update when the reset key changes and deps change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, prevResetKey]);\n\n  useEffect(() => {\n    prevRef.current = current;\n    // Only update when deps change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return [\n    {\n      previous: memoizedPrev,\n      current: current,\n    },\n    {\n      resetPrevious: () => {\n        prevRef.current = initialPrev;\n        setPrevResetKey({});\n      },\n    },\n  ] as const;\n};\n","import { formatDurationAsDays } from '../../helper';\nimport BAIIntervalView from '../BAIIntervalView';\nimport DoubleTag from '../DoubleTag';\nimport { SessionReservationFragment$key } from './__generated__/SessionReservationFragment.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\nconst SessionReservation: React.FC<{\n  sessionFrgmt: SessionReservationFragment$key;\n  mode?: 'simple-elapsed' | 'detail';\n}> = ({ sessionFrgmt, mode = 'detail' }) => {\n  const { t } = useTranslation();\n  const session = useFragment(\n    graphql`\n      fragment SessionReservationFragment on ComputeSessionNode {\n        id\n        created_at\n        starts_at\n        terminated_at\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  return (\n    <>\n      {mode !== 'simple-elapsed' && dayjs(session.created_at).format('lll')}\n      <BAIIntervalView\n        key={session.id}\n        callback={() => {\n          const begin = session?.starts_at || session?.created_at;\n          return begin && dayjs(begin).isBefore()\n            ? formatDurationAsDays(begin, session?.terminated_at)\n            : '-';\n        }}\n        delay={1000}\n        render={(intervalValue) =>\n          mode === 'simple-elapsed' ? (\n            intervalValue\n          ) : (\n            <DoubleTag\n              values={[\n                { label: t('session.ElapsedTime') },\n                { label: intervalValue },\n              ]}\n            />\n          )\n        }\n      />\n    </>\n  );\n};\n\nexport default SessionReservation;\n","import Flex from '../Flex';\nimport {\n  SessionStatusTagFragment$data,\n  SessionStatusTagFragment$key,\n} from './__generated__/SessionStatusTagFragment.graphql';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Tag, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\ninterface SessionStatusTagProps {\n  sessionFrgmt?: SessionStatusTagFragment$key | null;\n  showInfo?: boolean;\n}\nconst statusTagColor = {\n  //prepare\n  RESTARTING: 'blue',\n  PREPARING: 'blue',\n  PREPARED: 'blue',\n  CREATING: 'blue',\n  PULLING: 'blue',\n  //running\n  RUNNING: 'green',\n  PENDING: 'green',\n  SCHEDULED: 'green',\n  //error\n  ERROR: 'red',\n  //finished return undefined\n};\n\nconst isTransitional = (session: SessionStatusTagFragment$data) => {\n  return [\n    'RESTARTING',\n    'TERMINATING',\n    'PENDING',\n    `PREPARING`,\n    'CREATING',\n    'PULLING',\n  ].includes(session?.status || '');\n};\n\nconst statusInfoTagColor = {\n  // 'idle-timeout': undefined,\n  // 'user-requested': undefined,\n  // scheduled: undefined,\n  // 'self-terminated': undefined,\n  'no-available-instances': 'red',\n  'failed-to-start': 'red',\n  'creation-failed': 'red',\n};\nconst SessionStatusTag: React.FC<SessionStatusTagProps> = ({\n  sessionFrgmt,\n  showInfo,\n}) => {\n  const session = useFragment(\n    graphql`\n      fragment SessionStatusTagFragment on ComputeSessionNode {\n        id\n        name\n        status\n        status_info\n      }\n    `,\n    sessionFrgmt,\n  );\n  const { token } = theme.useToken();\n\n  return session ? (\n    _.isEmpty(session.status_info) || !showInfo ? (\n      <Tag\n        color={\n          session.status ? _.get(statusTagColor, session.status) : undefined\n        }\n        icon={isTransitional(session) ? <LoadingOutlined spin /> : undefined}\n        // Comment out to match the legacy tag style temporarily\n        // style={{\n        //   borderRadius: 11,\n        //   paddingLeft: token.paddingSM,\n        //   paddingRight: token.paddingSM,\n        // }}\n      >\n        {session.status || ' '}\n      </Tag>\n    ) : (\n      <Flex>\n        <Tag\n          style={{ margin: 0, zIndex: 1 }}\n          color={\n            session.status ? _.get(statusTagColor, session.status) : undefined\n          }\n        >\n          {session.status}\n        </Tag>\n        <Tag\n          style={{\n            margin: 0,\n            marginLeft: -1,\n            borderStyle: 'dashed',\n            color:\n              session.status_info &&\n              _.get(statusInfoTagColor, session.status_info)\n                ? undefined\n                : token.colorTextSecondary,\n          }}\n          color={\n            session.status_info\n              ? _.get(statusInfoTagColor, session.status_info)\n              : undefined\n          }\n        >\n          {session.status_info}\n        </Tag>\n      </Flex>\n    )\n  ) : null;\n};\n\nexport default SessionStatusTag;\n","/**\n * @generated SignedSource<<3f8f52376ee43b7f6e40e2c8e635528c>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ConnectedKernelListLegacyQuery$variables = {\n  uuid: string;\n};\nexport type ConnectedKernelListLegacyQuery$data = {\n  readonly session_for_project_id: {\n    readonly group_id: string | null | undefined;\n  } | null | undefined;\n};\nexport type ConnectedKernelListLegacyQuery = {\n  response: ConnectedKernelListLegacyQuery$data;\n  variables: ConnectedKernelListLegacyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"uuid\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"group_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ConnectedKernelListLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ConnectedKernelListLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"b8db3f5005362f059f55439e393c1838\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ConnectedKernelListLegacyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ConnectedKernelListLegacyQuery(\\n  $uuid: UUID!\\n) {\\n  session_for_project_id: compute_session(id: $uuid) {\\n    group_id\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"19ed5dde0fb95d8ff8cfbe9114129348\";\n\nexport default node;\n","/**\n * @generated SignedSource<<4fe9587309d2e62a38a9fc049e246bba>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ConnectedKernelListQuery$variables = {\n  id: any;\n  project_id: string;\n};\nexport type ConnectedKernelListQuery$data = {\n  readonly session: {\n    readonly kernel_nodes: {\n      readonly count: number | null | undefined;\n      readonly edges: ReadonlyArray<{\n        readonly node: {\n          readonly agent_id: string | null | undefined;\n          readonly cluster_role: string | null | undefined;\n          readonly container_id: string | null | undefined;\n          readonly id: string;\n          readonly row_id: string | null | undefined;\n          readonly status: string | null | undefined;\n          readonly status_info: string | null | undefined;\n        } | null | undefined;\n      } | null | undefined>;\n    } | null | undefined;\n  } | null | undefined;\n};\nexport type ConnectedKernelListQuery = {\n  response: ConnectedKernelListQuery$data;\n  variables: ConnectedKernelListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"project_id\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"id\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"project_id\",\n    \"variableName\": \"project_id\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"KernelConnection\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"kernel_nodes\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"KernelEdge\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"edges\",\n      \"plural\": true,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"KernelNode\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"node\",\n          \"plural\": false,\n          \"selections\": [\n            (v2/*: any*/),\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"row_id\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"cluster_role\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"status\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"status_info\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"agent_id\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"container_id\",\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"count\",\n      \"storageKey\": null\n    }\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ConnectedKernelListQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ConnectedKernelListQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"eb1093ca788f80abf6bfd99741878aa2\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ConnectedKernelListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ConnectedKernelListQuery(\\n  $id: GlobalIDField!\\n  $project_id: UUID!\\n) {\\n  session: compute_session_node(id: $id, project_id: $project_id) {\\n    kernel_nodes {\\n      edges {\\n        node {\\n          id\\n          row_id\\n          cluster_role\\n          status\\n          status_info\\n          agent_id\\n          container_id\\n        }\\n      }\\n      count\\n    }\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"fa187f8a1e76cdbb680e1103fd57bcc2\";\n\nexport default node;\n","/**\n * @generated SignedSource<<1a5d592adb2c9a662495cd7456262a7f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerCommitModalFragment$data = {\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly row_id: string;\n  readonly \" $fragmentType\": \"ContainerCommitModalFragment\";\n} | null | undefined;\nexport type ContainerCommitModalFragment$key = {\n  readonly \" $data\"?: ContainerCommitModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerCommitModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerCommitModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"row_id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"8bcd294de1ffd3f00f6ec0ed7177c304\";\n\nexport default node;\n","/**\n * @generated SignedSource<<4ad7686d85570119a8fe237eb7cc0de9>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerLogModalFragment$data = {\n  readonly access_key: string | null | undefined;\n  readonly id: string;\n  readonly kernel_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly cluster_idx: number | null | undefined;\n        readonly cluster_role: string | null | undefined;\n        readonly container_id: string | null | undefined;\n        readonly id: string;\n        readonly row_id: string | null | undefined;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly name: string | null | undefined;\n  readonly row_id: string;\n  readonly status: string | null | undefined;\n  readonly \" $fragmentType\": \"ContainerLogModalFragment\";\n} | null | undefined;\nexport type ContainerLogModalFragment$key = {\n  readonly \" $data\"?: ContainerLogModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerLogModalFragment\">;\n};\n\nconst node: ReaderFragment = (function(){\nvar v0 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerLogModalFragment\",\n  \"selections\": [\n    (v0/*: any*/),\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": (v1/*: any*/),\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"access_key\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"KernelConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"kernel_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"KernelEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"KernelNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                (v0/*: any*/),\n                (v1/*: any*/),\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"container_id\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cluster_idx\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cluster_role\",\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"59dda81185d3d874cd635adcae2ae9d4\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2966b965c5a39abf1f5fe5121ba20420>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type EditableSessionNameFragment$data = {\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly priority: number | null | undefined;\n  readonly row_id: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly user_id: string | null | undefined;\n  readonly \" $fragmentType\": \"EditableSessionNameFragment\";\n};\nexport type EditableSessionNameFragment$key = {\n  readonly \" $data\"?: EditableSessionNameFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"EditableSessionNameFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"EditableSessionNameFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"priority\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"user_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"9c053b92b568a9b132f7615d1869f32b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<19ec3c0d04347418c016692bdba42836>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type ModifyComputeSessionInput = {\n  clientMutationId?: string | null | undefined;\n  id: any;\n  name?: string | null | undefined;\n  priority?: number | null | undefined;\n};\nexport type EditableSessionNameMutation$variables = {\n  input: ModifyComputeSessionInput;\n};\nexport type EditableSessionNameMutation$data = {\n  readonly modify_compute_session: {\n    readonly item: {\n      readonly id: string;\n      readonly name: string | null | undefined;\n    } | null | undefined;\n  } | null | undefined;\n};\nexport type EditableSessionNameMutation = {\n  response: EditableSessionNameMutation$data;\n  variables: EditableSessionNameMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"input\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"input\",\n        \"variableName\": \"input\"\n      }\n    ],\n    \"concreteType\": \"ModifyComputeSessionPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_compute_session\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"item\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"name\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"EditableSessionNameMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"EditableSessionNameMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bea4b6405958ab3b9796129b5807d0fa\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"EditableSessionNameMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation EditableSessionNameMutation(\\n  $input: ModifyComputeSessionInput!\\n) {\\n  modify_compute_session(input: $input) {\\n    item {\\n      id\\n      name\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"92003994eaa19ceec71d4fe2efb299cd\";\n\nexport default node;\n","/**\n * @generated SignedSource<<ddb7872e2d8f78fb16d89240bc6bb97c>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionActionButtonsFragment$data = {\n  readonly access_key: string | null | undefined;\n  readonly commit_status: string | null | undefined;\n  readonly id: string;\n  readonly row_id: string;\n  readonly service_ports: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly type: string | null | undefined;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerCommitModalFragment\" | \"ContainerLogModalFragment\" | \"TerminateSessionModalFragment\">;\n  readonly \" $fragmentType\": \"SessionActionButtonsFragment\";\n} | null | undefined;\nexport type SessionActionButtonsFragment$key = {\n  readonly \" $data\"?: SessionActionButtonsFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionActionButtonsFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionActionButtonsFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"row_id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"type\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"access_key\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"service_ports\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"commit_status\",\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"TerminateSessionModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"ContainerLogModalFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"ContainerCommitModalFragment\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"691b7c3c1673640d97620822f4fff09f\";\n\nexport default node;\n","/**\n * @generated SignedSource<<75f0976f768911843722fb483dc8f303>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionIdleChecksFragment$data = {\n  readonly id: string | null | undefined;\n  readonly idle_checks: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionIdleChecksFragment\";\n};\nexport type SessionIdleChecksFragment$key = {\n  readonly \" $data\"?: SessionIdleChecksFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionIdleChecksFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionIdleChecksFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"idle_checks\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSession\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d2bf721ec94f22eba99980925b3f9656\";\n\nexport default node;\n","/**\n * @generated SignedSource<<5a48d3f7c0db79185e24e2b973ff10d6>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionIdleChecksNodeFragment$data = {\n  readonly id: string;\n  readonly idle_checks: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionIdleChecksNodeFragment\";\n};\nexport type SessionIdleChecksNodeFragment$key = {\n  readonly \" $data\"?: SessionIdleChecksNodeFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionIdleChecksNodeFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionIdleChecksNodeFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"idle_checks\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"09a1dd685c8942ebb5c69e6dddaf6da0\";\n\nexport default node;\n","/**\n * @generated SignedSource<<e78291f46be71fea16e1b5ca0a5beb89>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionReservationFragment$data = {\n  readonly created_at: string | null | undefined;\n  readonly id: string;\n  readonly starts_at: string | null | undefined;\n  readonly terminated_at: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionReservationFragment\";\n};\nexport type SessionReservationFragment$key = {\n  readonly \" $data\"?: SessionReservationFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionReservationFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionReservationFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"created_at\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"starts_at\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"terminated_at\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"c0801fe0feb37a1bce71461255d0998f\";\n\nexport default node;\n","/**\n * @generated SignedSource<<b4f4d1ab8957ce220ae8b55938b0f742>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionStatusTagFragment$data = {\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly status_info: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionStatusTagFragment\";\n};\nexport type SessionStatusTagFragment$key = {\n  readonly \" $data\"?: SessionStatusTagFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionStatusTagFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionStatusTagFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status_info\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"28d44a009b8d8ecc51f60af3fc9ef8c8\";\n\nexport default node;\n","/**\n * @generated SignedSource<<63fa395e8c9335222eada19d6129c0e5>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionTypeTagFragment$data = {\n  readonly type: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionTypeTagFragment\";\n};\nexport type SessionTypeTagFragment$key = {\n  readonly \" $data\"?: SessionTypeTagFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionTypeTagFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionTypeTagFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"type\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"6d4ab2b738125ee81d47483324695349\";\n\nexport default node;\n","/**\n * @generated SignedSource<<8239c8c8f6654cf4edb157dc030868c2>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type TerminateSessionModalFragment$data = ReadonlyArray<{\n  readonly id: string;\n  readonly kernel_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly agent_id: string | null | undefined;\n        readonly container_id: string | null | undefined;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly name: string | null | undefined;\n  readonly row_id: string | null | undefined;\n  readonly scaling_group: string;\n  readonly \" $fragmentType\": \"TerminateSessionModalFragment\";\n} | null | undefined>;\nexport type TerminateSessionModalFragment$key = ReadonlyArray<{\n  readonly \" $data\"?: TerminateSessionModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"TerminateSessionModalFragment\">;\n}>;\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"plural\": true\n  },\n  \"name\": \"TerminateSessionModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"row_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"scaling_group\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"scaling_group\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"KernelConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"kernel_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"KernelEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"KernelNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"container_id\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"agent_id\",\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"0987c567ddd892540d949ccabd005e2b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<816f3eecae241f4dab00312761810670>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type TerminateSessionModalRefetchQuery$variables = {\n  id: any;\n  project_id: string;\n};\nexport type TerminateSessionModalRefetchQuery$data = {\n  readonly compute_session_node: {\n    readonly id: string;\n    readonly status: string | null | undefined;\n  } | null | undefined;\n};\nexport type TerminateSessionModalRefetchQuery = {\n  response: TerminateSessionModalRefetchQuery$data;\n  variables: TerminateSessionModalRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"project_id\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"id\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"project_id\",\n        \"variableName\": \"project_id\"\n      }\n    ],\n    \"concreteType\": \"ComputeSessionNode\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"compute_session_node\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"status\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"TerminateSessionModalRefetchQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"TerminateSessionModalRefetchQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"42872ac8084736aaf26675f9531456db\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"TerminateSessionModalRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query TerminateSessionModalRefetchQuery(\\n  $id: GlobalIDField!\\n  $project_id: UUID!\\n) {\\n  compute_session_node(id: $id, project_id: $project_id) {\\n    id\\n    status\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"6c928af0802a6732e5237c3f6c46db99\";\n\nexport default node;\n","import { filterEmptyItem, filterNonNullItems, toGlobalId } from '../../helper';\nimport { useCurrentProjectValue } from '../../hooks/useCurrentProject';\n// import BAIPropertyFilter from '../BAIPropertyFilter';\nimport BAITable from '../BAITable';\nimport DoubleTag from '../DoubleTag';\nimport Flex from '../Flex';\nimport { ConnectedKernelListLegacyQuery } from './__generated__/ConnectedKernelListLegacyQuery.graphql';\nimport {\n  ConnectedKernelListQuery,\n  ConnectedKernelListQuery$data,\n} from './__generated__/ConnectedKernelListQuery.graphql';\nimport { Tag, Typography } from 'antd';\nimport { ColumnType } from 'antd/lib/table';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Kernel = NonNullable<\n  NonNullable<\n    NonNullable<\n      NonNullable<ConnectedKernelListQuery$data['session']>['kernel_nodes']\n    >['edges'][number]\n  >['node']\n>;\n\ninterface ConnectedKernelListProps {\n  id: string;\n  fetchKey?: string;\n}\n\nconst kernelStatusTagColor = {\n  // prepare\n  PREPARING: 'blue',\n  BUILDING: 'blue',\n  PULLING: 'blue',\n  PREPARED: 'blue',\n  CREATING: 'blue',\n  // running\n  PENDING: 'green',\n  SCHEDULED: 'green',\n  RUNNING: 'green',\n  RESTARTING: 'green',\n  RESIZING: 'green',\n  SUSPENDED: 'green',\n  // terminated\n  TERMINATING: 'default',\n  TERMINATED: 'default',\n  CANCELLED: 'default',\n  // error\n  ERROR: 'red',\n};\n\nconst ConnectedKernelList: React.FC<ConnectedKernelListProps> = ({\n  id,\n  fetchKey,\n}) => {\n  const { t } = useTranslation();\n  const currentProject = useCurrentProjectValue();\n\n  // get the project id of the session for <= v24.12.0.\n  const { session_for_project_id } =\n    useLazyLoadQuery<ConnectedKernelListLegacyQuery>(\n      graphql`\n        query ConnectedKernelListLegacyQuery($uuid: UUID!) {\n          session_for_project_id: compute_session(id: $uuid) {\n            group_id\n          }\n        }\n      `,\n      {\n        uuid: id,\n      },\n      {\n        fetchPolicy: 'network-only',\n      },\n    );\n\n  const { session } = useLazyLoadQuery<ConnectedKernelListQuery>(\n    graphql`\n      query ConnectedKernelListQuery($id: GlobalIDField!, $project_id: UUID!) {\n        session: compute_session_node(id: $id, project_id: $project_id) {\n          kernel_nodes {\n            edges {\n              node {\n                id\n                row_id\n                cluster_role\n                status\n                status_info\n                agent_id\n                container_id\n              }\n            }\n            count\n          }\n        }\n      }\n    `,\n    {\n      id: toGlobalId('ComputeSessionNode', id),\n      project_id: session_for_project_id?.group_id || currentProject.id,\n    },\n    {\n      fetchPolicy: 'network-only',\n      fetchKey: fetchKey,\n    },\n  );\n  const kernelNodes = session?.kernel_nodes;\n\n  const columns = filterEmptyItem<ColumnType<Kernel>>([\n    {\n      title: '#',\n      fixed: 'left',\n      render: (id, record, index) => {\n        return index + 1;\n      },\n      showSorterTooltip: false,\n      rowScope: 'row',\n    },\n    {\n      title: t('kernel.KernelId'),\n      fixed: 'left',\n      dataIndex: 'row_id',\n      render: (row_id) => (\n        <>\n          <Typography.Text copyable ellipsis>\n            {row_id}\n          </Typography.Text>\n        </>\n      ),\n    },\n    {\n      title: t('kernel.Role'),\n      dataIndex: 'cluster_role',\n      render: (role) => <Tag>{role}</Tag>,\n    },\n    {\n      title: t('kernel.Status'),\n      dataIndex: 'status',\n      render: (status, record) => {\n        return (\n          <>\n            {record?.status_info !== '' ? (\n              <DoubleTag\n                values={[\n                  { label: status, color: _.get(kernelStatusTagColor, status) },\n                  {\n                    label: record?.status_info,\n                    color: _.get(\n                      kernelStatusTagColor,\n                      record?.status_info ?? '',\n                    ),\n                  },\n                ]}\n              />\n            ) : (\n              <Tag color={_.get(kernelStatusTagColor, status)}>{status}</Tag>\n            )}\n          </>\n        );\n      },\n    },\n    {\n      title: t('kernel.ContainerId'),\n      dataIndex: 'container_id',\n      onCell: () => ({\n        style: { maxWidth: 250 },\n      }),\n      render: (id) => (\n        <Typography.Text copyable ellipsis>\n          {id}\n        </Typography.Text>\n      ),\n    },\n    {\n      title: t('kernel.AgentId'),\n      dataIndex: 'agent_id',\n      render: (id) => <Typography.Text copyable>{id}</Typography.Text>,\n    },\n  ]);\n\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'sm'}>\n      {/* TODO: implement filter when compute_session_node query supports filter */}\n      {/* <BAIPropertyFilter\n        filterProperties={[\n          {\n            key: 'agent_id',\n            propertyLabel: t('kernel.AgentId'),\n            type: 'string',\n          },\n        ]}\n        value={filterString}\n        onChange={(value) => {\n          startFilterTransition(() => {\n            setFilterString(value);\n          });\n        }}\n      /> */}\n      <BAITable\n        bordered\n        // loading={isPendingFilter}\n        rowKey=\"id\"\n        scroll={{ x: 'max-content' }}\n        columns={columns}\n        dataSource={filterNonNullItems(\n          kernelNodes?.edges.map((edge) => edge?.node),\n        )}\n        style={{ width: '100%' }}\n        // TODO: implement pagination when compute_session_node query supports pagination\n        pagination={false}\n      />\n    </Flex>\n  );\n};\n\nexport default ConnectedKernelList;\n","import { useCurrentUserInfo } from '../../hooks/backendai';\nimport { getSessionNameRules } from '../SessionNameFormItem';\nimport { EditableSessionNameFragment$key } from './__generated__/EditableSessionNameFragment.graphql';\nimport { EditableSessionNameMutation } from './__generated__/EditableSessionNameMutation.graphql';\nimport { theme, Form, Input } from 'antd';\nimport Text, { TextProps } from 'antd/es/typography/Text';\nimport Title, { TitleProps } from 'antd/es/typography/Title';\nimport graphql from 'babel-plugin-relay/macro';\nimport { CornerDownLeftIcon } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment, useMutation } from 'react-relay';\n\ntype EditableSessionNameProps = {\n  sessionFrgmt: EditableSessionNameFragment$key;\n} & (\n  | ({ component?: typeof Text } & Omit<TextProps, 'children'>)\n  | ({ component: typeof Title } & Omit<TitleProps, 'children'>)\n);\n\nconst EditableSessionName: React.FC<EditableSessionNameProps> = ({\n  component: Component = Text,\n  sessionFrgmt,\n  editable: editableOfProps,\n  style,\n  ...otherProps\n}) => {\n  const session = useFragment(\n    graphql`\n      fragment EditableSessionNameFragment on ComputeSessionNode {\n        id\n        row_id\n        name\n        priority\n        user_id\n        status\n      }\n    `,\n    sessionFrgmt,\n  );\n  const [optimisticName, setOptimisticName] = useState(session.name);\n  const [userInfo] = useCurrentUserInfo();\n  const [commitEditMutation, isPendingEditMutation] =\n    useMutation<EditableSessionNameMutation>(graphql`\n      mutation EditableSessionNameMutation($input: ModifyComputeSessionInput!) {\n        modify_compute_session(input: $input) {\n          item {\n            id\n            name\n          }\n        }\n      }\n    `);\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isEditing, setIsEditing] = useState(false);\n\n  const isNotPreparingCategoryStatus = ![\n    'RESTARTING',\n    'PREPARING',\n    'PREPARED',\n    'CREATING',\n    'PULLING',\n  ].includes(session.status || '');\n\n  const isEditingAllowed =\n    editableOfProps &&\n    userInfo.uuid === session.user_id &&\n    isNotPreparingCategoryStatus;\n\n  return (\n    <>\n      {(!isEditing || isPendingEditMutation) && (\n        <Component\n          editable={\n            isEditingAllowed && !isPendingEditMutation\n              ? {\n                  onStart: () => {\n                    setIsEditing(true);\n                  },\n                  triggerType: ['icon', 'text'],\n                }\n              : false\n          }\n          copyable\n          style={{\n            ...style,\n            color: isPendingEditMutation\n              ? token.colorTextTertiary\n              : style?.color,\n          }}\n          {...otherProps}\n        >\n          {isPendingEditMutation ? optimisticName : session.name}\n        </Component>\n      )}\n      {isEditing && !isPendingEditMutation && (\n        <Form\n          onFinish={(values) => {\n            setIsEditing(false);\n            setOptimisticName(values.sessionName);\n            commitEditMutation({\n              variables: {\n                input: {\n                  id: session.id,\n                  name: values.sessionName,\n                },\n              },\n              onCompleted(response, errors) {},\n              onError(error) {},\n            });\n          }}\n          initialValues={{\n            sessionName: session.name,\n          }}\n          style={{\n            flex: 1,\n          }}\n        >\n          <Form.Item\n            name=\"sessionName\"\n            rules={getSessionNameRules(t)}\n            style={{\n              margin: 0,\n            }}\n          >\n            <Input\n              size=\"large\"\n              suffix={\n                <CornerDownLeftIcon\n                  style={{\n                    fontSize: '0.8em',\n                    color: token.colorTextTertiary,\n                  }}\n                />\n              }\n              autoFocus\n              onKeyDown={(e) => {\n                // when press escape key, cancel editing\n                if (e.key === 'Escape') {\n                  setIsEditing(false);\n                }\n              }}\n            />\n          </Form.Item>\n        </Form>\n      )}\n    </>\n  );\n};\n\nexport default EditableSessionName;\n","import { useSuspendedBackendaiClient } from '../../hooks';\nimport { useSetBAINotification } from '../../hooks/useBAINotification';\nimport BAIModal, { BAIModalProps } from '../BAIModal';\nimport Flex from '../Flex';\nimport { ContainerCommitModalFragment$key } from './__generated__/ContainerCommitModalFragment.graphql';\nimport {\n  Descriptions,\n  Divider,\n  Form,\n  FormInstance,\n  Input,\n  Typography,\n} from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface ContainerCommitModalProps extends BAIModalProps {\n  sessionFrgmt: ContainerCommitModalFragment$key | null;\n  onRequestClose: () => void;\n}\n\nconst ContainerCommitModal: React.FC<ContainerCommitModalProps> = ({\n  sessionFrgmt,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const formRef = useRef<FormInstance>(null);\n  const baiClient = useSuspendedBackendaiClient();\n\n  const { upsertNotification } = useSetBAINotification();\n  const [isConfirmLoading, setIsConfirmLoading] = useState<boolean>(false);\n\n  const session = useFragment(\n    graphql`\n      fragment ContainerCommitModalFragment on ComputeSessionNode {\n        id\n        name\n        row_id @required(action: NONE)\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const convertSessionToImage = () => {\n    setIsConfirmLoading(true);\n    formRef?.current\n      ?.validateFields()\n      .then((values: { imageName: string }) => {\n        baiClient.computeSession\n          .convertSessionToImage(session?.name ?? '', values.imageName)\n          .then((res: { task_id: string }) => {\n            onRequestClose();\n            upsertNotification({\n              key: 'commitSession:' + session?.name,\n              backgroundTask: {\n                taskId: res.task_id,\n                status: 'pending',\n                onChange: {\n                  pending: t('session.CommitOnGoing'),\n                  resolved: t('session.CommitFinished'),\n                  rejected: t('session.CommitFailed'),\n                },\n              },\n              duration: 0,\n              message: 'commitSession: ' + session?.name,\n              open: true,\n            });\n          })\n          .catch((err: any) => {\n            if (err?.message) {\n              throw new Error(err.message);\n            } else {\n              throw err;\n            }\n          })\n          .finally(() => {\n            setIsConfirmLoading(false);\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <BAIModal\n      title={t('session.CommitSession')}\n      onOk={() => convertSessionToImage()}\n      okButtonProps={{ loading: isConfirmLoading }}\n      onCancel={onRequestClose}\n      {...modalProps}\n      destroyOnClose\n    >\n      <Flex\n        direction=\"column\"\n        gap={'xs'}\n        align=\"stretch\"\n        style={{ overflow: 'hidden' }}\n      >\n        <Typography.Text>{t('session.DescCommitSession')}</Typography.Text>\n        <Descriptions bordered size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.SessionName')}>\n            {session?.name}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.SessionId')}>\n            {session?.row_id}\n          </Descriptions.Item>\n          {/* FIXME: need to use legacy_session */}\n          {/* <Descriptions.Item label={t('session.launcher.Environments')}>\n          </Descriptions.Item>  */}\n        </Descriptions>\n        <Divider style={{ marginTop: 12, marginBottom: 12 }} />\n        <Form ref={formRef}>\n          <Form.Item\n            label={t('session.CommitImageName')}\n            name=\"imageName\"\n            required\n            rules={[\n              { required: true },\n              {\n                min: 4,\n                max: 32,\n              },\n              {\n                pattern: /^[a-zA-Z0-9-_.]+$/,\n                message: t('session.Validation.EnterValidSessionName'),\n              },\n            ]}\n          >\n            <Input placeholder={t('inputLimit.4to32chars')} />\n          </Form.Item>\n        </Form>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default ContainerCommitModal;\n","import { BackendAIClient, useSuspendedBackendaiClient } from '../../hooks';\nimport { useCurrentUserRole } from '../../hooks/backendai';\nimport { useTanMutation } from '../../hooks/reactQueryAlias';\nimport { useSetBAINotification } from '../../hooks/useBAINotification';\nimport { useCurrentProjectValue } from '../../hooks/useCurrentProject';\nimport { usePainKiller } from '../../hooks/usePainKiller';\nimport BAIModal from '../BAIModal';\nimport Flex from '../Flex';\nimport {\n  TerminateSessionModalFragment$data,\n  TerminateSessionModalFragment$key,\n} from './__generated__/TerminateSessionModalFragment.graphql';\nimport { TerminateSessionModalRefetchQuery } from './__generated__/TerminateSessionModalRefetchQuery.graphql';\nimport { Card, Checkbox, ModalProps, Typography } from 'antd';\nimport { createStyles } from 'antd-style';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { fetchQuery, useFragment, useRelayEnvironment } from 'react-relay';\n\ninterface TerminateSessionModalProps\n  extends Omit<ModalProps, 'onOk' | 'onCancel'> {\n  sessionFrgmts: TerminateSessionModalFragment$key;\n  onRequestClose: (success: boolean) => void;\n}\n\nconst useStyle = createStyles(({ css, token }) => {\n  return {\n    custom: css`\n      ul {\n        list-style-type: circle;\n        padding-left: ${token.paddingMD}px;\n      }\n    `,\n  };\n});\n\ntype KernelType = NonNullableNodeOnEdges<\n  NonNullable<TerminateSessionModalFragment$data[number]>['kernel_nodes']\n>;\n\ntype Session = NonNullable<TerminateSessionModalFragment$data[number]>;\n\nconst sendRequest = async (\n  rqst: {\n    uri: string;\n  } & RequestInit,\n) => {\n  let resp;\n  let body;\n  try {\n    if (rqst.method === 'GET') {\n      rqst.body = undefined;\n    }\n    resp = await fetch(rqst.uri, rqst);\n    const contentType = resp.headers.get('Content-Type');\n    if (contentType === null) {\n      body = resp.ok;\n      if (!resp.ok) {\n        // @ts-ignore\n        throw new Error(resp);\n      }\n    } else if (\n      contentType.startsWith('application/json') ||\n      contentType.startsWith('application/problem+json')\n    ) {\n      body = await resp.json();\n    } else if (contentType.startsWith('text/')) {\n      body = await resp.text();\n    } else {\n      body = await resp.blob();\n    }\n    if (!resp.ok) {\n      throw body;\n    }\n  } catch (e) {\n    return resp;\n  }\n  return body;\n};\n\nconst getWSProxyVersion = async (\n  resourceGroupIdOfSession: string,\n  projectId: string,\n  baiClient: BackendAIClient,\n) => {\n  // TODO: remove globalThis.appLauncher(backend-ai-app-launcher) dependency after migration to React\n  if (baiClient.debug === true) {\n    // @ts-ignore\n    if (globalThis.appLauncher?.forceUseV1Proxy?.checked) return 'v1';\n    // @ts-ignore\n    else if (globalThis.appLauncher?.forceUseV2Proxy?.checked) return 'v2';\n  }\n\n  // @ts-ignore\n  if (globalThis.isElectron) {\n    return 'v1';\n  }\n  return baiClient.scalingGroup\n    .getWsproxyVersion(resourceGroupIdOfSession, projectId)\n    .then((result: { wsproxy_version: string }) => {\n      return result.wsproxy_version;\n    });\n};\n\nconst getProxyURL = async (\n  resourceGroupIdOfSession: string,\n  projectId: string,\n  baiClient: BackendAIClient,\n) => {\n  let url = 'http://127.0.0.1:5050/';\n  if (\n    // @ts-ignore\n    globalThis.__local_proxy !== undefined &&\n    // @ts-ignore\n    globalThis.__local_proxy.url !== undefined\n  ) {\n    // @ts-ignore\n    url = globalThis.__local_proxy.url;\n  } else if (baiClient._config.proxyURL !== undefined) {\n    url = baiClient._config.proxyURL;\n  }\n  if (resourceGroupIdOfSession !== undefined && projectId !== undefined) {\n    const wsproxyVersion = await getWSProxyVersion(\n      resourceGroupIdOfSession,\n      projectId,\n      baiClient,\n    );\n    if (wsproxyVersion !== 'v1') {\n      url = new URL(`${wsproxyVersion}/`, url).href;\n    }\n  }\n  return url;\n};\n\nconst terminateApp = async (\n  session: Session,\n  accessKey: string,\n  currentProjectId: string,\n  baiClient: BackendAIClient,\n) => {\n  const proxyURL = await getProxyURL(\n    session.scaling_group,\n    currentProjectId,\n    baiClient,\n  );\n\n  const rqst = {\n    method: 'GET',\n    uri: new URL(`proxy/${accessKey}/${session.row_id}`, proxyURL).href,\n  };\n\n  return sendRequest(rqst).then((response) => {\n    let uri = new URL(`proxy/${accessKey}/${session.row_id}/delete`, proxyURL);\n    if (localStorage.getItem('backendaiwebui.appproxy-permit-key')) {\n      uri.searchParams.set(\n        'permit_key',\n        localStorage.getItem('backendaiwebui.appproxy-permit-key') || '',\n      );\n      uri = new URL(uri.href);\n    }\n    if (response !== undefined && response.code !== 404) {\n      return sendRequest({\n        method: 'GET',\n        uri: uri.href,\n        credentials: 'include',\n        mode: 'cors',\n      });\n    }\n    return true;\n  });\n};\n\nconst TerminateSessionModal: React.FC<TerminateSessionModalProps> = ({\n  sessionFrgmts: sessionFrgmt,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const openTerminateModal = false;\n  const { t } = useTranslation();\n  const { styles } = useStyle();\n  const sessions = useFragment(\n    graphql`\n      fragment TerminateSessionModalFragment on ComputeSessionNode\n      @relay(plural: true) {\n        id\n        row_id\n        name\n        scaling_group @required(action: NONE)\n        kernel_nodes {\n          edges {\n            node {\n              container_id\n              agent_id\n            }\n          }\n        }\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const [isForce, setIsForce] = useState(false);\n  const userRole = useCurrentUserRole();\n\n  const baiClient = useSuspendedBackendaiClient();\n\n  const currentProject = useCurrentProjectValue();\n\n  const terminateMutation = useTanMutation({\n    mutationFn: async (session: Session) => {\n      return terminateApp(\n        session,\n        baiClient._config.accessKey,\n        currentProject.id,\n        baiClient,\n      )\n        .catch((e) => {\n          return {\n            error: e,\n          };\n        })\n        .then((result) => {\n          const err = result?.error;\n          if (\n            err === undefined || //no error\n            (err && // Even if wsproxy address is invalid, session must be deleted.\n              err.message &&\n              (err.statusCode === 404 || err.statusCode === 500))\n          ) {\n            // BAI client destroy try to request 3times as default\n            return baiClient.destroy(\n              session.row_id,\n              baiClient._config.accessKey,\n              isForce,\n            );\n          } else {\n            throw err;\n          }\n        });\n    },\n  });\n  const relayEvn = useRelayEnvironment();\n  const painKiller = usePainKiller();\n  const { upsertNotification } = useSetBAINotification();\n\n  return (\n    <BAIModal\n      centered\n      title={t('session.TerminateSession')}\n      open={openTerminateModal}\n      confirmLoading={terminateMutation.isPending}\n      onOk={() => {\n        if (sessions[0]?.row_id) {\n          const session = sessions[0];\n          terminateMutation\n            .mutateAsync(session)\n            .then(() => {\n              setIsForce(false);\n              onRequestClose(true);\n            })\n            .catch((err) => {\n              upsertNotification({\n                message: painKiller.relieve(err?.title),\n                description: err?.message,\n                open: true,\n              });\n            })\n            .finally(() => {\n              // TODO: remove below code after session list migration to React\n              const event = new CustomEvent(\n                'backend-ai-session-list-refreshed',\n                {\n                  detail: 'running',\n                },\n              );\n              document.dispatchEvent(event);\n\n              // refetch session node\n              return fetchQuery<TerminateSessionModalRefetchQuery>(\n                relayEvn,\n                graphql`\n                  query TerminateSessionModalRefetchQuery(\n                    $id: GlobalIDField!\n                    $project_id: UUID!\n                  ) {\n                    compute_session_node(id: $id, project_id: $project_id) {\n                      id\n                      status\n                    }\n                  }\n                `,\n                {\n                  id: session.id,\n                  project_id: currentProject.id,\n                },\n              ).toPromise();\n            });\n        }\n      }}\n      okText={isForce ? t('button.ForceTerminate') : t('session.Terminate')}\n      okType=\"danger\"\n      okButtonProps={{\n        type: isForce ? 'primary' : 'default',\n      }}\n      onCancel={() => {\n        setIsForce(false);\n        onRequestClose(false);\n      }}\n      {...modalProps}\n    >\n      <Flex\n        className={styles.custom}\n        direction=\"column\"\n        align=\"stretch\"\n        gap={'xs'}\n      >\n        <Typography.Text>\n          {t('userSettings.SessionTerminationDialog')}\n        </Typography.Text>\n        <Typography.Text mark>\n          {sessions.length === 1\n            ? sessions[0]?.name\n            : `${sessions.length} sessions`}\n        </Typography.Text>\n        <Checkbox\n          checked={isForce}\n          onChange={(e) => {\n            setIsForce(e.target.checked);\n          }}\n        >\n          {t('button.ForceTerminate')}\n        </Checkbox>\n        {isForce && (\n          <Card>\n            <Typography.Paragraph type=\"danger\">\n              {t('session.ForceTerminateWarningMsg')}\n            </Typography.Paragraph>\n            <ul>\n              <li>{t('session.ForceTerminateWarningMsg2')}</li>\n              <li>{t('session.ForceTerminateWarningMsg3')}</li>\n            </ul>\n            {userRole === 'superadmin' && (\n              <>\n                <Card type=\"inner\" title={t('session.ContainerToCleanUp')}>\n                  {_.chain(sessions)\n                    .map((s) => s?.kernel_nodes?.edges)\n                    .map((edges) => edges?.map((e) => e?.node))\n                    .flatten()\n                    .groupBy('agent_id')\n                    .map((kernels: Array<KernelType>, agentId: string) => {\n                      return (\n                        <>\n                          {agentId}\n                          <ul key={agentId}>\n                            {kernels.map((k) => (\n                              <li key={k.container_id}>\n                                <Typography.Text copyable>\n                                  {k.container_id}\n                                </Typography.Text>\n                              </li>\n                            ))}\n                          </ul>\n                        </>\n                      );\n                    })\n                    .value()}\n                </Card>\n              </>\n            )}\n          </Card>\n        )}\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default TerminateSessionModal;\n","import { useSuspendedBackendaiClient } from '../../hooks';\nimport { useBackendAIAppLauncher } from '../../hooks/useBackendAIAppLauncher';\nimport ContainerCommitModal from './ContainerCommitModal';\nimport ContainerLogModal from './ContainerLogModal';\nimport TerminateSessionModal from './TerminateSessionModal';\nimport {\n  SessionActionButtonsFragment$data,\n  SessionActionButtonsFragment$key,\n} from './__generated__/SessionActionButtonsFragment.graphql';\nimport { DeliveredProcedureOutlined } from '@ant-design/icons';\nimport { Tooltip, Button, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport { TerminalIcon, PowerOffIcon, ScrollTextIcon } from 'lucide-react';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ninterface SessionActionButtonsProps {\n  sessionFrgmt: SessionActionButtonsFragment$key | null;\n}\n// const isRunning = (session:SessionActionButtonsFragment$data) => {\n//   return [\n//     'batch',\n//     'interactive',\n//     'inference',\n//     'system',\n//     'running',\n//     'others',\n//   ].includes(session);\n// }\n\nconst isActive = (session: SessionActionButtonsFragment$data) => {\n  return !['TERMINATED', 'CANCELLED'].includes(session?.status || '');\n};\n// const isTransitional = (session: SessionActionButtonsFragment$data) => {\n//   return [\n//     'RESTARTING',\n//     'TERMINATING',\n//     'PENDING',\n//     'PREPARING',\n//     'CREATING',\n//     'PULLING',\n//   ].includes(session?.status || '');\n// };\n\nconst SessionActionButtons: React.FC<SessionActionButtonsProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const appLauncher = useBackendAIAppLauncher();\n  const baiClient = useSuspendedBackendaiClient();\n\n  const session = useFragment(\n    graphql`\n      fragment SessionActionButtonsFragment on ComputeSessionNode {\n        id\n        row_id @required(action: NONE)\n        type\n        status\n        access_key\n        service_ports\n        commit_status\n        ...TerminateSessionModalFragment\n        ...ContainerLogModalFragment\n        ...ContainerCommitModalFragment\n      }\n    `,\n    props.sessionFrgmt,\n  );\n  const [openTerminateModal, setOpenTerminateModal] = useState(false);\n  const [openLogModal, setOpenLogModal] = useState(false);\n  const [openContainerCommitModal, setOpenContainerCommitModal] =\n    useState(false);\n\n  // const isDisabledTermination = !['PENDING'].includes(session?.status || '') && session?.commit_status === 'ongoing'\n  // ${(this._isRunning && !this._isPreparing(rowData.item.status)) ||\n  //   this._isError(rowData.item.status)\n  return (\n    session && (\n      <>\n        {/* <Tooltip title={t('session.SeeAppDialog')}>\n        <Button icon={<LayoutGridIcon />} onClick={()=>{\n          appLauncher.showLauncher({\n            \"access-key\": session?.access_key || '',\n            \"service-ports\": session?.service_ports || '',\n          })\n        }} />\n      </Tooltip> */}\n        <Tooltip title={t('session.ExecuteTerminalApp')}>\n          <Button\n            disabled={!isActive(session)}\n            icon={<TerminalIcon />}\n            onClick={() => {\n              appLauncher.runTerminal(session?.row_id);\n            }}\n          />\n        </Tooltip>\n        {/* Don't put this modal to end of the return array(<></>). */}\n        <TerminateSessionModal\n          sessionFrgmts={[session]}\n          open={openTerminateModal}\n          onRequestClose={() => {\n            setOpenTerminateModal(false);\n          }}\n        />\n\n        <Tooltip title={t('session.SeeContainerLogs')}>\n          <Button\n            icon={<ScrollTextIcon />}\n            onClick={() => {\n              setOpenLogModal(true);\n            }}\n          />\n        </Tooltip>\n        <ContainerLogModal\n          sessionFrgmt={session}\n          open={openLogModal}\n          onCancel={() => {\n            setOpenLogModal(false);\n          }}\n        />\n        <Tooltip title={t('session.RequestContainerCommit')}>\n          <Button\n            disabled={\n              (!baiClient.supports('image-commit') ||\n                !baiClient._config.enableContainerCommit) &&\n              session.type !== 'system'\n            }\n            icon={<DeliveredProcedureOutlined style={{ fontSize: 14 }} />}\n            onClick={() => {\n              setOpenContainerCommitModal(true);\n            }}\n          />\n        </Tooltip>\n        <ContainerCommitModal\n          sessionFrgmt={session}\n          open={openContainerCommitModal}\n          onRequestClose={() => setOpenContainerCommitModal(false)}\n        />\n        <Tooltip title={t('session.TerminateSession')}>\n          <Button\n            disabled={!isActive(session)}\n            icon={\n              <PowerOffIcon\n                color={isActive(session) ? token.colorError : undefined}\n              />\n            }\n            onClick={() => {\n              setOpenTerminateModal(true);\n            }}\n          />\n        </Tooltip>\n      </>\n    )\n  );\n};\n\nexport default SessionActionButtons;\n","export const useBackendAIAppLauncher = () => {\n  // This is not use any React hooks, so it's not a React hook.\n  // But keep it here for the future refactoring.\n\n  // @ts-ignore\n  return {\n    runTerminal: (sessionId: string) => {\n      // @ts-ignore\n      globalThis.appLauncher.runTerminal(sessionId);\n    },\n    showLauncher: (params: {\n      'session-uuid'?: string;\n      'access-key'?: string;\n      'app-services'?: string;\n      mode?: string;\n      'app-services-option'?: string;\n      'service-ports'?: string;\n      runtime?: string;\n      filename?: string;\n      arguments?: string;\n    }) => {},\n  };\n};\n","import {\n  formatDurationAsDays,\n  toFixedFloorWithoutTrailingZeros,\n} from '../../helper';\nimport { useResourceSlotsDetails } from '../../hooks/backendai';\nimport DoubleTag from '../DoubleTag';\nimport Flex from '../Flex';\nimport { SessionIdleChecksFragment$key } from './__generated__/SessionIdleChecksFragment.graphql';\nimport { SessionIdleChecksNodeFragment$key } from './__generated__/SessionIdleChecksNodeFragment.graphql';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { Tooltip, Typography, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\ntype BaseExtra = null;\ntype UtilizationExtra = {\n  resources: {\n    cpu_util: number[];\n    mem: number[];\n    cuda_util: number[];\n    cuda_mem: number[];\n    ipu_util: number[];\n    ipu_mem: number[];\n  };\n  thresholds_check_operator: 'and' | 'or';\n};\nexport type IdleCheckItem = {\n  extra: BaseExtra | UtilizationExtra;\n  remaining: number | null;\n  remaining_time_type: 'expire_after' | 'grace_period';\n};\nexport type IdleChecks = {\n  network_timeout?: IdleCheckItem;\n  session_lifetime?: IdleCheckItem;\n  utilization?: IdleCheckItem;\n};\n\ninterface SessionIdleChecksProps {\n  sessionNodeFrgmt?: SessionIdleChecksNodeFragment$key | null;\n  sessionFrgmt?: SessionIdleChecksFragment$key | null;\n  direction?: 'row' | 'column';\n}\n\nexport function getUtilizationCheckerColor(\n  resources: Record<string, number[]> | number[],\n  thresholds_check_operator: 'and' | 'or' | null = null,\n) {\n  // Determine color based on single device utilization.\n  // resources: [number, number]\n  if (!thresholds_check_operator) {\n    const [utilization, threshold] = resources as number[];\n    if (utilization < threshold * 2) {\n      return 'red';\n    } else if (utilization < threshold * 10) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  }\n  // Determine color based on multiple device utilization.\n  // resources: Record<string, [number, number]>\n  let color: string | undefined = undefined;\n  if (thresholds_check_operator === 'and') {\n    _.every(resources, ([utilization, threshold]: number[]) => {\n      if (utilization < Math.min(threshold * 2, threshold + 5)) {\n        color = 'red';\n        return true;\n      } else if (utilization < Math.min(threshold * 10, threshold + 10)) {\n        color = 'orange';\n        return true;\n      } else {\n        color = 'green';\n        return true;\n      }\n    });\n  }\n\n  if (thresholds_check_operator === 'or') {\n    _.some(resources, ([utilization, threshold]: number[]) => {\n      if (utilization < Math.min(threshold * 2, threshold + 5)) {\n        color = 'red';\n        return true;\n      } else if (utilization < Math.min(threshold * 10, threshold + 10)) {\n        color = 'orange';\n        return true;\n      } else {\n        color = 'green';\n        return true;\n      }\n    });\n  }\n\n  return color;\n}\n\nexport function getIdleChecksTagColor(\n  result: IdleCheckItem,\n  criteria: 'remaining' | 'utilization',\n) {\n  // Determine color based on remaining time.\n  if (criteria === 'remaining') {\n    if (!result.remaining || result.remaining < 3600) {\n      return 'red';\n    } else if (result.remaining < 3600 * 4) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  }\n\n  // Determine color based on utilization.\n  if (result.extra && (!result.remaining || result.remaining < 3600 * 4)) {\n    return getUtilizationCheckerColor(\n      result.extra.resources,\n      result.extra.thresholds_check_operator,\n    );\n  }\n\n  return undefined;\n}\n\nconst SessionIdleChecks: React.FC<SessionIdleChecksProps> = ({\n  sessionNodeFrgmt = null,\n  sessionFrgmt = null,\n  direction = 'row',\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n\n  const sessionNode = useFragment(\n    graphql`\n      fragment SessionIdleChecksNodeFragment on ComputeSessionNode {\n        id\n        idle_checks @since(version: \"24.12.0\")\n      }\n    `,\n    sessionNodeFrgmt,\n  );\n  const session = useFragment(\n    graphql`\n      fragment SessionIdleChecksFragment on ComputeSession {\n        id\n        idle_checks @since(version: \"24.09.0\")\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const idleChecks: IdleChecks = JSON.parse(\n    sessionNode?.idle_checks || session?.idle_checks || '{}',\n  );\n\n  const getIdleCheckTitle = (key: keyof IdleChecks) => {\n    if (key === 'network_timeout') return t('session.NetworkIdleTimeout');\n    else if (key === 'session_lifetime') return t('session.MaxSessionLifetime');\n    else return t('session.UtilizationIdleTimeout');\n  };\n\n  const getRemainingTimeTypeLabel = (Type: 'expire_after' | 'grace_period') => {\n    if (Type === 'expire_after') {\n      return t('session.ExpiresAfter');\n    } else {\n      return t('session.GracePeriod');\n    }\n  };\n\n  return (\n    <Flex direction={direction} align=\"stretch\" gap=\"sm\">\n      {_.map(idleChecks, (value: IdleCheckItem, key: keyof IdleChecks) => {\n        if (!value.remaining) return null;\n\n        return (\n          <Flex\n            key={key}\n            style={{ flex: 1 }}\n            direction=\"column\"\n            align=\"stretch\"\n          >\n            <Flex gap={'xxs'}>\n              <Typography.Text>{getIdleCheckTitle(key)}</Typography.Text>\n              {key === 'utilization' && (\n                <Tooltip\n                  title={\n                    <>\n                      {`${t('session.Utilization')} / ${t('session.Threshold')} (%)`}\n                      <br />\n                      {_.map(value.extra?.resources, (resource, key) => {\n                        const deviceName = ['cpu_util', 'mem'].includes(key)\n                          ? _.split(key, '_')[0]\n                          : _.split(key, '_')[0] + '.device';\n                        const [utilization, threshold] = resource;\n                        return (\n                          <Flex key={key} gap={'xs'}>\n                            <Typography.Text\n                              style={{ color: token.colorWhite }}\n                            >{`${mergedResourceSlots?.[deviceName]?.human_readable_name}:`}</Typography.Text>\n                            <Typography.Text\n                              style={{\n                                color: getUtilizationCheckerColor(resource),\n                              }}\n                            >\n                              {`${utilization >= 0 ? toFixedFloorWithoutTrailingZeros(utilization, 1) : '-'} / ${threshold}`}\n                            </Typography.Text>\n                            <br />\n                          </Flex>\n                        );\n                      })}\n                    </>\n                  }\n                >\n                  <QuestionCircleOutlined\n                    style={{\n                      color: token.colorTextSecondary,\n                      cursor: 'pointer',\n                    }}\n                  />\n                </Tooltip>\n              )}\n            </Flex>\n\n            {value.remaining >= 0 ? (\n              // TODO: support real-time update by using useIntervalValue when idle_checks returns remaining time as date\n              <DoubleTag\n                values={[\n                  {\n                    label: getRemainingTimeTypeLabel(value.remaining_time_type),\n                    color: getIdleChecksTagColor(\n                      value,\n                      key === 'utilization' ? 'utilization' : 'remaining',\n                    ),\n                  },\n                  {\n                    label: formatDurationAsDays(\n                      new Date().toISOString(),\n                      new Date(\n                        new Date().getTime() + (value.remaining || 0) * 1000,\n                      ).toISOString(),\n                    ),\n                    color: getIdleChecksTagColor(\n                      value,\n                      key === 'utilization' ? 'utilization' : 'remaining',\n                    ),\n                  },\n                ]}\n              />\n            ) : (\n              <Typography.Text type=\"danger\">\n                {t('session.TimeoutExceeded')}\n              </Typography.Text>\n            )}\n          </Flex>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default SessionIdleChecks;\n","import { SessionTypeTagFragment$key } from './__generated__/SessionTypeTagFragment.graphql';\nimport { Tag } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst typeTagColor = {\n  INTERACTIVE: 'green',\n  BATCH: 'darkgreen',\n  INFERENCE: 'blue',\n};\n\ninterface SessionTypeTagProps {\n  sessionFrgmt: SessionTypeTagFragment$key;\n}\n\nconst SessionTypeTag: React.FC<SessionTypeTagProps> = ({ sessionFrgmt }) => {\n  const session = useFragment(\n    graphql`\n      fragment SessionTypeTagFragment on ComputeSessionNode {\n        type\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  return (\n    <Tag color={_.get(typeTagColor, _.toUpper(session.type || ''))}>\n      {_.toUpper(session.type || '')}\n    </Tag>\n  );\n};\n\nexport default SessionTypeTag;\n","import BAIModal from './BAIModal';\nimport Flex from './Flex';\nimport { ModalProps, Typography, theme } from 'antd';\nimport { useTranslation } from 'react-i18next';\n\ninterface IdleCheckDescriptionModalProps extends ModalProps {}\n\nconst IdleCheckDescriptionModal: React.FC<IdleCheckDescriptionModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  return (\n    <BAIModal\n      title={t('session.IdleChecks')}\n      footer={null}\n      width={700}\n      {...modalProps}\n    >\n      <Typography.Text>{t('session.IdleChecksDesc')}</Typography.Text>\n\n      <Typography.Title level={5}>\n        {t('session.MaxSessionLifetime')}\n      </Typography.Title>\n      <p>{t('session.MaxSessionLifetimeDesc')}</p>\n\n      <Typography.Title level={5}>\n        {t('session.NetworkIdleTimeout')}\n      </Typography.Title>\n      <p>{t('session.NetworkIdleTimeoutDesc')}</p>\n\n      <Typography.Title level={5}>\n        {t('session.UtilizationIdleTimeout')}\n      </Typography.Title>\n      <p>{t('session.UtilizationIdleTimeoutDesc')}</p>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{ marginLeft: token.marginMD }}\n      >\n        <Typography.Title level={5} style={{ margin: 0 }}>\n          {t('session.GracePeriod')}\n        </Typography.Title>\n        <p>{t('session.GracePeriodDesc')}</p>\n        <Typography.Title level={5} style={{ margin: 0 }}>\n          {t('session.UtilizationThreshold')}\n        </Typography.Title>\n        <p>{t('session.UtilizationThresholdDesc')}</p>\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default IdleCheckDescriptionModal;\n","import SessionKernelTags from '../components/ImageTags';\nimport { toGlobalId } from '../helper';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { ResourceNumbersOfSession } from '../pages/SessionLauncherPage';\nimport ConnectedKernelList from './ComputeSessionNodeItems/ConnectedKernelList';\nimport EditableSessionName from './ComputeSessionNodeItems/EditableSessionName';\nimport SessionActionButtons from './ComputeSessionNodeItems/SessionActionButtons';\nimport SessionIdleChecks, {\n  IdleChecks,\n} from './ComputeSessionNodeItems/SessionIdleChecks';\nimport SessionReservation from './ComputeSessionNodeItems/SessionReservation';\nimport SessionStatusTag from './ComputeSessionNodeItems/SessionStatusTag';\nimport SessionTypeTag from './ComputeSessionNodeItems/SessionTypeTag';\nimport Flex from './Flex';\nimport { useFolderExplorerOpener } from './FolderExplorerOpener';\nimport IdleCheckDescriptionModal from './IdleCheckDescriptionModal';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport SessionUsageMonitor from './SessionUsageMonitor';\nimport { SessionDetailContentLegacyQuery } from './__generated__/SessionDetailContentLegacyQuery.graphql';\nimport { SessionDetailContentQuery } from './__generated__/SessionDetailContentQuery.graphql';\nimport { FolderOutlined } from '@ant-design/icons';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Descriptions,\n  Grid,\n  Skeleton,\n  Tag,\n  theme,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport Title from 'antd/es/typography/Title';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nconst SessionDetailContent: React.FC<{\n  id: string;\n  fetchKey?: string;\n}> = ({ id, fetchKey }) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { md } = Grid.useBreakpoint();\n  const { open } = useFolderExplorerOpener();\n  const currentProject = useCurrentProjectValue();\n  const userRole = useCurrentUserRole();\n  const baiClient = useSuspendedBackendaiClient();\n  const [openIdleCheckDescriptionModal, setOpenIdleCheckDescriptionModal] =\n    useState<boolean>(false);\n\n  // TODO: remove and refactor this waterfall request after v24.12.0\n  // get the project id of the session for <= v24.12.0.\n  const { session_for_project_id } =\n    useLazyLoadQuery<SessionDetailContentLegacyQuery>(\n      graphql`\n        query SessionDetailContentLegacyQuery($uuid: UUID!) {\n          session_for_project_id: compute_session(id: $uuid) {\n            group_id\n          }\n        }\n      `,\n      {\n        uuid: id,\n      },\n      {\n        fetchPolicy: 'network-only',\n      },\n    );\n  const { session, legacy_session } =\n    useLazyLoadQuery<SessionDetailContentQuery>(\n      //  In compute_session_node, there are missing fields. We need to use `compute_session` to get the missing fields.\n      graphql`\n        query SessionDetailContentQuery(\n          $id: GlobalIDField!\n          $uuid: UUID!\n          $project_id: UUID!\n        ) {\n          session: compute_session_node(id: $id, project_id: $project_id) {\n            id\n            row_id\n            name\n            project_id\n            user_id\n            resource_opts\n            status\n            vfolder_mounts\n            created_at @required(action: NONE)\n            terminated_at\n            scaling_group\n            agent_ids\n            requested_slots\n            idle_checks @since(version: \"24.12.0\")\n\n            ...SessionStatusTagFragment\n            ...SessionActionButtonsFragment\n            ...SessionTypeTagFragment\n            ...EditableSessionNameFragment\n            ...SessionReservationFragment\n            # fix: This fragment is not used in this component, but it is required by the SessionActionButtonsFragment.\n            # It might be a bug in relay\n            ...ContainerLogModalFragment\n            ...SessionUsageMonitorFragment\n            ...ContainerCommitModalFragment\n            ...SessionIdleChecksNodeFragment\n          }\n          legacy_session: compute_session(id: $uuid) {\n            image\n            mounts\n            user_email\n            architecture\n            idle_checks @since(version: \"24.09.0\")\n            ...SessionIdleChecksFragment\n          }\n        }\n      `,\n      {\n        id: toGlobalId('ComputeSessionNode', id),\n        uuid: id,\n        project_id: session_for_project_id?.group_id || currentProject.id,\n      },\n      {\n        fetchPolicy: 'network-only',\n        fetchKey: fetchKey,\n      },\n    );\n\n  const imageFullName =\n    legacy_session?.image &&\n    legacy_session?.architecture &&\n    legacy_session.image + '@' + legacy_session.architecture;\n\n  const idleChecks: IdleChecks = JSON.parse(\n    session?.idle_checks || legacy_session?.idle_checks || '{}',\n  );\n  const imminentExpirationTime = _.min(\n    _.values(idleChecks)\n      .map((check) => check.remaining)\n      .filter(Boolean),\n  );\n  const showKernelList = baiClient._config.showKernelList;\n\n  return session ? (\n    <Flex direction=\"column\" gap={'lg'} align=\"stretch\">\n      {session_for_project_id?.group_id !== currentProject.id && (\n        <Alert message={t('session.NotInProject')} type=\"warning\" showIcon />\n      )}\n      {imminentExpirationTime && imminentExpirationTime < 3600 && (\n        <Alert\n          message={t('session.IdleCheckExpirationWarning')}\n          type=\"warning\"\n          showIcon\n        />\n      )}\n      <Flex direction=\"column\" gap={'sm'}>\n        <Flex\n          direction=\"row\"\n          justify=\"between\"\n          align=\"start\"\n          style={{\n            alignSelf: 'stretch',\n          }}\n          gap={'sm'}\n        >\n          <EditableSessionName\n            sessionFrgmt={session}\n            component={Title}\n            level={3}\n            style={{\n              margin: 0,\n              color: ['TERMINATED', 'CANCELLED'].includes(session.status || '')\n                ? token.colorTextTertiary\n                : undefined,\n            }}\n            editable={\n              !['TERMINATED', 'CANCELLED'].includes(session.status || '')\n            }\n          />\n          <Button.Group size=\"large\">\n            <SessionActionButtons sessionFrgmt={session} />\n          </Button.Group>\n        </Flex>\n\n        <Descriptions bordered column={md ? 2 : 1}>\n          <Descriptions.Item label={t('session.SessionId')} span={md ? 2 : 1}>\n            <Typography.Text copyable style={{ fontFamily: 'monospace' }}>\n              {session.row_id}\n            </Typography.Text>\n          </Descriptions.Item>\n          {(userRole === 'admin' || userRole === 'superadmin') && (\n            <Descriptions.Item label={t('credential.UserID')} span={md ? 2 : 1}>\n              {legacy_session?.user_email}\n            </Descriptions.Item>\n          )}\n          <Descriptions.Item\n            label={t('session.Status')}\n            contentStyle={{ display: 'flex', gap: token.marginSM }}\n          >\n            <SessionStatusTag sessionFrgmt={session} showInfo />\n            {/* <Button type=\"text\" icon={<TriangleAlertIcon />} /> */}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.SessionType')}>\n            <SessionTypeTag sessionFrgmt={session} />\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.Environments')}>\n            {imageFullName ? (\n              <Flex gap={'sm'}>\n                <ImageMetaIcon image={imageFullName} />\n                <Flex>\n                  <SessionKernelTags image={imageFullName} />\n                </Flex>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.MountedFolders')}>\n            {baiClient.supports('vfolder-mounts')\n              ? _.map(\n                  _.zip(legacy_session?.mounts, session?.vfolder_mounts),\n                  (mountInfo) => {\n                    const [name, id] = mountInfo;\n                    return (\n                      <Button\n                        key={id}\n                        type=\"link\"\n                        size=\"small\"\n                        icon={<FolderOutlined />}\n                        onClick={() => {\n                          open(id ?? '');\n                        }}\n                      >\n                        {name}\n                      </Button>\n                    );\n                  },\n                )\n              : legacy_session?.mounts?.join(', ')}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.ResourceAllocation')}>\n            <Flex gap={'sm'} wrap=\"wrap\">\n              <Tooltip title={t('session.ResourceGroup')}>\n                <Tag>{session.scaling_group}</Tag>\n              </Tooltip>\n              <ResourceNumbersOfSession\n                resource={JSON.parse(session.requested_slots || '{}')}\n              />\n            </Flex>\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.Agent')}>\n            {session.agent_ids || '-'}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.Reservation')} span={md ? 2 : 1}>\n            <Flex gap={'xs'} wrap={'wrap'}>\n              <SessionReservation sessionFrgmt={session} />\n            </Flex>\n          </Descriptions.Item>\n          {baiClient.supports('idle-checks-gql') &&\n          session.status === 'RUNNING' &&\n          imminentExpirationTime ? (\n            <Descriptions.Item\n              label={\n                <Flex gap=\"xxs\">\n                  {t('session.IdleChecks')}\n                  <Tooltip title={t('button.ClickForMoreDetails')}>\n                    <InfoCircleOutlined\n                      style={{ cursor: 'pointer' }}\n                      onClick={() => setOpenIdleCheckDescriptionModal(true)}\n                    />\n                  </Tooltip>\n                </Flex>\n              }\n              span={md ? 2 : 1}\n            >\n              <SessionIdleChecks\n                sessionNodeFrgmt={session}\n                sessionFrgmt={legacy_session}\n                direction={md ? 'row' : 'column'}\n              />\n            </Descriptions.Item>\n          ) : null}\n          <Descriptions.Item label={'Resource Usage'} span={md ? 2 : 1}>\n            <SessionUsageMonitor sessionFrgmt={session} />\n          </Descriptions.Item>\n        </Descriptions>\n      </Flex>\n      {showKernelList ? (\n        <Suspense fallback={<Skeleton />}>\n          <Flex direction=\"column\" gap={'sm'} align=\"stretch\">\n            <Typography.Title level={4} style={{ margin: 0 }}>\n              {t('kernel.Kernels')}\n            </Typography.Title>\n            <ConnectedKernelList id={id} fetchKey={fetchKey} />\n          </Flex>\n        </Suspense>\n      ) : null}\n      <IdleCheckDescriptionModal\n        open={openIdleCheckDescriptionModal}\n        onCancel={() => setOpenIdleCheckDescriptionModal(false)}\n      />\n    </Flex>\n  ) : (\n    <Alert\n      showIcon\n      message={t('session.SessionNotFound')}\n      type=\"error\"\n      description={id}\n    ></Alert>\n  );\n};\n\nexport default SessionDetailContent;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useInterval } from '../hooks/useIntervalValue';\nimport SessionDetailContent from './SessionDetailContent';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { Button, Drawer, Skeleton, Tooltip } from 'antd';\nimport { DrawerProps } from 'antd/lib';\nimport React, { Suspense, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\n\n// import { StringParam, useQueryParam } from 'use-query-params';\n\ninterface SessionDetailDrawerProps extends DrawerProps {\n  sessionId?: string;\n}\nconst SessionDetailDrawer: React.FC<SessionDetailDrawerProps> = ({\n  sessionId,\n  ...drawerProps\n}) => {\n  const { t } = useTranslation();\n  // const [sessionId, setSessionId] = useQueryParam('sessionDetail', StringParam);\n  useSuspendedBackendaiClient();\n\n  const [isPendingReload, startReloadTransition] = useTransition();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n\n  useInterval(() => {\n    startReloadTransition(() => {\n      updateFetchKey();\n    });\n  }, 7_000);\n  return (\n    <Drawer\n      title={t('session.SessionInfo')}\n      width={800}\n      keyboard={false}\n      {...drawerProps}\n      open={!!sessionId}\n      onClose={(e) => {\n        drawerProps.onClose?.(e);\n        // setSessionId(null, 'pushIn');\n      }}\n      extra={\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingReload}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startReloadTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n      }\n    >\n      <Suspense fallback={<Skeleton />}>\n        {sessionId && (\n          <SessionDetailContent id={sessionId} fetchKey={fetchKey} />\n        )}\n      </Suspense>\n    </Drawer>\n  );\n};\n\nexport default SessionDetailDrawer;\n","import {\n  convertBinarySizeUnit,\n  convertDecimalSizeUnit,\n  filterEmptyItem,\n  toFixedFloorWithoutTrailingZeros,\n} from '../helper';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport Flex from './Flex';\nimport { SessionUsageMonitorFragment$key } from './__generated__/SessionUsageMonitorFragment.graphql';\nimport { ProgressProps, Tooltip, Typography, theme, Row, Col } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useMemo } from 'react';\nimport { useFragment } from 'react-relay';\n\ninterface SessionUsageMonitorProps extends ProgressProps {\n  sessionFrgmt: SessionUsageMonitorFragment$key | null;\n  size?: 'small' | 'default';\n}\n\ninterface SessionUtilItemProps {\n  size: 'small' | 'default';\n  title: React.ReactNode;\n  percent: string;\n  tooltipTitle?: React.ReactNode;\n  description?: React.ReactNode;\n}\n\nconst SessionUtilItem: React.FC<SessionUtilItemProps> = ({\n  size,\n  title,\n  percent,\n  tooltipTitle,\n  description,\n}) => {\n  const { token } = theme.useToken();\n\n  const formattedPercent = toFixedFloorWithoutTrailingZeros(percent || 0, 1);\n  const percentLabel = formattedPercent + '%';\n\n  if (size === 'default') {\n    return (\n      <>\n        <Flex justify=\"between\">\n          <Typography.Text>{title}</Typography.Text>\n          {description && (\n            <Typography.Text\n              type=\"secondary\"\n              style={{ fontSize: token.fontSizeSM }}\n            >\n              {description}\n            </Typography.Text>\n          )}\n        </Flex>\n        <BAIProgressWithLabel\n          percent={_.toNumber(percent)}\n          valueLabel={percentLabel}\n          strokeColor=\"#BFBFBF\"\n          progressStyle={{ border: 'none' }}\n        />\n      </>\n    );\n  }\n\n  return (\n    <Tooltip title={tooltipTitle || title} placement=\"left\">\n      <Flex direction=\"row\" gap={'xxs'}>\n        <Flex\n          style={{\n            // Max width is 140px, min width is 3px\n            width: _.max([Math.round(_.toNumber(percent) * 1.4), 3]),\n            height: 12,\n            backgroundColor: '#BFBFBF',\n          }}\n        ></Flex>\n        <Typography.Text\n          style={{\n            fontSize: token.fontSizeSM,\n            lineHeight: `${token.fontSizeSM}px`,\n          }}\n        >\n          {_.toNumber(percent).toFixed(0) + '%'}\n        </Typography.Text>\n      </Flex>\n    </Tooltip>\n  );\n};\n\nconst SessionUsageMonitor: React.FC<SessionUsageMonitorProps> = ({\n  sessionFrgmt,\n  size = 'default',\n}) => {\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n\n  const sessionNode = useFragment(\n    graphql`\n      fragment SessionUsageMonitorFragment on ComputeSessionNode {\n        kernel_nodes {\n          edges {\n            node {\n              live_stat\n              occupied_slots\n            }\n          }\n        }\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const firstKernelNode = _.get(sessionNode, 'kernel_nodes.edges[0].node');\n  const occupiedSlots = useMemo(\n    () => JSON.parse(firstKernelNode?.occupied_slots ?? '{}'),\n    [firstKernelNode?.occupied_slots],\n  );\n  const resourceSlotNames = _.keysIn(occupiedSlots);\n  const liveStat = JSON.parse(\n    _.get(sessionNode, 'kernel_nodes.edges[0].node.live_stat') ?? '{}',\n  );\n\n  // to display util first, mem second\n  const sortedLiveStat = useMemo(\n    () =>\n      Object.keys(liveStat)\n        .sort((a, b) => {\n          const aUtil = a.includes('_util');\n          const bUtil = b.includes('_util');\n          const aMem = a.includes('_mem');\n          const bMem = b.includes('_mem');\n\n          if (aUtil && !bUtil) return -1;\n          if (!aUtil && bUtil) return 1;\n          if (aMem && !bMem) return -1;\n          if (!aMem && bMem) return 1;\n\n          return 0;\n        })\n        .reduce((acc: { [key: string]: any }, key) => {\n          acc[key] = liveStat[key];\n          return acc;\n        }, {}),\n    [liveStat],\n  );\n\n  const displayMemoryUsage = (\n    current: string,\n    capacity: string,\n    decimalSize: number = 2,\n  ) => {\n    return `${convertBinarySizeUnit(current, 'g', decimalSize)?.numberFixed ?? '-'} / ${\n      convertBinarySizeUnit(capacity, 'g', decimalSize)?.numberFixed ?? '-'\n    } GiB`;\n  };\n\n  const utilItems = filterEmptyItem([\n    sortedLiveStat?.cpu_util && (\n      <SessionUtilItem\n        key={'cpu'}\n        size={size}\n        title={mergedResourceSlots?.['cpu']?.human_readable_name}\n        percent={sortedLiveStat?.cpu_util?.pct || 0}\n      />\n    ),\n    sortedLiveStat?.mem && (\n      <SessionUtilItem\n        key={'mem'}\n        size={size}\n        title={mergedResourceSlots?.['mem']?.human_readable_name}\n        percent={sortedLiveStat?.mem?.pct || 0}\n        description={displayMemoryUsage(\n          sortedLiveStat?.mem?.current,\n          occupiedSlots?.mem,\n        )}\n        tooltipTitle={\n          <Flex direction=\"column\" align=\"stretch\">\n            {mergedResourceSlots?.['mem']?.human_readable_name}\n            <br />\n            {displayMemoryUsage(\n              sortedLiveStat?.mem?.current,\n              occupiedSlots?.mem,\n            )}\n          </Flex>\n        }\n      />\n    ),\n    ..._.map(\n      _.omit(sortedLiveStat, 'cpu_util', 'cpu_used', 'mem'),\n      (value, key) => {\n        const deviceName = _.split(key, '_')[0];\n        let deviceKey = _.find(resourceSlotNames, (name) =>\n          _.includes(name, deviceName),\n        );\n\n        if (size === 'small' && !key?.endsWith('mem')) {\n          deviceKey = undefined;\n        }\n\n        return deviceKey ? (\n          <SessionUtilItem\n            key={key}\n            size={size}\n            title={\n              <>\n                {mergedResourceSlots?.[deviceKey]?.human_readable_name}\n                <Typography.Text type=\"secondary\">\n                  {_.includes(key, 'util') && ' (util)'}\n                  {_.includes(key, 'mem') && ' (mem)'}\n                </Typography.Text>\n              </>\n            }\n            percent={value.pct || 0}\n            description={\n              _.includes(key, 'mem')\n                ? displayMemoryUsage(value?.current, value?.capacity)\n                : undefined\n            }\n            tooltipTitle={\n              <Flex direction=\"column\" align=\"stretch\">\n                {mergedResourceSlots?.[deviceKey]?.human_readable_name}\n                {_.includes(key, 'mem') && (\n                  <>\n                    (mem)\n                    <br />\n                    {displayMemoryUsage(value?.current, value?.capacity)}\n                  </>\n                )}\n              </Flex>\n            }\n          />\n        ) : null;\n      },\n    ),\n  ]);\n\n  return (\n    <Row gutter={[16, 16]}>\n      {size === 'default' ? (\n        _.map(utilItems, (item, index) => (\n          <Col xs={24} sm={12} key={index}>\n            <Flex direction=\"column\" align=\"stretch\">\n              {item}\n            </Flex>\n          </Col>\n        ))\n      ) : (\n        <Flex direction=\"column\" align=\"stretch\" gap={3}>\n          {utilItems}\n        </Flex>\n      )}\n      {size === 'default' && (\n        <Col span={24}>\n          <Flex justify=\"end\">\n            <Typography.Text>\n              {`I/O Read: ${convertDecimalSizeUnit(sortedLiveStat?.io_read?.current, 'm')?.numberUnit ?? '-'}B / Write: ${convertDecimalSizeUnit(sortedLiveStat?.io_write?.current, 'm')?.numberUnit ?? '-'}B`}\n            </Typography.Text>\n          </Flex>\n        </Col>\n      )}\n    </Row>\n  );\n};\n\nexport default SessionUsageMonitor;\n","/**\n * @generated SignedSource<<7704b96e01528e85cdc0f1230b0069c0>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionDetailContentLegacyQuery$variables = {\n  uuid: string;\n};\nexport type SessionDetailContentLegacyQuery$data = {\n  readonly session_for_project_id: {\n    readonly group_id: string | null | undefined;\n  } | null | undefined;\n};\nexport type SessionDetailContentLegacyQuery = {\n  response: SessionDetailContentLegacyQuery$data;\n  variables: SessionDetailContentLegacyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"uuid\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"group_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session_for_project_id\",\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"1c0255a2836eb7e492954c7ab0212c7f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionDetailContentLegacyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionDetailContentLegacyQuery(\\n  $uuid: UUID!\\n) {\\n  session_for_project_id: compute_session(id: $uuid) {\\n    group_id\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d6a0dfbccdec8393f1a058dab48a0757\";\n\nexport default node;\n","/**\n * @generated SignedSource<<41a285d5f7be0e497210033aeec0affe>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionDetailContentQuery$variables = {\n  id: any;\n  project_id: string;\n  uuid: string;\n};\nexport type SessionDetailContentQuery$data = {\n  readonly legacy_session: {\n    readonly architecture: string | null | undefined;\n    readonly idle_checks: string | null | undefined;\n    readonly image: string | null | undefined;\n    readonly mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly user_email: string | null | undefined;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"SessionIdleChecksFragment\">;\n  } | null | undefined;\n  readonly session: {\n    readonly agent_ids: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly created_at: string;\n    readonly id: string;\n    readonly idle_checks: string | null | undefined;\n    readonly name: string | null | undefined;\n    readonly project_id: string | null | undefined;\n    readonly requested_slots: string | null | undefined;\n    readonly resource_opts: string | null | undefined;\n    readonly row_id: string | null | undefined;\n    readonly scaling_group: string | null | undefined;\n    readonly status: string | null | undefined;\n    readonly terminated_at: string | null | undefined;\n    readonly user_id: string | null | undefined;\n    readonly vfolder_mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerCommitModalFragment\" | \"ContainerLogModalFragment\" | \"EditableSessionNameFragment\" | \"SessionActionButtonsFragment\" | \"SessionIdleChecksNodeFragment\" | \"SessionReservationFragment\" | \"SessionStatusTagFragment\" | \"SessionTypeTagFragment\" | \"SessionUsageMonitorFragment\">;\n  } | null | undefined;\n};\nexport type SessionDetailContentQuery = {\n  response: SessionDetailContentQuery$data;\n  variables: SessionDetailContentQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"id\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"project_id\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"uuid\"\n},\nv3 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"id\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"project_id\",\n    \"variableName\": \"project_id\"\n  }\n],\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"project_id\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"user_id\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"resource_opts\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"vfolder_mounts\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"created_at\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"terminated_at\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"scaling_group\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"agent_ids\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"requested_slots\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"idle_checks\",\n  \"storageKey\": null\n},\nv18 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"uuid\"\n  }\n],\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mounts\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"user_email\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionDetailContentQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          (v5/*: any*/),\n          (v6/*: any*/),\n          (v7/*: any*/),\n          (v8/*: any*/),\n          (v9/*: any*/),\n          (v10/*: any*/),\n          (v11/*: any*/),\n          {\n            \"kind\": \"RequiredField\",\n            \"field\": (v12/*: any*/),\n            \"action\": \"NONE\",\n            \"path\": \"session.created_at\"\n          },\n          (v13/*: any*/),\n          (v14/*: any*/),\n          (v15/*: any*/),\n          (v16/*: any*/),\n          (v17/*: any*/),\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionStatusTagFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionActionButtonsFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionTypeTagFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"EditableSessionNameFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionReservationFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ContainerLogModalFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionUsageMonitorFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ContainerCommitModalFragment\"\n          },\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionIdleChecksNodeFragment\"\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v18/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v19/*: any*/),\n          (v20/*: any*/),\n          (v21/*: any*/),\n          (v22/*: any*/),\n          (v17/*: any*/),\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"SessionIdleChecksFragment\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v2/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"SessionDetailContentQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"session\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          (v5/*: any*/),\n          (v6/*: any*/),\n          (v7/*: any*/),\n          (v8/*: any*/),\n          (v9/*: any*/),\n          (v10/*: any*/),\n          (v11/*: any*/),\n          (v12/*: any*/),\n          (v13/*: any*/),\n          (v14/*: any*/),\n          (v15/*: any*/),\n          (v16/*: any*/),\n          (v17/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"status_info\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"type\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"access_key\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"service_ports\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"commit_status\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"KernelConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"kernel_nodes\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"KernelEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"container_id\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"agent_id\",\n                        \"storageKey\": null\n                      },\n                      (v4/*: any*/),\n                      (v5/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_idx\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"cluster_role\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"live_stat\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"occupied_slots\",\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"priority\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"starts_at\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"legacy_session\",\n        \"args\": (v18/*: any*/),\n        \"concreteType\": \"ComputeSession\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session\",\n        \"plural\": false,\n        \"selections\": [\n          (v19/*: any*/),\n          (v20/*: any*/),\n          (v21/*: any*/),\n          (v22/*: any*/),\n          (v17/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"e0308612a16a49c1d3f8af5b039313ca\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionDetailContentQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionDetailContentQuery(\\n  $id: GlobalIDField!\\n  $uuid: UUID!\\n  $project_id: UUID!\\n) {\\n  session: compute_session_node(id: $id, project_id: $project_id) {\\n    id\\n    row_id\\n    name\\n    project_id\\n    user_id\\n    resource_opts\\n    status\\n    vfolder_mounts\\n    created_at\\n    terminated_at\\n    scaling_group\\n    agent_ids\\n    requested_slots\\n    idle_checks @since(version: \\\"24.12.0\\\")\\n    ...SessionStatusTagFragment\\n    ...SessionActionButtonsFragment\\n    ...SessionTypeTagFragment\\n    ...EditableSessionNameFragment\\n    ...SessionReservationFragment\\n    ...ContainerLogModalFragment\\n    ...SessionUsageMonitorFragment\\n    ...ContainerCommitModalFragment\\n    ...SessionIdleChecksNodeFragment\\n  }\\n  legacy_session: compute_session(id: $uuid) {\\n    image\\n    mounts\\n    user_email\\n    architecture\\n    idle_checks @since(version: \\\"24.09.0\\\")\\n    ...SessionIdleChecksFragment\\n    id\\n  }\\n}\\n\\nfragment ContainerCommitModalFragment on ComputeSessionNode {\\n  id\\n  name\\n  row_id\\n}\\n\\nfragment ContainerLogModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        id\\n        row_id\\n        container_id\\n        cluster_idx\\n        cluster_role\\n      }\\n    }\\n  }\\n}\\n\\nfragment EditableSessionNameFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  priority\\n  user_id\\n  status\\n}\\n\\nfragment SessionActionButtonsFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  type\\n  status\\n  access_key\\n  service_ports\\n  commit_status\\n  ...TerminateSessionModalFragment\\n  ...ContainerLogModalFragment\\n  ...ContainerCommitModalFragment\\n}\\n\\nfragment SessionIdleChecksFragment on ComputeSession {\\n  id\\n  idle_checks @since(version: \\\"24.09.0\\\")\\n}\\n\\nfragment SessionIdleChecksNodeFragment on ComputeSessionNode {\\n  id\\n  idle_checks @since(version: \\\"24.12.0\\\")\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  name\\n  status\\n  status_info\\n}\\n\\nfragment SessionTypeTagFragment on ComputeSessionNode {\\n  type\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        occupied_slots\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment TerminateSessionModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  scaling_group\\n  kernel_nodes {\\n    edges {\\n      node {\\n        container_id\\n        agent_id\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"93950b0e90c5428c5cac947b9590f657\";\n\nexport default node;\n","/**\n * @generated SignedSource<<b2e03ee4c0f214048203611ced0c343d>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionUsageMonitorFragment$data = {\n  readonly kernel_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly live_stat: string | null | undefined;\n        readonly occupied_slots: string | null | undefined;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly \" $fragmentType\": \"SessionUsageMonitorFragment\";\n};\nexport type SessionUsageMonitorFragment$key = {\n  readonly \" $data\"?: SessionUsageMonitorFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionUsageMonitorFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionUsageMonitorFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"KernelConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"kernel_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"KernelEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"KernelNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"live_stat\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"occupied_slots\",\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"62951e4aee90e7e894e7f47a02b84dab\";\n\nexport default node;\n","import _ from 'lodash';\n\n/**\n * Escapes a value for CSV formatting.\n *\n * @param value - The value to escape.\n * @returns The escaped value.\n */\nfunction escapeCsvValue(value: any) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  if (typeof value === 'number' || typeof value === 'boolean') {\n    return String(value);\n  }\n\n  // Convert non-string values to string using JSON.stringify\n  value = _.isString(value) ? value : JSON.stringify(value);\n\n  // Replace double quotes within the value with two double quotes\n  return `\"${value.replace(/\"/g, '\"\"')}\"`;\n}\n\n/**\n * Converts an array of JSON objects to a CSV string.\n *\n * @param data - The array of JSON objects to convert.\n * @param format_rules - The formatting rules for each property in the JSON objects.\n * @returns The CSV string representation of the JSON objects.\n */\nexport const JSONToCSVBody = <T>(\n  data: T[],\n  format_rules?: {\n    [key in keyof T]?: (value: any) => any;\n  },\n) => {\n  const displayedData = _.map(data, (row) => {\n    return _.omit(row as object, '__fragments', '__fragmentOwner', '__id');\n  });\n\n  const CSVTitle = _.keys(displayedData[0]);\n  const CSVData = _.map(displayedData, (row) => {\n    return _.map(row, (value, key) => {\n      if (format_rules?.[key as keyof T]) {\n        return format_rules[key as keyof T]?.(value) || value;\n      }\n      return value;\n    });\n  });\n\n  const csvContent = CSVData.map((row) =>\n    row.map(escapeCsvValue).join(','),\n  ).join('\\n');\n  const csvBody = [CSVTitle.map(escapeCsvValue).join(','), csvContent].join(\n    '\\n',\n  );\n\n  return csvBody;\n};\n\n/**\n * Download a file from the given blob.\n * @param {Blob} blob - The file content.\n * @param {string} filename - The name of the file.\n */\n\nexport const downloadBlob = (blob: Blob, filename: string) => {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  URL.revokeObjectURL(url);\n};\n\nexport const exportCSVWithFormattingRules = <T>(\n  data: T[],\n  filename: string,\n  format_rules?: {\n    [key in keyof T]?: (value: any) => any;\n  },\n) => {\n  const bodyStr = JSONToCSVBody(data, format_rules);\n  const blob = new Blob([bodyStr], { type: 'text/csv' });\n  downloadBlob(blob, `${filename}.csv`);\n};\n","import { useTranslation } from 'react-i18next';\n\nconst errorMessageTable: {\n  [key: string]: string;\n} = {\n  \"Cannot read property 'map' of null\": 'error.APINotSupported',\n  'TypeError: NetworkError when attempting to fetch resource.':\n    'error.NetworkConnectionFailed', //_t('error.NetworkConnectionFailed')\n  // Login\n  'Login failed. Check login information.': 'error.LoginFailed', //_t('error.LoginFailed')\n  'User credential mismatch.': 'error.LoginFailed', //_t('error.LoginFailed')\n  'Authentication failed. Check information and manager status.':\n    'error.AuthenticationFailed', //_t('error.AuthenticationFailed')\n  'Too many failed login attempts': 'error.TooManyLoginFailures', //_t('error.TooManyLoginFailures')\n  // virtual folders\n  'server responded failure: 400 Bad Request - The virtual folder already exists with the same name.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  '400 Bad Request - The virtual folder already exists with the same name.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  'server responded failure: 400 Bad Request - One of your accessible vfolders already has the name you requested.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  'server responded failure: 400 Bad Request - You cannot create more vfolders.':\n    'error.MaximumVfolderCreation', //_t('error.MaximumVfolderCreation')\n  'server responded failure: 400 Bad Request - Missing or invalid API parameters. (You cannot create more vfolders.)':\n    'error.MaximumVfolderCreation', //_t('error.MaximumVfolderCreation')\n  'server responded failure: 400 Bad Request - Cannot change the options of a vfolder that is not owned by myself.':\n    'error.CannotChangeVirtualFolderOption', //_t('error.CannotChangeVirtualFolderOption')\n  'server responded failure: 403 Forbidden - Cannot share private dot-prefixed vfolders.':\n    'error.CannotSharePrivateAutomountFolder', //_t('error.CannotSharePrivateAutomountFolder')\n  'server responded failure: 404 Not Found - No such vfolder invitation.':\n    'error.FolderSharingNotAvailableToUser', //_t('error.FolderSharingNotAvailableToUser')\n  'server responded failure: 404 Not Found - No such user.':\n    'error.FolderSharingNotAvailableToUser', //_t('error.FolderSharingNotAvailableToUser')\n  // Resource\n  'server responded failure: 412 Precondition Failed - You have reached your resource limit.':\n    'error.ReachedResourceLimit', //_t('error.ReachedResourceLimit')\n  // User\n  \"Cannot read property 'split' of undefined\": 'error.UserHasNoGroup', //_t('error.UserHasNoGroup')\n};\nconst regexTable: {\n  [key: string]: string;\n} = {\n  '\\\\w*not found matched token with email\\\\w*': 'error.InvalidSignupToken', //_t('error.InvalidSignupToken')\n  '\\\\w*Access key not found\\\\w*': 'error.LoginInformationMismatch', //_t('error.LoginInformationMismatch')\n  '\\\\w*401 Unauthorized - Credential/signature mismatch\\\\w*':\n    'error.LoginInformationMismatch', //_t('error.LoginInformationMismatch')\n  'integrity error: duplicate key value violates unique constraint \"pk_resource_presets\"[\\\\n]DETAIL:  Key \\\\(name\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.ResourcePolicyAlreadyExist', //_t('error.ResourcePolicyAlreadyExist')\n  'integrity error: duplicate key value violates unique constraint \"pk_scaling_groups\"[\\\\n]DETAIL:  Key \\\\(name\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.ScalingGroupAlreadyExist', //_t('error.ScalingGroupAlreadyExist')\n  'integrity error: duplicate key value violates unique constraint \"uq_users_username\"[\\\\n]DETAIL:  Key \\\\(username\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.UserNameAlreadyExist', //_t('error.UserNameAlreadyExist')\n  'server responded failure: 400 Bad Request - Missing or invalid API parameters. (Your resource quota is exceeded. (cpu=24 mem=512g cuda.shares=80))':\n    'error.ResourceLimitExceed', //_t('error.ResourceLimitExceed')\n  '\\\\w*Key \\\\(name\\\\)=\\\\(.+\\\\) is still referenced from table \"keypairs\"\\\\.\\\\w*':\n    'error.ResourcePolicyStillReferenced', //_t('error.ResourcePolicyStillReferenced')\n  'Your resource request is smaller than the minimum required by the image. (\\\\w*)':\n    'error.SmallerResourceThenImageRequires', //_t('error.SmallerResourceThenImageRequires')\n};\n\nexport const usePainKiller = () => {\n  const { t } = useTranslation();\n  const relieve = (msg: string) => {\n    if (typeof msg === 'undefined') {\n      if (\n        // @ts-ignore\n        globalThis.backendaiclient === undefined ||\n        // @ts-ignore\n        globalThis.backendaiclient === null\n      ) {\n        return '_DISCONNECTED';\n      } else {\n        return 'Problem occurred.';\n      }\n    }\n    // @ts-ignore\n    if (globalThis.backendaiwebui.debug === true) {\n      return msg;\n    }\n    if ({}.hasOwnProperty.call(errorMessageTable, msg)) {\n      return t(errorMessageTable[msg]);\n    } else {\n      for (const regex of Object.keys(regexTable)) {\n        if (RegExp(regex).test(msg)) {\n          return t(regexTable[regex]);\n        }\n      }\n      return msg; // Bypass message. It will log on log panel\n    }\n  };\n  return { relieve };\n};\n"],"names":["_ref","title","valueLabel","percent","width","strokeColor","labelStyle","progressStyle","size","token","theme","useToken","fontSize","fontSizeSM","fontSizeLG","_jsxs","Flex","style","padding","border","colorBorder","borderRadius","backgroundColor","colorBgContainerDisabled","_","flex","direction","align","children","_jsx","height","position","left","top","colorSuccess","opacity","zIndex","overflow","justify","Typography","Text","color","colorTextDisabled","undefined","useStyles","createStyles","css","resizableTable","neoHeader","colorTextTertiary","ResizableTitle","props","onResize","onClick","restProps","wrapRef","useRef","isResizing","setIsResizing","useState","debouncedIsResizing","useDebounce","wait","useEffect","current","offsetWidth","offsetHeight","node","handle","ref","Resizable","className","e","stopPropagation","onResizeStart","onResizeStop","draggableOpts","enableUserSelectHack","preventDefault","columnKeyOrIndexKey","column","index","key","_ref2","resizable","columns","components","neoStyle","tableProps","styles","isDarkMode","useThemeMode","resizedColumnWidths","setResizedColumnWidths","widths","generateResizedColumnWidths","mergedColumns","useMemo","onHeaderCell","_ref3","prev","ConfigProvider","Table","headerBg","sortDirections","showSorterTooltip","classNames","header","cell","_session$kernel_nodes","_session$kernel_nodes2","_$find","_kernelNodes$","_session$row_id$split","_session$kernel_nodes3","sessionFrgmt","modalProps","baiClient","useSuspendedBackendaiClient","userRole","useCurrentUserRole","session","useFragment","_ContainerLogModalFragment","require","kernelNodes","kernel_nodes","edges","map","selectedKernelId","setSelectedKernelId","cluster_role","row_id","open","data","logs","refetch","isPending","isRefetching","dataUpdatedAt","useTanQuery","queryKey","access_key","queryFn","async","get_logs","then","req","result","staleTime","lastLineNumbers","resetPrevious","resetPreviousLineNumber","factory","deps","initialPrev","arguments","length","prevRef","prevResetKey","setPrevResetKey","memoizedPrev","previous","useMemoWithPrevious","split","md","Grid","useBreakpoint","t","useTranslation","BAIModal","maxWidth","gap","Title","level","margin","flexShrink","_Fragment","fontWeight","ellipsis","name","fontFamily","copyable","text","tooltips","body","maxHeight","footer","destroyOnClose","wrap","BAISelect","value","onChange","autoSelectOption","options","sortBy","_e$node","_e$node2","cluster_idx","_e$node3","_e$node4","_e$node5","_e$node6","_e$node7","label","type","substring","Divider","Tooltip","Button","icon","DownloadIcon","disabled","blob","Blob","downloadBlob","Date","toISOString","loading","ReloadOutlined","alignSelf","ScrollFollow","startFollowing","render","follow","onScroll","LazyLog","caseInsensitive","enableSearch","enableSearchNavigation","selectableLines","highlight","extraLines","mode","_SessionReservationFragment","dayjs","created_at","format","BAIIntervalView","callback","begin","starts_at","isBefore","formatDurationAsDays","terminated_at","delay","intervalValue","DoubleTag","values","id","statusTagColor","RESTARTING","PREPARING","PREPARED","CREATING","PULLING","RUNNING","PENDING","SCHEDULED","ERROR","isTransitional","includes","status","statusInfoTagColor","showInfo","_SessionStatusTagFragment","status_info","Tag","LoadingOutlined","spin","marginLeft","borderStyle","colorTextSecondary","v0","v1","v2","hash","v3","kernelStatusTagColor","BUILDING","RESIZING","SUSPENDED","TERMINATING","TERMINATED","CANCELLED","fetchKey","currentProject","useCurrentProjectValue","session_for_project_id","useLazyLoadQuery","_ConnectedKernelListLegacyQuery","uuid","fetchPolicy","_ConnectedKernelListQuery","toGlobalId","project_id","group_id","filterEmptyItem","fixed","record","rowScope","dataIndex","role","_record$status_info","onCell","BAITable","bordered","rowKey","scroll","x","dataSource","filterNonNullItems","edge","pagination","component","Component","editable","editableOfProps","otherProps","_EditableSessionNameFragment","optimisticName","setOptimisticName","userInfo","useCurrentUserInfo","commitEditMutation","isPendingEditMutation","useMutation","_EditableSessionNameMutation","isEditing","setIsEditing","isNotPreparingCategoryStatus","isEditingAllowed","user_id","onStart","triggerType","Form","onFinish","sessionName","variables","input","onCompleted","response","errors","onError","error","initialValues","Item","rules","getSessionNameRules","Input","suffix","CornerDownLeftIcon","autoFocus","onKeyDown","onRequestClose","formRef","upsertNotification","useSetBAINotification","isConfirmLoading","setIsConfirmLoading","_ContainerCommitModalFragment","onOk","convertSessionToImage","_formRef$current","validateFields","_session$name","computeSession","imageName","res","backgroundTask","taskId","task_id","pending","resolved","rejected","duration","message","catch","err","Error","finally","console","log","okButtonProps","onCancel","Descriptions","marginTop","marginBottom","required","min","max","pattern","placeholder","useStyle","custom","paddingMD","sendRequest","resp","rqst","method","fetch","uri","contentType","headers","get","ok","startsWith","json","getProxyURL","resourceGroupIdOfSession","projectId","url","globalThis","__local_proxy","_config","proxyURL","wsproxyVersion","debug","_globalThis$appLaunch","_globalThis$appLaunch2","_globalThis$appLaunch3","_globalThis$appLaunch4","appLauncher","forceUseV1Proxy","checked","forceUseV2Proxy","isElectron","scalingGroup","getWsproxyVersion","wsproxy_version","getWSProxyVersion","URL","href","_sessions$2","sessionFrgmts","sessions","_TerminateSessionModalFragment","isForce","setIsForce","terminateMutation","useTanMutation","mutationFn","accessKey","currentProjectId","scaling_group","localStorage","getItem","searchParams","set","code","credentials","terminateApp","statusCode","destroy","relayEvn","useRelayEnvironment","painKiller","usePainKiller","centered","confirmLoading","_sessions$","mutateAsync","relieve","description","event","CustomEvent","detail","document","dispatchEvent","fetchQuery","_TerminateSessionModalRefetchQuery","toPromise","okText","okType","mark","Checkbox","target","Card","Paragraph","s","_s$kernel_nodes","flatten","groupBy","kernels","agentId","k","container_id","isActive","runTerminal","sessionId","showLauncher","params","_SessionActionButtonsFragment","openTerminateModal","setOpenTerminateModal","openLogModal","setOpenLogModal","openContainerCommitModal","setOpenContainerCommitModal","TerminalIcon","TerminateSessionModal","ScrollTextIcon","ContainerLogModal","supports","enableContainerCommit","DeliveredProcedureOutlined","ContainerCommitModal","PowerOffIcon","colorError","getUtilizationCheckerColor","resources","thresholds_check_operator","utilization","threshold","Math","getIdleChecksTagColor","criteria","remaining","extra","sessionNodeFrgmt","mergedResourceSlots","useResourceSlotsDetails","sessionNode","_SessionIdleChecksNodeFragment","_SessionIdleChecksFragment","idleChecks","JSON","parse","idle_checks","getIdleCheckTitle","_value$extra","Type","resource","_mergedResourceSlots$","deviceName","colorWhite","human_readable_name","toFixedFloorWithoutTrailingZeros","QuestionCircleOutlined","cursor","remaining_time_type","getTime","typeTagColor","INTERACTIVE","BATCH","INFERENCE","_SessionTypeTagFragment","marginMD","_legacy_session$mount","useFolderExplorerOpener","openIdleCheckDescriptionModal","setOpenIdleCheckDescriptionModal","_SessionDetailContentLegacyQuery","legacy_session","_SessionDetailContentQuery","imageFullName","image","architecture","imminentExpirationTime","check","filter","Boolean","showKernelList","Alert","showIcon","EditableSessionName","Group","SessionActionButtons","span","user_email","contentStyle","display","marginSM","SessionStatusTag","SessionTypeTag","ImageMetaIcon","SessionKernelTags","mounts","vfolder_mounts","mountInfo","FolderOutlined","join","ResourceNumbersOfSession","requested_slots","agent_ids","SessionReservation","InfoCircleOutlined","SessionIdleChecks","SessionUsageMonitor","Suspense","fallback","Skeleton","ConnectedKernelList","IdleCheckDescriptionModal","drawerProps","isPendingReload","startReloadTransition","useTransition","updateFetchKey","useUpdatableState","useInterval","Drawer","keyboard","onClose","_drawerProps$onClose","call","SessionDetailContent","SessionUtilItem","tooltipTitle","percentLabel","BAIProgressWithLabel","placement","round","lineHeight","toFixed","_$get","_sortedLiveStat$cpu_u","_mergedResourceSlots$2","_sortedLiveStat$mem","_sortedLiveStat$mem2","_mergedResourceSlots$3","_sortedLiveStat$mem3","_convertDecimalSizeUn","_convertDecimalSizeUn2","_sortedLiveStat$io_re","_convertDecimalSizeUn3","_convertDecimalSizeUn4","_sortedLiveStat$io_wr","_SessionUsageMonitorFragment","firstKernelNode","occupiedSlots","_firstKernelNode$occu","occupied_slots","resourceSlotNames","liveStat","sortedLiveStat","Object","keys","sort","a","b","aUtil","bUtil","aMem","bMem","reduce","acc","displayMemoryUsage","capacity","_convertBinarySizeUni","_convertBinarySizeUni2","_convertBinarySizeUni3","_convertBinarySizeUni4","decimalSize","convertBinarySizeUnit","numberFixed","utilItems","cpu_util","pct","mem","_mergedResourceSlots$4","_mergedResourceSlots$5","deviceKey","endsWith","Row","gutter","item","Col","xs","sm","convertDecimalSizeUnit","io_read","numberUnit","io_write","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","escapeCsvValue","String","stringify","replace","filename","createObjectURL","createElement","download","click","revokeObjectURL","exportCSVWithFormattingRules","format_rules","bodyStr","JSONToCSVBody","displayedData","row","CSVTitle","csvContent","_format_rules","errorMessageTable","regexTable","msg","backendaiclient","backendaiwebui","hasOwnProperty","regex","RegExp","test"],"sourceRoot":""}