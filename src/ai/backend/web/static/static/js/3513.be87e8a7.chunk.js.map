{"version":3,"file":"static/js/3513.be87e8a7.chunk.js","mappings":"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","sources":["__generated__/DashboardPageQuery.graphql.ts","__generated__/MySessionQueryFragment.graphql.ts","__generated__/MySessionQueryFragmentRefetchQuery.graphql.ts","__generated__/RecentlyCreatedSessionFragment.graphql.ts","__generated__/RecentlyCreatedSessionRefetchQuery.graphql.ts","__generated__/TotalResourceWithinResourceGroupFragment.graphql.ts","__generated__/TotalResourceWithinResourceGroupFragmentRefetchQuery.graphql.ts","components/BAIBoard.tsx","helper/resourceCardUtils.ts","components/BaseResourceItem.tsx","components/MyResource.tsx","components/MyResourceWithinResourceGroup.tsx","components/MySession.tsx","components/RecentlyCreatedSession.tsx","components/TotalResourceWithinResourceGroup.tsx","pages/DashboardPage.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<cffb3e23fc8fea35ac8f46e1e7d28c97>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type DashboardPageQuery$variables = {\n  hideAgents: boolean;\n  projectId: string;\n  resourceGroup?: string | null | undefined;\n};\nexport type DashboardPageQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"MySessionQueryFragment\" | \"RecentlyCreatedSessionFragment\" | \"TotalResourceWithinResourceGroupFragment\">;\n};\nexport type DashboardPageQuery = {\n  response: DashboardPageQuery$data;\n  variables: DashboardPageQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"hideAgents\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"projectId\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"resourceGroup\"\n},\nv3 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"projectId\",\n    \"variableName\": \"projectId\"\n  }\n],\nv4 = {\n  \"kind\": \"Literal\",\n  \"name\": \"first\",\n  \"value\": 0\n},\nv5 = {\n  \"kind\": \"Variable\",\n  \"name\": \"project_id\",\n  \"variableName\": \"projectId\"\n},\nv6 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"count\",\n    \"storageKey\": null\n  }\n],\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"occupied_slots\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"DashboardPageQuery\",\n    \"selections\": [\n      {\n        \"args\": (v3/*: any*/),\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"MySessionQueryFragment\"\n      },\n      {\n        \"args\": (v3/*: any*/),\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"RecentlyCreatedSessionFragment\"\n      },\n      {\n        \"condition\": \"hideAgents\",\n        \"kind\": \"Condition\",\n        \"passingValue\": false,\n        \"selections\": [\n          {\n            \"args\": [\n              {\n                \"kind\": \"Variable\",\n                \"name\": \"resourceGroup\",\n                \"variableName\": \"resourceGroup\"\n              }\n            ],\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"TotalResourceWithinResourceGroupFragment\"\n          }\n        ]\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v0/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"DashboardPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"myInteractive\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n          },\n          (v4/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v6/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myBatch\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n          },\n          (v4/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v6/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myInference\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n          },\n          (v4/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v6/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myUpload\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n          },\n          (v4/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v6/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status == \\\"running\\\"\"\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"first\",\n            \"value\": 3\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"order\",\n            \"value\": \"-created_at\"\n          },\n          (v5/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSessionEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"ComputeSessionNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v7/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"row_id\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"name\",\n                    \"storageKey\": null\n                  },\n                  (v8/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_info\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_data\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"created_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"starts_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"terminated_at\",\n                    \"storageKey\": null\n                  },\n                  (v9/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"requested_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"kernel_nodes\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"KernelEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KernelNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"live_stat\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_role\",\n                                \"storageKey\": null\n                              },\n                              (v7/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"condition\": \"hideAgents\",\n        \"kind\": \"Condition\",\n        \"passingValue\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": [\n              {\n                \"kind\": \"Literal\",\n                \"name\": \"filter\",\n                \"value\": \"schedulable == true\"\n              },\n              {\n                \"kind\": \"Literal\",\n                \"name\": \"limit\",\n                \"value\": 1000\n              },\n              {\n                \"kind\": \"Literal\",\n                \"name\": \"offset\",\n                \"value\": 0\n              },\n              {\n                \"kind\": \"Variable\",\n                \"name\": \"scaling_group\",\n                \"variableName\": \"resourceGroup\"\n              },\n              {\n                \"kind\": \"Literal\",\n                \"name\": \"status\",\n                \"value\": \"ALIVE\"\n              }\n            ],\n            \"concreteType\": \"AgentSummaryList\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"agent_summary_list\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"AgentSummary\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"items\",\n                \"plural\": true,\n                \"selections\": [\n                  (v7/*: any*/),\n                  (v8/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"available_slots\",\n                    \"storageKey\": null\n                  },\n                  (v9/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"scaling_group\",\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"total_count\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ]\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"7bc063d63b1fbfda1f7741c0a058f698\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"DashboardPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query DashboardPageQuery(\\n  $projectId: UUID!\\n  $resourceGroup: String\\n  $hideAgents: Boolean!\\n) {\\n  ...MySessionQueryFragment_2CgS8h\\n  ...RecentlyCreatedSessionFragment_2CgS8h\\n  ...TotalResourceWithinResourceGroupFragment_1qwBqJ @skip(if: $hideAgents)\\n}\\n\\nfragment MySessionQueryFragment_2CgS8h on Queries {\\n  myInteractive: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"interactive\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myBatch: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"batch\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myInference: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"inference\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myUpload: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"system\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n}\\n\\nfragment RecentlyCreatedSessionFragment_2CgS8h on Queries {\\n  compute_session_nodes(first: 3, order: \\\"-created_at\\\", filter: \\\"status == \\\\\\\"running\\\\\\\"\\\", project_id: $projectId) {\\n    edges {\\n      node {\\n        id\\n        ...SessionNodesFragment\\n      }\\n    }\\n  }\\n}\\n\\nfragment SessionNodesFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  ...SessionStatusTagFragment\\n  ...SessionReservationFragment\\n  ...SessionSlotCellFragment\\n  ...SessionUsageMonitorFragment\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionSlotCellFragment on ComputeSessionNode {\\n  id\\n  status\\n  occupied_slots\\n  requested_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  status\\n  status_info\\n  status_data\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  occupied_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment TotalResourceWithinResourceGroupFragment_1qwBqJ on Queries {\\n  agent_summary_list(limit: 1000, offset: 0, status: \\\"ALIVE\\\", scaling_group: $resourceGroup, filter: \\\"schedulable == true\\\") {\\n    items {\\n      id\\n      status\\n      available_slots\\n      occupied_slots\\n      scaling_group\\n    }\\n    total_count\\n  }\\n}\\n\\nfragment useSessionNodeLiveStatSessionFragment on ComputeSessionNode {\\n  id\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        cluster_role\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"5b75e94059039b401174c15eb155d9c8\";\n\nexport default node;\n","/**\n * @generated SignedSource<<7cfc3bc152edebd6be391430d6af6812>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type MySessionQueryFragment$data = {\n  readonly myBatch: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly myInference: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly myInteractive: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly myUpload: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly \" $fragmentType\": \"MySessionQueryFragment\";\n};\nexport type MySessionQueryFragment$key = {\n  readonly \" $data\"?: MySessionQueryFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"MySessionQueryFragment\">;\n};\n\nconst node: ReaderFragment = (function(){\nvar v0 = {\n  \"kind\": \"Literal\",\n  \"name\": \"first\",\n  \"value\": 0\n},\nv1 = {\n  \"kind\": \"Variable\",\n  \"name\": \"project_id\",\n  \"variableName\": \"projectId\"\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"count\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"argumentDefinitions\": [\n    {\n      \"defaultValue\": null,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"projectId\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"refetch\": {\n      \"connection\": null,\n      \"fragmentPathInResult\": [],\n      \"operation\": require('./MySessionQueryFragmentRefetchQuery.graphql')\n    }\n  },\n  \"name\": \"MySessionQueryFragment\",\n  \"selections\": [\n    {\n      \"alias\": \"myInteractive\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": \"myBatch\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": \"myInference\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": \"myUpload\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n        },\n        (v0/*: any*/),\n        (v1/*: any*/)\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": (v2/*: any*/),\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Queries\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"e547f7d93c9e204360a4ee6e0171ca45\";\n\nexport default node;\n","/**\n * @generated SignedSource<<f51742014d4948da46711902577d181a>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type MySessionQueryFragmentRefetchQuery$variables = {\n  projectId: string;\n};\nexport type MySessionQueryFragmentRefetchQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"MySessionQueryFragment\">;\n};\nexport type MySessionQueryFragmentRefetchQuery = {\n  response: MySessionQueryFragmentRefetchQuery$data;\n  variables: MySessionQueryFragmentRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"projectId\"\n  }\n],\nv1 = {\n  \"kind\": \"Literal\",\n  \"name\": \"first\",\n  \"value\": 0\n},\nv2 = {\n  \"kind\": \"Variable\",\n  \"name\": \"project_id\",\n  \"variableName\": \"projectId\"\n},\nv3 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"count\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"MySessionQueryFragmentRefetchQuery\",\n    \"selections\": [\n      {\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"projectId\",\n            \"variableName\": \"projectId\"\n          }\n        ],\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"MySessionQueryFragment\"\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"MySessionQueryFragmentRefetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": \"myInteractive\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myBatch\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myInference\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      },\n      {\n        \"alias\": \"myUpload\",\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/),\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"30732318305fa9b74b13879826c5f492\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"MySessionQueryFragmentRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query MySessionQueryFragmentRefetchQuery(\\n  $projectId: UUID!\\n) {\\n  ...MySessionQueryFragment_2CgS8h\\n}\\n\\nfragment MySessionQueryFragment_2CgS8h on Queries {\\n  myInteractive: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"interactive\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myBatch: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"batch\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myInference: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"inference\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n  myUpload: compute_session_nodes(first: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"system\\\\\\\"\\\", project_id: $projectId) {\\n    count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"e547f7d93c9e204360a4ee6e0171ca45\";\n\nexport default node;\n","/**\n * @generated SignedSource<<7d0ff3e7f2b782a15cbdbb78b4dab8ef>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type RecentlyCreatedSessionFragment$data = {\n  readonly compute_session_nodes: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly id: string;\n        readonly \" $fragmentSpreads\": FragmentRefs<\"SessionNodesFragment\">;\n      } | null | undefined;\n    } | null | undefined>;\n  } | null | undefined;\n  readonly \" $fragmentType\": \"RecentlyCreatedSessionFragment\";\n};\nexport type RecentlyCreatedSessionFragment$key = {\n  readonly \" $data\"?: RecentlyCreatedSessionFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"RecentlyCreatedSessionFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [\n    {\n      \"defaultValue\": null,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"projectId\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"refetch\": {\n      \"connection\": null,\n      \"fragmentPathInResult\": [],\n      \"operation\": require('./RecentlyCreatedSessionRefetchQuery.graphql')\n    }\n  },\n  \"name\": \"RecentlyCreatedSessionFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"status == \\\"running\\\"\"\n        },\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"first\",\n          \"value\": 3\n        },\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"order\",\n          \"value\": \"-created_at\"\n        },\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"project_id\",\n          \"variableName\": \"projectId\"\n        }\n      ],\n      \"concreteType\": \"ComputeSessionConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"compute_session_nodes\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"ComputeSessionEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"ComputeSessionNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"id\",\n                  \"storageKey\": null\n                },\n                {\n                  \"args\": null,\n                  \"kind\": \"FragmentSpread\",\n                  \"name\": \"SessionNodesFragment\"\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Queries\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"01396ef2646e59f7879e2f33a5d9dff9\";\n\nexport default node;\n","/**\n * @generated SignedSource<<46f566cc9166bc6fbce24a1a883a3593>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type RecentlyCreatedSessionRefetchQuery$variables = {\n  projectId: string;\n};\nexport type RecentlyCreatedSessionRefetchQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"RecentlyCreatedSessionFragment\">;\n};\nexport type RecentlyCreatedSessionRefetchQuery = {\n  response: RecentlyCreatedSessionRefetchQuery$data;\n  variables: RecentlyCreatedSessionRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"projectId\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"RecentlyCreatedSessionRefetchQuery\",\n    \"selections\": [\n      {\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"projectId\",\n            \"variableName\": \"projectId\"\n          }\n        ],\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"RecentlyCreatedSessionFragment\"\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"RecentlyCreatedSessionRefetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"status == \\\"running\\\"\"\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"first\",\n            \"value\": 3\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"order\",\n            \"value\": \"-created_at\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"project_id\",\n            \"variableName\": \"projectId\"\n          }\n        ],\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSessionEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"ComputeSessionNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v1/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"row_id\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"name\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_info\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_data\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"created_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"starts_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"terminated_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"occupied_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"requested_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"kernel_nodes\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"KernelEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KernelNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"live_stat\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_role\",\n                                \"storageKey\": null\n                              },\n                              (v1/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"a2bdda14a0e3f1a8d8c34d80adc2279c\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"RecentlyCreatedSessionRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query RecentlyCreatedSessionRefetchQuery(\\n  $projectId: UUID!\\n) {\\n  ...RecentlyCreatedSessionFragment_2CgS8h\\n}\\n\\nfragment RecentlyCreatedSessionFragment_2CgS8h on Queries {\\n  compute_session_nodes(first: 3, order: \\\"-created_at\\\", filter: \\\"status == \\\\\\\"running\\\\\\\"\\\", project_id: $projectId) {\\n    edges {\\n      node {\\n        id\\n        ...SessionNodesFragment\\n      }\\n    }\\n  }\\n}\\n\\nfragment SessionNodesFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  ...SessionStatusTagFragment\\n  ...SessionReservationFragment\\n  ...SessionSlotCellFragment\\n  ...SessionUsageMonitorFragment\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionSlotCellFragment on ComputeSessionNode {\\n  id\\n  status\\n  occupied_slots\\n  requested_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  status\\n  status_info\\n  status_data\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  occupied_slots\\n  ...useSessionNodeLiveStatSessionFragment\\n}\\n\\nfragment useSessionNodeLiveStatSessionFragment on ComputeSessionNode {\\n  id\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        cluster_role\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"01396ef2646e59f7879e2f33a5d9dff9\";\n\nexport default node;\n","/**\n * @generated SignedSource<<544b4a72f70b6ced21d034312a620705>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type TotalResourceWithinResourceGroupFragment$data = {\n  readonly agent_summary_list: {\n    readonly items: ReadonlyArray<{\n      readonly available_slots: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly occupied_slots: string | null | undefined;\n      readonly scaling_group: string | null | undefined;\n      readonly status: string | null | undefined;\n    } | null | undefined>;\n    readonly total_count: number;\n  } | null | undefined;\n  readonly \" $fragmentType\": \"TotalResourceWithinResourceGroupFragment\";\n};\nexport type TotalResourceWithinResourceGroupFragment$key = {\n  readonly \" $data\"?: TotalResourceWithinResourceGroupFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"TotalResourceWithinResourceGroupFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [\n    {\n      \"defaultValue\": null,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"resourceGroup\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"refetch\": {\n      \"connection\": null,\n      \"fragmentPathInResult\": [],\n      \"operation\": require('./TotalResourceWithinResourceGroupFragmentRefetchQuery.graphql')\n    }\n  },\n  \"name\": \"TotalResourceWithinResourceGroupFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"filter\",\n          \"value\": \"schedulable == true\"\n        },\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"limit\",\n          \"value\": 1000\n        },\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"offset\",\n          \"value\": 0\n        },\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"scaling_group\",\n          \"variableName\": \"resourceGroup\"\n        },\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"status\",\n          \"value\": \"ALIVE\"\n        }\n      ],\n      \"concreteType\": \"AgentSummaryList\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"agent_summary_list\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"AgentSummary\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"items\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"id\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"status\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"available_slots\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"occupied_slots\",\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"scaling_group\",\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"total_count\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Queries\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"41f0f86b6926ac7dc32c4a130ae1da6a\";\n\nexport default node;\n","/**\n * @generated SignedSource<<c658908e62db0220812a3ecc649e2d06>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type TotalResourceWithinResourceGroupFragmentRefetchQuery$variables = {\n  resourceGroup?: string | null | undefined;\n};\nexport type TotalResourceWithinResourceGroupFragmentRefetchQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"TotalResourceWithinResourceGroupFragment\">;\n};\nexport type TotalResourceWithinResourceGroupFragmentRefetchQuery = {\n  response: TotalResourceWithinResourceGroupFragmentRefetchQuery$data;\n  variables: TotalResourceWithinResourceGroupFragmentRefetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"resourceGroup\"\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"TotalResourceWithinResourceGroupFragmentRefetchQuery\",\n    \"selections\": [\n      {\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"resourceGroup\",\n            \"variableName\": \"resourceGroup\"\n          }\n        ],\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"TotalResourceWithinResourceGroupFragment\"\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"TotalResourceWithinResourceGroupFragmentRefetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"filter\",\n            \"value\": \"schedulable == true\"\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"limit\",\n            \"value\": 1000\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"offset\",\n            \"value\": 0\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"scaling_group\",\n            \"variableName\": \"resourceGroup\"\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"status\",\n            \"value\": \"ALIVE\"\n          }\n        ],\n        \"concreteType\": \"AgentSummaryList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"agent_summary_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"AgentSummary\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"id\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"status\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"available_slots\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"occupied_slots\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"scaling_group\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"total_count\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"cf1dab52a687c54357c77a5939899d10\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"TotalResourceWithinResourceGroupFragmentRefetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query TotalResourceWithinResourceGroupFragmentRefetchQuery(\\n  $resourceGroup: String\\n) {\\n  ...TotalResourceWithinResourceGroupFragment_1qwBqJ\\n}\\n\\nfragment TotalResourceWithinResourceGroupFragment_1qwBqJ on Queries {\\n  agent_summary_list(limit: 1000, offset: 0, status: \\\"ALIVE\\\", scaling_group: $resourceGroup, filter: \\\"schedulable == true\\\") {\\n    items {\\n      id\\n      status\\n      available_slots\\n      occupied_slots\\n      scaling_group\\n    }\\n    total_count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"41f0f86b6926ac7dc32c4a130ae1da6a\";\n\nexport default node;\n","import Board, { BoardProps } from '@cloudscape-design/board-components/board';\nimport BoardItem from '@cloudscape-design/board-components/board-item';\nimport { createStyles } from 'antd-style';\nimport classNames from 'classnames';\n\nconst useStyles = createStyles(({ css, token }) => {\n  return {\n    board: css`\n      .bai_board_placeholder {\n        border-radius: var(--token-borderRadius) !important;\n      }\n      .bai_board_placeholder--active {\n        background-color: var(--token-colorSplit) !important ;\n      }\n      .bai_board_placeholder--hover {\n        background-color: var(--token-colorPrimaryHover) !important ;\n        // FIXME: global token doesn't exist, so opacity fits color\n        opacity: 0.3;\n      }\n      .bai_board_handle button span {\n        color: ${token.colorTextTertiary} !important;\n      }\n      .bai_board_container-override\n        > div:first-child\n        > div:nth-child(2)\n        > div:first-child {\n        padding: 0 !important;\n      }\n    `,\n    disableResize: css`\n      .bai_board_resizer {\n        display: none !important;\n      }\n    `,\n    disableMove: css`\n      .bai_board_handle {\n        display: none !important;\n      }\n      .bai_board_header {\n        display: none !important;\n      }\n    `,\n    boardItems: css`\n      & > div:first-child {\n        border-radius: var(--token-borderRadius) !important;\n        background-color: var(--token-colorBgContainer) !important;\n        border: 1px solid ${token.colorBorderSecondary} !important;\n      }\n\n      & > div:first-child > div:first-child > div:first-child {\n        margin-bottom: var(--token-margin);\n        background-color: var(--token-colorBgContainer) !important;\n        position: absolute;\n        z-index: 1;\n      }\n    `,\n    disableBorder: css`\n      & > div:first-child {\n        border: none !important;\n      }\n    `,\n  };\n});\n\nexport interface BAIBoardDataType {\n  content?: React.ReactNode;\n}\n\nexport type BAIBoardItem = BoardProps.Item<BAIBoardDataType>;\nexport interface BAIBoardProps<T extends BAIBoardDataType = BAIBoardDataType> {\n  items: Array<BoardProps.Item<T>>;\n  onItemsChange: (event: CustomEvent<BoardProps.ItemsChangeDetail<T>>) => void;\n  resizable?: boolean;\n  movable?: boolean;\n  bordered?: boolean;\n}\n\nconst BAIBoard = <T extends BAIBoardDataType>({\n  items,\n  resizable = false,\n  movable = false,\n  bordered = false,\n  ...BoardProps\n}: BAIBoardProps<T>) => {\n  const { styles } = useStyles();\n  return (\n    <Board<T>\n      className={classNames(\n        styles.board,\n        !movable && styles.disableMove,\n        !resizable && styles.disableResize,\n      )}\n      empty\n      renderItem={(item: BoardProps.Item<T>) => {\n        return (\n          <BoardItem\n            className={classNames(\n              styles.boardItems,\n              !bordered && styles.disableBorder,\n            )}\n            key={item.id}\n            i18nStrings={{\n              dragHandleAriaLabel: '',\n              dragHandleAriaDescription: '',\n              resizeHandleAriaLabel: '',\n              resizeHandleAriaDescription: '',\n            }}\n            {...item}\n          >\n            {item.data.content}\n          </BoardItem>\n        );\n      }}\n      items={items}\n      i18nStrings={(() => {\n        const createAnnouncement = (\n          operationAnnouncement: any,\n          conflicts: any,\n          disturbed: any,\n        ) => {\n          const conflictsAnnouncement =\n            conflicts.length > 0\n              ? `Conflicts with ${conflicts\n                  .map((c: any) => c.data.title)\n                  .join(', ')}.`\n              : '';\n          const disturbedAnnouncement =\n            disturbed.length > 0 ? `Disturbed ${disturbed.length} items.` : '';\n          return [\n            operationAnnouncement,\n            conflictsAnnouncement,\n            disturbedAnnouncement,\n          ]\n            .filter(Boolean)\n            .join(' ');\n        };\n        return {\n          liveAnnouncementDndStarted: (operationType) =>\n            operationType === 'resize' ? 'Resizing' : 'Dragging',\n          liveAnnouncementDndItemReordered: (operation) => {\n            const columns = `column ${operation.placement.x + 1}`;\n            const rows = `row ${operation.placement.y + 1}`;\n            return createAnnouncement(\n              `Item moved to ${\n                operation.direction === 'horizontal' ? columns : rows\n              }.`,\n              operation.conflicts,\n              operation.disturbed,\n            );\n          },\n          liveAnnouncementDndItemResized: (operation) => {\n            const columnsConstraint = operation.isMinimalColumnsReached\n              ? ' (minimal)'\n              : '';\n            const rowsConstraint = operation.isMinimalRowsReached\n              ? ' (minimal)'\n              : '';\n            const sizeAnnouncement =\n              operation.direction === 'horizontal'\n                ? `columns ${operation.placement.width}${columnsConstraint}`\n                : `rows ${operation.placement.height}${rowsConstraint}`;\n            return createAnnouncement(\n              `Item resized to ${sizeAnnouncement}.`,\n              operation.conflicts,\n              operation.disturbed,\n            );\n          },\n          liveAnnouncementDndItemInserted: (operation) => {\n            const columns = `column ${operation.placement.x + 1}`;\n            const rows = `row ${operation.placement.y + 1}`;\n            return createAnnouncement(\n              `Item inserted to ${columns}, ${rows}.`,\n              operation.conflicts,\n              operation.disturbed,\n            );\n          },\n          liveAnnouncementDndCommitted: (operationType) =>\n            `${operationType} committed`,\n          liveAnnouncementDndDiscarded: (operationType) =>\n            `${operationType} discarded`,\n          liveAnnouncementItemRemoved: (op: any) =>\n            createAnnouncement(\n              `Removed item ${op.item.data.title}.`,\n              [],\n              op.disturbed,\n            ),\n          navigationAriaLabel: 'Board navigation',\n          navigationAriaDescription:\n            'Click on non-empty item to move focus over',\n          navigationItemAriaLabel: (item: any) =>\n            item ? item.data.title : 'Empty',\n        };\n      })()}\n      {...BoardProps}\n    />\n  );\n};\n\nexport default BAIBoard;\n","import { convertToBinaryUnit } from 'backend.ai-ui';\nimport _ from 'lodash';\n\nexport const UNLIMITED_VALUES = [\n  NaN,\n  Infinity,\n  Number.MAX_SAFE_INTEGER,\n  undefined,\n];\n\nexport const processResourceValue = (\n  value: string | number | undefined,\n  resource: string,\n  checkUnlimited = true,\n) => {\n  if (checkUnlimited && _.includes(UNLIMITED_VALUES, value)) {\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n  let converted;\n  if (resource === 'mem' && value !== undefined) {\n    converted = convertToBinaryUnit(value, 'auto')?.value;\n  } else {\n    converted = _.toNumber(value);\n  }\n  return converted;\n};\n","import { ResourceSlotDetail } from '../hooks/backendai';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport QuestionIconWithTooltip from './QuestionIconWithTooltip';\nimport { Empty, Segmented, theme, Typography } from 'antd';\nimport {\n  Flex,\n  BAIResourceWithSteppedProgress,\n  BAIResourceWithSteppedProgressProps,\n  compareNumberWithUnits,\n} from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { ReactNode } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport interface ResourceValues {\n  current: number | string;\n  total?: number | string;\n  displayUnit?: string;\n}\n\nexport interface AcceleratorSlotDetail {\n  key: string;\n  resourceSlot: ResourceSlotDetail;\n  values: ResourceValues;\n}\n\nexport interface BaseResourceItemProps {\n  title: ReactNode | string;\n  tooltip?: string;\n  isRefetching?: boolean;\n  displayType: 'usage' | 'remaining';\n  onDisplayTypeChange: (type: 'usage' | 'remaining') => void;\n  onRefetch: () => void;\n  getResourceValue: (resource: string) => ResourceValues;\n  acceleratorSlotsDetails: AcceleratorSlotDetail[];\n  resourceSlotsDetails: any;\n  progressProps?: Partial<BAIResourceWithSteppedProgressProps>;\n}\n\nconst BaseResourceItem: React.FC<BaseResourceItemProps> = ({\n  title,\n  tooltip,\n  isRefetching,\n  displayType,\n  onDisplayTypeChange,\n  onRefetch,\n  getResourceValue,\n  acceleratorSlotsDetails,\n  resourceSlotsDetails,\n  progressProps,\n}) => {\n  const { showProgress = true, unlimitedValues, steps } = progressProps || {};\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const renderResourceProgress = (\n    values: ResourceValues,\n    resourceSlot: ResourceSlotDetail,\n  ) => {\n    const progressProps: BAIResourceWithSteppedProgressProps = {\n      current: values.current,\n      title: resourceSlot.human_readable_name,\n      displayUnit: values.displayUnit || resourceSlot.display_unit,\n    };\n\n    if (showProgress && !_.isUndefined(values.total)) {\n      progressProps.total = values.total;\n      progressProps.unlimitedValues = unlimitedValues;\n      progressProps.steps = steps;\n    } else {\n      progressProps.showProgress = false;\n    }\n\n    return <BAIResourceWithSteppedProgress {...progressProps} />;\n  };\n\n  const cpuValues = getResourceValue('cpu');\n  const memValues = getResourceValue('mem');\n\n  const shouldShowCpu =\n    _.get(resourceSlotsDetails, 'resourceSlotsInRG.cpu') &&\n    (_.isUndefined(cpuValues.total) || _.toInteger(cpuValues.total) > 0);\n\n  const shouldShowMemory =\n    _.get(resourceSlotsDetails, 'resourceSlotsInRG.mem') &&\n    (_.isUndefined(memValues.total) ||\n      compareNumberWithUnits(memValues.total, 0));\n\n  const visibleAccelerators = _.filter(\n    acceleratorSlotsDetails,\n    ({ resourceSlot, values }) =>\n      resourceSlot &&\n      (_.isUndefined(values.total) || _.toInteger(values.total) > 0),\n  );\n\n  const isEmpty =\n    !shouldShowCpu && !shouldShowMemory && visibleAccelerators.length === 0;\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        paddingLeft: token.paddingXL,\n        paddingRight: token.paddingXL,\n        height: '100%',\n      }}\n    >\n      {/* Fixed Title Section */}\n      <Flex\n        align=\"center\"\n        justify=\"between\"\n        style={{\n          paddingLeft: token.paddingMD,\n          paddingTop: token.paddingSM,\n          paddingBottom: token.paddingSM,\n          flexShrink: 0,\n          position: 'sticky',\n          top: 0,\n          backgroundColor: token.colorBgContainer,\n          zIndex: 1,\n        }}\n        gap=\"xs\"\n        wrap=\"wrap\"\n      >\n        <Flex gap={'xs'} align=\"center\">\n          {typeof title === 'string' ? (\n            <Typography.Title level={5} style={{ margin: 0 }}>\n              {title}\n            </Typography.Title>\n          ) : (\n            title\n          )}\n          {tooltip ? (\n            <QuestionIconWithTooltip title={<Trans i18nKey={tooltip} />} />\n          ) : null}\n        </Flex>\n        <Flex\n          gap={'xs'}\n          align=\"center\"\n          justify=\"end\"\n          style={{ marginLeft: 'auto' }}\n        >\n          <Flex direction=\"row\" gap=\"sm\">\n            <Segmented\n              options={[\n                {\n                  label: t('webui.menu.Usage'),\n                  value: 'usage',\n                },\n                {\n                  label: t('webui.menu.Remaining'),\n                  value: 'remaining',\n                },\n              ]}\n              value={displayType}\n              onChange={(v) => onDisplayTypeChange(v as 'usage' | 'remaining')}\n            />\n            <BAIFetchKeyButton\n              loading={isRefetching}\n              value=\"\"\n              onChange={onRefetch}\n              type=\"text\"\n              style={{\n                backgroundColor: 'transparent',\n                margin: -token.marginXS,\n              }}\n            />\n          </Flex>\n        </Flex>\n      </Flex>\n\n      {/* Scrollable Content Section */}\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 1,\n          overflowY: 'auto',\n          overflowX: 'hidden',\n        }}\n      >\n        {isEmpty ? (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description={t('statistics.prometheus.NoMetricsToDisplay')}\n          />\n        ) : (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            style={{ marginTop: token.marginXS, marginBottom: token.marginMD }}\n          >\n            <Flex\n              direction=\"row\"\n              wrap=\"wrap\"\n              gap={'ms'}\n              style={{\n                padding: 0,\n                margin: 0,\n              }}\n            >\n              {shouldShowCpu && (\n                <Flex\n                  style={{\n                    borderRadius: token.borderRadiusLG,\n                    justifyItems: 'center',\n                    overflow: 'break-word',\n                    padding: token.padding,\n                    border: `1px solid ${token.colorBgLayout}`,\n                  }}\n                >\n                  {renderResourceProgress(\n                    cpuValues,\n                    resourceSlotsDetails.resourceSlotsInRG['cpu'],\n                  )}\n                </Flex>\n              )}\n\n              {shouldShowMemory && (\n                <Flex\n                  style={{\n                    borderRadius: token.borderRadiusLG,\n                    justifyItems: 'center',\n                    overflow: 'break-word',\n                    padding: token.padding,\n                    border: `1px solid ${token.colorBgLayout}`,\n                  }}\n                >\n                  {renderResourceProgress(\n                    memValues,\n                    resourceSlotsDetails.resourceSlotsInRG['mem'],\n                  )}\n                </Flex>\n              )}\n\n              {_.map(visibleAccelerators, ({ key, resourceSlot, values }) => (\n                <Flex\n                  key={key}\n                  style={{\n                    backgroundColor: token.colorSuccessBg,\n                    borderRadius: token.borderRadiusLG,\n                    justifyItems: 'center',\n                    overflow: 'break-word',\n                    padding: token.padding,\n                  }}\n                >\n                  {renderResourceProgress(values, resourceSlot)}\n                </Flex>\n              ))}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default BaseResourceItem;\n","import {\n  processResourceValue,\n  UNLIMITED_VALUES,\n} from '../helper/resourceCardUtils';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport {\n  MergedResourceLimits,\n  RemainingSlots,\n  ResourceAllocation,\n  useResourceLimitAndRemaining,\n} from '../hooks/useResourceLimitAndRemaining';\nimport BaseResourceItem, {\n  AcceleratorSlotDetail,\n  ResourceValues,\n} from './BaseResourceItem';\nimport { BAICardProps, convertToBinaryUnit } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface MyResourceProps extends BAICardProps {\n  fetchKey?: string;\n  isRefetching?: boolean;\n}\n\nconst getResourceValue = (\n  type: 'usage' | 'remaining',\n  resource: string,\n  checkPresetInfo: ResourceAllocation | null,\n  remainingWithoutResourceGroup: RemainingSlots,\n  resourceLimitsWithoutResourceGroup: MergedResourceLimits,\n): ResourceValues => {\n  const getTotalValue = () => {\n    let maxValue;\n    maxValue = _.get(\n      resourceLimitsWithoutResourceGroup,\n      _.includes(['cpu', 'mem'], resource)\n        ? [resource, 'max']\n        : ['accelerators', resource, 'max'],\n    );\n    return processResourceValue(maxValue, resource);\n  };\n  const totalValue = getTotalValue();\n\n  const getCurrentValue = () => {\n    if (type === 'usage') {\n      const value = _.get(checkPresetInfo?.keypair_using, resource);\n      return processResourceValue(value, resource);\n    }\n    const capacity = _.get(\n      remainingWithoutResourceGroup,\n      _.includes(['cpu', 'mem'], resource)\n        ? resource\n        : ['accelerators', resource],\n    );\n    return processResourceValue(capacity, resource);\n  };\n  const currentValue = getCurrentValue();\n\n  const displayValue = type === 'usage' ? currentValue : totalValue;\n\n  return {\n    current: currentValue || 0,\n    total: totalValue,\n    displayUnit:\n      resource === 'mem' && displayValue\n        ? convertToBinaryUnit(displayValue, 'auto')?.displayUnit\n        : undefined,\n  };\n};\n\nconst MyResource: React.FC<MyResourceProps> = ({\n  fetchKey,\n  isRefetching,\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const currentProject = useCurrentProjectValue();\n  const [\n    {\n      checkPresetInfo,\n      resourceLimitsWithoutResourceGroup,\n      remainingWithoutResourceGroup,\n      isRefetching: internalIsRefetching,\n    },\n    { refetch },\n  ] = useResourceLimitAndRemaining({\n    currentProjectName: currentProject.name,\n    ignorePerContainerConfig: true,\n    fetchKey,\n  });\n\n  const resourceSlotsDetails = useResourceSlotsDetails();\n  const [type, setType] = useState<'usage' | 'remaining'>('usage');\n\n  const acceleratorSlotsDetails = useMemo(() => {\n    return _.chain(resourceSlotsDetails?.resourceSlotsInRG)\n      .omit(['cpu', 'mem'])\n      .map((resourceSlot, key) => ({\n        key,\n        resourceSlot,\n        values: getResourceValue(\n          type,\n          key,\n          checkPresetInfo ?? null,\n          remainingWithoutResourceGroup,\n          resourceLimitsWithoutResourceGroup,\n        ),\n      }))\n      .filter((item) => Boolean(item.resourceSlot))\n      .value() as AcceleratorSlotDetail[];\n  }, [\n    resourceSlotsDetails,\n    type,\n    checkPresetInfo,\n    remainingWithoutResourceGroup,\n    resourceLimitsWithoutResourceGroup,\n  ]);\n\n  const getResourceValueForCard = useCallback(\n    (resource: string) =>\n      getResourceValue(\n        type,\n        resource,\n        checkPresetInfo ?? null,\n        remainingWithoutResourceGroup,\n        resourceLimitsWithoutResourceGroup,\n      ),\n    [\n      type,\n      checkPresetInfo,\n      remainingWithoutResourceGroup,\n      resourceLimitsWithoutResourceGroup,\n    ],\n  );\n\n  return (\n    <BaseResourceItem\n      {...props}\n      title={t('webui.menu.MyResources')}\n      tooltip=\"webui.menu.MyResourcesDescription\"\n      isRefetching={isRefetching || internalIsRefetching}\n      displayType={type}\n      onDisplayTypeChange={setType}\n      onRefetch={refetch}\n      getResourceValue={getResourceValueForCard}\n      acceleratorSlotsDetails={acceleratorSlotsDetails}\n      resourceSlotsDetails={resourceSlotsDetails}\n      progressProps={{\n        showProgress: true,\n        unlimitedValues: UNLIMITED_VALUES,\n        steps: 12,\n      }}\n    />\n  );\n};\n\nexport default MyResource;\n","import { convertToBinaryUnit } from '../helper';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport {\n  ResourceAllocation,\n  useResourceLimitAndRemaining,\n} from '../hooks/useResourceLimitAndRemaining';\nimport BaseResourceItem, {\n  AcceleratorSlotDetail,\n  ResourceValues,\n} from './BaseResourceItem';\nimport ResourceGroupSelectForCurrentProject from './ResourceGroupSelectForCurrentProject';\nimport { Typography } from 'antd';\nimport { Flex, BAICardProps } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { useCallback, useDeferredValue, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface MyResourceWithinResourceGroupProps extends BAICardProps {\n  fetchKey?: string;\n  isRefetching?: boolean;\n}\n\nconst getResourceValue = (\n  type: 'usage' | 'remaining',\n  resource: string,\n  checkPresetInfo: ResourceAllocation | null,\n  resourceGroup: string,\n): ResourceValues => {\n  const getCurrentValue = () => {\n    if (type === 'usage') {\n      const value = _.get(\n        checkPresetInfo?.scaling_groups?.[resourceGroup]?.using,\n        resource,\n      );\n\n      if (resource === 'mem') {\n        const converted = convertToBinaryUnit(value, 'auto');\n        return _.toNumber(converted?.numberFixed);\n      }\n\n      return _.toNumber(value);\n    }\n\n    const remaining = _.get(\n      checkPresetInfo?.scaling_groups?.[resourceGroup]?.remaining,\n      resource,\n    );\n    if (remaining === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER;\n\n    if (resource === 'mem') {\n      const converted = convertToBinaryUnit(remaining, 'auto');\n      return _.toNumber(converted?.numberFixed);\n    }\n\n    return _.toNumber(remaining);\n  };\n\n  return {\n    current: getCurrentValue(),\n  };\n};\n\nconst MyResourceWithinResourceGroup: React.FC<\n  MyResourceWithinResourceGroupProps\n> = ({ fetchKey, isRefetching, ...props }) => {\n  const { t } = useTranslation();\n\n  const currentProject = useCurrentProjectValue();\n  const [selectedResourceGroup, setSelectedResourceGroup] = useState<string>();\n  const deferredSelectedResourceGroup = useDeferredValue(selectedResourceGroup);\n\n  const [{ checkPresetInfo, isRefetching: internalIsRefetching }, { refetch }] =\n    useResourceLimitAndRemaining({\n      currentProjectName: currentProject.name,\n      currentResourceGroup: deferredSelectedResourceGroup || 'default',\n      fetchKey,\n    });\n\n  const resourceSlotsDetails = useResourceSlotsDetails(\n    deferredSelectedResourceGroup || 'default',\n  );\n  const [displayType, setDisplayType] = useState<'usage' | 'remaining'>(\n    'usage',\n  );\n\n  const acceleratorSlotsDetails = useMemo(() => {\n    return _.chain(resourceSlotsDetails?.resourceSlotsInRG)\n      .omit(['cpu', 'mem'])\n      .map((resourceSlot, key) => ({\n        key,\n        resourceSlot,\n        values: getResourceValue(\n          displayType,\n          key,\n          checkPresetInfo ?? null,\n          deferredSelectedResourceGroup || 'default',\n        ),\n      }))\n      .filter((item) => Boolean(item.resourceSlot))\n      .value() as AcceleratorSlotDetail[];\n  }, [\n    resourceSlotsDetails,\n    displayType,\n    checkPresetInfo,\n    deferredSelectedResourceGroup,\n  ]);\n\n  const getResourceValueForCard = useCallback(\n    (resource: string) =>\n      getResourceValue(\n        displayType,\n        resource,\n        checkPresetInfo ?? null,\n        deferredSelectedResourceGroup || 'default',\n      ),\n    [displayType, checkPresetInfo, deferredSelectedResourceGroup],\n  );\n\n  const title = (\n    <Flex gap={'xs'}>\n      <Typography.Title level={5} style={{ margin: 0 }}>\n        {t('webui.menu.MyResourcesIn')}\n      </Typography.Title>\n      <ResourceGroupSelectForCurrentProject\n        showSearch\n        style={{ minWidth: 100 }}\n        onChange={(v) => setSelectedResourceGroup(v)}\n        loading={selectedResourceGroup !== deferredSelectedResourceGroup}\n        popupMatchSelectWidth={false}\n        tooltip={t('general.ResourceGroup')}\n      />\n    </Flex>\n  );\n\n  return (\n    <BaseResourceItem\n      {...props}\n      title={title}\n      tooltip=\"webui.menu.MyResourcesInResourceGroupDescription\"\n      isRefetching={isRefetching || internalIsRefetching}\n      displayType={displayType}\n      onDisplayTypeChange={setDisplayType}\n      onRefetch={refetch}\n      getResourceValue={getResourceValueForCard}\n      acceleratorSlotsDetails={acceleratorSlotsDetails}\n      resourceSlotsDetails={resourceSlotsDetails}\n      progressProps={{\n        showProgress: false,\n      }}\n    />\n  );\n};\n\nexport default MyResourceWithinResourceGroup;\n","import { MySessionQueryFragment$key } from '../__generated__/MySessionQueryFragment.graphql';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport BAIPanelItem from './BAIPanelItem';\nimport Flex from './Flex';\nimport { theme, Typography } from 'antd';\nimport { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useRefetchableFragment } from 'react-relay';\n\ninterface MySessionProps {\n  queryRef: MySessionQueryFragment$key;\n  isRefetching?: boolean;\n}\n\nconst MySession: React.FC<MySessionProps> = ({ queryRef, isRefetching }) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n        fragment  MySessionQueryFragment on Queries\n        @argumentDefinitions(\n          projectId: { type: \"UUID!\" }\n        ) \n        @refetchable(queryName: \"MySessionQueryFragmentRefetchQuery\") {\n          myInteractive: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n            project_id: $projectId\n          ) {\n            count\n          }\n          myBatch: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n            project_id: $projectId\n          ) {\n            count\n          }\n          myInference: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n            project_id: $projectId\n          ) {\n            count\n          }\n          myUpload: compute_session_nodes(\n            first: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n            project_id: $projectId\n          ) {\n            count\n          }\n        }\n      `,\n    queryRef,\n  );\n\n  const { myInteractive, myBatch, myInference, myUpload } = data || {};\n\n  const renderBAIPanelItem = (title: string, value: number) => (\n    <Flex\n      style={{\n        borderRadius: token.borderRadiusLG,\n        justifyContent: 'center',\n        overflow: 'break-word',\n        padding: token.padding,\n        border: `1px solid ${token.colorBgLayout}`,\n        minWidth: 120,\n        maxWidth: 200,\n        flex: '1 1 auto',\n        alignItems: 'stretch',\n      }}\n    >\n      <BAIPanelItem title={title} value={value} />\n    </Flex>\n  );\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        paddingLeft: token.paddingXL,\n        paddingRight: token.paddingXL,\n        height: '100%',\n      }}\n    >\n      {/* Fixed Title Section */}\n      <Flex\n        align=\"center\"\n        justify=\"between\"\n        style={{\n          paddingLeft: token.paddingMD,\n          paddingTop: token.paddingSM,\n          paddingBottom: token.paddingSM,\n          flexShrink: 0,\n          position: 'sticky',\n          top: 0,\n          backgroundColor: token.colorBgContainer,\n          zIndex: 1,\n        }}\n        gap=\"xs\"\n        wrap=\"wrap\"\n      >\n        <Flex gap={'xs'} align=\"center\">\n          <Typography.Title level={5} style={{ margin: 0 }}>\n            {t('session.MySessions')}\n          </Typography.Title>\n        </Flex>\n        <Flex\n          gap={'xs'}\n          align=\"center\"\n          justify=\"end\"\n          style={{ marginLeft: 'auto' }}\n        >\n          <BAIFetchKeyButton\n            loading={isPendingRefetch || isRefetching}\n            value=\"\"\n            onChange={(newFetchKey) => {\n              startRefetchTransition(() => {\n                refetch(\n                  {},\n                  {\n                    fetchPolicy: 'network-only',\n                  },\n                );\n              });\n            }}\n            type=\"text\"\n            style={{\n              backgroundColor: 'transparent',\n              margin: -token.marginXS,\n            }}\n          />\n        </Flex>\n      </Flex>\n\n      {/* Scrollable Content Section */}\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 1,\n          overflowY: 'auto',\n          overflowX: 'hidden',\n        }}\n      >\n        <Flex\n          direction=\"row\"\n          wrap=\"wrap\"\n          gap={token.padding}\n          align=\"stretch\"\n          style={{ marginTop: token.margin, marginBottom: token.marginMD }}\n        >\n          {renderBAIPanelItem(\n            t('session.Interactive'),\n            myInteractive?.count || 0,\n          )}\n          {renderBAIPanelItem(t('session.Batch'), myBatch?.count || 0)}\n          {renderBAIPanelItem(t('session.Inference'), myInference?.count || 0)}\n          {renderBAIPanelItem(t('session.System'), myUpload?.count || 0)}\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default MySession;\n","import { RecentlyCreatedSessionFragment$key } from '../__generated__/RecentlyCreatedSessionFragment.graphql';\nimport { filterNonNullItems, toLocalId } from '../helper';\nimport BAIFetchKeyButton from './BAIFetchKeyButton';\nimport Flex from './Flex';\nimport SessionDetailDrawer from './SessionDetailDrawer';\nimport SessionNodes from './SessionNodes';\nimport { theme, Typography } from 'antd';\nimport { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useRefetchableFragment } from 'react-relay';\nimport { useQueryParam, StringParam } from 'use-query-params';\n\ninterface RecentlyCreatedSessionProps {\n  queryRef: RecentlyCreatedSessionFragment$key;\n  isRefetching?: boolean;\n}\n\nconst RecentlyCreatedSession: React.FC<RecentlyCreatedSessionProps> = ({\n  queryRef,\n  isRefetching,\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [sessionDetailId, setSessionDetailId] = useQueryParam(\n    'sessionDetail',\n    StringParam,\n  );\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment RecentlyCreatedSessionFragment on Queries\n      @argumentDefinitions(\n        projectId: { type: \"UUID!\" }\n      )\n      @refetchable(queryName: \"RecentlyCreatedSessionRefetchQuery\") {\n        compute_session_nodes(\n          first: 3\n          order: \"-created_at\"\n          filter: \"status == \\\"running\\\"\"\n          project_id: $projectId\n        ) {\n          edges {\n            node {\n              id\n              ...SessionNodesFragment\n            }\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          paddingLeft: token.paddingXL,\n          paddingRight: token.paddingXL,\n          height: '100%',\n        }}\n      >\n        {/* Fixed Title Section */}\n        <Flex\n          align=\"center\"\n          justify=\"between\"\n          style={{\n            width: '100%',\n            height: 56,\n            paddingLeft: token.paddingMD,\n            flexShrink: 0,\n            position: 'sticky',\n            top: 0,\n            backgroundColor: token.colorBgContainer,\n            zIndex: 1,\n          }}\n          gap=\"xs\"\n          wrap=\"wrap\"\n        >\n          <Typography.Title level={5} style={{ margin: 0 }}>\n            {t('session.RecentlyCreatedSessions')}\n          </Typography.Title>\n          <Flex\n            direction=\"row\"\n            gap=\"sm\"\n            style={{\n              marginRight: -8,\n            }}\n          >\n            <BAIFetchKeyButton\n              loading={isPendingRefetch || isRefetching}\n              value=\"\"\n              onChange={(newFetchKey) => {\n                startRefetchTransition(() => {\n                  refetch(\n                    {},\n                    {\n                      fetchPolicy: 'network-only',\n                    },\n                  );\n                });\n              }}\n              type=\"text\"\n              style={{\n                backgroundColor: 'transparent',\n              }}\n            />\n          </Flex>\n        </Flex>\n\n        {/* Scrollable Content Section */}\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{\n            flex: 1,\n            overflowY: 'auto',\n            overflowX: 'hidden',\n            marginTop: token.marginSM,\n          }}\n        >\n          <SessionNodes\n            sessionsFrgmt={filterNonNullItems(\n              data.compute_session_nodes?.edges.map((e) => e?.node),\n            )}\n            onClickSessionName={(session) => {\n              setSessionDetailId(toLocalId(session.id));\n            }}\n            pagination={false}\n            disableSorter\n          />\n        </Flex>\n      </Flex>\n      <SessionDetailDrawer\n        open={!!sessionDetailId}\n        sessionId={sessionDetailId || undefined}\n        onClose={() => {\n          setSessionDetailId(undefined, 'pushIn');\n        }}\n      />\n    </>\n  );\n};\n\nexport default RecentlyCreatedSession;\n","import {\n  TotalResourceWithinResourceGroupFragment$key,\n  TotalResourceWithinResourceGroupFragment$data,\n} from '../__generated__/TotalResourceWithinResourceGroupFragment.graphql';\nimport {\n  processResourceValue,\n  UNLIMITED_VALUES,\n} from '../helper/resourceCardUtils';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport BaseResourceItem, {\n  AcceleratorSlotDetail,\n  ResourceValues,\n} from './BaseResourceItem';\nimport ResourceGroupSelectForCurrentProject from './ResourceGroupSelectForCurrentProject';\nimport { Typography } from 'antd';\nimport {\n  Flex,\n  BAICardProps,\n  subNumberWithUnits,\n  addNumberWithUnits,\n} from 'backend.ai-ui';\nimport _ from 'lodash';\nimport {\n  useCallback,\n  useMemo,\n  useState,\n  useTransition,\n  useDeferredValue,\n  useEffect,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useRefetchableFragment } from 'react-relay';\n\ninterface TotalResourceWithinResourceGroupProps extends BAICardProps {\n  queryRef: TotalResourceWithinResourceGroupFragment$key;\n  isRefetching?: boolean;\n}\n\ntype AgentSummary = NonNullable<\n  TotalResourceWithinResourceGroupFragment$data['agent_summary_list']\n>['items'][number];\n\nconst TotalResourceWithinResourceGroup: React.FC<\n  TotalResourceWithinResourceGroupProps\n> = ({ queryRef, isRefetching, ...props }) => {\n  const { t } = useTranslation();\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const [selectedResourceGroup, setSelectedResourceGroup] = useState<string>();\n  const deferredSelectedResourceGroup = useDeferredValue(selectedResourceGroup);\n\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment TotalResourceWithinResourceGroupFragment on Queries\n      @argumentDefinitions(resourceGroup: { type: \"String\" })\n      @refetchable(\n        queryName: \"TotalResourceWithinResourceGroupFragmentRefetchQuery\"\n      ) {\n        agent_summary_list(\n          limit: 1000\n          offset: 0\n          status: \"ALIVE\"\n          scaling_group: $resourceGroup\n          filter: \"schedulable == true\"\n        ) {\n          items {\n            id\n            status\n            available_slots\n            occupied_slots\n            scaling_group\n          }\n          total_count\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  const resourceSlotsDetails = useResourceSlotsDetails();\n  const [type, setType] = useState<'usage' | 'remaining'>('usage');\n\n  useEffect(() => {\n    if (deferredSelectedResourceGroup) {\n      refetch({\n        resourceGroup: deferredSelectedResourceGroup,\n      });\n    }\n  }, [deferredSelectedResourceGroup, refetch]);\n\n  const getResourceValue = (\n    type: 'usage' | 'remaining',\n    resource: string,\n    totalOccupied: number,\n    totalAvailable: number,\n  ): ResourceValues => {\n    const getCurrentValue = () => {\n      if (type === 'usage') {\n        return processResourceValue(totalOccupied, resource);\n      }\n      const remaining = subNumberWithUnits(\n        _.toString(totalAvailable),\n        _.toString(totalOccupied),\n        '',\n      );\n      return processResourceValue(remaining, resource);\n    };\n\n    const getTotalValue = () => {\n      return processResourceValue(totalAvailable, resource);\n    };\n\n    return {\n      current: getCurrentValue() || 0,\n      total: getTotalValue(),\n    };\n  };\n\n  const { acceleratorSlotsDetails, totalOccupiedSlots, totalAvailableSlots } =\n    useMemo(() => {\n      const agents = data?.agent_summary_list?.items || [];\n\n      const totalOccupiedSlots: Record<string, number> = {};\n      const totalAvailableSlots: Record<string, number> = {};\n\n      _.forEach(agents as AgentSummary[], (agent) => {\n        if (!agent) return;\n        const occupiedSlots = JSON.parse(agent.occupied_slots || '{}');\n        const availableSlots = JSON.parse(agent.available_slots || '{}');\n\n        _.forEach(occupiedSlots, (value, key) => {\n          totalOccupiedSlots[key] = _.toNumber(\n            addNumberWithUnits(\n              _.toString(totalOccupiedSlots[key] || 0),\n              _.toString(value),\n              '',\n            ),\n          );\n        });\n\n        _.forEach(availableSlots, (value, key) => {\n          totalAvailableSlots[key] = _.toNumber(\n            addNumberWithUnits(\n              _.toString(totalAvailableSlots[key] || 0),\n              _.toString(value),\n              '',\n            ),\n          );\n        });\n      });\n\n      const accelerators: AcceleratorSlotDetail[] = _.chain(\n        resourceSlotsDetails?.resourceSlotsInRG,\n      )\n        .omit(['cpu', 'mem'])\n        .map((resourceSlot, key) => ({\n          key,\n          resourceSlot,\n          values: getResourceValue(\n            type,\n            key,\n            totalOccupiedSlots[key] || 0,\n            totalAvailableSlots[key] || 0,\n          ),\n        }))\n        .filter((item) => Boolean(item.resourceSlot))\n        .value() as AcceleratorSlotDetail[];\n\n      return {\n        acceleratorSlotsDetails: accelerators,\n        totalOccupiedSlots,\n        totalAvailableSlots,\n      };\n    }, [data, type, resourceSlotsDetails]);\n\n  const getResourceValueForCard = useCallback(\n    (resource: string) =>\n      getResourceValue(\n        type,\n        resource,\n        totalOccupiedSlots[resource] || 0,\n        totalAvailableSlots[resource] || 0,\n      ),\n    [type, totalOccupiedSlots, totalAvailableSlots],\n  );\n\n  const title = (\n    <Flex gap={'xs'}>\n      <Typography.Title level={5} style={{ margin: 0 }}>\n        {t('webui.menu.TotalResourcesIn')}\n      </Typography.Title>\n      <ResourceGroupSelectForCurrentProject\n        showSearch\n        style={{ minWidth: 100 }}\n        onChange={(v) => setSelectedResourceGroup(v)}\n        loading={selectedResourceGroup !== deferredSelectedResourceGroup}\n        popupMatchSelectWidth={false}\n        tooltip={t('general.ResourceGroup')}\n      />\n    </Flex>\n  );\n\n  const handleRefetch = () => {\n    startRefetchTransition(() => {\n      refetch(\n        {\n          resourceGroup: deferredSelectedResourceGroup,\n        },\n        {\n          fetchPolicy: 'network-only',\n        },\n      );\n    });\n  };\n\n  return (\n    <BaseResourceItem\n      {...props}\n      title={title}\n      tooltip=\"webui.menu.TotalResourcesInResourceGroupDescription\"\n      isRefetching={isRefetching || isPendingRefetch}\n      displayType={type}\n      onDisplayTypeChange={setType}\n      onRefetch={handleRefetch}\n      getResourceValue={getResourceValueForCard}\n      acceleratorSlotsDetails={acceleratorSlotsDetails}\n      resourceSlotsDetails={resourceSlotsDetails}\n      progressProps={{\n        showProgress: true,\n        unlimitedValues: UNLIMITED_VALUES,\n        steps: 12,\n      }}\n    />\n  );\n};\n\nexport default TotalResourceWithinResourceGroup;\n","import { DashboardPageQuery } from '../__generated__/DashboardPageQuery.graphql';\nimport BAIBoard, { BAIBoardItem } from '../components/BAIBoard';\nimport MyResource from '../components/MyResource';\nimport MyResourceWithinResourceGroup from '../components/MyResourceWithinResourceGroup';\nimport MySession from '../components/MySession';\nimport RecentlyCreatedSession from '../components/RecentlyCreatedSession';\nimport TotalResourceWithinResourceGroup from '../components/TotalResourceWithinResourceGroup';\nimport { filterEmptyItem } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useBAISettingUserState } from '../hooks/useBAISetting';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupValue,\n} from '../hooks/useCurrentProject';\nimport { useInterval } from '../hooks/useIntervalValue';\nimport { Skeleton, theme } from 'antd';\nimport _ from 'lodash';\nimport { Suspense, useTransition } from 'react';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\n\nconst DashboardPage: React.FC = () => {\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n\n  const currentProject = useCurrentProjectValue();\n  const currentResourceGroup = useCurrentResourceGroupValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n\n  const [localStorageBoardItems, setLocalStorageBoardItems] =\n    useBAISettingUserState('dashboard_board_items');\n\n  const queryRef = useLazyLoadQuery<DashboardPageQuery>(\n    graphql`\n      query DashboardPageQuery(\n        $projectId: UUID!\n        $resourceGroup: String # TODO: Skip to query if hideAgents is true\n        $hideAgents: Boolean!\n      ) {\n        ...MySessionQueryFragment @arguments(projectId: $projectId)\n        ...RecentlyCreatedSessionFragment @arguments(projectId: $projectId)\n        ...TotalResourceWithinResourceGroupFragment\n          @skip(if: $hideAgents)\n          @arguments(resourceGroup: $resourceGroup)\n      }\n    `,\n    {\n      projectId: currentProject.id,\n      resourceGroup: currentResourceGroup || 'default',\n      hideAgents: baiClient?._config?.hideAgents,\n    },\n    {\n      fetchPolicy:\n        fetchKey === 'initial-fetch' ? 'store-and-network' : 'network-only',\n      fetchKey,\n    },\n  );\n\n  useInterval(() => {\n    startRefetchTransition(() => {\n      updateFetchKey();\n    });\n  }, 15_000);\n\n  const initialBoardItems: Array<BAIBoardItem> = filterEmptyItem([\n    {\n      id: 'mySession',\n      rowSpan: 2,\n      columnSpan: 2,\n      definition: {\n        minRowSpan: 2,\n        minColumnSpan: 2,\n      },\n      data: {\n        content: (\n          <Suspense\n            fallback={\n              <Skeleton active style={{ padding: `0px ${token.marginMD}px` }} />\n            }\n          >\n            <MySession queryRef={queryRef} isRefetching={isPendingRefetch} />\n          </Suspense>\n        ),\n      },\n    },\n    {\n      id: 'myResource',\n      rowSpan: 2,\n      columnSpan: 2,\n      definition: {\n        minRowSpan: 2,\n        minColumnSpan: 2,\n      },\n      data: {\n        content: (\n          <MyResource fetchKey={fetchKey} isRefetching={isPendingRefetch} />\n        ),\n      },\n    },\n    {\n      id: 'myResourceWithinResourceGroup',\n      rowSpan: 2,\n      columnSpan: 2,\n      definition: {\n        minRowSpan: 2,\n        minColumnSpan: 2,\n      },\n      data: {\n        content: (\n          <MyResourceWithinResourceGroup\n            fetchKey={fetchKey}\n            isRefetching={isPendingRefetch}\n          />\n        ),\n      },\n    },\n    !baiClient?._config?.hideAgents && {\n      id: 'totalResourceWithinResourceGroup',\n      rowSpan: 2,\n      columnSpan: 2,\n      definition: {\n        minRowSpan: 2,\n        minColumnSpan: 2,\n      },\n      data: {\n        content: (\n          <TotalResourceWithinResourceGroup\n            queryRef={queryRef}\n            isRefetching={isPendingRefetch}\n          />\n        ),\n      },\n    },\n    {\n      id: 'recentlyCreatedSession',\n      rowSpan: 3,\n      columnSpan: 4,\n      definition: {\n        minRowSpan: 2,\n        minColumnSpan: 2,\n      },\n      data: {\n        content: (\n          <RecentlyCreatedSession\n            queryRef={queryRef}\n            isRefetching={isPendingRefetch}\n          />\n        ),\n      },\n    },\n  ]);\n\n  // TODO: Issue occurs when newly added items in new webui version are not saved in localStorage\n  // and thus not displayed on screen.\n  // Opted-out items should also be stored separately in localStorage, and newly added items\n  // should be included in initialBoardItems.\n  const mergedBoardItems = filterEmptyItem(\n    _.map(initialBoardItems, (item) => {\n      const updatedItem = _.find(\n        localStorageBoardItems,\n        (itemInStorage) => itemInStorage.id === item.id,\n      );\n      return { ...item, ...updatedItem };\n    }),\n  );\n\n  return (\n    <BAIBoard\n      movable\n      resizable\n      bordered\n      items={mergedBoardItems}\n      onItemsChange={(event) => {\n        const changedItems = [...event.detail.items];\n        setLocalStorageBoardItems(\n          _.map(changedItems, (item) => _.omit(item, 'data')),\n        );\n      }}\n    />\n  );\n};\n\nexport default DashboardPage;\n"],"names":["node","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","hash","require","useStyles","createStyles","_ref","css","token","board","colorTextTertiary","disableResize","disableMove","boardItems","colorBorderSecondary","disableBorder","_ref2","items","resizable","movable","bordered","BoardProps","styles","_jsx","Board","className","classNames","empty","renderItem","item","BoardItem","i18nStrings","dragHandleAriaLabel","dragHandleAriaDescription","resizeHandleAriaLabel","resizeHandleAriaDescription","children","data","content","id","createAnnouncement","operationAnnouncement","conflicts","disturbed","length","map","c","title","join","filter","Boolean","liveAnnouncementDndStarted","operationType","liveAnnouncementDndItemReordered","operation","columns","placement","x","rows","y","direction","liveAnnouncementDndItemResized","columnsConstraint","isMinimalColumnsReached","rowsConstraint","isMinimalRowsReached","sizeAnnouncement","width","height","liveAnnouncementDndItemInserted","liveAnnouncementDndCommitted","liveAnnouncementDndDiscarded","liveAnnouncementItemRemoved","op","navigationAriaLabel","navigationAriaDescription","navigationItemAriaLabel","UNLIMITED_VALUES","NaN","Infinity","Number","MAX_SAFE_INTEGER","undefined","processResourceValue","value","resource","converted","arguments","_","_convertToBinaryUnit","convertToBinaryUnit","tooltip","isRefetching","displayType","onDisplayTypeChange","onRefetch","getResourceValue","acceleratorSlotsDetails","resourceSlotsDetails","progressProps","showProgress","unlimitedValues","steps","t","useTranslation","theme","useToken","renderResourceProgress","values","resourceSlot","current","human_readable_name","displayUnit","display_unit","total","BAIResourceWithSteppedProgress","cpuValues","memValues","shouldShowCpu","shouldShowMemory","compareNumberWithUnits","visibleAccelerators","isEmpty","_jsxs","Flex","align","style","paddingLeft","paddingXL","paddingRight","justify","paddingMD","paddingTop","paddingSM","paddingBottom","flexShrink","position","top","backgroundColor","colorBgContainer","zIndex","gap","wrap","Typography","Title","level","margin","QuestionIconWithTooltip","Trans","i18nKey","marginLeft","Segmented","options","label","onChange","v","BAIFetchKeyButton","loading","type","marginXS","flex","overflowY","overflowX","Empty","image","PRESENTED_IMAGE_SIMPLE","description","marginTop","marginBottom","marginMD","padding","borderRadius","borderRadiusLG","justifyItems","overflow","border","colorBgLayout","resourceSlotsInRG","_ref3","key","colorSuccessBg","checkPresetInfo","remainingWithoutResourceGroup","resourceLimitsWithoutResourceGroup","totalValue","getTotalValue","maxValue","currentValue","getCurrentValue","keypair_using","capacity","displayValue","fetchKey","props","currentProject","useCurrentProjectValue","internalIsRefetching","refetch","useResourceLimitAndRemaining","currentProjectName","name","ignorePerContainerConfig","useResourceSlotsDetails","setType","useState","useMemo","omit","getResourceValueForCard","useCallback","BaseResourceItem","resourceGroup","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal","_checkPresetInfo$scal2","scaling_groups","using","numberFixed","remaining","selectedResourceGroup","setSelectedResourceGroup","deferredSelectedResourceGroup","useDeferredValue","currentResourceGroup","setDisplayType","ResourceGroupSelectForCurrentProject","showSearch","minWidth","popupMatchSelectWidth","queryRef","isPendingRefetch","startRefetchTransition","useTransition","useRefetchableFragment","_MySessionQueryFragment","myInteractive","myBatch","myInference","myUpload","renderBAIPanelItem","justifyContent","maxWidth","alignItems","BAIPanelItem","newFetchKey","fetchPolicy","count","_data$compute_session","sessionDetailId","setSessionDetailId","useQueryParam","StringParam","_RecentlyCreatedSessionFragment","_Fragment","marginRight","marginSM","SessionNodes","sessionsFrgmt","filterNonNullItems","compute_session_nodes","edges","e","onClickSessionName","session","toLocalId","pagination","disableSorter","SessionDetailDrawer","open","sessionId","onClose","_TotalResourceWithinResourceGroupFragment","useEffect","totalOccupied","totalAvailable","subNumberWithUnits","totalOccupiedSlots","totalAvailableSlots","_data$agent_summary_l","agents","agent_summary_list","agent","occupiedSlots","JSON","parse","occupied_slots","availableSlots","available_slots","addNumberWithUnits","handleRefetch","DashboardPage","_baiClient$_config","_baiClient$_config2","baiClient","useSuspendedBackendaiClient","useCurrentResourceGroupValue","updateFetchKey","useUpdatableState","localStorageBoardItems","setLocalStorageBoardItems","useBAISettingUserState","useLazyLoadQuery","_DashboardPageQuery","projectId","hideAgents","_config","useInterval","initialBoardItems","filterEmptyItem","rowSpan","columnSpan","definition","minRowSpan","minColumnSpan","Suspense","fallback","Skeleton","active","MySession","MyResource","MyResourceWithinResourceGroup","TotalResourceWithinResourceGroup","RecentlyCreatedSession","mergedBoardItems","updatedItem","itemInStorage","BAIBoard","onItemsChange","event","changedItems","detail"],"sourceRoot":""}