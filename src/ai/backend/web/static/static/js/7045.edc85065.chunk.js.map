{"version":3,"file":"static/js/7045.edc85065.chunk.js","mappings":"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","sources":["components/BAIPropertyFilter.tsx","components/TableColumnsSettingModal.tsx","hooks/reactPaginationQueryOptions.tsx","../node_modules/.pnpm/ahooks@3.8.0_react@18.3.1/node_modules/ahooks/es/useDynamicList/index.js","../node_modules/.pnpm/antd@5.20.0_date-fns@2.30.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/auto-complete/index.js"],"sourcesContent":["import useControllableState from '../hooks/useControllableState';\nimport Flex from './Flex';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport { useDynamicList } from 'ahooks';\nimport {\n  AutoComplete,\n  AutoCompleteProps,\n  Button,\n  GetRef,\n  Input,\n  Select,\n  Space,\n  Tag,\n  Tooltip,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, {\n  ComponentProps,\n  ReactNode,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\n//github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/models/minilang/queryfilter.py\ntype FilterProperty = {\n  key: string;\n  // operators: Array<string>;\n  defaultOperator?: string;\n  propertyLabel: string;\n  // TODO: support array, number\n  type: 'string' | 'boolean';\n  options?: AutoCompleteProps['options'];\n};\nexport interface BAIPropertyFilterProps\n  extends Omit<ComponentProps<typeof Flex>, 'value' | 'onChange'> {\n  value?: string;\n  onChange?: (value: string) => void;\n  defaultValue?: string;\n  filterProperties: Array<FilterProperty>;\n  loading?: boolean;\n}\n\ninterface FilterInput {\n  property: string;\n  operator: string;\n  value: string;\n  label?: ReactNode;\n  type: FilterProperty['type'];\n  propertyLabel: string;\n}\n\nconst DEFAULT_OPERATOR_OF_TYPES = {\n  string: 'ilike',\n  boolean: '==',\n};\n\nconst DEFAULT_OPTIONS_OF_TYPES: {\n  [key: string]: AutoCompleteProps['options'] | undefined;\n} = {\n  boolean: [\n    {\n      label: 'True',\n      value: 'true',\n    },\n    {\n      label: 'False',\n      value: 'false',\n    },\n  ],\n  string: undefined,\n};\n\nfunction trimFilterValue(filterValue: string): string {\n  return filterValue.replace(/^%|%$/g, '');\n}\n\n/**\n * Parses the filter value and returns an object containing the property, operator, and value.\n * @param filter - The filter string to parse.\n * @returns An object containing the parsed property, operator, and value.\n */\nexport function parseFilterValue(filter: string) {\n  // Split the filter string into an array of strings using a regular expression.\n  // The regular expression splits the string at whitespace characters, but ignores whitespace within double quotes.\n  const [property, ...rest] = filter.split(/\\s+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n  // Join the remaining strings in the array and split them again using the same regular expression.\n  // This extracts the operator and the value from the filter string.\n  const [operator, ...valueParts] = rest\n    .join(' ')\n    .split(/\\s+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n  // Join the value parts into a single string and remove any leading or trailing double quotes.\n  const value = valueParts.join(' ').replace(/^\"|\"$/g, '');\n\n  // Return an object containing the parsed property, operator, and value.\n  return { property, operator, value };\n}\n\nconst BAIPropertyFilter: React.FC<BAIPropertyFilterProps> = ({\n  filterProperties,\n  value: propValue,\n  onChange: propOnChange,\n  defaultValue,\n  loading,\n  ...containerProps\n}) => {\n  const [search, setSearch] = useControllableState({});\n  const autoCompleteRef = useRef<GetRef<typeof AutoComplete>>(null);\n  const [isOpenAutoComplete, setIsOpenAutoComplete] = useState(false);\n\n  const [value, setValue] = useControllableState<string | undefined>({\n    value: propValue,\n    defaultValue: defaultValue,\n    onChange: propOnChange,\n  });\n  const filtersFromValue = useMemo(() => {\n    if (value === undefined) return [];\n    const filters = value.split('&').map((filter) => filter.trim());\n    return filters.map((filter) => {\n      const { property, operator, value } = parseFilterValue(filter);\n      return {\n        property,\n        operator,\n        value,\n        propertyLabel:\n          _.find(filterProperties, (f) => f.key === property)?.propertyLabel ||\n          property,\n        type:\n          _.find(filterProperties, (f) => f.key === property)?.type || 'string',\n      };\n    });\n  }, [value, filterProperties]);\n\n  const { t } = useTranslation();\n  const options = _.map(filterProperties, (filterProperty) => {\n    return {\n      label: filterProperty.propertyLabel,\n      value: filterProperty.key,\n      filter: filterProperty,\n    };\n  });\n  const [selectedProperty, setSelectedProperty] = useState(options[0].filter);\n  const { list, remove, push, resetList, getKey } =\n    useDynamicList<FilterInput>(filtersFromValue);\n\n  const { token } = theme.useToken();\n\n  useEffect(() => {\n    if (list.length === 0) {\n      setValue(undefined);\n    } else {\n      setValue(\n        _.map(list, (item) => {\n          const valueStringInResult =\n            item.type === 'string' ? `\"${item.value}\"` : item.value;\n          return `${item.property} ${item.operator} ${valueStringInResult}`;\n        }).join(' & '),\n      );\n    }\n  }, [list, setValue]);\n\n  const onSearch = (value: string) => {\n    if (_.isEmpty(value)) return;\n    setSearch('');\n    const operator =\n      selectedProperty.defaultOperator ||\n      DEFAULT_OPERATOR_OF_TYPES[selectedProperty.type];\n    const filterValue =\n      operator === 'ilike' || operator === 'like' ? `%${value}%` : `${value}`;\n    push({\n      property: selectedProperty.key,\n      propertyLabel: selectedProperty.propertyLabel,\n      operator,\n      value: filterValue,\n      label: selectedProperty.options?.find((o) => o.value === value)?.label,\n      type: selectedProperty.type,\n    });\n  };\n  return (\n    <Flex direction=\"column\" gap={'xs'} style={{ flex: 1 }} align=\"start\">\n      <Space.Compact>\n        <Select\n          popupMatchSelectWidth={false}\n          options={options}\n          value={selectedProperty.key}\n          onChange={(value, options) => {\n            setSelectedProperty(_.castArray(options)[0].filter);\n          }}\n          onSelect={() => {\n            autoCompleteRef.current?.focus();\n            setIsOpenAutoComplete(true);\n          }}\n          showSearch\n          optionFilterProp=\"label\"\n        />\n        <AutoComplete\n          ref={autoCompleteRef}\n          value={search}\n          open={isOpenAutoComplete}\n          onDropdownVisibleChange={setIsOpenAutoComplete}\n          // https://ant.design/components/auto-complete#why-doesnt-the-text-composition-system-work-well-with-onsearch-in-controlled-mode\n          // onSearch={(value) => {}}\n          onSelect={onSearch}\n          onChange={(value) => {\n            setSearch(value);\n          }}\n          style={{\n            minWidth: 200,\n          }}\n          // @ts-ignore\n          options={_.filter(\n            selectedProperty.options ||\n              DEFAULT_OPTIONS_OF_TYPES[selectedProperty.type],\n            (option) => {\n              return _.isEmpty(search)\n                ? true\n                : option.label?.toString().includes(search);\n            },\n          )}\n          placeholder={t('propertyFilter.placeHolder')}\n        >\n          <Input.Search onSearch={onSearch} allowClear />\n        </AutoComplete>\n      </Space.Compact>\n      {list.length > 0 && (\n        <Flex\n          direction=\"row\"\n          gap={'xs'}\n          wrap=\"wrap\"\n          style={{ alignSelf: 'stretch' }}\n        >\n          {_.map(list, (item, index) => {\n            return (\n              <Tag\n                key={getKey(index)}\n                closable\n                onClose={() => {\n                  remove(index);\n                }}\n                style={{ margin: 0 }}\n              >\n                {item.propertyLabel}:{' '}\n                {item.label || trimFilterValue(item.value)}\n              </Tag>\n            );\n          })}\n          {list.length > 1 && (\n            <Tooltip title={t('propertyFilter.ResetFilter')}>\n              <Button\n                size=\"small\"\n                icon={\n                  <CloseCircleOutlined\n                    style={{ color: token.colorTextSecondary }}\n                  />\n                }\n                type=\"text\"\n                onClick={() => {\n                  resetList([]);\n                }}\n              />\n            </Tooltip>\n          )}\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\nexport default BAIPropertyFilter;\n","import BAIModal, { BAIModalProps } from './BAIModal';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Checkbox, Input, theme, Form } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { FormInstance } from 'antd/lib';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface FormValues {\n  searchInput?: string;\n  selectedColumnKeys?: string[];\n}\n\ninterface TableColumnsSettingProps extends BAIModalProps {\n  open: boolean;\n  onRequestClose: (formValues?: FormValues) => void;\n  columns: ColumnsType<any>;\n  displayedColumnKeys?: string[];\n}\n\nconst TableColumnsSettingModal: React.FC<TableColumnsSettingProps> = ({\n  open,\n  onRequestClose,\n  columns,\n  displayedColumnKeys,\n  ...modalProps\n}) => {\n  const formRef = useRef<FormInstance>(null);\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const onChangeTitleToString: any = (element: any) => {\n    const text = React.Children.map(element.props.children, (child) => {\n      if (typeof child === 'string') {\n        return child;\n      }\n    });\n    return text;\n  };\n\n  const columnOptions = columns.map((column) => {\n    if (typeof column.title === 'string') {\n      return {\n        label: column.title,\n        value: _.toString(column.key),\n      };\n    } else if (typeof column.title === 'object' && 'props' in column.title!) {\n      return {\n        label: onChangeTitleToString(column.title),\n        value: _.toString(column.key),\n      };\n    } else {\n      return {\n        label: undefined,\n        value: _.toString(column.key),\n      };\n    }\n  });\n\n  return (\n    <BAIModal\n      title={t('table.SettingTable')}\n      open={open}\n      destroyOnClose\n      centered\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            onRequestClose(values);\n          })\n          .catch(() => {});\n      }}\n      onCancel={() => {\n        onRequestClose();\n      }}\n      {...modalProps}\n    >\n      <Form\n        ref={formRef}\n        preserve={false}\n        initialValues={{\n          selectedColumnKeys:\n            displayedColumnKeys ||\n            columnOptions.map((columnOption) => columnOption.value),\n        }}\n        layout=\"vertical\"\n      >\n        <Form.Item\n          name=\"searchInput\"\n          label={t('table.SelectColumnToDisplay')}\n          style={{ marginBottom: 0 }}\n        >\n          <Input\n            prefix={<SearchOutlined />}\n            style={{ marginBottom: token.marginSM }}\n            placeholder={t('table.SearchTableColumn')}\n          />\n        </Form.Item>\n        <Form.Item\n          noStyle\n          shouldUpdate={(prev, cur) => prev.searchInput !== cur.searchInput}\n        >\n          {({ getFieldValue }) => {\n            const searchKeyword = getFieldValue('searchInput')\n              ? _.toLower(getFieldValue('searchInput'))\n              : undefined;\n\n            const filteredColumns = columnOptions.map((columnOption) =>\n              _.toLower(_.toString(columnOption.label)).includes(\n                searchKeyword || '',\n              )\n                ? columnOption\n                : {\n                    ...columnOption,\n                    style: {\n                      display: 'none',\n                    },\n                  },\n            );\n            return (\n              <Form.Item\n                name=\"selectedColumnKeys\"\n                style={{\n                  height: 220,\n                  overflowY: 'auto',\n                }}\n              >\n                <Checkbox.Group\n                  options={filteredColumns}\n                  style={{ flexDirection: 'column' }}\n                />\n              </Form.Item>\n            );\n          }}\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default TableColumnsSettingModal;\n","// import { offset_to_cursor } from \"../helper\";\nimport { LazyLoadQueryOptions } from '../helper/types';\nimport { SorterResult } from 'antd/lib/table/interface';\nimport _ from 'lodash';\nimport { useState } from 'react';\nimport {\n  fetchQuery,\n  GraphQLTaggedNode,\n  useRelayEnvironment,\n} from 'react-relay';\nimport {\n  ArrayParam,\n  NumberParam,\n  ObjectParam,\n  StringParam,\n  useQueryParams,\n} from 'use-query-params';\n\nexport type SorterInterface = Pick<SorterResult<any>, 'field' | 'order'>;\n\nexport const antdSorterResultToOrder = (\n  sorter: SorterInterface | SorterInterface[],\n) => {\n  const sorterArray = _.castArray(sorter).filter((s) => s.field);\n\n  return _.filter(\n    _.map(sorterArray, (s) =>\n      _.isNull(s.order)\n        ? undefined\n        : `${_.snakeCase(s.field as string).toUpperCase()}_${\n            s.order === 'ascend' ? 'ASC' : 'DESC'\n          }`,\n    ),\n  );\n};\n\nexport const orderToAntdSorterResult = (order: string[]) => {\n  return _.map(order, (o) => {\n    const names = o.split('_');\n    const orderKey = names.pop();\n    const field = _.camelCase(names.join('_'));\n    return {\n      field,\n      order: (orderKey === 'ASC' ? 'ascend' : 'descend') as\n        | 'ascend'\n        | 'descend'\n        | null,\n    };\n  });\n};\n\nexport const getSortOrderByName = (order: string[], name: string) => {\n  const sorterResult = orderToAntdSorterResult(order);\n  const sorter = _.find(sorterResult, (s) => s.field === name);\n  return sorter?.order;\n};\n\nexport const useRelayPaginationQueryOptions = <\n  // Q, N,\n  O,\n  F,\n>({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      first: pageSize,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n      order: order,\n      filter: filter,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n    // sorter?: SorterResult<N>[];\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n  }) => any;\n}) => {\n  const [isPending, setIsPending] = useState(false);\n\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    order: ArrayParam,\n    filter: ObjectParam,\n  });\n\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  //TODO: not use as\n  const order = (params.order || defaultVariables.order) as O[];\n  const filter = (params.filter || defaultVariables.filter) as F;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    // sorter: SorterResult<N>[],\n    newOrder: O[] = defaultVariables.order,\n    newFilter: F | undefined = defaultVariables.filter,\n    options?: {\n      withoutPendingStatus: boolean;\n    },\n  ) => {\n    if (options?.withoutPendingStatus !== true) {\n      setIsPending(true);\n    }\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setIsPending(false);\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          // eslint-disable-next-line\n          order: newOrder as [], // TODO: not use as []\n          // eslint-disable-next-line\n          filter: newFilter as {}, // TODO: not use as {}\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      isPending,\n      variables,\n      filter,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\nexport const useBAIPaginationQueryOptions = ({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      limit: pageSize,\n      offset: page > 1 ? (page - 1) * pageSize : 0,\n      filter: filter,\n      order: order,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  }) => any;\n}) => {\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    filter: StringParam,\n    order: StringParam,\n  });\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  const order = params.order || defaultVariables.order;\n  const filter = params.filter || defaultVariables.filter;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    newOrder: string | undefined = defaultVariables.order,\n    newFilter: string | undefined = defaultVariables.filter,\n  ) => {\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          order: newOrder,\n          filter: newFilter,\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      variables,\n      filter,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\ninterface BAIPaginationOption {\n  limit: number;\n  offset: number;\n  // filter?: string;\n  // order?: string;\n}\ninterface AntdBasicPaginationOption {\n  pageSize: number;\n  current: number;\n}\n\ninterface InitialPaginationOption\n  extends AntdBasicPaginationOption,\n    Omit<BAIPaginationOption, 'limit' | 'offset'> {}\nexport const useBAIPaginationOptionState = (\n  initialOptions: InitialPaginationOption,\n): {\n  baiPaginationOption: BAIPaginationOption;\n  tablePaginationOption: AntdBasicPaginationOption;\n  setTablePaginationOption: (pagination: AntdBasicPaginationOption) => void;\n} => {\n  const [options, setOptions] =\n    useState<AntdBasicPaginationOption>(initialOptions);\n  return {\n    baiPaginationOption: {\n      limit: options.pageSize,\n      offset:\n        options.current > 1 ? (options.current - 1) * options.pageSize : 0,\n    },\n    tablePaginationOption: {\n      pageSize: options.pageSize,\n      current: options.current,\n    },\n    setTablePaginationOption: (pagination) => {\n      if (!_.isEqual(pagination, options)) {\n        setOptions((current) => ({\n          ...current,\n          ...pagination,\n        }));\n      }\n    },\n  };\n};\n","import { __read, __spreadArray } from \"tslib\";\nimport { useCallback, useRef, useState } from 'react';\nimport isDev from '../utils/isDev';\nvar useDynamicList = function (initialList) {\n  if (initialList === void 0) {\n    initialList = [];\n  }\n  var counterRef = useRef(-1);\n  var keyList = useRef([]);\n  var setKey = useCallback(function (index) {\n    counterRef.current += 1;\n    keyList.current.splice(index, 0, counterRef.current);\n  }, []);\n  var _a = __read(useState(function () {\n      initialList.forEach(function (_, index) {\n        setKey(index);\n      });\n      return initialList;\n    }), 2),\n    list = _a[0],\n    setList = _a[1];\n  var resetList = useCallback(function (newList) {\n    keyList.current = [];\n    setList(function () {\n      newList.forEach(function (_, index) {\n        setKey(index);\n      });\n      return newList;\n    });\n  }, []);\n  var insert = useCallback(function (index, item) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n      temp.splice(index, 0, item);\n      setKey(index);\n      return temp;\n    });\n  }, []);\n  var getKey = useCallback(function (index) {\n    return keyList.current[index];\n  }, []);\n  var getIndex = useCallback(function (key) {\n    return keyList.current.findIndex(function (ele) {\n      return ele === key;\n    });\n  }, []);\n  var merge = useCallback(function (index, items) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n      items.forEach(function (_, i) {\n        setKey(index + i);\n      });\n      temp.splice.apply(temp, __spreadArray([index, 0], __read(items), false));\n      return temp;\n    });\n  }, []);\n  var replace = useCallback(function (index, item) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n      temp[index] = item;\n      return temp;\n    });\n  }, []);\n  var remove = useCallback(function (index) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n      temp.splice(index, 1);\n      // remove keys if necessary\n      try {\n        keyList.current.splice(index, 1);\n      } catch (e) {\n        console.error(e);\n      }\n      return temp;\n    });\n  }, []);\n  var batchRemove = useCallback(function (indexes) {\n    if (!Array.isArray(indexes)) {\n      if (isDev) {\n        console.error(\"`indexes` parameter of `batchRemove` function expected to be an array, but got \\\"\".concat(typeof indexes, \"\\\".\"));\n      }\n      return;\n    }\n    if (!indexes.length) {\n      return;\n    }\n    setList(function (prevList) {\n      var newKeyList = [];\n      var newList = prevList.filter(function (item, index) {\n        var shouldKeep = !indexes.includes(index);\n        if (shouldKeep) {\n          newKeyList.push(getKey(index));\n        }\n        return shouldKeep;\n      });\n      keyList.current = newKeyList;\n      return newList;\n    });\n  }, []);\n  var move = useCallback(function (oldIndex, newIndex) {\n    if (oldIndex === newIndex) {\n      return;\n    }\n    setList(function (l) {\n      var newList = __spreadArray([], __read(l), false);\n      var temp = newList.filter(function (_, index) {\n        return index !== oldIndex;\n      });\n      temp.splice(newIndex, 0, newList[oldIndex]);\n      // move keys if necessary\n      try {\n        var keyTemp = keyList.current.filter(function (_, index) {\n          return index !== oldIndex;\n        });\n        keyTemp.splice(newIndex, 0, keyList.current[oldIndex]);\n        keyList.current = keyTemp;\n      } catch (e) {\n        console.error(e);\n      }\n      return temp;\n    });\n  }, []);\n  var push = useCallback(function (item) {\n    setList(function (l) {\n      setKey(l.length);\n      return l.concat([item]);\n    });\n  }, []);\n  var pop = useCallback(function () {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(0, keyList.current.length - 1);\n    } catch (e) {\n      console.error(e);\n    }\n    setList(function (l) {\n      return l.slice(0, l.length - 1);\n    });\n  }, []);\n  var unshift = useCallback(function (item) {\n    setList(function (l) {\n      setKey(0);\n      return [item].concat(l);\n    });\n  }, []);\n  var shift = useCallback(function () {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(1, keyList.current.length);\n    } catch (e) {\n      console.error(e);\n    }\n    setList(function (l) {\n      return l.slice(1, l.length);\n    });\n  }, []);\n  var sortList = useCallback(function (result) {\n    return result.map(function (item, index) {\n      return {\n        key: index,\n        item: item\n      };\n    }) // add index into obj\n    .sort(function (a, b) {\n      return getIndex(a.key) - getIndex(b.key);\n    }) // sort based on the index of table\n    .filter(function (item) {\n      return !!item.item;\n    }) // remove undefined(s)\n    .map(function (item) {\n      return item.item;\n    });\n  },\n  // retrive the data\n  []);\n  return {\n    list: list,\n    insert: insert,\n    merge: merge,\n    replace: replace,\n    remove: remove,\n    batchRemove: batchRemove,\n    getKey: getKey,\n    getIndex: getIndex,\n    move: move,\n    push: push,\n    pop: pop,\n    unshift: unshift,\n    shift: shift,\n    sortList: sortList,\n    resetList: resetList\n  };\n};\nexport default useDynamicList;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport { useZIndex } from '../_util/hooks/useZIndex';\nimport genPurePanel from '../_util/PurePanel';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nconst {\n  Option\n} = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return (child === null || child === void 0 ? void 0 : child.type) && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n  var _a;\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    popupClassName,\n    dropdownClassName,\n    children,\n    dataSource\n  } = props;\n  const childNodes = toArray(children);\n  // ============================= Input =============================\n  let customizeInput;\n  if (childNodes.length === 1 && /*#__PURE__*/React.isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    [customizeInput] = childNodes;\n  }\n  const getInputElement = customizeInput ? () => customizeInput : undefined;\n  // ============================ Options ============================\n  let optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(item => {\n      if ( /*#__PURE__*/React.isValidElement(item)) {\n        return item;\n      }\n      switch (typeof item) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            const {\n              value: optionValue\n            } = item;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          return undefined;\n      }\n    }) : [];\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('AutoComplete');\n    warning.deprecated(!('dataSource' in props), 'dataSource', 'options');\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'usage', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    warning.deprecated(!dropdownClassName, 'dropdownClassName', 'popupClassName');\n  }\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  // ============================ zIndex ============================\n  const [zIndex] = useZIndex('SelectLike', (_a = props.dropdownStyle) === null || _a === void 0 ? void 0 : _a.zIndex);\n  return /*#__PURE__*/React.createElement(Select, Object.assign({\n    ref: ref,\n    suffixIcon: null\n  }, omit(props, ['dataSource', 'dropdownClassName']), {\n    prefixCls: prefixCls,\n    popupClassName: popupClassName || dropdownClassName,\n    dropdownStyle: Object.assign(Object.assign({}, props.dropdownStyle), {\n      zIndex\n    }),\n    className: classNames(`${prefixCls}-auto-complete`, className),\n    mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n    // Internal api\n    getInputElement\n  }), optionChildren);\n};\nconst RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\n// We don't care debug panel\n/* istanbul ignore next */\nconst PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nif (process.env.NODE_ENV !== 'production') {\n  RefAutoComplete.displayName = 'AutoComplete';\n}\nexport default RefAutoComplete;"],"names":["DEFAULT_OPERATOR_OF_TYPES","string","boolean","DEFAULT_OPTIONS_OF_TYPES","label","value","undefined","_ref","filterProperties","propValue","onChange","propOnChange","defaultValue","loading","containerProps","search","setSearch","useControllableState","autoCompleteRef","useRef","isOpenAutoComplete","setIsOpenAutoComplete","useState","setValue","filtersFromValue","useMemo","split","map","filter","trim","_$find","_$find2","property","operator","rest","valueParts","join","replace","parseFilterValue","propertyLabel","_","f","key","type","t","useTranslation","options","filterProperty","selectedProperty","setSelectedProperty","list","remove","push","resetList","getKey","useDynamicList","token","theme","useToken","useEffect","length","item","valueStringInResult","onSearch","_selectedProperty$opt","_selectedProperty$opt2","defaultOperator","filterValue","find","o","_jsxs","Flex","direction","gap","style","flex","align","children","Space","Compact","_jsx","Select","popupMatchSelectWidth","onSelect","_autoCompleteRef$curr","current","focus","showSearch","optionFilterProp","AutoComplete","ref","open","onDropdownVisibleChange","minWidth","option","_option$label","toString","includes","placeholder","Input","Search","allowClear","wrap","alignSelf","index","Tag","closable","onClose","margin","Tooltip","title","Button","size","icon","CloseCircleOutlined","color","colorTextSecondary","onClick","onRequestClose","columns","displayedColumnKeys","modalProps","formRef","columnOptions","column","element","React","props","child","BAIModal","destroyOnClose","centered","onOk","_formRef$current","validateFields","then","values","catch","onCancel","Form","preserve","initialValues","selectedColumnKeys","columnOption","layout","Item","name","marginBottom","prefix","SearchOutlined","marginSM","noStyle","shouldUpdate","prev","cur","searchInput","_ref2","getFieldValue","searchKeyword","filteredColumns","display","height","overflowY","Checkbox","Group","flexDirection","useBAIPaginationOptionState","initialOptions","setOptions","baiPaginationOption","limit","pageSize","offset","tablePaginationOption","setTablePaginationOption","pagination","initialList","counterRef","keyList","setKey","useCallback","splice","_a","__read","forEach","setList","newList","insert","l","temp","__spreadArray","getIndex","findIndex","ele","merge","items","i","apply","e","console","error","batchRemove","indexes","Array","isArray","prevList","newKeyList","shouldKeep","isDev","concat","move","oldIndex","newIndex","keyTemp","pop","slice","unshift","shift","sortList","result","sort","a","b","Option","isSelectOptionOrSelectOptGroup","isSelectOption","isSelectOptGroup","prefixCls","customizePrefixCls","className","popupClassName","dropdownClassName","dataSource","childNodes","toArray","customizeInput","getInputElement","optionChildren","optionValue","text","getPrefixCls","ConfigContext","zIndex","useZIndex","dropdownStyle","Object","assign","suffixIcon","omit","classNames","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","PurePanel","genPurePanel","_InternalPanelDoNotUseOrYouWillBeFired"],"sourceRoot":""}