{"version":3,"file":"static/js/7468.19f4d1f6.chunk.js","mappings":"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","sources":["components/TableColumnsSettingModal.tsx","hooks/useHiddenColumnKeysSetting.tsx","__generated__/AgentSummaryListQuery.graphql.ts","components/AgentSummaryList.tsx","pages/AgentSummaryPage.tsx"],"sourcesContent":["import BAIModal, { BAIModalProps } from './BAIModal';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Checkbox, Input, theme, Form } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { FormInstance } from 'antd/lib';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface FormValues {\n  searchInput?: string;\n  selectedColumnKeys?: Array<string>;\n}\n\ninterface TableColumnsSettingProps extends BAIModalProps {\n  open: boolean;\n  onRequestClose: (formValues?: FormValues) => void;\n  columns: ColumnsType<any>;\n  hiddenColumnKeys?: Array<string>;\n}\n\nconst TableColumnsSettingModal: React.FC<TableColumnsSettingProps> = ({\n  open,\n  onRequestClose,\n  columns,\n  hiddenColumnKeys,\n  ...modalProps\n}) => {\n  const formRef = useRef<FormInstance>(null);\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const onChangeTitleToString: any = (element: any) => {\n    const text = React.Children.map(element.props.children, (child) => {\n      if (typeof child === 'string') {\n        return child;\n      }\n    });\n    return text;\n  };\n\n  const columnOptions = _.map(columns, (column) => {\n    if (typeof column.title === 'string') {\n      return {\n        label: column.title,\n        value: _.toString(column.key),\n      };\n    } else if (typeof column.title === 'object' && 'props' in column.title!) {\n      return {\n        label: onChangeTitleToString(column.title),\n        value: _.toString(column.key),\n      };\n    } else {\n      return {\n        label: undefined,\n        value: _.toString(column.key),\n      };\n    }\n  });\n\n  return (\n    <BAIModal\n      title={t('table.SettingTable')}\n      open={open}\n      destroyOnClose\n      centered\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            onRequestClose(values);\n          })\n          .catch(() => {});\n      }}\n      onCancel={() => {\n        onRequestClose();\n      }}\n      {...modalProps}\n    >\n      <Form\n        ref={formRef}\n        preserve={false}\n        initialValues={{\n          selectedColumnKeys: _.map(columnOptions, 'value')?.filter(\n            (columnKey) => !_.includes(hiddenColumnKeys, columnKey),\n          ),\n        }}\n        layout=\"vertical\"\n      >\n        <Form.Item\n          name=\"searchInput\"\n          label={t('table.SelectColumnToDisplay')}\n          style={{ marginBottom: 0 }}\n        >\n          <Input\n            prefix={<SearchOutlined />}\n            style={{ marginBottom: token.marginSM }}\n            placeholder={t('table.SearchTableColumn')}\n          />\n        </Form.Item>\n        <Form.Item\n          noStyle\n          shouldUpdate={(prev, cur) => prev.searchInput !== cur.searchInput}\n        >\n          {({ getFieldValue }) => {\n            const searchKeyword = getFieldValue('searchInput')\n              ? _.toLower(getFieldValue('searchInput'))\n              : undefined;\n\n            const filteredColumns = _.map(columnOptions, (columnOption) =>\n              _.toLower(_.toString(columnOption.label)).includes(\n                searchKeyword || '',\n              )\n                ? columnOption\n                : {\n                    ...columnOption,\n                    style: {\n                      display: 'none',\n                    },\n                  },\n            );\n            return (\n              <Form.Item\n                name=\"selectedColumnKeys\"\n                style={{\n                  height: 220,\n                  overflowY: 'auto',\n                }}\n                rules={[\n                  {\n                    required: true,\n                    message: t('general.validation.PleaseSelectOptions'),\n                  },\n                ]}\n              >\n                <Checkbox.Group\n                  options={filteredColumns}\n                  style={{ flexDirection: 'column' }}\n                />\n              </Form.Item>\n            );\n          }}\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default TableColumnsSettingModal;\n","import { useBAISettingUserState } from './useBAISetting';\n\ntype KnownSettingName =\n  | 'AgentList'\n  | 'AgentSummaryList'\n  | 'ContainerRegistryList'\n  | 'CustomizedImageList'\n  | 'ErrorLogList'\n  | 'ImageList'\n  | 'KeypairResourcePolicyList'\n  | 'ProjectResourcePolicyList'\n  | 'UserResourcePolicyList'\n  | 'EndpointListPage';\n\nexport const useHiddenColumnKeysSetting = (listName: KnownSettingName) => {\n  const [hiddenColumnKeys, setHiddenColumnKeys] = useBAISettingUserState(\n    `hiddenColumnKeys.${listName}`,\n  );\n\n  return [hiddenColumnKeys, setHiddenColumnKeys] as const;\n};\n","/**\n * @generated SignedSource<<14dda8a828950b7c426c0f7cfb92e89f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type AgentSummaryListQuery$variables = {\n  filter?: string | null | undefined;\n  limit: number;\n  offset: number;\n  order?: string | null | undefined;\n  status?: string | null | undefined;\n};\nexport type AgentSummaryListQuery$data = {\n  readonly agent_summary_list: {\n    readonly items: ReadonlyArray<{\n      readonly architecture: string | null | undefined;\n      readonly available_slots: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly occupied_slots: string | null | undefined;\n      readonly scaling_group: string | null | undefined;\n      readonly schedulable: boolean | null | undefined;\n      readonly status: string | null | undefined;\n    } | null | undefined>;\n    readonly total_count: number;\n  } | null | undefined;\n};\nexport type AgentSummaryListQuery = {\n  response: AgentSummaryListQuery$data;\n  variables: AgentSummaryListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"order\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv5 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"filter\",\n        \"variableName\": \"filter\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"limit\",\n        \"variableName\": \"limit\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"offset\",\n        \"variableName\": \"offset\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"order\",\n        \"variableName\": \"order\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"status\",\n        \"variableName\": \"status\"\n      }\n    ],\n    \"concreteType\": \"AgentSummaryList\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"agent_summary_list\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"AgentSummary\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"items\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"status\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"architecture\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"available_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"occupied_slots\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"scaling_group\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"schedulable\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"total_count\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AgentSummaryListQuery\",\n    \"selections\": (v5/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v0/*: any*/),\n      (v4/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"AgentSummaryListQuery\",\n    \"selections\": (v5/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"caaf8909248bac69bce5c748e6d28032\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AgentSummaryListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AgentSummaryListQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $filter: String\\n  $status: String\\n  $order: String\\n) {\\n  agent_summary_list(limit: $limit, offset: $offset, filter: $filter, status: $status, order: $order) {\\n    items {\\n      id\\n      status\\n      architecture\\n      available_slots\\n      occupied_slots\\n      scaling_group\\n      schedulable\\n    }\\n    total_count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"dab7ef4f1205af54a6f80ce0d28098c7\";\n\nexport default node;\n","import {\n  AgentSummaryListQuery,\n  AgentSummaryListQuery$data,\n  AgentSummaryListQuery$variables,\n} from '../__generated__/AgentSummaryListQuery.graphql';\nimport {\n  convertToBinaryUnit,\n  toFixedFloorWithoutTrailingZeros,\n} from '../helper';\nimport { INITIAL_FETCH_KEY, useFetchKey } from '../hooks';\nimport { ResourceSlotName, useResourceSlotsDetails } from '../hooks/backendai';\nimport { useBAIPaginationOptionStateOnSearchParam } from '../hooks/reactPaginationQueryOptions';\nimport { useResourceGroupsForCurrentProject } from '../hooks/useCurrentProject';\nimport { useHiddenColumnKeysSetting } from '../hooks/useHiddenColumnKeysSetting';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport BAIRadioGroup from './BAIRadioGroup';\nimport { ResourceTypeIcon } from './ResourceNumber';\nimport TableColumnsSettingModal from './TableColumnsSettingModal';\nimport {\n  CheckCircleOutlined,\n  MinusCircleOutlined,\n  ReloadOutlined,\n} from '@ant-design/icons';\nimport { useToggle } from 'ahooks';\nimport { Button, TableProps, theme, Tooltip, Typography } from 'antd';\nimport { AnyObject } from 'antd/es/_util/type';\nimport { ColumnsType, ColumnType } from 'antd/es/table';\nimport {\n  filterOutNullAndUndefined,\n  BAITable,\n  BAIFlex,\n  BAIPropertyFilter,\n  mergeFilterValues,\n} from 'backend.ai-ui';\nimport _ from 'lodash';\nimport React, { useDeferredValue, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\nimport { useBAISettingUserState } from 'src/hooks/useBAISetting';\nimport { StringParam, useQueryParams, withDefault } from 'use-query-params';\n\ntype AgentSummary = NonNullable<\n  AgentSummaryListQuery$data['agent_summary_list']\n>['items'][number];\n\ninterface AgentSummaryListProps {\n  containerStyle?: React.CSSProperties;\n  tableProps?: Omit<TableProps, 'dataSource'>;\n}\n\nconst AgentSummaryList: React.FC<AgentSummaryListProps> = ({\n  containerStyle,\n  tableProps,\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { mergedResourceSlots } = useResourceSlotsDetails();\n  const [visibleColumnSettingModal, { toggle: toggleColumnSettingModal }] =\n    useToggle();\n\n  const {\n    baiPaginationOption,\n    tablePaginationOption,\n    setTablePaginationOption,\n  } = useBAIPaginationOptionStateOnSearchParam({\n    current: 1,\n    pageSize: 20,\n  });\n\n  const [queryParams, setQuery] = useQueryParams({\n    order: withDefault(StringParam, undefined),\n    filter: withDefault(StringParam, undefined),\n    status: withDefault(StringParam, 'ALIVE'),\n  });\n\n  const [fetchKey, updateFetchKey] = useFetchKey();\n  const { sftpResourceGroups } = useResourceGroupsForCurrentProject();\n\n  const sftpExclusionFilter =\n    sftpResourceGroups && sftpResourceGroups.length > 0\n      ? `!(scaling_group in [${sftpResourceGroups.map((group) => `\"${group}\"`).join(', ')}])`\n      : undefined;\n\n  const queryVariables: AgentSummaryListQuery$variables = useMemo(\n    () => ({\n      limit: baiPaginationOption.limit,\n      offset: baiPaginationOption.offset,\n      filter: mergeFilterValues([queryParams.filter, sftpExclusionFilter]),\n      order: queryParams.order,\n      status: queryParams.status,\n    }),\n    [\n      baiPaginationOption.limit,\n      baiPaginationOption.offset,\n      queryParams.filter,\n      queryParams.order,\n      queryParams.status,\n      sftpExclusionFilter,\n    ],\n  );\n  const deferredQueryVariables = useDeferredValue(queryVariables);\n  const deferredFetchKey = useDeferredValue(fetchKey);\n\n  const [columnOverrides, setColumnOverrides] = useBAISettingUserState(\n    'table_column_overrides.AgentSummaryList',\n  );\n\n  const { agent_summary_list } = useLazyLoadQuery<AgentSummaryListQuery>(\n    graphql`\n      query AgentSummaryListQuery(\n        $limit: Int!\n        $offset: Int!\n        $filter: String\n        $status: String\n        $order: String\n      ) {\n        agent_summary_list(\n          limit: $limit\n          offset: $offset\n          filter: $filter\n          status: $status\n          order: $order\n        ) {\n          items {\n            id\n            status\n            architecture\n            available_slots\n            occupied_slots\n            scaling_group\n            schedulable\n          }\n          total_count\n        }\n      }\n    `,\n    deferredQueryVariables,\n    {\n      fetchKey: deferredFetchKey,\n      fetchPolicy:\n        deferredFetchKey === INITIAL_FETCH_KEY\n          ? 'store-and-network'\n          : 'network-only',\n    },\n  );\n\n  const columns: ColumnsType<AgentSummary> = [\n    {\n      title: <>ID</>,\n      key: 'id',\n      dataIndex: 'id',\n      fixed: 'left',\n      render: (value, record) => {\n        return (\n          <BAIFlex direction=\"column\" align=\"start\">\n            <Typography.Text>{value}</Typography.Text>\n          </BAIFlex>\n        );\n      },\n      sorter: true,\n    },\n    {\n      title: t('agent.Architecture'),\n      key: 'architecture',\n      dataIndex: 'architecture',\n    },\n    {\n      title: t('agent.Allocation'),\n      key: 'allocation',\n      render: (value, record) => {\n        const parsedOccupiedSlots: {\n          [key in ResourceSlotName]: string | undefined;\n        } = JSON.parse(record?.occupied_slots || '{}');\n        const parsedAvailableSlots: {\n          [key in ResourceSlotName]: string | undefined;\n        } = JSON.parse(record?.available_slots || '{}');\n        return (\n          <BAIFlex direction=\"column\" gap=\"xxs\">\n            {_.map(\n              parsedAvailableSlots,\n              (value: string | number, key: ResourceSlotName) => {\n                if (key === 'cpu') {\n                  const cpuPercent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots.cpu) /\n                      _.toNumber(parsedAvailableSlots.cpu)) *\n                      100,\n                  );\n                  return (\n                    <BAIFlex\n                      key={key}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                    >\n                      <BAIFlex gap=\"xxs\">\n                        <ResourceTypeIcon key={key} type={key} />\n                        <Typography.Text>\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedOccupiedSlots.cpu || 0,\n                            0,\n                          )}\n                          /\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedAvailableSlots.cpu || 0,\n                            0,\n                          )}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          {mergedResourceSlots?.cpu?.display_unit}\n                        </Typography.Text>\n                      </BAIFlex>\n                      <BAIProgressWithLabel\n                        percent={cpuPercent}\n                        strokeColor={\n                          cpuPercent > 80\n                            ? token.colorError\n                            : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(cpuPercent, 1) + ' %'\n                        }\n                      />\n                    </BAIFlex>\n                  );\n                } else if (key === 'mem') {\n                  const memPercent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots.mem) /\n                      _.toNumber(parsedAvailableSlots.mem)) *\n                      100,\n                  );\n                  return (\n                    <BAIFlex\n                      key={'mem'}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                    >\n                      <BAIFlex gap=\"xxs\">\n                        <ResourceTypeIcon type={'mem'} />\n                        <Typography.Text>\n                          {convertToBinaryUnit(parsedOccupiedSlots.mem, 'g', 0)\n                            ?.numberFixed ?? 0}\n                          /\n                          {convertToBinaryUnit(parsedAvailableSlots.mem, 'g', 0)\n                            ?.numberFixed ?? 0}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          GiB\n                        </Typography.Text>\n                      </BAIFlex>\n                      <BAIProgressWithLabel\n                        percent={memPercent}\n                        strokeColor={\n                          memPercent > 80\n                            ? token.colorError\n                            : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(memPercent, 1) + ' %'\n                        }\n                      />\n                    </BAIFlex>\n                  );\n                } else if (parsedAvailableSlots[key]) {\n                  const percent = _.toFinite(\n                    (_.toNumber(parsedOccupiedSlots[key]) /\n                      _.toNumber(parsedAvailableSlots[key])) *\n                      100,\n                  );\n                  return (\n                    <BAIFlex\n                      key={key}\n                      justify=\"between\"\n                      style={{ minWidth: 220 }}\n                      gap=\"xxs\"\n                    >\n                      <BAIFlex gap=\"xxs\">\n                        <ResourceTypeIcon key={key} type={key} />\n                        <Typography.Text>\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedOccupiedSlots[key] || 0,\n                            2,\n                          )}\n                          /\n                          {toFixedFloorWithoutTrailingZeros(\n                            parsedAvailableSlots[key],\n                            2,\n                          )}\n                        </Typography.Text>\n                        <Typography.Text\n                          type=\"secondary\"\n                          style={{ fontSize: token.sizeXS }}\n                        >\n                          {mergedResourceSlots?.[key]?.display_unit}\n                        </Typography.Text>\n                      </BAIFlex>\n                      <BAIProgressWithLabel\n                        percent={percent}\n                        strokeColor={\n                          percent > 80 ? token.colorError : token.colorSuccess\n                        }\n                        width={120}\n                        valueLabel={\n                          toFixedFloorWithoutTrailingZeros(percent, 1) + ' %'\n                        }\n                      />\n                    </BAIFlex>\n                  );\n                }\n              },\n            )}\n          </BAIFlex>\n        );\n      },\n    },\n    {\n      title: t('general.ResourceGroup'),\n      key: 'scaling_group',\n      dataIndex: 'scaling_group',\n      sorter: true,\n    },\n    {\n      title: t('agent.Schedulable'),\n      key: 'schedulable',\n      dataIndex: 'schedulable',\n      render: (value) => {\n        return (\n          <BAIFlex justify=\"center\">\n            {value === true ? (\n              <CheckCircleOutlined\n                style={{\n                  color: token.colorSuccess,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            ) : (\n              <MinusCircleOutlined\n                style={{\n                  color: token.colorTextDisabled,\n                  fontSize: token.fontSizeXL,\n                }}\n              />\n            )}\n          </BAIFlex>\n        );\n      },\n      sorter: true,\n    },\n  ];\n  const [hiddenColumnKeys, setHiddenColumnKeys] =\n    useHiddenColumnKeysSetting('AgentSummaryList');\n\n  return (\n    <BAIFlex direction=\"column\" align=\"stretch\" style={containerStyle} gap=\"sm\">\n      <BAIFlex justify=\"between\" align=\"start\" gap=\"xs\" wrap=\"wrap\">\n        <BAIFlex\n          direction=\"row\"\n          gap={'sm'}\n          align=\"start\"\n          style={{ flex: 1 }}\n          wrap=\"wrap\"\n        >\n          <BAIRadioGroup\n            options={[\n              {\n                label: t('agent.Connected'),\n                value: 'ALIVE',\n              },\n              {\n                label: t('agent.Terminated'),\n                value: 'TERMINATED',\n              },\n            ]}\n            value={queryParams.status}\n            onChange={(e) => {\n              const value = e.target.value;\n              setQuery({ status: value }, 'replaceIn');\n            }}\n          />\n\n          <BAIPropertyFilter\n            filterProperties={[\n              {\n                key: 'id',\n                propertyLabel: 'ID',\n                type: 'string',\n              },\n              {\n                key: 'schedulable',\n                propertyLabel: t('agent.Schedulable'),\n                type: 'boolean',\n                options: [\n                  {\n                    label: t('general.Enabled'),\n                    value: 'true',\n                  },\n                  {\n                    label: t('general.Disabled'),\n                    value: 'false',\n                  },\n                ],\n              },\n            ]}\n            value={queryParams.filter}\n            onChange={(value) => {\n              setQuery({ filter: value }, 'replaceIn');\n              setTablePaginationOption({ current: 1 });\n            }}\n          />\n        </BAIFlex>\n        <BAIFlex gap=\"xs\">\n          <Tooltip title={t('button.Refresh')}>\n            <Button\n              loading={deferredFetchKey !== fetchKey}\n              onClick={() => updateFetchKey()}\n              icon={<ReloadOutlined />}\n            ></Button>\n          </Tooltip>\n        </BAIFlex>\n      </BAIFlex>\n      <BAITable\n        bordered\n        scroll={{ x: 'max-content' }}\n        rowKey={'id'}\n        dataSource={filterOutNullAndUndefined(agent_summary_list?.items)}\n        showSorterTooltip={false}\n        columns={\n          _.filter(\n            columns,\n            (column) => !_.includes(hiddenColumnKeys, _.toString(column?.key)),\n          ) as ColumnType<AnyObject>[]\n        }\n        pagination={{\n          pageSize: tablePaginationOption.pageSize,\n          current: tablePaginationOption.current,\n          total: agent_summary_list?.total_count ?? 0,\n          onChange(current, pageSize) {\n            if (_.isNumber(current) && _.isNumber(pageSize)) {\n              setTablePaginationOption({ current, pageSize });\n            }\n          },\n        }}\n        onChangeOrder={(order) => {\n          setQuery({ order }, 'replaceIn');\n        }}\n        tableSettings={{\n          columnOverrides: columnOverrides,\n          onColumnOverridesChange: setColumnOverrides,\n        }}\n        loading={deferredQueryVariables !== queryVariables}\n        {...tableProps}\n      />\n      <TableColumnsSettingModal\n        open={visibleColumnSettingModal}\n        onRequestClose={(values) => {\n          values?.selectedColumnKeys &&\n            setHiddenColumnKeys(\n              _.difference(\n                columns.map((column) => _.toString(column.key)),\n                values?.selectedColumnKeys,\n              ),\n            );\n          toggleColumnSettingModal();\n        }}\n        columns={columns}\n        hiddenColumnKeys={hiddenColumnKeys}\n      />\n    </BAIFlex>\n  );\n};\n\nexport default AgentSummaryList;\n","import AgentSummaryList from '../components/AgentSummaryList';\nimport { Skeleton, theme } from 'antd';\nimport { BAICard } from 'backend.ai-ui';\nimport React, { Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StringParam, useQueryParam, withDefault } from 'use-query-params';\n\ntype TabKey = 'agent-summary';\n\ninterface ResourcesPageProps {}\n\nconst tabParam = withDefault(StringParam, 'agent-summary');\n\nconst ResourcesPage: React.FC<ResourcesPageProps> = (props) => {\n  const { t } = useTranslation();\n  const [curTabKey, setCurTabKey] = useQueryParam('tab', tabParam, {\n    updateType: 'replace',\n  });\n\n  const { token } = theme.useToken();\n\n  return (\n    <BAICard\n      activeTabKey={curTabKey}\n      onTabChange={(key) => setCurTabKey(key as TabKey)}\n      tabList={[\n        {\n          key: 'agent-summary',\n          tab: t('webui.menu.AgentSummary'),\n        },\n      ]}\n    >\n      {curTabKey === 'agent-summary' ? (\n        // To remove duplicated border in the bordered table, we need to remove margin of the container.\n        <Suspense\n          fallback={\n            <Skeleton\n              active\n              style={{ padding: token.paddingContentVerticalLG }}\n            />\n          }\n        >\n          <AgentSummaryList />\n        </Suspense>\n      ) : null}\n    </BAICard>\n  );\n};\n\nexport default ResourcesPage;\n"],"names":["_ref","_$map","open","onRequestClose","columns","hiddenColumnKeys","modalProps","formRef","useRef","t","useTranslation","token","theme","useToken","columnOptions","_","column","title","label","value","key","element","React","map","props","children","child","undefined","_jsx","BAIModal","destroyOnClose","centered","onOk","_formRef$current","current","validateFields","then","values","catch","onCancel","_jsxs","Form","ref","preserve","initialValues","selectedColumnKeys","filter","columnKey","layout","Item","name","style","marginBottom","Input","prefix","SearchOutlined","marginSM","placeholder","noStyle","shouldUpdate","prev","cur","searchInput","_ref2","getFieldValue","searchKeyword","filteredColumns","columnOption","includes","display","height","overflowY","rules","required","message","Checkbox","Group","options","flexDirection","useHiddenColumnKeysSetting","listName","setHiddenColumnKeys","useBAISettingUserState","node","v0","v1","v2","v3","v4","v5","hash","_agent_summary_list$t","containerStyle","tableProps","mergedResourceSlots","useResourceSlotsDetails","visibleColumnSettingModal","toggle","toggleColumnSettingModal","useToggle","baiPaginationOption","tablePaginationOption","setTablePaginationOption","useBAIPaginationOptionStateOnSearchParam","pageSize","queryParams","setQuery","useQueryParams","order","withDefault","StringParam","status","fetchKey","updateFetchKey","useFetchKey","sftpResourceGroups","useResourceGroupsForCurrentProject","sftpExclusionFilter","length","group","join","queryVariables","useMemo","limit","offset","mergeFilterValues","deferredQueryVariables","useDeferredValue","deferredFetchKey","columnOverrides","setColumnOverrides","agent_summary_list","useLazyLoadQuery","_AgentSummaryListQuery","fetchPolicy","INITIAL_FETCH_KEY","_Fragment","dataIndex","fixed","render","record","BAIFlex","direction","align","Typography","Text","sorter","parsedOccupiedSlots","JSON","parse","occupied_slots","parsedAvailableSlots","available_slots","gap","_mergedResourceSlots$","cpuPercent","cpu","justify","minWidth","ResourceTypeIcon","type","toFixedFloorWithoutTrailingZeros","fontSize","sizeXS","display_unit","BAIProgressWithLabel","percent","strokeColor","colorError","colorSuccess","width","valueLabel","_convertToBinaryUnit$","_convertToBinaryUnit","_convertToBinaryUnit$2","_convertToBinaryUnit2","memPercent","mem","convertToBinaryUnit","numberFixed","_mergedResourceSlots$2","CheckCircleOutlined","color","fontSizeXL","MinusCircleOutlined","colorTextDisabled","wrap","flex","BAIRadioGroup","onChange","e","target","BAIPropertyFilter","filterProperties","propertyLabel","Tooltip","Button","loading","onClick","icon","ReloadOutlined","BAITable","bordered","scroll","x","rowKey","dataSource","filterOutNullAndUndefined","items","showSorterTooltip","pagination","total","total_count","onChangeOrder","tableSettings","onColumnOverridesChange","TableColumnsSettingModal","tabParam","curTabKey","setCurTabKey","useQueryParam","updateType","BAICard","activeTabKey","onTabChange","tabList","tab","Suspense","fallback","Skeleton","active","padding","paddingContentVerticalLG","AgentSummaryList"],"sourceRoot":""}