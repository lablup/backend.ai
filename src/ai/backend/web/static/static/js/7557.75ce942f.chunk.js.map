{"version":3,"file":"static/js/7557.75ce942f.chunk.js","mappings":"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","sources":["components/EnvVarFormList.tsx","components/ImageEnvironmentSelectFormItems.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","components/__generated__/ImageEnvironmentSelectFormItemsQuery.graphql.ts","components/__generated__/VFolderPermissionTag_VFolder.graphql.ts","components/__generated__/VFolderTableProjectQuery.graphql.ts"],"sourcesContent":["import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          !_.isEmpty(variableName) &&\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                    onChange={() => {\n                      const fieldNames = fields.map((field, index) => [\n                        props.name,\n                        index,\n                        'variable',\n                      ]);\n                      form.validateFields(fieldNames);\n                    }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\n                        'session.launcher.EnvironmentVariableValueRequired',\n                      ),\n                    },\n                  ]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input\n                    placeholder=\"Value\"\n                    // onChange={() => {\n                    //   const valueFields = fields.map((field, index) => [\n                    //     props.name,\n                    //     index,\n                    //     'value',\n                    //   ]);\n                    //   form.validateFields(valueFields);\n                    // }}\n                  />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                {t('session.launcher.AddEnvironmentVariable')}\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nexport default EnvVarFormList;\n","import { getImageFullName } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\n// @ts-ignore\nimport cssRaw from './ImageEnvironmentSelectFormItems.css?raw';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  ImageEnvironmentSelectFormItemsQuery,\n  ImageEnvironmentSelectFormItemsQuery$data,\n} from './__generated__/ImageEnvironmentSelectFormItemsQuery.graphql';\nimport { Divider, Form, Input, RefSelectProps, Select, Tag, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport type Image = NonNullable<\n  NonNullable<ImageEnvironmentSelectFormItemsQuery$data>['images']\n>[0];\n\ntype ImageGroup = {\n  groupName: string;\n  environmentGroups: {\n    environmentName: string;\n    displayName: string;\n    prefix?: string;\n    images: Image[];\n  }[];\n};\n\nexport type ImageEnvironmentFormInput = {\n  environments: {\n    environment: string;\n    version: string;\n    image: Image | undefined;\n    manual?: string;\n    customizedTag?: string;\n  };\n};\n\ninterface ImageEnvironmentSelectFormItemsProps {\n  filter?: (image: Image) => boolean;\n  showPrivate?: boolean;\n}\n\nfunction compareVersions(version1: string, version2: string): number {\n  const v1 = version1.split('.').map(Number);\n  const v2 = version2.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const num1 = v1[i] || 0;\n    const num2 = v2[i] || 0;\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nconst isPrivateImage = (image: Image) => {\n  return _.some(image?.labels, (label) => {\n    return (\n      label?.key === 'ai.backend.features' &&\n      label?.value?.split(' ').includes('private')\n    );\n  });\n};\n\nconst ImageEnvironmentSelectFormItems: React.FC<\n  ImageEnvironmentSelectFormItemsProps\n> = ({ filter, showPrivate }) => {\n  const form = Form.useFormInstance<ImageEnvironmentFormInput>();\n  const environments = Form.useWatch('environments', { form, preserve: true });\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [environmentSearch, setEnvironmentSearch] = useState('');\n  const [versionSearch, setVersionSearch] = useState('');\n  const { t } = useTranslation();\n  const [metadata, { getImageMeta }] = useBackendAIImageMetaData();\n  const { token } = theme.useToken();\n  const { isDarkMode } = useThemeMode();\n\n  const envSelectRef = useRef<RefSelectProps>(null);\n  const versionSelectRef = useRef<RefSelectProps>(null);\n\n  const { images } = useLazyLoadQuery<ImageEnvironmentSelectFormItemsQuery>(\n    graphql`\n      query ImageEnvironmentSelectFormItemsQuery($installed: Boolean) {\n        images(is_installed: $installed) {\n          name\n          humanized_name\n          tag\n          registry\n          architecture\n          digest\n          installed\n          resource_limits {\n            key\n            min\n            max\n          }\n          labels {\n            key\n            value\n          }\n        }\n      }\n    `,\n    {\n      installed: true,\n    },\n    {\n      fetchPolicy: 'store-and-network',\n    },\n  );\n\n  // If not initial value, select first value\n  // auto select when relative field is changed\n  useEffect(() => {\n    if (!_.isEmpty(environments?.manual)) {\n      // set undefined fields related to environments when manual is set\n      if (environments.environment || environments.version) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n          },\n        });\n      }\n      return;\n    }\n\n    let matchedEnvironmentByVersion:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    let matchedImageByVersion: Image | undefined;\n    let version = form.getFieldValue('environments')?.version;\n    // FIXME: manually add architecture based on amd64\n    if (version && version.indexOf('@') < 0) {\n      version += '@x86_64';\n    }\n    version &&\n      _.find(imageGroups, (group) => {\n        matchedEnvironmentByVersion = _.find(\n          group.environmentGroups,\n          (environment) => {\n            matchedImageByVersion = _.find(\n              environment.images,\n              (image) => getImageFullName(image) === version,\n            );\n            return !!matchedImageByVersion; // break iteration\n          },\n        );\n        return !!matchedEnvironmentByVersion; // break iteration\n      });\n\n    // if matchedEnvironmentByVersion is not existed, select first values\n    let nextEnvironment: ImageGroup['environmentGroups'][0] | undefined;\n    let nextImage: Image | undefined;\n    if (matchedEnvironmentByVersion) {\n      nextEnvironment = matchedEnvironmentByVersion;\n      nextImage = matchedImageByVersion;\n    } else if (form.getFieldValue(['environments', 'environment'])) {\n      _.find(imageGroups, (group) => {\n        nextEnvironment = _.find(group.environmentGroups, (environment) => {\n          return (\n            environment.environmentName ===\n            form.getFieldValue(['environments', 'environment'])\n          );\n        });\n        nextImage = nextEnvironment?.images[0];\n        return !!nextEnvironment;\n      });\n    }\n\n    if (!nextEnvironment || !nextImage) {\n      nextEnvironment = imageGroups[0]?.environmentGroups[0];\n      nextImage = nextEnvironment?.images[0];\n    }\n\n    const customizedImageTag = _.find(\n      nextImage?.labels,\n      (item) =>\n        item !== null && item?.key === 'ai.backend.customized-image.name',\n    )?.value;\n\n    if (nextImage) {\n      if (\n        !matchedEnvironmentByVersion &&\n        baiClient._config.allow_manual_image_name_for_session &&\n        version\n      ) {\n        form.setFieldsValue({\n          environments: {\n            environment: undefined,\n            version: undefined,\n            image: undefined,\n            manual: version,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      } else {\n        form.setFieldsValue({\n          environments: {\n            environment: nextEnvironment.environmentName,\n            version: getImageFullName(nextImage),\n            image: nextImage,\n            customizedTag: customizedImageTag ?? undefined,\n          },\n        });\n      }\n    } else if (baiClient._config.allow_manual_image_name_for_session) {\n      // if no image is available, only set manual if it's allowed\n      form.setFieldValue(['environments', 'manual'], version);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environments?.version, environments?.manual]); // environments?.environment,\n\n  const imageGroups: ImageGroup[] = useMemo(\n    () =>\n      _.chain(images)\n        .filter((image) => {\n          return (\n            (showPrivate ? true : !isPrivateImage(image)) &&\n            (filter ? filter(image) : true)\n          );\n        })\n        .groupBy((image) => {\n          // group by using `group` property of image info\n          return (\n            metadata?.imageInfo[getImageMeta(getImageFullName(image) || '').key]\n              ?.group || 'Custom Environments'\n          );\n        })\n        .map((images, groupName) => {\n          return {\n            groupName,\n            environmentGroups: _.chain(images)\n              // sub group by using (environment) `name` property of image info\n              .groupBy((image) => {\n                return (\n                  // metadata?.imageInfo[\n                  //   getImageMeta(getImageFullName(image) || \"\").key\n                  // ]?.name || image?.name\n                  image?.registry + '/' + image?.name\n                );\n              })\n              .map((images, environmentName) => {\n                const imageKey = environmentName.split('/')?.[2];\n                const displayName =\n                  imageKey && metadata?.imageInfo[imageKey]?.name;\n\n                return {\n                  environmentName,\n                  displayName:\n                    displayName ||\n                    (_.last(environmentName.split('/')) as string),\n                  prefix: _.chain(environmentName)\n                    .split('/')\n                    .drop(1)\n                    .dropRight(1)\n                    .join('/')\n                    .value(),\n                  images: images.sort((a, b) =>\n                    compareVersions(\n                      // latest version comes first\n                      b?.tag?.split('-')?.[0] ?? '',\n                      a?.tag?.split('-')?.[0] ?? '',\n                    ),\n                  ),\n                };\n              })\n\n              .sortBy((item) => item.displayName)\n              .value(),\n          };\n        })\n        .sortBy((item) => item.groupName)\n        .value(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [images, metadata, filter, showPrivate],\n  );\n\n  // support search image by full name\n  const { fullNameMatchedImage } = useMemo(() => {\n    let fullNameMatchedImage: Image | undefined;\n    let fullNameMatchedImageGroup:\n      | ImageGroup['environmentGroups'][0]\n      | undefined;\n    if (environmentSearch.length) {\n      _.chain(\n        imageGroups\n          .flatMap((group) => group.environmentGroups)\n          .find((envGroup) => {\n            fullNameMatchedImageGroup = envGroup;\n            fullNameMatchedImage = _.find(envGroup.images, (image) => {\n              return getImageFullName(image) === environmentSearch;\n            });\n            return !!fullNameMatchedImage;\n          }),\n      ).value();\n    }\n    return {\n      fullNameMatchedImage,\n      fullNameMatchedImageGroup,\n    };\n  }, [environmentSearch, imageGroups]);\n\n  return (\n    <>\n      <style>{cssRaw}</style>\n      <Form.Item\n        className=\"image-environment-select-form-item\"\n        name={['environments', 'environment']}\n        label={`${t('session.launcher.Environments')} / ${t(\n          'session.launcher.Version',\n        )}`}\n        rules={[{ required: _.isEmpty(environments?.manual) }]}\n        style={{ marginBottom: 10 }}\n      >\n        <Select\n          ref={envSelectRef}\n          showSearch\n          // open={true}\n          // autoClearSearchValue\n          searchValue={environmentSearch}\n          onSearch={setEnvironmentSearch}\n          defaultActiveFirstOption={true}\n          optionFilterProp=\"filterValue\"\n          onChange={(value) => {\n            if (fullNameMatchedImage) {\n              form.setFieldsValue({\n                environments: {\n                  environment: fullNameMatchedImage?.name || '',\n                  version: getImageFullName(fullNameMatchedImage),\n                  image: fullNameMatchedImage,\n                },\n              });\n            }\n            // NOTE: when user set environment only then set the version to the first item\n            else {\n              const firstInListImage: Image = imageGroups\n                .flatMap((group) => group.environmentGroups)\n                .filter((envGroup) => envGroup.environmentName === value)[0]\n                .images[0];\n              form.setFieldsValue({\n                environments: {\n                  environment: firstInListImage?.name || '',\n                  version: getImageFullName(firstInListImage),\n                  image: firstInListImage,\n                },\n              });\n            }\n          }}\n          disabled={\n            baiClient._config.allow_manual_image_name_for_session &&\n            !_.isEmpty(environments?.manual)\n          }\n        >\n          {fullNameMatchedImage ? (\n            <Select.Option\n              value={fullNameMatchedImage?.name}\n              filterValue={getImageFullName(fullNameMatchedImage)}\n            >\n              <Flex\n                direction=\"row\"\n                align=\"center\"\n                gap=\"xs\"\n                style={{ display: 'inline-flex' }}\n              >\n                <ImageMetaIcon\n                  image={getImageFullName(fullNameMatchedImage) || ''}\n                  style={{\n                    width: 15,\n                    height: 15,\n                  }}\n                />\n                {getImageFullName(fullNameMatchedImage)}\n              </Flex>\n            </Select.Option>\n          ) : (\n            _.map(imageGroups, (group) => {\n              return (\n                <Select.OptGroup key={group.groupName} label={group.groupName}>\n                  {_.map(group.environmentGroups, (environmentGroup) => {\n                    const firstImage = environmentGroup.images[0];\n                    const currentMetaImageInfo =\n                      metadata?.imageInfo[\n                        environmentGroup.environmentName.split('/')?.[2]\n                      ];\n\n                    const extraFilterValues: string[] = [];\n                    let environmentPrefixTag = null;\n                    if (\n                      environmentGroup.prefix &&\n                      !['lablup', 'cloud', 'stable'].includes(\n                        environmentGroup.prefix,\n                      )\n                    ) {\n                      extraFilterValues.push(environmentGroup.prefix);\n                      environmentPrefixTag = (\n                        <Tag color=\"purple\">\n                          <TextHighlighter keyword={environmentSearch}>\n                            {environmentGroup.prefix}\n                          </TextHighlighter>\n                        </Tag>\n                      );\n                    }\n\n                    const tagsFromMetaImageInfoLabel = _.map(\n                      currentMetaImageInfo?.label,\n                      (label) => {\n                        if (\n                          _.isUndefined(label.category) &&\n                          label.tag &&\n                          label.color\n                        ) {\n                          extraFilterValues.push(label.tag);\n                          return (\n                            <Tag color={label.color} key={label.tag}>\n                              <TextHighlighter\n                                keyword={environmentSearch}\n                                key={label.tag}\n                              >\n                                {label.tag}\n                              </TextHighlighter>\n                            </Tag>\n                          );\n                        }\n                        return null;\n                      },\n                    );\n                    return (\n                      <Select.Option\n                        key={environmentGroup.environmentName}\n                        value={environmentGroup.environmentName}\n                        filterValue={\n                          environmentGroup.displayName +\n                          '\\t' +\n                          extraFilterValues.join('\\t')\n                        }\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\" align=\"center\" gap=\"xs\">\n                            <ImageMetaIcon\n                              image={getImageFullName(firstImage) || ''}\n                              style={{\n                                width: 15,\n                                height: 15,\n                              }}\n                            />\n                            <TextHighlighter keyword={environmentSearch}>\n                              {environmentGroup.displayName}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            // style={{ flex: 1 }}\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {environmentPrefixTag}\n                            {tagsFromMetaImageInfoLabel}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  })}\n                </Select.OptGroup>\n              );\n            })\n          )}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prev, cur) =>\n          prev.environments?.environment !== cur.environments?.environment\n        }\n      >\n        {({ getFieldValue }) => {\n          let selectedEnvironmentGroup:\n            | ImageGroup['environmentGroups'][0]\n            | undefined;\n          _.find(imageGroups, (group) => {\n            return _.find(group.environmentGroups, (environment) => {\n              if (\n                environment.environmentName ===\n                getFieldValue('environments')?.environment\n              ) {\n                selectedEnvironmentGroup = environment;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          });\n          return (\n            <Form.Item\n              className=\"image-environment-select-form-item\"\n              name={['environments', 'version']}\n              rules={[{ required: _.isEmpty(environments?.manual) }]}\n            >\n              <Select\n                ref={versionSelectRef}\n                onChange={(value) => {\n                  const selectedImage = _.find(images, (image) => {\n                    return getImageFullName(image) === value;\n                  });\n                  form.setFieldValue(['environments', 'image'], selectedImage);\n                }}\n                showSearch\n                searchValue={versionSearch}\n                onSearch={setVersionSearch}\n                // autoClearSearchValue\n                optionFilterProp=\"filterValue\"\n                // optionLabelProp=\"label\"\n                dropdownRender={(menu) => (\n                  <>\n                    <Flex\n                      style={{\n                        fontWeight: token.fontWeightStrong,\n                        paddingLeft: token.paddingSM,\n                      }}\n                    >\n                      {t('session.launcher.Version')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Base')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Architecture')}\n                      <Divider type=\"vertical\" />\n                      {t('session.launcher.Requirements')}\n                    </Flex>\n                    <Divider style={{ margin: '8px 0' }} />\n                    {menu}\n                  </>\n                )}\n                disabled={\n                  baiClient._config.allow_manual_image_name_for_session &&\n                  !_.isEmpty(environments?.manual)\n                }\n              >\n                {_.map(\n                  _.uniqBy(selectedEnvironmentGroup?.images, 'digest'),\n\n                  (image) => {\n                    const [version, tag, ...requirements] = image?.tag?.split(\n                      '-',\n                    ) || ['', '', ''];\n\n                    let tagAlias = metadata?.tagAlias[tag];\n                    if (!tagAlias) {\n                      for (const [key, replaceString] of Object.entries(\n                        metadata?.tagReplace || {},\n                      )) {\n                        const pattern = new RegExp(key);\n                        if (pattern.test(tag)) {\n                          tagAlias = tag?.replace(pattern, replaceString);\n                        }\n                      }\n                      if (!tagAlias) {\n                        tagAlias = tag;\n                      }\n                    }\n\n                    const extraFilterValues: string[] = [];\n                    const requirementTags = _.chain(requirements)\n                      .filter(\n                        (requirement) => !requirement.startsWith('customized_'),\n                      )\n                      .map((requirement, idx) => (\n                        <DoubleTag\n                          key={idx}\n                          values={_.split(\n                            metadata?.tagAlias[requirement] || requirement,\n                            ':',\n                          ).map((str) => {\n                            extraFilterValues.push(str);\n                            return (\n                              <TextHighlighter\n                                keyword={versionSearch}\n                                key={str}\n                              >\n                                {str}\n                              </TextHighlighter>\n                            );\n                          })}\n                        />\n                      ))\n                      .value();\n                    const imageLabels = image?.labels;\n                    if (imageLabels) {\n                      const customizedImageNameLabelIdx = _.findIndex(\n                        imageLabels,\n                        (item) =>\n                          item !== null &&\n                          item?.key === 'ai.backend.customized-image.name',\n                      );\n                      if (\n                        customizedImageNameLabelIdx &&\n                        imageLabels[customizedImageNameLabelIdx]\n                      ) {\n                        const tag =\n                          imageLabels[customizedImageNameLabelIdx]?.value || '';\n                        extraFilterValues.push('Customized');\n                        extraFilterValues.push(tag);\n                        requirementTags.push(\n                          <DoubleTag\n                            key={requirementTags.length + 1}\n                            values={[\n                              {\n                                label: (\n                                  <TextHighlighter\n                                    keyword={versionSearch}\n                                    key=\"Customized\"\n                                  >\n                                    Customized\n                                  </TextHighlighter>\n                                ),\n                                color: 'cyan',\n                              },\n                              {\n                                label: (\n                                  <TextHighlighter\n                                    keyword={versionSearch}\n                                    key={tag}\n                                  >\n                                    {tag}\n                                  </TextHighlighter>\n                                ),\n                                color: 'cyan',\n                              },\n                            ]}\n                          />,\n                        );\n                      }\n                    }\n                    return (\n                      <Select.Option\n                        key={image?.digest}\n                        value={getImageFullName(image)}\n                        filterValue={[\n                          version,\n                          tagAlias,\n                          image?.architecture,\n                          ...extraFilterValues,\n                        ].join('\\t')}\n                      >\n                        <Flex direction=\"row\" justify=\"between\">\n                          <Flex direction=\"row\">\n                            <TextHighlighter keyword={versionSearch}>\n                              {version}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {tagAlias}\n                            </TextHighlighter>\n                            <Divider type=\"vertical\" />\n                            <TextHighlighter keyword={versionSearch}>\n                              {image?.architecture}\n                            </TextHighlighter>\n                          </Flex>\n                          <Flex\n                            direction=\"row\"\n                            // set specific class name to handle flex wrap using css\n                            className={\n                              isDarkMode ? 'tag-wrap-dark' : 'tag-wrap-light'\n                            }\n                            style={{\n                              marginLeft: token.marginXS,\n                              flexShrink: 1,\n                            }}\n                          >\n                            {requirementTags || '-'}\n                          </Flex>\n                        </Flex>\n                      </Select.Option>\n                    );\n                  },\n                )}\n              </Select>\n            </Form.Item>\n          );\n        }}\n      </Form.Item>\n      <Form.Item\n        label={t('session.launcher.ManualImageName')}\n        name={['environments', 'manual']}\n        style={{\n          display: baiClient._config.allow_manual_image_name_for_session\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Input\n          allowClear\n          onChange={(value) => {\n            if (!_.isEmpty(value)) {\n              form.setFieldsValue({\n                environments: {\n                  environment: undefined,\n                  version: undefined,\n                  image: undefined,\n                },\n              });\n            } else {\n            }\n          }}\n        />\n      </Form.Item>\n      <Form.Item noStyle hidden name={['environments', 'image']}>\n        <Input />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ImageEnvironmentSelectFormItems;\n","import DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport { VFolderPermissionTag_VFolder$key } from './__generated__/VFolderPermissionTag_VFolder.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useKeyPairLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport { useShadowRoot } from './DefaultProviders';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport { VFolderTableProjectQuery } from './__generated__/VFolderTableProjectQuery.graphql';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Descriptions,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport graphql from 'babel-plugin-relay/macro';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string | number;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\nexport interface VFolderTableProps extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n  onChangeAutoMountedFolders?: (names: Array<string>) => void;\n  showAutoMountedFoldersSection?: boolean;\n}\n\nexport const vFolderAliasNameRegExp = /^[a-zA-Z0-9_/.-]*$/;\nexport const DEFAULT_ALIAS_BASE_PATH = '/home/work/';\nconst VFolderTable: React.FC<VFolderTableProps> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = DEFAULT_ALIAS_BASE_PATH,\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  onChangeAutoMountedFolders,\n  showAutoMountedFoldersSection,\n  ...tableProps\n}) => {\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableState<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableState<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey, currentProject.id],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      search.set('group_id', currentProject.id);\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?${search.toString()}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 1000,\n  });\n\n  const { domain, group, keypair_resource_policy } =\n    useLazyLoadQuery<VFolderTableProjectQuery>(\n      graphql`\n        query VFolderTableProjectQuery(\n          $domain_name: String!\n          $group_id: UUID!\n          $keypair_resource_policy_name: String!\n        ) {\n          domain(name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          group(id: $group_id, domain_name: $domain_name) {\n            allowed_vfolder_hosts\n          }\n          keypair_resource_policy(name: $keypair_resource_policy_name) {\n            allowed_vfolder_hosts\n          }\n        }\n      `,\n      {\n        domain_name: baiClient._config.domainName,\n        group_id: currentProject.id,\n        keypair_resource_policy_name: keypair?.resource_policy || '',\n      },\n      {\n        fetchPolicy: 'store-and-network',\n        fetchKey: fetchKey,\n      },\n    );\n\n  const filteredFolderListByPermission = useMemo(() => {\n    const allowedVFolderHostsByDomain = JSON.parse(\n      domain?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByGroup = JSON.parse(\n      group?.allowed_vfolder_hosts || '{}',\n    );\n    const allowedVFolderHostsByKeypairResourcePolicy = JSON.parse(\n      keypair_resource_policy?.allowed_vfolder_hosts || '{}',\n    );\n\n    const mergedVFolderPermissions = _.merge(\n      allowedVFolderHostsByDomain,\n      allowedVFolderHostsByGroup,\n      allowedVFolderHostsByKeypairResourcePolicy,\n    );\n    // only allow mount if volume permission has 'mount-in-session'\n    const mountAllowedVolumes = Object.keys(mergedVFolderPermissions).filter(\n      (volume) => mergedVFolderPermissions[volume].includes('mount-in-session'),\n    );\n    // Need to filter allFolderList from allowed vfolder\n    return allFolderList?.filter((folder) =>\n      mountAllowedVolumes.includes(folder.host),\n    );\n  }, [domain, group, keypair_resource_policy, allFolderList]);\n\n  const autoMountedFolderNamesByPermission = useMemo(\n    () =>\n      _.chain(filteredFolderListByPermission)\n        .filter((vf) => vf.status === 'ready' && vf.name?.startsWith('.'))\n        .map((vf) => vf.name)\n        .value(),\n    [filteredFolderListByPermission],\n  );\n\n  useEffect(() => {\n    _.isFunction(onChangeAutoMountedFolders) &&\n      onChangeAutoMountedFolders(autoMountedFolderNamesByPermission);\n    // Do not need to run when `autoMountedFolderNames` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoMountedFolderNamesByPermission]);\n\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.chain(filteredFolderListByPermission)\n    .filter((vf) => (filter ? filter(vf) : true))\n    .filter((vf) => {\n      if (selectedRowKeys.includes(getRowKey(vf))) {\n        return true;\n      }\n      return !searchKey || vf.name.includes(searchKey);\n    })\n    .value();\n\n  /**\n   * Converts the input path to an aliased path based on the provided name and input.\n   * If the input is empty, it appends the name to the alias base path.\n   * If the input starts with '/', it returns the input as is.\n   * Otherwise, it appends the input to the alias base path.\n   *\n   * @param name - The name of the VFolderKey.\n   * @param input - The input path to be converted.\n   * @returns The aliased path based on the name and input.\n   */\n  const inputToAliasPath = useEventNotStable(\n    (name: VFolderKey, input?: string) => {\n      if (_.isEmpty(input)) {\n        return `${aliasBasePath}${name}`;\n      } else if (input?.startsWith('/')) {\n        return input;\n      } else {\n        return `${aliasBasePath}${input}`;\n      }\n    },\n  );\n\n  const handleAliasUpdate = useEventNotStable(() => {\n    setAliasMap(\n      _.mapValues(\n        _.pickBy(internalForm.getFieldsValue(), (v) => !!v), //remove empty\n        (v, k) => inputToAliasPath(k, v), // add alias base path\n      ),\n    );\n    internalForm.validateFields().catch(() => {});\n  });\n\n  useEffect(() => {\n    handleAliasUpdate();\n    // `selectedRowKeys` can be changed by parents at any time, so we need to check whether `selectedRowKeys` has changed using JSON.stringify\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(selectedRowKeys), handleAliasUpdate]);\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : {\n                    maxWidth: 200,\n                  }\n            }\n          >\n            <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || inputToAliasPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: vFolderAliasNameRegExp,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    inputToAliasPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            const aliasPath = inputToAliasPath(\n                              getRowKey(record),\n                              value,\n                            );\n                            if (\n                              value &&\n                              _.map(\n                                autoMountedFolderNamesByPermission,\n                                // `n` is the name of the auto mounted folder. It cannot be empty.\n                                (n) => inputToAliasPath('', n),\n                              ).includes(aliasPath)\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.FolderAliasOverlappingToAutoMount',\n                                ),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={inputToAliasPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        allowClear\n                        onChange={() => {\n                          handleAliasUpdate();\n                        }}\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Button\n          loading={isPendingRefetch}\n          icon={<ReloadOutlined />}\n          onClick={() => {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Form form={internalForm} component={false}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n      {showAutoMountedFoldersSection &&\n      autoMountedFolderNamesByPermission.length > 0 ? (\n        <>\n          <Descriptions size=\"small\">\n            <Descriptions.Item label={t('data.AutomountFolders')}>\n              {_.map(autoMountedFolderNamesByPermission, (name) => {\n                return <Tag key={name}>{name}</Tag>;\n              })}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ) : null}\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import { VFolder } from './VFolderSelect';\nimport VFolderTable, {\n  AliasMap,\n  DEFAULT_ALIAS_BASE_PATH,\n  VFolderTableProps,\n  vFolderAliasNameRegExp,\n} from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFormItemProps extends Omit<FormItemProps, 'name'> {\n  filter?: VFolderTableProps['filter'];\n  rowKey?: keyof VFolder;\n  tableProps?: Partial<VFolderTableProps>;\n}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n}\n\nconst VFolderTableFormItem: React.FC<VFolderTableFormItemProps> = ({\n  filter,\n  rowKey = 'name',\n  tableProps,\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  Form.useWatch('vfoldersAliasMap', form);\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              if (_.some(arr, (alias) => !vFolderAliasNameRegExp.test(alias))) {\n                return Promise.reject(t('session.launcher.FolderAliasInvalid'));\n              }\n\n              if (\n                _.some(\n                  form.getFieldValue('autoMountedFolderNames'),\n                  (autoName) =>\n                    arr.includes(DEFAULT_ALIAS_BASE_PATH + autoName),\n                )\n              ) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlappingToAutoMount'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item hidden name=\"autoMountedFolderNames\" />\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey={rowKey}\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n          filter={filter}\n          showAutoMountedFoldersSection\n          onChangeAutoMountedFolders={(names) => {\n            form.setFieldValue('autoMountedFolderNames', names);\n          }}\n          {...tableProps}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFormItem;\n","/**\n * @generated SignedSource<<eb85d3c5b8be4b647315f0e92797a0ce>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ImageEnvironmentSelectFormItemsQuery$variables = {\n  installed?: boolean | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery$data = {\n  readonly images: ReadonlyArray<{\n    readonly architecture: string | null | undefined;\n    readonly digest: string | null | undefined;\n    readonly humanized_name: string | null | undefined;\n    readonly installed: boolean | null | undefined;\n    readonly labels: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly value: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly name: string | null | undefined;\n    readonly registry: string | null | undefined;\n    readonly resource_limits: ReadonlyArray<{\n      readonly key: string | null | undefined;\n      readonly max: string | null | undefined;\n      readonly min: string | null | undefined;\n    } | null | undefined> | null | undefined;\n    readonly tag: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ImageEnvironmentSelectFormItemsQuery = {\n  response: ImageEnvironmentSelectFormItemsQuery$data;\n  variables: ImageEnvironmentSelectFormItemsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"installed\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"key\",\n  \"storageKey\": null\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"is_installed\",\n        \"variableName\": \"installed\"\n      }\n    ],\n    \"concreteType\": \"Image\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"images\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"humanized_name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"tag\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"registry\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"architecture\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"digest\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"installed\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ResourceLimit\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"resource_limits\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"min\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"max\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"KVPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"labels\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"value\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ea71f4a3948d4742dd6bb11ef80a8300\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ImageEnvironmentSelectFormItemsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ImageEnvironmentSelectFormItemsQuery(\\n  $installed: Boolean\\n) {\\n  images(is_installed: $installed) {\\n    name\\n    humanized_name\\n    tag\\n    registry\\n    architecture\\n    digest\\n    installed\\n    resource_limits {\\n      key\\n      min\\n      max\\n    }\\n    labels {\\n      key\\n      value\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"33367bd6e1532b42b61629ef9d3dc46b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<a6063364be2bb8e0d0d7ede25c023b08>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null | undefined;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2f1d42e18d07f2a8dbef6f6bf28f54f9>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type VFolderTableProjectQuery$variables = {\n  domain_name: string;\n  group_id: string;\n  keypair_resource_policy_name: string;\n};\nexport type VFolderTableProjectQuery$data = {\n  readonly domain: {\n    readonly allowed_vfolder_hosts: any | null | undefined;\n  } | null | undefined;\n  readonly group: {\n    readonly allowed_vfolder_hosts: any | null | undefined;\n  } | null | undefined;\n  readonly keypair_resource_policy: {\n    readonly allowed_vfolder_hosts: any | null | undefined;\n  } | null | undefined;\n};\nexport type VFolderTableProjectQuery = {\n  response: VFolderTableProjectQuery$data;\n  variables: VFolderTableProjectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"domain_name\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"group_id\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"keypair_resource_policy_name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"allowed_vfolder_hosts\",\n    \"storageKey\": null\n  }\n],\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"domain_name\"\n      }\n    ],\n    \"concreteType\": \"Domain\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"domain\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"domain_name\",\n        \"variableName\": \"domain_name\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"id\",\n        \"variableName\": \"group_id\"\n      }\n    ],\n    \"concreteType\": \"Group\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"group\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"keypair_resource_policy_name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": (v1/*: any*/),\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"VFolderTableProjectQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"2c2ce905afd89e93c6d761f22ed59f3d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"VFolderTableProjectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query VFolderTableProjectQuery(\\n  $domain_name: String!\\n  $group_id: UUID!\\n  $keypair_resource_policy_name: String!\\n) {\\n  domain(name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  group(id: $group_id, domain_name: $domain_name) {\\n    allowed_vfolder_hosts\\n  }\\n  keypair_resource_policy(name: $keypair_resource_policy_name) {\\n    allowed_vfolder_hosts\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ccdbaa52a63c2ea005423e7c541eff80\";\n\nexport default node;\n"],"names":["_ref","formItemProps","props","inputRef","useRef","t","useTranslation","form","Form","useFormInstance","_jsx","List","children","fields","_ref2","add","remove","_jsxs","Flex","direction","gap","align","map","_ref3","index","key","name","restField","Item","style","marginBottom","flex","rules","required","message","pattern","_ref4","getFieldValue","validator","rule","variableName","variableNames","_","i","variable","length","Promise","reject","resolve","Input","ref","placeholder","onChange","fieldNames","field","validateFields","validateTrigger","MinusCircleOutlined","onClick","noStyle","Button","type","setTimeout","current","focus","icon","PlusOutlined","block","filter","showPrivate","environments","useWatch","preserve","baiClient","useSuspendedBackendaiClient","environmentSearch","setEnvironmentSearch","useState","versionSearch","setVersionSearch","metadata","getImageMeta","useBackendAIImageMetaData","token","theme","useToken","isDarkMode","useThemeMode","envSelectRef","versionSelectRef","images","useLazyLoadQuery","_ImageEnvironmentSelectFormItemsQuery","require","installed","fetchPolicy","useEffect","_form$getFieldValue","_$find","_nextImage","manual","environment","version","setFieldsValue","undefined","image","matchedEnvironmentByVersion","matchedImageByVersion","nextEnvironment","nextImage","_imageGroups$","_nextEnvironment2","indexOf","imageGroups","group","environmentGroups","getImageFullName","_nextEnvironment","environmentName","customizedImageTag","labels","item","value","_config","allow_manual_image_name_for_session","customizedTag","setFieldValue","useMemo","label","_label$value","split","includes","isPrivateImage","groupBy","_metadata$imageInfo$g","imageInfo","groupName","registry","_environmentName$spli","_metadata$imageInfo$i","imageKey","displayName","prefix","drop","dropRight","join","sort","a","b","_b$tag$split$","_b$tag","_b$tag$split","_a$tag$split$","_a$tag","_a$tag$split","version1","version2","v1","Number","v2","Math","max","num1","num2","compareVersions","tag","sortBy","fullNameMatchedImage","fullNameMatchedImageGroup","flatMap","find","envGroup","_Fragment","className","concat","Select","showSearch","searchValue","onSearch","defaultActiveFirstOption","optionFilterProp","firstInListImage","disabled","Option","filterValue","display","ImageMetaIcon","width","height","OptGroup","environmentGroup","_environmentGroup$env","firstImage","currentMetaImageInfo","extraFilterValues","environmentPrefixTag","push","Tag","color","TextHighlighter","keyword","tagsFromMetaImageInfoLabel","category","justify","marginLeft","marginXS","flexShrink","shouldUpdate","prev","cur","_prev$environments","_cur$environments","_selectedEnvironmentG","selectedEnvironmentGroup","_getFieldValue","selectedImage","dropdownRender","menu","fontWeight","fontWeightStrong","paddingLeft","paddingSM","Divider","margin","_image$tag","requirements","tagAlias","replaceString","Object","entries","tagReplace","RegExp","test","replace","requirementTags","requirement","startsWith","idx","DoubleTag","values","str","imageLabels","customizedImageNameLabelIdx","_imageLabels$customiz","architecture","digest","allowClear","hidden","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","tagValues","r","w","d","perm","hasPermission","toUpperCase","compact","vFolderAliasNameRegExp","DEFAULT_ALIAS_BASE_PATH","showAliasInput","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","aliasBasePath","aliasMap","controlledAliasMap","onChangeAliasMap","rowKey","onChangeAutoMountedFolders","showAutoMountedFoldersSection","tableProps","getRowKey","React","record","setSelectedRowKeys","useControllableState","defaultValue","setAliasMap","keypair","useKeyPairLazyLoadQuery","accessKey","internalForm","useForm","v","slice","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","fetchKey","updateFetchKey","useUpdatableState","isPendingRefetch","startRefetchTransition","useTransition","data","allFolderList","useTanQuery","queryKey","id","queryFn","search","URLSearchParams","set","method","url","toString","staleTime","domain","keypair_resource_policy","_VFolderTableProjectQuery","domain_name","domainName","group_id","keypair_resource_policy_name","resource_policy","filteredFolderListByPermission","allowedVFolderHostsByDomain","JSON","parse","allowed_vfolder_hosts","allowedVFolderHostsByGroup","allowedVFolderHostsByKeypairResourcePolicy","mergedVFolderPermissions","mountAllowedVolumes","keys","volume","folder","host","autoMountedFolderNamesByPermission","vf","_vf$name","status","searchKey","setSearchKey","displayingFolders","inputToAliasPath","useEventNotStable","input","handleAliasUpdate","getFieldsValue","k","catch","stringify","shadowRoot","useShadowRoot","columns","title","Typography","Text","Tooltip","Trans","i18nKey","getPopupContainer","QuestionCircleOutlined","dataIndex","sorter","localeCompare","render","isCurrentRowSelected","maxWidth","allAliasPathMap","reduce","result","async","path","aliasPath","n","extra","e","stopPropagation","usage_mode","UserOutlined","group_name","row","VFolderPermissionTag","created_at","dayjs","format","target","loading","ReloadOutlined","component","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","Descriptions","size","arr","alias","autoName","valuePropName","trigger","VFolderTable","pagination","names","node","v0","hash"],"sourceRoot":""}