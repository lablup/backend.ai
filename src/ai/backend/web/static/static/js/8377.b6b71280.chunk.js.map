{"version":3,"file":"static/js/8377.b6b71280.chunk.js","mappings":"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","sources":["components/BAIProgressWithLabel.tsx","components/SessionListColums/__generated__/SessionInfoCellFragment.graphql.ts","components/__generated__/SessionListQuery.graphql.ts","components/ResourceGroupSelect.tsx","components/AvailableResourcesCard.tsx","components/SessionListColums/SessionInfoCell.tsx","components/SessionList.tsx","pages/SessionListPage.tsx"],"sourcesContent":["import Flex from './Flex';\nimport { Typography, theme } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface BAIProgressWithLabelProps {\n  title?: React.ReactNode;\n  valueLabel?: React.ReactNode;\n  percent?: number;\n  width?: React.CSSProperties['width'];\n  strokeColor?: string;\n  labelStyle?: React.CSSProperties;\n  size?: 'small' | 'middle' | 'large';\n}\nconst BAIProgressWithLabel: React.FC<BAIProgressWithLabelProps> = ({\n  title,\n  valueLabel,\n  percent = 0,\n  width,\n  strokeColor,\n  labelStyle,\n  size = 'small',\n}) => {\n  const { token } = theme.useToken();\n\n  const fontSize =\n    size === 'small'\n      ? token.fontSizeSM\n      : size === 'middle'\n        ? token.fontSize\n        : token.fontSizeLG;\n  return (\n    <Flex\n      style={{\n        padding: 1,\n        border: `1px solid ${token.colorBorder}`,\n        borderRadius: 3,\n        backgroundColor: token.colorBgContainerDisabled,\n        ...(_.isNumber(width) || _.isString(width)\n          ? { width: width }\n          : { flex: 1 }),\n      }}\n      direction=\"column\"\n      align=\"stretch\"\n    >\n      <Flex\n        style={{\n          height: '100%',\n          width: `${percent > 100 ? 100 : percent}%`,\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          backgroundColor: strokeColor ?? token.colorSuccess,\n          opacity: 0.7,\n          zIndex: 0,\n          overflow: 'hidden',\n        }}\n      ></Flex>\n      <Flex direction=\"row\" justify=\"between\">\n        <Typography.Text style={{ fontSize, ...labelStyle }}>\n          {title}\n        </Typography.Text>\n        <Typography.Text style={{ fontSize, ...labelStyle }}>\n          {valueLabel}\n        </Typography.Text>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default BAIProgressWithLabel;\n","/**\n * @generated SignedSource<<d8e992cf5bba499f723933a86f4eaabc>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionInfoCellFragment$data = {\n  readonly id: string | null | undefined;\n  readonly image: string | null | undefined;\n  readonly name: string | null | undefined;\n  readonly session_id: string | null | undefined;\n  readonly status: string | null | undefined;\n  readonly user_email: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionInfoCellFragment\";\n};\nexport type SessionInfoCellFragment$key = {\n  readonly \" $data\"?: SessionInfoCellFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionInfoCellFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionInfoCellFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"session_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"user_email\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"image\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSession\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"93f8cd0d4b47d24ea281955be0ad792b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<7f325fa51024af0f2b35bf9df5e1a1a1>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionListQuery$variables = {\n  ak?: string | null | undefined;\n  group_id?: string | null | undefined;\n  limit: number;\n  offset: number;\n  skipClusterSize: boolean;\n  status?: string | null | undefined;\n};\nexport type SessionListQuery$data = {\n  readonly compute_session_list: {\n    readonly items: ReadonlyArray<{\n      readonly access_key: string | null | undefined;\n      readonly agents: ReadonlyArray<string | null | undefined> | null | undefined;\n      readonly architecture: string | null | undefined;\n      readonly cluster_size: number | null | undefined;\n      readonly created_at: string | null | undefined;\n      readonly id: string | null | undefined;\n      readonly image: string | null | undefined;\n      readonly mounts: ReadonlyArray<string | null | undefined> | null | undefined;\n      readonly name: string | null | undefined;\n      readonly occupied_slots: any | null | undefined;\n      readonly resource_opts: any | null | undefined;\n      readonly scaling_group: string | null | undefined;\n      readonly service_ports: any | null | undefined;\n      readonly session_id: string | null | undefined;\n      readonly starts_at: string | null | undefined;\n      readonly status: string | null | undefined;\n      readonly status_info: string | null | undefined;\n      readonly terminated_at: string | null | undefined;\n      readonly type: string | null | undefined;\n      readonly \" $fragmentSpreads\": FragmentRefs<\"SessionInfoCellFragment\">;\n    } | null | undefined>;\n  } | null | undefined;\n};\nexport type SessionListQuery = {\n  response: SessionListQuery$data;\n  variables: SessionListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"ak\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"group_id\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"skipClusterSize\"\n},\nv5 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv6 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"access_key\",\n    \"variableName\": \"ak\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"group_id\",\n    \"variableName\": \"group_id\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"limit\",\n    \"variableName\": \"limit\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"offset\",\n    \"variableName\": \"offset\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"status\",\n    \"variableName\": \"status\"\n  }\n],\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"type\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"session_id\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"created_at\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"terminated_at\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status_info\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"service_ports\",\n  \"storageKey\": null\n},\nv18 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mounts\",\n  \"storageKey\": null\n},\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"occupied_slots\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"resource_opts\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"starts_at\",\n  \"storageKey\": null\n},\nv23 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"scaling_group\",\n  \"storageKey\": null\n},\nv24 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"agents\",\n  \"storageKey\": null\n},\nv25 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"cluster_size\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/),\n      (v5/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v6/*: any*/),\n        \"concreteType\": \"ComputeSessionList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSession\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/),\n              (v23/*: any*/),\n              (v24/*: any*/),\n              (v25/*: any*/),\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"SessionInfoCellFragment\"\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v5/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"SessionListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v6/*: any*/),\n        \"concreteType\": \"ComputeSessionList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSession\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/),\n              (v23/*: any*/),\n              (v24/*: any*/),\n              (v25/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"user_email\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"83e3fabcd47538a643850d50617579a5\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionListQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $ak: String\\n  $group_id: String\\n  $status: String\\n  $skipClusterSize: Boolean!\\n) {\\n  compute_session_list(limit: $limit, offset: $offset, access_key: $ak, group_id: $group_id, status: $status) {\\n    items {\\n      id\\n      type\\n      session_id\\n      name\\n      image\\n      architecture\\n      created_at\\n      terminated_at\\n      status\\n      status_info\\n      service_ports\\n      mounts\\n      occupied_slots\\n      resource_opts\\n      access_key\\n      starts_at\\n      scaling_group\\n      agents\\n      cluster_size @skipOnClient(if: $skipClusterSize)\\n      ...SessionInfoCellFragment\\n    }\\n  }\\n}\\n\\nfragment SessionInfoCellFragment on ComputeSession {\\n  id\\n  session_id\\n  name\\n  status\\n  user_email\\n  image\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"b0859dbf2946abcb56ec83ac42d76781\";\n\nexport default node;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport TextHighlighter from './TextHighlighter';\nimport { Select, SelectProps } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useTransition } from 'react';\n\ninterface ResourceGroupSelectProps extends SelectProps {\n  projectId?: string;\n  autoSelectDefault?: boolean;\n  filter?: (projectName: string) => boolean;\n}\n\nconst ResourceGroupSelect: React.FC<ResourceGroupSelectProps> = ({\n  projectId,\n  autoSelectDefault,\n  filter,\n  searchValue,\n  onSearch,\n  loading,\n  ...selectProps\n}) => {\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [controllableSearchValue, setControllableSearchValue] =\n    useControllableState<string>({\n      value: searchValue,\n      onChange: onSearch,\n    });\n\n  const [controllableValue, setControllableValue] =\n    useControllableState(selectProps);\n\n  const [isPendingLoading, startLoadingTransition] = useTransition();\n  const { data: resourceGroupSelectQueryResult } = useSuspenseTanQuery<\n    [\n      {\n        scaling_groups: {\n          name: string;\n        }[];\n      },\n      {\n        allowed: string[];\n        default: string;\n        volume_info: {\n          [key: string]: {\n            backend: string;\n            capabilities: string[];\n            usage: {\n              percentage: number;\n            };\n            sftp_scaling_groups?: string[];\n          };\n        };\n      },\n    ]\n  >({\n    queryKey: ['ResourceGroupSelectQuery', currentProject.name],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      search.set('group', currentProject.name);\n      return Promise.all([\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/scaling-groups?${search.toString()}`,\n        }),\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/folders/_/hosts`,\n        }),\n      ]);\n    },\n    staleTime: 0,\n    fetchKey: fetchKey,\n  });\n\n  const sftpResourceGroups = _.flatMap(\n    resourceGroupSelectQueryResult?.[1].volume_info,\n    (item) => item?.sftp_scaling_groups ?? [],\n  );\n\n  const resourceGroups = _.filter(\n    resourceGroupSelectQueryResult?.[0].scaling_groups,\n    (item) => {\n      if (_.includes(sftpResourceGroups, item.name)) {\n        return false;\n      }\n      if (filter) {\n        return filter(item.name);\n      }\n      return true;\n    },\n  );\n\n  useEffect(() => {\n    if (\n      controllableValue &&\n      !_.some(resourceGroups, (item) => item.name === controllableValue)\n    ) {\n      setControllableValue(undefined);\n    }\n  }, [resourceGroups, controllableValue, setControllableValue]);\n  const autoSelectedResourceGroup =\n    _.find(resourceGroups, (item) => item.name === 'default') ||\n    resourceGroups[0];\n  const autoSelectedOption = autoSelectedResourceGroup\n    ? {\n        label: autoSelectedResourceGroup.name,\n        value: autoSelectedResourceGroup.name,\n      }\n    : undefined;\n\n  useEffect(() => {\n    if (\n      autoSelectDefault &&\n      autoSelectedOption &&\n      autoSelectedOption.value !== selectProps.value\n    ) {\n      setControllableValue(autoSelectedOption.value, autoSelectedOption);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoSelectDefault]);\n\n  const searchProps: Pick<\n    SelectProps,\n    'onSearch' | 'searchValue' | 'showSearch'\n  > = selectProps.showSearch\n    ? {\n        onSearch: setControllableSearchValue,\n        searchValue: controllableSearchValue,\n        showSearch: true,\n      }\n    : {};\n\n  return (\n    <Select\n      defaultActiveFirstOption\n      {...searchProps}\n      defaultValue={autoSelectDefault ? autoSelectedOption : undefined}\n      onDropdownVisibleChange={(open) => {\n        if (open) {\n          startLoadingTransition(() => {\n            updateFetchKey();\n          });\n        }\n      }}\n      loading={isPendingLoading || loading}\n      options={_.map(resourceGroups, (resourceGroup) => {\n        return { value: resourceGroup.name, label: resourceGroup.name };\n      })}\n      optionRender={(option) => {\n        return (\n          <TextHighlighter keyword={controllableSearchValue}>\n            {option.data.value?.toString()}\n          </TextHighlighter>\n        );\n      }}\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValue}\n    />\n  );\n};\n\nexport default ResourceGroupSelect;\n","import { iSizeToSize } from '../helper';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useResourceLimitAndRemaining } from '../hooks/useResourceLimitAndRemaining';\nimport BAIProgressWithLabel from './BAIProgressWithLabel';\nimport Flex from './Flex';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { QuestionCircleOutlined, ReloadOutlined } from '@ant-design/icons';\nimport { Button, Card, Tooltip } from 'antd';\nimport React, { useDeferredValue, useState } from 'react';\n\nconst AvailableResourcesCard = () => {\n  const currentProject = useCurrentProjectValue();\n  const [selectedResourceGroup, setSelectedResourceGroup] = useState();\n  const deferredSelectedResourceGroup = useDeferredValue(selectedResourceGroup);\n  const [{ remaining, resourceLimits, resourceGroupResourceSize }] =\n    useResourceLimitAndRemaining({\n      currentProjectName: currentProject.name,\n      currentResourceGroup: deferredSelectedResourceGroup || 'default',\n    });\n\n  console.log(typeof remaining.mem, remaining.mem);\n  return (\n    <Card\n      title={\n        <Flex direction=\"row\" gap={'xs'}>\n          <ResourceGroupSelect\n            showSearch\n            autoSelectDefault\n            style={{ minWidth: 100 }}\n            value={selectedResourceGroup}\n            onChange={(v) => setSelectedResourceGroup(v)}\n            loading={selectedResourceGroup !== deferredSelectedResourceGroup}\n            popupMatchSelectWidth={false}\n          />{' '}\n          리소스 그룹 사용 가능한 자원\n          <Tooltip\n            title={\n              '선택한 리소스 그룹에서 현재 사용자가 지금 바로 사용가능한 리소스 양으로 현재 사용자에게 적용되는 리소스 정책과 리소스 그룹의 가용양에 따라 결정됩니다.'\n            }\n          >\n            <QuestionCircleOutlined />\n          </Tooltip>\n        </Flex>\n      }\n      extra={[<Button icon={<ReloadOutlined />} type=\"text\" />]}\n    >\n      <Flex gap={'md'}>\n        <BAIProgressWithLabel\n          title=\"CPU\"\n          percent={\n            (remaining.cpu /\n              // @ts-ignore\n              (resourceLimits.cpu\n                ? resourceLimits.cpu.max\n                : resourceGroupResourceSize.cpu)) *\n            100\n          }\n          valueLabel={remaining.cpu + ' Core'}\n        />\n        <BAIProgressWithLabel\n          title=\"MEM\"\n          percent={\n            ((iSizeToSize(remaining.mem + '', 'm')?.number || 0) /\n              (iSizeToSize(resourceLimits.mem?.max + '', 'm')?.number || 1)) *\n            100\n          }\n          valueLabel={\n            iSizeToSize(remaining.mem + '', 'g', 2)?.numberFixed + ' GiB'\n          }\n        />\n      </Flex>\n    </Card>\n  );\n};\n\nexport default AvailableResourcesCard;\n","import {\n  // useBackendaiImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../../hooks';\nimport { useTanMutation } from '../../hooks/reactQueryAlias';\nimport Flex from '../Flex';\nimport { SessionInfoCellFragment$key } from './__generated__/SessionInfoCellFragment.graphql';\nimport { EditOutlined } from '@ant-design/icons';\nimport { Button, Form, FormInstance, Input, Typography, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\nconst isRunningStatus = (status: string = '') => {\n  return [\n    'RUNNING',\n    'RESTARTING',\n    'TERMINATING',\n    'PENDING',\n    'SCHEDULED',\n    'PREPARING',\n    'PULLING',\n  ].includes(status);\n};\n\nconst isPreparing = (status: string = '') => {\n  return ['RESTARTING', 'PREPARING', 'PULLING'].includes(status);\n};\n\nconst SessionInfoCell: React.FC<{\n  sessionFrgmt: SessionInfoCellFragment$key;\n  sessionNameList: string[];\n  onRename?: () => void;\n}> = ({ sessionFrgmt, sessionNameList, onRename }) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const session = useFragment(\n    graphql`\n      fragment SessionInfoCellFragment on ComputeSession {\n        id\n        session_id\n        name\n        status\n        user_email\n        image\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  // const metadata = useBackendaiImageMetaData();\n\n  const mutation = useTanMutation({\n    mutationFn: (newName: string) => {\n      const sessionId =\n        baiClient.APIMajorVersion < 5 ? session.name : session.session_id;\n      return baiClient.rename(sessionId, newName);\n    },\n  });\n\n  const formRef = useRef<FormInstance>(null);\n  const { t } = useTranslation();\n\n  const [editing, setEditing] = useState(false);\n  const [optimisticName, setOptimisticName] = useState(session.name);\n  const editable =\n    isRunningStatus(session.status || undefined) &&\n    !isPreparing(session.status || undefined) &&\n    baiClient.email === session.user_email;\n\n  const save = () => {\n    formRef.current\n      ?.validateFields()\n      .then(({ name }) => {\n        setEditing(false);\n        if (session.name === name) return;\n        setOptimisticName(name);\n        mutation.mutate(name, {\n          onSuccess: (result) => {\n            onRename && onRename();\n          },\n          onError: (error) => {\n            setOptimisticName(session.name);\n          },\n        });\n      })\n      .catch(() => {});\n  };\n\n  const isPendingRename = mutation.isPending || optimisticName !== session.name;\n\n  // sessions[objectKey].icon = this._getKernelIcon(session.image);\n  //         sessions[objectKey].sessionTags = this._getKernelInfo(session.image);\n  return (\n    <Form ref={formRef}>\n      {editing ? (\n        <Form.Item\n          style={{ margin: 0 }}\n          name={'name'}\n          rules={[\n            {\n              required: true,\n            },\n            {\n              max: 64,\n            },\n            {\n              pattern: /^(?:[a-zA-Z0-9][-a-zA-Z0-9._]{2,}[a-zA-Z0-9])?$/,\n              message: t('session.Validation.EnterValidSessionName'),\n            },\n            () => ({\n              validator(form, value) {\n                if (\n                  _.without(sessionNameList, session.name).includes(\n                    String(value),\n                  )\n                ) {\n                  return Promise.reject(\n                    new Error(t('session.Validation.SessionNameAlreadyExist')),\n                  );\n                }\n                return Promise.resolve();\n              },\n            }),\n          ]}\n        >\n          <Input\n            autoFocus\n            onPressEnter={() => save()}\n            onKeyUp={(e) => {\n              if (e.key === 'Escape') setEditing(false);\n            }}\n          />\n        </Form.Item>\n      ) : (\n        <Flex style={{ maxWidth: 250 }}>\n          <Typography.Text\n            ellipsis={{\n              tooltip: { overlayInnerStyle: { width: 'max-content' } },\n            }}\n            style={{ opacity: isPendingRename ? 0.5 : 1 }}\n          >\n            {optimisticName}\n          </Typography.Text>\n          {editable && (\n            <Button\n              loading={isPendingRename}\n              type=\"text\"\n              icon={<EditOutlined />}\n              style={{ color: token.colorLink }}\n              onClick={() => {\n                formRef.current?.setFieldsValue({\n                  name: session.name,\n                });\n                setEditing(true);\n              }}\n            ></Button>\n          )}\n        </Flex>\n      )}\n    </Form>\n  );\n};\n\nexport default SessionInfoCell;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useBackendAIImageMetaData } from '../hooks';\nimport BAIIntervalText from './BAIIntervalText';\nimport DoubleTag from './DoubleTag';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport ResourceNumber from './ResourceNumber';\nimport SessionInfoCell from './SessionListColums/SessionInfoCell';\nimport { SessionListQuery } from './__generated__/SessionListQuery.graphql';\nimport { FolderOutlined, GroupOutlined } from '@ant-design/icons';\nimport { Table, TableProps, Tag, Typography, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useDeferredValue } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Session = NonNullable<\n  SessionListQuery['response']['compute_session_list']\n>['items'][0];\ninterface SessionListProps extends Omit<TableProps<any>, 'dataSource'> {\n  status?: string[];\n  limit?: number;\n  currentPage?: number;\n  pageSize?: number;\n  projectId?: string;\n  filter: (item: Session) => boolean;\n  extraFetchKey?: string;\n}\n\nconst SessionList: React.FC<SessionListProps> = ({\n  status = [],\n  limit = 50,\n  currentPage = 1,\n  pageSize = 50,\n  projectId,\n  filter,\n  extraFetchKey = '',\n  ...tableProps\n}) => {\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('initial-fetch');\n  const deferredMergedFetchKey = useDeferredValue(fetchKey + extraFetchKey);\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [, { getImageAliasName, getBaseVersion, getBaseImage }] =\n    useBackendAIImageMetaData();\n\n  if (\n    !baiClient.supports('avoid-hol-blocking') &&\n    status.includes('SCHEDULED')\n  ) {\n    status = status.filter((e) => e !== 'SCHEDULED');\n  }\n\n  const { compute_session_list } = useLazyLoadQuery<SessionListQuery>(\n    graphql`\n      query SessionListQuery(\n        $limit: Int!\n        $offset: Int!\n        $ak: String\n        $group_id: String\n        $status: String\n        $skipClusterSize: Boolean!\n      ) {\n        compute_session_list(\n          limit: $limit\n          offset: $offset\n          access_key: $ak\n          group_id: $group_id\n          status: $status\n        ) {\n          items {\n            id\n            type\n            session_id\n            name\n            image\n            architecture\n            created_at\n            terminated_at\n            status\n            status_info\n            service_ports\n            mounts\n            occupied_slots\n            resource_opts\n            access_key\n            starts_at\n            scaling_group\n            agents\n            image\n            cluster_size @skipOnClient(if: $skipClusterSize)\n            ...SessionInfoCellFragment\n          }\n        }\n      }\n    `,\n    {\n      limit: pageSize,\n      offset: (currentPage - 1) * pageSize,\n      status: status?.join(','),\n      group_id: projectId,\n\n      // skipOnClients\n      skipClusterSize: !baiClient.supports('multi-container'),\n    },\n    {\n      fetchKey: deferredMergedFetchKey,\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  const statusTagColor = {\n    //prepare\n    RESTARTING: 'blue',\n    PREPARING: 'blue',\n    PULLING: 'blue',\n    //running\n    RUNNING: 'green',\n    PENDING: 'green',\n    SCHEDULED: 'green',\n    //error\n    ERROR: 'red',\n    //finished return undefined\n  };\n\n  const statusInfoTagColor = {\n    'idle-timeout': 'green',\n    'user-requested': 'green',\n    scheduled: 'green',\n    'self-terminated': 'green',\n    'no-available-instances': 'red',\n    'failed-to-start': 'red',\n    'creation-failed': 'red',\n  };\n\n  const typeTagColor = {\n    INTERACTIVE: 'green',\n    BATCH: 'darkgreen',\n    INFERENCE: 'blue',\n  };\n\n  return (\n    <>\n      <Table\n        scroll={{ x: 'max-content' }}\n        columns={[\n          {\n            title: t('session.SessionInfo'),\n            render(value, record, index) {\n              return (\n                <SessionInfoCell\n                  key={record.session_id}\n                  sessionFrgmt={record}\n                  sessionNameList={_.map(\n                    (compute_session_list?.items || []).filter(filter) || [],\n                    'name',\n                  )}\n                  onRename={() => {\n                    updateFetchKey(\n                      record.session_id + new Date().toISOString(),\n                    );\n                  }}\n                />\n              );\n            },\n            fixed: 'left',\n          },\n          {\n            title: t('session.Status'),\n            dataIndex: 'status',\n            render(value, record) {\n              return (\n                <>\n                  {record.status_info !== '' ? (\n                    <DoubleTag\n                      values={[\n                        { label: value, color: _.get(statusTagColor, value) },\n                        {\n                          label: record.status_info,\n                          color: _.get(statusInfoTagColor, record.status_info),\n                        },\n                      ]}\n                    />\n                  ) : (\n                    <Tag color={_.get(statusTagColor, value)}>{value}</Tag>\n                  )}\n                </>\n              );\n            },\n          },\n          {\n            title: t('general.Control'),\n          },\n          {\n            title: t('session.Configuration'),\n            dataIndex: 'mounts',\n            render(value, record) {\n              return (\n                <>\n                  {value.length > 0 ? (\n                    <Flex gap=\"xxs\" style={{ width: 200 }}>\n                      <FolderOutlined />\n                      <Typography.Text\n                        ellipsis={{\n                          tooltip: {\n                            overlayInnerStyle: { width: 'max-content' },\n                            title: _.map(value, (mountedFolder) => {\n                              return <div>{mountedFolder}</div>;\n                            }),\n                          },\n                        }}\n                      >\n                        {value.join(', ')}\n                      </Typography.Text>\n                    </Flex>\n                  ) : (\n                    <Flex gap=\"xxs\" style={{ color: token.colorTextDisabled }}>\n                      <FolderOutlined />\n                      No mount\n                    </Flex>\n                  )}\n                  <Flex gap=\"xxs\">\n                    <GroupOutlined />\n                    {record.scaling_group}\n                  </Flex>\n                  <Flex gap=\"xxs\">\n                    {record.occupied_slots &&\n                      _.map(\n                        JSON.parse(record.occupied_slots),\n                        (value, type) => {\n                          return (\n                            <ResourceNumber\n                              key={type}\n                              // @ts-ignore\n                              type={type}\n                              value={_.toString(value)}\n                              opts={{\n                                shmem: _.sum(\n                                  _.map(\n                                    JSON.parse(record.resource_opts),\n                                    (item) => {\n                                      return item.shmem;\n                                    },\n                                  ),\n                                ),\n                              }}\n                            />\n                          );\n                        },\n                      )}\n                  </Flex>\n                </>\n              );\n            },\n          },\n          {\n            title: t('session.Usage'),\n          },\n          {\n            title: t('session.Reservation'),\n            dataIndex: 'created_at',\n            render(value, record) {\n              const localeStringDate = new Date(value).toLocaleString();\n\n              return (\n                <Flex direction=\"column\" gap=\"xs\">\n                  {localeStringDate}\n                  <DoubleTag\n                    values={[\n                      t('session.ElapsedTime'),\n                      <BAIIntervalText\n                        callback={() => {\n                          return baiClient.utils.elapsedTime(\n                            value,\n                            record.terminated_at,\n                          );\n                        }}\n                        delay={1000}\n                      />,\n                    ]}\n                  />\n                </Flex>\n              );\n            },\n          },\n          {\n            title: t('session.EnvironmentInfo'),\n            render: (record) => {\n              return (\n                <Tag color=\"gold\">\n                  <Flex direction=\"column\">\n                    <Flex gap=\"xxs\">\n                      <ImageMetaIcon image={record.image} />\n                      {/*<div> to apply gap */}\n                      <div>{getImageAliasName(record.image)}</div>\n                      {getBaseVersion(record.image)}\n                    </Flex>\n                    <Flex gap=\"xxs\">\n                      {/*<div> to apply gap */}\n                      <div>{getBaseImage(record.image)}</div>\n                      {record.architecture}\n                    </Flex>\n                  </Flex>\n                </Tag>\n              );\n            },\n          },\n          {\n            title: t('session.SessionType'),\n            dataIndex: 'type',\n            render: (value) => {\n              return <Tag color={_.get(typeTagColor, value)}>{value}</Tag>;\n            },\n          },\n          ...(baiClient.is_admin || !!baiClient._config.hideAgents\n            ? [\n                {\n                  title: t('session.Agents'),\n                  dataIndex: 'agents',\n                  render(value: string[]) {\n                    return _.map(value, (agent) => {\n                      return agent;\n                    });\n                  },\n                },\n              ]\n            : []),\n        ]}\n        // @ts-ignore\n        dataSource={(compute_session_list?.items || []).filter(filter)}\n        // dataSource={_.filter(compute_session_list?.items || [], () => {})}\n        // pagination={{\n\n        // }}\n        {...tableProps}\n      />\n    </>\n  );\n};\n\nexport default SessionList;\n","import AvailableResourcesCard from '../components/AvailableResourcesCard';\nimport Flex from '../components/Flex';\nimport SessionList from '../components/SessionList';\nimport { useSuspendedBackendaiClient, useWebUINavigate } from '../hooks';\nimport { useCurrentKeyPairResourcePolicyLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { PoweroffOutlined, ThunderboltTwoTone } from '@ant-design/icons';\nimport { Alert, Button, Card, Segmented, Typography, theme } from 'antd';\nimport React, { PropsWithChildren, Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst RUNNINGS = [\n  'RUNNING',\n  'RESTARTING',\n  'TERMINATING',\n  'PENDING',\n  'SCHEDULED',\n  'PREPARING',\n  'PULLING',\n];\nconst TAB_STATUS_MAP = {\n  running: RUNNINGS,\n  interactive: RUNNINGS,\n  batch: RUNNINGS,\n  inference: RUNNINGS,\n  finished: ['TERMINATED', 'CANCELLED'],\n  others: ['TERMINATING', 'ERROR'],\n  default: RUNNINGS,\n};\n\ntype TabKey =\n  | 'running'\n  | 'interactive'\n  | 'batch'\n  | 'inference'\n  | 'finished'\n  | 'others'\n  | 'default';\nconst SessionListPage: React.FC<PropsWithChildren> = ({ children }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const curProject = useCurrentProjectValue();\n  const webuiNavigate = useWebUINavigate();\n\n  const [selectedTab, setSelectedTab] = useState<TabKey>('running');\n  const [selectedGeneration, setSelectedGeneration] = useState<\n    'current' | 'next'\n  >('next');\n\n  const [{ keypair, keypairResourcePolicy }] =\n    useCurrentKeyPairResourcePolicyLazyLoadQuery();\n  // console.log(compute_session_list?.items[0].);\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'sm'}>\n      <Alert\n        message={\n          <Flex gap={'md'}>\n            <Typography.Text>\n              This is{' '}\n              {selectedGeneration === 'current'\n                ? 'current version'\n                : 'NEXT generation'}{' '}\n              of session list. you can switch anytime.\n            </Typography.Text>\n            <Segmented\n              options={[\n                {\n                  label: 'Current',\n                  value: 'current',\n                },\n                {\n                  label: (\n                    <Typography.Text\n                      style={{\n                        color:\n                          selectedGeneration === 'next'\n                            ? token.colorPrimary\n                            : undefined,\n                      }}\n                    >\n                      Next\n                    </Typography.Text>\n                  ),\n                  value: 'next',\n                  icon: (\n                    // <ThunderboltFilled style={{ color: token.colorPrimary }} />\n                    <ThunderboltTwoTone twoToneColor={token.colorWarning} />\n                  ),\n                },\n              ]}\n              value={selectedGeneration}\n              // @ts-ignore\n              onChange={(x) => setSelectedGeneration(x)}\n            />\n          </Flex>\n        }\n        type=\"info\"\n        showIcon\n      />\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          display: selectedGeneration === 'next' ? 'flex' : 'none',\n        }}\n        gap={'sm'}\n      >\n        <AvailableResourcesCard />\n        <Card\n          bodyStyle={{\n            padding: 0,\n          }}\n          tabList={[\n            {\n              key: 'running',\n              label: (\n                <>\n                  {t('session.Running') +\n                    ` (${keypair.concurrency_used}/${keypairResourcePolicy.max_concurrent_sessions === 1000000 ? '∞' : keypairResourcePolicy.max_concurrent_sessions})`}\n                  {/* <Tooltip><InfoCircleOutlined/></Tooltip> */}\n                </>\n              ),\n            },\n            {\n              key: 'interactive',\n              label: t('session.Interactive'),\n            },\n            {\n              key: 'batch',\n              label: t('session.Batch'),\n            },\n            ...(baiClient.supports('inference-workload')\n              ? [\n                  {\n                    key: 'inference',\n                    label: t('session.Inference'),\n                  },\n                ]\n              : []),\n            {\n              key: 'finished',\n              label: t('session.Finished'),\n            },\n            {\n              key: 'others',\n              label: t('session.Others'),\n            },\n          ]}\n          activeTabKey={selectedTab}\n          onTabChange={(key) => setSelectedTab(key as TabKey)}\n          tabBarExtraContent={\n            <Flex direction=\"row\" gap={'sm'}>\n              {/* <Tooltip title={t(\"session.exportCSV\")}>\n                    <Button icon={<DownloadOutlined />} type=\"text\" />\n                  </Tooltip> */}\n              {/* @ts-ignore */}\n              <Button\n                type=\"primary\"\n                icon={<PoweroffOutlined />}\n                onClick={() => {\n                  webuiNavigate('/session/start');\n                }}\n              >\n                START\n              </Button>\n            </Flex>\n          }\n        >\n          {children}\n          <Flex direction=\"column\" align=\"stretch\">\n            <Suspense fallback={<div>loading..</div>}>\n              <Flex\n                // style={{\n                //   marginLeft: -1,\n                //   marginRight: -1,\n                // }}\n                direction=\"column\"\n                align=\"stretch\"\n              >\n                <SessionList\n                  projectId={curProject.id}\n                  // bordered\n                  style={{\n                    marginTop: 1,\n                  }}\n                  status={\n                    TAB_STATUS_MAP[selectedTab] || TAB_STATUS_MAP['default']\n                  }\n                  filter={(session) => {\n                    if (\n                      ['interactive', 'batch', 'inference'].includes(\n                        selectedTab,\n                      )\n                    ) {\n                      return session?.type?.toLowerCase() === selectedTab;\n                    }\n                    return true;\n                  }}\n                  extraFetchKey={selectedTab}\n                />\n              </Flex>\n            </Suspense>\n          </Flex>\n        </Card>\n      </Flex>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          display: selectedGeneration === 'next' ? 'none' : 'flex',\n        }}\n      >\n        {/* @ts-ignore */}\n        <backend-ai-session-view\n          class=\"page\"\n          name=\"job\"\n          active={selectedGeneration !== 'next' ? true : null}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default SessionListPage;\n"],"names":["_ref","title","valueLabel","percent","width","strokeColor","labelStyle","size","token","theme","useToken","fontSize","fontSizeSM","fontSizeLG","_jsxs","Flex","style","padding","border","colorBorder","borderRadius","backgroundColor","colorBgContainerDisabled","_","flex","direction","align","children","_jsx","height","position","left","top","colorSuccess","opacity","zIndex","overflow","justify","Typography","Text","node","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","v23","v24","v25","hash","projectId","autoSelectDefault","filter","searchValue","onSearch","loading","selectProps","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","fetchKey","updateFetchKey","useUpdatableState","controllableSearchValue","setControllableSearchValue","useControllableState","value","onChange","controllableValue","setControllableValue","isPendingLoading","startLoadingTransition","useTransition","data","resourceGroupSelectQueryResult","useSuspenseTanQuery","queryKey","name","queryFn","search","URLSearchParams","set","Promise","all","method","url","toString","staleTime","sftpResourceGroups","volume_info","item","_item$sftp_scaling_gr","sftp_scaling_groups","resourceGroups","scaling_groups","useEffect","undefined","autoSelectedResourceGroup","autoSelectedOption","label","searchProps","showSearch","Select","defaultActiveFirstOption","defaultValue","onDropdownVisibleChange","open","options","resourceGroup","optionRender","option","_option$data$value","TextHighlighter","keyword","AvailableResourcesCard","_iSizeToSize","_iSizeToSize2","_resourceLimits$mem","_iSizeToSize3","selectedResourceGroup","setSelectedResourceGroup","useState","deferredSelectedResourceGroup","useDeferredValue","remaining","resourceLimits","resourceGroupResourceSize","useResourceLimitAndRemaining","currentProjectName","currentResourceGroup","console","log","mem","Card","gap","ResourceGroupSelect","minWidth","v","popupMatchSelectWidth","Tooltip","QuestionCircleOutlined","extra","Button","icon","ReloadOutlined","type","BAIProgressWithLabel","cpu","max","iSizeToSize","number","numberFixed","sessionFrgmt","sessionNameList","onRename","baiClient","useSuspendedBackendaiClient","session","useFragment","_SessionInfoCellFragment","require","mutation","useTanMutation","mutationFn","newName","sessionId","APIMajorVersion","session_id","rename","formRef","useRef","t","useTranslation","editing","setEditing","optimisticName","setOptimisticName","editable","includes","arguments","length","isRunningStatus","status","isPreparing","email","user_email","isPendingRename","isPending","Form","ref","Item","margin","rules","required","pattern","message","validator","form","String","reject","Error","resolve","Input","autoFocus","onPressEnter","save","_formRef$current","current","validateFields","then","_ref2","mutate","onSuccess","result","onError","error","catch","onKeyUp","e","key","maxWidth","ellipsis","tooltip","overlayInnerStyle","EditOutlined","color","colorLink","onClick","_formRef$current2","setFieldsValue","_status","limit","currentPage","pageSize","extraFetchKey","tableProps","deferredMergedFetchKey","getImageAliasName","getBaseVersion","getBaseImage","useBackendAIImageMetaData","supports","compute_session_list","useLazyLoadQuery","_SessionListQuery","offset","join","group_id","skipClusterSize","fetchPolicy","statusTagColor","RESTARTING","PREPARING","PULLING","RUNNING","PENDING","SCHEDULED","ERROR","statusInfoTagColor","scheduled","typeTagColor","INTERACTIVE","BATCH","INFERENCE","_Fragment","Table","scroll","x","columns","render","record","index","SessionInfoCell","items","Date","toISOString","fixed","dataIndex","status_info","DoubleTag","values","Tag","FolderOutlined","mountedFolder","colorTextDisabled","GroupOutlined","scaling_group","occupied_slots","JSON","parse","ResourceNumber","opts","shmem","resource_opts","localeStringDate","toLocaleString","BAIIntervalText","callback","utils","elapsedTime","terminated_at","delay","ImageMetaIcon","image","architecture","is_admin","_config","hideAgents","agent","dataSource","RUNNINGS","TAB_STATUS_MAP","running","interactive","batch","inference","finished","others","default","curProject","webuiNavigate","useWebUINavigate","selectedTab","setSelectedTab","selectedGeneration","setSelectedGeneration","keypair","keypairResourcePolicy","useCurrentKeyPairResourcePolicyLazyLoadQuery","Alert","Segmented","colorPrimary","ThunderboltTwoTone","twoToneColor","colorWarning","showIcon","display","bodyStyle","tabList","concurrency_used","max_concurrent_sessions","activeTabKey","onTabChange","tabBarExtraContent","PoweroffOutlined","Suspense","fallback","SessionList","id","marginTop","_session$type","toLowerCase","class","active"],"sourceRoot":""}