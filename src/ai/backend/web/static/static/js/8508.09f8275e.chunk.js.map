{"version":3,"file":"static/js/8508.09f8275e.chunk.js","mappings":"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","sources":["components/DatePickerISO.tsx","components/HiddenFormItem.tsx","__generated__/useValidateSessionNameQuery.graphql.ts","hooks/useValidateSessionName.tsx","__generated__/SessionLauncherPageAfterCreationQuery.graphql.ts","components/PortSelectFormItem.tsx","components/SessionLauncherErrorTourProps.tsx","components/SessionLauncherFormIncompatibleValueChecker.tsx","__generated__/SessionOwnerSetterCardQuery.graphql.ts","components/SessionOwnerSetterCard.tsx","components/SessionLauncherPreview.tsx","components/SessionNameFormItem.tsx","hooks/useRecentSessionHistory.tsx","components/SessionTemplateModal.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport { GetRef } from 'antd/lib';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO = React.forwardRef<\n  GetRef<typeof DatePicker>,\n  DatePickerISOProps\n>(({ value, onChange, localFormat, ...pickerProps }, ref) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      ref={ref}\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n});\n\nDatePickerISO.displayName = 'DatePickerISO';\nexport default DatePickerISO;\n","import { Form, FormItemProps } from 'antd';\nimport React, { useEffect } from 'react';\n\ninterface HiddenFormItemProps extends Omit<FormItemProps, 'children'> {\n  value: any;\n}\nconst HiddenFormItem: React.FC<HiddenFormItemProps> = ({ value, ...props }) => {\n  const form = Form.useFormInstance();\n  useEffect(() => {\n    form.setFieldValue(props.name, value);\n  }, [value, form, props.name]);\n  return (\n    <Form.Item {...props} hidden>\n      <div />\n    </Form.Item>\n  );\n};\n\nexport default HiddenFormItem;\n","/**\n * @generated SignedSource<<f92bf642a36339abf7f79760b6dc3ced>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type useValidateSessionNameQuery$variables = {\n  filter?: string | null | undefined;\n  projectId: string;\n};\nexport type useValidateSessionNameQuery$data = {\n  readonly compute_session_nodes: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n};\nexport type useValidateSessionNameQuery = {\n  response: useValidateSessionNameQuery$data;\n  variables: useValidateSessionNameQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"projectId\"\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"filter\",\n        \"variableName\": \"filter\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"project_id\",\n        \"variableName\": \"projectId\"\n      }\n    ],\n    \"concreteType\": \"ComputeSessionConnection\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"compute_session_nodes\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"count\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"useValidateSessionNameQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v0/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"useValidateSessionNameQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"2392cc957c8d4e1b5ff8eb0717faa135\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"useValidateSessionNameQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query useValidateSessionNameQuery(\\n  $projectId: UUID!\\n  $filter: String\\n) {\\n  compute_session_nodes(project_id: $projectId, filter: $filter) {\\n    count\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"4384b91173f16b29861a6bb9cfa6cbfa\";\n\nexport default node;\n","import { useValidateSessionNameQuery } from '../__generated__/useValidateSessionNameQuery.graphql';\nimport { useCurrentProjectValue } from './useCurrentProject';\nimport type { RuleObject } from 'antd/es/form';\nimport { FormItemProps } from 'antd/lib';\nimport _ from 'lodash';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, useRelayEnvironment, fetchQuery } from 'react-relay';\n\nexport const useValidateSessionName = (\n  currentName?: string | null,\n): Exclude<FormItemProps['rules'], undefined> => {\n  const { t } = useTranslation();\n  const relayEvn = useRelayEnvironment();\n  const currentProject = useCurrentProjectValue();\n  return useMemo(\n    () => [\n      {\n        min: 4,\n        message: t('session.validation.SessionNameTooShort'),\n      },\n      {\n        max: 64,\n        message: t('session.validation.SessionNameTooLong64'),\n      },\n      {\n        validator(f: RuleObject, value: string) {\n          if (_.isEmpty(value)) {\n            return Promise.resolve();\n          }\n          if (!/^\\w/.test(value)) {\n            return Promise.reject(\n              t('session.validation.SessionNameShouldStartWith'),\n            );\n          }\n\n          if (!/\\w$/.test(value)) {\n            return Promise.reject(\n              t('session.validation.SessionNameShouldEndWith'),\n            );\n          }\n\n          if (!/^[\\w.-]*$/.test(value)) {\n            return Promise.reject(\n              t('session.validation.SessionNameInvalidCharacter'),\n            );\n          }\n          return Promise.resolve();\n        },\n      },\n      {\n        validator: async (f: RuleObject, value: string) => {\n          if (value === currentName || !value) {\n            return Promise.resolve();\n          }\n          return fetchQuery<useValidateSessionNameQuery>(\n            relayEvn,\n            graphql`\n              query useValidateSessionNameQuery(\n                $projectId: UUID!\n                $filter: String\n              ) {\n                compute_session_nodes(project_id: $projectId, filter: $filter) {\n                  count\n                }\n              }\n            `,\n            {\n              projectId: currentProject.id,\n              filter: `status != \"TERMINATED\" & status != \"CANCELLED\" & name == \"${value}\"`,\n            },\n          )\n            .toPromise()\n            .catch((err: any) => {\n              // ignore network error\n              return;\n            })\n            .then((data) => {\n              if ((data?.compute_session_nodes?.count ?? 0) > 0) {\n                return Promise.reject(\n                  t('session.launcher.SessionAlreadyExists'),\n                );\n              }\n            });\n        },\n      },\n      currentName ? { required: true } : {},\n    ],\n    [currentName, relayEvn, currentProject.id, t],\n  );\n};\n","/**\n * @generated SignedSource<<c24ee0786961051b3a04a9f819f61c36>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionLauncherPageAfterCreationQuery$variables = {\n  id: any;\n};\nexport type SessionLauncherPageAfterCreationQuery$data = {\n  readonly compute_session_node: {\n    readonly \" $fragmentSpreads\": FragmentRefs<\"BAINodeNotificationItemFragment\">;\n  } | null | undefined;\n};\nexport type SessionLauncherPageAfterCreationQuery = {\n  response: SessionLauncherPageAfterCreationQuery$data;\n  variables: SessionLauncherPageAfterCreationQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"id\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"__typename\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"row_id\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionLauncherPageAfterCreationQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"BAINodeNotificationItemFragment\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionLauncherPageAfterCreationQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"ComputeSessionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_node\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"kind\": \"InlineFragment\",\n            \"selections\": [\n              {\n                \"kind\": \"InlineFragment\",\n                \"selections\": [\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"name\",\n                    \"storageKey\": null\n                  },\n                  (v5/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"type\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"access_key\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"service_ports\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"commit_status\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"user_id\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"scaling_group\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"kernel_nodes\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"KernelEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KernelNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"container_id\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"agent_id\",\n                                \"storageKey\": null\n                              },\n                              (v2/*: any*/),\n                              (v5/*: any*/),\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_idx\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_role\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"cluster_hostname\",\n                                \"storageKey\": null\n                              }\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"vfolder_mounts\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_info\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_data\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"queue_position\",\n                    \"storageKey\": null\n                  }\n                ],\n                \"type\": \"ComputeSessionNode\",\n                \"abstractKey\": null\n              },\n              {\n                \"kind\": \"InlineFragment\",\n                \"selections\": [\n                  (v3/*: any*/),\n                  (v4/*: any*/)\n                ],\n                \"type\": \"VirtualFolderNode\",\n                \"abstractKey\": null\n              }\n            ],\n            \"type\": \"Node\",\n            \"abstractKey\": \"__isNode\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"38a763d21085b81a39791f715aa0fff9\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionLauncherPageAfterCreationQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionLauncherPageAfterCreationQuery(\\n  $id: GlobalIDField!\\n) {\\n  compute_session_node(id: $id) {\\n    ...BAINodeNotificationItemFragment\\n    id\\n  }\\n}\\n\\nfragment AppLauncherModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  service_ports\\n  access_key\\n}\\n\\nfragment BAIComputeSessionNodeNotificationItemFragment on ComputeSessionNode {\\n  row_id\\n  id\\n  name\\n  status\\n  ...SessionActionButtonsFragment\\n  ...SessionStatusTagFragment\\n}\\n\\nfragment BAINodeNotificationItemFragment on Node {\\n  __isNode: __typename\\n  ... on ComputeSessionNode {\\n    __typename\\n    status\\n    name\\n    row_id\\n    ...BAIComputeSessionNodeNotificationItemFragment\\n  }\\n  ... on VirtualFolderNode {\\n    __typename\\n    status\\n  }\\n  id\\n}\\n\\nfragment ContainerCommitModalFragment on ComputeSessionNode {\\n  id\\n  name\\n  row_id\\n}\\n\\nfragment ContainerLogModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        id\\n        row_id\\n        container_id\\n        cluster_idx\\n        cluster_role\\n        cluster_hostname\\n      }\\n    }\\n  }\\n}\\n\\nfragment SFTPConnectionInfoModalFragment on ComputeSessionNode {\\n  row_id\\n  vfolder_mounts\\n}\\n\\nfragment SessionActionButtonsFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  type\\n  status\\n  access_key\\n  service_ports\\n  commit_status\\n  user_id\\n  ...TerminateSessionModalFragment\\n  ...ContainerLogModalFragment\\n  ...ContainerCommitModalFragment\\n  ...AppLauncherModalFragment\\n  ...SFTPConnectionInfoModalFragment\\n  ...useBackendAIAppLauncherFragment\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  status\\n  status_info\\n  status_data\\n  queue_position @since(version: \\\"25.13.0\\\")\\n}\\n\\nfragment TerminateSessionModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  scaling_group\\n  access_key\\n  kernel_nodes {\\n    edges {\\n      node {\\n        container_id\\n        agent_id\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment useBackendAIAppLauncherFragment on ComputeSessionNode {\\n  row_id\\n  vfolder_mounts\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f405c371be78f406d1270a88b3c43b2a\";\n\nexport default node;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({\n  name = 'ports',\n  ...formItemProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const form = Form.useFormInstance();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name={name}\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        () => ({\n          validator(rule, values) {\n            if (\n              transformPortValuesToNumbers(values).length <=\n              baiClient._config.maxCountForPreopenPorts\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(\n                  t('session.launcher.PreOpenPortMaxCountLimit', {\n                    count: baiClient._config.maxCountForPreopenPorts,\n                  }),\n                ),\n              );\n            }\n          },\n        }),\n        () => ({\n          // To check if the port range is not start <= end\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                return parseInt(v).toString() === v || isPortRangeStr(v);\n              })\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(t('session.launcher.InvalidPortFormat')),\n              );\n            }\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            const allPorts = transformPortValuesToNumbers(values);\n            if (\n              _.every(allPorts, (port) => {\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            // To check if the port is duplicated\n            const allPorts = transformPortValuesToNumbers(values);\n            if (_.uniq(allPorts).length === allPorts.length) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.DuplicatedPort')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          const hasDuplicated =\n            _.filter(\n              transformPortValuesToNumbers(form.getFieldValue(name)),\n              (v) => v === parseInt(props.value),\n            ).length > 1;\n          return (\n            <PortTag\n              inValid={hasDuplicated}\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.PreOpen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n  inValid?: boolean;\n}\n\nexport const PortTag: React.FC<PortTagProps> = ({\n  inValid,\n  value,\n  ...tagProps\n}) => {\n  return (\n    <Tag\n      color={!inValid && isValidPortStr(value) ? undefined : 'red'}\n      {...tagProps}\n    />\n  );\n};\n\nexport const isValidPortStr = (portStr: string) => {\n  // consider range as valid\n  if (isPortRangeStr(portStr)) {\n    const splitPortRange = portStr.split(':');\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start >= MIN_PORT && end <= MAX_PORT;\n  } else if (\n    portStr === parseInt(portStr).toString() &&\n    parseInt(portStr) >= MIN_PORT &&\n    parseInt(portStr) <= MAX_PORT\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const isPortRangeStr = (portRange: string) => {\n  const splitPortRange = portRange.split(':');\n  if (splitPortRange.length === 2) {\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start <= end;\n  }\n  return false;\n};\n\nexport const parsePortRangeToNumbers = (portRange: string) => {\n  const [start, end] = portRange.split(':').map((v) => parseInt(v));\n  return _.range(start, end + 1);\n};\n\nexport const transformPortValuesToNumbers = (\n  values: PortSelectFormValues['ports'],\n) => {\n  return _.flatten(\n    _.map(values, (v) =>\n      isPortRangeStr(v) ? parsePortRangeToNumbers(v) : parseInt(v),\n    ),\n  );\n};\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useBAISettingUserState } from '../hooks/useBAISetting';\nimport { Tour, TourProps } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionLauncherValidationTourProps extends Omit<TourProps, 'steps'> {}\nconst SessionLauncherValidationTour: React.FC<\n  SessionLauncherValidationTourProps\n> = ({ open, onClose, ...otherProps }) => {\n  const { t } = useTranslation();\n  const [hasOpenedValidationTour, setHasOpenedValidationTour] =\n    useBAISettingUserState('has_opened_tour_neo_session_validation');\n\n  const steps = [\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.ValidationErrorText'),\n      target: () =>\n        document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t(\n        'tourGuide.neoSessionLauncher.FixErrorFieldByModifyButton',\n      ),\n      target: () =>\n        (\n          document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement\n        )?.querySelector('.ant-card-extra') as HTMLElement,\n    },\n    {\n      title: t('tourGuide.neoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourGuide.neoSessionLauncher.FixErrorAndTryAgainText'),\n      target: () =>\n        document.querySelector(\n          '[data-test-id=\"neo-session-launcher-tour-step-navigation\"]',\n        ) as HTMLElement,\n    },\n  ];\n  return (\n    <Tour\n      steps={steps}\n      onClose={(e) => {\n        onClose?.(e);\n        setHasOpenedValidationTour(true);\n      }}\n      open={!hasOpenedValidationTour && open}\n      {...otherProps}\n    />\n  );\n};\n\nexport default SessionLauncherValidationTour;\n","import { SessionLauncherFormValue } from '../pages/SessionLauncherPage';\nimport { App, Form, FormInstance } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst SessionLauncherFormIncompatibleValueChecker: React.FC<{\n  form: FormInstance<SessionLauncherFormValue>;\n}> = ({ form }) => {\n  const mounts = Form.useWatch('mounts', form);\n  const app = App.useApp();\n  const { t } = useTranslation();\n\n  const hasIncompatibleMountsParam = useMemo(() => {\n    return _.isArray(mounts) && mounts.length > 0;\n  }, [mounts]);\n  useEffect(() => {\n    if (hasIncompatibleMountsParam) {\n      app.message.warning(\n        t('session.launcher.InvalidMountsSelectionWarning'),\n        5,\n      );\n      form.setFieldValue('mounts', undefined);\n    }\n  }, [hasIncompatibleMountsParam, t, app.message, form]);\n  return null;\n};\n\nexport default SessionLauncherFormIncompatibleValueChecker;\n","/**\n * @generated SignedSource<<b3429e7405e500fee4b598b5887f5d0e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionOwnerSetterCardQuery$variables = {\n  email: string;\n};\nexport type SessionOwnerSetterCardQuery$data = {\n  readonly keypairs: ReadonlyArray<{\n    readonly access_key: string | null | undefined;\n  } | null | undefined> | null | undefined;\n  readonly user: {\n    readonly domain_name: string | null | undefined;\n    readonly groups: ReadonlyArray<{\n      readonly id: string | null | undefined;\n      readonly name: string | null | undefined;\n    } | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type SessionOwnerSetterCardQuery = {\n  response: SessionOwnerSetterCardQuery$data;\n  variables: SessionOwnerSetterCardQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"domain_name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"UserGroup\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"groups\",\n  \"plural\": true,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    (v4/*: any*/)\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"a8de553c14d6730a6825cba2f409be0d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionOwnerSetterCardQuery(\\n  $email: String!\\n) {\\n  keypairs(email: $email) {\\n    access_key\\n    id\\n  }\\n  user(email: $email) {\\n    domain_name\\n    groups {\\n      name\\n      id\\n    }\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ba086835ea654ab889e0e6aaefa0abfe\";\n\nexport default node;\n","import { SessionOwnerSetterCardQuery } from '../__generated__/SessionOwnerSetterCardQuery.graphql';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAISelect from './BAISelect';\nimport HiddenFormItem from './HiddenFormItem';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Form,\n  Input,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport { CardProps } from 'antd/lib';\nimport { BAICard, BAICardProps, BAIFlex } from 'backend.ai-ui';\nimport _ from 'lodash';\nimport { CheckIcon } from 'lucide-react';\nimport React, { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { graphql, fetchQuery, useRelayEnvironment } from 'react-relay';\n\nexport interface SessionOwnerSetterFormValues {\n  owner?:\n    | {\n        email: string;\n        accesskey: string;\n        project: string;\n        resourceGroup: string;\n        enabled: true;\n        domainName: string;\n      }\n    | {\n        email?: string;\n        accesskey?: string;\n        project?: string;\n        resourceGroup?: string;\n        enabled: false;\n        domainName?: string;\n      };\n}\n\nconst SessionOwnerSetterCard: React.FC<CardProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const form = Form.useFormInstance<SessionOwnerSetterFormValues>();\n\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n\n  const [fetchingEmail, setFetchingEmail] = useState<string>();\n  const relayEvn = useRelayEnvironment();\n\n  const { data, isFetching } = useTanQuery({\n    queryKey: ['SessionOwnerSetterCard', 'ownerInfo', fetchingEmail],\n    queryFn: () => {\n      const email = form.getFieldValue(['owner', 'email']);\n      if (!email) return;\n\n      const query = graphql`\n        query SessionOwnerSetterCardQuery($email: String!) {\n          keypairs(email: $email) {\n            access_key\n          }\n          user(email: $email) {\n            domain_name\n            groups {\n              name\n              id\n            }\n          }\n        }\n      `;\n      return fetchQuery<SessionOwnerSetterCardQuery>(relayEvn, query, {\n        email,\n      }).toPromise();\n    },\n    enabled: !!fetchingEmail,\n  });\n\n  const ownerKeypairs = form.getFieldValue(['owner', 'email'])\n    ? data?.keypairs\n    : undefined;\n  const owner = form.getFieldValue(['owner', 'email']) ? data?.user : undefined;\n\n  const nonExistentOwner = !isFetching && fetchingEmail && !owner;\n\n  return (\n    <Card\n      title={t('session.launcher.SetSessionOwner')}\n      extra={\n        <Form.Item name={['owner', 'enabled']} valuePropName=\"checked\" noStyle>\n          <Switch />\n        </Form.Item>\n      }\n      styles={\n        isActive\n          ? undefined\n          : {\n              header: {\n                borderBottom: 'none',\n              },\n              body: {\n                display: isActive ? 'block' : 'none',\n              },\n            }\n      }\n      {...props}\n    >\n      <HiddenFormItem\n        name={['owner', 'domainName']}\n        value={owner?.domain_name}\n      />\n      <Form.Item dependencies={[['owner', 'enabled']]} noStyle>\n        {({ getFieldValue }) => {\n          return (\n            <>\n              <BAIFlex>\n                <Form.Item\n                  name={['owner', 'email']}\n                  label={t('session.launcher.OwnerEmail')}\n                  rules={[\n                    {\n                      required: isActive,\n                    },\n                    {\n                      type: 'email',\n                      message: t('general.validation.InvalidEmailAddress'),\n                    },\n                  ]}\n                  style={{ flex: 1 }}\n                  validateStatus={nonExistentOwner ? 'error' : undefined}\n                  help={\n                    nonExistentOwner\n                      ? t('credential.NoUserToDisplay')\n                      : undefined\n                  }\n                >\n                  <Input.Search\n                    onSearch={(v) => {\n                      // startTransition(()=>{\n                      form\n                        .validateFields([['owner', 'email']])\n                        .then(() => {\n                          setFetchingEmail(v);\n                        })\n                        .catch(() => {});\n                      // })\n                    }}\n                    onChange={() => {\n                      setFetchingEmail('');\n                      form.setFieldsValue({\n                        owner: {\n                          accesskey: '',\n                          project: undefined,\n                          resourceGroup: undefined,\n                        },\n                      });\n                    }}\n                    loading={isFetching}\n                    enterButton={\n                      !isFetching && owner ? (\n                        <Button icon={<CheckIcon />} />\n                      ) : undefined\n                    }\n                  />\n                </Form.Item>\n              </BAIFlex>\n              <Form.Item\n                name={['owner', 'accesskey']}\n                label={t('session.launcher.OwnerAccessKey')}\n                rules={[\n                  {\n                    required: getFieldValue(['owner', 'enabled']),\n                  },\n                ]}\n              >\n                <BAISelect\n                  options={_.map(ownerKeypairs, (k) => {\n                    return {\n                      label: k?.access_key,\n                      value: k?.access_key,\n                    };\n                  })}\n                  autoSelectOption\n                  disabled={_.isEmpty(fetchingEmail) || isFetching}\n                  // defaultActiveFirstOption\n                />\n              </Form.Item>\n              <Row gutter={token.marginSM}>\n                <Col span={12}>\n                  <Form.Item\n                    name={['owner', 'project']}\n                    label={t('session.launcher.OwnerGroup')}\n                    rules={[\n                      {\n                        required: getFieldValue(['owner', 'enabled']),\n                      },\n                    ]}\n                  >\n                    <BAISelect\n                      options={_.map(owner?.groups, (g) => {\n                        return {\n                          label: g?.name,\n                          value: g?.name,\n                        };\n                      })}\n                      autoSelectOption\n                      disabled={_.isEmpty(fetchingEmail) || isFetching}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item dependencies={[['owner', 'project']]} noStyle>\n                    {({ getFieldValue }) => {\n                      return (\n                        <Suspense\n                          fallback={\n                            <Form.Item\n                              label={t('session.launcher.OwnerResourceGroup')}\n                              rules={[\n                                {\n                                  required: getFieldValue(['owner', 'enabled']),\n                                },\n                              ]}\n                            >\n                              <Select loading />\n                            </Form.Item>\n                          }\n                        >\n                          <Form.Item\n                            name={['owner', 'resourceGroup']}\n                            label={t('session.launcher.OwnerResourceGroup')}\n                            rules={[\n                              {\n                                required: getFieldValue(['owner', 'enabled']),\n                              },\n                            ]}\n                          >\n                            {getFieldValue(['owner', 'project']) ? (\n                              <ResourceGroupSelect\n                                projectName={getFieldValue([\n                                  'owner',\n                                  'project',\n                                ])}\n                                disabled={\n                                  _.isEmpty(fetchingEmail) || isFetching\n                                }\n                                autoSelectDefault\n                              />\n                            ) : (\n                              <Select disabled />\n                            )}\n                          </Form.Item>\n                        </Suspense>\n                      );\n                    }}\n                  </Form.Item>\n                </Col>\n              </Row>\n            </>\n          );\n        }}\n      </Form.Item>\n    </Card>\n  );\n};\n\nexport const SessionOwnerSetterPreviewCard: React.FC<BAICardProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n  const currentUserRole = useCurrentUserRole();\n  return (\n    (currentUserRole === 'admin' || currentUserRole === 'superadmin') &&\n    isActive && (\n      <BAICard\n        title={t('session.launcher.SetSessionOwner')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError(['owner', 'email']).length > 0 ||\n          form.getFieldError(['owner', 'accesskey']).length > 0 ||\n          form.getFieldError(['owner', 'project']).length > 0 ||\n          form.getFieldError(['owner', 'resourceGroup']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        {...props}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.OwnerEmail')}>\n            {form.getFieldValue(['owner', 'email'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerAccessKey')}>\n            {form.getFieldValue(['owner', 'accesskey'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerGroup')}>\n            {form.getFieldValue(['owner', 'project'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerResourceGroup')}>\n            {form.getFieldValue(['owner', 'resourceGroup'])}\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    )\n  );\n};\n\nexport default SessionOwnerSetterCard;\n","import { preserveDotStartCase, getImageFullName } from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../hooks';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport {\n  SessionLauncherFormValue,\n  ResourceNumbersOfSession,\n  SessionLauncherStepKey,\n} from '../pages/SessionLauncherPage';\nimport DoubleTag from './DoubleTag';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { ImageTags } from './ImageTags';\nimport { PortTag } from './PortSelectFormItem';\nimport { SessionOwnerSetterPreviewCard } from './SessionOwnerSetterCard';\nimport SourceCodeViewer from './SourceCodeViewer';\nimport {\n  Descriptions,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  Tag,\n  Alert,\n  Card,\n  Table,\n  Form,\n  theme,\n} from 'antd';\nimport { BAICard, BAIFlex } from 'backend.ai-ui';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst SessionLauncherPreview: React.FC<{\n  onClickEditStep: (stepKey: SessionLauncherStepKey) => void;\n}> = ({ onClickEditStep }) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance<SessionLauncherFormValue>();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n  const sessionType = Form.useWatch('sessionType', { form, preserve: true });\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n  const supportExtendedImageInfo =\n    baiClient?.supports('extended-image-info') ?? false;\n  const currentProject = useCurrentProjectValue();\n  const [, { getBaseVersion, getBaseImage, tagAlias }] =\n    useBackendAIImageMetaData();\n  const { isDarkMode } = useThemeMode();\n\n  return (\n    <>\n      <BAICard\n        title={t('session.launcher.SessionType')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError('sessionName').length > 0 ||\n          form.getFieldError(['batch', 'command']).length > 0 ||\n          form.getFieldError(['batch', 'scheduleDate']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.SessionType')}>\n            {form.getFieldValue('sessionType')}\n          </Descriptions.Item>\n          {!_.isEmpty(form.getFieldValue('sessionName')) && (\n            <Descriptions.Item label={t('session.launcher.SessionName')}>\n              {form.getFieldValue('sessionName')}\n            </Descriptions.Item>\n          )}\n          {sessionType === 'batch' && (\n            <>\n              <Descriptions.Item\n                label={t('session.launcher.StartUpCommand')}\n                styles={{\n                  label: {\n                    whiteSpace: 'nowrap',\n                  },\n                  content: {\n                    overflow: 'auto',\n                  },\n                }}\n              >\n                {form.getFieldValue(['batch', 'command']) ? (\n                  <SourceCodeViewer language=\"shell\">\n                    {form.getFieldValue(['batch', 'command'])}\n                  </SourceCodeViewer>\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('session.launcher.SessionStartTime')}>\n                {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                  dayjs(form.getFieldValue(['batch', 'scheduleDate'])).format(\n                    'LLL (Z)',\n                  )\n                ) : (\n                  <Typography.Text type=\"secondary\">\n                    {t('general.None')}\n                  </Typography.Text>\n                )}\n              </Descriptions.Item>\n              {supportBatchTimeout ? (\n                <Descriptions.Item\n                  label={t('session.launcher.BatchJobTimeoutDuration')}\n                >\n                  {form.getFieldValue(['batch', 'timeout']) ? (\n                    <Typography.Text>\n                      {form.getFieldValue(['batch', 'timeout'])}\n                      {form.getFieldValue(['batch', 'timeoutUnit']) || 's'}\n                    </Typography.Text>\n                  ) : (\n                    <Typography.Text type=\"secondary\">\n                      {t('general.None')}\n                    </Typography.Text>\n                  )}\n                </Descriptions.Item>\n              ) : null}\n            </>\n          )}\n        </Descriptions>\n      </BAICard>\n      <SessionOwnerSetterPreviewCard\n        onClickExtraButton={() => {\n          onClickEditStep('sessionType');\n        }}\n      />\n      <BAICard\n        title={t('session.launcher.Environments')}\n        showDivider\n        size=\"small\"\n        status={\n          _.some(\n            form.getFieldValue(\n              'envvars',\n            ) as SessionLauncherFormValue['envvars'],\n            (v, idx) => {\n              return (\n                form.getFieldError(['envvars', idx, 'variable']).length > 0 ||\n                form.getFieldError(['envvars', idx, 'value']).length > 0\n              );\n            },\n          )\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.Project')}>\n            {currentProject.name}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('general.Image')}>\n            {supportExtendedImageInfo ? (\n              <Row style={{ flexFlow: 'nowrap' }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                    style={{ marginRight: token.marginXS }}\n                  />\n                </Col>\n                <Col>\n                  <BAIFlex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            form.getFieldValue('environments')?.image\n                              ?.base_image_name,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {form.getFieldValue('environments')?.image?.version}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                        {_.map(\n                          form.getFieldValue('environments')?.image?.tags,\n                          (tag: { key: string; value: string }) => {\n                            const isCustomized = _.includes(\n                              tag.key,\n                              'customized_',\n                            );\n                            const tagValue = isCustomized\n                              ? _.find(\n                                  form.getFieldValue('environments')?.image\n                                    ?.labels,\n                                  {\n                                    key: 'ai.backend.customized-image.name',\n                                  },\n                                )?.value\n                              : tag.value;\n                            const aliasedTag = tagAlias(tag.key + tagValue);\n                            return _.isEqual(\n                              aliasedTag,\n                              preserveDotStartCase(tag.key + tagValue),\n                            ) || isCustomized ? (\n                              <DoubleTag\n                                key={tag.key}\n                                values={[\n                                  {\n                                    label: tagAlias(tag.key),\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                  {\n                                    label: tagValue,\n                                    color: isCustomized ? 'cyan' : 'blue',\n                                  },\n                                ]}\n                              />\n                            ) : (\n                              <Tag\n                                key={tag.key}\n                                color={isCustomized ? 'cyan' : 'blue'}\n                              >\n                                {aliasedTag}\n                              </Tag>\n                            );\n                          },\n                        )}\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </BAIFlex>\n                </Col>\n              </Row>\n            ) : (\n              <Row style={{ flexFlow: 'nowrap', gap: token.sizeXS }}>\n                <Col>\n                  <ImageMetaIcon\n                    image={\n                      form.getFieldValue('environments')?.version ||\n                      form.getFieldValue('environments')?.manual\n                    }\n                  />\n                </Col>\n                <Col>\n                  {/* {form.getFieldValue('environments').image} */}\n                  <BAIFlex direction=\"row\" wrap=\"wrap\">\n                    {form.getFieldValue('environments')?.manual ? (\n                      <Typography.Text\n                        code\n                        style={{ wordBreak: 'break-all' }}\n                        copyable={{\n                          text: form.getFieldValue('environments')?.manual,\n                        }}\n                      >\n                        {form.getFieldValue('environments')?.manual}\n                      </Typography.Text>\n                    ) : (\n                      <>\n                        <Typography.Text>\n                          {tagAlias(\n                            getBaseImage(\n                              form.getFieldValue('environments')?.version,\n                            ),\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {getBaseVersion(\n                            form.getFieldValue('environments')?.version,\n                          )}\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <Typography.Text>\n                          {\n                            form.getFieldValue('environments')?.image\n                              ?.architecture\n                          }\n                        </Typography.Text>\n                        <Divider type=\"vertical\" />\n                        <ImageTags\n                          tag={form.getFieldValue([\n                            'environments',\n                            'image',\n                            'tag',\n                          ])}\n                          labels={\n                            form.getFieldValue('environments')?.image\n                              ?.labels as Array<{\n                              key: string;\n                              value: string;\n                            }>\n                          }\n                        />\n                        <Typography.Text\n                          style={{ color: token.colorPrimary }}\n                          copyable={{\n                            text:\n                              getImageFullName(\n                                form.getFieldValue('environments')?.image,\n                              ) || form.getFieldValue('environments')?.version,\n                          }}\n                        />\n                      </>\n                    )}\n                  </BAIFlex>\n                </Col>\n              </Row>\n            )}\n          </Descriptions.Item>\n          {form.getFieldValue('envvars')?.length > 0 && (\n            <Descriptions.Item\n              label={t('session.launcher.EnvironmentVariable')}\n            >\n              {form.getFieldValue('envvars')?.length ? (\n                <SyntaxHighlighter\n                  style={isDarkMode ? dark : undefined}\n                  codeTagProps={{\n                    style: {\n                      // fontFamily: 'monospace',\n                    },\n                  }}\n                  // showLineNumbers\n                  customStyle={{\n                    margin: 0,\n                    width: '100%',\n                  }}\n                >\n                  {_.map(\n                    form.getFieldValue('envvars'),\n                    (v: { variable: string; value: string }) =>\n                      `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                  ).join('\\n')}\n                </SyntaxHighlighter>\n              ) : (\n                <Typography.Text type=\"secondary\">-</Typography.Text>\n              )}\n            </Descriptions.Item>\n          )}\n        </Descriptions>\n      </BAICard>\n      <BAICard\n        title={t('session.launcher.ResourceAllocation')}\n        showDivider\n        status={\n          _.some(form.getFieldValue('resource'), (v, key) => {\n            return (\n              // @ts-ignore\n              form.getFieldError(['resource', key]).length > 0\n            );\n          }) ||\n          form.getFieldError(['num_of_sessions']).length > 0 ||\n          form.getFieldError('resourceGroup').length > 0\n            ? 'error'\n            : // : _.some(form.getFieldValue('resource'), (v, key) => {\n              //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n              //     // console.log(form.getFieldValue(['resource']));\n              //     return (\n              //       form.getFieldWarning(['resource', key]).length >\n              //       0\n              //     );\n              //   })\n              // ? 'warning'\n              undefined\n        }\n        size=\"small\"\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('environment');\n        }}\n      >\n        <BAIFlex direction=\"column\" align=\"stretch\">\n          {_.some(\n            form.getFieldValue('resource'),\n            (v, key: keyof SessionLauncherFormValue['resource']) => {\n              return (\n                // @ts-ignore\n                form.getFieldWarning(['resource', key]).length > 0\n              );\n            },\n          ) && (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.EnqueueComputeSessionWarning')}\n            />\n          )}\n\n          <Descriptions column={2}>\n            <Descriptions.Item label={t('general.ResourceGroup')} span={2}>\n              {form.getFieldValue('resourceGroup') || (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              )}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={t('session.launcher.ResourceAllocationPerContainer')}\n              span={2}\n            >\n              <BAIFlex\n                direction=\"row\"\n                align=\"start\"\n                gap={'sm'}\n                wrap=\"wrap\"\n                style={{ flex: 1 }}\n              >\n                {form.getFieldValue('allocationPreset') === 'custom' ? (\n                  // t('session.launcher.CustomAllocation')\n                  ''\n                ) : (\n                  <Tag>{form.getFieldValue('allocationPreset')}</Tag>\n                )}\n\n                <ResourceNumbersOfSession\n                  resource={form.getFieldValue('resource')}\n                />\n                {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n              </BAIFlex>\n            </Descriptions.Item>\n            {baiClient.supports('agent-select') &&\n              !baiClient?._config?.hideAgents && (\n                <Descriptions.Item label={t('session.launcher.AgentNode')}>\n                  {form.getFieldValue('agent') ||\n                    t('session.launcher.AutoSelect')}\n                </Descriptions.Item>\n              )}\n            <Descriptions.Item label={t('session.launcher.NumberOfContainer')}>\n              {form.getFieldValue('cluster_size') === 1\n                ? form.getFieldValue('num_of_sessions')\n                : form.getFieldValue('cluster_size')}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('session.launcher.ClusterMode')}>\n              {form.getFieldValue('cluster_mode') === 'single-node'\n                ? t('session.launcher.SingleNode')\n                : t('session.launcher.MultiNode')}\n            </Descriptions.Item>\n          </Descriptions>\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={t('session.launcher.TotalAllocation')}\n          >\n            <BAIFlex direction=\"row\" gap=\"xxs\">\n              <ResourceNumbersOfSession\n                resource={form.getFieldValue('resource')}\n                containerCount={\n                  form.getFieldValue('cluster_size') === 1\n                    ? form.getFieldValue('num_of_sessions')\n                    : form.getFieldValue('cluster_size')\n                }\n              />\n            </BAIFlex>\n          </Card>\n        </BAIFlex>\n      </BAICard>\n      <BAICard\n        title={t('webui.menu.Data&Storage')}\n        showDivider\n        size=\"small\"\n        status={\n          form.getFieldError('mount_id_map').length > 0 ? 'error' : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('storage');\n        }}\n      >\n        {/* {console.log(_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames')]))} */}\n        {/* {_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames').length]) > 0 ? ( */}\n        <BAIFlex direction=\"column\" align=\"stretch\" gap={'xs'}>\n          {form.getFieldValue('mount_ids')?.length > 0 ? (\n            <Table\n              rowKey=\"name\"\n              size=\"small\"\n              pagination={false}\n              columns={[\n                {\n                  dataIndex: 'name',\n                  title: t('data.folders.Name'),\n                },\n                {\n                  dataIndex: 'alias',\n                  title: t('session.launcher.FolderAlias'),\n                  render: (value, record) => {\n                    return _.isEmpty(value) ? (\n                      <Typography.Text\n                        type=\"secondary\"\n                        style={{\n                          opacity: 0.7,\n                        }}\n                      >\n                        {`/home/work/${record.name}`}\n                      </Typography.Text>\n                    ) : (\n                      value\n                    );\n                  },\n                },\n              ]}\n              dataSource={_.map(form.getFieldValue('mount_ids'), (v) => {\n                const name = form.getFieldValue('vfoldersNameMap')?.[v] || v;\n                return {\n                  name,\n                  alias: form.getFieldValue('mount_id_map')?.[v],\n                };\n              })}\n            ></Table>\n          ) : (\n            <Alert\n              type=\"warning\"\n              showIcon\n              message={t('session.launcher.NoFolderMounted')}\n            />\n          )}\n          {form.getFieldValue('autoMountedFolderNames')?.length > 0 ? (\n            <Descriptions size=\"small\">\n              <Descriptions.Item label={t('data.AutomountFolders')}>\n                {_.map(form.getFieldValue('autoMountedFolderNames'), (name) => {\n                  return <Tag>{name}</Tag>;\n                })}\n              </Descriptions.Item>\n            </Descriptions>\n          ) : null}\n        </BAIFlex>\n      </BAICard>\n      <BAICard\n        title=\"Network\"\n        showDivider\n        size=\"small\"\n        status={form.getFieldError('ports').length > 0 ? 'error' : undefined}\n        extraButtonTitle={t('button.Edit')}\n        onClickExtraButton={() => {\n          onClickEditStep('network');\n        }}\n      >\n        <Descriptions size=\"small\">\n          <Descriptions.Item label={t('session.launcher.PreOpenPortTitle')}>\n            <BAIFlex direction=\"row\" gap=\"xs\" style={{ flex: 1 }} wrap=\"wrap\">\n              {/* {form.getFieldValue('environments').image} */}\n              {_.sortBy(form.getFieldValue('ports'), (v) => parseInt(v)).map(\n                (v, idx) => (\n                  <PortTag key={idx + v} value={v} style={{ margin: 0 }}>\n                    {v}\n                  </PortTag>\n                ),\n              )}\n\n              {!_.isArray(form.getFieldValue('ports')) ||\n              form.getFieldValue('ports')?.length === 0 ? (\n                <Typography.Text type=\"secondary\">\n                  {t('general.None')}\n                </Typography.Text>\n              ) : null}\n            </BAIFlex>\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    </>\n  );\n};\n\nexport default SessionLauncherPreview;\n","import { useValidateSessionName } from '../hooks/useValidateSessionName';\nimport { Form, FormItemProps, Input } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\n\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  const { t } = useTranslation();\n  const validationRules = useValidateSessionName();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      validateDebounce={200}\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={validationRules}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import { generateRandomString } from '../helper';\nimport { SessionHistory, useBAISettingUserState } from './useBAISetting';\nimport { useEventNotStable } from './useEventNotStable';\nimport _ from 'lodash';\n\nexport const useRecentSessionHistory = () => {\n  const [recentSessions, setRecentSessionHistory] = useBAISettingUserState(\n    'recentSessionHistory',\n  );\n\n  const push = useEventNotStable(\n    ({\n      id,\n      params,\n      createdAt,\n      name,\n    }: SelectivePartial<SessionHistory, 'id' | 'createdAt'>) => {\n      const newHistory: SessionHistory = {\n        id: id ?? generateRandomString(8),\n        params,\n        createdAt: createdAt ?? new Date().toISOString(),\n        name: name,\n      };\n      // push new history to the top of recentSessionHistory and keep it up to 5\n      const newRecentSessionHistory = _.sortBy(\n        [newHistory, ...(recentSessions || [])],\n        '-createdAt',\n      ).slice(0, 5);\n      setRecentSessionHistory(newRecentSessionHistory);\n    },\n  );\n  const clear = useEventNotStable(() => setRecentSessionHistory([]));\n  const remove = useEventNotStable((id: string) => {\n    const newRecentSessionHistory = (recentSessions || []).filter(\n      (item) => item.id !== id,\n    );\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n\n  const update = useEventNotStable((id: string, name: string) => {\n    const newRecentSessionHistory = (recentSessions || []).map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          name,\n        };\n      }\n      return item;\n    });\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n\n  return [\n    recentSessions,\n    {\n      push,\n      clear,\n      remove,\n      update,\n    },\n  ] as const;\n};\n\nexport const usePinnedSessionHistory = () => {\n  const [pinnedSessionHistory, setPinnedSessionHistory] =\n    useBAISettingUserState('pinnedSessionHistory');\n  const [recentSessionHistory] = useBAISettingUserState('recentSessionHistory');\n\n  const pin = useEventNotStable((id: string) => {\n    const pinnedItem = (recentSessionHistory || []).find(\n      (item) => item.id === id,\n    );\n    pinnedItem &&\n      setPinnedSessionHistory([...(pinnedSessionHistory || []), pinnedItem]);\n  });\n\n  const unpin = useEventNotStable((id: string) => {\n    const newPinnedSessionHistory = (pinnedSessionHistory || []).filter(\n      (item) => item.id !== id,\n    );\n    setPinnedSessionHistory(newPinnedSessionHistory);\n  });\n\n  const update = useEventNotStable((id: string, name: string) => {\n    const newPinnedSessionHistory = (pinnedSessionHistory || []).map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          name,\n        };\n      }\n      return item;\n    });\n    setPinnedSessionHistory(newPinnedSessionHistory);\n  });\n\n  return [\n    pinnedSessionHistory,\n    {\n      pin,\n      unpin,\n      update,\n    },\n  ] as const;\n};\n","import { useBackendAIImageMetaData } from '../hooks';\nimport { SessionHistory } from '../hooks/useBAISetting';\nimport {\n  usePinnedSessionHistory,\n  useRecentSessionHistory,\n} from '../hooks/useRecentSessionHistory';\nimport {\n  ResourceNumbersOfSession,\n  SessionLauncherFormValue,\n} from '../pages/SessionLauncherPage';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport QuestionIconWithTooltip from './QuestionIconWithTooltip';\nimport { Button, theme, Tooltip, Typography } from 'antd';\nimport { createStyles } from 'antd-style';\nimport {\n  BAIModal,\n  BAIModalProps,\n  BAITable,\n  BAIFlex,\n  BAILink,\n} from 'backend.ai-ui';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { PinIcon } from 'lucide-react';\nimport React, { Key, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyle = createStyles(({ token, css }) => ({\n  fixEditableVerticalAlign: css`\n    & {\n      margin-top: 0px !important;\n    }\n  `,\n}));\n\ninterface SessionTemplateModalProps\n  extends Omit<BAIModalProps, 'onOk' | 'onCancel'> {\n  onRequestClose: (formValue?: SessionLauncherFormValue) => void;\n}\n\ninterface ParsedSessionHistory\n  extends SessionLauncherFormValue,\n    SessionHistory {\n  pinned?: boolean;\n}\n\nconst SessionTemplateModal: React.FC<SessionTemplateModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { styles } = useStyle();\n  const [sessionHistory, { update: updateSessionHistory }] =\n    useRecentSessionHistory();\n  const [hoverRowKey, setHoverRowKey] = useState<Key | null>(null);\n\n  const [, { getImageAliasName, getBaseVersion }] = useBackendAIImageMetaData();\n  const [pinnedSessionHistory, { pin, unpin, update: updatePinnedHistory }] =\n    usePinnedSessionHistory();\n\n  const [, setSelectedHistoryId] = useState<string>();\n  const { token } = theme.useToken();\n\n  const parsedSessionHistory: Array<ParsedSessionHistory> = useMemo(() => {\n    const parseToFormValues = (history: SessionHistory, isPinned: boolean) => {\n      const params = new URLSearchParams(history.params);\n      const formValues: SessionLauncherFormValue = JSON.parse(\n        params.get('formValues') || '{}',\n      );\n      return {\n        ...formValues,\n        pinned: isPinned,\n        name: history.name,\n      };\n    };\n\n    // const params = new URLSearchParams(history.params);\n    //   const formValues: SessionLauncherFormValue = JSON.parse(\n    //     params.get('formValues') || '{}',\n    //   );\n    const recent = _.map(sessionHistory, (history) => ({\n      ...history,\n      ...parseToFormValues(history, false),\n    }));\n\n    const pinned = _.map(pinnedSessionHistory, (history) => ({\n      ...history,\n      ...parseToFormValues(history, true),\n    }));\n\n    return _.chain([...pinned, ...recent])\n      .unionBy('id')\n      .value();\n  }, [sessionHistory, pinnedSessionHistory]);\n\n  return (\n    <BAIModal\n      width={800}\n      title={t('session.launcher.RecentHistory')}\n      footer={null}\n      onCancel={() => {\n        // reset\n        setSelectedHistoryId(undefined);\n        modalProps.onRequestClose();\n      }}\n      {...modalProps}\n    >\n      <BAIFlex direction=\"column\" align=\"stretch\" gap=\"sm\">\n        <Typography.Text>\n          {t('session.launcher.YouCanStartWithHistory')}\n        </Typography.Text>\n        <BAITable<ParsedSessionHistory>\n          rowSelection={{\n            selectedRowKeys: pinnedSessionHistory?.map((item) => item.id),\n            columnWidth: 0,\n            hideSelectAll: true,\n            renderCell: () => null,\n          }}\n          scroll={{ x: 'max-content' }}\n          dataSource={parsedSessionHistory}\n          pagination={false}\n          onRow={(record) => ({\n            onMouseEnter: () => setHoverRowKey(record.id),\n            onMouseLeave: () => setHoverRowKey(null),\n          })}\n          rowKey={(record) => record.id}\n          columns={[\n            {\n              title: (\n                <BAIFlex gap={'xxs'}>\n                  <PinIcon />\n                  <QuestionIconWithTooltip\n                    title={t('session.launcher.PinnedHistoryTooltip')}\n                  />\n                </BAIFlex>\n              ),\n              dataIndex: 'pinned',\n              width: 40,\n              render: (value, record) => {\n                const isPinned = !!record.pinned;\n                const isHovered = hoverRowKey === record.id;\n                return isPinned ? (\n                  <Button\n                    size=\"small\"\n                    onClick={() => {\n                      unpin(record.id);\n                      // TODO: add it to recent session history\n                    }}\n                    type=\"link\"\n                  >\n                    <PinIcon />\n                  </Button>\n                ) : (\n                  <Button\n                    size=\"small\"\n                    onClick={() => pin(record.id)}\n                    type=\"link\"\n                  >\n                    <PinIcon\n                      style={{\n                        color: isHovered\n                          ? token.colorTextQuaternary\n                          : 'transparent',\n                      }}\n                    />\n                  </Button>\n                );\n              },\n            },\n            {\n              title: t('session.launcher.SessionNameShort'),\n              dataIndex: 'name',\n              render: (name, record) => {\n                const displayName = name || record.id.split('-')[0];\n                return (\n                  <Typography.Text\n                    className={styles.fixEditableVerticalAlign}\n                    editable={{\n                      onChange(value) {\n                        if (!_.isEmpty(value)) {\n                          updateSessionHistory(record.id, value);\n                          record.pinned &&\n                            updatePinnedHistory(record.id, value);\n                        }\n                      },\n                      text: displayName,\n                    }}\n                  >\n                    <BAILink\n                      type=\"hover\"\n                      onClick={() => {\n                        modalProps.onRequestClose?.(\n                          JSON.parse(\n                            new URLSearchParams(record.params || '').get(\n                              'formValues',\n                            ) || '{}',\n                          ),\n                        );\n                      }}\n                    >\n                      {displayName}\n                    </BAILink>\n                  </Typography.Text>\n                );\n              },\n            },\n            {\n              title: t('session.launcher.Environments'),\n              dataIndex: ['environments', 'version'],\n              render: (version, record) => {\n                const imageStr =\n                  record.environments.version || record.environments.manual;\n                return (\n                  imageStr && (\n                    <Tooltip title={imageStr} placement=\"right\">\n                      <BAIFlex gap={'xxs'}>\n                        <ImageMetaIcon image={imageStr} />\n                        <Typography.Text>\n                          {getImageAliasName(imageStr)}{' '}\n                          {getBaseVersion(imageStr)}\n                        </Typography.Text>\n                      </BAIFlex>\n                    </Tooltip>\n                  )\n                );\n              },\n              onCell: () => ({\n                style: { maxWidth: 250, textOverflow: 'ellipsis' },\n              }),\n            },\n            {\n              title: t('session.launcher.ResourceAllocation'),\n              dataIndex: 'resource',\n              render: (resource) => {\n                // return JSON.stringify(resource)\n                return (\n                  <BAIFlex gap={'xs'}>\n                    <ResourceNumbersOfSession resource={resource} />\n                  </BAIFlex>\n                );\n              },\n            },\n            // {\n            //   dataIndex: 'mounts',\n            //   render: (value, record) => {\n            //     return _.join(record.mounts,', ');\n            //   }\n            // },\n            {\n              title: t('session.launcher.CreatedAt'),\n              dataIndex: 'createdAt',\n              render: (createdAt: string) => {\n                return dayjs(createdAt).fromNow();\n              },\n            },\n          ]}\n        />\n      </BAIFlex>\n      {/* <Tabs\n        defaultActiveKey=\"history\"\n        items={[\n          {\n            key: 'template',\n            label: t('session.launcher.Template'),\n            children: <div>Template</div>,\n          },\n          {\n            key: 'history',\n            label: t('session.launcher.RecentHistory'),\n            children: (\n              \n            ),\n          },\n        ]}\n      /> */}\n    </BAIModal>\n  );\n};\n\nexport default SessionTemplateModal;\n","import BAIIntervalView from '../components/BAIIntervalView';\nimport DatePickerISO from '../components/DatePickerISO';\nimport EnvVarFormList, {\n  sanitizeSensitiveEnv,\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  transformPortValuesToNumbers,\n} from '../components/PortSelectFormItem';\nimport ResourceNumber from '../components/ResourceNumber';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/SessionFormItems/ResourceAllocationFormItems';\nimport SessionLauncherValidationTour from '../components/SessionLauncherErrorTourProps';\nimport SessionLauncherFormIncompatibleValueChecker from '../components/SessionLauncherFormIncompatibleValueChecker';\nimport SessionLauncherPreview from '../components/SessionLauncherPreview';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport SessionOwnerSetterCard, {\n  SessionOwnerSetterFormValues,\n} from '../components/SessionOwnerSetterCard';\nimport SessionTemplateModal from '../components/SessionTemplateModal';\nimport VFolderTableFormItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport {\n  formatDuration,\n  generateRandomString,\n  convertToBinaryUnit,\n} from '../helper';\nimport {\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n  useWebUINavigate,\n} from '../hooks';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupState,\n} from '../hooks/useCurrentProject';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn, useToggle } from 'ahooks';\nimport {\n  App,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Form,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport { filterOutEmpty, BAIFlex, toGlobalId } from 'backend.ai-ui';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport _ from 'lodash';\nimport React, { useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { fetchQuery, graphql, useRelayEnvironment } from 'react-relay';\nimport { useLocation } from 'react-router-dom';\nimport { SessionLauncherPageAfterCreationQuery } from 'src/__generated__/SessionLauncherPageAfterCreationQuery.graphql';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\ntype SessionLauncherFormData = Omit<\n  Required<OptionalFieldsOnly<SessionLauncherFormValue>>,\n  'autoMountedFolderNames' | 'mounts'\n>;\n\nexport interface SessionResources {\n  group_name?: string;\n  domain?: string;\n  type?: 'interactive' | 'batch' | 'inference' | 'system';\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  maxWaitSeconds?: number;\n  starts_at?: string;\n  startupCommand?: string;\n  bootstrap_script?: string;\n  owner_access_key?: string;\n  enqueueOnly?: boolean;\n  config?: {\n    resources?: {\n      cpu: number;\n      mem: string;\n      [key: string]: number | string;\n    };\n    resource_opts?: {\n      shmem?: string;\n      allow_fractional_resource_fragmentation?: boolean;\n    };\n    mount_ids?: string[];\n    mount_id_map?: {\n      [key: string]: string;\n    };\n    environ?: {\n      [key: string]: string;\n    };\n    scaling_group?: string;\n    preopen_ports?: number[];\n    agent_list?: string[];\n  };\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  batchTimeout?: string;\n  resources: SessionResources;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n    timeoutEnabled?: boolean;\n    timeout?: string;\n    timeoutUnit?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS?: string;\n    OPENBLAS_NUM_THREADS?: string;\n  };\n  bootstrap_script?: string;\n}\n\nexport type SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues &\n  SessionOwnerSetterFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\n\nexport type AppOption = {\n  'session-name'?: string;\n  'session-uuid'?: string;\n  'access-key'?: string;\n  mode?: SessionMode;\n  'app-services'?: Array<string>;\n  runtime?: string;\n  filename?: string;\n  // [key in string]: any;\n};\n\nexport type SessionLauncherStepKey =\n  | 'sessionType'\n  | 'environment'\n  | 'storage'\n  | 'network'\n  | 'review';\n\ninterface StepPropsWithKey extends StepProps {\n  key: SessionLauncherStepKey;\n}\n\nexport const SESSION_LAUNCHER_NOTI_PREFIX = 'session-launcher:';\n\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n\n  const relayEnv = useRelayEnvironment();\n\n  const mainContentDivRef = useAtomValue(mainContentDivRefState);\n  const baiClient = useSuspendedBackendaiClient();\n  const supportsMountById = baiClient.supports('mount-by-id');\n  const currentUserRole = useCurrentUserRole();\n  const [currentGlobalResourceGroup, setCurrentGlobalResourceGroup] =\n    useCurrentResourceGroupState();\n\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const INITIAL_FORM_VALUES: DeepPartial<SessionLauncherFormValue> = useMemo(\n    () => ({\n      sessionType: 'interactive',\n      // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n      allocationPreset: 'auto-select',\n      hpcOptimization: {\n        autoEnabled: true,\n      },\n      batch: {\n        enabled: false,\n        command: undefined,\n        scheduleDate: undefined,\n        ...(supportBatchTimeout && {\n          timeoutEnabled: false,\n          timeout: undefined,\n          timeoutUnit: 's',\n        }),\n      },\n      envvars: [],\n      // set default_session_environment only if set\n      ...(baiClient._config?.default_session_environment && {\n        environments: {\n          environment: baiClient._config?.default_session_environment,\n        },\n      }),\n      ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n      resourceGroup: currentGlobalResourceGroup || undefined,\n    }),\n    [\n      baiClient._config?.default_session_environment,\n      currentGlobalResourceGroup,\n      supportBatchTimeout,\n    ],\n  );\n  const StepParam = withDefault(NumberParam, 0);\n  const FormValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n  const AppOptionParam = withDefault(JsonParam, {});\n  const [\n    {\n      step: currentStep,\n      formValues: formValuesFromQueryParams,\n      redirectTo,\n      // TODO: handle appOption to launch app with specific options\n      // appOption: appOptionFromQueryParams,\n    },\n    setQuery,\n  ] = useQueryParams({\n    step: StepParam,\n    formValues: FormValuesParam,\n    redirectTo: StringParam,\n    appOption: AppOptionParam,\n  });\n\n  const { search } = useLocation();\n\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const currentProject = useCurrentProjectValue();\n\n  const [isOpenTemplateModal, { toggle: toggleIsOpenTemplateModal }] =\n    useToggle();\n  const { upsertNotification } = useSetBAINotification();\n  const [, { push: pushSessionHistory }] = useRecentSessionHistory();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      const currentValue = form.getFieldsValue();\n      setQuery(\n        {\n          formValues: _.assign(\n            _.omit(form.getFieldsValue(), [\n              'environments.image',\n              'environments.customizedTag',\n              'autoMountedFolderNames',\n              'owner',\n              'envvars',\n            ]),\n            {\n              envvars: sanitizeSensitiveEnv(currentValue.envvars),\n            },\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  useEffect(() => {\n    if (!_.isEmpty(formValuesFromQueryParams)) {\n      form.validateFields().catch((e) => {});\n    }\n    // Run this memo only for the first time\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const mergedInitialValues = useMemo(() => {\n    return _.merge({}, INITIAL_FORM_VALUES, formValuesFromQueryParams);\n  }, [INITIAL_FORM_VALUES, formValuesFromQueryParams]);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps: Array<StepPropsWithKey> = filterOutEmpty([\n    {\n      title: t('session.launcher.SessionType'),\n      key: 'sessionType',\n      // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n    },\n    {\n      title: `${t('session.launcher.Environments')} & ${t(\n        'session.launcher.ResourceAllocation',\n      )} `,\n      key: 'environment',\n    },\n    sessionType !== 'inference' && {\n      title: t('webui.menu.Data&Storage'),\n      key: 'storage',\n    },\n    {\n      title: t('session.launcher.Network'),\n      key: 'network',\n    },\n    {\n      title: t('session.launcher.ConfirmAndLaunch'),\n      icon: <PlayCircleFilled />,\n      // @ts-ignore\n      key: 'review',\n    },\n  ]);\n\n  const currentStepKey = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  const [finalStepLastValidateTime, setFinalStepLastValidateTime] =\n    useUpdatableState('first'); // Force re-render after validation in final step.\n\n  useEffect(() => {\n    if (currentStep === steps.length - 1) {\n      form\n        .validateFields()\n        .catch((error) => {})\n        .finally(() => setFinalStepLastValidateTime());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep, form, setFinalStepLastValidateTime, steps.length]);\n\n  useEffect(() => {\n    if (finalStepLastValidateTime !== 'first') {\n      if (hasError) {\n        setValidationTourOpen(true);\n      } else {\n        setValidationTourOpen(false);\n      }\n    }\n  }, [finalStepLastValidateTime, hasError]);\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n    setIsStartingSession(true);\n    const usedSearchParams = search;\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mount_ids) || values.mount_ids?.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          // Basic session information\n          sessionName: sessionName,\n          kernelName,\n          architecture,\n          resources: {\n            enqueueOnly: true,\n            // Project and domain settings\n            group_name: values.owner?.enabled\n              ? values.owner.project\n              : currentProject.name,\n            domain: values.owner?.enabled\n              ? values.owner.domainName\n              : baiClient._config.domainName,\n\n            // Session configuration\n            type: values.sessionType,\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n\n            // Owner settings (optional)\n            // FYI, `config.scaling_group` also changes based on owner settings\n            ...(values.owner?.enabled\n              ? {\n                  owner_access_key: values.owner.accesskey,\n                }\n              : {}),\n\n            // Batch mode settings (optional)\n            ...(values.sessionType === 'batch'\n              ? {\n                  starts_at: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // Bootstrap script (optional)\n            ...(values.bootstrap_script\n              ? { bootstrap_script: values.bootstrap_script }\n              : {}),\n\n            // Batch timeout configuration (optional)\n            ...(supportBatchTimeout &&\n            values?.batch?.timeoutEnabled &&\n            !_.isUndefined(values?.batch?.timeout)\n              ? {\n                  batchTimeout:\n                    _.toString(values.batch.timeout) +\n                    values?.batch?.timeoutUnit,\n                }\n              : undefined),\n\n            config: {\n              // Resource allocation\n              resources: {\n                cpu: values.resource.cpu,\n                mem: values.resource.mem,\n                // Add accelerator only if specified\n                ...(values.resource.accelerator > 0\n                  ? {\n                      [values.resource.acceleratorType]:\n                        values.resource.accelerator,\n                    }\n                  : undefined),\n              },\n              scaling_group: values.owner?.enabled\n                ? values.owner.project\n                : values.resourceGroup,\n              resource_opts: {\n                shmem: values.resource.shmem,\n                // allow_fractional_resource_fragmentation can be added here if needed\n              },\n\n              // Storage configuration\n              [supportsMountById ? 'mount_ids' : 'mounts']: values.mount_ids,\n              [supportsMountById ? 'mount_id_map' : 'mount_map']:\n                values.mount_id_map,\n\n              // Environment variables\n              environ: {\n                ..._.fromPairs(\n                  values.envvars.map((v) => [v.variable, v.value]),\n                ),\n                // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n                ...(values.hpcOptimization.autoEnabled\n                  ? {}\n                  : _.omit(values.hpcOptimization, 'autoEnabled')),\n              },\n\n              // Networking\n              preopen_ports: transformPortValuesToNumbers(values.ports),\n\n              // Agent selection (optional)\n              ...(baiClient.supports('agent-select') &&\n              !baiClient?._config?.hideAgents &&\n              values.agent !== 'auto'\n                ? {\n                    // Filter out undefined values\n                    agent_list: [values.agent].filter(\n                      (agent): agent is string => !!agent,\n                    ),\n                  }\n                : undefined),\n            },\n          },\n        };\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.resources,\n                undefined,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean; status: string }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                if (res?.status === 'CANCELLED') {\n                  // Case about failed to start new session kind of \"docker image not found\" or etc.\n                  throw new Error(\n                    t('session.launcher.FailedToStartNewSession'),\n                  );\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                if (err?.message?.includes('The session already exists')) {\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                } else {\n                  throw err;\n                }\n              });\n          },\n        );\n        // After sending a create request, navigate to job page and set current resource group\n        setCurrentGlobalResourceGroup(values.resourceGroup);\n\n        pushSessionHistory({\n          params: usedSearchParams,\n          name: sessionName,\n        });\n\n        await Promise.allSettled(sessionPromises)\n          .then(async (sessionCreations) => {\n            // sessionCreations has failed\n            if (_.every(sessionCreations, { status: 'rejected' })) {\n            } else {\n              // If at least one session creation is successful, navigate to job page and show success notifications\n              webuiNavigate(redirectTo || '/job');\n\n              _.map(sessionCreations, async (creation) => {\n                if (creation.status === 'fulfilled') {\n                  const session = creation.value as {\n                    kernelId?: string;\n                    sessionId: string;\n                    sessionName: string;\n                    servicePorts: Array<{ name: string }>;\n                  };\n                  const queryResult =\n                    await fetchQuery<SessionLauncherPageAfterCreationQuery>(\n                      relayEnv,\n                      graphql`\n                        query SessionLauncherPageAfterCreationQuery(\n                          $id: GlobalIDField!\n                        ) {\n                          compute_session_node(id: $id) {\n                            ...BAINodeNotificationItemFragment\n                          }\n                        }\n                      `,\n                      {\n                        id: toGlobalId('ComputeSessionNode', session.sessionId),\n                      },\n                    )\n                      .toPromise()\n                      .catch(() => null);\n\n                  const createdSession =\n                    queryResult?.compute_session_node ?? null;\n\n                  if (createdSession) {\n                    upsertNotification({\n                      key: `${SESSION_LAUNCHER_NOTI_PREFIX}${session.sessionId}`,\n                      node: createdSession,\n                      open: true,\n                      duration: 0,\n                    });\n                  }\n                }\n              });\n            }\n          })\n          .catch(() => {\n            // Handle failed session creations\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n\n  const [validationTourOpen, setValidationTourOpen] = useState(false);\n\n  const [isQueryReset, setIsQueryReset] = useState(false);\n  useLayoutEffect(() => {\n    if (isQueryReset) {\n      form.resetFields();\n      setIsQueryReset(false);\n    }\n  }, [isQueryReset, form]);\n\n  return (\n    <BAIFlex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      <BAIFlex direction=\"row\" gap=\"md\" align=\"start\">\n        <BAIFlex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <BAIFlex direction=\"row\" justify=\"between\">\n            <Typography.Title level={4} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <BAIFlex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                // icon={<BlockOutlined />}\n                // disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n                onClick={() => toggleIsOpenTemplateModal()}\n              >\n                {t('session.launcher.RecentHistory')}\n              </Button>\n            </BAIFlex>\n          </BAIFlex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              initialValues={mergedInitialValues}\n            >\n              <SessionLauncherFormIncompatibleValueChecker form={form} />\n              <BAIFlex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                  <Form.Item\n                    name=\"bootstrap_script\"\n                    label=\"Bootstrap Script\"\n                    hidden\n                  >\n                    <Input />\n                  </Form.Item>\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      noStyle\n                      dependencies={[['batch', 'scheduleDate']]}\n                    >\n                      {() => {\n                        const scheduleDate = form.getFieldValue([\n                          'batch',\n                          'scheduleDate',\n                        ]);\n                        return (\n                          <BAIIntervalView\n                            delay={1000}\n                            callback={() => {\n                              const scheduleDate = form.getFieldValue([\n                                'batch',\n                                'scheduleDate',\n                              ]);\n                              if (scheduleDate) {\n                                if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                  if (\n                                    form.getFieldError([\n                                      'batch',\n                                      'scheduleDate',\n                                    ]).length === 0\n                                  ) {\n                                    form.validateFields([\n                                      ['batch', 'scheduleDate'],\n                                    ]);\n                                  }\n                                  return undefined;\n                                } else {\n                                  return dayjs(scheduleDate).fromNow();\n                                }\n                              } else {\n                                return undefined;\n                              }\n                            }}\n                            triggerKey={scheduleDate ? scheduleDate : 'none'}\n                            render={(time) => {\n                              return (\n                                <Form.Item\n                                  label={t('session.launcher.SessionStartTime')}\n                                  extra={time}\n                                >\n                                  <BAIFlex direction=\"row\" gap={'xs'}>\n                                    <Form.Item\n                                      noStyle\n                                      name={['batch', 'enabled']}\n                                      valuePropName=\"checked\"\n                                    >\n                                      <Checkbox\n                                        onChange={(e) => {\n                                          if (\n                                            e.target.checked &&\n                                            _.isEmpty(\n                                              form.getFieldValue([\n                                                'batch',\n                                                'scheduleDate',\n                                              ]),\n                                            )\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              dayjs()\n                                                .add(2, 'minutes')\n                                                .toISOString(),\n                                            );\n                                          } else if (\n                                            e.target.checked === false\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              undefined,\n                                            );\n                                          }\n                                          form.validateFields([\n                                            ['batch', 'scheduleDate'],\n                                          ]);\n                                        }}\n                                      >\n                                        {t('session.launcher.Enable')}\n                                      </Checkbox>\n                                    </Form.Item>\n                                    <Form.Item\n                                      noStyle\n                                      // dependencies={[['batch', 'enabled']]}\n                                      shouldUpdate={(prev, next) => {\n                                        return (\n                                          // @ts-ignore\n                                          prev.batch?.enabled !==\n                                          next.batch?.enabled\n                                        );\n                                      }}\n                                    >\n                                      {() => {\n                                        const disabled =\n                                          form.getFieldValue('batch')\n                                            ?.enabled !== true;\n                                        return (\n                                          <>\n                                            <Form.Item\n                                              name={['batch', 'scheduleDate']}\n                                              noStyle\n                                              rules={[\n                                                {\n                                                  // required: true,\n                                                  validator: async (\n                                                    rule,\n                                                    value,\n                                                  ) => {\n                                                    if (\n                                                      value &&\n                                                      dayjs(value).isBefore(\n                                                        dayjs(),\n                                                      )\n                                                    ) {\n                                                      return Promise.reject(\n                                                        t(\n                                                          'session.launcher.StartTimeMustBeInTheFuture',\n                                                        ),\n                                                      );\n                                                    }\n                                                    return Promise.resolve();\n                                                  },\n                                                },\n                                              ]}\n                                            >\n                                              <DatePickerISO\n                                                disabled={disabled}\n                                                showTime\n                                                localFormat\n                                                disabledDate={(value) => {\n                                                  return value.isBefore(\n                                                    dayjs().startOf('day'),\n                                                  );\n                                                }}\n                                              />\n                                            </Form.Item>\n                                            {/* <Form.Item\n                                              noStyle\n                                              name={['batch', 'scheduleTime']}\n                                            >\n                                              <TimePicker disabled={disabled} />\n                                            </Form.Item> */}\n                                          </>\n                                        );\n                                      }}\n                                    </Form.Item>\n                                  </BAIFlex>\n                                </Form.Item>\n                              );\n                            }}\n                          />\n                        );\n                      }}\n                    </Form.Item>\n\n                    {supportBatchTimeout ? (\n                      <Form.Item\n                        noStyle\n                        dependencies={[\n                          ['batch', 'timeoutEnabled'],\n                          ['batch', 'timeoutUnit'],\n                        ]}\n                      >\n                        {() => {\n                          const timeout = form.getFieldValue([\n                            'batch',\n                            'timeout',\n                          ]);\n                          const unit = form.getFieldValue([\n                            'batch',\n                            'timeoutUnit',\n                          ]);\n\n                          const timeDuration = dayjs.duration(\n                            timeout,\n                            unit ?? 's',\n                          );\n\n                          const formattedDuration = formatDuration(\n                            timeDuration,\n                            t,\n                          );\n\n                          const durationText =\n                            !_.isNull(timeout) && _.toFinite(timeout) > 0\n                              ? formattedDuration\n                              : null;\n                          return (\n                            <Form.Item\n                              label={t(\n                                'session.launcher.BatchJobTimeoutDuration',\n                              )}\n                              tooltip={t(\n                                'session.launcher.BatchJobTimeoutDurationDesc',\n                              )}\n                              // extra={durationText}\n                              help={durationText}\n                            >\n                              <BAIFlex direction=\"row\" gap={'xs'}>\n                                <Form.Item\n                                  noStyle\n                                  name={['batch', 'timeoutEnabled']}\n                                  valuePropName=\"checked\"\n                                >\n                                  <Checkbox\n                                    onChange={(e) => {\n                                      if (e.target.checked === false) {\n                                        form.setFieldValue(\n                                          ['batch', 'timeout'],\n                                          undefined,\n                                        );\n                                      }\n                                      form.validateFields([\n                                        ['batch', 'timeout'],\n                                      ]);\n                                    }}\n                                  >\n                                    {t('session.launcher.Enable')}\n                                  </Checkbox>\n                                </Form.Item>\n                                <Form.Item\n                                  noStyle\n                                  dependencies={[['batch', 'timeoutEnabled']]}\n                                >\n                                  {() => {\n                                    const disabled =\n                                      form.getFieldValue([\n                                        'batch',\n                                        'timeoutEnabled',\n                                      ]) !== true;\n                                    return (\n                                      <>\n                                        <Form.Item\n                                          name={['batch', 'timeout']}\n                                          label={t(\n                                            'session.launcher.BatchJobTimeoutDuration',\n                                          )}\n                                          noStyle\n                                          rules={[\n                                            {\n                                              min: 0,\n                                              type: 'number',\n                                              message: t(\n                                                'error.AllowsPositiveNumberOnly',\n                                              ),\n                                            },\n                                            {\n                                              required: !disabled,\n                                            },\n                                          ]}\n                                        >\n                                          <InputNumber\n                                            disabled={disabled}\n                                            min={1}\n                                            addonAfter={\n                                              <Form.Item\n                                                noStyle\n                                                name={['batch', 'timeoutUnit']}\n                                              >\n                                                <Select\n                                                  tabIndex={-1}\n                                                  style={{ minWidth: 75 }}\n                                                  options={[\n                                                    {\n                                                      label: t('time.Sec'),\n                                                      value: 's',\n                                                    },\n                                                    {\n                                                      label: t('time.Min'),\n                                                      value: 'm',\n                                                    },\n                                                    {\n                                                      label: t('time.Hour'),\n                                                      value: 'h',\n                                                    },\n                                                    {\n                                                      label: t('time.Day'),\n                                                      value: 'd',\n                                                    },\n                                                    {\n                                                      label: t('time.Week'),\n                                                      value: 'w',\n                                                    },\n                                                  ]}\n                                                />\n                                              </Form.Item>\n                                            }\n                                          />\n                                        </Form.Item>\n                                      </>\n                                    );\n                                  }}\n                                </Form.Item>\n                              </BAIFlex>\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    ) : null}\n                  </Card>\n                )}\n\n                {(currentUserRole === 'admin' ||\n                  currentUserRole === 'superadmin') && (\n                  <SessionOwnerSetterCard\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  />\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableAgentSelect={\n                      !baiClient._config.hideAgents &&\n                      baiClient.supports('agent-select')\n                    }\n                    enableNumOfSessions\n                    enableResourcePresets\n                    showRemainingWarning\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <BAIFlex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue({\n                                hpcOptimization: {\n                                  autoEnabled: true,\n                                  OMP_NUM_THREADS: undefined,\n                                  OPENBLAS_NUM_THREADS: undefined,\n                                },\n                              });\n                            } else {\n                              form.setFieldsValue({\n                                hpcOptimization: {\n                                  autoEnabled: false,\n                                  OMP_NUM_THREADS: '1',\n                                  OPENBLAS_NUM_THREADS: '1',\n                                },\n                              });\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </BAIFlex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={1}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={1}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle dependencies={['owner']}>\n                    {({ getFieldValue }) => {\n                      const ownerInfo = getFieldValue('owner');\n                      const isValidOwner =\n                        ownerInfo?.enabled &&\n                        _.every(_.omit(ownerInfo, 'enabled'), (key, value) => {\n                          return key !== undefined;\n                        });\n\n                      return (\n                        <VFolderTableFormItem\n                          rowKey={!!supportsMountById ? 'id' : 'name'}\n                          rowFilter={(vfolder) => {\n                            return (\n                              vfolder.status === 'ready' &&\n                              !vfolder.name?.startsWith('.')\n                            );\n                          }}\n                          tableProps={{\n                            ownerEmail: isValidOwner\n                              ? ownerInfo?.email\n                              : undefined,\n                          }}\n                        />\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <SessionLauncherPreview\n                    onClickEditStep={(stepKey) => {\n                      const nextStep = _.findIndex(steps, { key: stepKey });\n                      setCurrentStep(nextStep);\n                    }}\n                  />\n                )}\n\n                <BAIFlex direction=\"row\" justify=\"between\">\n                  <BAIFlex gap={'sm'}>\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        setQuery({}, 'replace');\n                        setIsQueryReset(true);\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </BAIFlex>\n                  <BAIFlex\n                    data-test-id=\"neo-session-launcher-tour-step-navigation\"\n                    direction=\"row\"\n                    gap=\"sm\"\n                  >\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </BAIFlex>\n                </BAIFlex>\n              </BAIFlex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </BAIFlex>\n        {screens.lg && (\n          <BAIFlex\n            data-test-id=\"neo-session-launcher-tour-step\"\n            style={{ position: 'sticky', top: 80 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </BAIFlex>\n        )}\n      </BAIFlex>\n      <SessionTemplateModal\n        onRequestClose={(formValue) => {\n          if (formValue) {\n            const fieldsValue = _.merge(\n              {\n                // reset fields related to optional and nested fields\n                sessionName: '',\n                ports: [],\n                vfoldersNameMap: {},\n                mount_ids: [],\n                mount_id_map: {},\n                bootstrap_script: '',\n                num_of_sessions: 1,\n                owner: {\n                  enabled: false,\n                  accesskey: '',\n                  domainName: '',\n                  email: undefined,\n                  project: '',\n                  resourceGroup: '',\n                },\n                environments: {\n                  manual: '',\n                },\n                batch: {\n                  enabled: false,\n                  command: undefined,\n                  scheduleDate: undefined,\n                },\n                agent: 'auto', // Add the missing 'agent' property\n              } as SessionLauncherFormData,\n              formValue,\n            );\n\n            if (!_.isEmpty(fieldsValue.sessionName)) {\n              fieldsValue.sessionName =\n                fieldsValue.sessionName + '-' + generateRandomString(4);\n            }\n            form.setFieldsValue(fieldsValue as SessionLauncherFormData);\n            setCurrentStep(steps.length - 1);\n            form.validateFields().catch(() => {});\n          }\n          toggleIsOpenTemplateModal();\n        }}\n        open={isOpenTemplateModal}\n      />\n      {currentStep === steps.length - 1 ? (\n        <ErrorBoundary fallback={null}>\n          <SessionLauncherValidationTour\n            open={validationTourOpen}\n            onClose={() => {\n              setValidationTourOpen(false);\n            }}\n            scrollIntoViewOptions\n          />\n        </ErrorBoundary>\n      ) : undefined}\n    </BAIFlex>\n  );\n};\n\ntype FormOrResourceRequired = {\n  resource: ResourceAllocationFormValue['resource'];\n  containerCount?: number;\n};\n\nexport const ResourceNumbersOfSession: React.FC<FormOrResourceRequired> = ({\n  resource,\n  containerCount = 1,\n}) => {\n  return (\n    <>\n      {_.map(\n        _.omit(resource, 'shmem', 'accelerator', 'acceleratorType'),\n        (value, type) => {\n          return value === '0' ? null : (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (convertToBinaryUnit(value.toString(), '')?.number || 0) *\n                      containerCount +\n                    ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: resource.shmem\n                  ? (convertToBinaryUnit(resource.shmem, '')?.number || 0) *\n                    containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {resource &&\n      resource.accelerator &&\n      resource.acceleratorType &&\n      _.isNumber(resource.accelerator) ? (\n        <ResourceNumber\n          // @ts-ignore\n          type={resource.acceleratorType}\n          value={_.toString(resource.accelerator * containerCount)}\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nexport default SessionLauncherPage;\n"],"names":["DatePickerISO","React","_ref","ref","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","_jsx","DatePicker","dayjs","undefined","_value","_value2","_value2$tz","_","newValue","format","tz","toISOString","displayName","props","form","Form","useFormInstance","useEffect","setFieldValue","name","Item","hidden","children","node","v0","v1","v2","hash","useValidateSessionName","currentName","t","useTranslation","relayEvn","useRelayEnvironment","currentProject","useCurrentProjectValue","useMemo","min","message","max","validator","f","Promise","resolve","test","reject","async","fetchQuery","_useValidateSessionNameQuery","projectId","id","filter","toPromise","catch","err","then","data","_data$compute_session","_data$compute_session2","compute_session_nodes","count","required","v3","v4","v5","MIN_PORT","MAX_PORT","PortTag","_ref2","inValid","tagProps","Tag","color","isValidPortStr","portStr","isPortRangeStr","splitPortRange","split","start","end","map","v","parseInt","toString","portRange","length","transformPortValuesToNumbers","values","parsePortRangeToNumbers","formItemProps","baiClient","useSuspendedBackendaiClient","label","tooltip","Trans","i18nKey","extra","rules","rule","_config","maxCountForPreopenPorts","Error","allPorts","port","Select","mode","tagRender","hasDuplicated","getFieldValue","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","style","width","suffixIcon","open","tokenSeparators","otherProps","hasOpenedValidationTour","setHasOpenedValidationTour","useBAISettingUserState","steps","title","description","target","_document$getElements","document","getElementsByClassName","_document$getElements2","_document$getElements3","querySelector","Tour","mounts","useWatch","app","App","useApp","hasIncompatibleMountsParam","warning","SessionOwnerSetterPreviewCard","isActive","currentUserRole","useCurrentUserRole","BAICard","showDivider","size","status","getFieldError","extraButtonTitle","_jsxs","Descriptions","column","token","theme","useToken","fetchingEmail","setFetchingEmail","useState","isFetching","useTanQuery","queryKey","queryFn","email","query","_SessionOwnerSetterCardQuery","enabled","ownerKeypairs","keypairs","owner","user","nonExistentOwner","Card","valuePropName","noStyle","Switch","styles","header","borderBottom","body","display","HiddenFormItem","domain_name","dependencies","_Fragment","BAIFlex","type","flex","validateStatus","help","Input","Search","onSearch","validateFields","setFieldsValue","accesskey","project","resourceGroup","loading","enterButton","Button","icon","CheckIcon","BAISelect","options","k","access_key","autoSelectOption","disabled","Row","gutter","marginSM","Col","span","groups","g","Suspense","fallback","ResourceGroupSelect","projectName","autoSelectDefault","_baiClient$supports","_baiClient$supports2","_form$getFieldValue","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue6$","_form$getFieldValue7","_form$getFieldValue7$","_form$getFieldValue8","_form$getFieldValue8$","_form$getFieldValue9","_form$getFieldValue9$","_form$getFieldValue1","_form$getFieldValue10","_form$getFieldValue11","_form$getFieldValue12","_form$getFieldValue13","_form$getFieldValue14","_form$getFieldValue15","_form$getFieldValue16","_form$getFieldValue17","_form$getFieldValue18","_form$getFieldValue19","_form$getFieldValue20","_form$getFieldValue21","_form$getFieldValue22","_form$getFieldValue23","_form$getFieldValue24","_form$getFieldValue25","_baiClient$_config","_form$getFieldValue26","_form$getFieldValue29","_form$getFieldValue30","onClickEditStep","sessionType","preserve","supportBatchTimeout","supports","supportExtendedImageInfo","getBaseVersion","getBaseImage","tagAlias","useBackendAIImageMetaData","isDarkMode","useThemeMode","onClickExtraButton","whiteSpace","content","overflow","SourceCodeViewer","language","Typography","Text","idx","flexFlow","ImageMetaIcon","image","version","manual","marginRight","marginXS","direction","wrap","code","wordBreak","copyable","text","base_image_name","Divider","architecture","tags","tag","_$find","_form$getFieldValue0","_form$getFieldValue0$","isCustomized","key","tagValue","labels","aliasedTag","preserveDotStartCase","DoubleTag","colorPrimary","getImageFullName","gap","sizeXS","ImageTags","SyntaxHighlighter","dark","codeTagProps","customStyle","margin","variable","join","align","getFieldWarning","Alert","showIcon","ResourceNumbersOfSession","resource","hideAgents","containerCount","Table","rowKey","pagination","columns","dataIndex","render","record","opacity","dataSource","_form$getFieldValue27","_form$getFieldValue28","alias","validationRules","validateDebounce","allowClear","autoComplete","useRecentSessionHistory","recentSessions","setRecentSessionHistory","push","useEventNotStable","params","createdAt","newHistory","generateRandomString","Date","newRecentSessionHistory","slice","clear","remove","item","update","useStyle","createStyles","css","fixEditableVerticalAlign","modalProps","sessionHistory","updateSessionHistory","hoverRowKey","setHoverRowKey","getImageAliasName","pinnedSessionHistory","pin","unpin","updatePinnedHistory","usePinnedSessionHistory","setPinnedSessionHistory","recentSessionHistory","pinnedItem","find","newPinnedSessionHistory","setSelectedHistoryId","parsedSessionHistory","parseToFormValues","history","isPinned","URLSearchParams","JSON","parse","get","pinned","recent","unionBy","BAIModal","footer","onCancel","onRequestClose","BAITable","rowSelection","selectedRowKeys","columnWidth","hideSelectAll","renderCell","scroll","x","onRow","onMouseEnter","onMouseLeave","PinIcon","QuestionIconWithTooltip","isHovered","onClick","colorTextQuaternary","className","editable","BAILink","_modalProps$onRequest","call","imageStr","environments","Tooltip","placement","onCell","maxWidth","textOverflow","fromNow","SESSION_LAUNCHER_NOTI_PREFIX","_convertToBinaryUnit","_convertToBinaryUnit2","ResourceNumber","convertToBinaryUnit","number","opts","shmem","accelerator","acceleratorType","generateSessionId","possible","i","charAt","Math","floor","random","SessionLauncherPage","_baiClient$_config3","_steps$currentStep","relayEnv","mainContentDivRef","useAtomValue","mainContentDivRefState","supportsMountById","currentGlobalResourceGroup","setCurrentGlobalResourceGroup","useCurrentResourceGroupState","isStartingSession","setIsStartingSession","INITIAL_FORM_VALUES","_baiClient$_config2","allocationPreset","hpcOptimization","autoEnabled","batch","command","scheduleDate","timeoutEnabled","timeout","timeoutUnit","envvars","default_session_environment","environment","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","StepParam","withDefault","NumberParam","FormValuesParam","JsonParam","AppOptionParam","step","currentStep","formValues","formValuesFromQueryParams","redirectTo","setQuery","useQueryParams","StringParam","appOption","search","useLocation","webuiNavigate","useWebUINavigate","isOpenTemplateModal","toggle","toggleIsOpenTemplateModal","useToggle","upsertNotification","useSetBAINotification","pushSessionHistory","run","syncFormToURLWithDebounce","useDebounceFn","currentValue","getFieldsValue","sanitizeSensitiveEnv","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","useForm","mergedInitialValues","_mainContentDivRef$cu","current","scrollTo","filterOutEmpty","PlayCircleFilled","currentStepKey","hasError","getFieldsError","errors","finalStepLastValidateTime","setFinalStepLastValidateTime","useUpdatableState","error","finally","setValidationTourOpen","validationTourOpen","isQueryReset","setIsQueryReset","useLayoutEffect","resetFields","justifyContent","justify","Title","level","marginTop","paddingRight","paddingLeft","Provider","onFormChange","info","layout","initialValues","SessionLauncherFormIncompatibleValueChecker","Radio","SessionNameFormItem","TextArea","autoSize","BAIIntervalView","delay","callback","isBefore","triggerKey","time","Checkbox","checked","add","shouldUpdate","prev","next","_prev$batch","_next$batch","showTime","disabledDate","startOf","unit","timeDuration","formattedDuration","formatDuration","durationText","InputNumber","addonAfter","tabIndex","minWidth","SessionOwnerSetterCard","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableAgentSelect","enableNumOfSessions","enableResourcePresets","showRemainingWarning","checkedChildren","unCheckedChildren","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","_prev$hpcOptimization","_next$hpcOptimization","marginMD","xs","sm","stringMode","ownerInfo","isValidOwner","VFolderTableFormItem","rowFilter","vfolder","_vfolder$name","startsWith","tableProps","ownerEmail","PortSelectFormItem","SessionLauncherPreview","stepKey","Popconfirm","onConfirm","QuestionCircleOutlined","colorError","okText","okButtonProps","danger","LeftOutlined","PlayCircleOutlined","startSession","usedSearchParams","_values$mount_ids","_values$owner","_values$owner2","_values$owner3","_values$batch","_values$batch2","_values$batch3","_values$owner4","_baiClient$_config4","mount_ids","modal","confirm","onOk","imageFullName","kernelName","sessionName","sessionInfo","resources","enqueueOnly","group_name","domain","domainName","cluster_mode","cluster_size","maxWaitSeconds","owner_access_key","starts_at","startupCommand","bootstrap_script","batchTimeout","config","cpu","mem","scaling_group","resource_opts","mount_id_map","environ","preopen_ports","ports","agent","agent_list","sessionPromises","num_of_sessions","formattedSessionName","createIfNotExists","res","created","_err$message","includes","allSettled","sessionCreations","creation","_queryResult$compute_","session","queryResult","_SessionLauncherPageAfterCreationQuery","toGlobalId","sessionId","createdSession","compute_session_node","duration","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","items","s","SessionTemplateModal","formValue","fieldsValue","vfoldersNameMap","SessionLauncherValidationTour","scrollIntoViewOptions"],"sourceRoot":""}