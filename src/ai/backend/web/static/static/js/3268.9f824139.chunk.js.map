{"version":3,"file":"static/js/3268.9f824139.chunk.js","mappings":"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","sources":["components/BatchSessionScheduledTimeSetting.tsx","components/DatePickerISO.tsx"],"sourcesContent":["import BAIIntervalText from './BAIIntervalText';\nimport DatePickerISO, { DatePickerISOProps } from './DatePickerISO';\nimport { useWebComponentInfo } from './DefaultProviders';\nimport Flex from './Flex';\nimport { useToggle } from 'ahooks';\nimport { Typography, Checkbox, theme } from 'antd';\nimport { GetRef } from 'antd/lib';\nimport dayjs from 'dayjs';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface Props extends DatePickerISOProps {}\nconst BatchSessionScheduledTimeSetting: React.FC<Props> = ({\n  ...datePickerISOProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isChecked, { toggle: toggleChecked }] = useToggle(false);\n  const [scheduleTime, setScheduleTime] = React.useState<\n    string | undefined | null\n  >();\n  const { dispatchEvent } = useWebComponentInfo();\n  const dispatchAndSetScheduleTime = (value: string | undefined | null) => {\n    setScheduleTime(value);\n    dispatchEvent('change', value);\n  };\n\n  const datePickerRef = useRef<GetRef<typeof DatePickerISO>>(null);\n\n  return (\n    <>\n      <Typography.Text type=\"secondary\" style={{ fontSize: token.fontSizeSM }}>\n        {t('session.launcher.SessionStartTime')}\n      </Typography.Text>\n      <Flex align=\"start\" gap=\"sm\">\n        <Checkbox\n          checked={isChecked}\n          onChange={(v) => {\n            toggleChecked();\n            const newScheduleTime = v\n              ? dayjs().add(2, 'minutes').toISOString()\n              : undefined;\n            dispatchAndSetScheduleTime(newScheduleTime);\n          }}\n        >\n          {t('session.launcher.Enable')}\n        </Checkbox>\n        <Flex direction=\"column\" align=\"end\">\n          <DatePickerISO\n            ref={datePickerRef}\n            {...datePickerISOProps}\n            popupStyle={{ position: 'fixed' }}\n            disabledDate={(date) => {\n              return date.isBefore(dayjs().startOf('day'));\n            }}\n            localFormat\n            disabled={!isChecked}\n            showTime={{\n              hideDisabledOptions: true,\n            }}\n            value={isChecked ? scheduleTime : undefined}\n            onChange={(value) => {\n              dispatchAndSetScheduleTime(value);\n            }}\n            onCalendarChange={() => {\n              datePickerRef.current?.focus();\n            }}\n            onPanelChange={() => {\n              datePickerRef.current?.focus();\n            }}\n            status={\n              isChecked && !scheduleTime\n                ? 'warning'\n                : dayjs(scheduleTime).isBefore(dayjs())\n                  ? 'error'\n                  : undefined\n            }\n            needConfirm={false}\n            showNow={false}\n          />\n          {isChecked &&\n            scheduleTime &&\n            !dayjs(scheduleTime).isBefore(dayjs()) && (\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontSize: token.fontSizeSM - 2 }}\n              >\n                ({t('session.launcher.StartAfter')}\n                <BAIIntervalText\n                  callback={() => {\n                    return dayjs(scheduleTime).fromNow();\n                  }}\n                  delay={1000}\n                />\n                )\n              </Typography.Text>\n            )}\n          {isChecked && !scheduleTime && (\n            <Typography.Text\n              type=\"warning\"\n              style={{ fontSize: token.fontSizeSM - 2 }}\n            >\n              {t('session.launcher.StartTimeDoesNotApply')}\n            </Typography.Text>\n          )}\n          {isChecked &&\n            scheduleTime &&\n            dayjs(scheduleTime).isBefore(dayjs()) && (\n              <Typography.Text\n                type=\"danger\"\n                style={{ fontSize: token.fontSizeSM - 2 }}\n              >\n                {t('session.launcher.StartTimeMustBeInTheFuture')}\n              </Typography.Text>\n            )}\n        </Flex>\n      </Flex>\n    </>\n  );\n};\n\nexport default BatchSessionScheduledTimeSetting;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport { GetRef } from 'antd/lib';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO = React.forwardRef<\n  GetRef<typeof DatePicker>,\n  DatePickerISOProps\n>(({ value, onChange, localFormat, ...pickerProps }, ref) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      ref={ref}\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n});\n\nexport default DatePickerISO;\n"],"names":["_ref","datePickerISOProps","t","useTranslation","token","theme","useToken","isChecked","toggle","toggleChecked","useToggle","scheduleTime","setScheduleTime","React","dispatchEvent","useWebComponentInfo","dispatchAndSetScheduleTime","value","datePickerRef","useRef","_jsxs","_Fragment","children","_jsx","Typography","Text","type","style","fontSize","fontSizeSM","Flex","align","gap","Checkbox","checked","onChange","v","newScheduleTime","dayjs","add","toISOString","undefined","direction","DatePickerISO","ref","popupStyle","position","disabledDate","date","isBefore","startOf","localFormat","disabled","showTime","hideDisabledOptions","onCalendarChange","_datePickerRef$curren","current","focus","onPanelChange","_datePickerRef$curren2","status","needConfirm","showNow","BAIIntervalText","callback","fromNow","delay","pickerProps","setControllableValue","useControllableValue","DatePicker","_value","_value2","_value2$tz","_","newValue","format","tz"],"sourceRoot":""}