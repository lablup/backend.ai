{"version":3,"file":"static/js/3209.85ef89f4.chunk.js","mappings":"sNAWA,MAyCA,EAvCKA,IAAsB,IAErBC,GAFA,OAAEC,EAAS,IAAIF,EACnB,OAAsB,IAAlBE,EAAOC,OAAqB,MAM9BF,EAHAC,EAAO,KACe,kBAAdA,EAAO,IAAmBE,EAAAA,eAAqBF,EAAO,KAE/CA,EAAOG,KACnBC,IAAK,CAEFC,MAAOD,EACPE,MAAO,WAIEN,GAIfO,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,UAAU,MAAKC,SAClBC,IAAAA,IAAMZ,GAAc,CAACa,EAAUC,KAE5BN,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAEFC,MACEJ,IAAAA,KAAOZ,KAAkBa,OACrBI,EACA,CAAEC,OAAQ,EAAGC,aAAc,GAEjCZ,MAAOM,EAASN,MAAMI,SAErBE,EAASP,OARLQ,OAYN,C,kJC1BX,MAgLA,EAhLsEf,IAQ/D,IARgE,aACrEqB,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAAI,MACtDC,EAAQ,CAAC,IAAK,IAAK,IAAK,KAAI,gBAC5BC,GAAkB,EAAK,IACvBC,EAAM,KAAI,IACVC,EAAM,OAAM,UACZC,KACGC,GACJ3B,EACC,MAAOM,EAAOsB,IAAYC,EAAAA,EAAAA,GACxBF,EACA,CACEG,aAAc,QAGXC,EAAUC,GACL,OAAV1B,QAA4BY,IAAVZ,EAAsB,CAAC,KAAM,OAAQ2B,EAAAA,EAAAA,IAAU3B,GAC7D4B,GAAeC,EAAAA,EAAAA,GAAYH,GAC3BI,EAAOJ,GAAkBE,GAAgBZ,EAAM,IAE9Ce,EAAaC,IAAWL,EAAAA,EAAAA,IAAUT,IAClCe,EAAaC,IAAWP,EAAAA,EAAAA,IAAUR,GAEnCgB,GAAMC,EAAAA,EAAAA,QAAyB,MAuBrC,OAtBAC,EAAAA,EAAAA,YAAU,KACR,GAAIF,EAAIG,QAAS,CACf,MAAMC,EAAWC,IAAc,IAADC,EAE5B,MAAMzC,EAAS,OAADwC,QAAC,IAADA,GAAS,QAARC,EAADD,EAAGE,cAAM,IAAAD,OAAR,EAADA,EAAWzC,MACrB,aAAa2C,KAAK3C,IAKpBsB,EAAStB,EAEX,EAEI0C,EAASP,EAAIG,QAEnB,OADM,OAANI,QAAM,IAANA,GAAAA,EAAQE,iBAAiB,QAASL,GAC3B,KACC,OAANG,QAAM,IAANA,GAAAA,EAAQG,oBAAoB,QAASN,EAAQ,CAEjD,IACC,CAACJ,EAAKV,EAAUC,EAAgBJ,KAGjCnB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAW,CACVX,IAAKA,KACDd,EACJ0B,OAAQA,KACN,GAAIxC,IAAAA,SAAWa,IAAcA,EAAY,EAAG,CAAC,IAAD4B,EAAAC,EAAAC,EAC1C,MAAMC,GAAiD,QAAlCH,EAAA5B,EAAUgC,WAAWC,MAAM,KAAK,UAAE,IAAAL,OAAA,EAAlCA,EAAoCnD,SAAU,EACnE,GACEyD,MACEC,KAAKC,MAAMjD,IAAAA,UAAsB,QAAX0C,EAAAd,EAAIG,eAAO,IAAAW,OAAA,EAAXA,EAAajD,QAAS,KAAOoB,GACjDA,GAGJ,OAEFE,EACE,IACEiC,KAAKC,MAAMjD,IAAAA,UAAsB,QAAX2C,EAAAf,EAAIG,eAAO,IAAAY,OAAA,EAAXA,EAAalD,QAAS,KAAOoB,GACnDA,GACAqC,QAAQN,KAAgBrB,IAE9B,GAEF9B,MAAOyB,EACPiC,SAAWC,IAEPrC,EADe,OAAbqC,QAAkC/C,IAAb+C,EACdA,EAEA,GAAGA,IAAW7B,IACzB,EAKFX,IAAKe,IAAYJ,EAAOG,GAAc2B,EAAAA,EAAAA,IAAYzC,EAAKW,GAAM+B,OAC7D3C,IACEc,IAAYF,EACRC,GAEA6B,EAAAA,EAAAA,IAAY1C,EAAKY,GAAM+B,OAE7BC,YACE3D,EAAAA,EAAAA,KAAC4D,EAAAA,EAAM,CACLC,UAAW,EACXhE,MAAO8B,EACP4B,SAAWO,IACT3C,EAAS,GAAGG,IAAWwC,IAAU,EAEnCC,wBAA0BC,KAEnBA,GAAkB,OAAVnE,QAA6BY,IAAVZ,IAC9BsB,EAAS,IAAIQ,IACf,EAEFsC,QAAS7D,IAAAA,IAAMS,GAAQc,IAAI,CACzB9B,MAAO8B,EACP7B,OACEE,EAAAA,EAAAA,KAACkE,EAAAA,EAAWC,KAAI,CACd3D,MAAO,CACL4D,WACE,uEACFjE,SAEDwB,EAAK0C,cAAgB,WAI5BC,WAAYzD,EAAMnB,OAAS,OAAIe,EAAY,KAC3CuD,KAAMnD,EAAMnB,OAAS,QAAIe,EACzBD,MAAO,CACL+D,OAAQ1D,EAAMnB,OAAS,OAAIe,EAAY,aAI7C+D,KAAM,EACNC,OAAQA,CAACC,EAAgBC,KACvB,MAAMC,EACJxE,IAAAA,OAASkB,IAAalB,IAAAA,YAAckB,GAAY,EAAIA,EAChDuD,EAAQzE,IAAAA,YAAcA,IAAAA,OAASQ,GAAegE,GACpD,IAAIE,EAGAA,EAFc,OAAdH,EAAKI,KACHH,IAAoBhE,EAAaiE,GACvBA,EAAQ,EAERA,EAGFA,EAAQ,EAGtB,MAAMG,EAAmBnE,EAAMoE,QAAQtD,GACvC,IAAKb,GAAmBgE,EAAY,EAElC,GAAyB,IAArBE,EAEF7D,EAAS,IAAIQ,SACR,CACL,MAAMuD,EAAYtE,EAAaA,EAAalB,OAAS,GAC/CyF,EAAWtE,EAAMmE,EAAmB,GAC1C7D,EAAS,GAAG+D,IAAYC,IAC1B,MACK,IAAKrE,GAAmBgE,EAAYlE,EAAalB,OAAS,EAG/D,GAAIsF,IAAqBnE,EAAMnB,OAAS,EACtCyB,EACE,GAAGyD,GAAiC,OAAdD,EAAKI,KAAgB,GAAK,KAAKhD,SAElD,CACL,MAAMmD,EAAYtE,EAAa,GACzBuE,EAAWtE,EAAMmE,EAAmB,GAC1C7D,EAAS,GAAG+D,IAAYC,IAC1B,MAGA,GAAIL,GAAa,GAAKA,EAAYlE,EAAalB,OAAQ,CACrD,IAAI0F,EAAexE,EAAakE,GAC5BjD,IAAYF,GAAQyD,EAAexD,EACrCwD,EAAexD,EACNG,IAAYJ,GAAQyD,EAAetD,IAC5CsD,EAAetD,GAEjBX,EAAS,GAAGiE,IAAezD,IAC7B,CACF,GAEF,C,wEC/LN,MAAM0D,EAKD,SAAA9F,EAAwB+F,GAAwB,IAA/C,MAAEC,EAAK,MAAE/E,EAAQ,CAAC,GAAGjB,EAAYiG,EAAGC,UAAA/F,OAAA,QAAAe,IAAAgF,UAAA,GAAAA,UAAA,GAAG,GAC3C,MAAO,EAAE,aAAEC,KAAkBC,EAAAA,EAAAA,MAE7B,OACE3F,EAAAA,EAAAA,KAAA,OACE4F,IAAKF,EAAaH,GAClB/E,MAAO,CACLqF,MAAO,MACPC,OAAQ,SACLtF,GAELgF,IAAKA,GAGX,EAEA,EAAe7F,EAAAA,KAAW0F,E,uICF1B,MA+FA,EA/FoE9F,IAQ7D,IAR8D,IACnEwB,EAAG,IACHC,EAAG,KACHwD,EAAI,SACJuB,EAAQ,iBACR7E,EAAgB,YAChB8E,KACGC,GACJ1G,EACC,MAAOM,EAAOsB,IAAYC,EAAAA,EAAAA,GAAqB6E,GACzCC,EAAWvG,EAAAA,OAA+B,OAChDuC,EAAAA,EAAAA,YAAU,KAEK,IAATsC,GAAc3E,EAAQ,IAAM,GAC9BsB,EAASf,IAAAA,IAAM,CAACgD,KAAKC,MAAMxD,GAAQkB,IACrC,GAEC,CAACyD,IAGJ,MAAO2B,EAAKC,IAAaC,EAAAA,EAAAA,IAAkB,SAQ3C,OAPAnE,EAAAA,EAAAA,YAAU,KACRoE,YAAW,KACTF,EAAUvG,EAAM,GACf,EAAE,GAEJ,KAGD0G,EAAAA,EAAAA,MAACtG,EAAAA,EAAI,CAACC,UAAU,MAAMsG,IAAK,KAAKrG,SAAA,EAC9BH,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHO,MAAO,CAAEiG,KAAM,EAAGC,SAAU,KAC5BC,MAAM,UACNzG,UAAU,SAAQC,UAElBH,EAAAA,EAAAA,KAAC2C,EAAAA,EAAW,CAEVX,IAAKkE,EACLlF,IAAKA,EACLD,IAAKA,EACLyD,KAAU,OAAJA,QAAI,IAAJA,EAAAA,OAAQ/D,EACdsF,SAAUA,EACVlG,MAAOA,EACP0D,SAAUpC,EACVyB,OAAQA,KACN,GAAIxC,IAAAA,SAAWoE,IAASA,EAAO,EAAG,CAAC,IAADoC,EAAAC,EAAAC,EAChC,GACE1G,IAAAA,SAAWY,IACXA,EAAMZ,IAAAA,UAA2B,QAAhBwG,EAAAV,EAAS/D,eAAO,IAAAyE,OAAA,EAAhBA,EAAkB/G,QAAS,KAE5C,OAEF,MAAMmD,GAA4C,QAA7B6D,EAAArC,EAAKvB,WAAWC,MAAM,KAAK,UAAE,IAAA2D,OAAA,EAA7BA,EAA+BnH,SAAU,EAC9DyB,EACEf,IAAAA,IAAM,CACJA,IAAAA,UAEIgD,KAAKC,MACHjD,IAAAA,UAA2B,QAAhB0G,EAAAZ,EAAS/D,eAAO,IAAA2E,OAAA,EAAhBA,EAAkBjH,QAAS,KAAO2E,GAC3CA,GACJlB,QAAQN,IAEZjC,IAGN,MAEEG,GA/BCiF,MAkCTnG,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,UAAU,SAASyG,MAAM,UAAUnG,MAAO,CAAEiG,KAAM,GAAItG,UAC1DH,EAAAA,EAAAA,KAAC+G,EAAAA,EAAM,CACL/F,IAAKA,EACLD,IAAK,EACLyD,KAAMA,EACNuB,SAAUA,EACVlG,MAAOA,EACP0D,SAAW1D,SACGY,IAARM,GAAqBlB,EAAQkB,GAG/BI,EAAStB,EACX,KAEEmG,EAEJgB,MAAO5G,IAAAA,OAAoB,OAAX4F,QAAW,IAAXA,OAAW,EAAXA,EAAagB,OAAO,CAACC,EAAQd,MACpC/F,IAAAA,SAAWY,IAAOZ,IAAAA,SAAW+F,GAAOnF,UAI5C,C,sOC9FX,MAsNA,EApNIzB,IASG,IATF,IACHwB,EAAM,KAAI,IACVC,EAAM,MAAK,KACXkG,EAAI,MACJrG,EAAQ,CAAC,IAAK,KAAI,WAClBsG,EAAU,WACVC,EAAU,KACV5C,EAAO,OACJyB,GACJ1G,EACC,MAAOM,EAAOsB,IAAYC,EAAAA,EAAAA,GACxB6E,EACA,CACE5E,aAAc,QAGZ,MAAEgG,GAAUC,EAAAA,EAAMC,WAClBC,GAASC,EAAAA,EAAAA,UAAQ,KAAMhE,EAAAA,EAAAA,IAAY1C,EAAK,IAAK,IAAI,CAACA,IAClD2G,GAASD,EAAAA,EAAAA,UAAQ,KAAMhE,EAAAA,EAAAA,IAAYzC,EAAK,IAAK,IAAI,CAACA,IAClD2G,GAAWF,EAAAA,EAAAA,UAAQ,KAAMhE,EAAAA,EAAAA,IAAY5D,GAAS,KAAM,IAAK,IAAI,CAACA,KAU7DsG,EAAKC,IAAaC,EAAAA,EAAAA,IAAkB,UAC3CnE,EAAAA,EAAAA,YAAU,KACRoE,YAAW,KACTF,EAAe,OAALvG,QAAK,IAALA,OAAK,EAALA,EAAOoD,WAAW,GAC3B,EAAE,GAEJ,IAEH,MAAM2E,EACJxH,IAAAA,SAAiB,OAANoH,QAAM,IAANA,OAAM,EAANA,EAAQ9D,SACnBtD,IAAAA,SAAiB,OAANsH,QAAM,IAANA,OAAM,EAANA,EAAQhE,UACb,OAAN8D,QAAM,IAANA,OAAM,EAANA,EAAQ9D,SAAe,OAANgE,QAAM,IAANA,OAAM,EAANA,EAAQhE,QAa3B,OACE6C,EAAAA,EAAAA,MAACtG,EAAAA,EAAI,CAACC,UAAU,MAAMsG,IAAK,KAAKrG,SAAA,EAC9BH,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHO,MAAO,CAAEiG,KAAM,EAAGC,SAAU,KAC5BxG,UAAU,SACVyG,MAAM,UAASxG,UAEf0H,EAAAA,EAAAA,eAACC,EAAAA,EAAsB,IACjB7B,EACJE,IAAKA,EACLpF,IAAKA,EACLC,IAAKA,EACLH,MAAOA,EAEPhB,MAAOA,EACP0D,SAAW2B,IACT/D,EAAS+D,EAAU,EAErB1E,MAAO,CACLkG,SAAU,KAEZzF,UAAWuD,EACXuD,cAAeH,OAGnB5H,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,UAAU,SACVyG,MAAM,UACNnG,MAAO,CACLiG,KAAM,KACFW,GAAc,CAChBY,WAAY,SACZlC,OAAQ,IAEV3F,UAEFH,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,UAAU,SAASyG,MAAM,UAASxG,UAmCtCH,EAAAA,EAAAA,KAAC+G,EAAAA,EAAM,CACL/F,IAAW,OAAN0G,QAAM,IAANA,OAAM,EAANA,EAAQhE,OACbuE,OAAQ,CACNC,MACGhB,GAAQ,CACPiB,iBACEC,EAAAA,EAAAA,IAAuBlB,EAAMrH,GAAS,MAAQ,EAC1CwH,EAAMgB,kBACN5H,SAERA,EACF6H,KAAM,CAEJ,GAGJ9D,KAAMA,EAON3E,MAAO+H,EAAqB,EAAY,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAUjE,OAC1CqC,SAAU6B,EACVW,QAAS,CACPC,UAAWZ,EACP,KACA,WAAgB,IAAf/H,EAAK4F,UAAA/F,OAAA,QAAAe,IAAAgF,UAAA,GAAAA,UAAA,GAAG,EACP,OAAO5F,EAAQ,EACX,IAAY,KAARA,GAAcyD,QAAQ,SAC1B,GAAGzD,EAAMyD,QAAQ,QACvB,GAENC,SAAWkF,IACC,OAANjB,QAAM,IAANA,GAAAA,EAAQ9D,QAAU8D,EAAO9D,OAAS+E,EACpCtH,EAASJ,GAETI,EACEsH,EAAc,EACO,KAAdA,EAAH,IACA,GAAGA,KAEX,EAEFzB,OA/HqBA,EA+HQ,IACvBQ,GACFpH,IAAAA,SAAiB,OAANoH,QAAM,IAANA,OAAM,EAANA,EAAQ9D,SAAW,CAC5B,CAAC8D,EAAO9D,QAAS,CACflD,MAAO,CACLT,MAAOsH,EAAMqB,oBAGf5I,MACoB,IAAlB0H,EAAO9D,OACH8D,EAAO9D,OACP8D,EAAO9D,QAAU,EACf8D,EAAO9D,OAAS,IACA,KAAhB8D,EAAO9D,OAAgB,SAIlCtD,IAAAA,OAAS+G,GAAY,CAACF,EAAQd,MACxB/F,IAAAA,SAAiB,OAANsH,QAAM,IAANA,OAAM,EAANA,EAAQhE,SACtBtD,IAAAA,SAAW+F,IAAc,OAANuB,QAAM,IAANA,OAAM,EAANA,EAAQhE,cAGvB,OAANgE,QAAM,IAANA,OAAM,EAANA,EAAQhE,SAAU,CACpB,CAACgE,EAAOhE,QAAS,CACflD,MAAO,CACLT,MAAOsH,EAAMqB,oBAEf5I,MACoB,IAAlB4H,EAAOhE,OACHgE,EAAOhE,OACPgE,EAAOhE,QAAU,EACfgE,EAAOhE,OAAS,IACA,KAAhBgE,EAAOhE,OAAgB,OA9JtCtD,IAAAA,OAAS,IAAK4G,IAAS,CAACC,EAAQd,KACrC,MAAMwC,EAAaC,WAAWzC,GAC9B,OACEqB,GACAE,KACO,OAANF,QAAM,IAANA,OAAM,EAANA,EAAQ9D,QAASiF,IAAoB,OAANjB,QAAM,IAANA,OAAM,EAANA,EAAQhE,QAASiF,EAAW,cANnC3B,KAsKtB,E,oHC7LX,MA8JA,EA9JkEzH,IAK3D,IAL4D,uBACjEsJ,EAAsB,WACtBC,EAAU,oBACVC,KACGC,GACJzJ,EACC,MAAO0J,EAAUC,IAAkB7C,EAAAA,EAAAA,IAAkB,UAC7C8C,IAAKC,IAA4BC,EAAAA,EAAAA,GAAcH,EAAgB,CACrEI,KAAM,IACNC,UAAU,EACVC,SAAS,KAEJC,IAAiBC,EAAAA,EAAAA,OAClB,EAAEC,IAAMC,EAAAA,EAAAA,OACR,MAAEvC,GAAUC,EAAAA,EAAMC,YACjBsC,EAAiBC,IAAoBC,EAAAA,EAAAA,kBACrCC,EAAmBC,IACxB7I,EAAAA,EAAAA,GAAqB4H,IAMjB,iBAAEkB,IAAqBC,EAAAA,EAAAA,uBAAgB,IAAAC,EAAAA,EAAAA,EAAAC,EAAA,OAU3C,CAAC,EACD,CACEpB,SAAUA,EACVqB,YAA0B,UAAbrB,EAAuB,oBAAsB,iBAI9D,OACEjJ,EAAAA,EAAAA,KAAC4D,EAAAA,EAAM,CACL2G,QAASV,EACT5F,QAAS,IACH6E,EACA,CACE,CACEjJ,MAAO,SACPC,OACEyG,EAAAA,EAAAA,MAACtG,EAAAA,EAAI,CAACuG,IAAK,KAAMhG,MAAO,CAAEgK,QAAS,eAAgBrK,SAAA,EACjDH,EAAAA,EAAAA,KAACyK,EAAAA,EAAY,IAAG,IAAEd,EAAE,wCAGxBe,cAAef,EAAE,uCAGrB,MACAZ,EACA,CACE,CACElJ,MAAO,mBACPC,OACEyG,EAAAA,EAAAA,MAACtG,EAAAA,EAAI,CAACuG,IAAK,KAAKrG,SAAA,CACbwJ,EAAE,sCACH3J,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CACNC,MAAOjB,EAAE,4CAA4CxJ,UAErDH,EAAAA,EAAAA,KAAC6K,EAAAA,EAAkB,CACjBrK,MAAO,CACLT,MAAOsH,EAAMqB,2BAMvBgC,cAAef,EAAE,uCAGrB,GACJ,CAEE7J,MAAO,SAEPmE,QAAS7D,IAAAA,IAAM8J,GAAkB,CAACY,EAAQjG,KACxC,MAAMkG,EAEFC,KAAKC,MAAY,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQI,gBACjBnF,EAAW8C,GACZA,EAAuBsC,UAAe,OAANL,QAAM,IAANA,OAAM,EAANA,EAAQM,OAAQ,SACjD3K,EACJ,MAAO,CACLZ,MAAa,OAANiL,QAAM,IAANA,OAAM,EAANA,EAAQM,KACftL,OACEyG,EAAAA,EAAAA,MAACtG,EAAAA,EAAI,CAACC,UAAU,MAAMmL,QAAQ,UAAU7E,IAAK,KAAKrG,SAAA,CACzC,OAAN2K,QAAM,IAANA,OAAM,EAANA,EAAQM,MACTpL,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,UAAU,MACVsG,IAAK,MACLhG,MACE,CAEE,EAEHL,SAEAC,IAAAA,IACCA,IAAAA,OAAS2K,GAAW,CAACO,EAAMnF,IACzB/F,IAAAA,QAAUqJ,EAActD,OAE1B,CAACmF,EAAMnF,KAEHnG,EAAAA,EAAAA,KAACuL,EAAAA,EAAc,CAGbxG,KAAMoB,EACNtG,MAAOyL,EACPE,aAAW,GAJNrF,UAYnB2E,SACA/E,SAAUA,EACX,IAEA0F,MACC,CACEC,EACAC,IACID,EAAE3F,WAAa4F,EAAE5F,SAAW,EAAI2F,EAAE3F,SAAW,GAAK,IAEzD0F,MAAK,CAACC,EAAGC,KAAMC,EAAAA,EAAAA,IAAcF,EAAE7L,MAAO8L,EAAE9L,WAG/CgM,YAAU,KAEN7C,EACJnJ,MAAOmK,EACPzG,SAAU0G,EACV6B,gBACE1L,IAAAA,SAAW,CAAC,SAAU,oBAAqB4J,GACvC,gBACA,QAENjG,wBAA0BC,IACxBgF,EAAYjF,yBACViF,EAAYjF,wBAAwBC,GAClCA,GAnIR8F,GAAiB,KACfV,GAAyB,GAoIvB,GAEM,E,2FCvJP,MAAM2C,EAA0B,MAC1BC,EACX,CACEC,SAAU,CACRC,IAAK,EACLC,IAAK,KACLC,MAAO,KACPC,YAAa,GAEfC,gBAAiB,EACjBC,aAAc,cACdC,aAAc,EACdC,uBAAuB,GAGd7E,EAAqBA,CAAC7G,EAAaC,IACvCD,GAAOC,EA6BV0L,EAEFnN,IAKG,IALF,oBACHoN,EAAmB,sBACnBC,EAAqB,oBACrBC,GAAsB,EAAK,qBAC3BC,GAAuB,GACxBvN,EACC,MAAMwN,EAAOC,EAAAA,EAAKC,mBACZ,EAAEtD,IAAMC,EAAAA,EAAAA,OACR,MAAEvC,GAAUC,EAAAA,EAAMC,WAElB2F,GAAYC,EAAAA,EAAAA,QAEX,sBAAEC,EAAqB,yBAAEC,KAC9BC,EAAAA,EAAAA,KAEIC,GAAiBC,EAAAA,EAAAA,MACjBC,GAAuBC,EAAAA,EAAAA,MAEvBC,EAAeX,EAAAA,EAAKY,SAAS,CAAC,eAAgB,SAAU,CAC5Db,OACAc,UAAU,IAENC,EAA0Bd,EAAAA,EAAKY,SAAS,CAAC,oBAAqB,CAClEb,OACAc,UAAU,MAEL,iBAAEE,EAAgB,UAAEC,EAAS,eAAEC,EAAc,gBAAEC,KACpDC,EAAAA,EAAAA,GAA6B,CAC3BC,mBAAoBb,EAAenC,KACnCqC,qBAAsBA,QAAwBhN,EAC9CkN,aAAcA,KAGZ,oBAAEU,EAAqBC,kBAAmB7E,IAC9C8E,EAAAA,EAAAA,IAAwBd,QAAwBhN,GAE5C+N,EAAmBpO,IAAAA,OAASqJ,GAAe,CAAC5J,EAAOsG,KAAS,IAADsI,EAAAC,EAC/D,QAAI,CAAC,MAAO,MAAO,SAASvD,SAAShF,KAGF,QAAjCsI,EAACR,EAAeU,aAAaxI,UAAI,IAAAsI,IAAhCA,EAAkCzN,KACO,KAAV,QAAhC0N,EAAAT,EAAeU,aAAaxI,UAAI,IAAAuI,OAAA,EAAhCA,EAAkC1N,KAGxB,IAGR4N,GAAgCnH,EAAAA,EAAAA,UACpC,IACErH,IAAAA,OAAqB,OAAZuN,QAAY,IAAZA,OAAY,EAAZA,EAAckB,iBAAkBC,KACvCA,IAAS1O,IAAAA,SAAW,CAAC,MAAO,MAAO,SAAU0O,EAAM3I,QAEvD,CAAa,OAAZwH,QAAY,IAAZA,OAAY,EAAZA,EAAckB,kBAGXE,EAAiC,CACrChO,IAAK,EACLC,IAAKqM,EAAyBrM,IAC9BgN,UAAWX,EAAyBW,WAGhCnF,GAAyBpB,EAAAA,EAAAA,UAAQ,IAC9BuH,EACU,OAAfd,QAAe,IAAfA,OAAe,EAAfA,EAAiBe,QACjBhB,EACAN,IAED,CAAgB,OAAfO,QAAe,IAAfA,OAAe,EAAfA,EAAiBe,QAAShB,EAAgBN,IAExCuB,IAA6BC,EAAAA,EAAAA,IAAkB,KACnD,MAAMC,EAAyBrC,EAAKsC,cAAc,CAChD,WACA,oBAIIC,EAA8Bd,EAAiBY,GACjDA,EACAhP,IAAAA,KAAOoO,GAAkB,GAE7BzB,EAAKwC,eAAe,CAClBtD,SAAU,CACRuD,gBAAiBF,GAAuBF,IAE1C,IAGEK,IAA6CN,EAAAA,EAAAA,IAAkB,KACnE,GACE/O,IAAAA,SACE,CAAC,SAAU,oBACX2M,EAAKsC,cAAc,2BAKrB,GACExG,EAAuBsC,SAAS4B,EAAKsC,cAAc,2BAG9C,GAAIzC,GAAyB/D,EAAuB,GAAI,CAC7D,MAAM6G,EAAqBtP,IAAAA,OAASyI,GAAwB,GAC5DkE,EAAKwC,eAAe,CAClBI,iBAAkBD,IAEpBE,GAAkCF,EACpC,MAEE3C,EAAKwC,eAAe,CAClBI,iBAAkB,WAIxBT,KACAnC,EACG8C,eAAe,CAAC,YAAa,CAC5BC,WAAW,IAEZC,OAAM,QAAS,KAGpB7N,EAAAA,EAAAA,YAAU,KACwB,gBAA5B4L,GACFL,GAAwBgC,IAC1B,GACC,CACDhC,EACAgC,GACA3B,KAGF5L,EAAAA,EAAAA,YAAU,KACRuL,GAAwBgC,IAA4C,GACnE,CACDhC,EACAgC,GACA9B,IAGF,MAAMqC,GAAoCC,IAAqB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAE5D,MAAMC,EAAqE,CACzEtE,IAAuB,QAApBgE,EAAEjC,EAAe/B,WAAG,IAAAgE,OAAA,EAAlBA,EAAoBnP,IACzBoL,KAMG,QALDgE,GAAA1M,EAAAA,EAAAA,MAC8C,QAA3C2M,GAAA3M,EAAAA,EAAAA,IAAgC,QAArB4M,EAACpC,EAAe7B,aAAK,IAAAiE,OAAA,EAApBA,EAAsBtP,IAAK,YAAI,IAAAqP,OAAA,EAA3CA,EAA6C1M,SAAU,KACZ,QAAzC4M,GAAA7M,EAAAA,EAAAA,IAA8B,QAAnB8M,EAACtC,EAAe9B,WAAG,IAAAoE,OAAA,EAAlBA,EAAoBxP,IAAK,YAAI,IAAAuP,OAAA,EAAzCA,EAA2C5M,SAAU,GACtD,IACF,YACD,IAAAyM,OAAA,EALDA,EAKGzM,QAAS,KAIhB,GAAIkL,EAA8BlP,OAAS,EACzC,GACEU,IAAAA,KACEwO,GACCE,IACM,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO3I,OAAQ4G,EAAKsC,cAAc,CAAC,WAAY,sBAEnD,CAAC,IAADoB,EAEAD,EAAiBhB,gBAAkBzC,EAAKsC,cAAc,CACpD,WACA,oBAEFmB,EAAiBnE,YAGd,QAHyBoE,EAC1BxC,EAAeU,aACb5B,EAAKsC,cAAc,CAAC,WAAY,4BACjC,IAAAoB,OAAA,EAFDA,EAEG1P,GACP,KAAO,CAAC,IAAD2P,EAGL,MAAMC,EAMA,QAHJD,EACAtQ,IAAAA,OAASwO,GAAgCgC,GACvCxQ,IAAAA,KAAOqJ,GAAe0B,SAAwB,OAAfyF,QAAe,IAAfA,OAAe,EAAfA,EAAiBzK,OAChD,UAAE,IAAAuK,OAAA,EAFJA,EAEMvK,IAEoB,IAAD0K,EAA3B,GAAIF,EACFH,EAAiBnE,YACmC,QADxBwE,EAC1B5C,EAAeU,aAAagC,UAAsB,IAAAE,OAAA,EAAlDA,EAAoD9P,IACtDyP,EAAiBhB,gBAAkBmB,CAEvC,MAEAH,EAAiBnE,YAAc,EAG5BQ,GAAwBoD,IAE1B,CAAC,MAAO,eAAyBa,SAAS3K,IACzC,MAAM4K,EAASP,EAAiBrK,GAE9B/F,IAAAA,SAAW2Q,IACXA,EAAShE,EAAKsC,cAAc,CAAC,WAAYlJ,YAElCqK,EAAiBrK,EAC1B,IAED,CAAC,MAAO,SAAmB2K,SAAS3K,IACnC,MAAM6K,EAAYR,EAAiBrK,GAEjC/F,IAAAA,SAAW4Q,KACX5I,EAAAA,EAAAA,IACE4I,EACAjE,EAAKsC,cAAc,CAAC,WAAYlJ,KAC9B,UAEGqK,EAAiBrK,EAC1B,KAIJ4G,EAAKwC,eAAe,CAClBtD,SAAU,IACLuE,KAKH7C,GAAyD,IAAzCiB,EAA8BlP,QAChDqN,EAAKkE,cAAc,CAAC,WAAY,eAAgB,GAG9ClE,EAAKsC,cAAc,0BACrB6B,GAAuBnE,EAAKsC,cAAc,CAAC,WAAY,SAAW,MAEpEtC,EACG8C,eAAe,CAAC,YAAa,CAC5BC,WAAW,IAEZC,OAAM,QAAS,GAGpB7N,EAAAA,EAAAA,YAAU,KACR8N,IAAkC,GAIjC,CAACrC,IAEJ,MAAMiC,GAAqCxE,IAAkB,IAAD+F,EAAAC,EAC1D,MAAMtG,EAAS1K,IAAAA,KACE,OAAf8N,QAAe,IAAfA,OAAe,EAAfA,EAAiBe,SAChBnE,GAAWA,EAAOM,OAASA,IAExBiG,EAAQjR,IAAAA,KAAa,OAAN0K,QAAM,IAANA,OAAM,EAANA,EAAQI,eAAgB9K,IAAAA,KAAOqJ,IAC9C0C,EAAkD,QAA/CgF,GAAG1N,EAAAA,EAAAA,MAAkB,OAAL4N,QAAK,IAALA,OAAK,EAALA,EAAOlF,MAAO,GAAK,IAAK,IAAK,UAAE,IAAAgF,OAAA,EAA5CA,EAA8CG,WACpDC,EAAiBnR,IAAAA,KAAOiR,EAAO,CAAC,MAAO,MAAO,UAG9CG,EAA8BpR,IAAAA,KAClCA,IAAAA,KAAOoO,IACN3O,QAAoCY,IAA1B8Q,EAAe1R,KAG5B,IAAI4R,EAGA,CACFpF,YAAa,GAEXmF,IACFC,EAAqB,CACnBjC,gBAAiBgC,EACjBnF,YAAaqF,OAAOH,EAAeC,IAAgC,KAGvEzE,EAAKwC,eAAe,CAClBtD,SAAU,IAELwF,EAEHtF,MACAC,MAA8D,QAAzDgF,GAAE3N,EAAAA,EAAAA,MAAmB,OAANqH,QAAM,IAANA,OAAM,EAANA,EAAQ6G,gBAAiB,GAAK,IAAK,IAAK,UAAE,IAAAP,OAAA,EAAvDA,EACHE,WACJpF,IAAK0F,UAAc,OAALP,QAAK,IAALA,OAAK,EAALA,EAAOnF,MAAO,MAAQ,KAGxCgF,GAAuB/E,GAAO,MAE9BY,EACG8C,eAAe,CAAC,YAAa,CAC5BC,WAAW,IAEZC,OAAM,QAAS,EAGdmB,GAA0BW,KAI5BzJ,EAAAA,EAAAA,IAAuByJ,EAAU,OAAS,IAE1CzJ,EAAAA,EAAAA,IACEyJ,GACAC,EAAAA,EAAAA,IAAmB/D,EAAkB,OAAS,OAC3C,IAEL3F,EAAAA,EAAAA,IAAuB,KAAM2D,GAA2B,EAExDgB,EAAKkE,cAAc,CAAC,WAAY,SAAU,MAE1ClE,EAAKkE,cAAc,CAAC,WAAY,SAAUlF,EAC5C,EAGF,OACExF,EAAAA,EAAAA,MAAAwL,EAAAA,SAAA,CAAA5R,SAAA,EACEH,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACR5G,KAAK,gBACLtL,MAAO6J,EAAE,yBACTsI,MAAO,CACL,CACEC,UAAU,IAEZ/R,UAEFH,EAAAA,EAAAA,KAACmS,EAAAA,EAAmB,CAACC,YAAa7E,EAAenC,KAAMS,YAAU,MAIlEe,GACC5M,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRlS,MAAO6J,EAAE,kCACTyB,KAAK,mBACL8G,UAAQ,EACR1R,MAAO,CAAE6R,aAAchL,EAAMiL,UAAWnS,UAExCH,EAAAA,EAAAA,KAACuS,EAAoB,CACnBzJ,WAAYoE,EAAUsF,QAAQC,8BAC9B1J,oBACEmE,EAAUsF,QAAQC,8BAEpBlP,SAAUA,CAAC1D,EAAOoE,KAChB,OAAQpE,GACN,IAAK,SACH,MACF,IAAK,mBACHkN,EAAKkE,cAAc,yBAAyB,GAC5CjB,IAAiC,GACjC,MACF,QACEjD,EAAKkE,cAAc,yBAAyB,GAC5CrB,GAAkC/P,GAEtC,EAEFgJ,uBAAwBA,MAG1B,MACJ7I,EAAAA,EAAAA,KAAC0S,EAAAA,EAAI,CACHlS,MAAO,CACL6R,aAAchL,EAAM3G,OACpB8J,QAAS0C,EAAUsF,QAAQC,8BACvB,QACA,QACJtS,UAEFH,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRW,aAAcA,CAACC,EAAMC,IACnBD,EAAKjD,mBAAqBkD,EAAIlD,iBAEhCmD,SAAO,EAAA3S,SAEN4S,IAAwB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAtB,cAAEtE,GAAe0D,EACjB,OAEExM,EAAAA,EAAAA,MAAAwL,EAAAA,SAAA,CAAA5R,SAAA,EACgB,OAAbsJ,QAAa,IAAbA,OAAa,EAAbA,EAAeyC,OACdlM,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACR5G,KAAM,CAAC,WAAY,OAEnBtL,OACqB,OAAnBuO,QAAmB,IAAnBA,GAAwB,QAAL2E,EAAnB3E,EAAqBnC,WAAG,IAAA8G,OAAL,EAAnBA,EAA0BY,sBAAuB,MAEnDrL,QAAS,CACPsL,UAAW,QACXjJ,OAAO5K,EAAAA,EAAAA,KAAC8T,EAAAA,GAAK,CAACC,QAAS,8BAEzB7B,UAAQ,EACRD,MAAO,CACL,CACEC,UAAU,GAEZ,CACEnN,KAAM,SACNhE,IAAuB,QAApBkS,EAAEhF,EAAe/B,WAAG,IAAA+G,OAAA,EAAlBA,EAAoBlS,KAG3B,CACEgE,KAAM,SACN/D,IAAuB,QAApBkS,EAAEjF,EAAe/B,WAAG,IAAAgH,OAAA,EAAlBA,EAAoBlS,KAE3B,CACEgT,aAAa,EACbC,UAAWC,MAAOC,EAAMtU,KAAmB,IAADuU,EAAAC,EAAAC,EAAAC,EACxC,OACEnU,IAAAA,SAA6B,QAAnBgU,EAACnG,EAAe/B,WAAG,IAAAkI,OAAA,EAAlBA,EAAoBrT,MAC/BX,IAAAA,SAA6B,QAAnBiU,EAACpG,EAAe/B,WAAG,IAAAmI,OAAA,EAAlBA,EAAoBrT,MAC/B4G,EACoB,QADF0M,EAChBrG,EAAe/B,WAAG,IAAAoI,OAAA,EAAlBA,EAAoBvT,IACF,QADKwT,EACvBtG,EAAe/B,WAAG,IAAAqI,OAAA,EAAlBA,EAAoBvT,KAGfwT,QAAQC,OACb9K,EACE,8DAIFmD,GAEA1M,IAAAA,SAAW4N,EAAU9B,MACrBrM,EAAQmO,EAAU9B,IAEXsI,QAAQC,OACb9K,EACE,kDAKD6K,QAAQE,SAAS,IAG5BvU,UAEFH,EAAAA,EAAAA,KAAC2U,EAAAA,EAAqB,CACpBzT,iBAAkB,CAChByC,YACqB,OAAnB0K,QAAmB,IAAnBA,GAAwB,QAAL8E,EAAnB9E,EAAqBnC,WAAG,IAAAiH,OAAL,EAAnBA,EAA0ByB,eAC1BjL,EAAE,0BAEN3D,YAAa,CACXgB,MAAO,IAEDgH,EAAU9B,IACV,CACE,CAAC8B,EAAU9B,KAAM,CACfpM,OAAOE,EAAAA,EAAAA,KAAC6U,EAAa,MAGzB,CAAC,KACiB,QAAlBzB,EAAAnF,EAAe/B,WAAG,IAAAkH,GAAlBA,EAAoBrS,IACpB,CACE,CAAmB,QAAnBsS,EAACpF,EAAe/B,WAAG,IAAAmH,OAAA,EAAlBA,EAAoBtS,KACD,QADIuS,EACtBrF,EAAe/B,WAAG,IAAAoH,OAAA,EAAlBA,EAAoBvS,KAExB,CAAC,KACiB,QAAlBwS,EAAAtF,EAAe/B,WAAG,IAAAqH,GAAlBA,EAAoBvS,IACpB,CACE,CAAmB,QAAnBwS,EAACvF,EAAe/B,WAAG,IAAAsH,OAAA,EAAlBA,EAAoBxS,KAAM,CACzBR,MAAO,CACLT,MAAOsH,EAAMqB,oBAEf5I,MAAyB,QAApB2T,EAAExF,EAAe/B,WAAG,IAAAuH,OAAA,EAAlBA,EAAoBzS,MAG/B,CAAC,IAGTD,IAAuB,QAApB2S,EAAEzF,EAAe/B,WAAG,IAAAwH,OAAA,EAAlBA,EAAoB3S,IACzBC,IAAuB,QAApB2S,EAAE1F,EAAe/B,WAAG,IAAAyH,OAAA,EAAlBA,EAAoB3S,IACzBwD,KAAM,EACNjB,SAAUA,KACRwJ,EAAKkE,cAAc,mBAAoB,SAAS,OAK1C,OAAbxH,QAAa,IAAbA,OAAa,EAAbA,EAAe0C,OACd5F,EAAAA,EAAAA,MAACyG,EAAAA,EAAKgF,KAAI,CACRlS,MAAO6J,EAAE,2BACTpB,QAAS,CACPsL,UAAW,QACXiB,MAAO,CACLC,QAAU1S,GAAWA,EAAE2S,kBAEzBpK,OACE5K,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,UAAU,SACV6U,QAAU1S,GAAMA,EAAE2S,iBAAiB7U,UAEnCH,EAAAA,EAAAA,KAAC8T,EAAAA,GAAK,CAACC,QAAS,mCActB7B,UAAQ,EAAA/R,SAAA,EAERH,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRc,SAAO,EACPH,aAAcA,CAACC,EAAMqC,IACnBrC,EAAK3G,SAASG,QAAU6I,EAAKhJ,SAASG,MACvCjM,SAEAA,KAAO,IAAD+U,EAAAC,EAAAC,EACL,OACEpV,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACR5G,KAAM,CAAC,WAAY,OACnB0H,SAAO,EACPb,MAAO,CACL,CACEC,UAAU,GAEZ,CACE+B,UAAWC,MAAOC,EAAMtU,KAAmB,IAADwV,EAAAC,EAQtCC,EAPF,OACEnV,IAAAA,SAAWP,IACO,QADDwV,EACjBpH,EAAe9B,WAAG,IAAAkJ,GAAlBA,EAAoBrU,MACpBoH,EAAAA,EAAAA,IACEvI,EACkB,QADbyV,EACLrH,EAAe9B,WAAG,IAAAmJ,OAAA,EAAlBA,EAAoBtU,KAClB,EAEGwT,QAAQC,OACb9K,EAAE,+BAAgC,CAChCyB,KAAMzB,EAAE,2BACR3I,IACEZ,IAAAA,SACoB,QAAlBmV,EAAAtH,EAAe9B,WAAG,IAAAoJ,OAAA,EAAlBA,EAAoBvU,MAAO,MACzB,QASHwT,QAAQE,SACjB,GAGJ,CAEET,UAAWC,MAAOC,EAAMtU,KAAmB,IAAD2V,EAAAC,EActCC,EAPF,OACGtV,IAAAA,UAAYP,IACK,QADC2V,EACnBvH,EAAe9B,WAAG,IAAAqJ,GAAlBA,EAAoBzU,MACpBqH,EAAAA,EAAAA,IACEvI,GACkB,QAAlB4V,EAAAxH,EAAe9B,WAAG,IAAAsJ,OAAA,EAAlBA,EAAoB1U,MAAO,MACzB,EAEGyT,QAAQC,OACb9K,EAAE,6BAA8B,CAC9BgM,KAAMvV,IAAAA,SACc,QAAlBsV,EAAAzH,EAAe9B,WAAG,IAAAuJ,OAAA,EAAlBA,EAAoB3U,MAAO,SAK1ByT,QAAQE,SACjB,GAGJ,CACEV,aAAa,EACbC,UAAWC,MAAOC,EAAMtU,KAAmB,IAAD+V,EAAAC,EACxC,OACEzN,EAAAA,EAAAA,IACoB,QADEwN,EACpB3H,EAAe9B,WAAG,IAAAyJ,OAAA,EAAlBA,EAAoB7U,IACF,QADK8U,EACvB5H,EAAe9B,WAAG,IAAA0J,OAAA,EAAlBA,EAAoB7U,KAClB,EAEGwT,QAAQC,OACb9K,EACE,8DAIFmD,IAEC1M,IAAAA,UAAYP,IACboO,EAAe9B,MACf/D,EAAAA,EAAAA,IACEvI,EACAmO,EAAU7B,IAAM,KACd,EAEGqI,QAAQC,OACb9K,EACE,kDAKD6K,QAAQE,SAAS,IAG5BvU,UAEFH,EAAAA,EAAAA,KAAC8V,EAAgC,CAC/B9U,IAAuB,QAApBkU,EAAEjH,EAAe9B,WAAG,IAAA+I,OAAA,EAAlBA,EAAoBlU,IAOzBD,IAAuB,QAApBoU,EAAElH,EAAe9B,WAAG,IAAAgJ,OAAA,EAAlBA,EAAoBpU,IAOzBgV,YAAa,MACb5O,WAAY,IAuCN6G,EAAU7B,IACV,CAEE,CAAyC,QAAzCiJ,GAAC3R,EAAAA,EAAAA,IAAYuK,EAAU7B,IAAM,IAAK,IAAK,UAAE,IAAAiJ,OAAA,EAAxCA,EACGY,aAAc,CAChBlW,OAAOE,EAAAA,EAAAA,KAAC6U,EAAa,MAGzB,CAAC,GAEPtR,SAAWsO,IAENA,GACA9E,EAAKsC,cAAc,2BAGtB6B,GAAuBW,GAEvB9E,EAAKkE,cACH,mBACA,UACD,KAGK,KAKlB1K,EAAAA,EAAAA,MAACtG,EAAAA,EAAI,CAACC,UAAU,SAASsG,IAAK,MAAOG,MAAM,QAAOxG,SAAA,EAChDoG,EAAAA,EAAAA,MAACtG,EAAAA,EAAI,CAACC,UAAU,MAAMsG,IAAK,KAAKrG,SAAA,CAC7BwJ,EAAE,+CAAgD,KACnD3J,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRc,SAAO,EACP1H,KAAM,wBACN6K,cAAc,UAAS9V,UAEvBH,EAAAA,EAAAA,KAACkW,EAAAA,EAAM,CACLP,KAAK,QACLpS,SAAW4S,IACLA,GACFjF,GACEnE,EAAKsC,cAAc,CAAC,WAAY,SAC9B,MAGNtC,EAAKkE,cAAc,mBAAoB,SAAS,UAKxDjR,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRc,SAAO,EACPH,aAAcA,CAACC,EAAMqC,IACnBrC,EAAK3G,SAASE,MAAQ8I,EAAKhJ,SAASE,KACpCyG,EAAKnG,wBACHwI,EAAKxI,sBACRtM,SAEAA,KAAO,IAADiW,EACL,OACEpW,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRc,SAAO,EACP1H,KAAM,CAAC,WAAY,SAGnBiL,OAAQtJ,EAAKsC,cACX,yBAEF9G,SACEvI,EAAAA,EAAAA,KAAC8T,EAAAA,GAAK,CACJC,QAAS,sCAGbuC,aAAc,CAAC,CAAC,WAAY,QAC5BrE,MAAO,CACL,CACEC,UAAU,GAEZ,CAAC,EACD,CACE+B,UAAWC,MAAOC,EAAMtU,KAAmB,IAAD0W,EAAAC,EACxC,GACEpW,IAAAA,QAC2B,QADlBmW,EACPlH,EAAc,mBAAW,IAAAkH,OAAA,EAAzBA,EAA2BpK,MAE7B/L,IAAAA,QAAUP,KACVuI,EAAAA,EAAAA,IAC2B,QADLoO,EACpBnH,EAAc,mBAAW,IAAAmH,OAAA,EAAzBA,EAA2BrK,IAC3BtM,IACG,EAEL,OAAO2U,QAAQE,UAEf,MAAM/K,EACJ,gDAEJ,IAGJxJ,UAEFH,EAAAA,EAAAA,KAAC8V,EAEC,CACA/U,IAAyB,QAAtBqV,EAAEnI,EAAe7B,aAAK,IAAAgK,OAAA,EAApBA,EAAsBrV,IAE3BgV,YAAa,MACb/U,IACE+L,EAAKsC,cAAc,CAAC,WAAY,SAChC,KAEFjI,YAAU,EACV7D,SAAUA,KACRwJ,EAAKkE,cACH,mBACA,SACD,KAGK,WAOxBjR,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRc,SAAO,EACPH,aAAcA,CAACC,EAAMqC,KAAU,IAADwB,EAAAC,EAC5B,OACe,QAAbD,EAAA7D,EAAK3G,gBAAQ,IAAAwK,OAAA,EAAbA,EAAejH,oBACA,QADekH,EAC5BzB,EAAKhJ,gBAAQ,IAAAyK,OAAA,EAAbA,EAAelH,kBAGjBoD,EAAKpG,eAAiByI,EAAKzI,YAAY,EAEzCrM,SAEDwW,IAAwB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAtB,cAAE5H,GAAesH,EACjB,MAAMvH,EAAyBC,EAAc,CAC3C,WACA,oBAEF,OACErP,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACR5G,KAAM,CAAC,WAAY,eACnBtL,MAAO6J,EAAE,kCACTpB,QAAS,CACPsL,UAAW,QACXjJ,OACE5K,EAAAA,EAAAA,KAAC8T,EAAAA,GAAK,CACJC,QAAS,wCAIf9B,MAAO,CACL,CACEC,SAAUtD,EAA8BlP,OAAS,GAEnD,CACEqF,KAAM,SACNhE,KAGG,QAFD6V,EAAA3I,EAAeU,aACbS,UACD,IAAAwH,OAAA,EAFDA,EAEG7V,MAAO,EACZC,IAEC,QAFE6V,EAAE5I,EAAeU,aAClBS,UACD,IAAAyH,OAAA,EAFIA,EAEF7V,KAEL,CACEiT,UAAWC,MAAOC,EAAWtU,IAEzBO,IAAAA,SAAWgP,EAAwB,WACnCrC,EAAKsC,cAAc,iBAAmB,GACtCxP,EAAQ,IAAM,EAEP2U,QAAQC,OACb9K,EACE,2DAIG6K,QAAQE,WAIrB,CACEV,aAAa,EACbC,UAAWC,MAAOC,EAAWtU,KAAmB,IAADqX,EAAAC,EAAAC,EAAAC,EAC7C,OACEjX,IAAAA,SAGG,QAHO8W,EACRjJ,EAAeU,aACbS,UACD,IAAA8H,OAAA,EAFDA,EAEGnW,MAELX,IAAAA,SAGG,QAHO+W,EACRlJ,EAAeU,aACbS,UACD,IAAA+H,OAAA,EAFDA,EAEGnW,MAEL4G,EAGG,QAHewP,EAChBnJ,EAAeU,aACbS,UACD,IAAAgI,OAAA,EAFDA,EAEGrW,IAGF,QAHKsW,EACNpJ,EAAeU,aACbS,UACD,IAAAiI,OAAA,EAFDA,EAEGrW,KAGEwT,QAAQC,OACb9K,EACE,8DAIFmD,GAEA1M,IAAAA,SACE4N,EAAUW,aACRS,KAGJvP,EACEmO,EAAUW,aACRS,GAGGoF,QAAQC,OACb9K,EACE,kDAKD6K,QAAQE,SAAS,IAG5BvU,UAEFH,EAAAA,EAAAA,KAAC2U,EAAAA,EAAqB,CACpB3O,YAAa,CACXgB,MAAO,CACL,EAAG,KAECgH,EAAUW,aAAaS,GACvB,CACE,CAACpB,EAAUW,aACTS,IACE,CACFtP,OAAOE,EAAAA,EAAAA,KAAC6U,EAAa,MAGzB,CAAC,KACDzU,IAAAA,SAGD,QAHW0W,EACZ7I,EAAeU,aACbS,UACD,IAAA0H,OAAA,EAFDA,EAEG9V,KAED,CAEE,CAEC,QAFD+V,EAAC9I,EAAeU,aACdS,UACD,IAAA2H,OAAA,EAFAA,EAEE/V,KAGA,QAHGgW,EACJ/I,EAAeU,aACbS,UACD,IAAA4H,OAAA,EAFDA,EAEGhW,KAEP,CAAC,GAEPuH,QAAS,CACPC,UAAW,WAAgB,IAAD8O,EACxB,MAAO,GADQ7R,UAAA/F,OAAA,QAAAe,IAAAgF,UAAA,GAAAA,UAAA,GAAG,MACoB,OAAnB4I,QAAmB,IAAnBA,GAA6C,QAA1BiJ,EAAnBjJ,EAAsBe,UAAuB,IAAAkI,OAA1B,EAAnBA,EAA+C1C,eAAgB,IACpF,EACA5Q,OACE4K,EAA8BlP,QAAU,SAEpCe,IAGVsF,SAC2C,IAAzC6I,EAA8BlP,QAC9BU,IAAAA,QACE2M,EAAKsC,cAAc,CAAC,eAAgB,YAGxCtO,IAAK,EACLC,IACqD,QADlDiW,EACDhJ,EAAeU,aAAaS,UAAuB,IAAA6H,OAAA,EAAnDA,EACIjW,IAENwD,KACEpE,IAAAA,SAAWgP,EAAwB,WACnCrC,EAAKsC,cAAc,gBAAkB,EACjC,GACA,EAEN9L,SAAUA,KACRwJ,EAAKkE,cAAc,mBAAoB,SAAS,EAElD/P,iBAAkB,CAChByC,YACE3D,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRc,SAAO,EACP1H,KAAM,CAAC,WAAY,mBACnBmM,aAAcnX,IAAAA,KAAOoO,GAAkB,GAAGrO,UAE1CH,EAAAA,EAAAA,KAAC4D,EAAAA,EAAM,CACLC,UAAW,EACXkC,SAEI,IADF6I,EAA8BlP,QAE9BU,IAAAA,QACE2M,EAAKsC,cAAc,CACjB,eACA,YAIN/K,WACElE,IAAAA,KAAOoO,GAAoB,OACvB/N,EACA,KAON+W,uBAAuB,EACvBvT,QAAS7D,IAAAA,IACPoO,GACA,CAAC3O,EAAOuL,KAAU,IAADqM,EACf,MAAO,CACL5X,MAAOuL,EACPtL,OACqB,OAAnBuO,QAAmB,IAAnBA,GAA2B,QAARoJ,EAAnBpJ,EAAsBjD,UAAK,IAAAqM,OAAR,EAAnBA,EACI7C,eAAgB,OACtB7O,SACE6I,EAA8BlP,OAC5B,IACDU,IAAAA,KACCwO,GACCE,IAAe,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO3I,OAAQiF,IAE/B,YAQL,MAIjB,MAKVuB,GACC3M,EAAAA,EAAAA,KAAC0S,EAAAA,EAAI,CACHlS,MAAO,CACL6R,aAAchL,EAAM3G,QACpBP,UAEFH,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRc,SAAO,EACPH,aAAcA,CAACC,EAAMqC,IACnBrC,EAAKpG,eAAiByI,EAAKzI,aAC5BrM,SAEAA,KAEGH,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACR5G,KAAM,CAAC,mBACPtL,MAAO6J,EAAE,uBACTpB,SAASvI,EAAAA,EAAAA,KAAC8T,EAAAA,GAAK,CAACC,QAAS,iCACzB7B,UAAQ,EACRD,MAAO,CACL,CACEC,UAAU,GAEZ,CACE8B,aAAa,EACbC,UAAWC,MAAOC,EAAMtU,IAClBiN,GAEAiC,GACAlP,EAAQkP,EAA+Bf,UAEhCwG,QAAQC,OACb9K,EACE,kDAKD6K,QAAQE,YAGnBvU,UAEFH,EAAAA,EAAAA,KAAC2U,EAAAA,EAAqB,CACpBzT,iBAAkB,CAChByC,WAAY,KAEdoC,SAAUgH,EAAKsC,cAAc,gBAAkB,EAC/CrJ,YAAa,CACXgB,MAAO,CACL,CAA+B,OAA9B+H,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgChO,KACD,OAA9BgO,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgChO,OAEA,OAA9BgO,QAA8B,IAA9BA,GAAAA,EAAgCf,UAChC,CACE,CAA+B,OAA9Be,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgCf,WAAY,CAC3ClO,OAAOE,EAAAA,EAAAA,KAAC6U,EAAa,MAGzB,CAAC,EACL,CAA+B,OAA9B9F,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgC/N,KACD,OAA9B+N,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgC/N,MAGtCD,IAAmC,OAA9BgO,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgChO,IACrCC,IAAmC,OAA9B+N,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAgC/N,YAO/C,KAEHkM,EAAUwK,SAAS,qBAElB1X,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRlS,MAAO6J,EAAE,gCACTpB,SACEhC,EAAAA,EAAAA,MAACtG,EAAAA,EAAI,CAACC,UAAU,SAASyG,MAAM,QAAOxG,SAAA,CACnCwJ,EAAE,gCACH3J,EAAAA,EAAAA,KAAC8T,EAAAA,GAAK,CAACC,QAAS,qCAChB/T,EAAAA,EAAAA,KAAC2X,EAAAA,EAAO,CAACnX,MAAO,CAAE2H,gBAAiBd,EAAMuQ,eACxCjO,EAAE,+BACH3J,EAAAA,EAAAA,KAAC8T,EAAAA,GAAK,CAACC,QAAS,sCAGpB7B,UAAQ,EAAA/R,UAERH,EAAAA,EAAAA,KAAC0S,EAAAA,EAAI,CACHlS,MAAO,CACL6R,aAAchL,EAAM3G,QACpBP,UAEFoG,EAAAA,EAAAA,MAACsR,EAAAA,EAAG,CAACC,OAAQzQ,EAAM0Q,SAAS5X,SAAA,EAC1BH,EAAAA,EAAAA,KAACgY,EAAAA,EAAG,CAACC,GAAI,GAAG9X,UAEVH,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CAAC5G,KAAM,eAAgB8G,UAAQ,EAAA/R,UACvCoG,EAAAA,EAAAA,MAAC2R,EAAAA,GAAAA,MAAW,CACV3U,SAAWlB,IACT0K,EAAK8C,iBAAiBE,OAAM,QAAS,EACrC5P,SAAA,EAEFH,EAAAA,EAAAA,KAACkY,EAAAA,GAAAA,OAAY,CAACrY,MAAM,cAAaM,SAC9BwJ,EAAE,kCAEL3J,EAAAA,EAAAA,KAACkY,EAAAA,GAAAA,OAAY,CAACrY,MAAM,aAAYM,SAC7BwJ,EAAE,wCAKX3J,EAAAA,EAAAA,KAACgY,EAAAA,EAAG,CAACC,GAAI,GAAG9X,UACVH,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACRc,SAAO,EACPH,aAAcA,CAACC,EAAMqC,IACnBrC,EAAKrG,eAAiB0I,EAAK1I,aAC5BpM,SAEAA,KAAO,IAADgY,EACL,MAAMC,EAA6BhY,IAAAA,IAAM,CACrB,QADqB+X,EACvClK,EAAe/B,WAAG,IAAAiM,OAAA,EAAlBA,EAAoBnX,IACpBoM,EAAsBiL,6BAElBC,EACmC,gBAAvCvL,EAAKsC,cAAc,gBACf1F,EAAE,8BACFA,EAAE,yBACR,OACE3J,EAAAA,EAAAA,KAACgN,EAAAA,EAAKgF,KAAI,CACR5G,KAAM,eACNtL,MAAO6J,EAAE,gCACTuI,UAAQ,EACRD,MAAO,CACL,CACE+B,aAAa,EACbC,UAAWC,MAAOC,EAAMtU,KACtB,GAAIiN,EAAsB,CACxB,MAAMyL,EAASnY,IAAAA,IAAM,CACnB4N,EAAU9B,IACVkB,EAAsBiL,6BAExB,GAAIjY,IAAAA,SAAWmY,IAAW1Y,EAAQ0Y,EAChC,OAAO/D,QAAQC,OACb9K,EACE,iDAIR,CACA,OAAO6K,QAAQE,SAAS,IAG5BvU,UAEFH,EAAAA,EAAAA,KAAC2U,EAAAA,EAAqB,CACpB5T,IAAK,EACLyD,KAAM,EAENxD,IACEZ,IAAAA,SAAWgY,GACPA,OACA3X,EAENsF,SAAyC,IAA/BqS,EACVpS,YAAa,CACXgB,MAAO,CACL,EAAG,OAECgH,EAAU9B,IACV,CACE,CAAC8B,EAAU9B,KAAM,CACfpM,OAAOE,EAAAA,EAAAA,KAAC6U,EAAa,MAGzB,CAAC,KACDzU,IAAAA,SAAWgY,GACX,CACE,CAACA,GACCA,GAEJ,CAAC,GAEP7P,QAAS,CACPC,UAAW,WACT,MAAO,GADQ/C,UAAA/F,OAAA,QAAAe,IAAAgF,UAAA,GAAAA,UAAA,GAAG,KACC6S,GACrB,IAGJpX,iBAAkB,CAChByC,WAAY2U,GAEd/U,SAAW1D,IACLA,EAAQ,GACVkN,EAAKkE,cAAc,kBAAmB,EACxC,KAGM,eAS3B,EAID4D,EAA8CA,KAClD,MAAM,MAAExN,GAAUC,EAAAA,EAAMC,WACxB,OACEvH,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHO,MAAO,CACLgY,SAAU,WACVC,KAAM,GACNC,UAAW,mBACX3Y,MAAOsH,EAAMsR,aACbC,QAAS,IACTzY,UAEFH,EAAAA,EAAAA,KAAC6Y,EAAAA,EAAiB,KACb,EAQX,EAJ4ClZ,EAAAA,KAC1C+M,GAKWsC,EAA4BA,CACvCC,EACAhB,EACAN,KAEA,MAAMiB,EAAgCxO,IAAAA,OACxB,OAAZuN,QAAY,IAAZA,OAAY,EAAZA,EAAckB,iBACbC,KACCA,IAAS1O,IAAAA,SAAW,CAAC,MAAO,MAAO,SAAU0O,EAAM3I,OAGjD2S,EAAgB1Y,IAAAA,OAAS6O,GAAUnE,GAQhC1K,IAAAA,MAAQ0K,EAAOI,gBAAgB,CAACrL,EAAOsG,KAC5C,GAAY,QAARA,EAAe,CAAC,IAAD4S,EAAAC,EAAAC,EAGjB,SADsD,kBAAV,QAA1BF,EAAO9K,EAAe9H,UAAI,IAAA4S,OAAA,EAAnBA,EAAqB/X,OAGJ,kBAA/B8J,EAAOI,eAAe/E,IACS,kBAAV,QAA1B6S,EAAO/K,EAAe9H,UAAI,IAAA6S,OAAA,EAAnBA,EAAqBhY,OAC5BoH,EAAAA,EAAAA,IACE0C,EAAOI,eAAe/E,GACH,QADO8S,EAC1BhL,EAAe9H,UAAI,IAAA8S,OAAA,EAAnBA,EAAqBjY,MAClB,CACb,CAAO,GAAY,UAARmF,EAET,OAAO,EACF,GAAY,QAARA,EAAe,CAAC,IAAD+S,EAAAC,EAGxB,QADkB/Y,IAAAA,MAAQA,IAAAA,SAA8B,QAApB8Y,EAACjL,EAAe9H,UAAI,IAAA+S,OAAA,EAAnBA,EAAqBlY,QAGrDZ,IAAAA,SAAW0K,EAAOI,eAAe/E,KAAS,IACzC/F,IAAAA,SAA8B,QAApB+Y,EAAClL,EAAe9H,UAAI,IAAAgT,OAAA,EAAnBA,EAAqBnY,IACxC,CAAQ,IAADoY,EAAAC,EAKL,QAHkBjZ,IAAAA,MAChBA,IAAAA,SAA2C,QAAjCgZ,EAACnL,EAAeU,aAAaxI,UAAI,IAAAiT,OAAA,EAAhCA,EAAkCpY,QAI1CZ,IAAAA,SAAW0K,EAAOI,eAAe/E,KAAS,IACzC/F,IAAAA,SAA2C,QAAjCiZ,EAACpL,EAAeU,aAAaxI,UAAI,IAAAkT,OAAA,EAAhCA,EAAkCrY,IACrD,MAEDpB,KAAKkL,GAAWA,EAAOM,OAEpBkO,EAA2BlZ,IAAAA,OAAS6O,GAAUnE,IAClD,MAAMyO,EAA8BnZ,IAAAA,OAClC0K,EAAOI,gBACP,CAACrL,EAAOsG,KACN,GAAI,CAAC,MAAO,MAAO,SAASgF,SAAShF,GAAM,OAAO,CAAI,IAG1D,OAA6C,IAAzCyI,EAA8BlP,SAG5BU,IAAAA,QAAUmZ,GAQPnZ,IAAAA,KAAOwO,GAAgCE,IAErC,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO3I,MACPoT,EAAiC,OAALzK,QAAK,IAALA,OAAK,EAALA,EAAO3I,MACnC/F,IAAAA,SAAWmZ,EAAiC,OAALzK,QAAK,IAALA,OAAK,EAALA,EAAO3I,OAC5C/F,IAAAA,SAAgB,OAAL0O,QAAK,IAALA,OAAK,EAALA,EAAO/N,MAG1B,IACCnB,KAAKkL,GAAWA,EAAOM,OAC1B,OAAgD,IAAzCwD,EAA8BlP,OACjCoZ,EACA1Y,IAAAA,aAAe0Y,EAAeQ,EAAyB,C,iJC/4C7D,MAsJA,EAtJgE/Z,IAQzD,IAR0D,YAC/D6S,EAAW,kBACXoH,EAAiB,OACjBC,EAAM,YACNC,EAAW,SACXC,EAAQ,QACRpP,KACGvB,GACJzJ,EACC,MAAMqa,GAAwBC,EAAAA,EAAAA,OACvB5Q,IAAY5C,EAAAA,EAAAA,IAAkB,UAC9ByT,EAAyBC,IAC9B3Y,EAAAA,EAAAA,GAA6B,CAC3BvB,MAAO6Z,EACPnW,SAAUoW,KAGP3P,EAAmBC,IACxB7I,EAAAA,EAAAA,GAAqB4H,IAEfgR,KAAMC,IAAmCC,EAAAA,EAAAA,IAsB/C,CACAC,SAAU,CAAC,2BAA4B/H,GACvCgI,QAASA,KACP,MAAMC,EAAS,IAAIC,gBAEnB,OADAD,EAAOE,IAAI,QAASnI,GACboC,QAAQgG,IAAI,CACjBZ,EAAsB,CACpBa,OAAQ,MACRC,IAAK,mBAAmBL,EAAOpX,eAEjC2W,EAAsB,CACpBa,OAAQ,MACRC,IAAK,sBAEP,EAEJC,UAAW,EACX1R,SAAUA,IAGN2R,EAAqBxa,IAAAA,QACK,OAA9B6Z,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAiC,GAAGY,aACnCC,IAAI,IAAAC,EAAA,OAA8B,QAA9BA,EAAS,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAME,2BAAmB,IAAAD,EAAAA,EAAI,EAAE,IAGrCE,EAAiB7a,IAAAA,OACS,OAA9B6Z,QAA8B,IAA9BA,OAA8B,EAA9BA,EAAiC,GAAGiB,gBACnCJ,IACK1a,IAAAA,SAAWwa,EAAoBE,EAAK1P,SAGpCqO,GACKA,EAAOqB,EAAK1P,UAMzBlJ,EAAAA,EAAAA,YAAU,KAEN8H,IACC5J,IAAAA,KAAO6a,GAAiBH,GAASA,EAAK1P,OAASpB,KAEhDC,OAAqBxJ,EACvB,GACC,CAACwa,EAAgBjR,EAAmBC,IACvC,MAAMkR,EACJ/a,IAAAA,KAAO6a,GAAiBH,GAAuB,YAAdA,EAAK1P,QACtC6P,EAAe,GACXG,EAAqBD,EACvB,CACErb,MAAOqb,EAA0B/P,KACjCvL,MAAOsb,EAA0B/P,WAEnC3K,GAEJyB,EAAAA,EAAAA,YAAU,KAENsX,GACA4B,GACAA,EAAmBvb,QAAUmJ,EAAYnJ,OAEzCoK,EAAqBmR,EAAmBvb,MAAOub,EACjD,GAEC,CAAC5B,IAEJ,MAAM6B,EAGFrS,EAAY6C,WACZ,CACE8N,SAAUI,EACVL,YAAaI,EACbjO,YAAY,GAEd,CAAC,EAEL,OACE7L,EAAAA,EAAAA,KAAC4D,EAAAA,EAAM,CACL0X,0BAAwB,KACpBD,EACJha,aAAcmY,EAAoB4B,OAAqB3a,EACvDsD,wBAA0BC,MAO1BuG,QAASA,EACTtG,QAAS7D,IAAAA,IAAM6a,GAAiBM,IACvB,CAAE1b,MAAO0b,EAAcnQ,KAAMtL,MAAOyb,EAAcnQ,SAE3DoQ,aAAevU,IAAY,IAADwU,EACxB,OACEzb,EAAAA,EAAAA,KAAC0b,EAAAA,EAAe,CAACC,QAAS7B,EAAwB3Z,SAC9B,QAD8Bsb,EAC/CxU,EAAO+S,KAAKna,aAAK,IAAA4b,OAAA,EAAjBA,EAAmBxY,YACJ,KAGlB+F,EACJnJ,MAAOmK,EACPzG,SAAU0G,GACV,C,gLClIN,MAAMsB,EAAgDhM,IAO/C,IAAD+X,EAAAlH,EAAA,IAPiD,KACrDrL,EACAlF,MAAO+b,EAAM,MACbC,EAAK,KACLC,EAAI,YACJtQ,GAAc,EAAK,IACnBxK,GACDzB,EACC,MAAM,MAAE8H,GAAUC,EAAAA,EAAMC,WAClBwU,GAAerO,EAAAA,EAAAA,OACf,oBAAEW,IAAwBE,EAAAA,EAAAA,IAC9BwN,QAAgBtb,GAGZub,EAAgBJ,IAAoB,IAAD5I,EAAA7C,EAAAgD,EACvC,OAA0B,OAAnB9E,QAAmB,IAAnBA,GAA2B,QAAR2E,EAAnB3E,EAAsBtJ,UAAK,IAAAiO,GAA3BA,EAA6BiJ,cAAcC,OAC9CxK,OAAwC,QAAlCvB,GAAC1M,EAAAA,EAAAA,IAAYmY,EAAQ,IAAK,GAAG,UAAK,IAAAzL,OAAA,EAAjCA,EAAmC6F,aAAa/S,aACnC,OAAnBoL,QAAmB,IAAnBA,GAA2B,QAAR8E,EAAnB9E,EAAsBtJ,UAAK,IAAAoO,OAAR,EAAnBA,EAA6B8I,cAAcE,eAAgB,GAAK,EAC/DvT,WAAWgT,GAAQtY,QAAQ,GAC3BsY,CAAM,EAGd,OACErV,EAAAA,EAAAA,MAACtG,EAAAA,EAAI,CAACC,UAAU,MAAMsG,IAAI,MAAKrG,SAAA,CACT,OAAnBkO,QAAmB,IAAnBA,GAAAA,EAAsBtJ,IACrB/E,EAAAA,EAAAA,KAACoc,EAAgB,CAACrX,KAAMA,EAAMsX,aAAc7Q,IAE5CzG,GAGFwB,EAAAA,EAAAA,MAACrC,EAAAA,EAAWC,KAAI,CAAAhE,SAAA,CACb6b,EAAaJ,GACbxb,IAAAA,YAAcY,GACX,KACQ,aAARA,EACE,UACA,IAAIgb,EAAahb,SAEzBhB,EAAAA,EAAAA,KAACkE,EAAAA,EAAWC,KAAI,CAACY,KAAK,YAAW5E,UACX,OAAnBkO,QAAmB,IAAnBA,GAA2B,QAARiJ,EAAnBjJ,EAAsBtJ,UAAK,IAAAuS,OAAR,EAAnBA,EAA6B1C,eAAgB,KAEtC,QAAT7P,GAAsB,OAAJ+W,QAAI,IAAJA,GAAAA,EAAM1P,QAAa,OAAJ0P,QAAI,IAAJA,OAAI,EAAJA,EAAM1P,OAAQ,GAC9C7F,EAAAA,EAAAA,MAACrC,EAAAA,EAAWC,KAAI,CACdY,KAAK,YACLvE,MAAO,CAAE8b,SAAUjV,EAAMkV,YAAapc,SAAA,CACvC,SACmD,QAA5CiQ,GAAC3M,EAAAA,EAAAA,IAAYqY,EAAK1P,MAAQ,IAAK,IAAK,GAAG,UAAK,IAAAgE,OAAA,EAA3CA,EAA6C4F,YAAY,UAGhE,KACH6F,IACI,EAILW,EAA6DzJ,IAG5D,IAH6D,KAClE4C,EAAO,GAAE,SACTxV,GACD4S,EACC,OAEE/S,EAAAA,EAAAA,KAAA,YACEQ,MAAO,CACL,kBAAmB,GAAGmV,EAAO,MAC7B9P,MAAO8P,EACP7P,OAAQ6P,GACRxV,SAEDA,GAEQ,EAWFic,EAA+CzF,IAOrD,IAAD8F,EAAA,IAPuD,KAC3D1X,EAAI,KACJ4Q,EAAO,GAAE,SACT+G,GAAW,EAAI,SACfC,GAAW,EAAI,YACfN,GAAc,KACXvH,GACJ6B,EACC,MAAMiG,EAAkE,CACtE1Q,KAAKlM,EAAAA,EAAAA,KAACwc,EAAW,CAAC7G,KAAMA,EAAKxV,SAAC,oBAC9BgM,KAAKnM,EAAAA,EAAAA,KAACwc,EAAW,CAAC7G,KAAMA,EAAKxV,SAAC,WAC9B,cAAe,sCACf,cAAe,sCACf,cAAe,4BACf,cAAcH,EAAAA,EAAAA,KAACwc,EAAW,CAAC7G,KAAMA,EAAKxV,SAAC,gBACvC,cAAcH,EAAAA,EAAAA,KAACwc,EAAW,CAAC7G,KAAMA,EAAKxV,SAAC,gBACvC,cAAe,6BACf,mBAAoB,6BACpB,gBAAiB,6BACjB,gBAAiB,+BACjB,wBAAyB,oCAGrB0c,EAEL,QAFeJ,EAAGG,EACjB7X,UACD,IAAA0X,EAAAA,GAAIzc,EAAAA,EAAAA,KAAC8c,EAAAA,EAAa,IAEbC,EACkB,kBAAfF,GACL7c,EAAAA,EAAAA,KAAA,UACM8U,EACJtU,MAAO,CACLsF,OAAQ6P,EACRqH,UAAW,YACPlI,EAAMtU,OAAS,CAAC,GAGtBoF,IAAKgX,EAAuB7X,IAAS,GACrCS,IAAKT,KAGP/E,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACO,MAAO,CAAEqF,MAAO,GAAIC,OAAQ,IAAK3F,SAAE0c,GAAc9X,IAG3D,OAAOsX,GACLrc,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CAACC,MAAO7F,EAAK5E,SAAE4c,KAEvB/c,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACO,MAAO,CAAEyc,cAAe,QAAS9c,SAAE4c,GAC1C,EAGH,EAAepd,EAAAA,KAAW4L,E,gDC3I1B,MAAM2R,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,MAAS,KACT,KAAQ,KACR,aAAgB,iBAChB,KAAQ,cACR,KAAQ,mBACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,iBACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,gBACR,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAuB,GACvB,KAAQ,WACR,SAAY,KACZ,KAAQ,4BACR,WAAeA,EACf,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAuB,GACvB,KAAQ,YACR,KAAQ,4BACR,WAAeA,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,4BACR,cAAiB,QACjB,KAAQ,sHAGZ,CA7D+B,GA+D9BD,EAAaE,KAAO,mCAErB,S,2CCzFO,MAAMC,EAAwC,IACxCC,EAAoC,G,+CCyBjD,MAAMJ,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,cAGZI,EAAK,CACH,CACE,MAAS,KACT,KAAQ,CACN,CACE,KAAQ,WACR,KAAQ,aACR,aAAgB,cAGpB,aAAgB,UAChB,KAAQ,cACR,KAAQ,UACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,kBACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,mBACR,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAwBJ,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,+BACR,WAAeI,EACf,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBJ,EACxB,KAAQ,YACR,KAAQ,+BACR,WAAeI,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,+BACR,cAAiB,QACjB,KAAQ,qKAGZ,CA1E+B,GA4E9BL,EAAaE,KAAO,mCAErB,S,gDC/EA,MAAMF,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,SAGZI,EAAK,CACH,CACE,MAAS,KACT,KAAQ,CACN,CACE,KAAQ,WACR,KAAQ,OACR,aAAgB,SAGpB,aAAgB,wBAChB,KAAQ,cACR,KAAQ,0BACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,6BACR,WAAc,MAEhB,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,0BACR,WAAc,OAGlB,WAAc,OAGlB,MAAO,CACL,SAAY,CACV,oBAAwBJ,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,6CACR,WAAeI,EACf,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBJ,EACxB,KAAQ,YACR,KAAQ,6CACR,WAAeI,GAEjB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,6CACR,cAAiB,QACjB,KAAQ,6LAGZ,CAnE+B,GAqE9BL,EAAaE,KAAO,mCAErB,S,mHCnFO,MAAMI,EAA0B,SACrCC,GAII,IAHJxZ,EAAqBwB,UAAA/F,OAAA,QAAAe,IAAAgF,UAAA,GAAAA,UAAA,GAAG,CACtB6E,YAAa,qBAGf,MAAOrB,EAAUC,IAAkB7C,EAAAA,EAAAA,IAAkB,UAC/C,QAAEqX,IAAYvT,EAAAA,EAAAA,uBAAgB,IAAAwT,EAAAA,EAAAA,EAAAtT,EAAA,MAUlC,CACEoT,UAAWA,GAEb,IACKxZ,EACHgF,SAAUA,EAAWhF,EAAQgF,WAQjC,MAAO,CAACyU,EAAS,CAAEE,SAJHC,EAAAA,EAAAA,cAAY,KAC1B3U,GAAgB,GACf,CAACA,KAGN,EAEaoE,EAA+C,WAItD,IAHJrJ,EAAqBwB,UAAA/F,OAAA,QAAAe,IAAAgF,UAAA,GAAAA,UAAA,GAAG,CACtB6E,YAAa,qBAGf,MAAOrB,EAAUC,IAAkB7C,EAAAA,EAAAA,IAAkB,SAC/C6G,GAAYC,EAAAA,EAAAA,OACXuQ,GAAWF,EAAiC,OAATtQ,QAAS,IAATA,OAAS,EAATA,EAAWsF,QAAQiL,YAEvD,wBAAEK,IACN3T,EAAAA,EAAAA,uBAAgB,IAAA4T,EAAAA,EAAAA,EAAA1T,EAAA,OASd,CACEe,MAAa,OAAPsS,QAAO,IAAPA,OAAO,EAAPA,EAASM,kBAAmB,IAEpC,IACK/Z,EACHgF,SAAUA,EAAWhF,EAAQgF,WAI7B2U,GAAUC,EAAAA,EAAAA,cAAY,KAC1B3U,GAAgB,GACf,CAACA,IAEJ,MAAO,CACL,CACEkE,sBAAwB0Q,GAA2B,CAAC,EAGpDJ,QAAUA,GAAW,CAAC,EACtBrQ,yBAA0B,CACxBrM,IAAKZ,IAAAA,IAAM,EACR0d,GAA2B,CAAC,GAAGG,yBAC9BX,EAAAA,EACF,IAEFtP,YACI8P,GAA2B,CAAC,GAAGG,yBAA2B,KAC1DP,GAAW,CAAC,GAAGQ,kBAAoB,KAG3C,CAAEN,WAEN,C,4HCxFA,MAAMO,EAAuB,kCA4FhBhQ,EAA+B5O,IAK9B,IAAD6e,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3O,EAAA4O,EAAAC,EAAAC,EAAA7O,EAAAE,EAAAa,EAAAC,EAAA8N,EAAAC,EAAA,IALgC,aAC3CxR,EAAY,qBACZF,EAAuB,GAAE,mBACzBW,EAAkB,yBAClBgR,GAA2B,GACrB7f,EACN,MAAM2N,GAAYC,EAAAA,EAAAA,OACX1D,IAAiBC,EAAAA,EAAAA,MAClB8E,EAAmBpO,IAAAA,KAAOqJ,EAAe,CAAC,MAAO,MAAO,WAG5DuQ,KAAM9L,EAAe,QACrBmR,EAAO,aACPC,IACEpF,EAAAA,EAAAA,IAAoD,CACtDC,SAAU,CAAC,gBAAiB/L,EAAoBX,GAChD2M,QAASA,IACH3M,EACKP,EAAUqS,eACdC,MAAM,CACLC,MAAOrR,EACPsR,cAAejS,IAEhBsC,OAAM,cAET,EAGJ4K,UAAW,MAIP5M,GAC0D,QAA9DqQ,EAAAhe,IAAAA,KAAmB,OAAZuN,QAAY,IAAZA,OAAY,EAAZA,EAAckB,iBAAkB8Q,GAAiB,SAAV,OAADA,QAAC,IAADA,OAAC,EAADA,EAAGxZ,cAAc,IAAAiY,OAAA,EAA9DA,EAAgErd,MAAO,KAEnE6e,EAMF,CAEF1T,IACG9L,IAAAA,QACgB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtCmQ,EAAfnQ,EAAiBgN,eAAezN,UAAqB,IAAA4Q,GAAO,QAAPC,EAArDD,EAAuDwB,aAAK,IAAAvB,OAA7C,EAAfA,EAA8DpS,MAE/D9L,IAAAA,QACgB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtCqQ,EAAfrQ,EAAiBgN,eAAezN,UAAqB,IAAA8Q,GAAW,QAAXC,EAArDD,EAAuDvQ,iBAAS,IAAAwQ,OAAjD,EAAfA,EAAkEtS,UAShEzL,EAPAL,IAAAA,SACiB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtCuQ,EAAfvQ,EAAiBgN,eAAezN,UAAqB,IAAAgR,OAAtC,EAAfA,EAAuDoB,MAAM3T,KAE/D9L,IAAAA,SACiB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtCwQ,EAAfxQ,EAAiBgN,eAAezN,UAAqB,IAAAiR,OAAtC,EAAfA,EAAuD1Q,UACpD9B,KAGXC,IACG/L,IAAAA,QACgB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtCyQ,EAAfzQ,EAAiBgN,eAAezN,UAAqB,IAAAkR,GAAO,QAAPC,EAArDD,EAAuDkB,aAAK,IAAAjB,OAA7C,EAAfA,EAA8DzS,MAE/D/L,IAAAA,QACgB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtC2Q,EAAf3Q,EAAiBgN,eAAezN,UAAqB,IAAAoR,GAAW,QAAXC,EAArDD,EAAuD7Q,iBAAS,IAAA8Q,OAAjD,EAAfA,EAAkE3S,UAchE1L,GADC,QAXD0P,GAAA1M,EAAAA,EAAAA,IACErD,IAAAA,SACiB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtC6Q,EAAf7Q,EAAiBgN,eAAezN,UAAqB,IAAAsR,OAAtC,EAAfA,EAAuDc,MAAM1T,KAE7D/L,IAAAA,SACiB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtC8Q,EAAf9Q,EAAiBgN,eAAezN,UAAqB,IAAAuR,OAAtC,EAAfA,EAAuDhR,UACpD7B,KAEL,IACF,IACA,UACD,IAAAgE,OAAA,EAXDA,EAWG6F,aAAc,IAEvBrH,aAAcvO,IAAAA,OACZoO,GACA,CAACsR,EAAQjgB,EAAOsG,KAAS,IAAD4Z,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAwBtB,OAvBAN,EAAO3Z,GACJ/F,IAAAA,QAEgB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtC6R,EAAf7R,EAAiBgN,eAAezN,UAAqB,IAAAsS,GAAO,QAAPC,EAArDD,EAAuDF,aAAK,IAAAG,OAA7C,EAAfA,EAA+D7Z,KAEhE/F,IAAAA,QAEgB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtC+R,EAAf/R,EAAiBgN,eAAezN,UAAqB,IAAAwS,GAAW,QAAXC,EAArDD,EAAuDjS,iBAAS,IAAAkS,OAAjD,EAAfA,EACE/Z,SAcA1F,EAXAL,IAAAA,SAEiB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtCiS,EAAfjS,EAAiBgN,eAAezN,UAAqB,IAAA0S,OAAtC,EAAfA,EAAuDN,MACrD1Z,IAGJ/F,IAAAA,SAEiB,OAAf8N,QAAe,IAAfA,GAAqD,QAAtCkS,EAAflS,EAAiBgN,eAAezN,UAAqB,IAAA2S,OAAtC,EAAfA,EACIpS,UAAU7H,IAGf2Z,CAAM,GAEf,CAAC,IAKCO,GAAsB5Y,EAAAA,EAAAA,UAC1B,IACErH,IAAAA,OAAS8M,EAAUsF,SAAS,CAAC3S,EAAOsG,KAC1BgY,EAAqB3b,KAAK2D,MAEtC,CAAC+G,EAAUsF,UA8Hb,MAAO,CACL,CACEoN,4BACA3R,eA9HyC,CAC3C/B,SACyBzL,KAAV,OAAbgJ,QAAa,IAAbA,OAAa,EAAbA,EAAeyC,UACXzL,EACA,CACEM,IAAKX,IAAAA,IAAM,CACTA,IAAAA,UACgE,QAA9D6e,EAAA7e,IAAAA,KAAmB,OAAZuN,QAAY,IAAZA,OAAY,EAAZA,EAAckB,iBAAkB8Q,GAAiB,SAAV,OAADA,QAAC,IAADA,OAAC,EAADA,EAAGxZ,cAAc,IAAA8Y,OAAA,EAA9DA,EACIle,MAAO,OAGfC,IAAKZ,IAAAA,IAAM,CACTgf,OACI3e,EACAyM,EAAUsF,QAAQ8N,wBACtBC,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBsS,eAAetU,KAC5CqU,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBuS,aAAavU,QAIpDC,SACyB1L,KAAV,OAAbgJ,QAAa,IAAbA,OAAa,EAAbA,EAAe0C,UACX1L,EACA,CAGEM,KAEE+Q,EAAAA,EAAAA,IACE1R,IAAAA,IAAM,CAC8B,QAD9BgQ,GACJ3M,EAAAA,EAAAA,IAAYsK,EAAkB,YAAI,IAAAqC,OAAA,EAAlCA,EAAoC1M,OACK,QADC4M,GAC1C7M,EAAAA,EAAAA,IAAYsI,EAAAA,GAAyB,YAAI,IAAAuE,OAAA,EAAzCA,EAA2C5M,OAC3C,IACG,IACLqI,EAAAA,IAEJ/K,IAEEZ,IAAAA,IAAM,CACJgf,OACI3e,EACAyM,EAAUsF,QAAQkO,sBACtBH,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBsS,eAAerU,OAIzC,QAJ6CgF,GAC9C1N,EAAAA,EAAAA,IACE8c,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBsS,eAAerU,KAAO,GACnD,YACD,IAAAgF,OAAA,EAHDA,EAGGzN,QACL6c,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBuS,aAAatU,OAIvC,QAJ2CiF,GAC5C3N,EAAAA,EAAAA,IACE8c,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBuS,aAAatU,KAAO,GACjD,YACD,IAAAiF,OAAA,EAHDA,EAGG1N,UAIF,KAEfiL,aAAcvO,IAAAA,OACZoO,GACA,CAACsR,EAAQjgB,EAAOsG,KAAS,IAADwa,EAAAC,EAAAlQ,EACtB,MAAMmQ,EAGF,QAHmBF,EACrBvgB,IAAAA,KAAOigB,GAAqB,CAACS,EAAaC,IA9QXC,EAACD,EAAoB5a,KAC5D,MAAM8a,EAAQF,EAAWE,MAAM9C,GAC/B,GAAI8C,EAAO,CACT,MAAMC,EAAkBD,EAAM,GAAGE,cAC3BC,EAAejb,EAAIkb,WAAW,QAAS,IAAIF,cAIjD,OACED,IAAoBE,GAAgBF,IAAoBE,EAAe,GAE3E,CACA,OAAO,CAAK,EAmQKJ,CAA0BD,EAAY5a,YAC7C,IAAAwa,EAAAA,EAAIzT,EAAUsF,QAAQ,eAqB1B,OAnBAsN,EAAO3Z,GAAO,CACZpF,IAAK6Q,UAMF,QALDgP,EAAAxgB,IAAAA,OACc,OAAZuN,QAAY,IAAZA,OAAY,EAAZA,EAAckB,iBACbyS,IACgC,OAAxBA,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0Bnb,OAAQA,WAE5C,IAAAya,GAAK,QAALlQ,EALDkQ,EAKI,UAAE,IAAAlQ,OAAL,EALDA,EAKQ3P,MAAO,KAEjBC,IAAKZ,IAAAA,IAAM,CACTygB,GAAqB,EACrBN,EACiB,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBsS,eAAera,IAElCoa,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBuS,aAAata,OAKvC2Z,CAAM,GAEf,CAAC,IAyCD9R,UAtC8B,CAChCW,aAAcvO,IAAAA,OACZoO,GACA,CAACsR,EAAQjgB,EAAOsG,KAAS,IAADob,EAatB,OAZAzB,EAAO3Z,GAWH,QAXOob,EACTnhB,IAAAA,IAAM,CACJA,IAAAA,SACiB,OAAf8N,QAAe,IAAfA,OAAe,EAAfA,EAAiBsT,kBAAkBrb,IAErC/F,IAAAA,SACiB,OAAf8N,QAAe,IAAfA,OAAe,EAAfA,EAAiBuT,gBAAgBtb,IAEnC/F,IAAAA,SACiB,OAAf8N,QAAe,IAAfA,OAAe,EAAfA,EAAiBwT,wBAAwBvb,aAE3C,IAAAob,EAAAA,EAAI7P,OAAOiQ,iBACR7B,CAAM,GAEf,CAAC,GAEH5T,IAKI,QALDgT,EACD9e,IAAAA,IAAM,CACJmgB,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBsT,kBAAkBtV,KAC/CqU,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBuT,gBAAgBvV,KAC7CqU,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBwT,wBAAwBxV,cACrD,IAAAgT,EAAAA,EAAIxN,OAAOiQ,iBACfxV,IAKI,QALDgT,EACD/e,IAAAA,IAAM,CACJmgB,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBsT,kBAAkBrV,KAC/CoU,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBuT,gBAAgBtV,KAC7CoU,EAA2B,OAAfrS,QAAe,IAAfA,OAAe,EAAfA,EAAiBwT,wBAAwBvV,cACrD,IAAAgT,EAAAA,EAAIzN,OAAOiQ,kBAQb5T,mBACAuR,eACApR,mBAEF,CACEmR,WAEH,EAGGkB,EAAezR,QACLrO,IAAVqO,GAEiB,aAAVA,GAEU,QAAVA,OAHT,EAMO1O,IAAAA,SAAW0O,E","sources":["components/DoubleTag.tsx","components/DynamicUnitInputNumber.tsx","components/ImageMetaIcon.tsx","components/InputNumberWithSlider.tsx","components/DynamicUnitInputNumberWithSlider.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/ResourceGroupSelect.tsx","components/ResourceNumber.tsx","components/__generated__/ResourcePresetSelectQuery.graphql.ts","helper/const-vars.ts","hooks/__generated__/hooksUsingRelay_KeyPairQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql.ts","hooks/hooksUsingRelay.tsx","hooks/useResourceLimitAndRemaining.tsx"],"sourcesContent":["import Flex from './Flex';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: ValueType;\n  color?: string;\n};\n\ntype ValueType = string | React.ReactNode;\nconst DoubleTag: React.FC<{\n  values?: ValueType[] | DoubleTagObjectValue[];\n}> = ({ values = [] }) => {\n  if (values.length === 0) return null;\n  let objectValues: DoubleTagObjectValue[];\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) => {\n        return (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {objValue.label}\n          </Tag>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","import { iSizeToSize, parseUnit } from '../helper';\nimport useControllableState from '../hooks/useControllableState';\nimport { usePrevious } from 'ahooks';\nimport { InputNumber, InputNumberProps, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nexport interface DynamicUnitInputNumberProps\n  extends Omit<\n    InputNumberProps,\n    'step' | 'max' | 'min' | 'value' | 'onChange'\n  > {\n  dynamicSteps?: number[];\n  disableAutoUnit?: boolean;\n  max?: string;\n  min?: string;\n  value?: string | null | undefined;\n  units?: string[];\n  roundStep?: number;\n  onChange?: (value: string) => void;\n}\n\nconst DynamicUnitInputNumber: React.FC<DynamicUnitInputNumberProps> = ({\n  dynamicSteps = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],\n  units = ['m', 'g', 't', 'p'],\n  disableAutoUnit = false,\n  min = '0m',\n  max = '300p',\n  roundStep,\n  ...inputNumberProps\n}) => {\n  const [value, setValue] = useControllableState<string | null | undefined>(\n    inputNumberProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const [numValue, _unitFromValue] =\n    value === null || value === undefined ? [null, null] : parseUnit(value);\n  const previousUnit = usePrevious(_unitFromValue);\n  const unit = _unitFromValue || previousUnit || units[0];\n\n  const [minNumValue, minUnit] = parseUnit(min);\n  const [maxNumValue, maxUnit] = parseUnit(max);\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const onInput = (e: Event) => {\n        // @ts-ignore\n        const value = e?.target?.value;\n        if (/^\\d+(g|m)$/.test(value)) {\n          // const [newNumber, newUnit] = parseUnit(value);\n          // if (newNumber === numValue && newUnit === unit) {\n          //   e.target.value = numValue;\n          // } else {\n          setValue(value);\n          // }\n        }\n      };\n      const target = ref.current;\n      target?.addEventListener('input', onInput);\n      return () => {\n        target?.removeEventListener('input', onInput);\n      };\n    }\n  }, [ref, numValue, _unitFromValue, setValue]);\n\n  return (\n    <InputNumber\n      ref={ref}\n      {...inputNumberProps}\n      onBlur={() => {\n        if (_.isNumber(roundStep) && roundStep > 0) {\n          const decimalCount = roundStep.toString().split('.')[1]?.length || 0;\n          if (\n            isNaN(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n                roundStep,\n            )\n          ) {\n            return;\n          }\n          setValue(\n            `${(\n              Math.round(_.toNumber(ref.current?.value || '0') / roundStep) *\n              roundStep\n            ).toFixed(decimalCount)}${unit}`,\n          );\n        }\n      }}\n      value={numValue}\n      onChange={(newValue) => {\n        if (newValue === null || newValue === undefined) {\n          setValue(newValue);\n        } else {\n          setValue(`${newValue}${unit}`);\n        }\n      }}\n      //TODO: When min and max have different units, they should be calculated and put in.\n      // 입력의 초소단위 확인 0.4g 가 되는지 확인\n      // @ts-ignore\n      max={maxUnit === unit ? maxNumValue : iSizeToSize(max, unit).number}\n      min={\n        minUnit === unit\n          ? minNumValue\n          : // @ts-ignore\n            iSizeToSize(min, unit).number\n      }\n      addonAfter={\n        <Select\n          tabIndex={-1}\n          value={unit}\n          onChange={(newUnit) => {\n            setValue(`${numValue}${newUnit}`);\n          }}\n          onDropdownVisibleChange={(open) => {\n            // A null or undefined value doesn't have a unit info, so we need to set the value before setting the unit.\n            if ((open && value === null) || value === undefined) {\n              setValue(`0${unit}`);\n            }\n          }}\n          options={_.map(units, (unit) => ({\n            value: unit,\n            label: (\n              <Typography.Text\n                style={{\n                  fontFamily:\n                    \"'SFMono-Regular',Consolas,'Liberation Mono',Menlo,Courier,monospace\",\n                }}\n              >\n                {unit.toUpperCase() + 'iB'}\n              </Typography.Text>\n            ),\n          }))}\n          suffixIcon={units.length > 1 ? undefined : null}\n          open={units.length > 1 ? undefined : false}\n          style={{\n            cursor: units.length > 1 ? undefined : 'default',\n          }}\n        />\n      }\n      step={0} // this step applies when onStep doesn't setValue\n      onStep={(afterStepValue, info) => {\n        const numValueNotNull =\n          _.isNull(numValue) || _.isUndefined(numValue) ? 0 : numValue;\n        const index = _.sortedIndex(_.sortBy(dynamicSteps), numValueNotNull);\n        let nextIndex: number;\n        if (info.type === 'up') {\n          if (numValueNotNull === dynamicSteps[index]) {\n            nextIndex = index + 1;\n          } else {\n            nextIndex = index;\n          }\n        } else {\n          nextIndex = index - 1;\n        }\n\n        const currentUnitIndex = units.indexOf(unit);\n        if (!disableAutoUnit && nextIndex < 0) {\n          // WHEN MOVING TO MORE Smaller Unit: change unit and number\n          if (currentUnitIndex === 0) {\n            // if already at min unit, set to 0\n            setValue(`0${unit}`);\n          } else {\n            const nextValue = dynamicSteps[dynamicSteps.length - 1];\n            const nextUnit = units[currentUnitIndex - 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else if (!disableAutoUnit && nextIndex > dynamicSteps.length - 1) {\n          // WHEN MOVING TO MORE Bigger Unit: change unit and number\n          //  if already at max unit, step up/down by 1\n          if (currentUnitIndex === units.length - 1) {\n            setValue(\n              `${numValueNotNull + (info.type === 'up' ? 1 : -1)}${maxUnit}`,\n            );\n          } else {\n            const nextValue = dynamicSteps[0];\n            const nextUnit = units[currentUnitIndex + 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else {\n          // WHEN, DON'T NEED TO CHANGE UNIT\n          if (nextIndex >= 0 && nextIndex < dynamicSteps.length) {\n            let nextNumValue = dynamicSteps[nextIndex];\n            if (minUnit === unit && nextNumValue < minNumValue) {\n              nextNumValue = minNumValue;\n            } else if (maxUnit === unit && nextNumValue > maxNumValue) {\n              nextNumValue = maxNumValue;\n            }\n            setValue(`${nextNumValue}${unit}`);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DynamicUnitInputNumber;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n  alt?: string | null;\n}> = ({ image, style = {} }, bordered, alt = '') => {\n  const [, { getImageIcon }] = useBackendAIImageMetaData();\n\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: '1em',\n        height: '1em',\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","import { useUpdatableState } from '../hooks';\nimport useControllableState from '../hooks/useControllableState';\nimport Flex from './Flex';\nimport { InputNumber, Slider, InputNumberProps, SliderSingleProps } from 'antd';\nimport { SliderRangeProps } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\n\ntype OmitControlledProps<T> = Omit<T, 'value' | 'onChange'>;\n\ninterface InputNumberWithSliderProps {\n  min?: number;\n  max?: number;\n  step?: number | null;\n  disabled?: boolean;\n  value?: number;\n  onChange?: (value: number) => void;\n  inputNumberProps?: OmitControlledProps<InputNumberProps>;\n  sliderProps?:\n    | OmitControlledProps<SliderSingleProps>\n    | OmitControlledProps<SliderRangeProps>;\n}\nconst InputNumberWithSlider: React.FC<InputNumberWithSliderProps> = ({\n  min,\n  max,\n  step,\n  disabled,\n  inputNumberProps,\n  sliderProps,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableState(otherProps);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    // when step is 1, make sure the value is integer\n    if (step === 1 && value % 1 !== 0) {\n      setValue(_.max([Math.round(value), min]));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [step]);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    setTimeout(() => {\n      updateKey(value);\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        align=\"stretch\"\n        direction=\"column\"\n      >\n        <InputNumber\n          key={key}\n          ref={inputRef}\n          max={max}\n          min={min}\n          step={step ?? undefined}\n          disabled={disabled}\n          value={value}\n          onChange={setValue}\n          onBlur={() => {\n            if (_.isNumber(step) && step > 0) {\n              if (\n                _.isNumber(max) &&\n                max < _.toNumber(inputRef.current?.value || '0')\n              ) {\n                return; // do not update value if it is greater than max\n              }\n              const decimalCount = step.toString().split('.')[1]?.length || 0;\n              setValue(\n                _.max([\n                  _.toNumber(\n                    (\n                      Math.round(\n                        _.toNumber(inputRef.current?.value || '0') / step,\n                      ) * step\n                    ).toFixed(decimalCount),\n                  ),\n                  min,\n                ]),\n              );\n            }\n          }}\n          {...inputNumberProps}\n        />\n      </Flex>\n      <Flex direction=\"column\" align=\"stretch\" style={{ flex: 3 }}>\n        <Slider\n          max={max}\n          min={0}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={(value: any) => {\n            if (min !== undefined && value < min) {\n              return;\n            } else {\n              setValue(value);\n            }\n          }}\n          {...sliderProps}\n          // remove marks that are greater than max\n          marks={_.omitBy(sliderProps?.marks, (option, key) => {\n            return _.isNumber(max) ? _.parseInt(key) > max : false;\n          })}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default InputNumberWithSlider;\n","import { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport useControllableState from '../hooks/useControllableState';\nimport DynamicUnitInputNumber, {\n  DynamicUnitInputNumberProps,\n} from './DynamicUnitInputNumber';\nimport Flex from './Flex';\nimport { Slider, theme } from 'antd';\nimport { SliderMarks } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\n\nexport interface DynamicUnitInputNumberWithSliderProps\n  extends DynamicUnitInputNumberProps {\n  extraMarks?: SliderMarks;\n  hideSlider?: boolean;\n  warn?: string;\n  step?: number;\n}\nconst DynamicUnitInputNumberWithSlider: React.FC<\n  DynamicUnitInputNumberWithSliderProps\n> = ({\n  min = '0m',\n  max = '32g',\n  warn,\n  units = ['m', 'g'],\n  extraMarks,\n  hideSlider,\n  step = 0.05,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableState<string | undefined | null>(\n    otherProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const { token } = theme.useToken();\n  const minGiB = useMemo(() => iSizeToSize(min, 'g', 2), [min]);\n  const maxGiB = useMemo(() => iSizeToSize(max, 'g', 2), [max]);\n  const valueGiB = useMemo(() => iSizeToSize(value || '0g', 'g', 2), [value]);\n\n  // const warnPercent = useMemo(() => {\n  //   return warn\n  //     ? ((iSizeToSize(warn, 'g', 2)?.number || 0) / (maxGiB?.number || 1)) * 100\n  //     : undefined;\n  // }, [warn, maxGiB?.number]);\n  // console.log('##marks', marks);\n\n  // FIXME: this is a workaround to fix the issue that the value is not updated when the value is controlled\n  const [key, updateKey] = useUpdatableState('first');\n  useEffect(() => {\n    setTimeout(() => {\n      updateKey(value?.toString());\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isMinOversMaxValue =\n    _.isNumber(minGiB?.number) &&\n    _.isNumber(maxGiB?.number) &&\n    minGiB?.number > maxGiB?.number;\n\n  const filterOutInvalidMarks = (marks: SliderMarks) => {\n    return _.omitBy({ ...marks }, (option, key) => {\n      const markNumber = parseFloat(key);\n      return (\n        minGiB &&\n        maxGiB &&\n        (minGiB?.number > markNumber || maxGiB?.number < markNumber)\n      );\n    });\n  };\n\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        direction=\"column\"\n        align=\"stretch\"\n      >\n        <DynamicUnitInputNumber\n          {...otherProps}\n          key={key}\n          min={min}\n          max={max}\n          units={units}\n          // set value to 0mib when min value overs max value\n          value={value}\n          onChange={(nextValue) => {\n            setValue(nextValue);\n          }}\n          style={{\n            minWidth: 130,\n          }}\n          roundStep={step}\n          changeOnBlur={!isMinOversMaxValue}\n        />\n      </Flex>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 3,\n          ...(hideSlider && {\n            visibility: 'hidden',\n            height: 0,\n          }),\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {/* {warn && (\n            <Flex\n              direction=\"row\"\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 14.5,\n                width: '100%',\n                height: 4,\n                padding: '0 5px',\n              }}\n              align=\"start\"\n            >\n              <div\n                style={{\n                  width: warnPercent + '%',\n                  height: 4,\n                }}\n              ></div>\n              <div\n                style={{\n                  marginTop: 3,\n                  marginLeft: -3.5,\n                  width: 0,\n                  height: 0,\n\n                  borderTop: '4px solid transparent',\n                  borderLeft: '4px solid transparent',\n                  borderRight: '4px solid transparent',\n                  borderBottom: `7px solid ${token.colorWarning}`,\n                }}\n              ></div>\n            </Flex>\n          )} */}\n          <Slider\n            max={maxGiB?.number}\n            styles={{\n              track:\n                (warn && {\n                  backgroundColor:\n                    compareNumberWithUnits(warn, value || '0b') < 0\n                      ? token.colorWarning\n                      : undefined,\n                }) ||\n                undefined,\n              rail: {\n                // backgroundColor:'red',\n                // fill: 'red',\n              },\n            }}\n            step={step}\n            // min={minGiB.number}  // DO NOT use min, because slider left should be 0\n\n            // For the slider, when min value overs max value, it will not work.\n            // In this case, hide all information and disabled the slider.\n            // Most of case, it's not a good idea to set the different value to the control value,\n            // but in this case, it's okay to hide all information and disabled the slider.\n            value={isMinOversMaxValue ? 0 : valueGiB?.number}\n            disabled={isMinOversMaxValue}\n            tooltip={{\n              formatter: isMinOversMaxValue\n                ? null\n                : (value = 0) => {\n                    return value < 1\n                      ? `${(value * 1024).toFixed(2)} MiB`\n                      : `${value.toFixed(2)} GiB`;\n                  },\n            }}\n            onChange={(newNumValue) => {\n              if (minGiB?.number && minGiB.number > newNumValue) {\n                setValue(min);\n              } else {\n                setValue(\n                  newNumValue < 1\n                    ? `${newNumValue * 1024}m`\n                    : `${newNumValue}g`,\n                );\n              }\n            }}\n            marks={filterOutInvalidMarks({\n              ...(minGiB &&\n                _.isNumber(minGiB?.number) && {\n                  [minGiB.number]: {\n                    style: {\n                      color: token.colorTextSecondary,\n                    },\n                    // if 0, without unit\n                    label:\n                      minGiB.number === 0\n                        ? minGiB.number\n                        : minGiB.number >= 1\n                          ? minGiB.number + 'g'\n                          : minGiB.number * 1024 + 'm',\n                  },\n                }),\n              // extra: remaining mark code should be located before max mark code to prevent overlapping when it is same value\n              ..._.omitBy(extraMarks, (option, key) => {\n                return _.isNumber(maxGiB?.number)\n                  ? _.parseInt(key) > (maxGiB?.number as number)\n                  : false;\n              }),\n              ...(maxGiB?.number && {\n                [maxGiB.number]: {\n                  style: {\n                    color: token.colorTextSecondary,\n                  },\n                  label:\n                    maxGiB.number === 0\n                      ? maxGiB.number\n                      : maxGiB.number >= 1\n                        ? maxGiB.number + 'g'\n                        : maxGiB.number * 1024 + 'm',\n                },\n              }),\n            })}\n          />\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default DynamicUnitInputNumberWithSlider;\n","import { localeCompare } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { ResourceSlotName, useResourceSlots } from '../hooks/backendai';\nimport useControllableState from '../hooks/useControllableState';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport {\n  ResourcePresetSelectQuery,\n  ResourcePresetSelectQuery$data,\n} from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport { useThrottleFn } from 'ahooks';\nimport { Select, Tooltip, theme } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\n\nexport type ResourcePreset = NonNullable<\n  NonNullable<ResourcePresetSelectQuery$data['resource_presets']>[number]\n>;\nexport interface ResourcePresetSelectProps\n  extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n  allocatablePresetNames?: string[];\n  showMinimumRequired?: boolean;\n  showCustom?: boolean;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  allocatablePresetNames,\n  showCustom,\n  showMinimumRequired,\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [resourceSlots] = useResourceSlots();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const [controllableValue, setControllableValue] =\n    useControllableState(selectProps);\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n\n  return (\n    <Select\n      loading={isPendingUpdate}\n      options={[\n        ...(showCustom\n          ? [\n              {\n                value: 'custom',\n                label: (\n                  <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n                    <EditOutlined /> {t('session.launcher.CustomAllocation')}\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.CustomAllocation'),\n              },\n            ]\n          : []),\n        ...(showMinimumRequired\n          ? [\n              {\n                value: 'minimum-required',\n                label: (\n                  <Flex gap={'xs'}>\n                    {t('session.launcher.MiniumAllocation')}\n                    <Tooltip\n                      title={t('session.launcher.MiniumAllocationTooltip')}\n                    >\n                      <InfoCircleOutlined\n                        style={{\n                          color: token.colorTextSecondary,\n                        }}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ),\n                selectedLabel: t('session.launcher.MiniumAllocation'),\n              },\n            ]\n          : []),\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset, index) => {\n            const slotsInfo: {\n              [key in ResourceSlotName]: string;\n            } = JSON.parse(preset?.resource_slots);\n            const disabled = allocatablePresetNames\n              ? !allocatablePresetNames.includes(preset?.name || '')\n              : undefined;\n            return {\n              value: preset?.name,\n              label: (\n                <Flex direction=\"row\" justify=\"between\" gap={'xs'}>\n                  {preset?.name}\n                  <Flex\n                    direction=\"row\"\n                    gap={'xxs'}\n                    style={\n                      {\n                        // color: 'black',\n                        // opacity: isAvailable ? 1 : 0.4,\n                      }\n                    }\n                  >\n                    {_.map(\n                      _.omitBy(slotsInfo, (slot, key) =>\n                        _.isEmpty(resourceSlots[key as ResourceSlotName]),\n                      ),\n                      (slot, key) => {\n                        return (\n                          <ResourceNumber\n                            key={key}\n                            // @ts-ignore\n                            type={key}\n                            value={slot}\n                            hideTooltip\n                          />\n                        );\n                      },\n                    )}\n                  </Flex>\n                </Flex>\n              ),\n              preset,\n              disabled: disabled,\n            };\n          })\n            .sort(\n              (\n                a,\n                b, // by disabled\n              ) => (a.disabled === b.disabled ? 0 : a.disabled ? 1 : -1),\n            )\n            .sort((a, b) => localeCompare(a.value, b.value)), // by name\n        },\n      ]}\n      showSearch\n      // Set props from parent and override it\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValue}\n      optionLabelProp={\n        _.includes(['custom', 'minimum-required'], controllableValue)\n          ? 'selectedLabel'\n          : 'label'\n      }\n      onDropdownVisibleChange={(open) => {\n        selectProps.onDropdownVisibleChange &&\n          selectProps.onDropdownVisibleChange(open);\n        if (open) {\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import {\n  addNumberWithUnits,\n  compareNumberWithUnits,\n  iSizeToSize,\n} from '../helper';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { useResourceSlotsDetails } from '../hooks/backendai';\nimport { useCurrentKeyPairResourcePolicyLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupValue,\n} from '../hooks/useCurrentProject';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport {\n  MergedResourceLimits,\n  ResourcePreset,\n  useResourceLimitAndRemaining,\n} from '../hooks/useResourceLimitAndRemaining';\nimport DynamicUnitInputNumberWithSlider from './DynamicUnitInputNumberWithSlider';\nimport Flex from './Flex';\nimport {\n  Image,\n  ImageEnvironmentFormInput,\n} from './ImageEnvironmentSelectFormItems';\nimport InputNumberWithSlider from './InputNumberWithSlider';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport {\n  Card,\n  Col,\n  Divider,\n  Form,\n  Radio,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport const AUTOMATIC_DEFAULT_SHMEM = '64m';\nexport const RESOURCE_ALLOCATION_INITIAL_FORM_VALUES: DeepPartial<ResourceAllocationFormValue> =\n  {\n    resource: {\n      cpu: 0,\n      mem: '0g',\n      shmem: '0g',\n      accelerator: 0,\n    },\n    num_of_sessions: 1,\n    cluster_mode: 'single-node',\n    cluster_size: 1,\n    enabledAutomaticShmem: true,\n  };\n\nexport const isMinOversMaxValue = (min: number, max: number) => {\n  return min >= max;\n};\n\nexport interface ResourceAllocationFormValue {\n  resource: {\n    cpu: number;\n    mem: string;\n    shmem: string;\n    accelerator: number;\n    acceleratorType: string;\n  };\n  resourceGroup: string;\n  num_of_sessions?: number;\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  enabledAutomaticShmem: boolean;\n  allocationPreset?: string;\n}\n\ntype MergedResourceAllocationFormValue = ResourceAllocationFormValue &\n  ImageEnvironmentFormInput;\n\ninterface ResourceAllocationFormItemsProps {\n  enableNumOfSessions?: boolean;\n  enableResourcePresets?: boolean;\n  showRemainingWarning?: boolean;\n  forceImageMinValues?: boolean;\n}\n\nconst ResourceAllocationFormItems: React.FC<\n  ResourceAllocationFormItemsProps\n> = ({\n  enableNumOfSessions,\n  enableResourcePresets,\n  forceImageMinValues = false,\n  showRemainingWarning = false,\n}) => {\n  const form = Form.useFormInstance<MergedResourceAllocationFormValue>();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [{ keypairResourcePolicy, sessionLimitAndRemaining }] =\n    useCurrentKeyPairResourcePolicyLazyLoadQuery();\n\n  const currentProject = useCurrentProjectValue();\n  const currentResourceGroup = useCurrentResourceGroupValue(); // use global state\n\n  const currentImage = Form.useWatch(['environments', 'image'], {\n    form,\n    preserve: true,\n  });\n  const currentAllocationPreset = Form.useWatch(['allocationPreset'], {\n    form,\n    preserve: true,\n  });\n  const [{ currentImageMinM, remaining, resourceLimits, checkPresetInfo }] =\n    useResourceLimitAndRemaining({\n      currentProjectName: currentProject.name,\n      currentResourceGroup: currentResourceGroup || undefined, // global currentResourceGroup can be null\n      currentImage: currentImage,\n    });\n\n  const { mergedResourceSlots, resourceSlotsInRG: resourceSlots } =\n    useResourceSlotsDetails(currentResourceGroup || undefined);\n\n  const acceleratorSlots = _.omitBy(resourceSlots, (value, key) => {\n    if (['cpu', 'mem', 'shmem'].includes(key)) return true;\n\n    if (\n      !resourceLimits.accelerators[key]?.max ||\n      resourceLimits.accelerators[key]?.max === 0\n    )\n      return true;\n    return false;\n  });\n\n  const currentImageAcceleratorLimits = useMemo(\n    () =>\n      _.filter(currentImage?.resource_limits, (limit) =>\n        limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n      ),\n    [currentImage?.resource_limits],\n  );\n\n  const sessionSliderLimitAndRemaining = {\n    min: 1,\n    max: sessionLimitAndRemaining.max,\n    remaining: sessionLimitAndRemaining.remaining,\n  };\n\n  const allocatablePresetNames = useMemo(() => {\n    return getAllocatablePresetNames(\n      checkPresetInfo?.presets,\n      resourceLimits,\n      currentImage,\n    );\n  }, [checkPresetInfo?.presets, resourceLimits, currentImage]);\n\n  const ensureValidAcceleratorType = useEventNotStable(() => {\n    const currentAcceleratorType = form.getFieldValue([\n      'resource',\n      'acceleratorType',\n    ]);\n    // If the current accelerator type is not available,\n    // change accelerator type to the first supported accelerator\n    const nextAcceleratorType: string = acceleratorSlots[currentAcceleratorType]\n      ? currentAcceleratorType\n      : _.keys(acceleratorSlots)[0];\n\n    form.setFieldsValue({\n      resource: {\n        acceleratorType: nextAcceleratorType || currentAcceleratorType,\n      },\n    });\n  });\n\n  const updateAllocationPresetBasedOnResourceGroup = useEventNotStable(() => {\n    if (\n      _.includes(\n        ['custom', 'minimum-required'],\n        form.getFieldValue('allocationPreset'),\n      )\n    ) {\n      // if the current preset is custom or minimum-required, do nothing.\n    } else {\n      if (\n        allocatablePresetNames.includes(form.getFieldValue('allocationPreset'))\n      ) {\n        // if the current preset is available in the current resource group, do nothing.\n      } else if (enableResourcePresets && allocatablePresetNames[0]) {\n        const autoSelectedPreset = _.sortBy(allocatablePresetNames)[0];\n        form.setFieldsValue({\n          allocationPreset: autoSelectedPreset,\n        });\n        updateResourceFieldsBasedOnPreset(autoSelectedPreset);\n      } else {\n        // if the current preset is not available in the current resource group, set to custom\n        form.setFieldsValue({\n          allocationPreset: 'custom',\n        });\n      }\n    }\n    ensureValidAcceleratorType();\n    form\n      .validateFields(['resource'], {\n        recursive: true,\n      })\n      .catch(() => {});\n  });\n\n  useEffect(() => {\n    if (currentAllocationPreset === 'auto-select') {\n      currentResourceGroup && updateAllocationPresetBasedOnResourceGroup();\n    }\n  }, [\n    currentResourceGroup,\n    updateAllocationPresetBasedOnResourceGroup,\n    currentAllocationPreset,\n  ]);\n  // update allocation preset based on resource group and current image\n  useEffect(() => {\n    currentResourceGroup && updateAllocationPresetBasedOnResourceGroup();\n  }, [\n    currentResourceGroup,\n    updateAllocationPresetBasedOnResourceGroup,\n    currentImage,\n  ]);\n\n  const updateResourceFieldsBasedOnImage = (force?: boolean) => {\n    // when image changed, set value of resources to min value only if it's larger than current value\n    const minimumResources: Partial<ResourceAllocationFormValue['resource']> = {\n      cpu: resourceLimits.cpu?.min,\n      mem:\n        iSizeToSize(\n          (iSizeToSize(resourceLimits.shmem?.min, 'm')?.number || 0) +\n            (iSizeToSize(resourceLimits.mem?.min, 'm')?.number || 0) +\n            'm',\n          'g',\n        )?.number + 'g', //to prevent loosing precision\n    };\n\n    // NOTE: accelerator value setting is done inside the conditional statement\n    if (currentImageAcceleratorLimits.length > 0) {\n      if (\n        _.find(\n          currentImageAcceleratorLimits,\n          (limit) =>\n            limit?.key === form.getFieldValue(['resource', 'acceleratorType']),\n        )\n      ) {\n        // if current selected accelerator type is supported in the selected image,\n        minimumResources.acceleratorType = form.getFieldValue([\n          'resource',\n          'acceleratorType',\n        ]);\n        minimumResources.accelerator =\n          resourceLimits.accelerators[\n            form.getFieldValue(['resource', 'acceleratorType'])\n          ]?.min;\n      } else {\n        // if current selected accelerator type is not supported in the selected image,\n        // change accelerator type to the first supported accelerator type.\n        const nextImageSelectorType: string | undefined | null = // NOTE:\n          // filter from resourceSlots since resourceSlots and supported image could be non-identical.\n          // resourceSlots returns \"all resources enable to allocate(including AI accelerator)\"\n          // imageAcceleratorLimit returns \"all resources that is supported in the selected image\"\n          _.filter(currentImageAcceleratorLimits, (acceleratorInfo: any) =>\n            _.keys(resourceSlots).includes(acceleratorInfo?.key),\n          )[0]?.key;\n\n        if (nextImageSelectorType) {\n          minimumResources.accelerator =\n            resourceLimits.accelerators[nextImageSelectorType]?.min;\n          minimumResources.acceleratorType = nextImageSelectorType;\n        }\n      }\n    } else {\n      minimumResources.accelerator = 0;\n    }\n\n    if (!forceImageMinValues && !force) {\n      // delete keys that is not less than current value\n      (['cpu', 'accelerator'] as const).forEach((key) => {\n        const minNum = minimumResources[key];\n        if (\n          _.isNumber(minNum) &&\n          minNum < form.getFieldValue(['resource', key])\n        ) {\n          delete minimumResources[key];\n        }\n      });\n      (['mem', 'shmem'] as const).forEach((key) => {\n        const minNumStr = minimumResources[key];\n        if (\n          _.isString(minNumStr) &&\n          compareNumberWithUnits(\n            minNumStr,\n            form.getFieldValue(['resource', key]),\n          ) < 0\n        ) {\n          delete minimumResources[key];\n        }\n      });\n    }\n\n    form.setFieldsValue({\n      resource: {\n        ...minimumResources,\n      },\n    });\n\n    // set to 0 when currentImage doesn't support any AI accelerator\n    if (currentImage && currentImageAcceleratorLimits.length === 0) {\n      form.setFieldValue(['resource', 'accelerator'], 0);\n    }\n\n    if (form.getFieldValue('enabledAutomaticShmem')) {\n      runShmemAutomationRule(form.getFieldValue(['resource', 'mem']) || '0g');\n    }\n    form\n      .validateFields(['resource'], {\n        recursive: true,\n      })\n      .catch(() => {});\n  };\n\n  useEffect(() => {\n    updateResourceFieldsBasedOnImage();\n    // When the currentImage is changed, execute the latest updateResourceFieldsBasedOnImage function.\n    // So we don't need to add `updateResourceFieldsBasedOnImage` to the dependencies.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentImage]);\n\n  const updateResourceFieldsBasedOnPreset = (name: string) => {\n    const preset = _.find(\n      checkPresetInfo?.presets,\n      (preset) => preset.name === name,\n    );\n    const slots = _.pick(preset?.resource_slots, _.keys(resourceSlots));\n    const mem = iSizeToSize((slots?.mem || 0) + 'b', 'g', 2)?.numberUnit;\n    const acceleratorObj = _.omit(slots, ['cpu', 'mem', 'shmem']);\n\n    // Select the first matched AI accelerator type and value\n    const firstMatchedAcceleratorType = _.find(\n      _.keys(acceleratorSlots),\n      (value) => acceleratorObj[value] !== undefined,\n    );\n\n    let acceleratorSetting: {\n      acceleratorType?: string;\n      accelerator: number;\n    } = {\n      accelerator: 0,\n    };\n    if (firstMatchedAcceleratorType) {\n      acceleratorSetting = {\n        acceleratorType: firstMatchedAcceleratorType,\n        accelerator: Number(acceleratorObj[firstMatchedAcceleratorType] || 0),\n      };\n    }\n    form.setFieldsValue({\n      resource: {\n        // ...slots,\n        ...acceleratorSetting,\n        // transform to GB based on preset values\n        mem,\n        shmem: iSizeToSize((preset?.shared_memory || 0) + 'b', 'g', 2)\n          ?.numberUnit,\n        cpu: parseInt(slots?.cpu || '0') || 0,\n      },\n    });\n    runShmemAutomationRule(mem || '0g');\n\n    form\n      .validateFields(['resource'], {\n        recursive: true,\n      })\n      .catch(() => {});\n  };\n\n  const runShmemAutomationRule = (M_plus_S: string) => {\n    // if M+S > 4G, S can be 1G regard to current image's minimum mem(M)\n    if (\n      // M+S > 4G\n      compareNumberWithUnits(M_plus_S, '4g') >= 0 &&\n      // M+S > M+1G\n      compareNumberWithUnits(\n        M_plus_S,\n        addNumberWithUnits(currentImageMinM, '1g') || '0b',\n      ) >= 0 &&\n      // if 1G < AUTOMATIC_DEFAULT_SHMEM, no need to apply 1G rule\n      compareNumberWithUnits('1g', AUTOMATIC_DEFAULT_SHMEM) > 0\n    ) {\n      form.setFieldValue(['resource', 'shmem'], '1g');\n    } else {\n      form.setFieldValue(['resource', 'shmem'], AUTOMATIC_DEFAULT_SHMEM);\n    }\n  };\n\n  return (\n    <>\n      <Form.Item\n        name=\"resourceGroup\"\n        label={t('session.ResourceGroup')}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <ResourceGroupSelect projectName={currentProject.name} showSearch />\n        {/* <ResourceGroupSelectForCurrentProject showSearch /> */}\n      </Form.Item>\n\n      {enableResourcePresets ? (\n        <Form.Item\n          label={t('resourcePreset.ResourcePresets')}\n          name=\"allocationPreset\"\n          required\n          style={{ marginBottom: token.marginXS }}\n        >\n          <ResourcePresetSelect\n            showCustom={baiClient._config.allowCustomResourceAllocation}\n            showMinimumRequired={\n              baiClient._config.allowCustomResourceAllocation\n            }\n            onChange={(value, options) => {\n              switch (value) {\n                case 'custom':\n                  break;\n                case 'minimum-required':\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnImage(true);\n                  break;\n                default:\n                  form.setFieldValue('enabledAutomaticShmem', true);\n                  updateResourceFieldsBasedOnPreset(value);\n                  break;\n              }\n            }}\n            allocatablePresetNames={allocatablePresetNames}\n          />\n        </Form.Item>\n      ) : null}\n      <Card\n        style={{\n          marginBottom: token.margin,\n          display: baiClient._config.allowCustomResourceAllocation\n            ? 'block'\n            : 'none',\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlots?.cpu && (\n                  <Form.Item\n                    name={['resource', 'cpu']}\n                    // initialValue={0}\n                    label={\n                      mergedResourceSlots?.cpu?.human_readable_name || 'CPU'\n                    }\n                    tooltip={{\n                      placement: 'right',\n                      title: <Trans i18nKey={'session.launcher.DescCPU'} />,\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        type: 'number',\n                        min: resourceLimits.cpu?.min,\n                        // TODO: set message\n                      },\n                      {\n                        type: 'number',\n                        max: resourceLimits.cpu?.max,\n                      },\n                      {\n                        warningOnly: true,\n                        validator: async (rule, value: number) => {\n                          if (\n                            _.isNumber(resourceLimits.cpu?.min) &&\n                            _.isNumber(resourceLimits.cpu?.max) &&\n                            isMinOversMaxValue(\n                              resourceLimits.cpu?.min,\n                              resourceLimits.cpu?.max,\n                            )\n                          ) {\n                            return Promise.reject(\n                              t(\n                                'session.launcher.InsufficientAllocationOfResourcesWarning',\n                              ),\n                            );\n                          }\n                          if (showRemainingWarning) {\n                            if (\n                              _.isNumber(remaining.cpu) &&\n                              value > remaining.cpu\n                            ) {\n                              return Promise.reject(\n                                t(\n                                  'session.launcher.EnqueueComputeSessionWarning',\n                                ),\n                              );\n                            }\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                    ]}\n                  >\n                    <InputNumberWithSlider\n                      inputNumberProps={{\n                        addonAfter:\n                          mergedResourceSlots?.cpu?.display_unit ||\n                          t('session.launcher.Core'),\n                      }}\n                      sliderProps={{\n                        marks: {\n                          // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                          ...(remaining.cpu\n                            ? {\n                                [remaining.cpu]: {\n                                  label: <RemainingMark />,\n                                },\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.min\n                            ? {\n                                [resourceLimits.cpu?.min]:\n                                  resourceLimits.cpu?.min,\n                              }\n                            : {}),\n                          ...(resourceLimits.cpu?.max\n                            ? {\n                                [resourceLimits.cpu?.max]: {\n                                  style: {\n                                    color: token.colorTextSecondary,\n                                  },\n                                  label: resourceLimits.cpu?.max,\n                                },\n                              }\n                            : {}),\n                        },\n                      }}\n                      min={resourceLimits.cpu?.min}\n                      max={resourceLimits.cpu?.max}\n                      step={1}\n                      onChange={() => {\n                        form.setFieldValue('allocationPreset', 'custom');\n                      }}\n                    />\n                  </Form.Item>\n                )}\n                {resourceSlots?.mem && (\n                  <Form.Item\n                    label={t('session.launcher.Memory')}\n                    tooltip={{\n                      placement: 'right',\n                      props: {\n                        onClick: (e: any) => e.preventDefault(),\n                      },\n                      title: (\n                        <Flex\n                          direction=\"column\"\n                          onClick={(e) => e.preventDefault()}\n                        >\n                          <Trans i18nKey={'session.launcher.DescMemory'} />\n                          {/* <Divider\n                            style={{\n                              margin: 0,\n                              backgroundColor: token.colorBorderSecondary,\n                            }}\n                          />\n                         \n                          <Trans\n                            i18nKey={'session.launcher.DescSharedMemory'}\n                          /> */}\n                        </Flex>\n                      ),\n                    }}\n                    required\n                  >\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.resource.shmem !== next.resource.shmem\n                      }\n                    >\n                      {() => {\n                        return (\n                          <Form.Item\n                            name={['resource', 'mem']}\n                            noStyle\n                            rules={[\n                              {\n                                required: true,\n                              },\n                              {\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    _.isString(value) &&\n                                    resourceLimits.mem?.max &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.max,\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('general.MaxValueNotification', {\n                                        name: t('session.launcher.Memory'),\n                                        max:\n                                          _.toUpper(\n                                            resourceLimits.mem?.max || '0g',\n                                          ) + 'iB',\n                                      }),\n                                      // t('session.launcher.MinMemory', {\n                                      //   size: _.toUpper(\n                                      //     resourceLimits.mem?.min || '0g',\n                                      //   ),\n                                      // }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                // TODO: min of mem should be shmem + image's mem limit??\n                                validator: async (rule, value: string) => {\n                                  // const memMinPlusShmem =\n                                  //   addNumberWithUnits(\n                                  //     resourceLimits.mem?.min,\n                                  //     form.getFieldValue(['resource', 'shmem']),\n                                  //   ) || '0b';\n\n                                  if (\n                                    !_.isElement(value) &&\n                                    resourceLimits.mem?.min &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      resourceLimits.mem?.min || '0g',\n                                    ) < 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('session.launcher.MinMemory', {\n                                        size: _.toUpper(\n                                          resourceLimits.mem?.min || '0g',\n                                        ),\n                                      }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                warningOnly: true,\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    compareNumberWithUnits(\n                                      resourceLimits.mem?.min as string,\n                                      resourceLimits.mem?.max as string,\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      t(\n                                        'session.launcher.InsufficientAllocationOfResourcesWarning',\n                                      ),\n                                    );\n                                  }\n                                  if (showRemainingWarning) {\n                                    if (\n                                      !_.isElement(value) &&\n                                      resourceLimits.mem &&\n                                      compareNumberWithUnits(\n                                        value,\n                                        remaining.mem + 'b',\n                                      ) > 0\n                                    ) {\n                                      return Promise.reject(\n                                        t(\n                                          'session.launcher.EnqueueComputeSessionWarning',\n                                        ),\n                                      );\n                                    }\n                                  }\n                                  return Promise.resolve();\n                                },\n                              },\n                            ]}\n                          >\n                            <DynamicUnitInputNumberWithSlider\n                              max={resourceLimits.mem?.max}\n                              // min=\"256m\"\n                              // min={'0g'}\n                              // min={addNumberWithUnits(\n                              //   resourceLimits.mem?.min,\n                              //   form.getFieldValue(['resource', 'shmem']) || '0g',\n                              // )}\n                              min={resourceLimits.mem?.min}\n                              // warn={\n                              //   checkPresetInfo?.scaling_group_remaining.mem ===\n                              //   undefined\n                              //     ? undefined\n                              //     : checkPresetInfo?.scaling_group_remaining.mem + 'g'\n                              // }\n                              addonBefore={'MEM'}\n                              extraMarks={{\n                                // ...(checkPresetInfo?.scaling_group_remaining.mem\n                                //   ? {\n                                //       // @ts-ignore\n                                //       [iSizeToSize(\n                                //         checkPresetInfo?.scaling_group_remaining\n                                //           .mem,\n                                //         'g',\n                                //         3,\n                                //       ).numberFixed]: {\n                                //         label: '-',\n                                //       },\n                                //     }\n                                //   : {}),\n                                // ...(form.getFieldValue(['resource', 'shmem'])\n                                //   ? {\n                                //       [iSizeToSize(\n                                //         form.getFieldValue([\n                                //           'resource',\n                                //           'shmem',\n                                //         ]),\n                                //         'g',\n                                //       )?.number || 0]: (\n                                //         <Flex\n                                //           style={{\n                                //             height: 8,\n                                //             width: 8,\n                                //             borderRadius: 4,\n                                //             backgroundColor: token.colorInfo,\n                                //             position: 'absolute',\n                                //             top: -10,\n                                //             transform: 'translateX(-50%)',\n                                //             opacity: 0.5,\n                                //             pointerEvents: 'none',\n                                //           }}\n                                //         ></Flex>\n                                //       ),\n                                //     }\n                                //   : undefined),\n                                ...(remaining.mem\n                                  ? {\n                                      //@ts-ignore\n                                      [iSizeToSize(remaining.mem + 'b', 'g', 3)\n                                        ?.numberFixed]: {\n                                        label: <RemainingMark />,\n                                      },\n                                    }\n                                  : {}),\n                              }}\n                              onChange={(M_plus_S) => {\n                                if (\n                                  !M_plus_S ||\n                                  !form.getFieldValue('enabledAutomaticShmem')\n                                )\n                                  return;\n                                runShmemAutomationRule(M_plus_S);\n\n                                form.setFieldValue(\n                                  'allocationPreset',\n                                  'custom',\n                                );\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n\n                    <Flex direction=\"column\" gap={'xxs'} align=\"start\">\n                      <Flex direction=\"row\" gap={'xs'}>\n                        {t('session.launcher.EnableAutomaticMiniumShmem')}{' '}\n                        <Form.Item\n                          noStyle\n                          name={'enabledAutomaticShmem'}\n                          valuePropName=\"checked\"\n                        >\n                          <Switch\n                            size=\"small\"\n                            onChange={(checked) => {\n                              if (checked) {\n                                runShmemAutomationRule(\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                    '0g',\n                                );\n                              }\n                              form.setFieldValue('allocationPreset', 'custom');\n                            }}\n                          />\n                        </Form.Item>\n                      </Flex>\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prev, next) =>\n                          prev.resource.mem !== next.resource.mem ||\n                          prev.enabledAutomaticShmem !==\n                            next.enabledAutomaticShmem\n                        }\n                      >\n                        {() => {\n                          return (\n                            <Form.Item\n                              noStyle\n                              name={['resource', 'shmem']}\n                              // initialValue={'0g'}\n                              // label={t('session.launcher.SharedMemory')}\n                              hidden={form.getFieldValue(\n                                'enabledAutomaticShmem',\n                              )}\n                              tooltip={\n                                <Trans\n                                  i18nKey={'session.launcher.DescSharedMemory'}\n                                />\n                              }\n                              dependencies={[['resource', 'mem']]}\n                              rules={[\n                                {\n                                  required: true,\n                                },\n                                {},\n                                {\n                                  validator: async (rule, value: string) => {\n                                    if (\n                                      _.isEmpty(\n                                        getFieldValue('resource')?.mem,\n                                      ) ||\n                                      _.isEmpty(value) ||\n                                      compareNumberWithUnits(\n                                        getFieldValue('resource')?.mem,\n                                        value,\n                                      ) >= 0\n                                    ) {\n                                      return Promise.resolve();\n                                    } else {\n                                      throw t(\n                                        'resourcePreset.SHMEMShouldBeSmallerThanMemory',\n                                      );\n                                    }\n                                  },\n                                },\n                              ]}\n                            >\n                              <DynamicUnitInputNumberWithSlider\n                                // shmem max is mem max\n                                // min={resourceLimits.shmem?.min}\n                                min={resourceLimits.shmem?.min}\n                                // max={resourceLimits.mem?.max || '0g'}\n                                addonBefore={'SHM'}\n                                max={\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                  '0g'\n                                }\n                                hideSlider\n                                onChange={() => {\n                                  form.setFieldValue(\n                                    'allocationPreset',\n                                    'custom',\n                                  );\n                                }}\n                              />\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                )}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) => {\n                    return (\n                      prev.resource?.acceleratorType !==\n                        next.resource?.acceleratorType ||\n                      // ref: https://github.com/lablup/backend.ai-webui/issues/868\n                      // change gpu step to 1 when cluster_size > 1\n                      prev.cluster_size !== next.cluster_size\n                    );\n                  }}\n                >\n                  {({ getFieldValue }) => {\n                    const currentAcceleratorType = getFieldValue([\n                      'resource',\n                      'acceleratorType',\n                    ]);\n                    return (\n                      <Form.Item\n                        name={['resource', 'accelerator']}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        tooltip={{\n                          placement: 'right',\n                          title: (\n                            <Trans\n                              i18nKey={'session.launcher.DescAIAccelerator'}\n                            />\n                          ),\n                        }}\n                        rules={[\n                          {\n                            required: currentImageAcceleratorLimits.length > 0,\n                          },\n                          {\n                            type: 'number',\n                            min:\n                              resourceLimits.accelerators[\n                                currentAcceleratorType\n                              ]?.min || 0,\n                            max: resourceLimits.accelerators[\n                              currentAcceleratorType\n                            ]?.max,\n                          },\n                          {\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.endsWith(currentAcceleratorType, 'shares') &&\n                                form.getFieldValue('cluster_size') >= 2 &&\n                                value % 1 !== 0\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.OnlyAllowsDiscreteNumberByClusterSize',\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                          {\n                            warningOnly: true,\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                _.isNumber(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.min,\n                                ) &&\n                                _.isNumber(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.max,\n                                ) &&\n                                isMinOversMaxValue(\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.min,\n                                  resourceLimits.accelerators[\n                                    currentAcceleratorType\n                                  ]?.max,\n                                )\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.InsufficientAllocationOfResourcesWarning',\n                                  ),\n                                );\n                              }\n                              if (showRemainingWarning) {\n                                if (\n                                  _.isNumber(\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ],\n                                  ) &&\n                                  value >\n                                    remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]\n                                ) {\n                                  return Promise.reject(\n                                    t(\n                                      'session.launcher.EnqueueComputeSessionWarning',\n                                    ),\n                                  );\n                                }\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          sliderProps={{\n                            marks: {\n                              0: 0,\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.accelerators[currentAcceleratorType]\n                                ? {\n                                    [remaining.accelerators[\n                                      currentAcceleratorType\n                                    ]]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(\n                                resourceLimits.accelerators[\n                                  currentAcceleratorType\n                                ]?.max,\n                              )\n                                ? {\n                                    // @ts-ignore\n                                    [resourceLimits.accelerators[\n                                      currentAcceleratorType\n                                    ]?.max]:\n                                      resourceLimits.accelerators[\n                                        currentAcceleratorType\n                                      ]?.max,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${mergedResourceSlots?.[currentAcceleratorType]?.display_unit || ''}`;\n                              },\n                              open:\n                                currentImageAcceleratorLimits.length <= 0\n                                  ? false\n                                  : undefined,\n                            },\n                          }}\n                          disabled={\n                            currentImageAcceleratorLimits.length === 0 &&\n                            _.isEmpty(\n                              form.getFieldValue(['environments', 'manual']),\n                            )\n                          }\n                          min={0}\n                          max={\n                            resourceLimits.accelerators[currentAcceleratorType]\n                              ?.max\n                          }\n                          step={\n                            _.endsWith(currentAcceleratorType, 'shares') &&\n                            form.getFieldValue('cluster_size') < 2\n                              ? 0.1\n                              : 1\n                          }\n                          onChange={() => {\n                            form.setFieldValue('allocationPreset', 'custom');\n                          }}\n                          inputNumberProps={{\n                            addonAfter: (\n                              <Form.Item\n                                noStyle\n                                name={['resource', 'acceleratorType']}\n                                initialValue={_.keys(acceleratorSlots)[0]}\n                              >\n                                <Select\n                                  tabIndex={-1}\n                                  disabled={\n                                    currentImageAcceleratorLimits.length ===\n                                      0 &&\n                                    _.isEmpty(\n                                      form.getFieldValue([\n                                        'environments',\n                                        'manual',\n                                      ]),\n                                    )\n                                  }\n                                  suffixIcon={\n                                    _.size(acceleratorSlots) > 1\n                                      ? undefined\n                                      : null\n                                  }\n                                  // open={\n                                  //   _.size(acceleratorSlots) > 1\n                                  //     ? undefined\n                                  //     : false\n                                  // }\n                                  popupMatchSelectWidth={false}\n                                  options={_.map(\n                                    acceleratorSlots,\n                                    (value, name) => {\n                                      return {\n                                        value: name,\n                                        label:\n                                          mergedResourceSlots?.[name]\n                                            ?.display_unit || 'UNIT',\n                                        disabled:\n                                          currentImageAcceleratorLimits.length >\n                                            0 &&\n                                          !_.find(\n                                            currentImageAcceleratorLimits,\n                                            (limit) => limit?.key === name,\n                                          ),\n                                      };\n                                    },\n                                  )}\n                                />\n                              </Form.Item>\n                            ),\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n      {enableNumOfSessions ? (\n        <Card\n          style={{\n            marginBottom: token.margin,\n          }}\n        >\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.cluster_size !== next.cluster_size\n            }\n          >\n            {() => {\n              return (\n                <Form.Item\n                  name={['num_of_sessions']}\n                  label={t('webui.menu.Sessions')}\n                  tooltip={<Trans i18nKey={'session.launcher.DescSession'} />}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                    },\n                    {\n                      warningOnly: true,\n                      validator: async (rule, value: number) => {\n                        if (showRemainingWarning) {\n                          if (\n                            sessionSliderLimitAndRemaining &&\n                            value > sessionSliderLimitAndRemaining.remaining\n                          ) {\n                            return Promise.reject(\n                              t(\n                                'session.launcher.EnqueueComputeSessionWarning',\n                              ),\n                            );\n                          }\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumberWithSlider\n                    inputNumberProps={{\n                      addonAfter: '#',\n                    }}\n                    disabled={form.getFieldValue('cluster_size') > 1}\n                    sliderProps={{\n                      marks: {\n                        [sessionSliderLimitAndRemaining?.min]:\n                          sessionSliderLimitAndRemaining?.min,\n                        // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                        ...(sessionSliderLimitAndRemaining?.remaining\n                          ? {\n                              [sessionSliderLimitAndRemaining?.remaining]: {\n                                label: <RemainingMark />,\n                              },\n                            }\n                          : {}),\n                        [sessionSliderLimitAndRemaining?.max]:\n                          sessionSliderLimitAndRemaining?.max,\n                      },\n                    }}\n                    min={sessionSliderLimitAndRemaining?.min}\n                    max={sessionSliderLimitAndRemaining?.max}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Form.Item>\n        </Card>\n      ) : null}\n      {/* TODO: Support cluster mode */}\n      {baiClient.supports('multi-container') && (\n        // {false && (\n        <Form.Item\n          label={t('session.launcher.ClusterMode')}\n          tooltip={\n            <Flex direction=\"column\" align=\"start\">\n              {t('session.launcher.SingleNode')}\n              <Trans i18nKey={'session.launcher.DescSingleNode'} />\n              <Divider style={{ backgroundColor: token.colorBorder }} />\n              {t('session.launcher.MultiNode')}\n              <Trans i18nKey={'session.launcher.DescMultiNode'} />\n            </Flex>\n          }\n          required\n        >\n          <Card\n            style={{\n              marginBottom: token.margin,\n            }}\n          >\n            <Row gutter={token.marginMD}>\n              <Col xs={24}>\n                {/* <Col xs={24} lg={12}> */}\n                <Form.Item name={'cluster_mode'} required>\n                  <Radio.Group\n                    onChange={(e) => {\n                      form.validateFields().catch(() => {});\n                    }}\n                  >\n                    <Radio.Button value=\"single-node\">\n                      {t('session.launcher.SingleNode')}\n                    </Radio.Button>\n                    <Radio.Button value=\"multi-node\">\n                      {t('session.launcher.MultiNode')}\n                    </Radio.Button>\n                  </Radio.Group>\n                </Form.Item>\n              </Col>\n              <Col xs={24}>\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) =>\n                    prev.cluster_mode !== next.cluster_mode\n                  }\n                >\n                  {() => {\n                    const derivedClusterSizeMaxLimit = _.min([\n                      resourceLimits.cpu?.max,\n                      keypairResourcePolicy.max_containers_per_session,\n                    ]);\n                    const clusterUnit =\n                      form.getFieldValue('cluster_mode') === 'single-node'\n                        ? t('session.launcher.Container')\n                        : t('session.launcher.Node');\n                    return (\n                      <Form.Item\n                        name={'cluster_size'}\n                        label={t('session.launcher.ClusterSize')}\n                        required\n                        rules={[\n                          {\n                            warningOnly: true,\n                            validator: async (rule, value: number) => {\n                              if (showRemainingWarning) {\n                                const minCPU = _.min([\n                                  remaining.cpu,\n                                  keypairResourcePolicy.max_containers_per_session,\n                                ]);\n                                if (_.isNumber(minCPU) && value > minCPU) {\n                                  return Promise.reject(\n                                    t(\n                                      'session.launcher.EnqueueComputeSessionWarning',\n                                    ),\n                                  );\n                                }\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          min={1}\n                          step={1}\n                          // TODO: max cluster size\n                          max={\n                            _.isNumber(derivedClusterSizeMaxLimit)\n                              ? derivedClusterSizeMaxLimit\n                              : undefined\n                          }\n                          disabled={derivedClusterSizeMaxLimit === 1}\n                          sliderProps={{\n                            marks: {\n                              1: '1',\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(remaining.cpu\n                                ? {\n                                    [remaining.cpu]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              ...(_.isNumber(derivedClusterSizeMaxLimit)\n                                ? {\n                                    [derivedClusterSizeMaxLimit]:\n                                      derivedClusterSizeMaxLimit,\n                                  }\n                                : {}),\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${clusterUnit}`;\n                              },\n                            },\n                          }}\n                          inputNumberProps={{\n                            addonAfter: clusterUnit,\n                          }}\n                          onChange={(value) => {\n                            if (value > 1) {\n                              form.setFieldValue('num_of_sessions', 1);\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </Col>\n            </Row>\n          </Card>\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nconst RemainingMark: React.FC<{ title?: string }> = () => {\n  const { token } = theme.useToken();\n  return (\n    <Flex\n      style={{\n        position: 'absolute',\n        top: -24,\n        transform: 'translateX(-50%)',\n        color: token.colorSuccess,\n        opacity: 0.5,\n      }}\n    >\n      <CaretDownOutlined />\n    </Flex>\n  );\n};\n\nconst MemoizedResourceAllocationFormItems = React.memo(\n  ResourceAllocationFormItems,\n);\n\nexport default MemoizedResourceAllocationFormItems;\n\nexport const getAllocatablePresetNames = (\n  presets: Array<ResourcePreset> | undefined,\n  resourceLimits: MergedResourceLimits,\n  currentImage: Image,\n) => {\n  const currentImageAcceleratorLimits = _.filter(\n    currentImage?.resource_limits,\n    (limit) =>\n      limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n  );\n\n  const bySliderLimit = _.filter(presets, (preset) => {\n    // After allow pending session, we don't need to check allocatable field.\n    // if (_.has(preset, 'allocatable')) {\n    //   return !!preset.allocatable;\n    // }\n\n    // Check if all resource slots in the preset are less than or equal to resourceLimits\n    // Be careful with the type of values in resourceLimits, they are string or number\n    return _.every(preset.resource_slots, (value, key) => {\n      if (key === 'mem') {\n        // if mem resource limit is not defined, it is UNLIMITED\n        const isNoLimit = typeof resourceLimits[key]?.max !== 'string';\n        return isNoLimit\n          ? true\n          : typeof preset.resource_slots[key] === 'string' &&\n              typeof resourceLimits[key]?.max === 'string' &&\n              compareNumberWithUnits(\n                preset.resource_slots[key],\n                resourceLimits[key]?.max,\n              ) <= 0;\n      } else if (key === 'shmem') {\n        // no need to check shmem\n        return true;\n      } else if (key === 'cpu') {\n        // if cpu resource limit is not defined, it is UNLIMITED\n        const isNoLimit = _.isNaN(_.toNumber(resourceLimits[key]?.max));\n        return isNoLimit\n          ? true\n          : (_.toNumber(preset.resource_slots[key]) || 0) <=\n              _.toNumber(resourceLimits[key]?.max);\n      } else {\n        // if accelerator resource limit is not defined, it is UNLIMITED\n        const isNoLimit = _.isNaN(\n          _.toNumber(resourceLimits.accelerators[key]?.max),\n        );\n        return isNoLimit\n          ? true\n          : (_.toNumber(preset.resource_slots[key]) || 0) <=\n              _.toNumber(resourceLimits.accelerators[key]?.max);\n      }\n    });\n  }).map((preset) => preset.name);\n\n  const byImageAcceleratorLimits = _.filter(presets, (preset) => {\n    const acceleratorResourceOfPreset = _.omitBy(\n      preset.resource_slots,\n      (value, key) => {\n        if (['mem', 'cpu', 'shmem'].includes(key)) return true;\n      },\n    );\n    if (currentImageAcceleratorLimits.length === 0) {\n      // When current image doesn't require any accelerator,\n      // It's available if the preset doesn't have any accelerator\n      if (_.isEmpty(acceleratorResourceOfPreset)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      // When current image requires some accelerator,\n      // It's available if the preset has a required accelerator value that is larger than the current image's minimum value\n      return _.some(currentImageAcceleratorLimits, (limit) => {\n        return (\n          limit?.key &&\n          acceleratorResourceOfPreset[limit?.key] &&\n          _.toNumber(acceleratorResourceOfPreset[limit?.key]) >=\n            _.toNumber(limit?.min)\n        );\n      });\n    }\n  }).map((preset) => preset.name);\n  return currentImageAcceleratorLimits.length === 0\n    ? bySliderLimit\n    : _.intersection(bySliderLimit, byImageAcceleratorLimits);\n};\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { useSuspenseTanQuery } from '../hooks/reactQueryAlias';\nimport useControllableState from '../hooks/useControllableState';\nimport TextHighlighter from './TextHighlighter';\nimport { Select, SelectProps } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\n\ninterface ResourceGroupSelectProps extends SelectProps {\n  projectName: string;\n  autoSelectDefault?: boolean;\n  filter?: (projectName: string) => boolean;\n}\n\nconst ResourceGroupSelect: React.FC<ResourceGroupSelectProps> = ({\n  projectName,\n  autoSelectDefault,\n  filter,\n  searchValue,\n  onSearch,\n  loading,\n  ...selectProps\n}) => {\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const [fetchKey] = useUpdatableState('first');\n  const [controllableSearchValue, setControllableSearchValue] =\n    useControllableState<string>({\n      value: searchValue,\n      onChange: onSearch,\n    });\n\n  const [controllableValue, setControllableValue] =\n    useControllableState(selectProps);\n\n  const { data: resourceGroupSelectQueryResult } = useSuspenseTanQuery<\n    [\n      {\n        scaling_groups: {\n          name: string;\n        }[];\n      },\n      {\n        allowed: string[];\n        default: string;\n        volume_info: {\n          [key: string]: {\n            backend: string;\n            capabilities: string[];\n            usage: {\n              percentage: number;\n            };\n            sftp_scaling_groups?: string[];\n          };\n        };\n      },\n    ]\n  >({\n    queryKey: ['ResourceGroupSelectQuery', projectName],\n    queryFn: () => {\n      const search = new URLSearchParams();\n      search.set('group', projectName);\n      return Promise.all([\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/scaling-groups?${search.toString()}`,\n        }),\n        baiRequestWithPromise({\n          method: 'GET',\n          url: `/folders/_/hosts`,\n        }),\n      ]);\n    },\n    staleTime: 0,\n    fetchKey: fetchKey,\n  });\n\n  const sftpResourceGroups = _.flatMap(\n    resourceGroupSelectQueryResult?.[1].volume_info,\n    (item) => item?.sftp_scaling_groups ?? [],\n  );\n\n  const resourceGroups = _.filter(\n    resourceGroupSelectQueryResult?.[0].scaling_groups,\n    (item) => {\n      if (_.includes(sftpResourceGroups, item.name)) {\n        return false;\n      }\n      if (filter) {\n        return filter(item.name);\n      }\n      return true;\n    },\n  );\n\n  useEffect(() => {\n    if (\n      controllableValue &&\n      !_.some(resourceGroups, (item) => item.name === controllableValue)\n    ) {\n      setControllableValue(undefined);\n    }\n  }, [resourceGroups, controllableValue, setControllableValue]);\n  const autoSelectedResourceGroup =\n    _.find(resourceGroups, (item) => item.name === 'default') ||\n    resourceGroups[0];\n  const autoSelectedOption = autoSelectedResourceGroup\n    ? {\n        label: autoSelectedResourceGroup.name,\n        value: autoSelectedResourceGroup.name,\n      }\n    : undefined;\n\n  useEffect(() => {\n    if (\n      autoSelectDefault &&\n      autoSelectedOption &&\n      autoSelectedOption.value !== selectProps.value\n    ) {\n      setControllableValue(autoSelectedOption.value, autoSelectedOption);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoSelectDefault]);\n\n  const searchProps: Pick<\n    SelectProps,\n    'onSearch' | 'searchValue' | 'showSearch'\n  > = selectProps.showSearch\n    ? {\n        onSearch: setControllableSearchValue,\n        searchValue: controllableSearchValue,\n        showSearch: true,\n      }\n    : {};\n\n  return (\n    <Select\n      defaultActiveFirstOption\n      {...searchProps}\n      defaultValue={autoSelectDefault ? autoSelectedOption : undefined}\n      onDropdownVisibleChange={(open) => {\n        // if (open) {\n        //   startLoadingTransition(() => {\n        //     updateFetchKey();\n        //   });\n        // }\n      }}\n      loading={loading}\n      options={_.map(resourceGroups, (resourceGroup) => {\n        return { value: resourceGroup.name, label: resourceGroup.name };\n      })}\n      optionRender={(option) => {\n        return (\n          <TextHighlighter keyword={controllableSearchValue}>\n            {option.data.value?.toString()}\n          </TextHighlighter>\n        );\n      }}\n      {...selectProps}\n      value={controllableValue}\n      onChange={setControllableValue}\n    />\n  );\n};\n\nexport default ResourceGroupSelect;\n","import { iSizeToSize } from '../helper';\nimport {\n  BaseResourceSlotName,\n  KnownAcceleratorResourceSlotName,\n  ResourceSlotName,\n  useResourceSlotsDetails,\n} from '../hooks/backendai';\nimport { useCurrentResourceGroupValue } from '../hooks/useCurrentProject';\nimport Flex from './Flex';\nimport { Tooltip, Typography, theme } from 'antd';\nimport _ from 'lodash';\nimport { MicrochipIcon } from 'lucide-react';\nimport React, { ReactElement } from 'react';\n\nexport type ResourceOpts = {\n  shmem?: number;\n};\ninterface ResourceNumberProps {\n  type: ResourceSlotName | string;\n  extra?: ReactElement;\n  opts?: ResourceOpts;\n  value: string;\n  hideTooltip?: boolean;\n  max?: string;\n}\n\ntype ResourceTypeInfo<V> = {\n  [key in KnownAcceleratorResourceSlotName]: V;\n} & {\n  [key in BaseResourceSlotName]: V;\n};\nconst ResourceNumber: React.FC<ResourceNumberProps> = ({\n  type,\n  value: amount,\n  extra,\n  opts,\n  hideTooltip = false,\n  max,\n}) => {\n  const { token } = theme.useToken();\n  const currentGroup = useCurrentResourceGroupValue();\n  const { mergedResourceSlots } = useResourceSlotsDetails(\n    currentGroup || undefined,\n  );\n\n  const formatAmount = (amount: string) => {\n    return mergedResourceSlots?.[type]?.number_format.binary\n      ? Number(iSizeToSize(amount, 'g', 3, true)?.numberFixed).toString()\n      : (mergedResourceSlots?.[type]?.number_format.round_length || 0) > 0\n        ? parseFloat(amount).toFixed(2)\n        : amount;\n  };\n\n  return (\n    <Flex direction=\"row\" gap=\"xxs\">\n      {mergedResourceSlots?.[type] ? (\n        <ResourceTypeIcon type={type} showTooltip={!hideTooltip} />\n      ) : (\n        type\n      )}\n\n      <Typography.Text>\n        {formatAmount(amount)}\n        {_.isUndefined(max)\n          ? null\n          : max === 'Infinity'\n            ? '~∞'\n            : `~${formatAmount(max)}`}\n      </Typography.Text>\n      <Typography.Text type=\"secondary\">\n        {mergedResourceSlots?.[type]?.display_unit || ''}\n      </Typography.Text>\n      {type === 'mem' && opts?.shmem && opts?.shmem > 0 ? (\n        <Typography.Text\n          type=\"secondary\"\n          style={{ fontSize: token.fontSizeSM }}\n        >\n          (SHM: {iSizeToSize(opts.shmem + 'b', 'g', 2, true)?.numberFixed}\n          GiB)\n        </Typography.Text>\n      ) : null}\n      {extra}\n    </Flex>\n  );\n};\n\nconst MWCIconWrap: React.FC<{ size?: number; children: string }> = ({\n  size = 16,\n  children,\n}) => {\n  return (\n    // @ts-ignore\n    <mwc-icon\n      style={{\n        '--mdc-icon-size': `${size + 2}px`,\n        width: size,\n        height: size,\n      }}\n    >\n      {children}\n      {/* @ts-ignore */}\n    </mwc-icon>\n  );\n};\ninterface AccTypeIconProps\n  extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'src'> {\n  type: ResourceSlotName | string;\n  showIcon?: boolean;\n  showUnit?: boolean;\n  showTooltip?: boolean;\n  size?: number;\n}\nexport const ResourceTypeIcon: React.FC<AccTypeIconProps> = ({\n  type,\n  size = 16,\n  showIcon = true,\n  showUnit = true,\n  showTooltip = true,\n  ...props\n}) => {\n  const resourceTypeIconSrcMap: ResourceTypeInfo<ReactElement | string> = {\n    cpu: <MWCIconWrap size={size}>developer_board</MWCIconWrap>,\n    mem: <MWCIconWrap size={size}>memory</MWCIconWrap>,\n    'cuda.device': '/resources/icons/file_type_cuda.svg',\n    'cuda.shares': '/resources/icons/file_type_cuda.svg',\n    'rocm.device': '/resources/icons/rocm.svg',\n    'tpu.device': <MWCIconWrap size={size}>view_module</MWCIconWrap>,\n    'ipu.device': <MWCIconWrap size={size}>view_module</MWCIconWrap>,\n    'atom.device': '/resources/icons/rebel.svg',\n    'atom-plus.device': '/resources/icons/rebel.svg',\n    'gaudi2.device': '/resources/icons/gaudi.svg',\n    'warboy.device': '/resources/icons/furiosa.svg',\n    'hyperaccel-lpu.device': '/resources/icons/npu_generic.svg',\n  };\n\n  const targetIcon = resourceTypeIconSrcMap[\n    type as KnownAcceleratorResourceSlotName\n  ] ?? <MicrochipIcon />;\n\n  const content =\n    typeof targetIcon === 'string' ? (\n      <img\n        {...props}\n        style={{\n          height: size,\n          alignSelf: 'center',\n          ...(props.style || {}),\n        }}\n        // @ts-ignore\n        src={resourceTypeIconSrcMap[type] || ''}\n        alt={type}\n      />\n    ) : (\n      <Flex style={{ width: 16, height: 16 }}>{targetIcon || type}</Flex>\n    );\n\n  return showTooltip ? (\n    <Tooltip title={type}>{content}</Tooltip>\n  ) : (\n    <Flex style={{ pointerEvents: 'none' }}>{content}</Flex>\n  );\n};\n\nexport default React.memo(ResourceNumber);\n","/**\n * @generated SignedSource<<7893010249a8558bb6de4f479d99f12f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = Record<PropertyKey, never>;\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null | undefined;\n    readonly resource_slots: any | null | undefined;\n    readonly shared_memory: any | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","export const UNLIMITED_MAX_CONTAINERS_PER_SESSIONS = 1000000;\nexport const UNLIMITED_MAX_CONCURRENT_SESSIONS = 1000000;\n","/**\n * @generated SignedSource<<8778f761ce6a09e82f9dd28167c11901>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairQuery$variables = {\n  accessKey: string;\n};\nexport type hooksUsingRelay_KeyPairQuery$data = {\n  readonly keypair: {\n    readonly concurrency_used: number | null | undefined;\n    readonly id: string | null | undefined;\n    readonly resource_policy: string | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairQuery = {\n  response: hooksUsingRelay_KeyPairQuery$data;\n  variables: hooksUsingRelay_KeyPairQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"accessKey\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"access_key\",\n        \"variableName\": \"accessKey\"\n      }\n    ],\n    \"concreteType\": \"KeyPair\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_policy\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"concurrency_used\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1f8fc324e9907111de581f5cd2dc3640\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairQuery(\\n  $accessKey: String!\\n) {\\n  keypair(access_key: $accessKey) {\\n    id\\n    resource_policy\\n    concurrency_used\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8f5c91f0fc46a3366f57566ab688d81\";\n\nexport default node;\n","/**\n * @generated SignedSource<<3381af962875475b393ccdb463fe5531>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$variables = {\n  name: string;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$data = {\n  readonly keypair_resource_policy: {\n    readonly max_concurrent_sessions: number | null | undefined;\n    readonly max_containers_per_session: number | null | undefined;\n  } | null | undefined;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery = {\n  response: hooksUsingRelay_KeyPairResourcePolicyQuery$data;\n  variables: hooksUsingRelay_KeyPairResourcePolicyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_containers_per_session\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_concurrent_sessions\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ad7039c1935637fe3f3841f0ea8bf347\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairResourcePolicyQuery(\\n  $name: String!\\n) {\\n  keypair_resource_policy(name: $name) {\\n    max_containers_per_session\\n    max_concurrent_sessions\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f3f7364c63aefe9b03111b584c48c103\";\n\nexport default node;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { UNLIMITED_MAX_CONCURRENT_SESSIONS } from '../helper/const-vars';\nimport { hooksUsingRelay_KeyPairQuery } from './__generated__/hooksUsingRelay_KeyPairQuery.graphql';\nimport { hooksUsingRelay_KeyPairResourcePolicyQuery } from './__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useCallback } from 'react';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ninterface FetchOptions {\n  fetchKey?: string | number;\n  fetchPolicy?: FetchPolicy;\n}\nexport const useKeyPairLazyLoadQuery = (\n  accessKey: string,\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { keypair } = useLazyLoadQuery<hooksUsingRelay_KeyPairQuery>(\n    graphql`\n      query hooksUsingRelay_KeyPairQuery($accessKey: String!) {\n        keypair(access_key: $accessKey) {\n          id\n          resource_policy\n          concurrency_used\n        }\n      }\n    `,\n    {\n      accessKey: accessKey,\n    },\n    {\n      ...options,\n      fetchKey: fetchKey + options.fetchKey,\n    },\n  );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [keypair, { refresh }] as const;\n};\n\nexport const useCurrentKeyPairResourcePolicyLazyLoadQuery = (\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const { keypair_resource_policy } =\n    useLazyLoadQuery<hooksUsingRelay_KeyPairResourcePolicyQuery>(\n      graphql`\n        query hooksUsingRelay_KeyPairResourcePolicyQuery($name: String!) {\n          keypair_resource_policy(name: $name) {\n            max_containers_per_session\n            max_concurrent_sessions\n          }\n        }\n      `,\n      {\n        name: keypair?.resource_policy || '',\n      },\n      {\n        ...options,\n        fetchKey: fetchKey + options.fetchKey,\n      },\n    );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [\n    {\n      keypairResourcePolicy: (keypair_resource_policy || {}) as NonNullable<\n        typeof keypair_resource_policy\n      >,\n      keypair: (keypair || {}) as NonNullable<typeof keypair>,\n      sessionLimitAndRemaining: {\n        max: _.min([\n          (keypair_resource_policy || {}).max_concurrent_sessions ||\n            UNLIMITED_MAX_CONCURRENT_SESSIONS,\n          3, //BackendAiResourceBroker.DEFAULT_CONCURRENT_SESSION_COUNT\n        ]) as number,\n        remaining:\n          ((keypair_resource_policy || {}).max_concurrent_sessions || 3) -\n          ((keypair || {}).concurrency_used || 0),\n      },\n    },\n    { refresh },\n  ] as const;\n};\n","import { useSuspendedBackendaiClient } from '.';\nimport { Image } from '../components/ImageEnvironmentSelectFormItems';\nimport { AUTOMATIC_DEFAULT_SHMEM } from '../components/ResourceAllocationFormItems';\nimport { addNumberWithUnits, iSizeToSize } from '../helper';\nimport { ResourceSlotName, useResourceSlots } from '../hooks/backendai';\nimport { useSuspenseTanQuery } from './reactQueryAlias';\nimport _ from 'lodash';\nimport { useMemo } from 'react';\n\nconst maxPerContainerRegex = /^max([A-Za-z0-9]+)PerContainer$/;\n\nexport const isMatchingMaxPerContainer = (configName: string, key: string) => {\n  const match = configName.match(maxPerContainerRegex);\n  if (match) {\n    const configLowerCase = match[1].toLowerCase();\n    const keyLowerCase = key.replaceAll(/[.-]/g, '').toLowerCase();\n    // Because some accelerator names are not the same as the config name, we need to check if the config name is a substring of the accelerator name\n    // cuda.shares => maxCUDASharesPerContainer\n    // cuda.device => maxCUDADevicesPerContainer (Not maxCUDADevicePerContainer)\n    return (\n      configLowerCase === keyLowerCase || configLowerCase === keyLowerCase + 's'\n    );\n  }\n  return false;\n};\nexport interface MergedResourceLimits {\n  accelerators: {\n    [key: string]:\n      | {\n          min?: number;\n          max?: number;\n        }\n      | undefined;\n  };\n  cpu?: {\n    min?: number;\n    max?: number;\n  };\n  mem?: {\n    min?: string;\n    max?: string;\n  };\n  shmem?: {\n    min?: string;\n    max?: string;\n  };\n}\n\ntype ResourceLimits = {\n  [key in ResourceSlotName]?: string | 'Infinity' | 'NaN';\n};\ntype ResourceUsing = ResourceLimits;\ntype ResourceRemaining = ResourceLimits;\ntype ScalingGroup = {\n  using: ResourceUsing;\n  remaining: ResourceRemaining;\n};\n\ntype ResourceSlots = {\n  cpu: string;\n  mem: string;\n  [key: string]: string;\n};\n\ntype RemainingSlots = {\n  cpu: number;\n  mem: number;\n  accelerators: {\n    [key: string]: number;\n  };\n};\n\nexport type ResourcePreset = {\n  name: string;\n  resource_slots: ResourceSlots;\n  shared_memory: string | null;\n  allocatable: boolean;\n};\n\ntype ResourceAllocation = {\n  keypair_limits: ResourceLimits;\n  keypair_using: ResourceUsing;\n  keypair_remaining: ResourceRemaining;\n  scaling_group_remaining: ResourceRemaining;\n  scaling_groups: {\n    [key: string]: ScalingGroup;\n  };\n  presets: ResourcePreset[];\n  group_limits: ResourceLimits;\n  group_using: ResourceUsing;\n  group_remaining: ResourceRemaining;\n};\n\ninterface Props {\n  currentProjectName: string;\n  currentImage?: Image;\n  currentResourceGroup?: string;\n  ignorePerContainerConfig?: boolean;\n}\n\n// determine resource limits and remaining for current resource group and current image in current project\nexport const useResourceLimitAndRemaining = ({\n  currentImage,\n  currentResourceGroup = '',\n  currentProjectName,\n  ignorePerContainerConfig = false,\n}: Props) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n\n  const {\n    data: checkPresetInfo,\n    refetch,\n    isRefetching,\n  } = useSuspenseTanQuery<ResourceAllocation | undefined>({\n    queryKey: ['check-presets', currentProjectName, currentResourceGroup],\n    queryFn: () => {\n      if (currentResourceGroup) {\n        return baiClient.resourcePreset\n          .check({\n            group: currentProjectName,\n            scaling_group: currentResourceGroup,\n          })\n          .catch(() => {});\n      } else {\n        return;\n      }\n    },\n    staleTime: 1000,\n    // suspense: !_.isEmpty(currentResourceGroup), //prevent flicking\n  });\n\n  const currentImageMinM =\n    _.find(currentImage?.resource_limits, (i) => i?.key === 'mem')?.min || '0g';\n\n  const resourceGroupResourceSize: {\n    cpu?: number;\n    mem?: string;\n    accelerators: {\n      [key: string]: number | undefined;\n    };\n  } = {\n    // scaling group all cpu (using + remaining), string type\n    cpu:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.cpu,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.cpu,\n      )\n        ? _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.cpu,\n          ) +\n          _.toNumber(\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n              .cpu,\n          )\n        : undefined,\n    mem:\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.mem,\n      ) &&\n      !_.isEmpty(\n        checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.mem,\n      )\n        ? iSizeToSize(\n            _.toNumber(\n              checkPresetInfo?.scaling_groups[currentResourceGroup]?.using.mem,\n            ) +\n              _.toNumber(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n                  .mem,\n              ) +\n              'b',\n            'g',\n            2,\n          )?.numberFixed + 'g'\n        : undefined,\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.[key],\n          ) &&\n          !_.isEmpty(\n            // @ts-ignore\n            checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining?.[\n              key\n            ],\n          )\n            ? _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.using[\n                  key\n                ],\n              ) +\n              _.toNumber(\n                // @ts-ignore\n                checkPresetInfo?.scaling_groups[currentResourceGroup]\n                  ?.remaining[key],\n              )\n            : undefined;\n        return result;\n      },\n      {} as {\n        [key: string]: number | undefined;\n      },\n    ),\n  };\n  const perContainerConfigs = useMemo(\n    () =>\n      _.omitBy(baiClient._config, (value, key) => {\n        return !maxPerContainerRegex.test(key);\n      }),\n    [baiClient._config],\n  );\n\n  const resourceLimits: MergedResourceLimits = {\n    cpu:\n      resourceSlots?.cpu === undefined\n        ? undefined\n        : {\n            min: _.max([\n              _.toNumber(\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'cpu')\n                  ?.min || '0',\n              ),\n            ]),\n            max: _.min([\n              ignorePerContainerConfig\n                ? undefined\n                : baiClient._config.maxCPUCoresPerContainer,\n              limitParser(checkPresetInfo?.keypair_limits.cpu),\n              limitParser(checkPresetInfo?.group_limits.cpu),\n              // resourceGroupResourceSize?.cpu,\n            ]),\n          },\n    mem:\n      resourceSlots?.mem === undefined\n        ? undefined\n        : {\n            // M to max of [ image's mem min, AUTOMATIC_DEFAULT_SHMEM]\n            // mem(M+S) should be larger than _.max([ image's mem min, AUTOMATIC_DEFAULT_SHMEM ]) + AUTOMATIC_DEFAULT_SHMEM (rule: S can not be larger than M)\n            min:\n              //handled by 'b' unit\n              addNumberWithUnits(\n                _.max([\n                  iSizeToSize(currentImageMinM, 'b')?.number,\n                  iSizeToSize(AUTOMATIC_DEFAULT_SHMEM, 'b')?.number,\n                  0,\n                ]) + 'b',\n                AUTOMATIC_DEFAULT_SHMEM,\n              ),\n            max:\n              //handled by 'g(GiB)' unit\n              _.min([\n                ignorePerContainerConfig\n                  ? undefined\n                  : baiClient._config.maxMemoryPerContainer,\n                limitParser(checkPresetInfo?.keypair_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.keypair_limits.mem) + '',\n                    'g',\n                  )?.number,\n                limitParser(checkPresetInfo?.group_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.group_limits.mem) + '',\n                    'g',\n                  )?.number,\n                // scaling group all mem (using + remaining), string type\n                // resourceGroupResourceSize?.mem &&\n                //   iSizeToSize(resourceGroupResourceSize?.mem + '', 'g')?.number,\n              ]) + 'g',\n          },\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        const perContainerLimit =\n          _.find(perContainerConfigs, (configValue, configName) => {\n            return isMatchingMaxPerContainer(configName, key);\n          }) ?? baiClient._config['cuda.device']; // FIXME: temporally `cuda.device` config, when undefined\n\n        result[key] = {\n          min: parseInt(\n            _.filter(\n              currentImage?.resource_limits,\n              (supportedAcceleratorInfo) => {\n                return supportedAcceleratorInfo?.key === key;\n              },\n            )?.[0]?.min || '0',\n          ),\n          max: _.min([\n            perContainerLimit || 8,\n            limitParser(\n              checkPresetInfo?.keypair_limits[key as ResourceSlotName],\n            ),\n            limitParser(checkPresetInfo?.group_limits[key as ResourceSlotName]),\n            // scaling group all cpu (using + remaining), string type\n            // resourceGroupResourceSize.accelerators[key],\n          ]),\n        };\n        return result;\n      },\n      {} as MergedResourceLimits['accelerators'],\n    ),\n  };\n  const remaining: RemainingSlots = {\n    accelerators: _.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        result[key] =\n          _.min([\n            _.toNumber(\n              checkPresetInfo?.keypair_remaining[key as ResourceSlotName],\n            ),\n            _.toNumber(\n              checkPresetInfo?.group_remaining[key as ResourceSlotName],\n            ),\n            _.toNumber(\n              checkPresetInfo?.scaling_group_remaining[key as ResourceSlotName],\n            ),\n          ]) ?? Number.MAX_SAFE_INTEGER;\n        return result;\n      },\n      {} as RemainingSlots['accelerators'],\n    ),\n    cpu:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.cpu),\n        limitParser(checkPresetInfo?.group_remaining.cpu),\n        limitParser(checkPresetInfo?.scaling_group_remaining.cpu),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n    mem:\n      _.min([\n        limitParser(checkPresetInfo?.keypair_remaining.mem),\n        limitParser(checkPresetInfo?.group_remaining.mem),\n        limitParser(checkPresetInfo?.scaling_group_remaining.mem),\n      ]) ?? Number.MAX_SAFE_INTEGER,\n  };\n\n  return [\n    {\n      resourceGroupResourceSize,\n      resourceLimits,\n      remaining,\n      currentImageMinM,\n      isRefetching,\n      checkPresetInfo,\n    },\n    {\n      refetch,\n    },\n  ] as const;\n};\n\nconst limitParser = (limit: string | undefined) => {\n  if (limit === undefined) {\n    return undefined;\n  } else if (limit === 'Infinity') {\n    return undefined;\n  } else if (limit === 'NaN') {\n    return undefined;\n  } else {\n    return _.toNumber(limit);\n  }\n};\n"],"names":["_ref","objectValues","values","length","React","map","value","label","color","_jsx","Flex","direction","children","_","objValue","idx","Tag","style","undefined","margin","marginRight","dynamicSteps","units","disableAutoUnit","min","max","roundStep","inputNumberProps","setValue","useControllableState","defaultValue","numValue","_unitFromValue","parseUnit","previousUnit","usePrevious","unit","minNumValue","minUnit","maxNumValue","maxUnit","ref","useRef","useEffect","current","onInput","e","_e$target","target","test","addEventListener","removeEventListener","InputNumber","onBlur","_roundStep$toString$s","_ref$current","_ref$current2","decimalCount","toString","split","isNaN","Math","round","toFixed","onChange","newValue","iSizeToSize","number","addonAfter","Select","tabIndex","newUnit","onDropdownVisibleChange","open","options","Typography","Text","fontFamily","toUpperCase","suffixIcon","cursor","step","onStep","afterStepValue","info","numValueNotNull","index","nextIndex","type","currentUnitIndex","indexOf","nextValue","nextUnit","nextNumValue","ImageMetaIcon","bordered","image","alt","arguments","getImageIcon","useBackendAIImageMetaData","src","width","height","disabled","sliderProps","otherProps","inputRef","key","updateKey","useUpdatableState","setTimeout","_jsxs","gap","flex","minWidth","align","_inputRef$current","_step$toString$split$","_inputRef$current2","Slider","marks","option","warn","extraMarks","hideSlider","token","theme","useToken","minGiB","useMemo","maxGiB","valueGiB","isMinOversMaxValue","_createElement","DynamicUnitInputNumber","changeOnBlur","visibility","styles","track","backgroundColor","compareNumberWithUnits","colorWarning","rail","tooltip","formatter","newNumValue","colorTextSecondary","markNumber","parseFloat","allocatablePresetNames","showCustom","showMinimumRequired","selectProps","fetchKey","updateFetchKey","run","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","resourceSlots","useResourceSlots","t","useTranslation","isPendingUpdate","_startTransition","useTransition","controllableValue","setControllableValue","resource_presets","useLazyLoadQuery","_ResourcePresetSelectQuery","require","fetchPolicy","loading","display","EditOutlined","selectedLabel","Tooltip","title","InfoCircleOutlined","preset","slotsInfo","JSON","parse","resource_slots","includes","name","justify","slot","ResourceNumber","hideTooltip","sort","a","b","localeCompare","showSearch","optionLabelProp","AUTOMATIC_DEFAULT_SHMEM","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","resource","cpu","mem","shmem","accelerator","num_of_sessions","cluster_mode","cluster_size","enabledAutomaticShmem","ResourceAllocationFormItems","enableNumOfSessions","enableResourcePresets","forceImageMinValues","showRemainingWarning","form","Form","useFormInstance","baiClient","useSuspendedBackendaiClient","keypairResourcePolicy","sessionLimitAndRemaining","useCurrentKeyPairResourcePolicyLazyLoadQuery","currentProject","useCurrentProjectValue","currentResourceGroup","useCurrentResourceGroupValue","currentImage","useWatch","preserve","currentAllocationPreset","currentImageMinM","remaining","resourceLimits","checkPresetInfo","useResourceLimitAndRemaining","currentProjectName","mergedResourceSlots","resourceSlotsInRG","useResourceSlotsDetails","acceleratorSlots","_resourceLimits$accel","_resourceLimits$accel2","accelerators","currentImageAcceleratorLimits","resource_limits","limit","sessionSliderLimitAndRemaining","getAllocatablePresetNames","presets","ensureValidAcceleratorType","useEventNotStable","currentAcceleratorType","getFieldValue","nextAcceleratorType","setFieldsValue","acceleratorType","updateAllocationPresetBasedOnResourceGroup","autoSelectedPreset","allocationPreset","updateResourceFieldsBasedOnPreset","validateFields","recursive","catch","updateResourceFieldsBasedOnImage","force","_resourceLimits$cpu","_iSizeToSize","_iSizeToSize2","_resourceLimits$shmem","_iSizeToSize3","_resourceLimits$mem","minimumResources","_resourceLimits$accel3","_$filter$","nextImageSelectorType","acceleratorInfo","_resourceLimits$accel4","forEach","minNum","minNumStr","setFieldValue","runShmemAutomationRule","_iSizeToSize4","_iSizeToSize5","slots","numberUnit","acceleratorObj","firstMatchedAcceleratorType","acceleratorSetting","Number","shared_memory","parseInt","M_plus_S","addNumberWithUnits","_Fragment","Item","rules","required","ResourceGroupSelect","projectName","marginBottom","marginXS","ResourcePresetSelect","_config","allowCustomResourceAllocation","Card","shouldUpdate","prev","cur","noStyle","_ref2","_mergedResourceSlots$","_resourceLimits$cpu2","_resourceLimits$cpu3","_mergedResourceSlots$2","_resourceLimits$cpu8","_resourceLimits$cpu9","_resourceLimits$cpu10","_resourceLimits$cpu11","_resourceLimits$cpu12","_resourceLimits$cpu13","_resourceLimits$cpu14","_resourceLimits$cpu15","human_readable_name","placement","Trans","i18nKey","warningOnly","validator","async","rule","_resourceLimits$cpu4","_resourceLimits$cpu5","_resourceLimits$cpu6","_resourceLimits$cpu7","Promise","reject","resolve","InputNumberWithSlider","display_unit","RemainingMark","props","onClick","preventDefault","next","_resourceLimits$mem10","_resourceLimits$mem11","_iSizeToSize6","_resourceLimits$mem2","_resourceLimits$mem3","_resourceLimits$mem4","_resourceLimits$mem5","_resourceLimits$mem6","_resourceLimits$mem7","size","_resourceLimits$mem8","_resourceLimits$mem9","DynamicUnitInputNumberWithSlider","addonBefore","numberFixed","valuePropName","Switch","checked","_resourceLimits$shmem2","hidden","dependencies","_getFieldValue","_getFieldValue2","_prev$resource","_next$resource","_ref3","_resourceLimits$accel5","_resourceLimits$accel6","_resourceLimits$accel11","_resourceLimits$accel12","_resourceLimits$accel13","_resourceLimits$accel14","_resourceLimits$accel7","_resourceLimits$accel8","_resourceLimits$accel9","_resourceLimits$accel10","_mergedResourceSlots$3","initialValue","popupMatchSelectWidth","_mergedResourceSlots$4","supports","Divider","colorBorder","Row","gutter","marginMD","Col","xs","Radio","_resourceLimits$cpu16","derivedClusterSizeMaxLimit","max_containers_per_session","clusterUnit","minCPU","position","top","transform","colorSuccess","opacity","CaretDownOutlined","bySliderLimit","_resourceLimits$key","_resourceLimits$key2","_resourceLimits$key3","_resourceLimits$key4","_resourceLimits$key5","_resourceLimits$accel15","_resourceLimits$accel16","byImageAcceleratorLimits","acceleratorResourceOfPreset","autoSelectDefault","filter","searchValue","onSearch","baiRequestWithPromise","useBaiSignedRequestWithPromise","controllableSearchValue","setControllableSearchValue","data","resourceGroupSelectQueryResult","useSuspenseTanQuery","queryKey","queryFn","search","URLSearchParams","set","all","method","url","staleTime","sftpResourceGroups","volume_info","item","_item$sftp_scaling_gr","sftp_scaling_groups","resourceGroups","scaling_groups","autoSelectedResourceGroup","autoSelectedOption","searchProps","defaultActiveFirstOption","resourceGroup","optionRender","_option$data$value","TextHighlighter","keyword","amount","extra","opts","currentGroup","formatAmount","number_format","binary","round_length","ResourceTypeIcon","showTooltip","fontSize","fontSizeSM","MWCIconWrap","_resourceTypeIconSrcM","showIcon","showUnit","resourceTypeIconSrcMap","targetIcon","MicrochipIcon","content","alignSelf","pointerEvents","node","v0","hash","UNLIMITED_MAX_CONTAINERS_PER_SESSIONS","UNLIMITED_MAX_CONCURRENT_SESSIONS","v1","useKeyPairLazyLoadQuery","accessKey","keypair","_hooksUsingRelay_KeyPairQuery","refresh","useCallback","keypair_resource_policy","_hooksUsingRelay_KeyPairResourcePolicyQuery","resource_policy","max_concurrent_sessions","concurrency_used","maxPerContainerRegex","_$find","_checkPresetInfo$scal","_checkPresetInfo$scal2","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal5","_checkPresetInfo$scal6","_checkPresetInfo$scal7","_checkPresetInfo$scal8","_checkPresetInfo$scal9","_checkPresetInfo$scal10","_checkPresetInfo$scal11","_checkPresetInfo$scal12","_$find2","_$min2","_$min3","ignorePerContainerConfig","refetch","isRefetching","resourcePreset","check","group","scaling_group","i","resourceGroupResourceSize","using","result","_checkPresetInfo$scal13","_checkPresetInfo$scal14","_checkPresetInfo$scal15","_checkPresetInfo$scal16","_checkPresetInfo$scal17","_checkPresetInfo$scal18","perContainerConfigs","maxCPUCoresPerContainer","limitParser","keypair_limits","group_limits","maxMemoryPerContainer","_$find3","_$filter","perContainerLimit","configValue","configName","isMatchingMaxPerContainer","match","configLowerCase","toLowerCase","keyLowerCase","replaceAll","supportedAcceleratorInfo","_$min","keypair_remaining","group_remaining","scaling_group_remaining","MAX_SAFE_INTEGER"],"sourceRoot":""}