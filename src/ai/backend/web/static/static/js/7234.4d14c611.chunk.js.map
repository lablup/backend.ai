{"version":3,"file":"static/js/7234.4d14c611.chunk.js","mappings":"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","sources":["components/ContainerRegistryEditorModal.tsx","components/ContainerRegistryList.tsx","components/__generated__/ContainerRegistryEditorModalCreateMutation.graphql.ts","components/__generated__/ContainerRegistryEditorModalFragment.graphql.ts","components/__generated__/ContainerRegistryEditorModalModifyMutation.graphql.ts","components/__generated__/ContainerRegistryListDeleteMutation.graphql.ts","components/__generated__/ContainerRegistryListDomainMutation.graphql.ts","components/__generated__/ContainerRegistryListQuery.graphql.ts","hooks/usePainKiller.tsx","pages/EnvironmentPage.tsx"],"sourcesContent":["import BAIModal, { BAIModalProps } from './BAIModal';\nimport { ContainerRegistryEditorModalCreateMutation } from './__generated__/ContainerRegistryEditorModalCreateMutation.graphql';\nimport { ContainerRegistryEditorModalFragment$key } from './__generated__/ContainerRegistryEditorModalFragment.graphql';\nimport { ContainerRegistryEditorModalModifyMutation } from './__generated__/ContainerRegistryEditorModalModifyMutation.graphql';\nimport { Form, Input, Select, Checkbox, FormInstance, App } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment, useMutation } from 'react-relay';\n\ninterface ContainerRegistryEditorModalProps\n  extends Omit<BAIModalProps, 'onOk'> {\n  existingHostnames?: string[];\n  onOk: (type: 'create' | 'modify') => void;\n  containerRegistryFrgmt?: ContainerRegistryEditorModalFragment$key | null;\n}\nconst ContainerRegistryEditorModal: React.FC<\n  ContainerRegistryEditorModalProps\n> = ({\n  existingHostnames,\n  containerRegistryFrgmt = null,\n  onOk,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const formRef = useRef<FormInstance>(null);\n\n  const { message, modal } = App.useApp();\n\n  const containerRegistry = useFragment(\n    graphql`\n      fragment ContainerRegistryEditorModalFragment on ContainerRegistry {\n        id\n        hostname\n        config {\n          url\n          type\n          project\n          username\n          ssl_verify\n        }\n      }\n    `,\n    containerRegistryFrgmt,\n  );\n  const [commitCreateRegistry, isInflightCreateRegistry] =\n    useMutation<ContainerRegistryEditorModalCreateMutation>(graphql`\n      mutation ContainerRegistryEditorModalCreateMutation(\n        $hostname: String!\n        $props: CreateContainerRegistryInput!\n      ) {\n        create_container_registry(hostname: $hostname, props: $props) {\n          container_registry {\n            id\n            hostname\n            config {\n              url\n              type\n              project\n              username\n              password\n              ssl_verify\n            }\n          }\n        }\n      }\n    `);\n\n  const [commitModifyRegistry, isInflightModifyRegistry] =\n    useMutation<ContainerRegistryEditorModalModifyMutation>(graphql`\n      mutation ContainerRegistryEditorModalModifyMutation(\n        $hostname: String!\n        $props: ModifyContainerRegistryInput!\n      ) {\n        modify_container_registry(hostname: $hostname, props: $props) {\n          container_registry {\n            id\n            hostname\n            config {\n              url\n              type\n              project\n              username\n              password\n              ssl_verify\n            }\n          }\n        }\n      }\n    `);\n\n  const handleSave = async () => {\n    return formRef.current\n      ?.validateFields()\n      .then((values) => {\n        const mutationVariables = {\n          hostname: values.hostname,\n          props: {\n            url: values.config.url,\n            type: values.config.type,\n            project:\n              values.config.project === 'docker'\n                ? undefined\n                : values.config.project,\n            username: _.isEmpty(values.config.username)\n              ? null\n              : values.config.username,\n            password: values.isChangedPassword\n              ? _.isEmpty(values.config.password)\n                ? null // unset\n                : values.config.password\n              : undefined, // no change\n          },\n        };\n        if (containerRegistry) {\n          if (!values.isChangedPassword) {\n            delete mutationVariables.props.password;\n          }\n          commitModifyRegistry({\n            variables: mutationVariables,\n            onCompleted: (res, errors) => {\n              if (\n                _.isEmpty(res.modify_container_registry?.container_registry)\n              ) {\n                message.error(t('dialog.ErrorOccurred'));\n                return;\n              }\n              if (errors && errors.length > 0) {\n                const errorMsgList = _.map(errors, (error) => error.message);\n                for (const error of errorMsgList) {\n                  message.error(error, 2.5);\n                }\n              } else {\n                onOk && onOk('modify');\n              }\n            },\n            onError: (error) => {\n              message.error(t('dialog.ErrorOccurred'));\n            },\n          });\n        } else {\n          commitCreateRegistry({\n            variables: mutationVariables,\n            onCompleted: (res, errors) => {\n              if (\n                _.isEmpty(res?.create_container_registry?.container_registry)\n              ) {\n                message.error(t('dialog.ErrorOccurred'));\n                return;\n              }\n              if (errors && errors?.length > 0) {\n                const errorMsgList = _.map(errors, (error) => error.message);\n                for (const error of errorMsgList) {\n                  message.error(error, 2.5);\n                }\n              } else {\n                onOk && onOk('create');\n              }\n            },\n            onError(error) {\n              message.error(t('dialog.ErrorOccurred'));\n            },\n          });\n        }\n      })\n      .catch((error) => {});\n  };\n  return (\n    <BAIModal\n      title={\n        containerRegistry\n          ? t('registry.ModifyRegistry')\n          : t('registry.AddRegistry')\n      }\n      okText={containerRegistry ? t('button.Save') : t('button.Add')}\n      confirmLoading={isInflightCreateRegistry || isInflightModifyRegistry}\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            if (\n              _.includes(values.config?.type, 'harbor') &&\n              (_.isEmpty(values.config.username) ||\n                (containerRegistry\n                  ? values.isChangedPassword &&\n                    _.isEmpty(values.config.password)\n                  : _.isEmpty(values.config.password)))\n            ) {\n              modal.confirm({\n                title: t('button.Confirm'),\n                content: t('registry.ConfirmNoUserName'),\n                onOk: () => {\n                  handleSave();\n                },\n              });\n            } else {\n              handleSave();\n            }\n          })\n          .catch(() => {});\n      }}\n      {...modalProps}\n      destroyOnClose\n    >\n      <Form\n        ref={formRef}\n        layout=\"vertical\"\n        requiredMark=\"optional\"\n        initialValues={\n          containerRegistry\n            ? {\n                ...containerRegistry,\n                config: {\n                  ...containerRegistry.config,\n                  project: containerRegistry.config?.project || undefined,\n                },\n              }\n            : {\n                config: {\n                  type: 'docker',\n                },\n              }\n        }\n        preserve={false}\n      >\n        <Form.Item\n          label={t('registry.Hostname')}\n          name=\"hostname\"\n          required\n          rules={[\n            {\n              required: true,\n              message: t('registry.DescHostnameIsEmpty'),\n              pattern: new RegExp('^.+$'),\n            },\n            {\n              validator: (_, value) => {\n                if (!containerRegistry && existingHostnames?.includes(value)) {\n                  return Promise.reject(\n                    t('registry.RegistryHostnameAlreadyExists'),\n                  );\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input\n            disabled={!!containerRegistry}\n            // placeholder={t('registry.Hostname')}\n            value={containerRegistry?.hostname || undefined}\n          />\n        </Form.Item>\n        <Form.Item\n          name={['config', 'url']}\n          label={t('registry.RegistryURL')}\n          required\n          rules={[\n            {\n              required: true,\n            },\n            {\n              validator: (_, value) => {\n                if (value) {\n                  if (\n                    !value.startsWith('http://') &&\n                    !value.startsWith('https://')\n                  )\n                    return Promise.reject(t('registry.DescURLStartString'));\n                  try {\n                    new URL(value);\n                  } catch (e) {\n                    return Promise.reject(t('registry.DescURLFormat'));\n                  }\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          noStyle\n          shouldUpdate={(prev, next) =>\n            _.isEmpty(prev.config?.password) !==\n            _.isEmpty(next.config?.password)\n          }\n        >\n          {({ validateFields, getFieldValue }) => {\n            validateFields([['config', 'username']]);\n            return (\n              <Form.Item\n                name={['config', 'username']}\n                label={t('registry.Username')}\n                rules={[\n                  {\n                    required: !_.isEmpty(getFieldValue(['config', 'password'])),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            );\n          }}\n        </Form.Item>\n\n        <Form.Item label={t('registry.Password')}>\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.isChangedPassword !== next.isChangedPassword\n            }\n          >\n            {({ getFieldValue }) => (\n              <Form.Item noStyle name={['config', 'password']}>\n                <Input.Password\n                  disabled={\n                    !_.isEmpty(containerRegistry) &&\n                    !getFieldValue('isChangedPassword')\n                  }\n                />\n              </Form.Item>\n            )}\n          </Form.Item>\n          {!_.isEmpty(containerRegistry) && (\n            <Form.Item noStyle name=\"isChangedPassword\" valuePropName=\"checked\">\n              <Checkbox\n                onChange={(e) => {\n                  if (!e.target.checked) {\n                    formRef.current?.setFieldValue(['config', 'password'], '');\n                  }\n                }}\n              >\n                {t('webui.menu.ChangePassword')}\n              </Checkbox>\n            </Form.Item>\n          )}\n        </Form.Item>\n        <Form.Item\n          name={['config', 'type']}\n          label={t('registry.RegistryType')}\n          required\n          rules={[\n            {\n              required: true,\n              message: t('registry.PleaseSelectOption'),\n            },\n          ]}\n        >\n          <Select\n            options={[\n              {\n                value: 'docker',\n              },\n              {\n                value: 'harbor',\n              },\n              {\n                value: 'harbor2',\n              },\n            ]}\n            onChange={() => {\n              // form.validateFields();\n            }}\n          ></Select>\n        </Form.Item>\n        <Form.Item\n          shouldUpdate={(prev, next) =>\n            prev?.config?.type !== next?.config?.type\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              getFieldValue(['config', 'type']) !== 'docker' && (\n                <Form.Item\n                  name={['config', 'project']}\n                  label={t('registry.ProjectName')}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                      message: t('registry.ProjectNameIsRequired'),\n                    },\n                  ]}\n                >\n                  {/* <Input\n                  // disabled={\n                  //   form.getFieldValue(['config', 'type']) === 'docker'\n                  // }\n                  /> */}\n                  <Select\n                    mode=\"tags\"\n                    open={false}\n                    tokenSeparators={[',', ' ']}\n                    suffixIcon={null}\n                  />\n                </Form.Item>\n              )\n            );\n          }}\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default ContainerRegistryEditorModal;\n","import { filterNonNullItems } from '../helper';\nimport { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport { usePainKiller } from '../hooks/usePainKiller';\nimport BAIModal from './BAIModal';\nimport ContainerRegistryEditorModal from './ContainerRegistryEditorModal';\nimport Flex from './Flex';\nimport { ContainerRegistryListDeleteMutation } from './__generated__/ContainerRegistryListDeleteMutation.graphql';\nimport { ContainerRegistryListDomainMutation } from './__generated__/ContainerRegistryListDomainMutation.graphql';\nimport {\n  ContainerRegistryListQuery,\n  ContainerRegistryListQuery$data,\n} from './__generated__/ContainerRegistryListQuery.graphql';\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  PlusOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n  SyncOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Form,\n  Input,\n  Switch,\n  Table,\n  Tag,\n  Tooltip,\n  Typography,\n  theme,\n  App,\n} from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { useState, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery, useMutation } from 'react-relay';\n\nexport type ContainerRegistry = NonNullable<\n  NonNullable<\n    NonNullable<ContainerRegistryListQuery$data>['container_registries']\n  >\n>[0];\n\nconst ContainerRegistryList: React.FC<{\n  style?: React.CSSProperties;\n}> = ({ style }) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const [fetchKey, updateFetchKey] = useUpdatableState('initial-fetch');\n  const [isPendingReload, startReloadTransition] = useTransition();\n  const painKiller = usePainKiller();\n  const { message } = App.useApp();\n  const { upsertNotification } = useSetBAINotification();\n  const { container_registries, domain } =\n    useLazyLoadQuery<ContainerRegistryListQuery>(\n      graphql`\n        query ContainerRegistryListQuery($domain: String!) {\n          container_registries {\n            ...ContainerRegistryEditorModalFragment\n            id\n            hostname\n            config {\n              url\n              type\n              project\n              username\n              password\n              ssl_verify\n            }\n          }\n          domain(name: $domain) {\n            name\n            allowed_docker_registries\n          }\n        }\n      `,\n      {\n        domain: baiClient._config.domainName,\n      },\n      {\n        fetchPolicy: 'store-and-network',\n        fetchKey,\n      },\n    );\n\n  const [commitDeleteMutation, isInFlightDeleteMutation] =\n    useMutation<ContainerRegistryListDeleteMutation>(graphql`\n      mutation ContainerRegistryListDeleteMutation($hostname: String!) {\n        delete_container_registry(hostname: $hostname) {\n          container_registry {\n            id\n          }\n        }\n      }\n    `);\n\n  const [commitDomainMutation, isInFlightDomationMutation] =\n    useMutation<ContainerRegistryListDomainMutation>(graphql`\n      mutation ContainerRegistryListDomainMutation(\n        $domain: String!\n        $allowed_docker_registries: [String]!\n      ) {\n        modify_domain(\n          name: $domain\n          props: { allowed_docker_registries: $allowed_docker_registries }\n        ) {\n          ok\n          msg\n          # TODO: update domain when it supports relay global id\n          # domain {\n          #   name\n          #   allowed_vfolder_hosts\n          # }\n        }\n      }\n    `);\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [editingRegistry, setEditingRegistry] =\n    useState<ContainerRegistry>(null);\n  const [deletingRegistry, setDeletingRegistry] =\n    useState<ContainerRegistry>(null);\n  const [deletingConfirmText, setDeletingConfirmText] = useState('');\n  const [isNewModalOpen, setIsNewModalOpen] = useState(false);\n\n  const [inFlightHostName, setInFlightHostName] = useState<string>();\n\n  // const deferredInFlightDomainName = useDeferredValue(inFlightDomainName);\n\n  const rescanImage = async (hostname: string) => {\n    // const indicator: any =\n    //   // @ts-ignore\n    //   await globalThis.lablupIndicator.start('indeterminate');\n\n    // indicator.set(10, t('registry.UpdatingRegistryInfo'));\n    const notiKey = upsertNotification({\n      // key: notiKey,\n      message: `${hostname} ${t('maintenance.RescanImages')}`,\n      description: t('registry.UpdatingRegistryInfo'),\n      open: true,\n      backgroundTask: {\n        status: 'pending',\n      },\n      duration: 0,\n    });\n    const handleReScanError = (err: any) => {\n      console.log(err);\n      upsertNotification({\n        key: notiKey,\n        backgroundTask: {\n          status: 'rejected',\n        },\n        duration: 1,\n      });\n      if (err && err.message) {\n        // @ts-ignore\n        globalThis.lablupNotification.text = painKiller.relieve(err.title);\n        // @ts-ignore\n        globalThis.lablupNotification.detail = err.message;\n        // @ts-ignore\n        globalThis.lablupNotification.show(true, err);\n      }\n    };\n    baiClient.maintenance\n      .rescan_images(hostname)\n      .then(({ rescan_images }: any) => {\n        if (rescan_images.ok) {\n          upsertNotification({\n            key: notiKey,\n            backgroundTask: {\n              status: 'pending',\n              percent: 0,\n              taskId: rescan_images.task_id,\n              statusDescriptions: {\n                pending: t('registry.RescanImages'),\n                resolved: t('registry.RegistryUpdateFinished'),\n                rejected: t('registry.RegistryUpdateFailed'),\n              },\n            },\n          });\n          // indicator.set(0, t('registry.RescanImages'));\n          // const sse: EventSource = baiClient.maintenance.attach_background_task(\n          //   rescan_images.task_id,\n          // );\n          // sse.addEventListener('bgtask_updated', (e) => {\n          //   const data = JSON.parse(e['data']);\n          //   const ratio = data.current_progress / data.total_progress;\n          //   indicator.set(100 * ratio, t('registry.RescanImages'));\n          // });\n          // sse.addEventListener('bgtask_done', () => {\n          //   const event = new CustomEvent('image-rescanned');\n          //   document.dispatchEvent(event);\n          //   indicator.set(100, t('registry.RegistryUpdateFinished'));\n          //   sse.close();\n          // });\n          // sse.addEventListener('bgtask_failed', (e) => {\n          //   console.log('bgtask_failed', e['data']);\n          //   sse.close();\n          //   handleReScanError(\n          //     new Error('Background Image scanning task has failed'),\n          //   );\n          // });\n          // sse.addEventListener('bgtask_cancelled', () => {\n          //   sse.close();\n          //   handleReScanError(\n          //     new Error('Background Image scanning task has been cancelled'),\n          //   );\n          // });\n        } else {\n          upsertNotification({\n            key: notiKey,\n            backgroundTask: {\n              status: 'rejected',\n            },\n            duration: 1,\n          });\n          // indicator.set(50, t('registry.RegistryUpdateFailed'));\n          // indicator.end(1000);\n          // TODO: handle notification in react side\n          // @ts-ignore\n          // globalThis.lablupNotification.text = painKiller.relieve(\n          //   rescan_images.msg,\n          // );\n          // @ts-ignore\n          // globalThis.lablupNotification.detail = rescan_images.msg;\n          // @ts-ignore\n          // globalThis.lablupNotification.show();\n        }\n      })\n      .catch(handleReScanError);\n  };\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        flex: 1,\n        ...style,\n        // height: 'calc(100vh - 183px)',\n      }}\n    >\n      <Flex\n        direction=\"row\"\n        justify=\"end\"\n        gap={'sm'}\n        style={{ padding: token.paddingSM }}\n      >\n        <Tooltip title={t('button.Refresh')}>\n          <Button\n            loading={isPendingReload}\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              startReloadTransition(() => {\n                updateFetchKey();\n              });\n            }}\n          />\n        </Tooltip>\n        <Button\n          type=\"primary\"\n          icon={<PlusOutlined />}\n          onClick={() => {\n            setIsNewModalOpen(true);\n          }}\n        >\n          {t('registry.AddRegistry')}\n        </Button>\n      </Flex>\n      <Table\n        rowKey={(record) => record.id}\n        scroll={{ x: 'max-content' }}\n        pagination={false}\n        columns={[\n          // {\n          //   title: '#',\n          //   dataIndex: 'id',\n          // },\n          {\n            title: t('registry.Hostname'),\n            dataIndex: 'hostname',\n            // fixed: 'left',\n          },\n          {\n            title: t('registry.RegistryURL'),\n            dataIndex: ['config', 'url'],\n          },\n          {\n            title: t('registry.Type'),\n            dataIndex: ['config', 'type'],\n          },\n          {\n            title: t('registry.HarborProject'),\n            render: (value, record) => {\n              return _.map(record.config?.project, (prjName) => {\n                return <Tag key={prjName}>{prjName || ''}</Tag>;\n              });\n            },\n          },\n          {\n            title: t('registry.Username'),\n            dataIndex: ['config', 'username'],\n          },\n          {\n            title: t('registry.Password'),\n            dataIndex: ['config', 'password'],\n          },\n          {\n            title: t('general.Enabled'),\n            render: (value, record) => {\n              const isEnabled = _.includes(\n                domain?.allowed_docker_registries,\n                record.hostname,\n              );\n              return (\n                <Switch\n                  checked={\n                    inFlightHostName === record.hostname + fetchKey\n                      ? !isEnabled\n                      : isEnabled\n                  }\n                  disabled={isPendingReload || isInFlightDomationMutation}\n                  loading={\n                    (isPendingReload || isInFlightDomationMutation) &&\n                    inFlightHostName === record.hostname + fetchKey\n                  }\n                  onChange={(isOn) => {\n                    if (!_.isString(record.hostname)) return;\n                    let newAllowedDockerRegistries = _.clone(\n                      domain?.allowed_docker_registries || [],\n                    ) as string[];\n                    if (isOn) {\n                      newAllowedDockerRegistries.push(record.hostname);\n                    } else {\n                      newAllowedDockerRegistries = _.without(\n                        newAllowedDockerRegistries,\n                        record.hostname,\n                      );\n                    }\n\n                    setInFlightHostName(record.hostname + fetchKey);\n                    commitDomainMutation({\n                      variables: {\n                        domain: baiClient._config.domainName,\n                        allowed_docker_registries: newAllowedDockerRegistries,\n                      },\n                      onCompleted: (res, errors) => {\n                        if (!res?.modify_domain?.ok) {\n                          message.error(res?.modify_domain?.msg);\n                          return;\n                        }\n                        if (errors && errors?.length > 0) {\n                          const errorMsgList = _.map(\n                            errors,\n                            (error) => error.message,\n                          );\n                          for (const error of errorMsgList) {\n                            message.error(error, 2.5);\n                          }\n                        } else {\n                          startReloadTransition(() => {\n                            updateFetchKey();\n                          });\n                        }\n\n                        message.info({\n                          key: 'registry-enabled',\n                          content: isOn\n                            ? t('registry.RegistryTurnedOn')\n                            : t('registry.RegistryTurnedOff'),\n                        });\n                      },\n                    });\n                  }}\n                />\n                // <Button type=\"primary\">\n                //   {record?.config?.ssl_verify ? 'Yes' : 'No'}\n                // </Button>\n              );\n            },\n          },\n          {\n            title: t('general.Control'),\n            fixed: 'right',\n            render(value, record, index) {\n              return (\n                <Flex>\n                  <Tooltip title={t('button.Edit')}>\n                    <Button\n                      size=\"large\"\n                      style={{\n                        color: token.colorInfo,\n                      }}\n                      type=\"text\"\n                      icon={<SettingOutlined />}\n                      onClick={() => {\n                        setEditingRegistry(record);\n                      }}\n                    />\n                  </Tooltip>\n                  <Tooltip title={t('button.Delete')}>\n                    <Button\n                      size=\"large\"\n                      danger\n                      type=\"text\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => {\n                        setDeletingRegistry(record);\n                      }}\n                    />\n                  </Tooltip>\n                  <Tooltip title={t('maintenance.RescanImages')}>\n                    <Button\n                      size=\"large\"\n                      type=\"text\"\n                      icon={\n                        <SyncOutlined\n                          onClick={() => {\n                            record.hostname && rescanImage(record.hostname);\n                          }}\n                        />\n                      }\n                    />\n                  </Tooltip>\n                </Flex>\n              );\n            },\n          },\n        ]}\n        dataSource={filterNonNullItems(container_registries)}\n      />\n      <ContainerRegistryEditorModal\n        containerRegistryFrgmt={editingRegistry}\n        existingHostnames={_.map(\n          container_registries,\n          (r) => r?.hostname || '',\n        )}\n        open={!!editingRegistry || isNewModalOpen}\n        onOk={(type) => {\n          if (type === 'create') {\n            updateFetchKey();\n            message.info(t('registry.RegistrySuccessfullyAdded'));\n          } else if (type === 'modify') {\n            message.info(t('registry.RegistrySuccessfullyModified'));\n          }\n          setEditingRegistry(null);\n          setIsNewModalOpen(false);\n        }}\n        onCancel={() => {\n          setEditingRegistry(null);\n          setIsNewModalOpen(false);\n        }}\n        centered={false}\n      />\n      <BAIModal\n        title={\n          <>\n            <ExclamationCircleOutlined\n              style={{\n                color: token.colorWarning,\n              }}\n            />{' '}\n            {t('dialog.warning.CannotBeUndone')}\n          </>\n        }\n        okText={t('button.Delete')}\n        okButtonProps={{\n          danger: true,\n          disabled: deletingConfirmText !== deletingRegistry?.hostname,\n        }}\n        onOk={() => {\n          if (deletingRegistry) {\n            commitDeleteMutation({\n              variables: {\n                hostname: deletingRegistry.hostname || '',\n              },\n              onCompleted: (res, error) => {\n                if (error) {\n                  setDeletingRegistry(null);\n                  message.error({\n                    key: 'registry-deletion-failed',\n                    content: t('dialog.ErrorOccurred'),\n                  });\n                } else {\n                  startReloadTransition(() => {\n                    updateFetchKey();\n                  });\n                  message.info({\n                    key: 'registry-deleted',\n                    content: t('registry.RegistrySuccessfullyDeleted'),\n                  });\n                  setDeletingRegistry(null);\n                }\n              },\n              onError: (error) => {\n                message.error({\n                  key: 'registry-deletion-failed',\n                  content: t('dialog.ErrorOccurred'),\n                });\n              },\n            });\n          } else {\n            setDeletingRegistry(null);\n          }\n        }}\n        confirmLoading={isInFlightDeleteMutation}\n        onCancel={() => {\n          setDeletingRegistry(null);\n        }}\n        destroyOnClose\n        open={!!deletingRegistry}\n      >\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          gap=\"sm\"\n          style={{\n            marginTop: token.marginMD,\n          }}\n        >\n          <Typography.Text>\n            <Typography.Text code>{deletingRegistry?.hostname}</Typography.Text>{' '}\n            {t('registry.TypeRegistryNameToDelete')}\n          </Typography.Text>\n          <Form>\n            <Form.Item\n              name={'confirmText'}\n              // help=\"asdf\"\n              // validateStatus={\n              //   deletingConfirmText &&\n              //   deletingConfirmText !== deletingRegistry?.hostname\n              //     ? 'error'\n              //     : undefined\n              // }\n              rules={[\n                {\n                  required: true,\n                  message: t('registry.HostnameDoesNotMatch'),\n                  validator: async () => {\n                    if (deletingConfirmText === deletingRegistry?.hostname) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject();\n                  },\n                },\n              ]}\n            >\n              <Input\n                autoComplete=\"off\"\n                value={deletingConfirmText}\n                onChange={(e) => setDeletingConfirmText(e.target.value)}\n              />\n            </Form.Item>\n          </Form>\n        </Flex>\n      </BAIModal>\n    </Flex>\n  );\n};\n\nexport default ContainerRegistryList;\n","/**\n * @generated SignedSource<<29297cf488eab077fc908bc5af77a955>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type CreateContainerRegistryInput = {\n  password?: string | null | undefined;\n  project?: ReadonlyArray<string | null | undefined> | null | undefined;\n  ssl_verify?: boolean | null | undefined;\n  type: string;\n  url: string;\n  username?: string | null | undefined;\n};\nexport type ContainerRegistryEditorModalCreateMutation$variables = {\n  hostname: string;\n  props: CreateContainerRegistryInput;\n};\nexport type ContainerRegistryEditorModalCreateMutation$data = {\n  readonly create_container_registry: {\n    readonly container_registry: {\n      readonly config: {\n        readonly password: string | null | undefined;\n        readonly project: ReadonlyArray<string | null | undefined> | null | undefined;\n        readonly ssl_verify: boolean | null | undefined;\n        readonly type: string;\n        readonly url: string;\n        readonly username: string | null | undefined;\n      } | null | undefined;\n      readonly hostname: string | null | undefined;\n      readonly id: string;\n    } | null | undefined;\n  } | null | undefined;\n};\nexport type ContainerRegistryEditorModalCreateMutation = {\n  response: ContainerRegistryEditorModalCreateMutation$data;\n  variables: ContainerRegistryEditorModalCreateMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"hostname\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"props\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"hostname\",\n        \"variableName\": \"hostname\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"props\"\n      }\n    ],\n    \"concreteType\": \"CreateContainerRegistry\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"create_container_registry\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registry\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"hostname\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"url\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"type\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"project\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"username\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"password\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"ssl_verify\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryEditorModalCreateMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryEditorModalCreateMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"f076fed995ef5122c04aaba2b76d22d5\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryEditorModalCreateMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryEditorModalCreateMutation(\\n  $hostname: String!\\n  $props: CreateContainerRegistryInput!\\n) {\\n  create_container_registry(hostname: $hostname, props: $props) {\\n    container_registry {\\n      id\\n      hostname\\n      config {\\n        url\\n        type\\n        project\\n        username\\n        password\\n        ssl_verify\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"547863dc03f9faf465e8a26175e5a101\";\n\nexport default node;\n","/**\n * @generated SignedSource<<96a76e0518aa3f9c191ece3a79776a64>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerRegistryEditorModalFragment$data = {\n  readonly config: {\n    readonly project: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly ssl_verify: boolean | null | undefined;\n    readonly type: string;\n    readonly url: string;\n    readonly username: string | null | undefined;\n  } | null | undefined;\n  readonly hostname: string | null | undefined;\n  readonly id: string;\n  readonly \" $fragmentType\": \"ContainerRegistryEditorModalFragment\";\n};\nexport type ContainerRegistryEditorModalFragment$key = {\n  readonly \" $data\"?: ContainerRegistryEditorModalFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerRegistryEditorModalFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"ContainerRegistryEditorModalFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"hostname\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"ContainerRegistryConfig\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"config\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"url\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"type\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"project\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"username\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"ssl_verify\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ContainerRegistry\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"57f748e00ec698f8b3e133570e377c71\";\n\nexport default node;\n","/**\n * @generated SignedSource<<62cc7d9bfa96f80adc98ef8c782a4d7d>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ModifyContainerRegistryInput = {\n  password?: string | null | undefined;\n  project?: ReadonlyArray<string | null | undefined> | null | undefined;\n  ssl_verify?: boolean | null | undefined;\n  type?: string | null | undefined;\n  url?: string | null | undefined;\n  username?: string | null | undefined;\n};\nexport type ContainerRegistryEditorModalModifyMutation$variables = {\n  hostname: string;\n  props: ModifyContainerRegistryInput;\n};\nexport type ContainerRegistryEditorModalModifyMutation$data = {\n  readonly modify_container_registry: {\n    readonly container_registry: {\n      readonly config: {\n        readonly password: string | null | undefined;\n        readonly project: ReadonlyArray<string | null | undefined> | null | undefined;\n        readonly ssl_verify: boolean | null | undefined;\n        readonly type: string;\n        readonly url: string;\n        readonly username: string | null | undefined;\n      } | null | undefined;\n      readonly hostname: string | null | undefined;\n      readonly id: string;\n    } | null | undefined;\n  } | null | undefined;\n};\nexport type ContainerRegistryEditorModalModifyMutation = {\n  response: ContainerRegistryEditorModalModifyMutation$data;\n  variables: ContainerRegistryEditorModalModifyMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"hostname\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"props\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"hostname\",\n        \"variableName\": \"hostname\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"props\",\n        \"variableName\": \"props\"\n      }\n    ],\n    \"concreteType\": \"ModifyContainerRegistry\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_container_registry\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registry\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"hostname\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"url\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"type\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"project\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"username\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"password\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"ssl_verify\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryEditorModalModifyMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryEditorModalModifyMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"5157cbd573b855028a9856c295dab17c\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryEditorModalModifyMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryEditorModalModifyMutation(\\n  $hostname: String!\\n  $props: ModifyContainerRegistryInput!\\n) {\\n  modify_container_registry(hostname: $hostname, props: $props) {\\n    container_registry {\\n      id\\n      hostname\\n      config {\\n        url\\n        type\\n        project\\n        username\\n        password\\n        ssl_verify\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"0fe59a8682e5d7c502bc48da7cc3320a\";\n\nexport default node;\n","/**\n * @generated SignedSource<<6923f3cecb0a6088eaffa9604e39c939>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ContainerRegistryListDeleteMutation$variables = {\n  hostname: string;\n};\nexport type ContainerRegistryListDeleteMutation$data = {\n  readonly delete_container_registry: {\n    readonly container_registry: {\n      readonly id: string;\n    } | null | undefined;\n  } | null | undefined;\n};\nexport type ContainerRegistryListDeleteMutation = {\n  response: ContainerRegistryListDeleteMutation$data;\n  variables: ContainerRegistryListDeleteMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"hostname\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"hostname\",\n        \"variableName\": \"hostname\"\n      }\n    ],\n    \"concreteType\": \"DeleteContainerRegistry\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"delete_container_registry\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registry\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryListDeleteMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryListDeleteMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"4482108b7e256e27225f91b432f0a856\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryListDeleteMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryListDeleteMutation(\\n  $hostname: String!\\n) {\\n  delete_container_registry(hostname: $hostname) {\\n    container_registry {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"131801c7f9561f645743bbbe4b464676\";\n\nexport default node;\n","/**\n * @generated SignedSource<<c910964b072361dba8c8e0296e75ad68>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Mutation } from 'relay-runtime';\nexport type ContainerRegistryListDomainMutation$variables = {\n  allowed_docker_registries: ReadonlyArray<string | null | undefined>;\n  domain: string;\n};\nexport type ContainerRegistryListDomainMutation$data = {\n  readonly modify_domain: {\n    readonly msg: string | null | undefined;\n    readonly ok: boolean | null | undefined;\n  } | null | undefined;\n};\nexport type ContainerRegistryListDomainMutation = {\n  response: ContainerRegistryListDomainMutation$data;\n  variables: ContainerRegistryListDomainMutation$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"allowed_docker_registries\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"domain\"\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"domain\"\n      },\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"allowed_docker_registries\",\n            \"variableName\": \"allowed_docker_registries\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"props\"\n      }\n    ],\n    \"concreteType\": \"ModifyDomain\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"modify_domain\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"ok\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"msg\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryListDomainMutation\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Mutations\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v0/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryListDomainMutation\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"5ea7ebdd79d15e15b23a9fb2d8568d34\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryListDomainMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation ContainerRegistryListDomainMutation(\\n  $domain: String!\\n  $allowed_docker_registries: [String]!\\n) {\\n  modify_domain(name: $domain, props: {allowed_docker_registries: $allowed_docker_registries}) {\\n    ok\\n    msg\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"647ec7cdf3bcffc8cc1d8cd3cced159f\";\n\nexport default node;\n","/**\n * @generated SignedSource<<0be15dc05d1b047de396553f4e558496>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ContainerRegistryListQuery$variables = {\n  domain: string;\n};\nexport type ContainerRegistryListQuery$data = {\n  readonly container_registries: ReadonlyArray<{\n    readonly config: {\n      readonly password: string | null | undefined;\n      readonly project: ReadonlyArray<string | null | undefined> | null | undefined;\n      readonly ssl_verify: boolean | null | undefined;\n      readonly type: string;\n      readonly url: string;\n      readonly username: string | null | undefined;\n    } | null | undefined;\n    readonly hostname: string | null | undefined;\n    readonly id: string;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"ContainerRegistryEditorModalFragment\">;\n  } | null | undefined> | null | undefined;\n  readonly domain: {\n    readonly allowed_docker_registries: ReadonlyArray<string | null | undefined> | null | undefined;\n    readonly name: string | null | undefined;\n  } | null | undefined;\n};\nexport type ContainerRegistryListQuery = {\n  response: ContainerRegistryListQuery$data;\n  variables: ContainerRegistryListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"domain\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"hostname\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"url\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"type\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"project\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"username\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"password\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"ssl_verify\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": [\n    {\n      \"kind\": \"Variable\",\n      \"name\": \"name\",\n      \"variableName\": \"domain\"\n    }\n  ],\n  \"concreteType\": \"Domain\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"domain\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"allowed_docker_registries\",\n      \"storageKey\": null\n    }\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContainerRegistryListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registries\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ContainerRegistryEditorModalFragment\"\n          },\n          (v1/*: any*/),\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              (v3/*: any*/),\n              (v4/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/),\n              (v7/*: any*/),\n              (v8/*: any*/)\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      (v9/*: any*/)\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"ContainerRegistryListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"ContainerRegistry\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"container_registries\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ContainerRegistryConfig\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"config\",\n            \"plural\": false,\n            \"selections\": [\n              (v3/*: any*/),\n              (v4/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/),\n              (v8/*: any*/),\n              (v7/*: any*/)\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      (v9/*: any*/)\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"9f9e16fde586191ea3e0ae553f834b51\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContainerRegistryListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ContainerRegistryListQuery(\\n  $domain: String!\\n) {\\n  container_registries {\\n    ...ContainerRegistryEditorModalFragment\\n    id\\n    hostname\\n    config {\\n      url\\n      type\\n      project\\n      username\\n      password\\n      ssl_verify\\n    }\\n  }\\n  domain(name: $domain) {\\n    name\\n    allowed_docker_registries\\n  }\\n}\\n\\nfragment ContainerRegistryEditorModalFragment on ContainerRegistry {\\n  id\\n  hostname\\n  config {\\n    url\\n    type\\n    project\\n    username\\n    ssl_verify\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"0f4709e3ecfb8366c214098902385269\";\n\nexport default node;\n","import { useTranslation } from 'react-i18next';\n\nconst errorMessageTable: {\n  [key: string]: string;\n} = {\n  \"Cannot read property 'map' of null\": 'error.APINotSupported',\n  'TypeError: NetworkError when attempting to fetch resource.':\n    'error.NetworkConnectionFailed', //_t('error.NetworkConnectionFailed')\n  // Login\n  'Login failed. Check login information.': 'error.LoginFailed', //_t('error.LoginFailed')\n  'User credential mismatch.': 'error.LoginFailed', //_t('error.LoginFailed')\n  'Authentication failed. Check information and manager status.':\n    'error.AuthenticationFailed', //_t('error.AuthenticationFailed')\n  'Too many failed login attempts': 'error.TooManyLoginFailures', //_t('error.TooManyLoginFailures')\n  // virtual folders\n  'server responded failure: 400 Bad Request - The virtual folder already exists with the same name.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  '400 Bad Request - The virtual folder already exists with the same name.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  'server responded failure: 400 Bad Request - One of your accessible vfolders already has the name you requested.':\n    'error.VirtualFolderAlreadyExist', //_t('error.VirtualFolderAlreadyExist')\n  'server responded failure: 400 Bad Request - You cannot create more vfolders.':\n    'error.MaximumVfolderCreation', //_t('error.MaximumVfolderCreation')\n  'server responded failure: 400 Bad Request - Missing or invalid API parameters. (You cannot create more vfolders.)':\n    'error.MaximumVfolderCreation', //_t('error.MaximumVfolderCreation')\n  'server responded failure: 400 Bad Request - Cannot change the options of a vfolder that is not owned by myself.':\n    'error.CannotChangeVirtualFolderOption', //_t('error.CannotChangeVirtualFolderOption')\n  'server responded failure: 403 Forbidden - Cannot share private dot-prefixed vfolders.':\n    'error.CannotSharePrivateAutomountFolder', //_t('error.CannotSharePrivateAutomountFolder')\n  'server responded failure: 404 Not Found - No such vfolder invitation.':\n    'error.FolderSharingNotAvailableToUser', //_t('error.FolderSharingNotAvailableToUser')\n  'server responded failure: 404 Not Found - No such user.':\n    'error.FolderSharingNotAvailableToUser', //_t('error.FolderSharingNotAvailableToUser')\n  // Resource\n  'server responded failure: 412 Precondition Failed - You have reached your resource limit.':\n    'error.ReachedResourceLimit', //_t('error.ReachedResourceLimit')\n  // User\n  \"Cannot read property 'split' of undefined\": 'error.UserHasNoGroup', //_t('error.UserHasNoGroup')\n};\nconst regexTable: {\n  [key: string]: string;\n} = {\n  '\\\\w*not found matched token with email\\\\w*': 'error.InvalidSignupToken', //_t('error.InvalidSignupToken')\n  '\\\\w*Access key not found\\\\w*': 'error.LoginInformationMismatch', //_t('error.LoginInformationMismatch')\n  '\\\\w*401 Unauthorized - Credential/signature mismatch\\\\w*':\n    'error.LoginInformationMismatch', //_t('error.LoginInformationMismatch')\n  'integrity error: duplicate key value violates unique constraint \"pk_resource_presets\"[\\\\n]DETAIL:  Key \\\\(name\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.ResourcePolicyAlreadyExist', //_t('error.ResourcePolicyAlreadyExist')\n  'integrity error: duplicate key value violates unique constraint \"pk_scaling_groups\"[\\\\n]DETAIL:  Key \\\\(name\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.ScalingGroupAlreadyExist', //_t('error.ScalingGroupAlreadyExist')\n  'integrity error: duplicate key value violates unique constraint \"uq_users_username\"[\\\\n]DETAIL:  Key \\\\(username\\\\)=\\\\([\\\\w]+\\\\) already exists.[\\\\n]':\n    'error.UserNameAlreadyExist', //_t('error.UserNameAlreadyExist')\n  'server responded failure: 400 Bad Request - Missing or invalid API parameters. (Your resource quota is exceeded. (cpu=24 mem=512g cuda.shares=80))':\n    'error.ResourceLimitExceed', //_t('error.ResourceLimitExceed')\n  '\\\\w*Key \\\\(name\\\\)=\\\\(.+\\\\) is still referenced from table \"keypairs\"\\\\.\\\\w*':\n    'error.ResourcePolicyStillReferenced', //_t('error.ResourcePolicyStillReferenced')\n  'Your resource request is smaller than the minimum required by the image. (\\\\w*)':\n    'error.SmallerResourceThenImageRequires', //_t('error.SmallerResourceThenImageRequires')\n};\n\nexport const usePainKiller = () => {\n  const { t } = useTranslation();\n  const relieve = (msg: string) => {\n    if (typeof msg === 'undefined') {\n      if (\n        // @ts-ignore\n        globalThis.backendaiclient === undefined ||\n        // @ts-ignore\n        globalThis.backendaiclient === null\n      ) {\n        return '_DISCONNECTED';\n      } else {\n        return 'Problem occurred.';\n      }\n    }\n    // @ts-ignore\n    if (globalThis.backendaiwebui.debug === true) {\n      return msg;\n    }\n    if ({}.hasOwnProperty.call(errorMessageTable, msg)) {\n      return t(errorMessageTable[msg]);\n    } else {\n      for (const regex of Object.keys(regexTable)) {\n        if (RegExp(regex).test(msg)) {\n          return t(regexTable[regex]);\n        }\n      }\n      return msg; // Bypass message. It will log on log panel\n    }\n  };\n  return { relieve };\n};\n","import ContainerRegistryList from '../components/ContainerRegistryList';\nimport Flex from '../components/Flex';\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { theme } from 'antd';\nimport Card from 'antd/es/card/Card';\nimport { useState, Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ntype TabKey = 'imageList' | 'presetList' | 'registryList';\nconst EnvironmentPage = () => {\n  const { t } = useTranslation();\n  const [curTabKey, setCurTabKey] = useState<TabKey>('imageList');\n  const baiClient = useSuspendedBackendaiClient();\n  const isSupportContainerRegistryGraphQL = baiClient.supports(\n    'container-registry-gql',\n  );\n  const { token } = theme.useToken();\n  return (\n    <Card\n      activeTabKey={curTabKey}\n      onTabChange={(key) => setCurTabKey(key as TabKey)}\n      tabList={[\n        {\n          key: 'imageList',\n          label: t('environment.Images'),\n        },\n        {\n          key: 'presetList',\n          label: t('environment.ResourcePresets'),\n        },\n        ...(baiClient.is_superadmin\n          ? [\n              {\n                key: 'registryList',\n                label: t('environment.Registries'),\n              },\n            ]\n          : []),\n      ]}\n      styles={{\n        body: {\n          padding: 0,\n          paddingTop: 1,\n          overflow: 'hidden',\n        },\n      }}\n    >\n      <Flex\n        style={{\n          display: curTabKey === 'imageList' ? 'block' : 'none',\n          paddingTop: token.paddingContentVerticalSM,\n        }}\n      >\n        {/* @ts-ignore */}\n        <backend-ai-environment-list active={curTabKey === 'imageList'} />\n      </Flex>\n      <Flex\n        style={{\n          display: curTabKey === 'presetList' ? 'block' : 'none',\n          paddingTop: token.paddingContentVerticalSM,\n        }}\n      >\n        {/* @ts-ignore */}\n        <backend-ai-resource-preset-list active={curTabKey === 'presetList'} />\n      </Flex>\n\n      <Flex\n        style={{\n          display: curTabKey === 'registryList' ? 'block' : 'none',\n          height: 'calc(100vh - 145px)',\n          // height: 'calc(100vh - 175px)',\n        }}\n      >\n        {isSupportContainerRegistryGraphQL ? (\n          curTabKey === 'registryList' ? (\n            <Suspense>\n              <ContainerRegistryList />\n            </Suspense>\n          ) : null\n        ) : (\n          // @ts-ignore\n          <backend-ai-registry-list active={curTabKey === 'registryList'} />\n        )}\n      </Flex>\n    </Card>\n  );\n};\n\nexport default EnvironmentPage;\n"],"names":["_ref","_containerRegistry$co","existingHostnames","containerRegistryFrgmt","onOk","modalProps","t","useTranslation","formRef","useRef","message","modal","App","useApp","containerRegistry","useFragment","_ContainerRegistryEditorModalFragment","require","commitCreateRegistry","isInflightCreateRegistry","useMutation","_ContainerRegistryEditorModalCreateMutation","commitModifyRegistry","isInflightModifyRegistry","_ContainerRegistryEditorModalModifyMutation","handleSave","async","_formRef$current","current","validateFields","then","values","mutationVariables","hostname","props","url","config","type","project","undefined","username","_","password","isChangedPassword","variables","onCompleted","res","errors","_res$modify_container","modify_container_registry","container_registry","error","length","errorMsgList","onError","_res$create_container","create_container_registry","catch","_jsx","BAIModal","title","okText","confirmLoading","_formRef$current2","_values$config","confirm","content","destroyOnClose","children","_jsxs","Form","ref","layout","requiredMark","initialValues","preserve","Item","label","name","required","rules","pattern","RegExp","validator","value","includes","Promise","reject","resolve","Input","disabled","startsWith","URL","e","noStyle","shouldUpdate","prev","next","_prev$config","_next$config","_ref2","getFieldValue","_ref3","Password","valuePropName","Checkbox","onChange","_formRef$current3","target","checked","setFieldValue","Select","options","_prev$config2","_next$config2","_ref4","mode","open","tokenSeparators","suffixIcon","style","baiClient","useSuspendedBackendaiClient","fetchKey","updateFetchKey","useUpdatableState","isPendingReload","startReloadTransition","useTransition","painKiller","usePainKiller","upsertNotification","useSetBAINotification","container_registries","domain","useLazyLoadQuery","_ContainerRegistryListQuery","_config","domainName","fetchPolicy","commitDeleteMutation","isInFlightDeleteMutation","_ContainerRegistryListDeleteMutation","commitDomainMutation","isInFlightDomationMutation","_ContainerRegistryListDomainMutation","token","theme","useToken","editingRegistry","setEditingRegistry","useState","deletingRegistry","setDeletingRegistry","deletingConfirmText","setDeletingConfirmText","isNewModalOpen","setIsNewModalOpen","inFlightHostName","setInFlightHostName","Flex","direction","align","flex","justify","gap","padding","paddingSM","Tooltip","Button","loading","icon","ReloadOutlined","onClick","PlusOutlined","Table","rowKey","record","id","scroll","x","pagination","columns","dataIndex","render","_record$config","prjName","Tag","isEnabled","allowed_docker_registries","Switch","isOn","newAllowedDockerRegistries","push","_res$modify_domain","modify_domain","ok","info","key","_res$modify_domain2","msg","fixed","index","size","color","colorInfo","SettingOutlined","danger","DeleteOutlined","SyncOutlined","notiKey","concat","description","backgroundTask","status","duration","maintenance","rescan_images","percent","taskId","task_id","statusDescriptions","pending","resolved","rejected","err","console","log","globalThis","lablupNotification","text","relieve","detail","show","rescanImage","dataSource","filterNonNullItems","ContainerRegistryEditorModal","r","onCancel","centered","_Fragment","ExclamationCircleOutlined","colorWarning","okButtonProps","marginTop","marginMD","Typography","Text","code","autoComplete","node","v0","v1","hash","v2","v3","v4","v5","v6","v7","v8","v9","errorMessageTable","regexTable","backendaiclient","backendaiwebui","debug","hasOwnProperty","call","regex","Object","keys","test","EnvironmentPage","curTabKey","setCurTabKey","isSupportContainerRegistryGraphQL","supports","Card","activeTabKey","onTabChange","tabList","is_superadmin","styles","body","paddingTop","overflow","display","paddingContentVerticalSM","active","height","Suspense","ContainerRegistryList"],"sourceRoot":""}