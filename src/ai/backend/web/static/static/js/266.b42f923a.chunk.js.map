{"version":3,"file":"static/js/266.b42f923a.chunk.js","mappings":"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","sources":["components/ImageMetaIcon.tsx","components/SessionListColums/__generated__/SessionInfoCellFragment.graphql.ts","components/__generated__/SessionListQuery.graphql.ts","components/SessionKernelTag.tsx","components/SessionListColums/SessionInfoCell.tsx","components/SessionList.tsx","pages/SessionListPage.tsx"],"sourcesContent":["import { useBackendaiImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst ImageMetaIcon: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n  alt?: string | null;\n}> = ({ image, style = {} }, bordered, alt = '') => {\n  const [, { getImageIcon }] = useBackendaiImageMetaData();\n\n  return (\n    <img\n      src={getImageIcon(image)}\n      style={{\n        width: '1em',\n        height: '1em',\n        ...style,\n      }}\n      alt={alt}\n    />\n  );\n};\n\nexport default React.memo(ImageMetaIcon);\n","/**\n * @generated SignedSource<<936640a1ef059e696b33a2390463d2b3>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionInfoCellFragment$data = {\n  readonly id: string | null;\n  readonly image: string | null;\n  readonly name: string | null;\n  readonly session_id: string | null;\n  readonly status: string | null;\n  readonly user_email: string | null;\n  readonly \" $fragmentType\": \"SessionInfoCellFragment\";\n};\nexport type SessionInfoCellFragment$key = {\n  readonly \" $data\"?: SessionInfoCellFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionInfoCellFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionInfoCellFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"session_id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"user_email\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"image\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSession\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"93f8cd0d4b47d24ea281955be0ad792b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<dc56988dfb43194473afb2a2bc247813>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionListQuery$variables = {\n  ak?: string | null;\n  group_id?: string | null;\n  limit: number;\n  offset: number;\n  skipClusterSize: boolean;\n  status?: string | null;\n};\nexport type SessionListQuery$data = {\n  readonly compute_session_list: {\n    readonly items: ReadonlyArray<{\n      readonly access_key: string | null;\n      readonly architecture: string | null;\n      readonly cluster_size: number | null;\n      readonly created_at: string | null;\n      readonly id: string | null;\n      readonly image: string | null;\n      readonly mounts: ReadonlyArray<string | null> | null;\n      readonly name: string | null;\n      readonly occupied_slots: any | null;\n      readonly service_ports: any | null;\n      readonly session_id: string | null;\n      readonly starts_at: string | null;\n      readonly status: string | null;\n      readonly status_info: string | null;\n      readonly terminated_at: string | null;\n      readonly type: string | null;\n      readonly \" $fragmentSpreads\": FragmentRefs<\"SessionInfoCellFragment\">;\n    } | null>;\n  } | null;\n};\nexport type SessionListQuery = {\n  response: SessionListQuery$data;\n  variables: SessionListQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"ak\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"group_id\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"limit\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"skipClusterSize\"\n},\nv5 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"status\"\n},\nv6 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"access_key\",\n    \"variableName\": \"ak\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"group_id\",\n    \"variableName\": \"group_id\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"limit\",\n    \"variableName\": \"limit\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"offset\",\n    \"variableName\": \"offset\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"status\",\n    \"variableName\": \"status\"\n  }\n],\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"type\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"session_id\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"architecture\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"created_at\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"terminated_at\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status_info\",\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"service_ports\",\n  \"storageKey\": null\n},\nv18 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mounts\",\n  \"storageKey\": null\n},\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"occupied_slots\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"starts_at\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"cluster_size\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/),\n      (v5/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v6/*: any*/),\n        \"concreteType\": \"ComputeSessionList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSession\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/),\n              {\n                \"args\": null,\n                \"kind\": \"FragmentSpread\",\n                \"name\": \"SessionInfoCellFragment\"\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v5/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"SessionListQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v6/*: any*/),\n        \"concreteType\": \"ComputeSessionList\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_list\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSession\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"items\",\n            \"plural\": true,\n            \"selections\": [\n              (v7/*: any*/),\n              (v8/*: any*/),\n              (v9/*: any*/),\n              (v10/*: any*/),\n              (v11/*: any*/),\n              (v12/*: any*/),\n              (v13/*: any*/),\n              (v14/*: any*/),\n              (v15/*: any*/),\n              (v16/*: any*/),\n              (v17/*: any*/),\n              (v18/*: any*/),\n              (v19/*: any*/),\n              (v20/*: any*/),\n              (v21/*: any*/),\n              (v22/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"user_email\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"e152f44d42d7fc4a33606a935adc582f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionListQuery(\\n  $limit: Int!\\n  $offset: Int!\\n  $ak: String\\n  $group_id: String\\n  $status: String\\n  $skipClusterSize: Boolean!\\n) {\\n  compute_session_list(limit: $limit, offset: $offset, access_key: $ak, group_id: $group_id, status: $status) {\\n    items {\\n      id\\n      type\\n      session_id\\n      name\\n      image\\n      architecture\\n      created_at\\n      terminated_at\\n      status\\n      status_info\\n      service_ports\\n      mounts\\n      occupied_slots\\n      access_key\\n      starts_at\\n      cluster_size @skipOnClient(if: $skipClusterSize)\\n      ...SessionInfoCellFragment\\n    }\\n  }\\n}\\n\\nfragment SessionInfoCellFragment on ComputeSession {\\n  id\\n  session_id\\n  name\\n  status\\n  user_email\\n  image\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"c41131439f810b7c5cd0bd9eb2857a46\";\n\nexport default node;\n","import { useBackendaiImageMetaData } from '../hooks';\nimport React from 'react';\n\nconst SessionKernelTag: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n}> = ({ image, style = {} }, bordered) => {\n  image = image || '';\n  const [, { getImageAliasName, getBaseVersion, getBaseImage }] =\n    useBackendaiImageMetaData();\n\n  // const sessionTags = useMemo(() => {\n  //   const tags = [];\n  //   if (meta && image) {\n  //     const specs = image.split(\"/\");\n  //     const name = (specs[2] || specs[1]).split(\":\")[0];\n  //     if (name in meta.kernel_labels) {\n  //       tags.push(meta.kernel_labels[name]);\n  //     } else {\n  //       const imageParts = image.split(\"/\");\n  //       // const registry = imageParts[0]; // hide registry (ip of docker registry is exposed)\n  //       let namespace;\n  //       let langName;\n  //       if (imageParts.length === 3) {\n  //         namespace = imageParts[1];\n  //         langName = imageParts[2];\n  //       } else if (imageParts.length > 3) {\n  //         namespace = imageParts.slice(2, imageParts.length - 1).join(\"/\");\n  //         langName = imageParts[imageParts.length - 1];\n  //       } else {\n  //         namespace = \"\";\n  //         langName = imageParts[1];\n  //       }\n  //       langName = langName.split(\":\")[0];\n  //       langName = namespace ? namespace + \"/\" + langName : langName;\n  //       tags.push([\n  //         { category: \"Env\", tag: `${langName}`, color: \"lightgrey\" },\n  //       ]);\n  //     }\n  //   }\n  //   return tags;\n  // }, [image, meta?.kernel_labels, image]);\n\n  // const specs = image.split(\"/\");\n  // console.log(image, sessionTags);\n  // const _tag = specs[specs.length - 1].split(':')[1];\n  // const _tags = tag.split('-');\n  // const baseversion = _tags[0];\n  // const baseimage = _tags[1];\n\n  // if (_tags[1] !== undefined) {\n  //   sessions[objectKey].baseversion = tags[0];\n  //   sessions[objectKey].baseimage = tags[1];\n  //   sessions[objectKey].additional_reqs = tags.slice(1, tags.length).map((tag) => tag.toUpperCase());\n  // } else if (sessions[objectKey].tag !== undefined) {\n  //   sessions[objectKey].baseversion = sessions[objectKey].tag;\n  // } else {\n  //   sessions[objectKey].baseversion = tag;\n  // }\n\n  // const tag\n\n  return (\n    <>\n      <div>{getImageAliasName(image)}</div>\n      <div>{getBaseVersion(image)}</div>\n      <div>{getBaseImage(image)}</div>\n    </>\n    // <>\n    //   {_.map(sessionTags, (tag, i) =>\n    //     _.map(tag, ({ category, color, tag }) => {\n    //       if (category === \"Env\") {\n    //         category = tag;\n    //       }\n    //       // if (category && rowData.item.baseversion) {\n    //       //   item.tag = rowData.item.baseversion;\n    //       // }\n    //       return category;\n    //     })\n    //   )}\n    //   {/* {JSON.stringify(meta?.kernel_labels)} */}\n    // </>\n  );\n};\n\nexport default React.memo(SessionKernelTag);\n","import {\n  // useBackendaiImageMetaData,\n  useSuspendedBackendaiClient,\n} from '../../hooks';\nimport { useTanMutation } from '../../hooks/reactQueryAlias';\nimport Flex from '../Flex';\nimport ImageMetaIcon from '../ImageMetaIcon';\nimport SessionKernelTag from '../SessionKernelTag';\nimport { SessionInfoCellFragment$key } from './__generated__/SessionInfoCellFragment.graphql';\nimport { EditOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, Typography, theme } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\nconst isRunningStatus = (status: string = '') => {\n  return [\n    'RUNNING',\n    'RESTARTING',\n    'TERMINATING',\n    'PENDING',\n    'SCHEDULED',\n    'PREPARING',\n    'PULLING',\n  ].includes(status);\n};\n\nconst isPreparing = (status: string = '') => {\n  return ['RESTARTING', 'PREPARING', 'PULLING'].includes(status);\n};\n\nconst SessionInfoCell: React.FC<{\n  sessionFrgmt: SessionInfoCellFragment$key;\n  onRename?: () => void;\n}> = ({ sessionFrgmt, onRename }) => {\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const session = useFragment(\n    graphql`\n      fragment SessionInfoCellFragment on ComputeSession {\n        id\n        session_id\n        name\n        status\n        user_email\n        image\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  // const metadata = useBackendaiImageMetaData();\n\n  const mutation = useTanMutation({\n    mutationFn: (newName: string) => {\n      const sessionId =\n        baiClient.APIMajorVersion < 5 ? session.name : session.session_id;\n      return baiClient.rename(sessionId, newName);\n    },\n  });\n\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n\n  const [editing, setEditing] = useState(false);\n  const [optimisticName, setOptimisticName] = useState(session.name);\n  const editable =\n    isRunningStatus(session.status || undefined) &&\n    !isPreparing(session.status || undefined) &&\n    baiClient.email === session.user_email;\n\n  const save = () => {\n    form.validateFields().then(({ name }) => {\n      setEditing(false);\n      setOptimisticName(name);\n      mutation.mutate(name, {\n        onSuccess: (result) => {\n          onRename && onRename();\n        },\n        onError: (error) => {\n          setOptimisticName(session.name);\n        },\n      });\n    });\n  };\n\n  const isPendingRename = mutation.isLoading || optimisticName !== session.name;\n\n  // sessions[objectKey].icon = this._getKernelIcon(session.image);\n  //         sessions[objectKey].sessionTags = this._getKernelInfo(session.image);\n  return (\n    <Flex direction=\"column\">\n      <Flex direction=\"row\">\n        <Form form={form}>\n          {editing ? (\n            <Form.Item\n              style={{ margin: 0 }}\n              name={'name'}\n              rules={[\n                {\n                  required: true,\n                },\n                {\n                  max: 64,\n                },\n                {\n                  pattern: /^(?:[a-zA-Z0-9][a-zA-Z0-9._-]{2,}[a-zA-Z0-9])?$/,\n                  message: t(\n                    'session.Validation.EnterValidSessionName',\n                  ).toString(),\n                },\n              ]}\n            >\n              <Input\n                autoFocus\n                onPressEnter={() => save()}\n                onKeyUp={(e) => {\n                  if (e.key === 'Escape') setEditing(false);\n                }}\n              />\n            </Form.Item>\n          ) : (\n            <>\n              <Typography.Text style={{ opacity: isPendingRename ? 0.5 : 1 }}>\n                {optimisticName}\n              </Typography.Text>\n              {editable && (\n                <Button\n                  loading={isPendingRename}\n                  type=\"text\"\n                  icon={<EditOutlined />}\n                  style={{ color: token.colorLink }}\n                  onClick={() => {\n                    form.setFieldsValue({\n                      name: session.name,\n                    });\n                    setEditing(true);\n                  }}\n                ></Button>\n              )}\n            </>\n          )}\n        </Form>\n      </Flex>\n      <ImageMetaIcon image={session.image} />\n      <SessionKernelTag image={session.image} />\n    </Flex>\n  );\n};\n\nexport default SessionInfoCell;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport SessionInfoCell from './SessionListColums/SessionInfoCell';\nimport { SessionListQuery } from './__generated__/SessionListQuery.graphql';\nimport { Table, TableProps } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React, { useDeferredValue } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ntype Session = NonNullable<\n  SessionListQuery['response']['compute_session_list']\n>['items'][0];\ninterface SessionListProps extends Omit<TableProps<any>, 'dataSource'> {\n  status?: string[];\n  limit?: number;\n  currentPage?: number;\n  pageSize?: number;\n  projectId?: string;\n  filter: (item: Session) => boolean;\n  extraFetchKey?: string;\n}\nconst SessionList: React.FC<SessionListProps> = ({\n  status = [],\n  limit = 50,\n  currentPage = 1,\n  pageSize = 50,\n  projectId,\n  filter,\n  extraFetchKey = '',\n  ...tableProps\n}) => {\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('initial-fetch');\n  const deferredMergedFetchKey = useDeferredValue(fetchKey + extraFetchKey);\n  const { t } = useTranslation();\n\n  if (\n    !baiClient.supports('avoid-hol-blocking') &&\n    status.includes('SCHEDULED')\n  ) {\n    status = status.filter((e) => e !== 'SCHEDULED');\n  }\n\n  const { compute_session_list } = useLazyLoadQuery<SessionListQuery>(\n    graphql`\n      query SessionListQuery(\n        $limit: Int!\n        $offset: Int!\n        $ak: String\n        $group_id: String\n        $status: String\n        $skipClusterSize: Boolean!\n      ) {\n        compute_session_list(\n          limit: $limit\n          offset: $offset\n          access_key: $ak\n          group_id: $group_id\n          status: $status\n        ) {\n          items {\n            id\n            type\n            session_id\n            name\n            image\n            architecture\n            created_at\n            terminated_at\n            status\n            status_info\n            service_ports\n            mounts\n            occupied_slots\n            access_key\n            starts_at\n\n            cluster_size @skipOnClient(if: $skipClusterSize)\n            ...SessionInfoCellFragment\n          }\n        }\n      }\n    `,\n    {\n      limit: pageSize,\n      offset: (currentPage - 1) * pageSize,\n      status: status?.join(','),\n      group_id: projectId,\n\n      // skipOnClients\n      skipClusterSize: !baiClient.supports('multi-container'),\n    },\n    {\n      fetchKey: deferredMergedFetchKey,\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  return (\n    <>\n      <Table\n        scroll={{ x: true }}\n        columns={[\n          {\n            title: t('session.SessionInfo'),\n            render(value, record, index) {\n              console.log(record);\n              return (\n                <SessionInfoCell\n                  key={record.session_id}\n                  sessionFrgmt={record}\n                  onRename={() => {\n                    updateFetchKey(\n                      record.session_id + new Date().toISOString(),\n                    );\n                  }}\n                />\n              );\n            },\n            fixed: 'left',\n          },\n          {\n            title: t('session.Status'),\n            dataIndex: 'status',\n          },\n          {\n            title: t('general.Control'),\n          },\n          {\n            title: t('session.Configuration'),\n          },\n          {\n            title: t('session.Usage'),\n          },\n          {\n            title: t('session.Reservation'),\n          },\n          {\n            title: t('session.Architecture'),\n          },\n          {\n            title: t('session.SessionType'),\n          },\n          {\n            title: t('session.Agent'),\n          },\n        ]}\n        // @ts-ignore\n        dataSource={(compute_session_list?.items || []).filter(filter)}\n        // dataSource={_.filter(compute_session_list?.items || [], () => {})}\n        // pagination={{\n\n        // }}\n        {...tableProps}\n      />\n    </>\n  );\n};\n\nexport default SessionList;\n","import Flex from '../components/Flex';\nimport SessionList from '../components/SessionList';\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from '../hooks';\nimport { PoweroffOutlined, ThunderboltTwoTone } from '@ant-design/icons';\nimport { Alert, Button, Segmented, Tabs, Typography, theme } from 'antd';\nimport React, { PropsWithChildren, Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\n\nconst RUNNINGS = [\n  'RUNNING',\n  'RESTARTING',\n  'TERMINATING',\n  'PENDING',\n  'SCHEDULED',\n  'PREPARING',\n  'PULLING',\n];\nconst TAB_STATUS_MAP = {\n  running: RUNNINGS,\n  interactive: RUNNINGS,\n  batch: RUNNINGS,\n  inference: RUNNINGS,\n  finished: ['TERMINATED', 'CANCELLED'],\n  others: ['TERMINATING', 'ERROR'],\n  default: RUNNINGS,\n};\n\ntype TabKey =\n  | 'running'\n  | 'interactive'\n  | 'batch'\n  | 'inference'\n  | 'finished'\n  | 'others'\n  | 'default';\nconst SessionListPage: React.FC<PropsWithChildren> = ({ children }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const { token } = theme.useToken();\n  const curProject = useCurrentProjectValue();\n  const navigate = useNavigate();\n\n  const [selectedTab, setSelectedTab] = useState<TabKey>('running');\n  const [selectedGeneration, setSelectedGeneration] = useState<\n    'current' | 'next'\n  >('next');\n\n  // console.log(compute_session_list?.items[0].);\n  return (\n    <>\n      <Alert\n        message={\n          <Flex gap={'md'}>\n            <Typography.Text>\n              This is{' '}\n              {selectedGeneration === 'current'\n                ? 'current version'\n                : 'NEXT generation'}{' '}\n              of session list. you can switch anytime.\n            </Typography.Text>\n            <Segmented\n              options={[\n                {\n                  label: 'Current',\n                  value: 'current',\n                },\n                {\n                  label: (\n                    <Typography.Text\n                      style={{\n                        color:\n                          selectedGeneration === 'next'\n                            ? token.colorPrimary\n                            : undefined,\n                      }}\n                    >\n                      Next\n                    </Typography.Text>\n                  ),\n                  value: 'next',\n                  icon: (\n                    // <ThunderboltFilled style={{ color: token.colorPrimary }} />\n                    <ThunderboltTwoTone twoToneColor={token.colorWarning} />\n                  ),\n                },\n              ]}\n              value={selectedGeneration}\n              // @ts-ignore\n              onChange={(x) => setSelectedGeneration(x)}\n            />\n          </Flex>\n        }\n        type=\"warning\"\n        banner\n        style={{ marginTop: -14, marginLeft: -14, marginRight: -14 }}\n      />\n      {selectedGeneration === 'next' ? (\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ padding: token.padding, gap: token.margin }}\n        >\n          {children}\n          {/* <Card bordered title={t(\"summary.ResourceStatistics\")}>\n            <p>SessionList</p>\n          </Card> */}\n\n          {/* <Card bodyStyle={{ paddingTop: 0 }}> */}\n          <Flex direction=\"column\" align=\"stretch\">\n            <Flex style={{ flex: 1 }}>\n              <Tabs\n                // type=\"card\"\n                activeKey={selectedTab}\n                onChange={(key) => setSelectedTab(key as TabKey)}\n                tabBarStyle={{ marginBottom: 0 }}\n                style={{\n                  width: '100%',\n                  paddingLeft: token.paddingMD,\n                  paddingRight: token.paddingMD,\n                  borderTopLeftRadius: token.borderRadius,\n                  borderTopRightRadius: token.borderRadius,\n                }}\n                items={[\n                  {\n                    key: 'running',\n                    label: t('session.Running'),\n                  },\n                  {\n                    key: 'interactive',\n                    label: t('session.Interactive'),\n                  },\n                  {\n                    key: 'batch',\n                    label: t('session.Batch'),\n                  },\n                  ...(baiClient.supports('inference-workload')\n                    ? [\n                        {\n                          key: 'inference',\n                          label: t('session.Inference'),\n                        },\n                      ]\n                    : []),\n                  {\n                    key: 'finished',\n                    label: t('session.Finished'),\n                  },\n                  {\n                    key: 'others',\n                    label: t('session.Others'),\n                  },\n                ]}\n                tabBarExtraContent={{\n                  right: (\n                    <Flex direction=\"row\" gap={'sm'}>\n                      {/* <Tooltip title={t(\"session.exportCSV\")}>\n                        <Button icon={<DownloadOutlined />} type=\"text\" />\n                      </Tooltip> */}\n                      {/* @ts-ignore */}\n                      <Button\n                        type=\"primary\"\n                        icon={<PoweroffOutlined />}\n                        onClick={() => {\n                          navigate('/session/start');\n                        }}\n                      >\n                        START\n                      </Button>\n                    </Flex>\n                  ),\n                }}\n              />\n              {/* <Button type=\"text\" icon={<MoreOutlined />} /> */}\n            </Flex>\n            {/* <Button type=\"primary\" icon={<PoweroffOutlined />}>\n            시작\n          </Button> */}\n\n            {/* @ts-ignore */}\n            {/* <backend-ai-session-launcher\n          location=\"session\"\n          id=\"session-launcher\"\n          active\n        /> */}\n            <Suspense fallback={<div>loading..</div>}>\n              <SessionList\n                projectId={curProject.id}\n                status={\n                  TAB_STATUS_MAP[selectedTab] || TAB_STATUS_MAP['default']\n                }\n                filter={(session) => {\n                  if (\n                    ['interactive', 'batch', 'inference'].includes(selectedTab)\n                  ) {\n                    return session?.type?.toLowerCase() === selectedTab;\n                  }\n                  return true;\n                }}\n                extraFetchKey={selectedTab}\n              />\n            </Suspense>\n          </Flex>\n        </Flex>\n      ) : (\n        <>\n          {/* @ts-ignore */}\n          <backend-ai-session-view class=\"page\" name=\"job\" active />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default SessionListPage;\n"],"names":["ImageMetaIcon","_ref","bordered","image","_ref$style","style","alt","arguments","length","undefined","_useBackendaiImageMet","useBackendaiImageMetaData","getImageIcon","_slicedToArray","_jsx","src","_objectSpread","width","height","React","node","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","hash","SessionKernelTag","_useBackendaiImageMet3","getImageAliasName","getBaseVersion","getBaseImage","_jsxs","_Fragment","children","sessionFrgmt","onRename","baiClient","useSuspendedBackendaiClient","token","theme","useToken","session","useFragment","_SessionInfoCellFragment","require","mutation","useTanMutation","mutationFn","newName","sessionId","APIMajorVersion","name","session_id","rename","_Form$useForm","Form","useForm","form","t","useTranslation","_useState","useState","_useState2","editing","setEditing","_useState3","_useState4","optimisticName","setOptimisticName","editable","includes","isRunningStatus","status","isPreparing","email","user_email","isPendingRename","isLoading","Flex","direction","Item","margin","rules","required","max","pattern","message","toString","Input","autoFocus","onPressEnter","validateFields","then","_ref2","mutate","onSuccess","result","onError","error","onKeyUp","e","key","Typography","Text","opacity","Button","loading","type","icon","EditOutlined","color","colorLink","onClick","setFieldsValue","_status","_ref$status","_ref$currentPage","limit","currentPage","_ref$pageSize","pageSize","projectId","filter","_ref$extraFetchKey","extraFetchKey","tableProps","_objectWithoutProperties","_excluded","_useUpdatableState","useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","deferredMergedFetchKey","useDeferredValue","supports","compute_session_list","useLazyLoadQuery","_SessionListQuery","offset","join","group_id","skipClusterSize","fetchPolicy","Table","scroll","x","columns","title","render","value","record","index","console","log","SessionInfoCell","Date","toISOString","fixed","dataIndex","dataSource","items","RUNNINGS","TAB_STATUS_MAP","running","interactive","batch","inference","finished","others","default","curProject","useCurrentProjectValue","navigate","useNavigate","selectedTab","setSelectedTab","selectedGeneration","setSelectedGeneration","Alert","gap","Segmented","options","label","colorPrimary","ThunderboltTwoTone","twoToneColor","colorWarning","onChange","banner","marginTop","marginLeft","marginRight","align","padding","flex","Tabs","activeKey","tabBarStyle","marginBottom","paddingLeft","paddingMD","paddingRight","borderTopLeftRadius","borderRadius","borderTopRightRadius","concat","_toConsumableArray","tabBarExtraContent","right","PoweroffOutlined","Suspense","fallback","SessionList","id","_session$type","toLowerCase","class","active"],"sourceRoot":""}