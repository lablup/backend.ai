{"version":3,"file":"static/js/1877.6b219d16.chunk.js","mappings":"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","sources":["components/BAICard.tsx","components/BAILink.tsx","components/BAIPropertyFilter.tsx","components/BAIRadioGroup.tsx","components/ComputeSessionNodeItems/__generated__/SessionSlotCellFragment.graphql.ts","components/DoubleTag.tsx","components/__generated__/SessionNodesFragment.graphql.ts","hooks/reactPaginationQueryOptions.tsx","components/BAIFetchKeyButton.tsx","components/ComputeSessionNodeItems/SessionSlotCell.tsx","components/SessionNodes.tsx","hooks/useDeferredQueryParams.tsx","components/BAITabs.tsx","pages/ComputeSessionListPage.tsx","pages/__generated__/ComputeSessionListPageQuery.graphql.ts"],"sourcesContent":["import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\nexport interface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  showDivider?: boolean;\n  onClickExtraButton?: () => void;\n  ref?: React.LegacyRef<HTMLDivElement> | undefined;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  styles,\n  showDivider,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      className={status === 'error' ? 'bai-card-error' : ''}\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n              ? token.colorWarning\n              : status === 'success'\n                ? token.colorSuccess\n                : style?.borderColor, // default\n      })}\n      styles={_.merge(\n        showDivider\n          ? {}\n          : {\n              header: {\n                borderBottom: 'none',\n              },\n              body: {\n                paddingTop: token.marginXS,\n              },\n            },\n        styles,\n      )}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { Typography } from 'antd';\nimport { createStyles } from 'antd-style';\nimport React from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\n\nconst useStyles = createStyles(({ css, token }) => ({\n  hover: css`\n    text-decoration: none;\n    /* color: ${token.colorLink}; */\n\n    &:hover {\n      /* color: ${token.colorLinkHover}; */\n      text-decoration: underline;\n    }\n  `,\n}));\n\ninterface BAILinkProps extends Omit<LinkProps, 'to'> {\n  type?: 'hover';\n  to?: LinkProps['to'];\n}\nconst BAILink: React.FC<BAILinkProps> = ({ type, to, ...linkProps }) => {\n  const { styles } = useStyles();\n  return to ? (\n    <Link\n      className={type === 'hover' ? styles.hover : undefined}\n      to={to}\n      {...linkProps}\n    />\n  ) : (\n    <Typography.Link\n      className={type === 'hover' ? styles.hover : undefined}\n      onClick={linkProps.onClick}\n      {...linkProps}\n    />\n  );\n};\n\nexport default BAILink;\n","import { filterEmptyItem } from '../helper';\nimport Flex from './Flex';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  AutoComplete,\n  AutoCompleteProps,\n  Button,\n  GetRef,\n  Input,\n  Select,\n  Space,\n  Tag,\n  Tooltip,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, {\n  ComponentProps,\n  ReactNode,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\n//github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/models/minilang/queryfilter.py\nexport type FilterProperty = {\n  key: string;\n  // operators: Array<string>;\n  defaultOperator?: string;\n  propertyLabel: string;\n  // TODO: support array, number\n  type: 'string' | 'boolean';\n  options?: AutoCompleteProps['options'];\n  strictSelection?: boolean;\n  rule?: {\n    message: string;\n    validate: (value: string) => boolean;\n  };\n};\n\nexport interface BAIPropertyFilterProps\n  extends Omit<ComponentProps<typeof Flex>, 'value' | 'onChange'> {\n  value?: string;\n  onChange?: (value: string) => void;\n  defaultValue?: string;\n  filterProperties: Array<FilterProperty>;\n  loading?: boolean;\n}\n\ninterface FilterInput {\n  property: string;\n  operator: string;\n  value: string;\n  label?: ReactNode;\n  type: FilterProperty['type'];\n  propertyLabel: string;\n}\n\nconst DEFAULT_OPERATOR_OF_TYPES = {\n  string: 'ilike',\n  boolean: '==',\n};\n\nconst DEFAULT_OPTIONS_OF_TYPES: {\n  [key: string]: AutoCompleteProps['options'] | undefined;\n} = {\n  boolean: [\n    {\n      label: 'True',\n      value: 'true',\n    },\n    {\n      label: 'False',\n      value: 'false',\n    },\n  ],\n  string: undefined,\n};\n\nconst DEFAULT_STRICT_SELECTION_OF_TYPES: {\n  [key: string]: boolean | undefined;\n} = {\n  boolean: true,\n};\n\nfunction trimFilterValue(filterValue: string): string {\n  return filterValue.replace(/^%|%$/g, '');\n}\n\nexport function mergeFilterValues(\n  filterStrings: Array<string | undefined | null>,\n  operator: string = '&',\n) {\n  const mergedFilter = _.join(\n    _.map(filterEmptyItem(filterStrings), (str) => `(${str})`),\n    operator,\n  );\n  return !!mergedFilter ? mergedFilter : undefined;\n}\n\n/**\n * Parses the filter value and returns an object containing the property, operator, and value.\n * @param filter - The filter string to parse.\n * @returns An object containing the parsed property, operator, and value.\n */\nexport function parseFilterValue(filter: string) {\n  // Split the filter string into an array of strings using a regular expression.\n  // The regular expression splits the string at whitespace characters, but ignores whitespace within double quotes.\n  const [property, ...rest] = filter.split(/\\s+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n  // Join the remaining strings in the array and split them again using the same regular expression.\n  // This extracts the operator and the value from the filter string.\n  const [operator, ...valueParts] = rest\n    .join(' ')\n    .split(/\\s+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n  // Join the value parts into a single string and remove any leading or trailing double quotes.\n  const value = valueParts.join(' ').replace(/^\"|\"$/g, '');\n\n  // Return an object containing the parsed property, operator, and value.\n  return { property, operator, value };\n}\n\n/**\n * Combines filter strings with the specified logical operator.\n * @param filters - The array of filter strings to combine.\n * @param operator - The logical operator to use ('and' or 'or').\n * @returns The combined filter string.\n */\nfunction combineFilters(filters: string[], operator: '&' | '|'): string {\n  return filters.join(` ${operator} `);\n}\n\nconst BAIPropertyFilter: React.FC<BAIPropertyFilterProps> = ({\n  filterProperties,\n  value: propValue,\n  onChange: propOnChange,\n  defaultValue,\n  loading,\n  ...containerProps\n}) => {\n  const [search, setSearch] = useState<string>();\n  const autoCompleteRef = useRef<GetRef<typeof AutoComplete>>(null);\n  const [isOpenAutoComplete, setIsOpenAutoComplete] = useState(false);\n\n  const [value, setValue] = useControllableValue<string | undefined>({\n    value: propValue,\n    defaultValue: defaultValue,\n    onChange: propOnChange,\n  });\n\n  const filtersFromValue = useMemo(() => {\n    if (value === undefined || value === '') return [];\n    const filters = value.split('&').map((filter) => filter.trim());\n    return filters.map((filter, index) => {\n      const { property, operator, value } = parseFilterValue(filter);\n      return {\n        key: index + value,\n        property,\n        operator,\n        value,\n        propertyLabel:\n          _.find(filterProperties, (f) => f.key === property)?.propertyLabel ||\n          property,\n        type:\n          _.find(filterProperties, (f) => f.key === property)?.type || 'string',\n      };\n    });\n  }, [value, filterProperties]);\n\n  const { t } = useTranslation();\n  const options = _.map(filterProperties, (filterProperty) => ({\n    label: filterProperty.propertyLabel,\n    value: filterProperty.key,\n    filter: filterProperty,\n  }));\n  const [selectedProperty, setSelectedProperty] = useState(options[0].filter);\n\n  const { token } = theme.useToken();\n\n  const [isValid, setIsValid] = useState(true);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const updateFiltersValue = (filters: FilterInput[]) => {\n    if (filters.length === 0) {\n      setValue(undefined);\n    } else {\n      const newFilterString = _.map(filters, (item) => {\n        const valueStringInResult =\n          item.type === 'string' ? `\"${item.value}\"` : item.value;\n        return `${item.property} ${item.operator} ${valueStringInResult}`;\n      });\n      setValue(combineFilters(newFilterString, '&'));\n    }\n  };\n\n  const push = (item: FilterInput) => {\n    updateFiltersValue([...filtersFromValue, item]);\n  };\n\n  const remove = (key: string) => {\n    const newFilters = filtersFromValue.filter((item) => item.key !== key);\n    updateFiltersValue(newFilters);\n  };\n\n  const resetList = () => {\n    updateFiltersValue([]);\n  };\n\n  const onSearch = (value: string) => {\n    if (_.isEmpty(value)) return;\n    if (\n      selectedProperty.strictSelection ||\n      DEFAULT_STRICT_SELECTION_OF_TYPES[selectedProperty.type]\n    ) {\n      const option = _.find(\n        selectedProperty.options ||\n          DEFAULT_OPTIONS_OF_TYPES[selectedProperty.type],\n        (o) => o.value === value,\n      );\n      if (!option) return;\n    }\n    const isValid =\n      !selectedProperty.rule?.validate || selectedProperty.rule.validate(value);\n    setIsValid(isValid);\n    if (!isValid) return;\n\n    setSearch('');\n    const operator =\n      selectedProperty.defaultOperator ||\n      DEFAULT_OPERATOR_OF_TYPES[selectedProperty.type];\n    const filterValue =\n      operator === 'ilike' || operator === 'like' ? `%${value}%` : `${value}`;\n    push({\n      property: selectedProperty.key,\n      propertyLabel: selectedProperty.propertyLabel,\n      operator,\n      value: filterValue,\n      label: selectedProperty.options?.find((o) => o.value === value)?.label,\n      type: selectedProperty.type,\n    });\n  };\n\n  return (\n    <Flex direction=\"column\" gap={'xs'} align=\"start\">\n      <Space.Compact>\n        <Select\n          popupMatchSelectWidth={false}\n          options={options}\n          value={selectedProperty.key}\n          onChange={(value, options) => {\n            setSelectedProperty(_.castArray(options)[0].filter);\n          }}\n          onSelect={() => {\n            autoCompleteRef.current?.focus();\n            setIsOpenAutoComplete(true);\n            setIsValid(true);\n          }}\n          showSearch\n          optionFilterProp=\"label\"\n        />\n        <Tooltip\n          title={isValid || !isFocused ? '' : selectedProperty.rule?.message}\n          open={!isValid && isFocused}\n          color={token.colorError}\n        >\n          <AutoComplete\n            ref={autoCompleteRef}\n            value={search}\n            open={isOpenAutoComplete}\n            onDropdownVisibleChange={setIsOpenAutoComplete}\n            onSelect={onSearch}\n            onChange={(value) => {\n              setIsValid(true);\n              setSearch(value);\n            }}\n            style={{\n              minWidth: 200,\n            }}\n            // @ts-ignore\n            options={_.filter(\n              selectedProperty.options ||\n                DEFAULT_OPTIONS_OF_TYPES[selectedProperty.type],\n              (option) => {\n                return !search\n                  ? true\n                  : option.label?.toString().includes(search);\n              },\n            )}\n            placeholder={t('propertyFilter.PlaceHolder')}\n            onBlur={() => {\n              setIsFocused(false);\n            }}\n            onFocus={() => {\n              setIsFocused(true);\n            }}\n          >\n            <Input.Search\n              onSearch={onSearch}\n              allowClear\n              status={!isValid && isFocused ? 'error' : undefined}\n            />\n          </AutoComplete>\n        </Tooltip>\n      </Space.Compact>\n      {filtersFromValue.length > 0 && (\n        <Flex\n          direction=\"row\"\n          gap={'xs'}\n          wrap=\"wrap\"\n          style={{ alignSelf: 'stretch' }}\n        >\n          {_.map(filtersFromValue, (item) => (\n            <Tag\n              key={item.key}\n              closable\n              onClose={() => remove(item.key)}\n              style={{ margin: 0 }}\n            >\n              {item.propertyLabel}: {trimFilterValue(item.value)}\n            </Tag>\n          ))}\n          {filtersFromValue.length > 1 && (\n            <Tooltip title={t('propertyFilter.ResetFilter')}>\n              <Button\n                size=\"small\"\n                icon={\n                  <CloseCircleOutlined\n                    style={{ color: token.colorTextSecondary }}\n                  />\n                }\n                type=\"text\"\n                onClick={resetList}\n              />\n            </Tooltip>\n          )}\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\nexport default BAIPropertyFilter;\n","import { ConfigProvider, Radio, theme } from 'antd';\nimport type { RadioGroupProps } from 'antd';\nimport { createStyles } from 'antd-style';\nimport classNames from 'classnames';\nimport React from 'react';\n\ninterface BAIRadioGroupProps extends RadioGroupProps {}\n\nconst useStyle = createStyles(({ css, token }) => ({\n  baiRadioGroup: css`\n    // border version\n    .ant-radio-button-wrapper:not(.ant-radio-button-wrapper-checked)::before,\n    .ant-radio-button-wrapper:hover::before {\n      background-color: transparent;\n    }\n    .ant-radio-button-wrapper-checked:hover::before,\n    .ant-radio-button-wrapper-checked::before {\n      background-color: transparent;\n      /* background-color: ${`rgba(${parseInt(token.colorPrimary.slice(1, 3), 16)}, ${parseInt(token.colorPrimary.slice(3, 5), 16)}, ${parseInt(token.colorPrimary.slice(5, 7), 16)}, 0.30)`}; */\n    }\n\n    // original design version\n    /* .ant-radio-button-wrapper-checked::before,\n    .ant-radio-button-wrapper::before {\n      background-color: ${token.colorBorder};\n    }\n    .ant-radio-button-wrapper-checked:hover::before,\n    .ant-radio-button-wrapper:hover::before {\n      background-color: ${token.colorBorder};\n    }\n\n    .ant-radio-button-wrapper-checked {\n      border-color: transparent !important;\n    } */\n  `,\n}));\nconst BAIRadioGroup: React.FC<BAIRadioGroupProps> = ({ options, ...props }) => {\n  const { styles } = useStyle();\n  const { token } = theme.useToken();\n  const colorPrimaryWithAlpha = `rgba(${parseInt(token.colorPrimary.slice(1, 3), 16)}, ${parseInt(token.colorPrimary.slice(3, 5), 16)}, ${parseInt(token.colorPrimary.slice(5, 7), 16)}, 0.15)`;\n  const colorPrimaryWithLessAlpha = `rgba(${parseInt(token.colorPrimary.slice(1, 3), 16)}, ${parseInt(token.colorPrimary.slice(3, 5), 16)}, ${parseInt(token.colorPrimary.slice(5, 7), 16)}, 0.3)`;\n  return (\n    <ConfigProvider\n      theme={{\n        components: {\n          Radio: {\n            buttonSolidCheckedBg: colorPrimaryWithAlpha,\n            buttonSolidCheckedColor: token.colorPrimary,\n            buttonSolidCheckedHoverBg: colorPrimaryWithLessAlpha,\n          },\n        },\n      }}\n    >\n      <Radio.Group\n        className={classNames(styles.baiRadioGroup, props.className)}\n        options={options}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n        {...props}\n      />\n    </ConfigProvider>\n  );\n};\n\nexport default BAIRadioGroup;\n","/**\n * @generated SignedSource<<db3a9e430bb46d4771a6c5e75ba49665>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionSlotCellFragment$data = {\n  readonly id: string;\n  readonly occupied_slots: string | null | undefined;\n  readonly requested_slots: string | null | undefined;\n  readonly \" $fragmentType\": \"SessionSlotCellFragment\";\n};\nexport type SessionSlotCellFragment$key = {\n  readonly \" $data\"?: SessionSlotCellFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionSlotCellFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"SessionSlotCellFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"occupied_slots\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"requested_slots\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"39927d6fcf4a8ce5c71769155ce2a7a4\";\n\nexport default node;\n","import Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { Tag } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport type DoubleTagObjectValue = {\n  label: string;\n  color?: string;\n};\n\nconst DoubleTag: React.FC<{\n  values?: Array<string> | Array<DoubleTagObjectValue>;\n  highlightKeyword?: string;\n}> = ({ values = [], highlightKeyword }) => {\n  if (values.length === 0) return null;\n  let objectValues: Array<DoubleTagObjectValue>;\n  if (\n    values[0] &&\n    (typeof values[0] === 'string' || React.isValidElement(values[0]))\n  ) {\n    objectValues = values.map(\n      (value) =>\n        ({\n          label: value,\n          color: 'blue',\n        }) as DoubleTagObjectValue,\n    );\n  } else {\n    objectValues = values as DoubleTagObjectValue[];\n  }\n\n  return (\n    <Flex direction=\"row\">\n      {_.map(objectValues, (objValue, idx) =>\n        !_.isEmpty(objValue.label) ? (\n          <Tag\n            key={idx}\n            style={\n              _.last(objectValues) === objValue\n                ? undefined\n                : { margin: 0, marginRight: -1 }\n            }\n            color={objValue.color}\n          >\n            {!_.isUndefined(highlightKeyword) ? (\n              <TextHighlighter keyword={highlightKeyword}>\n                {objValue.label}\n              </TextHighlighter>\n            ) : (\n              objValue.label\n            )}\n          </Tag>\n        ) : null,\n      )}\n    </Flex>\n  );\n};\n\nexport default DoubleTag;\n","/**\n * @generated SignedSource<<d1f648ec59bf0f6e64b2c405b9016f10>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type SessionNodesFragment$data = ReadonlyArray<{\n  readonly id: string;\n  readonly name: string | null | undefined;\n  readonly row_id: string;\n  readonly status: string | null | undefined;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionReservationFragment\" | \"SessionSlotCellFragment\" | \"SessionStatusTagFragment\" | \"SessionUsageMonitorFragment\">;\n  readonly \" $fragmentType\": \"SessionNodesFragment\";\n} | null | undefined>;\nexport type SessionNodesFragment$key = ReadonlyArray<{\n  readonly \" $data\"?: SessionNodesFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"SessionNodesFragment\">;\n}>;\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"plural\": true\n  },\n  \"name\": \"SessionNodesFragment\",\n  \"selections\": [\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"id\"\n    },\n    {\n      \"kind\": \"RequiredField\",\n      \"field\": {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"row_id\",\n        \"storageKey\": null\n      },\n      \"action\": \"NONE\",\n      \"path\": \"row_id\"\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"status\",\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionStatusTagFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionReservationFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionSlotCellFragment\"\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"SessionUsageMonitorFragment\"\n    }\n  ],\n  \"type\": \"ComputeSessionNode\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"529961d4450944f1c138d21c87f8f3ba\";\n\nexport default node;\n","// import { offset_to_cursor } from \"../helper\";\nimport { LazyLoadQueryOptions } from '../helper/types';\nimport { SorterResult } from 'antd/lib/table/interface';\nimport _ from 'lodash';\nimport { useState } from 'react';\nimport {\n  fetchQuery,\n  GraphQLTaggedNode,\n  useRelayEnvironment,\n} from 'react-relay';\nimport {\n  ArrayParam,\n  NumberParam,\n  ObjectParam,\n  StringParam,\n  useQueryParams,\n} from 'use-query-params';\n\nexport type SorterInterface = Pick<SorterResult<any>, 'field' | 'order'>;\n\nexport const antdSorterResultToOrder = (\n  sorter: SorterInterface | SorterInterface[],\n) => {\n  const sorterArray = _.castArray(sorter).filter((s) => s.field);\n\n  return _.filter(\n    _.map(sorterArray, (s) =>\n      _.isNull(s.order)\n        ? undefined\n        : `${_.snakeCase(s.field as string).toUpperCase()}_${\n            s.order === 'ascend' ? 'ASC' : 'DESC'\n          }`,\n    ),\n  );\n};\n\nexport const orderToAntdSorterResult = (order: string[]) => {\n  return _.map(order, (o) => {\n    const names = o.split('_');\n    const orderKey = names.pop();\n    const field = _.camelCase(names.join('_'));\n    return {\n      field,\n      order: (orderKey === 'ASC' ? 'ascend' : 'descend') as\n        | 'ascend'\n        | 'descend'\n        | null,\n    };\n  });\n};\n\nexport const getSortOrderByName = (order: string[], name: string) => {\n  const sorterResult = orderToAntdSorterResult(order);\n  const sorter = _.find(sorterResult, (s) => s.field === name);\n  return sorter?.order;\n};\n\nexport const useRelayPaginationQueryOptions = <\n  // Q, N,\n  O,\n  F,\n>({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      first: pageSize,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n      order: order,\n      filter: filter,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n    // sorter?: SorterResult<N>[];\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n  }) => any;\n}) => {\n  const [isPending, setIsPending] = useState(false);\n\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    order: ArrayParam,\n    filter: ObjectParam,\n  });\n\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  //TODO: not use as\n  const order = (params.order || defaultVariables.order) as O[];\n  const filter = (params.filter || defaultVariables.filter) as F;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    // sorter: SorterResult<N>[],\n    newOrder: O[] = defaultVariables.order,\n    newFilter: F | undefined = defaultVariables.filter,\n    options?: {\n      withoutPendingStatus: boolean;\n    },\n  ) => {\n    if (options?.withoutPendingStatus !== true) {\n      setIsPending(true);\n    }\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setIsPending(false);\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          // eslint-disable-next-line\n          order: newOrder as [], // TODO: not use as []\n          // eslint-disable-next-line\n          filter: newFilter as {}, // TODO: not use as {}\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      isPending,\n      variables,\n      filter,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\nexport const useBAIPaginationQueryOptions = ({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      limit: pageSize,\n      offset: page > 1 ? (page - 1) * pageSize : 0,\n      filter: filter,\n      order: order,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  }) => any;\n}) => {\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    filter: StringParam,\n    order: StringParam,\n  });\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  const order = params.order || defaultVariables.order;\n  const filter = params.filter || defaultVariables.filter;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    newOrder: string | undefined = defaultVariables.order,\n    newFilter: string | undefined = defaultVariables.filter,\n  ) => {\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          order: newOrder,\n          filter: newFilter,\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      variables,\n      filter,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\ninterface BAIPaginationOption {\n  limit: number;\n  offset: number;\n  first?: number;\n  // filter?: string;\n  // order?: string;\n}\ninterface AntdBasicPaginationOption {\n  pageSize: number;\n  current: number;\n}\n\ninterface InitialPaginationOption\n  extends AntdBasicPaginationOption,\n    Omit<BAIPaginationOption, 'limit' | 'offset'> {}\nexport const useBAIPaginationOptionState = (\n  initialOptions: InitialPaginationOption,\n): {\n  baiPaginationOption: BAIPaginationOption;\n  tablePaginationOption: AntdBasicPaginationOption;\n  setTablePaginationOption: (\n    pagination: Partial<AntdBasicPaginationOption>,\n  ) => void;\n} => {\n  const [options, setOptions] =\n    useState<AntdBasicPaginationOption>(initialOptions);\n  return {\n    baiPaginationOption: {\n      limit: options.pageSize,\n      first: options.pageSize,\n      offset:\n        options.current > 1 ? (options.current - 1) * options.pageSize : 0,\n    },\n    tablePaginationOption: {\n      pageSize: options.pageSize,\n      current: options.current,\n    },\n    setTablePaginationOption: (pagination) => {\n      if (!_.isEqual(pagination, options)) {\n        setOptions((current) => ({\n          ...current,\n          ...pagination,\n        }));\n      }\n    },\n  };\n};\n","import useControllableState from '../hooks/useControllableState';\nimport { useInterval, useIntervalValue } from '../hooks/useIntervalValue';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { Button, ButtonProps, Tooltip } from 'antd';\nimport dayjs from 'dayjs';\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface BAIAutoRefetchButtonProps {\n  value: string;\n  loading?: boolean;\n  lastLoadTime?: Date;\n  showLastLoadTime?: boolean;\n  autoUpdateDelay?: number | null;\n  size?: ButtonProps['size'];\n  onChange: (fetchKey: string) => void;\n  hidden?: boolean;\n}\nconst BAIFetchKeyButton: React.FC<BAIAutoRefetchButtonProps> = ({\n  value,\n  loading,\n  onChange,\n  showLastLoadTime,\n  autoUpdateDelay = null,\n  size,\n  hidden,\n  ...props\n}) => {\n  const { t } = useTranslation();\n  const [lastLoadTime, setLastLoadTime] = useControllableState(\n    {\n      value: props.lastLoadTime,\n    },\n    {\n      defaultValue: new Date(),\n    },\n  );\n\n  // display loading icon for at least \"some ms\" to avoid flickering\n  const [displayLoading, setDisplayLoading] = useState(false);\n  useEffect(() => {\n    if (loading) {\n      const startTime = Date.now();\n      setDisplayLoading(true);\n\n      return () => {\n        const elapsedTime = Date.now() - startTime;\n        const remainingTime = Math.max(700 - elapsedTime, 0);\n\n        setTimeout(() => {\n          setDisplayLoading(false);\n        }, remainingTime);\n      };\n    }\n  }, [loading]);\n\n  const loadTimeMessage = useIntervalValue(\n    () => {\n      if (lastLoadTime) {\n        return `${t('general.LastUpdated')}: ${dayjs(lastLoadTime).fromNow()}`;\n      }\n      return '';\n    },\n    showLastLoadTime ? 5_000 : null,\n    lastLoadTime.toISOString(),\n  );\n\n  // remember when loading is done to display when the last fetch was done\n  useLayoutEffect(() => {\n    if (!loading) {\n      setLastLoadTime(new Date());\n    }\n  }, [loading, setLastLoadTime]);\n\n  useInterval(\n    () => {\n      onChange(new Date().toISOString());\n    },\n    // only start auto-updating after the previous loading is false(done).\n    loading ? null : autoUpdateDelay,\n  );\n\n  return hidden ? null : (\n    <Tooltip\n      title={showLastLoadTime ? loadTimeMessage : undefined}\n      placement=\"topLeft\"\n    >\n      <Button\n        loading={displayLoading}\n        size={size}\n        icon={<ReloadOutlined />}\n        onClick={() => {\n          onChange(new Date().toISOString());\n        }}\n      />\n    </Tooltip>\n  );\n};\n\nexport default BAIFetchKeyButton;\n","import { convertBinarySizeUnit } from '../../helper';\nimport { useResourceSlotsDetails } from '../../hooks/backendai';\nimport { SessionSlotCellFragment$key } from './__generated__/SessionSlotCellFragment.graphql';\nimport { Divider, Typography } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { Fragment } from 'react';\nimport { useFragment } from 'react-relay';\n\ninterface OccupiedSlotViewProps {\n  sessionFrgmt: SessionSlotCellFragment$key;\n  type: 'cpu' | 'mem' | 'accelerator';\n  mode?: 'occupied' | 'requested';\n}\nconst SessionSlotCell: React.FC<OccupiedSlotViewProps> = ({\n  type,\n  sessionFrgmt,\n  mode = 'requested',\n}) => {\n  const { deviceMetadata } = useResourceSlotsDetails();\n  const session = useFragment(\n    graphql`\n      fragment SessionSlotCellFragment on ComputeSessionNode {\n        id\n        occupied_slots\n        requested_slots\n      }\n    `,\n    sessionFrgmt,\n  );\n\n  const slots = JSON.parse(\n    (mode === 'occupied' ? session.occupied_slots : session.requested_slots) ||\n      '{}',\n  );\n\n  if (type === 'cpu') {\n    return slots.cpu ?? '-';\n  } else if (type === 'mem') {\n    const mem = slots.mem ?? '-';\n    return mem === '-' ? mem : convertBinarySizeUnit(mem, 'G')?.number + ' GiB';\n  } else if (type === 'accelerator') {\n    const occupiedAccelerators = _.omit(slots, ['cpu', 'mem']);\n    return _.isEmpty(occupiedAccelerators)\n      ? '-'\n      : _.map(occupiedAccelerators, (value, key) => {\n          return (\n            <Fragment key={key}>\n              <Typography.Text>{value}</Typography.Text>\n              <Divider type=\"vertical\" />\n              <Typography.Text>\n                {deviceMetadata?.[key]?.human_readable_name}\n              </Typography.Text>\n            </Fragment>\n          );\n        });\n  }\n};\n\nexport default SessionSlotCell;\n","import { filterNonNullItems } from '../helper';\nimport BAILink from './BAILink';\nimport BAITable from './BAITable';\nimport SessionReservation from './ComputeSessionNodeItems/SessionReservation';\nimport SessionSlotCell from './ComputeSessionNodeItems/SessionSlotCell';\nimport SessionStatusTag from './ComputeSessionNodeItems/SessionStatusTag';\nimport Flex from './Flex';\nimport SessionUsageMonitor from './SessionUsageMonitor';\nimport {\n  SessionNodesFragment$data,\n  SessionNodesFragment$key,\n} from './__generated__/SessionNodesFragment.graphql';\nimport { TableProps, theme } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFragment } from 'react-relay';\n\nexport type SessionNodeInList = NonNullable<SessionNodesFragment$data[number]>;\ninterface SessionNodesProps\n  extends Omit<TableProps<SessionNodeInList>, 'dataSource' | 'columns'> {\n  sessionsFrgmt: SessionNodesFragment$key;\n  onClickSessionName?: (session: SessionNodeInList) => void;\n}\n\nconst SessionNodes: React.FC<SessionNodesProps> = ({\n  sessionsFrgmt,\n  onClickSessionName,\n  ...tableProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const sessions = useFragment(\n    graphql`\n      fragment SessionNodesFragment on ComputeSessionNode @relay(plural: true) {\n        id @required(action: NONE)\n        row_id @required(action: NONE)\n        name\n        status\n        ...SessionStatusTagFragment\n        ...SessionReservationFragment\n        ...SessionSlotCellFragment\n        ...SessionUsageMonitorFragment\n      }\n    `,\n    sessionsFrgmt,\n  );\n\n  const filteredSessions = filterNonNullItems(sessions);\n\n  return (\n    <>\n      <BAITable<(typeof filteredSessions)[0]>\n        resizable\n        neoStyle\n        // TODO: fix type\n        // @ts-ignore\n        rowKey={(record) => record.id as string}\n        size=\"small\"\n        dataSource={filteredSessions}\n        scroll={{ x: 'max-content' }}\n        columns={[\n          {\n            key: 'name',\n            title: t('session.SessionName'),\n            dataIndex: 'name',\n            render: (name: string, session) => {\n              return onClickSessionName ? (\n                <BAILink\n                  type=\"hover\"\n                  onClick={(e) => {\n                    onClickSessionName(session);\n                  }}\n                >\n                  {name}\n                </BAILink>\n              ) : (\n                name\n              );\n            },\n            sorter: true,\n          },\n          {\n            key: 'status',\n            title: t('session.Status'),\n            dataIndex: 'status',\n            render: (status: string, session) => {\n              return <SessionStatusTag sessionFrgmt={session} />;\n            },\n          },\n          {\n            key: 'utils',\n            title: t('session.Utilization'),\n            render: (__, session) => {\n              return (\n                <Flex\n                  style={{\n                    paddingLeft: token.paddingXS,\n                  }}\n                >\n                  <SessionUsageMonitor size=\"small\" sessionFrgmt={session} />\n                </Flex>\n              );\n            },\n          },\n          {\n            key: 'accelerator',\n            title: t('session.launcher.AIAccelerator'),\n            render: (__, session) => {\n              return (\n                <SessionSlotCell sessionFrgmt={session} type=\"accelerator\" />\n              );\n            },\n          },\n          {\n            key: 'cpu',\n            title: t('session.launcher.CPU'),\n            render: (__, session) => {\n              return <SessionSlotCell sessionFrgmt={session} type=\"cpu\" />;\n            },\n          },\n          {\n            key: 'mem',\n            title: t('session.launcher.Memory'),\n            render: (__, session) => {\n              return <SessionSlotCell sessionFrgmt={session} type=\"mem\" />;\n            },\n          },\n          {\n            key: 'elapsedTime',\n            title: t('session.ElapsedTime'),\n            render: (__, session) => {\n              return (\n                <SessionReservation\n                  mode=\"simple-elapsed\"\n                  sessionFrgmt={session}\n                />\n              );\n            },\n          },\n        ]}\n        {...tableProps}\n      />\n    </>\n  );\n};\n\nexport default SessionNodes;\n","import { atom, useAtomValue, useSetAtom } from 'jotai';\nimport { atomWithDefault } from 'jotai/utils';\nimport _ from 'lodash';\nimport { useCallback, useMemo } from 'react';\nimport {\n  useQueryParams,\n  QueryParamConfigMap,\n  DecodedValueMap,\n  UrlUpdateType,\n} from 'use-query-params';\n\n// Create a global atom to store query params\nconst queryParamsAtom = atom<Record<string, any>>({});\n\nexport function useDeferredQueryParams<QPCMap extends QueryParamConfigMap>(\n  paramConfigMap: QPCMap,\n) {\n  const [query, setQuery] = useQueryParams(paramConfigMap);\n\n  const selectiveQueryAtom = useMemo(\n    () =>\n      atomWithDefault((get) => {\n        const globalParams = get(queryParamsAtom);\n        const selectedParams = _.pick(\n          globalParams,\n          Object.keys(paramConfigMap),\n        );\n        if (_.isEmpty(selectedParams)) {\n          // If the global state is empty, return the query\n          return query;\n        }\n        // Use the value from the global state if it exists\n        return selectedParams as DecodedValueMap<QPCMap>;\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(paramConfigMap)],\n  );\n\n  let localQuery = useAtomValue(selectiveQueryAtom);\n  const setLocalQuery = useSetAtom(queryParamsAtom);\n\n  const setDeferredQuery = useCallback(\n    (\n      nextQuery:\n        | Partial<DecodedValueMap<QPCMap>>\n        | ((\n            prevQuery: DecodedValueMap<QPCMap>,\n          ) => Partial<DecodedValueMap<QPCMap>>),\n      updateType: UrlUpdateType,\n    ) => {\n      const newQuery =\n        typeof nextQuery === 'function' ? nextQuery(localQuery) : nextQuery;\n\n      // Update Jotai state\n      if (updateType === 'replaceIn' || updateType === 'pushIn') {\n        setLocalQuery({ ...localQuery, ...newQuery });\n      } else {\n        setLocalQuery(newQuery as DecodedValueMap<QPCMap>);\n      }\n      // Update URL params\n      setQuery(newQuery, updateType);\n    },\n    [localQuery, setQuery, setLocalQuery],\n  );\n\n  return [localQuery, setDeferredQuery] as const;\n}\n","import { Tabs, TabsProps } from 'antd';\nimport { createStyles } from 'antd-style';\nimport classNames from 'classnames';\nimport React from 'react';\n\nconst useStyles = createStyles(({ token, css }) => ({\n  baiTabs: css`\n    .ant-tabs-nav::before {\n      border-color: ${token.colorPrimary};\n    }\n    .ant-tabs-tab:not(.ant-tabs-tab-active) {\n      border-bottom-color: ${token.colorPrimary};\n    }\n    .ant-tabs-tab.ant-tabs-tab-active {\n      border-color: ${token.colorPrimary};\n    }\n  `,\n}));\n\ninterface BAITabsProps extends TabsProps {}\nconst BAITabs: React.FC<BAITabsProps> = ({ className, ...props }) => {\n  const { styles } = useStyles();\n  return (\n    <Tabs\n      className={classNames(styles.baiTabs, className)}\n      type=\"card\"\n      {...props}\n    />\n  );\n};\n\nexport default BAITabs;\n","import BAIFetchKeyButton from '../components/BAIFetchKeyButton';\nimport BAICard from '../components/BAICard';\nimport BAILink from '../components/BAILink';\nimport BAIPropertyFilter, {\n  mergeFilterValues,\n} from '../components/BAIPropertyFilter';\nimport TerminateSessionModal from '../components/ComputeSessionNodeItems/TerminateSessionModal';\nimport Flex from '../components/Flex';\nimport SessionNodes from '../components/SessionNodes';\nimport {\n  filterNonNullItems,\n  handleRowSelectionChange,\n  transformSorterToOrderString,\n} from '../helper';\nimport { useUpdatableState } from '../hooks';\nimport { useBAIPaginationOptionState } from '../hooks/reactPaginationQueryOptions';\nimport { useCurrentProjectValue } from '../hooks/useCurrentProject';\nimport { useDeferredQueryParams } from '../hooks/useDeferredQueryParams';\nimport {\n  ComputeSessionListPageQuery,\n  ComputeSessionListPageQuery$data,\n  ComputeSessionListPageQuery$variables,\n} from './__generated__/ComputeSessionListPageQuery.graphql';\nimport { Badge, Button, theme, Tooltip, Typography } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { PowerOffIcon } from 'lucide-react';\nimport { useDeferredValue, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\nimport { StringParam, useQueryParam, withDefault } from 'use-query-params';\nimport BAITabs from '../components/BAITabs';\nimport BAIRadioGroup from '../components/BAIRadioGroup';\n\ntype TypeFilterType = 'all' | 'interactive' | 'batch' | 'inference' | 'system';\ntype SessionNode = NonNullableNodeOnEdges<\n  ComputeSessionListPageQuery$data['compute_session_nodes']\n>;\nconst ComputeSessionListPage = () => {\n  const currentProject = useCurrentProjectValue();\n\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [selectedSessionList, setSelectedSessionList] = useState<\n    Array<SessionNode>\n  >([]);\n  const [isOpenTerminateModal, setOpenTerminateModal] = useState(false);\n\n  const {\n    baiPaginationOption,\n    tablePaginationOption,\n    setTablePaginationOption,\n  } = useBAIPaginationOptionState({\n    current: 1,\n    pageSize: 10,\n  });\n\n  const [queryParams, setQuery] = useDeferredQueryParams({\n    order: StringParam,\n    filter: StringParam,\n    type: withDefault(StringParam, 'all'),\n    statusCategory: withDefault(StringParam, 'running'),\n  });\n\n  const [, setSessionDetailId] = useQueryParam('sessionDetail', StringParam);\n  const queryMapRef = useRef({\n    [queryParams.type]: queryParams,\n  });\n  //\n  queryMapRef.current[queryParams.type] = queryParams;\n\n  const typeFilter =\n    queryParams.type === 'all' || queryParams.type === undefined\n      ? undefined\n      : `type == \"${queryParams.type}\"`;\n\n  const statusFilter =\n    queryParams.statusCategory === 'running' ||\n    queryParams.statusCategory === undefined\n      ? 'status != \"TERMINATED\" & status != \"CANCELLED\"'\n      : 'status == \"TERMINATED\" | status == \"CANCELLED\"';\n\n  const isNotRunningCategory = (status?: string | null) => {\n    return status === 'TERMINATED' || status === 'CANCELLED';\n  };\n\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n\n  const queryVariables: ComputeSessionListPageQuery$variables = useMemo(\n    () => ({\n      projectId: currentProject.id,\n      offset: baiPaginationOption.offset,\n      first: baiPaginationOption.first,\n      filter: mergeFilterValues([statusFilter, queryParams.filter, typeFilter]),\n      order: queryParams.order,\n    }),\n    [\n      currentProject.id,\n      baiPaginationOption.offset,\n      baiPaginationOption.first,\n      statusFilter,\n      queryParams.filter,\n      typeFilter,\n      queryParams.order,\n    ],\n  );\n\n  const deferredQueryVariables = useDeferredValue(queryVariables);\n  const deferredFetchKey = useDeferredValue(fetchKey);\n\n  const { compute_session_nodes, ...sessionCounts } =\n    useLazyLoadQuery<ComputeSessionListPageQuery>(\n      graphql`\n        query ComputeSessionListPageQuery(\n          $projectId: UUID!\n          $first: Int = 20\n          $offset: Int = 0\n          $filter: String\n          $order: String\n        ) {\n          compute_session_nodes(\n            project_id: $projectId\n            first: $first\n            offset: $offset\n            filter: $filter\n            order: $order\n          ) {\n            edges @required(action: THROW) {\n              node @required(action: THROW) {\n                id @required(action: THROW)\n                ...SessionNodesFragment\n                ...TerminateSessionModalFragment\n              }\n            }\n            count\n          }\n          all: compute_session_nodes(\n            project_id: $projectId\n            first: 0\n            offset: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\"\"\n          ) {\n            count\n          }\n          interactive: compute_session_nodes(\n            project_id: $projectId\n            first: 0\n            offset: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n          ) {\n            count\n          }\n          inference: compute_session_nodes(\n            project_id: $projectId\n            first: 0\n            offset: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n          ) {\n            count\n          }\n          batch: compute_session_nodes(\n            project_id: $projectId\n            first: 0\n            offset: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n          ) {\n            count\n          }\n          system: compute_session_nodes(\n            project_id: $projectId\n            first: 0\n            offset: 0\n            filter: \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n          ) {\n            count\n          }\n        }\n      `,\n      deferredQueryVariables,\n      {\n        fetchPolicy: 'network-only',\n        fetchKey: deferredFetchKey,\n      },\n    );\n\n  return (\n    <>\n      {/* TODO: add legacy opener */}\n      {/* <SessionDetailAndContainerLogOpenerForLegacy /> */}\n      <BAICard\n        bordered={false}\n        title={t('webui.menu.Sessions')}\n        extra={\n          <Flex gap={'xs'}>\n            <BAIFetchKeyButton\n              loading={\n                deferredQueryVariables !== queryVariables ||\n                deferredFetchKey !== fetchKey\n              }\n              autoUpdateDelay={15_000}\n              // showLastLoadTime\n              value={fetchKey}\n              onChange={(newFetchKey) => {\n                updateFetchKey(newFetchKey);\n              }}\n            />\n            <BAILink to={'/session/start'}>\n              <Button type=\"primary\">{t('session.launcher.Start')}</Button>\n            </BAILink>\n          </Flex>\n        }\n        styles={{\n          header: {\n            borderBottom: 'none',\n          },\n          body: {\n            paddingTop: 0,\n          },\n        }}\n      >\n        {/* {mergeFilterValues([statusFilter, queryParams.filter, typeFilter])} */}\n        <BAITabs\n          activeKey={queryParams.type}\n          onChange={(key) => {\n            const storedQuery = queryMapRef.current[key] || {\n              statusCategory: 'running',\n            };\n            setQuery(\n              { ...storedQuery, type: key as TypeFilterType },\n              'replace',\n            );\n            setTablePaginationOption({ current: 1 });\n            setSelectedSessionList([]);\n          }}\n          items={_.map(\n            {\n              all: t('general.All'),\n              interactive: t('session.Interactive'),\n              batch: t('session.Batch'),\n              inference: t('session.Inference'),\n              system: t('session.System'),\n            },\n            (label, key) => ({\n              key,\n              label: (\n                <Flex justify=\"center\" gap={10}>\n                  {label}\n                  {\n                    // display badge only if count is greater than 0\n                    // @ts-ignore\n                    (sessionCounts[key]?.count || 0) > 0 && (\n                      <Badge\n                        // @ts-ignore\n                        count={sessionCounts[key].count}\n                        color={\n                          queryParams.type === key\n                            ? token.colorPrimary\n                            : token.colorTextDisabled\n                        }\n                        size=\"small\"\n                        showZero\n                        style={{\n                          paddingRight: token.paddingXS,\n                          paddingLeft: token.paddingXS,\n                          fontSize: 10,\n                        }}\n                      />\n                    )\n                  }\n                  {/*  */}\n                </Flex>\n              ),\n            }),\n          )}\n        />\n        <Flex direction=\"column\" align=\"stretch\" gap={'sm'}>\n          <Flex justify=\"between\" wrap=\"wrap\" gap={'sm'}>\n            <Flex\n              gap={'sm'}\n              align=\"start\"\n              style={{\n                flexShrink: 1,\n              }}\n              wrap=\"wrap\"\n            >\n              <BAIRadioGroup\n                optionType=\"button\"\n                value={queryParams.statusCategory}\n                onChange={(e) => {\n                  setQuery({ statusCategory: e.target.value }, 'replaceIn');\n                  setTablePaginationOption({ current: 1 });\n                  setSelectedSessionList([]);\n                }}\n                options={[\n                  {\n                    label: 'Running',\n                    value: 'running',\n                  },\n                  {\n                    label: 'Finished',\n                    value: 'finished',\n                  },\n                ]}\n              />\n              <BAIPropertyFilter\n                filterProperties={[\n                  {\n                    key: 'name',\n                    propertyLabel: t('session.SessionName'),\n                    type: 'string',\n                  },\n                ]}\n                value={queryParams.filter || undefined}\n                onChange={(value) => {\n                  setQuery({ filter: value }, 'replaceIn');\n                  setTablePaginationOption({ current: 1 });\n                  setSelectedSessionList([]);\n                }}\n              />\n            </Flex>\n            <Flex gap={'sm'}>\n              {selectedSessionList.length > 0 && (\n                <>\n                  {t('general.NSelected', {\n                    count: selectedSessionList.length,\n                  })}\n                  <Tooltip\n                    title={t('session.TerminateSession')}\n                    placement=\"topLeft\"\n                  >\n                    <Button\n                      icon={<PowerOffIcon color={token.colorError} />}\n                      onClick={() => {\n                        setOpenTerminateModal(true);\n                      }}\n                    />\n                  </Tooltip>\n                </>\n              )}\n            </Flex>\n          </Flex>\n          <SessionNodes\n            onClickSessionName={(session) => {\n              setSessionDetailId(session.row_id);\n            }}\n            loading={deferredQueryVariables !== queryVariables}\n            rowSelection={{\n              type: 'checkbox',\n              // Preserve selected rows between pages, but clear when filter changes\n              preserveSelectedRowKeys: true,\n              getCheckboxProps(record) {\n                return {\n                  disabled: isNotRunningCategory(record.status),\n                };\n              },\n              onChange: (selectedRowKeys) => {\n                // Using selectedRowKeys to retrieve selected rows since selectedRows lack nested fragment types\n                handleRowSelectionChange(\n                  selectedRowKeys,\n                  filterNonNullItems(\n                    compute_session_nodes?.edges.map((e) => e?.node),\n                  ),\n                  setSelectedSessionList,\n                );\n              },\n              selectedRowKeys: _.map(selectedSessionList, (i) => i.id),\n            }}\n            sessionsFrgmt={filterNonNullItems(\n              compute_session_nodes?.edges.map((e) => e?.node),\n            )}\n            pagination={{\n              pageSize: tablePaginationOption.pageSize,\n              current: tablePaginationOption.current,\n              total: compute_session_nodes?.count ?? 0,\n              showTotal: (total) => (\n                <Typography.Text type=\"secondary\">\n                  {t('general.TotalItems', { total: total })}\n                </Typography.Text>\n              ),\n            }}\n            onChange={({ current, pageSize }, filters, sorter) => {\n              if (_.isNumber(current) && _.isNumber(pageSize)) {\n                setTablePaginationOption({ current, pageSize });\n              }\n              setQuery(\n                { order: transformSorterToOrderString(sorter) },\n                'replaceIn',\n              );\n            }}\n          />\n        </Flex>\n      </BAICard>\n      <TerminateSessionModal\n        open={isOpenTerminateModal}\n        sessionFrgmts={selectedSessionList}\n        onRequestClose={(success) => {\n          setOpenTerminateModal(false);\n          if (success) {\n            setSelectedSessionList([]);\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport default ComputeSessionListPage;\n","/**\n * @generated SignedSource<<220ea67141452baa842c1da5afdede49>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type ComputeSessionListPageQuery$variables = {\n  filter?: string | null | undefined;\n  first?: number | null | undefined;\n  offset?: number | null | undefined;\n  order?: string | null | undefined;\n  projectId: string;\n};\nexport type ComputeSessionListPageQuery$data = {\n  readonly all: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly batch: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly compute_session_nodes: {\n    readonly count: number | null | undefined;\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly id: string;\n        readonly \" $fragmentSpreads\": FragmentRefs<\"SessionNodesFragment\" | \"TerminateSessionModalFragment\">;\n      };\n    } | null | undefined>;\n  } | null | undefined;\n  readonly inference: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly interactive: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n  readonly system: {\n    readonly count: number | null | undefined;\n  } | null | undefined;\n};\nexport type ComputeSessionListPageQuery = {\n  response: ComputeSessionListPageQuery$data;\n  variables: ComputeSessionListPageQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"filter\"\n},\nv1 = {\n  \"defaultValue\": 20,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"first\"\n},\nv2 = {\n  \"defaultValue\": 0,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"offset\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"order\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"projectId\"\n},\nv5 = {\n  \"kind\": \"Variable\",\n  \"name\": \"project_id\",\n  \"variableName\": \"projectId\"\n},\nv6 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"filter\",\n    \"variableName\": \"filter\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"first\",\n    \"variableName\": \"first\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"offset\",\n    \"variableName\": \"offset\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"order\",\n    \"variableName\": \"order\"\n  },\n  (v5/*: any*/)\n],\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"count\",\n  \"storageKey\": null\n},\nv9 = {\n  \"kind\": \"Literal\",\n  \"name\": \"first\",\n  \"value\": 0\n},\nv10 = {\n  \"kind\": \"Literal\",\n  \"name\": \"offset\",\n  \"value\": 0\n},\nv11 = [\n  (v8/*: any*/)\n],\nv12 = {\n  \"alias\": \"all\",\n  \"args\": [\n    {\n      \"kind\": \"Literal\",\n      \"name\": \"filter\",\n      \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\"\"\n    },\n    (v9/*: any*/),\n    (v10/*: any*/),\n    (v5/*: any*/)\n  ],\n  \"concreteType\": \"ComputeSessionConnection\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"compute_session_nodes\",\n  \"plural\": false,\n  \"selections\": (v11/*: any*/),\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": \"interactive\",\n  \"args\": [\n    {\n      \"kind\": \"Literal\",\n      \"name\": \"filter\",\n      \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"interactive\\\"\"\n    },\n    (v9/*: any*/),\n    (v10/*: any*/),\n    (v5/*: any*/)\n  ],\n  \"concreteType\": \"ComputeSessionConnection\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"compute_session_nodes\",\n  \"plural\": false,\n  \"selections\": (v11/*: any*/),\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": \"inference\",\n  \"args\": [\n    {\n      \"kind\": \"Literal\",\n      \"name\": \"filter\",\n      \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"inference\\\"\"\n    },\n    (v9/*: any*/),\n    (v10/*: any*/),\n    (v5/*: any*/)\n  ],\n  \"concreteType\": \"ComputeSessionConnection\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"compute_session_nodes\",\n  \"plural\": false,\n  \"selections\": (v11/*: any*/),\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": \"batch\",\n  \"args\": [\n    {\n      \"kind\": \"Literal\",\n      \"name\": \"filter\",\n      \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"batch\\\"\"\n    },\n    (v9/*: any*/),\n    (v10/*: any*/),\n    (v5/*: any*/)\n  ],\n  \"concreteType\": \"ComputeSessionConnection\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"compute_session_nodes\",\n  \"plural\": false,\n  \"selections\": (v11/*: any*/),\n  \"storageKey\": null\n},\nv16 = {\n  \"alias\": \"system\",\n  \"args\": [\n    {\n      \"kind\": \"Literal\",\n      \"name\": \"filter\",\n      \"value\": \"status != \\\"TERMINATED\\\" & status != \\\"CANCELLED\\\" & type == \\\"system\\\"\"\n    },\n    (v9/*: any*/),\n    (v10/*: any*/),\n    (v5/*: any*/)\n  ],\n  \"concreteType\": \"ComputeSessionConnection\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"compute_session_nodes\",\n  \"plural\": false,\n  \"selections\": (v11/*: any*/),\n  \"storageKey\": null\n},\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"occupied_slots\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ComputeSessionListPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v6/*: any*/),\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"RequiredField\",\n            \"field\": {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"ComputeSessionEdge\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"edges\",\n              \"plural\": true,\n              \"selections\": [\n                {\n                  \"kind\": \"RequiredField\",\n                  \"field\": {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"ComputeSessionNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"kind\": \"RequiredField\",\n                        \"field\": (v7/*: any*/),\n                        \"action\": \"THROW\",\n                        \"path\": \"compute_session_nodes.edges.node.id\"\n                      },\n                      {\n                        \"args\": null,\n                        \"kind\": \"FragmentSpread\",\n                        \"name\": \"SessionNodesFragment\"\n                      },\n                      {\n                        \"args\": null,\n                        \"kind\": \"FragmentSpread\",\n                        \"name\": \"TerminateSessionModalFragment\"\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  \"action\": \"THROW\",\n                  \"path\": \"compute_session_nodes.edges.node\"\n                }\n              ],\n              \"storageKey\": null\n            },\n            \"action\": \"THROW\",\n            \"path\": \"compute_session_nodes.edges\"\n          },\n          (v8/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      (v12/*: any*/),\n      (v13/*: any*/),\n      (v14/*: any*/),\n      (v15/*: any*/),\n      (v16/*: any*/)\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v4/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v0/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"ComputeSessionListPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v6/*: any*/),\n        \"concreteType\": \"ComputeSessionConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"compute_session_nodes\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"ComputeSessionEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"ComputeSessionNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v7/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"row_id\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"name\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"status_info\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"created_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"starts_at\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"terminated_at\",\n                    \"storageKey\": null\n                  },\n                  (v17/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"requested_slots\",\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"KernelConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"kernel_nodes\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"KernelEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"KernelNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"live_stat\",\n                                \"storageKey\": null\n                              },\n                              (v17/*: any*/),\n                              (v7/*: any*/),\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"container_id\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"agent_id\",\n                                \"storageKey\": null\n                              }\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"scaling_group\",\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          (v8/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      (v12/*: any*/),\n      (v13/*: any*/),\n      (v14/*: any*/),\n      (v15/*: any*/),\n      (v16/*: any*/)\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"094c7fdfbb9ad06ec4bd1f9f44df97a7\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ComputeSessionListPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ComputeSessionListPageQuery(\\n  $projectId: UUID!\\n  $first: Int = 20\\n  $offset: Int = 0\\n  $filter: String\\n  $order: String\\n) {\\n  compute_session_nodes(project_id: $projectId, first: $first, offset: $offset, filter: $filter, order: $order) {\\n    edges {\\n      node {\\n        id\\n        ...SessionNodesFragment\\n        ...TerminateSessionModalFragment\\n      }\\n    }\\n    count\\n  }\\n  all: compute_session_nodes(project_id: $projectId, first: 0, offset: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\"\\\") {\\n    count\\n  }\\n  interactive: compute_session_nodes(project_id: $projectId, first: 0, offset: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"interactive\\\\\\\"\\\") {\\n    count\\n  }\\n  inference: compute_session_nodes(project_id: $projectId, first: 0, offset: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"inference\\\\\\\"\\\") {\\n    count\\n  }\\n  batch: compute_session_nodes(project_id: $projectId, first: 0, offset: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"batch\\\\\\\"\\\") {\\n    count\\n  }\\n  system: compute_session_nodes(project_id: $projectId, first: 0, offset: 0, filter: \\\"status != \\\\\\\"TERMINATED\\\\\\\" & status != \\\\\\\"CANCELLED\\\\\\\" & type == \\\\\\\"system\\\\\\\"\\\") {\\n    count\\n  }\\n}\\n\\nfragment SessionNodesFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  status\\n  ...SessionStatusTagFragment\\n  ...SessionReservationFragment\\n  ...SessionSlotCellFragment\\n  ...SessionUsageMonitorFragment\\n}\\n\\nfragment SessionReservationFragment on ComputeSessionNode {\\n  id\\n  created_at\\n  starts_at\\n  terminated_at\\n}\\n\\nfragment SessionSlotCellFragment on ComputeSessionNode {\\n  id\\n  occupied_slots\\n  requested_slots\\n}\\n\\nfragment SessionStatusTagFragment on ComputeSessionNode {\\n  id\\n  name\\n  status\\n  status_info\\n}\\n\\nfragment SessionUsageMonitorFragment on ComputeSessionNode {\\n  kernel_nodes {\\n    edges {\\n      node {\\n        live_stat\\n        occupied_slots\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment TerminateSessionModalFragment on ComputeSessionNode {\\n  id\\n  row_id\\n  name\\n  scaling_group\\n  kernel_nodes {\\n    edges {\\n      node {\\n        container_id\\n        agent_id\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"cf9edaa921f22fd8f24e1526d09daa3f\";\n\nexport default node;\n"],"names":["_ref","status","extraButtonTitle","onClickExtraButton","extra","style","styles","showDivider","cardProps","token","theme","useToken","_extra","_jsx","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","undefined","onClick","children","Card","className","_","borderColor","colorSuccess","header","borderBottom","body","paddingTop","marginXS","useStyles","createStyles","css","hover","colorLink","colorLinkHover","_ref2","to","linkProps","Link","Typography","DEFAULT_OPERATOR_OF_TYPES","string","boolean","DEFAULT_OPTIONS_OF_TYPES","label","value","DEFAULT_STRICT_SELECTION_OF_TYPES","mergeFilterValues","filterStrings","operator","arguments","length","mergedFilter","filterEmptyItem","str","_selectedProperty$rul2","filterProperties","propValue","onChange","propOnChange","defaultValue","loading","containerProps","search","setSearch","useState","autoCompleteRef","useRef","isOpenAutoComplete","setIsOpenAutoComplete","setValue","useControllableValue","filtersFromValue","useMemo","split","map","filter","trim","index","_$find","_$find2","property","rest","valueParts","join","replace","parseFilterValue","key","propertyLabel","f","t","useTranslation","options","filterProperty","selectedProperty","setSelectedProperty","isValid","setIsValid","isFocused","setIsFocused","updateFiltersValue","filters","newFilterString","item","valueStringInResult","combineFilters","onSearch","_selectedProperty$rul","_selectedProperty$opt","_selectedProperty$opt2","strictSelection","o","rule","validate","defaultOperator","filterValue","find","_jsxs","Flex","direction","gap","align","Space","Compact","Select","popupMatchSelectWidth","onSelect","_autoCompleteRef$curr","current","focus","showSearch","optionFilterProp","Tooltip","title","message","open","color","AutoComplete","ref","onDropdownVisibleChange","minWidth","option","_option$label","toString","includes","placeholder","onBlur","onFocus","Input","Search","allowClear","wrap","alignSelf","Tag","closable","onClose","newFilters","remove","margin","size","CloseCircleOutlined","colorTextSecondary","resetList","useStyle","baiRadioGroup","parseInt","colorPrimary","slice","colorBorder","props","colorPrimaryWithAlpha","colorPrimaryWithLessAlpha","ConfigProvider","components","Radio","buttonSolidCheckedBg","buttonSolidCheckedColor","buttonSolidCheckedHoverBg","classNames","optionType","buttonStyle","node","objectValues","values","highlightKeyword","React","objValue","idx","marginRight","TextHighlighter","keyword","useBAIPaginationOptionState","initialOptions","setOptions","baiPaginationOption","limit","pageSize","first","offset","tablePaginationOption","setTablePaginationOption","pagination","showLastLoadTime","autoUpdateDelay","hidden","lastLoadTime","setLastLoadTime","useControllableState","Date","displayLoading","setDisplayLoading","useEffect","startTime","now","elapsedTime","remainingTime","Math","max","setTimeout","loadTimeMessage","useIntervalValue","dayjs","fromNow","toISOString","useLayoutEffect","useInterval","placement","ReloadOutlined","sessionFrgmt","mode","deviceMetadata","useResourceSlotsDetails","session","useFragment","_SessionSlotCellFragment","require","slots","JSON","parse","occupied_slots","requested_slots","_slots$cpu","cpu","_slots$mem","_convertBinarySizeUni","mem","convertBinarySizeUnit","number","occupiedAccelerators","_deviceMetadata$key","Fragment","Text","Divider","human_readable_name","sessionsFrgmt","onClickSessionName","tableProps","sessions","_SessionNodesFragment","filteredSessions","filterNonNullItems","_Fragment","BAITable","resizable","neoStyle","rowKey","record","id","dataSource","scroll","x","columns","dataIndex","render","name","BAILink","e","sorter","SessionStatusTag","__","paddingLeft","paddingXS","SessionUsageMonitor","SessionSlotCell","SessionReservation","queryParamsAtom","atom","baiTabs","Tabs","ComputeSessionListPage","_compute_session_node","currentProject","useCurrentProjectValue","selectedSessionList","setSelectedSessionList","isOpenTerminateModal","setOpenTerminateModal","queryParams","setQuery","paramConfigMap","query","useQueryParams","selectiveQueryAtom","atomWithDefault","get","globalParams","selectedParams","Object","keys","stringify","localQuery","useAtomValue","setLocalQuery","useSetAtom","setDeferredQuery","useCallback","nextQuery","updateType","newQuery","useDeferredQueryParams","order","StringParam","withDefault","statusCategory","setSessionDetailId","useQueryParam","queryMapRef","typeFilter","statusFilter","fetchKey","updateFetchKey","useUpdatableState","queryVariables","projectId","deferredQueryVariables","useDeferredValue","deferredFetchKey","compute_session_nodes","sessionCounts","useLazyLoadQuery","_ComputeSessionListPageQuery","fetchPolicy","BAICard","bordered","BAIFetchKeyButton","newFetchKey","BAITabs","activeKey","storedQuery","items","all","interactive","batch","inference","system","_sessionCounts$key","justify","count","Badge","colorTextDisabled","showZero","paddingRight","fontSize","flexShrink","BAIRadioGroup","target","BAIPropertyFilter","PowerOffIcon","SessionNodes","row_id","rowSelection","preserveSelectedRowKeys","getCheckboxProps","disabled","selectedRowKeys","handleRowSelectionChange","edges","i","total","showTotal","transformSorterToOrderString","TerminateSessionModal","sessionFrgmts","onRequestClose","success","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","hash"],"sourceRoot":""}