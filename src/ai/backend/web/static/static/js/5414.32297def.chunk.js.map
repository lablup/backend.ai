{"version":3,"file":"static/js/5414.32297def.chunk.js","mappings":"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","sources":["hooks/reactPaginationQueryOptions.tsx","../node_modules/.pnpm/ahooks@3.8.1_react@18.3.1/node_modules/ahooks/es/useDynamicList/index.js"],"sourcesContent":["// import { offset_to_cursor } from \"../helper\";\nimport { LazyLoadQueryOptions } from '../helper/types';\nimport { SorterResult } from 'antd/lib/table/interface';\nimport _ from 'lodash';\nimport { useState } from 'react';\nimport {\n  fetchQuery,\n  GraphQLTaggedNode,\n  useRelayEnvironment,\n} from 'react-relay';\nimport {\n  ArrayParam,\n  NumberParam,\n  ObjectParam,\n  StringParam,\n  useQueryParams,\n} from 'use-query-params';\n\nexport type SorterInterface = Pick<SorterResult<any>, 'field' | 'order'>;\n\nexport const antdSorterResultToOrder = (\n  sorter: SorterInterface | SorterInterface[],\n) => {\n  const sorterArray = _.castArray(sorter).filter((s) => s.field);\n\n  return _.filter(\n    _.map(sorterArray, (s) =>\n      _.isNull(s.order)\n        ? undefined\n        : `${_.snakeCase(s.field as string).toUpperCase()}_${\n            s.order === 'ascend' ? 'ASC' : 'DESC'\n          }`,\n    ),\n  );\n};\n\nexport const orderToAntdSorterResult = (order: string[]) => {\n  return _.map(order, (o) => {\n    const names = o.split('_');\n    const orderKey = names.pop();\n    const field = _.camelCase(names.join('_'));\n    return {\n      field,\n      order: (orderKey === 'ASC' ? 'ascend' : 'descend') as\n        | 'ascend'\n        | 'descend'\n        | null,\n    };\n  });\n};\n\nexport const getSortOrderByName = (order: string[], name: string) => {\n  const sorterResult = orderToAntdSorterResult(order);\n  const sorter = _.find(sorterResult, (s) => s.field === name);\n  return sorter?.order;\n};\n\nexport const useRelayPaginationQueryOptions = <\n  // Q, N,\n  O,\n  F,\n>({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      first: pageSize,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n      order: order,\n      filter: filter,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n    // sorter?: SorterResult<N>[];\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order: O[];\n    filter?: F;\n  }) => any;\n}) => {\n  const [isPending, setIsPending] = useState(false);\n\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    order: ArrayParam,\n    filter: ObjectParam,\n  });\n\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  //TODO: not use as\n  const order = (params.order || defaultVariables.order) as O[];\n  const filter = (params.filter || defaultVariables.filter) as F;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    // sorter: SorterResult<N>[],\n    newOrder: O[] = defaultVariables.order,\n    newFilter: F | undefined = defaultVariables.filter,\n    options?: {\n      withoutPendingStatus: boolean;\n    },\n  ) => {\n    if (options?.withoutPendingStatus !== true) {\n      setIsPending(true);\n    }\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setIsPending(false);\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          // eslint-disable-next-line\n          order: newOrder as [], // TODO: not use as []\n          // eslint-disable-next-line\n          filter: newFilter as {}, // TODO: not use as {}\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      isPending,\n      variables,\n      filter,\n      //   after: page > 1 ? offset_to_cursor((page - 1) * pageSize - 1) : undefined,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\nexport const useBAIPaginationQueryOptions = ({\n  query,\n  defaultVariables,\n  getVariables = ({ page, pageSize, order, filter }) => {\n    return {\n      limit: pageSize,\n      offset: page > 1 ? (page - 1) * pageSize : 0,\n      filter: filter,\n      order: order,\n    };\n  },\n}: {\n  query: GraphQLTaggedNode;\n  defaultVariables: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  };\n  getVariables?: (params: {\n    page: number;\n    pageSize: number;\n    order?: string;\n    filter?: string;\n  }) => any;\n}) => {\n  const [params, setParams] = useQueryParams({\n    page: NumberParam,\n    pageSize: NumberParam,\n    filter: StringParam,\n    order: StringParam,\n  });\n  const page = params.page || defaultVariables.page;\n  const pageSize = params.pageSize || defaultVariables.pageSize;\n  const order = params.order || defaultVariables.order;\n  const filter = params.filter || defaultVariables.filter;\n\n  const relayEnvironment = useRelayEnvironment();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] =\n    useState<LazyLoadQueryOptions>({\n      fetchKey: 0,\n      fetchPolicy: 'store-and-network',\n    });\n\n  const prevLocationRef = window.location.href;\n  const refresh = (\n    newPage: number = defaultVariables.page,\n    newPageSize: number = defaultVariables.pageSize,\n    newOrder: string | undefined = defaultVariables.order,\n    newFilter: string | undefined = defaultVariables.filter,\n  ) => {\n    fetchQuery<any>(\n      relayEnvironment,\n      query,\n      getVariables({\n        page: newPage,\n        pageSize: newPageSize,\n        order: newOrder,\n        filter: newFilter,\n      }),\n    ).subscribe({\n      complete: () => {\n        if (window.location.href !== prevLocationRef) return;\n        setParams({\n          page: newPage,\n          pageSize: newPageSize,\n          order: newOrder,\n          filter: newFilter,\n        });\n        setRefreshedQueryOptions((prev) => ({\n          ...prev,\n          fetchPolicy: 'store-only',\n          fetchKey: new Date().toISOString(),\n        }));\n      },\n    });\n  };\n\n  const variables = getVariables({\n    page,\n    pageSize,\n    order,\n    filter,\n  });\n\n  return [\n    {\n      refreshedQueryOptions,\n      page,\n      pageSize,\n      order,\n      variables,\n      filter,\n    },\n    {\n      refresh,\n    },\n  ] as const;\n};\n\ninterface BAIPaginationOption {\n  limit: number;\n  offset: number;\n  // filter?: string;\n  // order?: string;\n}\ninterface AntdBasicPaginationOption {\n  pageSize: number;\n  current: number;\n}\n\ninterface InitialPaginationOption\n  extends AntdBasicPaginationOption,\n    Omit<BAIPaginationOption, 'limit' | 'offset'> {}\nexport const useBAIPaginationOptionState = (\n  initialOptions: InitialPaginationOption,\n): {\n  baiPaginationOption: BAIPaginationOption;\n  tablePaginationOption: AntdBasicPaginationOption;\n  setTablePaginationOption: (pagination: AntdBasicPaginationOption) => void;\n} => {\n  const [options, setOptions] =\n    useState<AntdBasicPaginationOption>(initialOptions);\n  return {\n    baiPaginationOption: {\n      limit: options.pageSize,\n      offset:\n        options.current > 1 ? (options.current - 1) * options.pageSize : 0,\n    },\n    tablePaginationOption: {\n      pageSize: options.pageSize,\n      current: options.current,\n    },\n    setTablePaginationOption: (pagination) => {\n      if (!_.isEqual(pagination, options)) {\n        setOptions((current) => ({\n          ...current,\n          ...pagination,\n        }));\n      }\n    },\n  };\n};\n","import { __read, __spreadArray } from \"tslib\";\nimport { useCallback, useRef, useState } from 'react';\nimport isDev from '../utils/isDev';\nvar useDynamicList = function (initialList) {\n  if (initialList === void 0) {\n    initialList = [];\n  }\n  var counterRef = useRef(-1);\n  var keyList = useRef([]);\n  var setKey = useCallback(function (index) {\n    counterRef.current += 1;\n    keyList.current.splice(index, 0, counterRef.current);\n  }, []);\n  var _a = __read(useState(function () {\n      initialList.forEach(function (_, index) {\n        setKey(index);\n      });\n      return initialList;\n    }), 2),\n    list = _a[0],\n    setList = _a[1];\n  var resetList = useCallback(function (newList) {\n    keyList.current = [];\n    setList(function () {\n      newList.forEach(function (_, index) {\n        setKey(index);\n      });\n      return newList;\n    });\n  }, []);\n  var insert = useCallback(function (index, item) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n      temp.splice(index, 0, item);\n      setKey(index);\n      return temp;\n    });\n  }, []);\n  var getKey = useCallback(function (index) {\n    return keyList.current[index];\n  }, []);\n  var getIndex = useCallback(function (key) {\n    return keyList.current.findIndex(function (ele) {\n      return ele === key;\n    });\n  }, []);\n  var merge = useCallback(function (index, items) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n      items.forEach(function (_, i) {\n        setKey(index + i);\n      });\n      temp.splice.apply(temp, __spreadArray([index, 0], __read(items), false));\n      return temp;\n    });\n  }, []);\n  var replace = useCallback(function (index, item) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n      temp[index] = item;\n      return temp;\n    });\n  }, []);\n  var remove = useCallback(function (index) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n      temp.splice(index, 1);\n      // remove keys if necessary\n      try {\n        keyList.current.splice(index, 1);\n      } catch (e) {\n        console.error(e);\n      }\n      return temp;\n    });\n  }, []);\n  var batchRemove = useCallback(function (indexes) {\n    if (!Array.isArray(indexes)) {\n      if (isDev) {\n        console.error(\"`indexes` parameter of `batchRemove` function expected to be an array, but got \\\"\".concat(typeof indexes, \"\\\".\"));\n      }\n      return;\n    }\n    if (!indexes.length) {\n      return;\n    }\n    setList(function (prevList) {\n      var newKeyList = [];\n      var newList = prevList.filter(function (item, index) {\n        var shouldKeep = !indexes.includes(index);\n        if (shouldKeep) {\n          newKeyList.push(getKey(index));\n        }\n        return shouldKeep;\n      });\n      keyList.current = newKeyList;\n      return newList;\n    });\n  }, []);\n  var move = useCallback(function (oldIndex, newIndex) {\n    if (oldIndex === newIndex) {\n      return;\n    }\n    setList(function (l) {\n      var newList = __spreadArray([], __read(l), false);\n      var temp = newList.filter(function (_, index) {\n        return index !== oldIndex;\n      });\n      temp.splice(newIndex, 0, newList[oldIndex]);\n      // move keys if necessary\n      try {\n        var keyTemp = keyList.current.filter(function (_, index) {\n          return index !== oldIndex;\n        });\n        keyTemp.splice(newIndex, 0, keyList.current[oldIndex]);\n        keyList.current = keyTemp;\n      } catch (e) {\n        console.error(e);\n      }\n      return temp;\n    });\n  }, []);\n  var push = useCallback(function (item) {\n    setList(function (l) {\n      setKey(l.length);\n      return l.concat([item]);\n    });\n  }, []);\n  var pop = useCallback(function () {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(0, keyList.current.length - 1);\n    } catch (e) {\n      console.error(e);\n    }\n    setList(function (l) {\n      return l.slice(0, l.length - 1);\n    });\n  }, []);\n  var unshift = useCallback(function (item) {\n    setList(function (l) {\n      setKey(0);\n      return [item].concat(l);\n    });\n  }, []);\n  var shift = useCallback(function () {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(1, keyList.current.length);\n    } catch (e) {\n      console.error(e);\n    }\n    setList(function (l) {\n      return l.slice(1, l.length);\n    });\n  }, []);\n  var sortList = useCallback(function (result) {\n    return result.map(function (item, index) {\n      return {\n        key: index,\n        item: item\n      };\n    }) // add index into obj\n    .sort(function (a, b) {\n      return getIndex(a.key) - getIndex(b.key);\n    }) // sort based on the index of table\n    .filter(function (item) {\n      return !!item.item;\n    }) // remove undefined(s)\n    .map(function (item) {\n      return item.item;\n    });\n  },\n  // retrive the data\n  []);\n  return {\n    list: list,\n    insert: insert,\n    merge: merge,\n    replace: replace,\n    remove: remove,\n    batchRemove: batchRemove,\n    getKey: getKey,\n    getIndex: getIndex,\n    move: move,\n    push: push,\n    pop: pop,\n    unshift: unshift,\n    shift: shift,\n    sortList: sortList,\n    resetList: resetList\n  };\n};\nexport default useDynamicList;"],"names":["useBAIPaginationOptionState","initialOptions","options","setOptions","useState","baiPaginationOption","limit","pageSize","offset","current","tablePaginationOption","setTablePaginationOption","pagination","_","initialList","counterRef","useRef","keyList","setKey","useCallback","index","splice","_a","__read","forEach","list","setList","resetList","newList","insert","item","l","temp","__spreadArray","getKey","getIndex","key","findIndex","ele","merge","items","i","apply","replace","remove","e","console","error","batchRemove","indexes","Array","isArray","length","prevList","newKeyList","filter","shouldKeep","includes","push","isDev","concat","move","oldIndex","newIndex","keyTemp","pop","slice","unshift","shift","sortList","result","map","sort","a","b"],"sourceRoot":""}