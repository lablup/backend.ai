{"version":3,"file":"static/js/818.9b28dc99.chunk.js","mappings":"2XAqBMA,EAAsBC,EAAAA,cAA6C,MACnEC,EAAoBD,EAAAA,cAAgC,MAC7CE,EAAgB,WAAH,OAASF,EAAAA,WAAiBC,EAAmB,EAC1DE,EAAsB,WAAH,OAASH,EAAAA,WAAiBD,EAAqB,EAGzEK,EAAc,IAAIC,EAAAA,YAAY,CAClCC,eAAgB,CACdC,QAAS,CACPC,UAAU,EACVC,sBAAsB,EACtBC,OAAO,MASbC,EAAAA,GAAAA,IACOC,EAAAA,IACJC,IAAIC,EAAAA,GACJC,KAAK,CACJC,QAAS,CACPC,SAAU,gCAGZC,KAAe,OAAVC,iBAAU,IAAVA,YAA4B,QAAlBC,EAAVD,WAAYE,wBAAgB,IAAAD,OAAlB,EAAVA,EAA8BE,IAAI,sBAAuB,KAC9DC,YAAa,KACbC,cAAe,CACbC,aAAa,KAInB,IA6EA,EAjD0D,SAAHC,GAMhD,IALLC,EAAQD,EAARC,SACAC,EAAKF,EAALE,MACAC,EAAMH,EAANG,OACAC,EAAUJ,EAAVI,WACAC,EAAaL,EAAbK,cAEMC,GAAQC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAa,GAAE,IAC3CC,EApCyB,WACzB,IAAAC,GAAyBC,EAAAA,EAAAA,UAEvBlB,WAAWE,iBAAiBC,IAAI,qBACjCgB,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAHMI,EAAIF,EAAA,GAAEG,EAAQH,EAAA,GAIb3B,GAAS+B,EAAAA,EAAAA,MAAT/B,KAoBR,OAlBAgC,EAAAA,EAAAA,YAAU,WAERC,YAAW,kBAAMjC,EAAKkC,eAAeL,EAAK,GAAE,EAE9C,GAAG,KAEHG,EAAAA,EAAAA,YAAU,WACR,IAAMG,EAAU,SAACC,GAAc,IAADC,EAE5BP,EAASM,EAAEE,OAAOT,MAElB,IAAMA,GAAuB,QAARQ,EAAAD,EAAEE,cAAM,IAAAD,OAAA,EAARA,EAAUR,OAAQ,KACvC7B,EAAKkC,eAAeL,EACtB,EAEA,OADAU,OAAOC,iBAAiB,cAAeL,GAChC,kBAAMI,OAAOE,oBAAoB,cAAeN,EAAS,CAClE,GAAG,CAACnC,IAEG,CAAC6B,EACV,CAUiBa,GAARb,GAA4BD,EAAAA,EAAAA,GAAAJ,EAAA,GAAxB,GACLmB,GAAcC,EAAAA,EAAAA,KAEdC,GAAkBvB,EAAAA,EAAAA,UAAQ,WAC9B,MAAO,CACLL,MAAAA,EACAG,cAAAA,EAEJ,GAAG,CAACH,EAAOG,IACX,OACE0B,EAAAA,EAAAA,MAACzD,EAAAA,WAAgB,CAAA2B,SAAA,EACf8B,EAAAA,EAAAA,MAAA,SAAA9B,SAAA,CACGE,E,67BAGH6B,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAACC,OAAQxD,EAAYuB,UACvC+B,EAAAA,EAAAA,KAACzD,EAAkB4D,SAAQ,CAACjC,MAAOE,EAAWH,UAC5C+B,EAAAA,EAAAA,KAAC3D,EAAoB8D,SAAQ,CAACjC,MAAO4B,EAAgB7B,UACnD+B,EAAAA,EAAAA,KAACI,EAAAA,GACC,CACAC,kBAAmB,SAACC,GAClB,OAAe,OAAXA,QAAW,IAAXA,GAAAA,EAAaC,WACRD,EAAYC,WAEdnC,CACT,EAEAoC,OAAQ,OAAS1B,EAAO2B,EAAAA,EAAQC,EAAAA,EAChCC,MAAOf,EAAY3B,UAEnB+B,EAAAA,EAAAA,KAACY,EAAAA,GAAa,CAACC,UAAWzC,EAAYE,MAAOA,EAAML,SAChDA,cAQjB,C","sources":["components/DefaultProviders.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { StyleProvider, createCache } from \"@ant-design/cssinjs\";\nimport { ConfigProvider } from \"antd\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactWebComponentProps } from \"../helper/react-to-webcomponent\";\nimport i18n from \"i18next\";\nimport { useTranslation, initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\n\nimport en_US from \"antd/locale/en_US\";\nimport ko_KR from \"antd/locale/ko_KR\";\nimport { useCustomThemeConfig } from \"../helper/customThemeConfig\";\n\n// @ts-ignore\nimport rawFixAntCss from \"../fix_antd.css?raw\";\n\ninterface WebComponentContextType {\n  value?: ReactWebComponentProps[\"value\"];\n  dispatchEvent: ReactWebComponentProps[\"dispatchEvent\"];\n}\n\nconst WebComponentContext = React.createContext<WebComponentContextType>(null!);\nconst ShadowRootContext = React.createContext<ShadowRoot>(null!);\nexport const useShadowRoot = () => React.useContext(ShadowRootContext);\nexport const useWebComponentInfo = () => React.useContext(WebComponentContext);\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      suspense: true,\n      refetchOnWindowFocus: false,\n      retry: false,\n    },\n  },\n});\n\nexport interface DefaultProvidersProps extends ReactWebComponentProps {\n  children?: React.ReactNode;\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(Backend)\n  .init({\n    backend: {\n      loadPath: \"/resources/i18n/{{lng}}.json\",\n    },\n    //@ts-ignore\n    lng: globalThis?.backendaioptions?.get(\"current_language\") || \"en\",\n    fallbackLng: \"en\",\n    interpolation: {\n      escapeValue: false, // react already safes from xss => https://www.i18next.com/translation-function/interpolation#unescape\n    },\n  });\n\nconst useCurrentLanguage = () => {\n  const [lang, _setLang] = useState(\n    //@ts-ignore\n    globalThis.backendaioptions.get(\"current_language\")\n  );\n  const { i18n } = useTranslation();\n\n  useEffect(() => {\n    // TODO: remove this hack to initialize i18next\n    setTimeout(() => i18n.changeLanguage(lang), 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const handler = (e: Event) => {\n      //@ts-ignore\n      _setLang(e.detail.lang);\n      //@ts-ignore\n      const lang: string = e.detail?.lang || \"en\";\n      i18n.changeLanguage(lang);\n    };\n    window.addEventListener(\"langChanged\", handler);\n    return () => window.removeEventListener(\"langChanged\", handler);\n  }, [i18n]);\n\n  return [lang] as const;\n};\n\nconst DefaultProviders: React.FC<DefaultProvidersProps> = ({\n  children,\n  value,\n  styles,\n  shadowRoot,\n  dispatchEvent,\n}) => {\n  const cache = useMemo(() => createCache(), []);\n  const [lang] = useCurrentLanguage();\n  const themeConfig = useCustomThemeConfig();\n\n  const componentValues = useMemo(() => {\n    return {\n      value,\n      dispatchEvent,\n    };\n  }, [value, dispatchEvent]);\n  return (\n    <React.StrictMode>\n      <style>\n        {styles}\n        {rawFixAntCss}\n      </style>\n      <QueryClientProvider client={queryClient}>\n        <ShadowRootContext.Provider value={shadowRoot}>\n          <WebComponentContext.Provider value={componentValues}>\n            <ConfigProvider\n              // @ts-ignore\n              getPopupContainer={(triggerNode) => {\n                if (triggerNode?.parentNode) {\n                  return triggerNode.parentNode;\n                }\n                return shadowRoot;\n              }}\n              //TODO: apply other supported locales\n              locale={\"ko\" === lang ? ko_KR : en_US}\n              theme={themeConfig}\n            >\n              <StyleProvider container={shadowRoot} cache={cache}>\n                {children}\n              </StyleProvider>\n            </ConfigProvider>\n          </WebComponentContext.Provider>\n        </ShadowRootContext.Provider>\n      </QueryClientProvider>\n    </React.StrictMode>\n  );\n};\n\nexport default DefaultProviders;\n"],"names":["WebComponentContext","React","ShadowRootContext","useShadowRoot","useWebComponentInfo","queryClient","QueryClient","defaultOptions","queries","suspense","refetchOnWindowFocus","retry","i18n","initReactI18next","use","Backend","init","backend","loadPath","lng","globalThis","_globalThis$backendai","backendaioptions","get","fallbackLng","interpolation","escapeValue","_ref","children","value","styles","shadowRoot","dispatchEvent","cache","useMemo","createCache","_useCurrentLanguage","_useState","useState","_useState2","_slicedToArray","lang","_setLang","useTranslation","useEffect","setTimeout","changeLanguage","handler","e","_e$detail","detail","window","addEventListener","removeEventListener","useCurrentLanguage","themeConfig","useCustomThemeConfig","componentValues","_jsxs","_jsx","QueryClientProvider","client","Provider","ConfigProvider","getPopupContainer","triggerNode","parentNode","locale","ko_KR","en_US","theme","StyleProvider","container"],"sourceRoot":""}