{"version":3,"file":"static/js/1580.56dae688.chunk.js","mappings":"yMAQA,MAAMA,EAA4BC,EAAAA,GAAWC,OAAO,CAChDC,KAAM,OACNC,OAAqBA,EAAAA,EAAOC,UAAU,CAClCC,MAAO,CACUC,EAAAA,GAAeC,IAAI,CAC5BC,aAA0BC,EAAAA,EAAAA,IAAgB,CAAEC,OAAQ,mBACpDC,cAA2BF,EAAAA,EAAAA,IAAgB,CAAEC,OAAQ,4BACrDE,iBAAkBC,EAAAA,GAClBC,YAAaC,IACT,IAAIC,EAAQD,EAAQE,UAAWC,EAAS,SAASC,KAAKH,GAAQI,EAAS,uBAAuBD,KAAKH,GACnG,OAAOD,EAAQM,YAAcH,EAAS,EAAIE,EAAS,EAAI,GAAKL,EAAQO,IAAI,EAE5EC,OAAoBC,EAAAA,EAAAA,IAAgB,CAAEC,QAAS,MAC/CC,aAAcA,IAAM,KACpBC,WAAwBlB,EAAAA,EAAAA,IAAgB,CAAEC,OAAQ,SAEzCkB,EAAAA,GAAarB,IAAI,CAC1B,8HACuDsB,EAAAA,GACvDH,aAAaI,IAAe,CAAEC,KAAMD,EAAKC,KAAO,EAAGC,GAAIF,EAAKE,GAAK,SAI7EC,aAAc,CACVC,cAAe,CAAEC,KAAM,KAAMC,MAAO,CAAEC,KAAM,KAAMC,MAAO,OACzDC,cAAe,mCAMvB,SAASC,IACL,OAAO,IAAIC,EAAAA,GAAgB1C,EAC/B,C","sources":["../../node_modules/.pnpm/@codemirror+lang-java@6.0.2/node_modules/@codemirror/lang-java/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/java';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer Java\nparser](https://github.com/lezer-parser/java), extended with\nhighlighting and indentation information.\n*/\nconst javaLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"java\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch|finally)\\b/ }),\n                LabeledStatement: flatIndent,\n                SwitchBlock: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                Block: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                BlockComment: () => null,\n                Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                [\"Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody \" +\n                    \"ConstructorBody InterfaceBody ArrayInitializer\"]: foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n    }\n});\n/**\nJava language support.\n*/\nfunction java() {\n    return new LanguageSupport(javaLanguage);\n}\n\nexport { java, javaLanguage };\n"],"names":["javaLanguage","LRLanguage","define","name","parser","configure","props","indentNodeProp","add","IfStatement","continuedIndent","except","TryStatement","LabeledStatement","flatIndent","SwitchBlock","context","after","textAfter","closed","test","isCase","baseIndent","unit","Block","delimitedIndent","closing","BlockComment","Statement","foldNodeProp","foldInside","tree","from","to","languageData","commentTokens","line","block","open","close","indentOnInput","java","LanguageSupport"],"sourceRoot":""}