{"version":3,"file":"static/js/8819.f1ee76d7.chunk.js","mappings":"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","sources":["hooks/useUserUsageStats.ts","components/QuestionIconWithTooltip.tsx","components/UsageHistoryStatistics.tsx","pages/StatisticsPage.tsx"],"sourcesContent":["import { UserStatsData, useSuspendedBackendaiClient } from '.';\nimport { useSuspenseTanQuery } from './reactQueryAlias';\n\ntype Options = {\n  fetchKey?: string;\n};\n\nconst useUserUsageStats = (options?: Options) => {\n  const baiClient = useSuspendedBackendaiClient();\n\n  return useSuspenseTanQuery<UserStatsData[]>({\n    queryKey: ['UsageHistory', baiClient._config._userId, options?.fetchKey],\n    queryFn: () => {\n      return baiClient.resources.user_stats();\n    },\n  });\n};\n\nexport default useUserUsageStats;\n","import { QuestionCircleOutlined } from '@ant-design/icons';\nimport { theme, Tooltip } from 'antd';\nimport { TooltipPropsWithTitle } from 'antd/es/tooltip';\nimport React from 'react';\n\ninterface QuestionIconWithTooltipProps\n  extends Omit<TooltipPropsWithTitle, 'children'> {\n  iconProps?: React.ComponentProps<typeof QuestionCircleOutlined>;\n}\nconst QuestionIconWithTooltip = ({\n  iconProps,\n  ...tooltipProps\n}: QuestionIconWithTooltipProps) => {\n  const { token } = theme.useToken();\n  return (\n    <Tooltip {...tooltipProps}>\n      <QuestionCircleOutlined\n        style={{\n          color: token.colorTextTertiary,\n          cursor: 'help',\n        }}\n        {...iconProps}\n      />\n    </Tooltip>\n  );\n};\n\nexport default QuestionIconWithTooltip;\n","import {\n  convertBinarySizeUnit,\n  convertDecimalSizeUnit,\n  SizeUnit,\n} from '../helper';\nimport { UserStatsData, UserStatsDataKey } from '../hooks';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport useUserUsageStats from '../hooks/useUserUsageStats';\nimport { Period } from '../pages/StatisticsPage';\nimport Flex from './Flex';\nimport QuestionIconWithTooltip from './QuestionIconWithTooltip';\nimport { Column, ColumnConfig } from '@ant-design/charts';\nimport { Card } from 'antd';\nimport dayjs from 'dayjs';\nimport { useTranslation } from 'react-i18next';\n\ntype ByteUnit = 'B' | 'KiB' | 'MiB' | 'GiB' | 'TiB' | 'PiB' | 'EiB';\ntype DecimalUnit = 'B' | 'KB' | 'MB' | 'GB' | 'TB' | 'PB' | 'EB';\n\nconst DAY_LENGTH = 4 * 24;\nconst WEEK_LENGTH = DAY_LENGTH * 7;\n\ninterface GraphCardProps {\n  title: string;\n  tooltipText: string;\n  children: React.ReactNode;\n}\nconst GraphCard = ({ title, tooltipText, children }: GraphCardProps) => (\n  <Card\n    type=\"inner\"\n    title={\n      <Flex gap={'xxs'}>\n        {title}\n        <QuestionIconWithTooltip title={tooltipText} />\n      </Flex>\n    }\n    style={{ width: '100%' }}\n  >\n    {children}\n  </Card>\n);\n\ninterface getColumnConfigParams {\n  data: UserStatsData[];\n  key: UserStatsDataKey;\n  period: Period;\n  targetUnit: SizeUnit | 'count';\n  displayUnit: ByteUnit | DecimalUnit | 'count';\n  unitType: 'byte' | 'decimal' | 'count';\n  isDarkMode: boolean;\n}\n\nconst getColumnConfig = ({\n  data,\n  key,\n  period,\n  targetUnit,\n  displayUnit,\n  unitType,\n  isDarkMode,\n}: getColumnConfigParams): ColumnConfig => {\n  const formatValue = (value: number) => {\n    if (unitType === 'count') {\n      return value;\n    }\n    if (unitType === 'byte') {\n      return (\n        convertBinarySizeUnit(value.toString() + 'B', targetUnit as SizeUnit)\n          ?.number ?? 0\n      );\n    }\n    if (unitType === 'decimal') {\n      return (\n        convertDecimalSizeUnit(value.toString() + 'B', targetUnit as SizeUnit)\n          ?.number ?? 0\n      );\n    }\n    return value;\n  };\n\n  return {\n    data: data\n      .filter(\n        (_, i) =>\n          data.length - (period === '1D' ? DAY_LENGTH : WEEK_LENGTH) <= i,\n      )\n      .map((d) => ({\n        date: dayjs(d.date * 1000).format('MMM DD HH:mm'),\n        value: formatValue(d[key].value),\n      })),\n    xField: 'date',\n    yField: 'value',\n    axis: {\n      x: {\n        labelAutoHide: true,\n        tickFilter: (_: any, index: any) =>\n          index % (period === '1D' ? 12 : 48) === 0,\n      },\n      y: {\n        title: displayUnit,\n      },\n    },\n    animate: { enter: { type: 'growInY' } },\n    theme: isDarkMode ? 'dark' : 'light',\n  };\n};\n\ninterface UsageHistoryStatisticsProps {\n  period: Period;\n  fetchKey?: string;\n}\n\nconst UsageHistoryStatistics = ({\n  period,\n  fetchKey,\n}: UsageHistoryStatisticsProps) => {\n  const { t } = useTranslation();\n  const { data } = useUserUsageStats({\n    fetchKey,\n  });\n  const { isDarkMode } = useThemeMode();\n\n  return (\n    <Flex direction=\"column\" align=\"start\" gap=\"md\">\n      <GraphCard title=\"Sessions\" tooltipText={t('statistics.SessionsDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'num_sessions',\n            period,\n            targetUnit: 'count',\n            displayUnit: 'count',\n            unitType: 'count',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n      <GraphCard title=\"CPU\" tooltipText={t('statistics.CPUDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'cpu_allocated',\n            period,\n            targetUnit: 'count',\n            displayUnit: 'count',\n            unitType: 'count',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n      <GraphCard title=\"Memory\" tooltipText={t('statistics.MemoryDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'mem_allocated',\n            period,\n            targetUnit: 'G',\n            displayUnit: 'GiB',\n            unitType: 'byte',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n      <GraphCard title=\"GPU\" tooltipText={t('statistics.GPUDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'gpu_allocated',\n            period,\n            targetUnit: 'count',\n            displayUnit: 'count',\n            unitType: 'count',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n      <GraphCard title=\"IO-Read\" tooltipText={t('statistics.IOReadDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'io_read_bytes',\n            period,\n            targetUnit: 'M',\n            displayUnit: 'MiB',\n            unitType: 'decimal',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n      <GraphCard title=\"IO-Write\" tooltipText={t('statistics.IOWriteDesc')}>\n        <Column\n          height={200}\n          {...getColumnConfig({\n            data,\n            key: 'io_write_bytes',\n            period,\n            targetUnit: 'M',\n            displayUnit: 'MiB',\n            unitType: 'decimal',\n            isDarkMode,\n          })}\n        />\n      </GraphCard>\n    </Flex>\n  );\n};\n\nexport default UsageHistoryStatistics;\n","import BAICard from '../components/BAICard';\nimport BAIFetchKeyButton from '../components/BAIFetchKeyButton';\n// import BAITabs from '../components/BAITabs';\nimport Flex from '../components/Flex';\nimport UsageHistoryStatistics from '../components/UsageHistoryStatistics';\nimport { useUpdatableState } from '../hooks';\nimport { Alert, Form, Select, Skeleton } from 'antd';\nimport { Suspense, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { createEnumParam, useQueryParam, withDefault } from 'use-query-params';\n\nexport type Period = '1D' | '1W';\nconst periodParam = withDefault(createEnumParam<Period>(['1D', '1W']), '1D');\n\nconst StatisticsPage = () => {\n  const [selectedPeriod, setSelectedPeriod] = useQueryParam(\n    'period',\n    periodParam,\n  );\n  const { t } = useTranslation();\n\n  const [usageFetchKey, updateUsageFetchKey] = useUpdatableState('first');\n  const [isPendingUsageTransition, startUsageTransition] = useTransition();\n  let periodOptions: Array<{\n    label: string;\n    value: Period;\n  }> = [\n    {\n      label: t('statistics.1Day'),\n      value: '1D',\n    },\n    {\n      label: t('statistics.1Week'),\n      value: '1W',\n    },\n  ];\n\n  return (\n    <BAICard activeTabKey=\"usageHistory\" title={t('statistics.UsageHistory')}>\n      <Flex direction=\"column\" align=\"stretch\" gap={'md'}>\n        <Alert\n          showIcon\n          message={t('statistics.UsageHistoryNote')}\n          type=\"info\"\n        />\n        <Flex gap={'sm'} justify=\"between\">\n          <Form.Item\n            label={t('statistics.SelectPeriod')}\n            style={{ marginBottom: 0 }}\n          >\n            <Select\n              popupMatchSelectWidth={false}\n              options={periodOptions}\n              value={selectedPeriod}\n              onChange={(value) => setSelectedPeriod(value)}\n            />\n          </Form.Item>\n          <BAIFetchKeyButton\n            loading={isPendingUsageTransition}\n            value={usageFetchKey}\n            onChange={() => {\n              startUsageTransition(() => {\n                updateUsageFetchKey();\n              });\n            }}\n          />\n        </Flex>\n        <Suspense fallback={<Skeleton active />}>\n          <UsageHistoryStatistics\n            period={selectedPeriod || '1D'}\n            fetchKey={usageFetchKey}\n          />\n        </Suspense>\n      </Flex>\n      {/* <BAITabs\n        items={[\n          {\n            label: t('statistics.UsageHistory'),\n            key: 'usageHistory',\n            children: (\n            //  \n            ),\n          },\n          {\n            label: 'Live Stats',\n            key: 'liveStats',\n          },\n        ]}\n      /> */}\n    </BAICard>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["options","baiClient","useSuspendedBackendaiClient","useSuspenseTanQuery","queryKey","_config","_userId","fetchKey","queryFn","resources","user_stats","_ref","iconProps","tooltipProps","token","theme","useToken","_jsx","Tooltip","children","QuestionCircleOutlined","style","color","colorTextTertiary","cursor","GraphCard","title","tooltipText","Card","type","_jsxs","Flex","gap","QuestionIconWithTooltip","width","getColumnConfig","_ref2","data","key","period","targetUnit","displayUnit","unitType","isDarkMode","formatValue","value","_convertBinarySizeUni","_convertBinarySizeUni2","convertBinarySizeUnit","toString","number","_convertDecimalSizeUn","_convertDecimalSizeUn2","convertDecimalSizeUnit","filter","_","i","length","DAY_LENGTH","map","d","date","dayjs","format","xField","yField","axis","x","labelAutoHide","tickFilter","index","y","animate","enter","_ref3","t","useTranslation","useUserUsageStats","useThemeMode","direction","align","Column","height","periodParam","withDefault","createEnumParam","StatisticsPage","selectedPeriod","setSelectedPeriod","useQueryParam","usageFetchKey","updateUsageFetchKey","useUpdatableState","isPendingUsageTransition","startUsageTransition","useTransition","periodOptions","label","BAICard","activeTabKey","Alert","showIcon","message","justify","Form","Item","marginBottom","Select","popupMatchSelectWidth","onChange","BAIFetchKeyButton","loading","Suspense","fallback","Skeleton","active","UsageHistoryStatistics"],"sourceRoot":""}